var methods = {"i0":10,"i1":10,"i2":9,"i3":10,"i4":10,"i5":9,"i6":9,"i7":9,"i8":9,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Skript.PremennéSkriptu
java.lang.Object
Skript.PremennéSkriptu
Známe priame odvodené triedy:
Skript.PremenneSkriptu
Nadradená trieda:
Skript
public static class Skript.PremennéSkriptu
extends Object
Táto trieda uchováva a pracuje s mapami premenných skriptov. Jedna
 inštancia reprezentuje unikátny priestor premenných, v ktorom môžu byť
 uchované premenné, ktoré sú lokálne, globálne, obzorové, prípadne iné.
 Vždy je definovaný jeden hlavný (globálny) priestor premenných,
 s ktorým sa pracuje napríklad vtedy, keď prehľadávanie v ostatných
 aktívnych priesoroch zlyhá (pri čítaní premenných; pričom nie je
 zaručené, že premenná je definovaná v hlavnom priestore – ide len
 o stanovenie hierarchie prehľadávania).
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Object
citaj(String názov,
     Class&lt;?&gt; typ)
 Alias pre čítaj.
Object
čítaj(String názov,
     Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu, ktorá
 by mala byť definovaná v tomto priestore premenných
 skriptu.
static Skript.PremenneSkriptu
dajObzor(String názovObzoru)
Vráti pomenovaný priestor premenných skriptov, ktorý je
 v tomto programovacom rámci označovaný termínom „obzor.“ Ak
 priestor nejestvuje, tak je automaticky vytvorený.
boolean
existuje(String názov,
        Class&lt;?&gt; typ)
 Alias pre jestvuje.
boolean
jestvuje(String názov,
        Class&lt;?&gt; typ)
Zistí, či je premenná so zadaným názvom a typom
 definovaná v tomto priestore premenných skriptu.
static Skript.PremenneSkriptu
novyPriestor()
 Alias pre novýPriestor.
static Skript.PremenneSkriptu
novýPriestor()
Vytvorí nový priestor premenných skriptov.
static boolean
obzorExistuje(String názovObzoru)
 Alias pre obzorJestvuje.
static boolean
obzorJestvuje(String názovObzoru)
Zistí, či je definovaný pomenovaný priestor skriptov zvaný
 „obzor“ (pozri aj dajObzor).
void
vymaz()
 Alias pre vymaž.
void
vymaz(String názov,
     Class&lt;?&gt; typ)
 Alias pre vymaž.
void
vymaž()
Odstráni všetky premenné v tomto priestore premenných skriptov.
void
vymaž(String názov,
     Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu, ak
 je definovaná v tomto priestore premenných skriptu.
void
zapis(String názov,
     Object hodnota)
 Alias pre zapíš.
boolean
zapíš(String názov,
     Object hodnota)
Nastaví novú hodnotu premennej v tomto priestore
 premenných skriptu.
Zoznam&lt;String&gt;
zoznam(Class&lt;?&gt; typ)
Vytvorí zoznam premenných, ktoré sú definované v tomto
 priestore premenných skriptu so zadaným údajovým typom.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti metód
zoznam
public Zoznam&lt;String&gt; zoznam(Class&lt;?&gt; typ)
Vytvorí zoznam premenných, ktoré sú definované v tomto
 priestore premenných skriptu so zadaným údajovým typom. Ak
 je zadaný údajový typ neplatný (nepovolený, resp.
 nepodporovaný), tak je namiesto zoznamu vrátená hodnota
 null. Ak je vrátený prázdny zoznam reťazcov,
 tak to znamená, že v tomto priestore premenných nie je
 definovaná žiadna premenná so zadaným údajovým typom.
 
 Poznámka: Názvy premenných nie sú
 citlivé na veľkosť písmen. Ich zoznamy sú konštruované
 s pomocou parametra String.String.CASE_INSENSITIVE_ORDER.
Parametre:
typ – typ premenných zoznamu – povolené sú len:
     Double.class, Color.class,
     Poloha.class a String.class
Návratová hodnota:
zoznam definovaných premenných podľa zadaného
     údajového typu alebo hodnota null
jestvuje
public boolean jestvuje(String názov,
                        Class&lt;?&gt; typ)
Zistí, či je premenná so zadaným názvom a typom
 definovaná v tomto priestore premenných skriptu.
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class, Color.class, Poloha.class alebo String.class
Návratová hodnota:
ak premenná zadaného údajového typu jestvuje (to
     jest: premenná je definovaná), tak je návratovou
     hodnotou tejto metódy hodnota true;
     ak premenná nejestvuje alebo bol zadaný nepovolený
     údajový typ premennej, tak je návratovou hodnotou
     tejto metódy hodnota false
Pozri tiež:
Skript.premennáJestvuje(String, Trieda)
existuje
public boolean existuje(String názov,
                        Class&lt;?&gt; typ)
 Alias pre jestvuje.
čítaj
public Object čítaj(String názov,
                    Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu, ktorá
 by mala byť definovaná v tomto priestore premenných
 skriptu. Ak taká premenná nie je definovaná, tak bude
 návratová hodnota tejto metódy rovná hodnote
 null.
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class, Color.class,
     Poloha.class alebo String.class
Návratová hodnota:
ak premenná jestvuje, tak je návratovou hodnotou
     tejto metódy hodnota tejto premennej; ak premenná
     nejestvuje, prípadne bol zadaný nepovolený údajový
     typ premennej, tak je návratovou hodnotou tejto
     metódy hodnota null
Pozri tiež:
Skript.čítajPremennú(String, Trieda)
citaj
public Object citaj(String názov,
                    Class&lt;?&gt; typ)
 Alias pre čítaj.
zapíš
public boolean zapíš(String názov,
                     Object hodnota)
Nastaví novú hodnotu premennej v tomto priestore
 premenných skriptu. Ak je zadaná hodnota nepovoleného
 údajového typu, tak nebude nastavená hodnota žiadnej
 premennej. To isté platí pri pokuse o zapísanie hodnoty
 null alebo pri pokuse o nastavenie premennej
 s prázdnym menom. Úspešnosť (resp. neúspešnosť) nastavenia
 hodnoty premennej potvrdzuje návratová hodnota tejto
 metódy – true (úspech) / false
 (neúspech).
 
 Poznámka: Táto metóda
 automaticky definuje nejestvujúce premenné.
Parametre:
názov – názov premennej
hodnota – hodnota premennej povoleného údajového typu –
     povolené sú: Double,
     Color, Poloha alebo
     String
Návratová hodnota:
kontrolná návratová hodnota (ide najmä o overenie
     toho, či bola naozaj zadaná hodnota niektorého
     z povolených údajových typov); ak je návratová hodnota
     true, tak bola zadaná hodnota zapísaná do
     premennej prislúchajúceho údajového typu, v opačnom
     prípade je návratová hodnota rovná false
Pozri tiež:
Skript.zapíšPremennú(String, Object)
zapis
public void zapis(String názov,
                  Object hodnota)
 Alias pre zapíš.
vymaž
public void vymaž(String názov,
                  Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu, ak
 je definovaná v tomto priestore premenných skriptu.
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class, Color.class,
     Poloha.class alebo String.class
Pozri tiež:
Skript.vymažPremennú(String, Trieda)
vymaz
public void vymaz(String názov,
                  Class&lt;?&gt; typ)
 Alias pre vymaž.
vymaž
public void vymaž()
Odstráni všetky premenné v tomto priestore premenných skriptov.
 Po vykonaní tejto metódy bude tento priestor premenných skriptov
 prázdny.
vymaz
public void vymaz()
 Alias pre vymaž.
novýPriestor
public static Skript.PremenneSkriptu novýPriestor()
Vytvorí nový priestor premenných skriptov. Interpreter skriptov
 túto metódu využíva na vytvorenie nového priestoru pri každom
 vstupe (vnorení) do vnoreného bloku.
Návratová hodnota:
nový priestor premenných skriptov
novyPriestor
public static Skript.PremenneSkriptu novyPriestor()
 Alias pre novýPriestor.
obzorJestvuje
public static boolean obzorJestvuje(String názovObzoru)
Zistí, či je definovaný pomenovaný priestor skriptov zvaný
 „obzor“ (pozri aj dajObzor). Metóda
 vráti true len vtedy, ak priestor jestvuje. Pozor,
 pri zadaní prázdneho názvu obzoru vráti metóda vždy hodnotu
 true, pretože prázdne meno má význam globálneho
 priestoru premenných, ktorý jestvuje vždy.
Parametre:
názovObzoru – identifikátor (meno) menného priestoru
     premenných skriptov
Návratová hodnota:
true, ak priestor so zadaným menom jestvuje
Pozri tiež:
dajObzor(String), 
Skript.PremennéSkriptu
obzorExistuje
public static boolean obzorExistuje(String názovObzoru)
 Alias pre obzorJestvuje.
dajObzor
public static Skript.PremenneSkriptu dajObzor(String názovObzoru)
Vráti pomenovaný priestor premenných skriptov, ktorý je
 v tomto programovacom rámci označovaný termínom „obzor.“ Ak
 priestor nejestvuje, tak je automaticky vytvorený. Špeciálny
 prípad nastáva pri zadaní prázdneho názvu obzoru. Vtedy metóda
 vráti globálny priestor premenných…
 
 Poznámka: Globálny priestor premenných
 získame aj volaním metódy Skript.globálnePremenné.
Parametre:
názovObzoru – identifikátor (meno) menného priestoru
     premenných skriptov
Návratová hodnota:
inštancia triedy premenných skriptov (pomenovaný
     priestor premenných skriptov – obzor)
Pozri tiež:
obzorJestvuje(String), 
Skript.PremennéSkriptu
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":9,"i10":9,"i11":9,"i12":9,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":9,"i56":9,"i57":9,"i58":9,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Archív
java.lang.Object
Archív
Všetky implementované rozhrania:
Closeable, AutoCloseable
Známe priame odvodené triedy:
Archiv
public class Archív
extends Object
implements Closeable
Táto trieda slúži na prácu s údajovými archívmi vo formáte ZIP.
 Vnútorne používa mierne prispôsobený balíček 
org.apache.tools.zip (ktorý je
 zameraný práve na prácu so ZIP archívmi) projektu 
Apache Ant. Balíček
 je uvoľnený pod podmienkami licencie 
Apache License – Version 2.0,
 January 2004.
 
 
 
 Trieda Archív poskytuje programátorské rozhranie na čo
 najjednoduchšie vytvorenie archívu jeho zápis, čítanie alebo analýzu.
 Programovací rámec umožňuje prepojenie iných súčastí (napríklad
 súboru) s archívom a tým ešte väčšmi zjednodušiť
 prácu s ním. (Pozri príklad na konci tohto opisu.)
 
 Trieda je navrhnutá tak, aby bolo jej používanie čo najintuitívnejšie.
 Napríklad, ak máme jestvujúci archív, rozbaliť ho (aj s výpisom počtu
 rozbalených položiek) môžeme jednoducho takto:
 
 
Svet.vypíšRiadok("Počet rozbalených položiek: ",
    new Archív("archív_na_rozbalenie.zip").
        rozbaľArchív("cieľový_priečinok"));
 
 Naopak, vytvoriť jednoduchý archív môžeme takto:
 
 
Archív archív = new Archív("archív_na_zbalenie.zip");
archív.otvorNaZápis();
archív.pridajPoložku("názov_položky", "cesta/názov_súboru_na_zbalenie");
// archív.pridajPoložku(…
archív.zavri();
 
 Na vytvorenie archívu, ktorý (bez filtrovania) zbalí celý obsah
 priečinka na disku môžeme využiť nasledujúce definície:
 
 
// Inštancia archívu.
private Archív archív = new Archív();
// Rekurzívna metóda pridávajúca do archívu obsah priečinka
// a podpriečinkov.
private void pridajObsahPriečinka(String priečinok, String podpriečinok)
    throws IOException
{
    String[] zoznam = Súbor.zoznam(priečinok + podpriečinok);
    for (String položka : zoznam)
    {
        String položkaArchívu = podpriečinok + položka;
        if (Súbor.jePriečinok(priečinok + položkaArchívu))
        {
            // Rekurzívne pridávanie obsahu (pod)priečinka:
            Svet.vypíšRiadok('«', položkaArchívu, '»');
            archív.pridajPriečinok(položkaArchívu);
            pridajObsahPriečinka(priečinok, položkaArchívu + '/');
        }
        else
        {
            // Pridanie položky súboru:
            Svet.vypíšRiadok(položkaArchívu);
            archív.pridajPoložku(položkaArchívu,
                priečinok + položkaArchívu);
        }
    }
}
// Metóda slúžiaca na spustenie procesu balenia.
public void zbaľPriečinok(String názovArchívu, String priečinok)
    throws IOException
{
    priečinok = priečinok.replace('\\', '/');
    if (!priečinok.endsWith("/")) priečinok += '/';
    archív.otvorNaZápis(názovArchívu);
    pridajObsahPriečinka(priečinok, "");
    archív.zavri();
}
 
 Príkaz slúžiaci na zahájenie balenia s využitím týchto definícií
 potom môže vyzerať takto:
 
 
zbaľPriečinok("názov_archívu.zip", "priečinok");
 
  
 
 Príklad:
 
 Tento príklad ukazuje ako pripojiť archív ku konfiguračnému súboru
 (čím sa vytvorí zbalená konfigurácia) a naznačuje prácu s konfiguráciou
 (ktorá je štandardná – rovnaká ako v prípade nepripojeného archívu –
 pozri napríklad príklad v opise triedy ObsluhaUdalostí – v sekcii Ďalšie udalosti).
 
 
import knižnica.*;
public class PripojenieArchívu extends GRobot
{
    private PripojenieArchívu()
    {
        new ObsluhaUdalostí()
        {
            @Override public boolean konfiguráciaZmenená()
            {
                // Overenie podmienok a ak treba zapísať konfiguráciu,
                // tak návrat: return true;
                return false;
            }
            @Override public void zapíšKonfiguráciu(Súbor súbor)
                throws java.io.IOException
            {
                // Zápis vlastných vlastností:
                // súbor.zapíšVlastnosť("názov", hodnota);
                // …
            }
            @Override public void čítajKonfiguráciu(Súbor súbor)
                throws java.io.IOException
            {
                // Čítanie vlastných vlastností:
                // hodnota = súbor.čítajVlastnosť("názov", predvolenáHodnota);
                // …
            }
        };
    }
    public static void main(String[] args)
    {
        // Pripojenie archívu ku konfigurácii:
        Svet.konfiguračnýSúbor().pripojArchív(
            new Archív("PripojenieArchívu.zip"));
        // Použitie konfigurácie:
        Svet.použiKonfiguráciu("PripojenieArchívu.cfg");
        // Konštrukcia:
        new PripojenieArchívu();
    }
}
 
 Trieda je navrhnutá tak, aby sa dala používať aj bez nevyhnutnosti
 obsluhy výnimiek.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Archív()
Predvolený konštruktor.
Archív(String názov)
Konštruktor prijímajúci názov archívu.
Archív(String cesta,
      String názov)
Konštruktor prijímajúci cestu na disku a názov archívu.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
String
cestaNaDisku()
Vráti aktuálnu pracovnú cestu na pevnom disku alebo
 null, ak nie je nastavená žiadna cesta.
void
cestaNaDisku(String cesta)
Nastaví alebo zruší pracovnú cestu na pevnom disku.
String
cestaVArchive()
 Alias pre cestaVArchíve.
String
cestaVArchíve()
Vráti aktuálnu cestu nastavenú v rámci obsahu archívu alebo
 null, ak nie je nastavená žiadna cesta.
void
cestaVArchive(String cesta)
 Alias pre cestaVArchíve.
void
cestaVArchíve(String cesta)
Nastaví alebo zruší novú cestu v rámci obsahu archívu.
void
close()
Zavrie archív, ktorý bol predtým otvorený na čítanie alebo zápis.
apacheAntZIP.ZipEntry
dajPolozku(String názovPoložky)
 Alias pre dajPoložku.
apacheAntZIP.ZipEntry
dajPoložku(String názovPoložky)
Vráti jestvujúcu položku archívu knižnice 
Apache Ant
 
ZipEntry na prácu s ňou.
static String
datumNaRetazec(long miliDátum)
 Alias pre dátumNaReťazec.
static String
dátumNaReťazec(long miliDátum)
Zostaví reťazec dátumu v predvolenom formáte zo zadaného počtu
 milisekúnd počítaných od začiatku takzvanej epochy – polnoc 1.
static String
datumNaRetazec(long miliDátum,
              String formát)
 Alias pre dátumNaReťazec.
static String
dátumNaReťazec(long miliDátum,
              String formát)
Podľa zadaných údajov vytvorí reťazec dátumu.
String
datumPolozky(String názovPoložky)
 Alias pre dátumPoložky.
void
datumPolozky(String názovPoložky,
            String dátumPoložky)
 Alias pre dátumPoložky.
long
datumPolozkyAkoCislo(String názovPoložky)
 Alias pre dátumPoložkyAkoČíslo.
void
datumPolozkyAkoCislo(String názovPoložky,
                    long dátum)
 Alias pre dátumPoložkyAkoČíslo.
String
dátumPoložky(String názovPoložky)
Vráti dátum položky v reťazcovej podobe.
void
dátumPoložky(String názovPoložky,
            String dátumPoložky)
Nastaví zadanej položke nový časový údaj jej vytvorenia.
long
dátumPoložkyAkoČíslo(String názovPoložky)
Vráti dátum položky v číselnej podobe.
void
dátumPoložkyAkoČíslo(String názovPoložky,
                    long dátum)
Nastaví zadanej položke nový časový údaj jej vytvorenia podľa
 zadaného číselného údaja.
String
komentar()
 Alias pre komentár.
String
komentár()
Vráti komentár otvoreného archívu, ak je definovaný.
void
komentar(String komentár)
 Alias pre komentár.
void
komentár(String komentár)
Nastaví nový komentár archívu.
String
komentarPolozky(String názovPoložky)
 Alias pre komentárPoložky.
void
komentarPolozky(String názovPoložky,
               String komentár)
 Alias pre komentárPoložky.
String
komentárPoložky(String názovPoložky)
Vráti komentár zadanej položky.
void
komentárPoložky(String názovPoložky,
               String komentár)
Nastaví zadanej položke nový komentár.
long
komprimovanaVelkostPolozky(String názovPoložky)
 Alias pre komprimovanáVeľkosťPoložky.
long
komprimovanáVeľkosťPoložky(String názovPoložky)
Vráti komprimovanú veľkosť zadanej položky.
String
nazov()
 Alias pre názov.
String
názov()
Vráti aktuálny názov tohto archívu alebo null, ak nie
 je nastavený žiadny názov.
void
nazov(String názov)
 Alias pre názov.
void
názov(String názov)
Nastaví alebo zruší názov tohto archívu.
apacheAntZIP.ZipFile
otvorNaCitanie()
 Alias pre otvorNaČítanie.
apacheAntZIP.ZipFile
otvorNaCitanie(String názov)
 Alias pre otvorNaČítanie.
apacheAntZIP.ZipFile
otvorNaCitanie(String cesta,
              String názov)
 Alias pre otvorNaČítanie.
apacheAntZIP.ZipFile
otvorNaČítanie()
Otvorí archív na čítanie.
apacheAntZIP.ZipFile
otvorNaČítanie(String názov)
Otvorí archív so zadaným menom na čítanie.
apacheAntZIP.ZipFile
otvorNaČítanie(String cesta,
              String názov)
Otvorí archív so zadaným menom na zadanej ceste na čítanie.
apacheAntZIP.ZipOutputStream
otvorNaZapis()
 Alias pre otvorNaZápis.
apacheAntZIP.ZipOutputStream
otvorNaZápis()
Otvorí archív na zápis.
apacheAntZIP.ZipOutputStream
otvorNaZapis(String názov)
 Alias pre otvorNaZápis.
apacheAntZIP.ZipOutputStream
otvorNaZápis(String názov)
Otvorí archív so zadaným menom na zápis.
apacheAntZIP.ZipOutputStream
otvorNaZapis(String cesta,
            String názov)
 Alias pre otvorNaZápis.
apacheAntZIP.ZipOutputStream
otvorNaZápis(String cesta,
            String názov)
Otvorí archív so zadaným menom na zadanej ceste na zápis.
int
pocetPoloziek()
 Alias pre početPoložiek.
int
početPoložiek()
Vráti aktuálny počet položiek archívu.
apacheAntZIP.ZipEntry
pridajPolozku(String názovPoložky,
             byte[] údajePoložky)
 Alias pre pridajPoložku.
apacheAntZIP.ZipEntry
pridajPolozku(String názovPoložky,
             String názovSúboru)
 Alias pre pridajPoložku.
apacheAntZIP.ZipEntry
pridajPoložku(String názovPoložky,
             byte[] údajePoložky)
Zapíše údaje zadané vo forme poľa bajtov do položky archívu so
 zadaným názvom.
apacheAntZIP.ZipEntry
pridajPoložku(String názovPoložky,
             String názovSúboru)
Pridá do archívu údaje zo zadaného súboru.
apacheAntZIP.ZipEntry
pridajPriecinok(String názov)
 Alias pre pridajPriečinok.
apacheAntZIP.ZipEntry
pridajPriečinok(String názov)
Pridá do archívu položku reprezentujúcu priečinok.
static long
retazecNaDatum(String dátum)
 Alias pre reťazecNaDátum.
static long
reťazecNaDátum(String dátum)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy (polnoc 1. januára 1970 greenwichského času – v našom časovom
 pásme to znamená jednu hodinu v noci) podľa zadaného reťazca
 v predvolenom formáte.
static long
retazecNaDatum(String dátum,
              String formát)
 Alias pre reťazecNaDátum.
static long
reťazecNaDátum(String dátum,
              String formát)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy (polnoc 1. januára 1970 greenwichského času — v našom časovom
 pásme to znamená jednu hodinu v noci) podľa zadaných
 reťazcov dátumu a formátu.
int
rozbalArchiv()
 Alias pre rozbaľArchív.
int
rozbaľArchív()
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(null, false, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
int
rozbalArchiv(boolean prepísať)
 Alias pre rozbaľArchív.
int
rozbaľArchív(boolean prepísať)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(null, prepísať,
 true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
int
rozbalArchiv(String cestaNaRozbalenie)
 Alias pre rozbaľArchív.
int
rozbaľArchív(String cestaNaRozbalenie)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(cestaNaRozbalenie,
 false, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
int
rozbalArchiv(String cestaNaRozbalenie,
            boolean prepísať)
 Alias pre rozbaľArchív.
int
rozbaľArchív(String cestaNaRozbalenie,
            boolean prepísať)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(cestaNaRozbalenie, prepísať, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
int
rozbalArchiv(String cestaNaRozbalenie,
            boolean prepísať,
            boolean vytvoriťCestu)
 Alias pre rozbaľArchív.
int
rozbaľArchív(String cestaNaRozbalenie,
            boolean prepísať,
            boolean vytvoriťCestu)
Rozbalí tento balíček do cieľovej lokality.
byte[]
udajePolozky(String názovPoložky)
 Alias pre údajePoložky.
byte[]
údajePoložky(String názovPoložky)
Prečíta všetky dekomprimované údaje položky so zadaným názvom
 a vráti ich vo forme poľa bajtov.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky,
           boolean prepísať)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky,
           boolean prepísať,
           boolean vytvoriťCestu)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky,
           String názovSúboru)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky,
           String názovSúboru,
           boolean prepísať)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
ulozPolozku(String názovPoložky,
           String názovSúboru,
           boolean prepísať,
           boolean vytvoriťCestu)
 Alias pre uložPoložku.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky, názovSúboru)
 so zadaným parametrom názovSúboru rovným null.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky,
           boolean prepísať)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky,
 názovSúboru, prepísať) so zadaným parametrom názovSúboru rovným null.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky,
           boolean prepísať,
           boolean vytvoriťCestu)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky,
 názovSúboru, prepísať, vytvoriťCestu) so zadaným parametrom názovSúboru rovným null.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky,
           String názovSúboru)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky,
           String názovSúboru,
           boolean prepísať)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null.
apacheAntZIP.ZipEntry
uložPoložku(String názovPoložky,
           String názovSúboru,
           boolean prepísať,
           boolean vytvoriťCestu)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null.
boolean
umoznitAutomatickeOtvorenie()
 Alias pre umožniťAutomatickéOtvorenie.
void
umoznitAutomatickeOtvorenie(boolean umožniťAutomatickéOtvorenie)
 Alias pre umožniťAutomatickéOtvorenie.
boolean
umožniťAutomatickéOtvorenie()
Overí, či smie byť umožnené automatické otvorenie tohto archívu
 inými inštanciami programovacieho rámca, ktoré ho budú chcieť použiť.
void
umožniťAutomatickéOtvorenie(boolean umožniťAutomatickéOtvorenie)
Nastaví príznak toho, či smie byť umožnené automatické otvorenie
 tohto archívu inými inštanciami programovacieho rámca, ktoré ho budú
 chcieť použiť.
long
velkostPolozky(String názovPoložky)
 Alias pre veľkosťPoložky.
long
veľkosťPoložky(String názovPoložky)
Vráti aktuálnu (nekomprimovanú) veľkosť položky (identifikovanej
 názvom).
void
zavri()
Zavrie archív, ktorý bol predtým otvorený na čítanie alebo zápis.
String[]
zoznamPoloziek()
 Alias pre zoznamPoložiek.
String[]
zoznamPoložiek()
Vytvorí a vráti aktuálny zoznam položiek v archíve vo forme
 poľa reťazcov.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Archív
public Archív()
Predvolený konštruktor. Po konštrukcii môže programátor otvoriť
 archív na čítanie alebo
 zápis.
Pozri tiež:
otvorNaČítanie(String), 
otvorNaZápis(String)
Archív
public Archív(String názov)
Konštruktor prijímajúci názov archívu. Po tomto type konštrukcie
 môže programátor otvoriť archív metódami otvorNaČítanie() a otvorNaZápis(), prípade
 prekryť názov súboru a to buď metódou názov,
 alebo otvorením metódami otvorNaČítanie(názov) a otvorNaZápis(názov). Ak bude zadaný názov archívu nenulový (nemajúci
 hodnotu null), tak bude zároveň povolené automatické otvorenie
 archívu.
 
 Tip: Názov archívu môže byť od cesty oddelený
 s pomocou konštruktora, ktorý prijíma cestu a názov archívu zvlášť
 Archív(cesta, názov), alebo s použitím
 metódy cestaNaDisku na dodatočné
 nastavenie cesty k archívu.
Parametre:
názov – meno archívu
Pozri tiež:
názov(String), 
otvorNaČítanie(), 
otvorNaZápis()
Archív
public Archív(String cesta,
              String názov)
Konštruktor prijímajúci cestu na disku a názov archívu. Po tomto
 type konštrukcie môže programátor otvoriť archív metódami otvorNaČítanie() a otvorNaZápis(), prípade prekryť cestu a/alebo názov súboru niektorou
 zo súvisiacich metód: cestaNaDisku(cesta),
 názov, otvorNaČítanie(názov) alebo otvorNaZápis(názov). Ak bude zadaný názov archívu nenulový (nemajúci
 hodnotu null), tak bude zároveň povolené automatické otvorenie
 archívu.
Parametre:
cesta – pracovná cesta (na pevnom disku)
názov – meno archívu (tiež)
Pozri tiež:
cestaNaDisku(String), 
názov(String), 
otvorNaČítanie(), 
otvorNaZápis()
Podrobnosti metód
názov
public String názov()
Vráti aktuálny názov tohto archívu alebo null, ak nie
 je nastavený žiadny názov.
Návratová hodnota:
aktuálny názov archívu alebo null
Pozri tiež:
názov(String), 
otvorNaČítanie(), 
otvorNaZápis()
nazov
public String nazov()
 Alias pre názov.
názov
public void názov(String názov)
Nastaví alebo zruší názov tohto archívu. Táto metóda zavrie
 prípadný otvorený archív. Hodnota null ruší nastavenie
 názvu archívu.
 
 Tip: Názov archívu môže byť od cesty oddelený
 s pomocou použitia metódy cestaNaDisku
 alebo konštruktorom, ktorý prijíma cestu a názov archívu zvlášť:
 Archív(cesta, názov).
Parametre:
názov – nový názov archívu alebo null
Pozri tiež:
názov(), 
otvorNaČítanie(), 
otvorNaZápis()
nazov
public void nazov(String názov)
 Alias pre názov.
umožniťAutomatickéOtvorenie
public boolean umožniťAutomatickéOtvorenie()
Overí, či smie byť umožnené automatické otvorenie tohto archívu
 inými inštanciami programovacieho rámca, ktoré ho budú chcieť použiť.
 Podrobnosti o tejto vlastnosti sú v opise metódy umožniťAutomatickéOtvorenie
Návratová hodnota:
pravdivostná hodnota vyjadrujúca stav povolenia tejto
     vlastnosti
Pozri tiež:
umožniťAutomatickéOtvorenie(boolean), 
Archív(String), 
Archív(String, String)
umoznitAutomatickeOtvorenie
public boolean umoznitAutomatickeOtvorenie()
 Alias pre umožniťAutomatickéOtvorenie.
umožniťAutomatickéOtvorenie
public void umožniťAutomatickéOtvorenie(boolean umožniťAutomatickéOtvorenie)
Nastaví príznak toho, či smie byť umožnené automatické otvorenie
 tohto archívu inými inštanciami programovacieho rámca, ktoré ho budú
 chcieť použiť. Napríklad trieda Súbor s pripojeným archívom. Automatické otvorenie
 vyžaduje, aby mal archív priradený názov.
 To sa dá docieliť rôznymi spôsobmi – prislúchajúcim konštruktorom
 (Archív(názov) alebo Archív(cesta, názov)), metódou názov
 alebo otvorením archívu niektorou z metód:
 otvorNaČítanie(názov),
 otvorNaZápis(názov). Predvolená hodnota
 závisí od spôsobu konštrukcie. Platí zásada, že ak je pri konštrukcii
 inštancie zadaný nenulový názov (nemajúci hodnotu null),
 tak je hodnota vlastnosti automatického otvorenia nastavená na
 true, inak na false.
Parametre:
umožniťAutomatickéOtvorenie – pravdivostná hodnota vyjadrujúca
     stav povolenia tejto vlastnosti
Pozri tiež:
umožniťAutomatickéOtvorenie(), 
Archív(String), 
Archív(String, String), 
názov(String)
umoznitAutomatickeOtvorenie
public void umoznitAutomatickeOtvorenie(boolean umožniťAutomatickéOtvorenie)
 Alias pre umožniťAutomatickéOtvorenie.
cestaVArchíve
public String cestaVArchíve()
Vráti aktuálnu cestu nastavenú v rámci obsahu archívu alebo
 null, ak nie je nastavená žiadna cesta.
Návratová hodnota:
aktuálna cesta vo vnútri archívu alebo null
Pozri tiež:
cestaVArchíve(String), 
cestaNaDisku(), 
cestaNaDisku(String)
cestaVArchive
public String cestaVArchive()
 Alias pre cestaVArchíve.
cestaVArchíve
public void cestaVArchíve(String cesta)
Nastaví alebo zruší novú cestu v rámci obsahu archívu. Hodnota
 null ruší nastavenie cesty. Cesta v archíve zameriava
 (presmerúva) všetky metódy pracujúce s položkami archívu do tohto
 vnútorného umiestnenia. Jej použitie treba zvážiť. V mnohých
 prípadoch môže byť výhodné (napríklad pri pridávaní viacerých
 položiek do rovnakého podpriečinka v archíve) a naopak, sú prípady,
 v ktorých by mohlo jej nastavenie prekážať (napríklad pri
 automatickom spracúvaní názvov položiek, ktoré už cestu v archíve
 obsahujú – na zamedzenie duplicít alebo nedorozumení).
Parametre:
cesta – nová cesta vo vnútri archívu alebo null
Pozri tiež:
cestaVArchíve(), 
cestaNaDisku(), 
cestaNaDisku(String)
cestaVArchive
public void cestaVArchive(String cesta)
 Alias pre cestaVArchíve.
cestaNaDisku
public String cestaNaDisku()
Vráti aktuálnu pracovnú cestu na pevnom disku alebo
 null, ak nie je nastavená žiadna cesta.
 
 Pracovná cesta je použitá pri otváraní archívu (na
 čítanie alebo
 zápis) a pri
 pridávaní
 položiek z pevného disku.
Návratová hodnota:
aktuálna pracovná cesta alebo null
Pozri tiež:
cestaNaDisku(String), 
cestaVArchíve(), 
cestaVArchíve(String), 
otvorNaČítanie(String), 
otvorNaZápis(String), 
pridajPoložku(String, String)
cestaNaDisku
public void cestaNaDisku(String cesta)
Nastaví alebo zruší pracovnú cestu na pevnom disku. Hodnota
 null ruší nastavenie cesty.
 
 Pracovná cesta je použitá pri otváraní archívu (na
 čítanie alebo
 zápis) a pri
 pridávaní
 položiek z pevného disku.
Parametre:
cesta – nová pracovná cesta alebo null
Pozri tiež:
cestaNaDisku(), 
cestaVArchíve(), 
cestaVArchíve(String), 
otvorNaČítanie(String), 
otvorNaZápis(String), 
pridajPoložku(String, String)
zavri
public void zavri()
           throws IOException
Zavrie archív, ktorý bol predtým otvorený na čítanie alebo zápis.
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaČítanie(), 
otvorNaZápis(), 
otvorNaČítanie(String), 
otvorNaZápis(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(String, String), 
close()
close
public void close()
           throws IOException
Zavrie archív, ktorý bol predtým otvorený na čítanie alebo zápis. Táto metóda je definovaná ako
 súčasť implementácie rozhrania Closeable.
 Vnútorne volá metódu zavri.
Definované:
close v rozhraní Closeable
Definované:
close v rozhraní AutoCloseable
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaČítanie(), 
otvorNaZápis(), 
otvorNaČítanie(String), 
otvorNaZápis(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(String, String), 
zavri()
otvorNaČítanie
public knižnica.apacheAntZIP.ZipFile otvorNaČítanie()
                                             throws IOException
Otvorí archív na čítanie. Archív musí mať vopred priradené meno
 (buď priamo konštruktorom, alebo
 metódou názov). Ak súbor s archívom
 nejestvuje, tak vznikne výnimka. Musí ísť o fyzický súbor na pevnom
 disku umiestnený na aktuálnej lokalite, ceste určenej v názve archívu
 alebo na ceste určenej vlastnosťou cestaNaDisku.
Návratová hodnota:
„vstupný archív“ knižnice 
Apache Ant 
ZipFile na vykonanie prípadných
     ďalších úprav (nastavenie komentára, úprava rôznych konfiguračných
     položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
Archív(String), 
názov(String), 
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaCitanie
public knižnica.apacheAntZIP.ZipFile otvorNaCitanie()
                                             throws IOException
 Alias pre otvorNaČítanie.
Výnimky:
IOException
otvorNaZápis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZápis()
                                                   throws IOException
Otvorí archív na zápis. Zapisovaný súbor bude vytvorený alebo
 prepísaný buď na aktuálnom umiestnení, alebo na ceste určenej
 vlastnosťou cestaNaDisku (prípadne
 inak, napríklad cestou určenou priamo v názve archívu).
 
 Upozornenie: Ak použijete objekt 
ZipOutputStream, ktorý je návratovou
 hodnotou tejto metódy na pridávanie nových položiek, tak táto trieda
 programovacieho rámca nebude schopná detegovať duplicitné položky, ani
 spätne pracovať s pridanými položkami, pretože ich evidenciu vykonáva
 vo vlastnej réžii nad rámec možností triedy 
ZipOutputStream.
Návratová hodnota:
„výstupný archív“ (prúd) knižnice 
Apache Ant
     
ZipOutputStream na vykonanie
     prípadných ďalších úprav (nastavenie komentára, úprava rôznych
     konfiguračných položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
Archív(String), 
názov(String), 
otvorNaZápis(String), 
otvorNaZápis(String, String), 
otvorNaČítanie(), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaZapis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZapis()
                                                   throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
otvorNaČítanie
public knižnica.apacheAntZIP.ZipFile otvorNaČítanie(String názov)
                                             throws IOException
Otvorí archív so zadaným menom na čítanie. Ak súbor s archívom
 nejestvuje, tak vznikne výnimka. Musí ísť o fyzický súbor na pevnom
 disku umiestnený na aktuálnej lokalite, ceste určenej v názve archívu
 alebo na ceste určenej vlastnosťou cestaNaDisku.
Parametre:
názov – meno archívu
Návratová hodnota:
„vstupný archív“ knižnice 
Apache Ant 
ZipFile na vykonanie prípadných
     ďalších úprav (nastavenie komentára, úprava rôznych konfiguračných
     položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaČítanie(), 
otvorNaČítanie(String, String), 
otvorNaZápis(String), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaCitanie
public knižnica.apacheAntZIP.ZipFile otvorNaCitanie(String názov)
                                             throws IOException
 Alias pre otvorNaČítanie.
Výnimky:
IOException
otvorNaZápis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZápis(String názov)
                                                   throws IOException
Otvorí archív so zadaným menom na zápis. Zapisovaný súbor bude
 vytvorený alebo prepísaný buď na aktuálnom umiestnení, alebo na
 ceste určenej vlastnosťou cestaNaDisku
 (prípadne inak, napríklad cestou určenou priamo v názve archívu).
 
 Upozornenie: Ak použijete objekt  
ZipOutputStream, ktorý je návratovou
 hodnotou tejto metódy na pridávanie nových položiek, tak táto trieda
 programovacieho rámca nebude schopná detegovať duplicitné položky, ani
 spätne pracovať s pridanými položkami, pretože ich evidenciu vykonáva
 vo vlastnej réžii nad rámec možností triedy  
ZipOutputStream.
Parametre:
názov – meno archívu
Návratová hodnota:
„výstupný archív“ (prúd) knižnice 
Apache Ant
     
ZipOutputStream na vykonanie
     prípadných ďalších úprav (nastavenie komentára, úprava rôznych
     konfiguračných položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaZápis(), 
otvorNaČítanie(String), 
otvorNaZápis(String, String), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaZapis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZapis(String názov)
                                                   throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
otvorNaČítanie
public knižnica.apacheAntZIP.ZipFile otvorNaČítanie(String cesta,
                                                    String názov)
                                             throws IOException
Otvorí archív so zadaným menom na zadanej ceste na čítanie. Ďalšie
 informácie sú v opisoch metód otvorNaČítanie a cestaNaDisku.
Parametre:
cesta – pracovná cesta (na pevnom disku)
názov – meno archívu
Návratová hodnota:
„vstupný archív“ knižnice 
Apache Ant 
ZipFile na vykonanie prípadných
     ďalších úprav (nastavenie komentára, úprava rôznych konfiguračných
     položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaČítanie(), 
otvorNaČítanie(String), 
otvorNaZápis(String, String), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaCitanie
public knižnica.apacheAntZIP.ZipFile otvorNaCitanie(String cesta,
                                                    String názov)
                                             throws IOException
 Alias pre otvorNaČítanie.
Výnimky:
IOException
otvorNaZápis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZápis(String cesta,
                                                          String názov)
                                                   throws IOException
Otvorí archív so zadaným menom na zadanej ceste na zápis. Ďalšie
 informácie sú v opisoch metód otvorNaČítanie a cestaNaDisku.
Parametre:
cesta – pracovná cesta (na pevnom disku)
názov – meno archívu
Návratová hodnota:
„výstupný archív“ (prúd) knižnice 
Apache Ant
     
ZipOutputStream na vykonanie
     prípadných ďalších úprav (nastavenie komentára, úprava rôznych
     konfiguračných položiek podľa vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaZápis(), 
otvorNaZápis(String), 
otvorNaČítanie(String, String), 
zavri(), 
close(), 
cestaNaDisku()
otvorNaZapis
public knižnica.apacheAntZIP.ZipOutputStream otvorNaZapis(String cesta,
                                                          String názov)
                                                   throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
početPoložiek
public int početPoložiek()
Vráti aktuálny počet položiek archívu.
Návratová hodnota:
počet položiek uložených v archíve
pocetPoloziek
public int pocetPoloziek()
 Alias pre početPoložiek.
zoznamPoložiek
public String[] zoznamPoložiek()
Vytvorí a vráti aktuálny zoznam položiek v archíve vo forme
 poľa reťazcov.
Návratová hodnota:
aktuálny zoznam položiek v archíve vo forme poľa reťazcov
zoznamPoloziek
public String[] zoznamPoloziek()
 Alias pre zoznamPoložiek.
dátumNaReťazec
public static String dátumNaReťazec(long miliDátum)
Zostaví reťazec dátumu v predvolenom formáte zo zadaného počtu
 milisekúnd počítaných od začiatku takzvanej epochy – polnoc 1.
 januára 1970 greenwichského času (v našom časovom pásme to znamená
 jednu hodinu v noci).
 
 Predvolený formát má tvar:
 «deň». «mesiac». «rok»,
 «hodina»:«minúta»:«sekunda»,
 pričom hodiny, minúty a sekundy sú zľava zarovnané nulou
 na dva znaky.
Parametre:
miliDátum – dátum v milisekundách epochy
Návratová hodnota:
reťazec dátumu v predvolenom formáte
Pozri tiež:
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String), 
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long)
datumNaRetazec
public static String datumNaRetazec(long miliDátum)
 Alias pre dátumNaReťazec.
dátumNaReťazec
public static String dátumNaReťazec(long miliDátum,
                                    String formát)
Podľa zadaných údajov vytvorí reťazec dátumu. Prvý parameter je
 počet milisekúnd počítaných od začiatku takzvanej epochy – polnoc 1.
 januára 1970 greenwichského času (v našom časovom pásme to znamená
 jednu hodinu v noci) a druhý parameter určuje požadovaný
 formát vo veľmi priamočiarom tvare. Vo výslednom reťazci budú
 nahradené tieto rezervované písmená (záleží aj na ich veľkosti)
 nasledujúcimi údajmi: D - deň, M - mesiac, R alebo Y - rok,
 h - hodina, m - minúta, s - sekunda. Ak za sebou nasleduje niekoľko
 rovnakých písmen, tak výsledný číselný údaj bude zarovnaný nulami
 zľava na zadaný počet znakov.
Parametre:
miliDátum – dátum v milisekundách epochy
formát – reťazec určujúci formát dátumu
Návratová hodnota:
reťazec dátumu v zadanom formáte
Pozri tiež:
dátumNaReťazec(long), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String), 
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long)
datumNaRetazec
public static String datumNaRetazec(long miliDátum,
                                    String formát)
 Alias pre dátumNaReťazec.
reťazecNaDátum
public static long reťazecNaDátum(String dátum)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy (polnoc 1. januára 1970 greenwichského času – v našom časovom
 pásme to znamená jednu hodinu v noci) podľa zadaného reťazca
 v predvolenom formáte.
 
 Predvolený formát reťazca má tvar skupiny celých čísiel oddelených
 ľubovoľnými nečíselnými znakmi. Jediné, na čom záleží, je poradie
 výskytu číselných údajov v reťazci a to je stanovené takto: deň,
 mesiac, rok, hodina, minúta, sekunda. Znak mriežky ('#')
 je rezervovaný a je považovaný za jeden úplný prázdny číselný údaj,
 to znamená, že reťazec "###" znamená prázdny deň, mesiac
 a rok (hoci medzi znakmi nie sú oddeľovače). Pri výskyte tohto znaku
 je prislúchajúcemu údaju ponechaná predvolená hodnota. Chýbajúcim
 údajom sú ponechané predvolené hodnoty (pri začatí rozpoznávania
 dátumu je jeho hodnota nastavená na začiatok epochy).
 
 Platnými znakmi oddeľovačov sú: medzera (' '), pevná
 medzera (' '), bodka ('.'), čiarka (','), dvojbodka (':'), tabulátor ('\t'),
 nový riadok ('\n'), návrat vozíka ('\r')
 a posun formulára ('\f'). Za jeden oddeľovač je považovaná
 ľubovoľne veľká skupina zložená z uvedených znakov. Ostatné znaky
 (samozrejme okrem číslic) sú považované za neplatné a sú ignorované
 (opomenúc fakt, že sa zapisujú do denníka chýb).
Parametre:
dátum – reťazec dátumu v predvolenom formáte
Návratová hodnota:
dátum v milisekundách epochy
Pozri tiež:
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String, String), 
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long)
retazecNaDatum
public static long retazecNaDatum(String dátum)
 Alias pre reťazecNaDátum.
reťazecNaDátum
public static long reťazecNaDátum(String dátum,
                                  String formát)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy (polnoc 1. januára 1970 greenwichského času — v našom časovom
 pásme to znamená jednu hodinu v noci) podľa zadaných
 reťazcov dátumu a formátu.
 
 Formát musí mať tvar skupiny rezervovaných znakov oddelených
 ľubovoľnými nerezervovanými znakmi. Rezervované znaky formátu určia
 význam číselných údajov v dátume podľa tohto kľúča (záleží na
 veľkosti písmen): D - deň, M - mesiac, R alebo Y - rok, h - hodina,
 m - minúta, s - sekunda.
 
 Podľa formátu je rozpoznaný dátum, pričom chýbajúcim údajom
 sú ponechané predvolené hodnoty (pri začatí rozpoznávania sú
 hodnoty údajov dátumu nastavené na začiatok epochy). V dátume (nie
 vo formáte) je odlišne spracovaný jeden rezervovaný znak – mriežka
 '#'. Tento znak bude považovaný za jeden úplný prázdny
 číselný údaj, to znamená, že reťazec "###" bude znamenať
 tri prázdne údaje a pri výskyte tohto znaku bude prislúchajúcemu
 údaju (podľa poradia určeného formátom) ponechaná jeho predvolená
 hodnota.
Parametre:
dátum – reťazec dátumu v predvolenom formáte
formát – očakávaný formát dátumu
Návratová hodnota:
dátum v milisekundách epochy
Pozri tiež:
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long)
retazecNaDatum
public static long retazecNaDatum(String dátum,
                                  String formát)
 Alias pre reťazecNaDátum.
dátumPoložky
public String dátumPoložky(String názovPoložky)
Vráti dátum položky v reťazcovej podobe. Táto metóda používa na
 prevod metódu dátumNaReťazec, jej výstup
 je preto rovnaký.
Parametre:
názovPoložky – názov položky, ktorej dátum má byť vrátený
Návratová hodnota:
návratová hodnota metódy dátumNaReťazec (s argumentom číselnej podoby dátumu položky
     vrátenej metódou dátumPoložkyAkoČíslo)
Pozri tiež:
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long), 
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String)
datumPolozky
public String datumPolozky(String názovPoložky)
 Alias pre dátumPoložky.
dátumPoložky
public void dátumPoložky(String názovPoložky,
                         String dátumPoložky)
Nastaví zadanej položke nový časový údaj jej vytvorenia. Údaj
 je očakávaný v tvare reťazca v presne stanovenom formáte – v tvare
 skupiny celých čísiel oddelených množinami znakov platných
 oddeľovačov (pre tento formát). Celočíselné údaje musia nasledovať
 v stanovenom poradí: deň, mesiac, rok, hodina, minúta, sekunda.
 Chýbajúcim údajom sú ponechané predvolené hodnoty (pri začatí
 rozpoznávania dátumu je jeho hodnota nastavená na začiatok takzvanej
 epochy – polnoc 1. januára 1970 greenwichského času – v našom
 časovom pásme to znamená jednu hodinu v noci).
 
 Platnými znakmi oddeľovačov sú: medzera (' '), pevná
 medzera (' '), bodka ('.'), čiarka (','), dvojbodka (':'), tabulátor ('\t'),
 nový riadok ('\n'), návrat vozíka ('\r')
 a posun formulára ('\f'). Za jeden oddeľovač je považovaná
 ľubovoľne veľká skupina zložená z uvedených znakov. Znak mriežky
 ('#') je považovaný za jeden úplný prázdny číselný údaj,
 to znamená, že reťazec "###" znamená prázdny deň, mesiac
 a rok (hoci medzi znakmi nie sú oddeľovače). Pri výskyte tohto znaku
 je prislúchajúcemu údaju ponechaná predvolená hodnota (podľa začiatku
 epochy spomenutého vyššie). Ostatné znaky (samozrejme okrem číslic) sú
 považované za neplatné a sú ignorované (opomenúc fakt, že sa zapisujú
 do denníka chýb).
 
 Poznámka: Ak je archív otvorený len na
 čítanie, tak bude dátum zmenený len pre položku uloženú v pamäti.
 Položka v archíve uloženom na pevnom disku sa nezmení.
 
 Príklady platných dátumov:
 
 1 8 2001: 1. 8. 2001, 01:00:00; 8.1.1999:
 8. 1. 1999, 01:00:00; 11.12.#,13:0:5: 11. 12. 1970,
 13:00:05; 11.#.1971,13:#: 11. 1. 1971, 13:00:00.
 Staršie dátumy však môžu v niektorých softvéroch spôsobiť chybné
 zobrazenie.
 
 Poznámka: Položka so zadaným názvom musí
 byť v archíve definovaná. Najmä pri archívoch určených na zápis to
 znamená, že najskôr musíme položku vytvoriť, až potom môžeme meniť
 jej parametre.
Parametre:
názovPoložky – názov položky, ktorej dátum má byť nastavený
dátumPoložky – reťazcový tvar dátumu položky
Pozri tiež:
dátumPoložky(String), 
dátumPoložkyAkoČíslo(String), 
dátumPoložkyAkoČíslo(String, long), 
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String)
datumPolozky
public void datumPolozky(String názovPoložky,
                         String dátumPoložky)
 Alias pre dátumPoložky.
dátumPoložkyAkoČíslo
public long dátumPoložkyAkoČíslo(String názovPoložky)
Vráti dátum položky v číselnej podobe. Číselný údaj vyjadruje
 počet milisekúnd od začiatku takzvanej epochy – polnoc 1. januára
 1970 greenwichského času – v našom časovom pásme to znamená jednu
 hodinu po polnoci.
Parametre:
názovPoložky – názov položky, ktorej dátum má byť vrátený
Návratová hodnota:
dátum položky v číselnej podobe
Výnimky:
GRobotException – ak archív nie je otvorený (na čítanie alebo
     zápis) alebo zadaná položka nebola nájdená
Pozri tiež:
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String, long), 
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String)
datumPolozkyAkoCislo
public long datumPolozkyAkoCislo(String názovPoložky)
 Alias pre dátumPoložkyAkoČíslo.
dátumPoložkyAkoČíslo
public void dátumPoložkyAkoČíslo(String názovPoložky,
                                 long dátum)
Nastaví zadanej položke nový časový údaj jej vytvorenia podľa
 zadaného číselného údaja. Údaj vyjadruje počet milisekúnd od začiatku
 takzvanej epochy – polnoc 1. januára 1970 greenwichského času –
 v našom časovom pásme to znamená jednu hodinu po polnoci.
 
 Poznámka: Ak je archív otvorený len na
 čítanie, tak bude dátum zmenený len pre položku uloženú v pamäti.
 Položka v archíve uloženom na pevnom disku sa nezmení.
 
 Poznámka: Položka so zadaným názvom musí
 byť v archíve definovaná. Najmä pri archívoch určených na zápis to
 znamená, že najskôr musíme položku vytvoriť, až potom môžeme meniť
 jej parametre.
Parametre:
názovPoložky – názov položky, ktorej dátum má byť nastavený
dátum – číselný tvar dátumu položky (počet milisekúnd
     od začiatku epochy)
Výnimky:
GRobotException – ak archív nie je otvorený (na čítanie alebo
     zápis) alebo zadaná položka nebola nájdená
Pozri tiež:
dátumPoložky(String), 
dátumPoložky(String, String), 
dátumPoložkyAkoČíslo(String), 
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String)
datumPolozkyAkoCislo
public void datumPolozkyAkoCislo(String názovPoložky,
                                 long dátum)
 Alias pre dátumPoložkyAkoČíslo.
veľkosťPoložky
public long veľkosťPoložky(String názovPoložky)
Vráti aktuálnu (nekomprimovanú) veľkosť položky (identifikovanej
 názvom).
Parametre:
názovPoložky – názov položky, ktorej veľkosť má byť vrátená
Návratová hodnota:
aktuálna veľkosť požadovanej položky
Pozri tiež:
komprimovanáVeľkosťPoložky(String)
velkostPolozky
public long velkostPolozky(String názovPoložky)
 Alias pre veľkosťPoložky.
komprimovanáVeľkosťPoložky
public long komprimovanáVeľkosťPoložky(String názovPoložky)
Vráti komprimovanú veľkosť zadanej položky.
Parametre:
názovPoložky – názov položky, ktorej komprimovaná veľkosť
     má byť vrátená
Návratová hodnota:
komprimovaná veľkosť požadovanej položky
Pozri tiež:
veľkosťPoložky(String)
komprimovanaVelkostPolozky
public long komprimovanaVelkostPolozky(String názovPoložky)
 Alias pre komprimovanáVeľkosťPoložky.
komentárPoložky
public String komentárPoložky(String názovPoložky)
Vráti komentár zadanej položky.
Parametre:
názovPoložky – názov položky, ktorej komentár má byť vrátený
Návratová hodnota:
komentár položky
Výnimky:
GRobotException – ak archív nie je otvorený (na čítanie alebo
     zápis) alebo zadaná položka nebola nájdená
Pozri tiež:
komentárPoložky(String, String)
komentarPolozky
public String komentarPolozky(String názovPoložky)
 Alias pre komentárPoložky.
komentárPoložky
public void komentárPoložky(String názovPoložky,
                            String komentár)
Nastaví zadanej položke nový komentár.
 
 Poznámka: Ak je archív otvorený len na
 čítanie, tak bude komentár zmenený len pre položku uloženú v pamäti.
 Položka v archíve uloženom na pevnom disku sa nezmení.
 
 Poznámka: Položka so zadaným názvom musí
 byť v archíve definovaná. Najmä pri archívoch určených na zápis to
 znamená, že najskôr musíme položku vytvoriť, až potom môžeme meniť
 jej parametre.
Parametre:
názovPoložky – názov položky, ktorej komentár má byť nastavený
komentár – nový komentár položky
Výnimky:
GRobotException – ak archív nie je otvorený (na čítanie alebo
     zápis) alebo zadaná položka nebola nájdená
Pozri tiež:
komentárPoložky(String)
komentarPolozky
public void komentarPolozky(String názovPoložky,
                            String komentár)
 Alias pre komentárPoložky.
dajPoložku
public knižnica.apacheAntZIP.ZipEntry dajPoložku(String názovPoložky)
Vráti jestvujúcu položku archívu knižnice 
Apache Ant
 
ZipEntry na prácu s ňou. Ak súbor nie
 je otvorený na čítanie alebo zápis, alebo ak položka v archíve
 nejestvuje, tak metóda vráti hodnotu null.
Parametre:
názovPoložky – názov položky, ktorá má byť vrátená
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry
dajPolozku
public knižnica.apacheAntZIP.ZipEntry dajPolozku(String názovPoložky)
 Alias pre dajPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky,
                                                  String názovSúboru,
                                                  boolean prepísať,
                                                  boolean vytvoriťCestu)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null. V takom prípade bude ako názov súboru použitý názov
 položky.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
 
 Poznámka: V špeciálom prípade, keď položka
 archívu reprezentuje priečinok, sú parametre prepísať
 a vytvoriťCestu ignorované a metóda sa správa tak, že
 automaticky priečinok vytvorí, ak nejestvuje.
Parametre:
názovPoložky – názov položky v archíve
názovSúboru – názov súboru na disku (môže byť null)
prepísať – príznak povolenia prepísania jestvujúceho súboru na
     disku (true – cieľový súbor smie byť prepísaný, ak
     jestvuje)
vytvoriťCestu – ak je true, tak metóda automaticky vytvorí
     cestu k cieľovému súboru, ak nejestvuje
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje a nie je povolená možnosť jeho prepísania (prípadne
     ak na disku jestvuje položka s rovnakým názvom, ktorá nie je
     súborom a preto nemôže byť prepísaná)
FileNotFoundException – ak cieľová cesta nejestvuje
     a nebolo povolené jej automatické vytvorenie
Pozri tiež:
uložPoložku(String, String, boolean), 
uložPoložku(String, String), 
uložPoložku(String, boolean, boolean), 
uložPoložku(String, boolean), 
uložPoložku(String)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky,
                                                  String názovSúboru,
                                                  boolean prepísať,
                                                  boolean vytvoriťCestu)
 Alias pre uložPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky,
                                                  String názovSúboru,
                                                  boolean prepísať)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null. V takom prípade bude ako názov súboru použitý názov
 položky. Metóda automaticky vytvorí cestu k cieľovému súboru (ak cesta
 nejestvuje). Ak chcete tomuto správaniu zabrániť, tak použite metódu
 uložPoložku(názovPoložky, názovSúboru, prepísať, false).
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
 
 Poznámka: V špeciálom prípade, keď položka
 archívu reprezentuje priečinok, je parameter prepísať
 ignorovaný (pretože nemá význam uvažovať o jeho hodnote).
Parametre:
názovPoložky – názov položky v archíve
názovSúboru – názov súboru na disku (môže byť null)
prepísať – príznak povolenia prepísania jestvujúceho súboru na
     disku (true – cieľový súbor smie byť prepísaný, ak
     jestvuje)
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje a nie je povolená možnosť jeho prepísania (prípadne
     ak na disku jestvuje položka s rovnakým názvom, ktorá nie je
     súborom a preto nemôže byť prepísaná)
Pozri tiež:
uložPoložku(String, String, boolean, boolean), 
uložPoložku(String, String), 
uložPoložku(String, boolean, boolean), 
uložPoložku(String, boolean), 
uložPoložku(String)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky,
                                                  String názovSúboru,
                                                  boolean prepísať)
 Alias pre uložPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky,
                                                  String názovSúboru)
Uloží položku so zadaným názvom z archívu do súboru so zadaným
 názvom, pričom namiesto názvu súboru môže byť zadaná hodnota
 null. V takom prípade bude ako názov súboru použitý názov
 položky. Cieľový súbor nesmie byť touto metódou prepísaný. Ak
 jestvuje, tak vznikne výnimka. (Ak chcete cieľový súbor prepísať,
 použite metódu uložPoložku(názovPoložky, názovSúboru, true).)  Metóda automaticky
 vytvorí cestu k cieľovému súboru (ak cesta nejestvuje). Ak chcete
 tomuto správaniu zabrániť, tak použite iný variant tejto metódy
 (napríklad uložPoložku(názovPoložky, názovSúboru, prepísať, false)).
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
Parametre:
názovPoložky – názov položky v archíve
názovSúboru – názov súboru na disku (môže byť null)
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje
Pozri tiež:
uložPoložku(String, String, boolean, boolean), 
uložPoložku(String, String, boolean), 
uložPoložku(String, boolean, boolean), 
uložPoložku(String, boolean), 
uložPoložku(String)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky,
                                                  String názovSúboru)
 Alias pre uložPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky,
                                                  boolean prepísať,
                                                  boolean vytvoriťCestu)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky,
 názovSúboru, prepísať, vytvoriťCestu) so zadaným parametrom názovSúboru rovným null. Podrobnejšie informácie sú v opise
 uvedenej metódy.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
 
 Poznámka: V špeciálom prípade, keď položka
 archívu reprezentuje priečinok, sú parametre prepísať
 a vytvoriťCestu ignorované a metóda sa správa tak, že
 automaticky priečinok vytvorí, ak nejestvuje.
Parametre:
názovPoložky – názov položky v archíve
prepísať – príznak povolenia prepísania jestvujúceho súboru
vytvoriťCestu – ak je true, tak metóda automaticky vytvorí
     cestu k cieľovému súboru, ak nejestvuje
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje a nie je povolená možnosť jeho prepísania (prípadne
     ak na disku jestvuje položka s rovnakým názvom, ktorá nie je
     súborom a preto nemôže byť prepísaná)
FileNotFoundException – ak cieľová cesta nejestvuje
     a nebolo povolené jej automatické vytvorenie
Pozri tiež:
uložPoložku(String, String, boolean, boolean), 
uložPoložku(String, String, boolean), 
uložPoložku(String, String), 
uložPoložku(String, boolean), 
uložPoložku(String)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky,
                                                  boolean prepísať,
                                                  boolean vytvoriťCestu)
 Alias pre uložPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky,
                                                  boolean prepísať)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky,
 názovSúboru, prepísať) so zadaným parametrom názovSúboru rovným null. Podrobnejšie informácie sú v opise
 uvedenej metódy.
 
 Poznámka: V špeciálom prípade, keď položka
 archívu reprezentuje priečinok, je parameter prepísať
 ignorovaný (pretože nemá význam uvažovať o jeho hodnote).
Parametre:
názovPoložky – názov položky v archíve
prepísať – príznak povolenia prepísania jestvujúceho súboru
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje a nie je povolená možnosť jeho prepísania (prípadne
     ak na disku jestvuje položka s rovnakým názvom, ktorá nie je
     súborom a preto nemôže byť prepísaná)
Pozri tiež:
uložPoložku(String, String, boolean, boolean), 
uložPoložku(String, String, boolean), 
uložPoložku(String, String), 
uložPoložku(String, boolean, boolean), 
uložPoložku(String)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky,
                                                  boolean prepísať)
 Alias pre uložPoložku.
uložPoložku
public knižnica.apacheAntZIP.ZipEntry uložPoložku(String názovPoložky)
Táto metóda funguje rovnako ako jej variant uložPoložku(názovPoložky, názovSúboru)
 so zadaným parametrom názovSúboru rovným null.
 Podrobnejšie informácie sú v opise uvedenej metódy.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
Parametre:
názovPoložky – názov položky v archíve
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie; ak
     zadaná položka nebola nájdená v archíve; ak cieľový súbor
     jestvuje
Pozri tiež:
uložPoložku(String, String, boolean, boolean), 
uložPoložku(String, String, boolean), 
uložPoložku(String, String), 
uložPoložku(String, boolean, boolean), 
uložPoložku(String, boolean)
ulozPolozku
public knižnica.apacheAntZIP.ZipEntry ulozPolozku(String názovPoložky)
 Alias pre uložPoložku.
rozbaľArchív
public int rozbaľArchív(String cestaNaRozbalenie,
                        boolean prepísať,
                        boolean vytvoriťCestu)
Rozbalí tento balíček do cieľovej lokality. Metóda umožňuje
 spresniť pravidlá, ktorými sa bude riadiť pri procese rozbaľovania.
 Konkrétne, či môže prepisovať jestvujúce súbory a vytvárať nejestvujúce
 priečinky, ktoré nie sú explicitne vložené ako položky v archíve
 (čiže výsledok nezávisí len od parametrov tejto metódy, ale aj od
 situácie v rámci konkrétneho archívu).
 
 Návratová hodnota metódy vyjadruje počet položiek, ktoré sa
 podarilo úspešne rozbaliť (alebo vytvoriť). Automaticky vytvorené
 priečinky, ktoré nie sú položkami archívu (pretože toto nie je
 v archívoch povinné), ale sú len súčasťou relatívnych ciest položiek
 archívu, nie sú do tohto počtu zarátané.
 
 Ak otvorenie archívu zlyhá (prípadne zlyhá iná časť inicializácie
 procesu), tak je návratová hodnota metódy rovná −1.
 
 Upozornenie: Táto metóda je použiteľná
 len v prípade, že je archív otvorený alebo otvoriteľný na
 čítanie, to znamená, že
 musí jestvovať na umiestnení, na ktoré smeruje táto inštancia
 a nesmie byť otvorený na zápis.
 
 Poznámka: Podobne ako pri metóde uložPoložku, aj počas
 tohto procesu rozbaľovania v prípade, keď niektorá položka archívu
 reprezentuje priečinok, sú hodnoty parametrov prepísať
 a vytvoriťCestu pre túto položku ignorované a priečinok je
 automaticky vytvorený, ak nejestvuje. (Práve tieto priečinky sú
 zarátané do návratovej hodnoty tejto metódy – pretože sú
 reprezentované položkami v archíve.)
Parametre:
cestaNaRozbalenie – cieľová cesta na rozbalenie tohto archívu;
     ak nie je zadaná (má hodnotu null), tak je obsah archívu
     rozbalený na aktuálnom umiestnení (na spúšťacej ceste aplikácie)
prepísať – príznak povolenia prepísania jestvujúcich súborov na
     disku (true – jestvujúce cieľové súboru smú byť
     prepísané, ak jestvujú)
vytvoriťCestu – ak je true, tak metóda bude automaticky
     vytvárať cesty k rozbaľovaným súborom (ak nejestvujú)
Návratová hodnota:
počet položiek archívu, ktoré boli úspešne rozbalené
     (vytvorené); záporná hodnota označuje chybu
rozbalArchiv
public int rozbalArchiv(String cestaNaRozbalenie,
                        boolean prepísať,
                        boolean vytvoriťCestu)
 Alias pre rozbaľArchív.
rozbaľArchív
public int rozbaľArchív(String cestaNaRozbalenie,
                        boolean prepísať)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(cestaNaRozbalenie, prepísať, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
Parametre:
cestaNaRozbalenie – cieľová cesta na rozbalenie tohto archívu
prepísať – príznak povolenia prepísania jestvujúcich súborov na
     disku
Návratová hodnota:
počet položiek archívu, ktoré boli úspešne rozbalené (vytvorené)
rozbalArchiv
public int rozbalArchiv(String cestaNaRozbalenie,
                        boolean prepísať)
 Alias pre rozbaľArchív.
rozbaľArchív
public int rozbaľArchív(String cestaNaRozbalenie)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(cestaNaRozbalenie,
 false, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
Parametre:
cestaNaRozbalenie – cieľová cesta na rozbalenie tohto archívu
Návratová hodnota:
počet položiek archívu, ktoré boli úspešne rozbalené (vytvorené)
rozbalArchiv
public int rozbalArchiv(String cestaNaRozbalenie)
 Alias pre rozbaľArchív.
rozbaľArchív
public int rozbaľArchív(boolean prepísať)
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(null, prepísať,
 true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
Parametre:
prepísať – príznak povolenia prepísania jestvujúcich súborov na
     disku
Návratová hodnota:
počet položiek archívu, ktoré boli úspešne rozbalené (vytvorené)
rozbalArchiv
public int rozbalArchiv(boolean prepísať)
 Alias pre rozbaľArchív.
rozbaľArchív
public int rozbaľArchív()
Táto metóda sa správa rovnako ako jej „hlavná verzia“ spustená
 s nasledujúcimi hodnotami parametrov:
 
 rozbaľArchív(null, false, true)
 
 Detaily nájdete v opise metódy rozbaľArchív.
Návratová hodnota:
počet položiek archívu, ktoré boli úspešne rozbalené (vytvorené)
rozbalArchiv
public int rozbalArchiv()
 Alias pre rozbaľArchív.
údajePoložky
public byte[] údajePoložky(String názovPoložky)
Prečíta všetky dekomprimované údaje položky so zadaným názvom
 a vráti ich vo forme poľa bajtov.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
Parametre:
názovPoložky – názov položky, ktorej údaje majú byť prečítané
     (pozri aj zoznamPoložiek)
Návratová hodnota:
údaje položky vo forme poľa bajtov
Výnimky:
GRobotException – ak archív nie je otvorený na čítanie alebo
     zadaná položka nebola nájdená
udajePolozky
public byte[] udajePolozky(String názovPoložky)
 Alias pre údajePoložky.
pridajPoložku
public knižnica.apacheAntZIP.ZipEntry pridajPoložku(String názovPoložky,
                                                    String názovSúboru)
                                             throws IOException
Pridá do archívu údaje zo zadaného súboru. Metóda dovoľuje zmeniť
 názov položky v archíve – ak prvý parameter (názovPoložky)
 nie je null, tak zadaný názov bude použitý namiesto
 pôvodného názvu súboru. V opačnom prípade bude na pomenovanie položky
 v archíve použitý pôvodný názov súboru (z druhého parametra –
 názovSúboru).
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 zápis.
Parametre:
názovPoložky – názov pridávanej položky (smie byť null;
     v tom prípade bude použitý názov súboru)
názovSúboru – názov súboru, z ktorého majú byť prečítané
     údaje pridávanej položky
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak archív nie je otvorený na zápis, ak
     bola namiesto názvu súboru zadaná hodnota null alebo
     v prípade pokusu o vloženie duplicitnej položky
Pozri tiež:
pridajPoložku(String, byte[]), 
cestaVArchíve(), 
cestaNaDisku()
pridajPolozku
public knižnica.apacheAntZIP.ZipEntry pridajPolozku(String názovPoložky,
                                                    String názovSúboru)
                                             throws IOException
 Alias pre pridajPoložku.
Výnimky:
IOException
pridajPoložku
public knižnica.apacheAntZIP.ZipEntry pridajPoložku(String názovPoložky,
                                                    byte[] údajePoložky)
                                             throws IOException
Zapíše údaje zadané vo forme poľa bajtov do položky archívu so
 zadaným názvom.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 zápis.
Parametre:
názovPoložky – názov pridávanej položky (nesmie byť zamlčaný)
údajePoložky – údaje pridávanej položky (vo forme poľa bajtov)
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak archív nie je otvorený na zápis, ak
     bol názov položky zamlčaný (bola zadaná hodnota null)
     alebo v prípade pokusu o vloženie duplicitnej položky
Pozri tiež:
pridajPoložku(String, String), 
cestaVArchíve(), 
cestaNaDisku()
pridajPolozku
public knižnica.apacheAntZIP.ZipEntry pridajPolozku(String názovPoložky,
                                                    byte[] údajePoložky)
                                             throws IOException
 Alias pre pridajPoložku.
Výnimky:
IOException
pridajPriečinok
public knižnica.apacheAntZIP.ZipEntry pridajPriečinok(String názov)
                                               throws IOException
Pridá do archívu položku reprezentujúcu priečinok. Pozor!
 Metóda pridá iba jednu položku vo význame priečinka. Metóda nepridáva
 do archívu prípadný obsah (vnorené položky) jestvujúceho priečinka na
 disku. (V skutočnosti priečinok na disku ani nemusí jestvovať a do
 archívu ho ako položku môžeme pridať.)
 
 Prítomnosť tohto druhu položiek v archíve je nepovinná. Priečinky
 a podpriečinky sú softvérmi pracujúcimi s archívmi automaticky
 rozpoznávané vďaka ukladaniu ciest k súborom, ktoré sú v rámci
 archívu pripojené pred názvy položiek (t. j. zbalených súborov).
 Avšak pridanie položky priečinka má význam, a to v prípade, že
 chceme do archívu vložiť prázdny priečinok (ktorý sa pri
 rozbaľovaní archívu automaticky vytvorí).
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 zápis.
Parametre:
názov – názov pridávaného priečinka (nesmie byť zamlčaný)
Návratová hodnota:
položka archívu knižnice 
Apache Ant 
ZipEntry na vykonanie prípadných
     ďalších úprav (nastavenie komentára položky, úprava dátumu podľa
     vlastných potrieb a podobne)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak archív nie je otvorený na zápis, ak
     bol názov položky zamlčaný (bola zadaná hodnota null)
     alebo v prípade pokusu o vloženie duplicitnej položky
pridajPriecinok
public knižnica.apacheAntZIP.ZipEntry pridajPriecinok(String názov)
                                               throws IOException
 Alias pre pridajPriečinok.
Výnimky:
IOException
komentár
public String komentár()
Vráti komentár otvoreného archívu, ak je definovaný.
 V opačnom prípade vráti hodnotu null.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 čítanie.
Návratová hodnota:
komentár otvoreného archívu alebo null
Pozri tiež:
komentár(String)
komentar
public String komentar()
 Alias pre komentár.
komentár
public void komentár(String komentár)
Nastaví nový komentár archívu.
 
 Upozornenie: Táto metóda je
 použiteľná len v prípade, že je archív otvorený na
 zápis. (V opačnom
 prípade vznikne výnimka
 "archiveNotOpenForWriting".)
Parametre:
komentár – nový komentár archívu
Výnimky:
GRobotException – ak archív nie je otvorený na zápis
Pozri tiež:
komentár()
komentar
public void komentar(String komentár)
 Alias pre komentár.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":9,"i37":9,"i38":9,"i39":9,"i40":9,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":9,"i54":9,"i55":9,"i56":9,"i57":10,"i58":10,"i59":10,"i60":9,"i61":10,"i62":9,"i63":9,"i64":9,"i65":9,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":9,"i76":9,"i77":9,"i78":9,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":9,"i98":9,"i99":9,"i100":9,"i101":9,"i102":9,"i103":9,"i104":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Bod
java.lang.Object
java.awt.geom.Point2D
Bod
Všetky implementované rozhrania:
Cloneable, Poloha
public class Bod
extends Point2D
implements Poloha
Táto trieda uchováva súradnice x, y, pričom súčasne reprezentuje
 inštanciu bodu Javy Point2D a implementuje rozhranie
 Poloha programovacieho rámca GRobot. Účelom tejto
 triedy je zlepšenie vnútornej kompatibility v programovacom rámci GRobot.
 Niektoré metódy s návratovou hodnotou Poloha
 v skutočnosti vracajú objekt typu Bod.
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy java.awt.geom.Point2D
Point2D.Double, Point2D.Float
Prehľad atribútov
Atribúty zdedené z rozhrania Poloha
stred
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Bod()
Predvolený konštruktor – nastaví súradnice bodu na hodnotu
 [0, 0].
Bod(Bod bod)
Kopírovací konštruktor.
Bod(double x,
   double y)
Konštruktor – prijíma súradnice bodu.
Bod(Point2D bod)
Konštruktor – prijíma objekt určujúci bod.
Bod(Poloha poloha)
Konštruktor – prijíma implementáciu polohy určujúcu bod.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static String
bodNaRetazec(double x,
            double y)
 Alias pre bodNaReťazec.
static String
bodNaReťazec(double x,
            double y)
Prevedie zadané súradnice do textovej podoby zhodnej s výsledkom
 metódy bodNaReťazec.
static String
bodNaRetazec(Point2D bod)
 Alias pre bodNaReťazec.
static String
bodNaReťazec(Point2D bod)
Prevedie súradnice inštancie triedy Point2D (bod
 Javy) do textovej podoby.
static Bod
dialogVolbaPolohy()
 Alias pre vyberPolohu.
static Bod
dialógVoľbaPolohy()
 Alias pre vyberPolohu.
static Bod
dialogVolbaPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialógVoľbaPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialogVolbaPolohy(String titulok)
 Alias pre vyberPolohu.
static Bod
dialógVoľbaPolohy(String titulok)
 Alias pre vyberPolohu.
static Bod
dialogVolbaPolohy(String titulok,
                 Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialógVoľbaPolohy(String titulok,
                 Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialogVyberPolohy()
 Alias pre vyberPolohu.
static Bod
dialógVýberPolohy()
 Alias pre vyberPolohu.
static Bod
dialogVyberPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialógVýberPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialogVyberPolohy(String titulok)
 Alias pre vyberPolohu.
static Bod
dialógVýberPolohy(String titulok)
 Alias pre vyberPolohu.
static Bod
dialogVyberPolohy(String titulok,
                 Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
dialógVýberPolohy(String titulok,
                 Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
double
getX()
 Vráti aktuálnu x-ovú súradnicu bodu.
double
getY()
 Vráti aktuálnu y-ovú súradnicu bodu.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tohto bodu dokonale zhoduje so zadanými
 súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tohto bodu a poloha zadaného objektu dokonale
 zhodujú.
void
mierka(double mierka)
Upraví mierku súradníc tohto bodu podľa zadanej hodnoty.
void
mierka(double mx,
      double my)
Upraví súradnice tohto bodu podľa zadaných hodnôt mierky
 v horizontálnom (mx) a vertikálnom (my) smere.
void
mierka(Poloha poloha)
Upraví mierku súradníc tohto bodu podľa hodnôt súradníc zadanej
 inštancie.
void
otoc(double uhol)
 Alias pre otoč.
void
otoc(double xs,
    double ys,
    double uhol)
 Alias pre otoč.
void
otoc(Poloha stred,
    double uhol)
 Alias pre otoč.
void
otoč(double uhol)
Pootočí súradnice tohto bodu okolo stredu súradnicovej sústavy
 o zadaný uhol.
void
otoč(double xs,
    double ys,
    double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
void
otoč(Poloha stred,
    double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
Bod
poloha()
 V tomto prípade vráti samého seba.
void
poloha(double x,
      double y)
 Nastaví nové súradnice tohto bodu.
void
poloha(Poloha poloha)
 Nastaví nové súradnice tohto bodu podľa
 zadanej implementácie polohy.
static String
polohaNaRetazec(double x,
               double y)
 Alias pre polohaNaReťazec.
static String
polohaNaReťazec(double x,
               double y)
Prevedie zadané súradnice do textovej podoby zhodnej s výsledkom
 metódy polohaNaReťazec.
static String
polohaNaRetazec(Poloha poloha)
 Alias pre polohaNaReťazec.
static String
polohaNaReťazec(Poloha poloha)
Prevedie zadanú implementáciu rozhrania Poloha
 (čiže nielen bodu – vstupom môže byť napríklad robot, oblasť, tlačidlo,
 častica…) do textovej podoby, ktorá bude
 reprezentovať polohu so súradnicami x a y.
static Bod
polohaTvaru(Shape tvar)
Táto statická metóda prepočíta súradnice stredu ohraničujúceho
 obdĺžnika zadaného tvaru (skrátene „stredu tvaru“) zo
 súradnicového priestoru Javy do súradnicového priestoru
 programovacieho rámca GRobot (skrátene „vráti polohu zadaného
 objektu“).
double
polohaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
void
polohaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
double
polohaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
void
polohaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
void
posun(double Δx,
     double Δy)
 Alias pre posuň.
void
posuň(double Δx,
     double Δy)
Upraví súradnice tohto bodu podľa zadaných hodnôt zmeny
 v horizontálnom (Δx) a vertikálnom (Δy) smere.
void
posun(Poloha poloha)
 Alias pre posuň.
void
posuň(Poloha poloha)
Upraví (posunie) súradnice tohto bodu podľa súradníc zadanej
 inštancie polohového vektora.
void
posunVSmere(double smer,
           double dĺžka)
 Alias pre posuňVSmere.
void
posuňVSmere(double smer,
           double dĺžka)
Posunie súradnice tohto bodu určeným smerom o zadanú vzdialenosť.
void
posunVSmere(Smer smer,
           double dĺžka)
 Alias pre posuňVSmere.
void
posuňVSmere(Smer smer,
           double dĺžka)
Posunie súradnice tohto bodu určeným smerom o zadanú vzdialenosť.
static Point2D.Double
retazecNaBod(String text)
 Alias pre reťazecNaBod.
static Point2D.Double
reťazecNaBod(String text)
Prevedie zadaný reťazec reprezentujúci polohu alebo súradnice bodu
 na inštanciu triedy Point2D.Double.
static Poloha
retazecNaPolohu(String text)
 Alias pre reťazecNaPolohu.
static Bod
reťazecNaPolohu(String text)
Prevedie zadaný reťazec reprezentujúci polohu alebo súradnice bodu
 na implementáciu rozhrania Poloha (triedu Bod).
void
rotuj(double uhol)
Pootočí súradnice tohto bodu okolo stredu súradnicovej sústavy
 o zadaný uhol.
void
rotuj(double xs,
     double ys,
     double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
void
rotuj(Poloha stred,
     double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
static Bod
rozdiel(Bod bod1,
       Bod bod2)
Vytvorí nový bod so súradnicami tvorenými rozdielom súradníc
 zadaných bodov.
void
setLocation(double x,
           double y)
 Nastaví nové súradnice tohto bodu.
static boolean
spravnyFormat(String text)
 Alias pre správnyFormát.
static boolean
správnyFormát(String text)
Zistí, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom polohu alebo súradnice bodu.
static Bod
sucet(Bod bod1,
     Bod bod2)
 Alias pre súčet.
static Bod
súčet(Bod bod1,
     Bod bod2)
Vytvorí nový bod so súradnicami tvorenými súčtom súradníc zadaných
 bodov.
double
suradnicaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
double
súradnicaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
void
suradnicaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
void
súradnicaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
double
suradnicaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
double
súradnicaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
void
suradnicaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
void
súradnicaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
String
toString()
Reťazcová reprezentácia tohto bodu na účely ladenia obsahujúca
 informácie o súradniciach.
static Bod
vyberPolohu()
Otvorí dialóg na výber polohy.
static Bod
vyberPolohu(Poloha počiatočnáPoloha)
Otvorí dialóg na výber polohy.
static Bod
vyberPolohu(String titulok)
Otvorí dialóg na výber polohy.
static Bod
vyberPolohu(String titulok,
           Poloha počiatočnáPoloha)
Otvorí dialóg na výber polohy.
double
vzdialenost()
 Alias pre vzdialenosť.
double
vzdialenosť()
Zistí, aká je vzdialenosť tohto bodu od stredu súradnicovej
 sústavy.
double
vzdialenostK(double súradnicaX,
            double súradnicaY)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(double súradnicaX,
            double súradnicaY)
 Alias pre vzdialenosťOd.
double
vzdialenostK(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenostK(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenostKMysi()
 Alias pre vzdialenosťOdMyši.
double
vzdialenosťKMyši()
 Alias pre vzdialenosťOdMyši.
double
vzdialenostOd(double súradnicaX,
             double súradnicaY)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(double súradnicaX,
             double súradnicaY)
Zistí vzdialenosť tohto bodu od bodu zadaného prostredníctvom
 súradníc.
double
vzdialenostOd(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(Poloha objekt)
Zistí vzdialenosť medzi týmto bodom a zadaným objektom.
double
vzdialenostOd(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(Shape tvar)
Zistí vzdialenosť medzi týmto bodom a stredom
 hraníc[1] zadaného tvaru.
double
vzdialenostOdMysi()
 Alias pre vzdialenosťOdMyši.
double
vzdialenosťOdMyši()
Zistí vzdialenosť medzi týmto bodom a aktuálnymi súradnicami
 myši.
static Bod
zvolPolohu()
 Alias pre vyberPolohu.
static Bod
zvoľPolohu()
 Alias pre vyberPolohu.
static Bod
zvolPolohu(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
zvoľPolohu(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
zvolPolohu(String titulok)
 Alias pre vyberPolohu.
static Bod
zvoľPolohu(String titulok)
 Alias pre vyberPolohu.
static Bod
zvolPolohu(String titulok,
          Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
static Bod
zvoľPolohu(String titulok,
          Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
Metódy zdedené z triedy java.awt.geom.Point2D
clone, distance, distance, distance, distanceSq, distanceSq, distanceSq, equals, hashCode, setLocation
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
Bod
public Bod()
Predvolený konštruktor – nastaví súradnice bodu na hodnotu
 [0, 0].
Bod
public Bod(double x,
           double y)
Konštruktor – prijíma súradnice bodu.
Parametre:
x – počiatočná x-ová súradnica tohto objektu
y – počiatočná y-ová súradnica tohto objektu
Bod
public Bod(Point2D bod)
Konštruktor – prijíma objekt určujúci bod.
Parametre:
bod – objekt určujúci počiatočné súradnice tohto objektu
Bod
public Bod(Poloha poloha)
Konštruktor – prijíma implementáciu polohy určujúcu bod.
Parametre:
poloha – implementácia polohy určujúca počiatočné súradnice
     tohto objektu
Bod
public Bod(Bod bod)
Kopírovací konštruktor.
Parametre:
bod – iná inštancia bodu, ktorá bude skopírovaná
Podrobnosti metód
getX
public double getX()
 Vráti aktuálnu x-ovú súradnicu bodu.
Definované:
getX v triede Point2D
Návratová hodnota:
aktuálna x-ová súradnica bodu
getY
public double getY()
 Vráti aktuálnu y-ovú súradnicu bodu.
Definované:
getY v triede Point2D
Návratová hodnota:
aktuálna y-ová súradnica bodu
setLocation
public void setLocation(double x,
                        double y)
 Nastaví nové súradnice tohto bodu.
Definované:
setLocation v triede Point2D
Parametre:
x – nová x-ová súradnica bodu
y – nová y-ová súradnica bodu
polohaX
public double polohaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica bodu
polohaY
public double polohaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica bodu
súradnicaX
public double súradnicaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
Definované:
súradnicaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica bodu
suradnicaX
public double suradnicaX()
 Vráti aktuálnu x-ovú súradnicu bodu.
Definované:
suradnicaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica bodu
súradnicaY
public double súradnicaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
Definované:
súradnicaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica bodu
suradnicaY
public double suradnicaY()
 Vráti aktuálnu y-ovú súradnicu bodu.
Definované:
suradnicaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica bodu
poloha
public Bod poloha()
 V tomto prípade vráti samého seba. Táto
 metóda je súčasťou úplnej implementácie rozhrania Poloha. Metóda je používaná inštanciami ostatných tried
 programovacieho rámca GRobot.
Definované:
poloha v rozhraní Poloha
polohaX
public void polohaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
Parametre:
x – nová x-ová súradnica bodu
polohaY
public void polohaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
Parametre:
y – nová y-ová súradnica bodu
súradnicaX
public void súradnicaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
Parametre:
x – nová x-ová súradnica bodu
suradnicaX
public void suradnicaX(double x)
 Nastaví novú x-ovú súradnicu tohto bodu.
Parametre:
x – nová x-ová súradnica bodu
súradnicaY
public void súradnicaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
Parametre:
y – nová y-ová súradnica bodu
suradnicaY
public void suradnicaY(double y)
 Nastaví novú y-ovú súradnicu tohto bodu.
Parametre:
y – nová y-ová súradnica bodu
poloha
public void poloha(double x,
                   double y)
 Nastaví nové súradnice tohto bodu.
Parametre:
x – nová x-ová súradnica bodu
y – nová y-ová súradnica bodu
poloha
public void poloha(Poloha poloha)
 Nastaví nové súradnice tohto bodu podľa
 zadanej implementácie polohy.
Parametre:
poloha – poloha obsahujúca nové súradnice bodu
posuň
public void posuň(double Δx,
                  double Δy)
Upraví súradnice tohto bodu podľa zadaných hodnôt zmeny
 v horizontálnom (Δx) a vertikálnom (Δy) smere.
Parametre:
Δx – miera posunutia v smere osi x
Δy – miera posunutia v smere osi y
posun
public void posun(double Δx,
                  double Δy)
 Alias pre posuň.
posuň
public void posuň(Poloha poloha)
Upraví (posunie) súradnice tohto bodu podľa súradníc zadanej
 inštancie polohového vektora. Súradnica polohy x zadanej inštancie
 určí mieru posunutia v horizontálnom smere a súradnica polohy
 y vo vertikálnom smere.
Parametre:
poloha – inštancia určujúca mieru posunutia tohto bodu
posun
public void posun(Poloha poloha)
 Alias pre posuň.
posuňVSmere
public void posuňVSmere(double smer,
                        double dĺžka)
Posunie súradnice tohto bodu určeným smerom o zadanú vzdialenosť.
Parametre:
smer – smer, v ktorom sa má bod posunúť
dĺžka – vzdialenosť, o ktorú sa má bod posunúť
posunVSmere
public void posunVSmere(double smer,
                        double dĺžka)
 Alias pre posuňVSmere.
posuňVSmere
public void posuňVSmere(Smer smer,
                        double dĺžka)
Posunie súradnice tohto bodu určeným smerom o zadanú vzdialenosť.
Parametre:
smer – inštancia určujúca smer, v ktorom sa má bod posunúť
dĺžka – vzdialenosť, o ktorú sa má bod posunúť
posunVSmere
public void posunVSmere(Smer smer,
                        double dĺžka)
 Alias pre posuňVSmere.
mierka
public void mierka(double mierka)
Upraví mierku súradníc tohto bodu podľa zadanej hodnoty.
 
 Tip: Pozrite si aj informácie v opise metódy
 mierka(mx, my).
Parametre:
mierka – miera zmeny mierky oboch súradníc tohto bodu
Pozri tiež:
mierka(double, double), 
mierka(Poloha)
mierka
public void mierka(double mx,
                   double my)
Upraví súradnice tohto bodu podľa zadaných hodnôt mierky
 v horizontálnom (mx) a vertikálnom (my) smere. Metóda jednoducho
 „prenásobí“ každú súradnicu zadanou súradnicou, avšak aj touto
 jednoduchou transformáciou sa dajú dosiahnuť zaujímavé výsledky.
 Napríklad vypočítať stred úsečky – nastavením súradníc tejto
 inštancie na hodnotu prvého bodu úsečky (napr. metódou poloha), posunutím súradníc tejto inštancie
 o hodnotu druhého bodu úsečky (napr. metódou posuň) a zmenou mierky tejto inštancie o hodnotu 0.5
 (napr. metódou mierka). Tiež môžeme
 zrkladliť body okolo osí (zápornými hodnotami mierok) a podobne.
Parametre:
mx – miera zmeny mierky v smere osi x
my – miera zmeny mierky v smere osi y
Pozri tiež:
mierka(double), 
mierka(Poloha)
mierka
public void mierka(Poloha poloha)
Upraví mierku súradníc tohto bodu podľa hodnôt súradníc zadanej
 inštancie. Súradnica polohy x zadanej inštancie určí zmenu mierky
 v horizontálnom smere a súradnica polohy y vo vertikálnom smere.
 
 Tip: Pozrite si aj informácie v opise metódy
 mierka(mx, my).
Parametre:
poloha – inštancia určujúca mieru zmeny mierky tohto bodu
     podľa hodnôt súradníc zadaného bodu
Pozri tiež:
mierka(double), 
mierka(double, double)
otoč
public void otoč(double uhol)
Pootočí súradnice tohto bodu okolo stredu súradnicovej sústavy
 o zadaný uhol.
Parametre:
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
otoc
public void otoc(double uhol)
 Alias pre otoč.
otoč
public void otoč(double xs,
                 double ys,
                 double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
Parametre:
xs – x-ová súradnica stredu rotácie
ys – y-ová súradnica stredu rotácie
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
otoc
public void otoc(double xs,
                 double ys,
                 double uhol)
 Alias pre otoč.
otoč
public void otoč(Poloha stred,
                 double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
Parametre:
stred – stred rotácie
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
otoc
public void otoc(Poloha stred,
                 double uhol)
 Alias pre otoč.
rotuj
public void rotuj(double uhol)
Pootočí súradnice tohto bodu okolo stredu súradnicovej sústavy
 o zadaný uhol.
Parametre:
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
rotuj
public void rotuj(double xs,
                  double ys,
                  double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
Parametre:
xs – x-ová súradnica stredu rotácie
ys – y-ová súradnica stredu rotácie
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
rotuj
public void rotuj(Poloha stred,
                  double uhol)
Pootočí súradnice tohto bodu okolo zadaného bodu o zadaný
 uhol.
Parametre:
stred – stred rotácie
uhol – uhol pootočenia
Pozri tiež:
otoč(double), 
otoč(double, double, double), 
otoč(Poloha, double), 
rotuj(double), 
rotuj(double, double, double), 
rotuj(Poloha, double)
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tohto bodu dokonale zhoduje so zadanými
 súradnicami. Ak je zistená zhoda, tak metóda vráti hodnotu true, v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha tohto bodu
y – y-ová súradnica, s ktorou má byť porovnaná poloha tohto bodu
Návratová hodnota:
true ak sa poloha tohto bodu zhoduje so zadanými
     súradnicami, false v opačnom prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tohto bodu a poloha zadaného objektu dokonale
 zhodujú. Ak je zistená zhoda, tak metóda vráti hodnotu true,
 v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná s polohou tohto
     bodu
Návratová hodnota:
true ak sa poloha tohto bodu zhoduje s polohou
     zadaného objektu, false v opačnom prípade
vzdialenosťOd
public double vzdialenosťOd(double súradnicaX,
                            double súradnicaY)
Zistí vzdialenosť tohto bodu od bodu zadaného prostredníctvom
 súradníc.
Parametre:
súradnicaX – x-ová súradnica bodu
súradnicaY – y-ová súradnica bodu
Návratová hodnota:
vzdialenosť medzi týmto a zadaným bodom
vzdialenostOd
public double vzdialenostOd(double súradnicaX,
                            double súradnicaY)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(double súradnicaX,
                           double súradnicaY)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(double súradnicaX,
                           double súradnicaY)
 Alias pre vzdialenosťOd.
vzdialenosťOd
public double vzdialenosťOd(Poloha objekt)
Zistí vzdialenosť medzi týmto bodom a zadaným objektom.
Parametre:
objekt – objekt implementujúci rozhranie poloha
Návratová hodnota:
vzdialenosť medzi týmto bodom a zadaným objektom
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(double, double), 
vzdialenosťOd(Poloha), 
vzdialenosťOd(Shape), 
vzdialenosťOdMyši(), 
Svet.vzdialenosť(Poloha)
vzdialenostOd
public double vzdialenostOd(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenosťOd
public double vzdialenosťOd(Shape tvar)
Zistí vzdialenosť medzi týmto bodom a stredom
 hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape)
Návratová hodnota:
vzdialenosť medzi bodom a stredom hraníc zadaného tvaru
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(Poloha), 
vzdialenosťOdMyši()
vzdialenostOd
public double vzdialenostOd(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenosťOdMyši
public double vzdialenosťOdMyši()
Zistí vzdialenosť medzi týmto bodom a aktuálnymi súradnicami
 myši.
Návratová hodnota:
vzdialenosť medzi týmto bodom a súradnicami myši
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(Poloha), 
Svet.vzdialenosť(Poloha)
vzdialenostOdMysi
public double vzdialenostOdMysi()
 Alias pre vzdialenosťOdMyši.
vzdialenosťKMyši
public double vzdialenosťKMyši()
 Alias pre vzdialenosťOdMyši.
vzdialenostKMysi
public double vzdialenostKMysi()
 Alias pre vzdialenosťOdMyši.
vzdialenosť
public double vzdialenosť()
Zistí, aká je vzdialenosť tohto bodu od stredu súradnicovej
 sústavy.
Návratová hodnota:
vzdialenosť bodu od stredu súradnicovej sústavy
vzdialenost
public double vzdialenost()
 Alias pre vzdialenosť.
polohaTvaru
public static Bod polohaTvaru(Shape tvar)
Táto statická metóda prepočíta súradnice stredu ohraničujúceho
 obdĺžnika zadaného tvaru (skrátene „stredu tvaru“) zo
 súradnicového priestoru Javy do súradnicového priestoru
 programovacieho rámca GRobot (skrátene „vráti polohu zadaného
 objektu“). O súradnicových priestoroch sa podrobnejšie píše
 napríklad v opisoch metód GRobot.cesta(),
 SVGpodpora.zapíš(…), SVGpodpora.čítaj(meno) a priebežne v celej dokumentácii.
Parametre:
tvar – tvar, ktorého polohu chceme zistiť
Návratová hodnota:
objekt typu Bod so súradnicami „stredu tvaru“
toString
public String toString()
Reťazcová reprezentácia tohto bodu na účely ladenia obsahujúca
 informácie o súradniciach. Pozri aj metódy
 polohaNaReťazec,
 reťazecNaPolohu,
 bodNaReťazec
 a reťazecNaBod.
Prekrývanie:
táto metóda prekrýva originálnu metódu toString v triede Object
Návratová hodnota:
reťazcová reprezentácia tohto bodu na účely ladenia
     obsahujúca informácie o súradniciach
polohaNaReťazec
public static String polohaNaReťazec(Poloha poloha)
Prevedie zadanú implementáciu rozhrania Poloha
 (čiže nielen bodu – vstupom môže byť napríklad robot, oblasť, tlačidlo,
 častica…) do textovej podoby, ktorá bude
 reprezentovať polohu so súradnicami x a y.
 (Vhodné napríklad pri ukladaní údajov do konfiguračného súboru.)
Parametre:
poloha – poloha, ktorá má byť prevedená do reťazcovej podoby
Návratová hodnota:
poloha prevedená do reťazcovej podoby
Pozri tiež:
reťazecNaPolohu(String), 
správnyFormát(String)
polohaNaRetazec
public static String polohaNaRetazec(Poloha poloha)
 Alias pre polohaNaReťazec.
bodNaReťazec
public static String bodNaReťazec(Point2D bod)
Prevedie súradnice inštancie triedy Point2D (bod
 Javy) do textovej podoby.
Parametre:
bod – bod, ktorý má byť prevedený do reťazcovej podoby
Návratová hodnota:
súradnice bodu prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaBod(String), 
správnyFormát(String)
bodNaRetazec
public static String bodNaRetazec(Point2D bod)
 Alias pre bodNaReťazec.
polohaNaReťazec
public static String polohaNaReťazec(double x,
                                     double y)
Prevedie zadané súradnice do textovej podoby zhodnej s výsledkom
 metódy polohaNaReťazec.
Parametre:
x – x-ová súradnica polohy, ktorá má byť prevedená do
     reťazcovej podoby
y – y-ová súradnica polohy, ktorá má byť prevedená do
     reťazcovej podoby
Návratová hodnota:
súradnice prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaPolohu(String), 
správnyFormát(String)
polohaNaRetazec
public static String polohaNaRetazec(double x,
                                     double y)
 Alias pre polohaNaReťazec.
bodNaReťazec
public static String bodNaReťazec(double x,
                                  double y)
Prevedie zadané súradnice do textovej podoby zhodnej s výsledkom
 metódy bodNaReťazec.
Parametre:
x – x-ová súradnica bodu, ktorý má byť prevedený do
     reťazcovej podoby
y – y-ová súradnica bodu, ktorý má byť prevedený do
     reťazcovej podoby
Návratová hodnota:
súradnice prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaBod(String), 
správnyFormát(String)
bodNaRetazec
public static String bodNaRetazec(double x,
                                  double y)
 Alias pre bodNaReťazec.
reťazecNaPolohu
public static Bod reťazecNaPolohu(String text)
Prevedie zadaný reťazec reprezentujúci polohu alebo súradnice bodu
 na implementáciu rozhrania Poloha (triedu Bod).
 Metóda rozpoznáva reťazce v tvare:
 
 
 xy(súradnicaX,
 súradnicaY)
 alebo [súradnicaX,
 súradnicaY],
 
 
 kde súradnicaX je x-ová a súradnicaY y-ová
 súradnica polohy/bodu.
 
 Metóda je vhodná ako doplnok k metóde polohaNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený
Návratová hodnota:
implementácia rozhrania Poloha (konkrétne trieda
     Bod) obsahujúca polohu získanú z reťazcovej
     podoby
Pozri tiež:
polohaNaReťazec(Poloha), 
správnyFormát(String)
retazecNaPolohu
public static Poloha retazecNaPolohu(String text)
 Alias pre reťazecNaPolohu.
reťazecNaBod
public static Point2D.Double reťazecNaBod(String text)
Prevedie zadaný reťazec reprezentujúci polohu alebo súradnice bodu
 na inštanciu triedy Point2D.Double.
 Metóda rozpoznáva reťazce v tvare:
 
 
 xy(súradnicaX,
 súradnicaY)
 alebo [súradnicaX,
 súradnicaY],
 
 
 kde súradnicaX je x-ová a súradnicaY y-ová
 súradnica polohy/bodu.
 
 Poznámka: Táto metóda vnútorne používa
 metódu reťazecNaPolohu, ktorej
 výstup prevedie na bod Javy, takže z hľadiska výkonu je výhodnejšie
 použitie metódy reťazecNaPolohu.
 
 Metóda je vhodná ako doplnok k metóde
 bodNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený
Návratová hodnota:
inštancia triedy Point2D.Double
     so súradnicami získanými z reťazcovej podoby
Pozri tiež:
bodNaReťazec(Point2D), 
správnyFormát(String)
retazecNaBod
public static Point2D.Double retazecNaBod(String text)
 Alias pre reťazecNaBod.
správnyFormát
public static boolean správnyFormát(String text)
Zistí, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom polohu alebo súradnice bodu.
 Metóda uzná za správne reťazce v tvare:
 
 
 xy(súradnicaX,
 súradnicaY)
 alebo [súradnicaX,
 súradnicaY],
 
 
 kde súradnicaX je x-ová a súradnicaY y-ová
 súradnica polohy/bodu.
 
 Metóda je vhodná ako doplnok k metódam polohaNaReťazec a reťazecNaPolohu.
Parametre:
text – reťazec, ktorý má byť posúdený
Návratová hodnota:
true ak je zadaný teťazec v rozpoznateľnom
     formáte
Pozri tiež:
polohaNaReťazec(double, double), 
polohaNaReťazec(Poloha), 
bodNaReťazec(double, double), 
bodNaReťazec(Point2D), 
reťazecNaPolohu(String), 
reťazecNaBod(String), 
správnyFormát(String)
spravnyFormat
public static boolean spravnyFormat(String text)
 Alias pre správnyFormát.
vyberPolohu
public static Bod vyberPolohu()
Otvorí dialóg na výber polohy. Predvolenou polohou v otvorenom
 dialógu bude stred súradnicovej sústavy.
 Po zvolení želanej polohy používateľom, vráti metóda zvolenú polohu
 v novom objekte typu Bod. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
Návratová hodnota:
zvolená poloha alebo null
vyberPolohu
public static Bod vyberPolohu(Poloha počiatočnáPoloha)
Otvorí dialóg na výber polohy. Otvorený dialóg bude mať
 predvolenú zadanú polohu (argument počiatočnáPoloha). Po
 zvolení želanej polohy používateľom, vráti metóda zvolenú polohu
 v novom objekte typu Bod. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
Parametre:
počiatočnáPoloha – predvolená poloha v novo otvorenom dialógu
Návratová hodnota:
zvolená poloha alebo null
vyberPolohu
public static Bod vyberPolohu(String titulok)
Otvorí dialóg na výber polohy. Predvolenou polohou v otvorenom
 dialógu bude stred súradnicovej sústavy.
 Po zvolení želanej polohy používateľom, vráti metóda zvolenú polohu
 v novom objekte typu Bod. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
Návratová hodnota:
zvolená poloha alebo null
vyberPolohu
public static Bod vyberPolohu(String titulok,
                              Poloha počiatočnáPoloha)
Otvorí dialóg na výber polohy. Otvorený dialóg bude
 mať predvolenú zadanú polohu (argument počiatočnáPoloha). Po
 zvolení želanej polohy používateľom, vráti metóda zvolenú polohu
 v novom objekte typu Bod. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
počiatočnáPoloha – predvolená poloha v novo otvorenom dialógu
Návratová hodnota:
zvolená poloha alebo null
dialógVýberPolohy
public static Bod dialógVýberPolohy()
 Alias pre vyberPolohu.
dialogVyberPolohy
public static Bod dialogVyberPolohy()
 Alias pre vyberPolohu.
dialógVýberPolohy
public static Bod dialógVýberPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialogVyberPolohy
public static Bod dialogVyberPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialógVýberPolohy
public static Bod dialógVýberPolohy(String titulok)
 Alias pre vyberPolohu.
dialogVyberPolohy
public static Bod dialogVyberPolohy(String titulok)
 Alias pre vyberPolohu.
dialógVýberPolohy
public static Bod dialógVýberPolohy(String titulok,
                                    Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialogVyberPolohy
public static Bod dialogVyberPolohy(String titulok,
                                    Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
zvoľPolohu
public static Bod zvoľPolohu()
 Alias pre vyberPolohu.
zvolPolohu
public static Bod zvolPolohu()
 Alias pre vyberPolohu.
dialógVoľbaPolohy
public static Bod dialógVoľbaPolohy()
 Alias pre vyberPolohu.
dialogVolbaPolohy
public static Bod dialogVolbaPolohy()
 Alias pre vyberPolohu.
zvoľPolohu
public static Bod zvoľPolohu(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
zvolPolohu
public static Bod zvolPolohu(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialógVoľbaPolohy
public static Bod dialógVoľbaPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialogVolbaPolohy
public static Bod dialogVolbaPolohy(Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
zvoľPolohu
public static Bod zvoľPolohu(String titulok)
 Alias pre vyberPolohu.
zvolPolohu
public static Bod zvolPolohu(String titulok)
 Alias pre vyberPolohu.
dialógVoľbaPolohy
public static Bod dialógVoľbaPolohy(String titulok)
 Alias pre vyberPolohu.
dialogVolbaPolohy
public static Bod dialogVolbaPolohy(String titulok)
 Alias pre vyberPolohu.
zvoľPolohu
public static Bod zvoľPolohu(String titulok,
                             Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
zvolPolohu
public static Bod zvolPolohu(String titulok,
                             Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialógVoľbaPolohy
public static Bod dialógVoľbaPolohy(String titulok,
                                    Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
dialogVolbaPolohy
public static Bod dialogVolbaPolohy(String titulok,
                                    Poloha počiatočnáPoloha)
 Alias pre vyberPolohu.
súčet
public static Bod súčet(Bod bod1,
                        Bod bod2)
Vytvorí nový bod so súradnicami tvorenými súčtom súradníc zadaných
 bodov.
Parametre:
bod1 – prvý bod súčtu
bod2 – druhý bod súčtu
Návratová hodnota:
výsledný bod súčtu
sucet
public static Bod sucet(Bod bod1,
                        Bod bod2)
 Alias pre súčet.
rozdiel
public static Bod rozdiel(Bod bod1,
                          Bod bod2)
Vytvorí nový bod so súradnicami tvorenými rozdielom súradníc
 zadaných bodov.
Parametre:
bod1 – prvý bod rozdielu
bod2 – druhý bod rozdielu
Návratová hodnota:
výsledný bod rozdielu
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Častica
java.lang.Object
Častica
Všetky implementované rozhrania:
Poloha, Rozmer, Smer
Známe priame odvodené triedy:
Castica
public class Častica
extends Object
implements Poloha, Smer, Rozmer
Toto je pomocná trieda určená na tvorbu časticových simulácií.
 Implementuje dve základné rozhrania Poloha
 a Smer, čiže táto trieda obsahuje iba metódy na zistenie
 polohy a smeru častice, ostatnú funkcionalitu je potrebné
 doprogramovať.
 
 Výhodou takejto implementácie je jej odľahčenosť a široké možnosti
 použitia. Častica rezervuje omnoho menej prostriedkov ako robot, ale
 dá sa použiť na mnohých miestach v programovacom rámci GRobot namiesto
 robota alebo iného objektu implementujúceho rozhranie polohy alebo
 smeru.
 
 Príklad:
 
 Tento príklad ukazuje využitie triedy Častica pri
 implementácii simulácie ohňostroja.
 
 
import knižnica.*;
public class Ohňostroj extends GRobot
{
    // Vnorená súkromná trieda reprezentujúca raketu ohňostroja. Je
    // odvodená od triedy Častica a rozširuje ju len mierne. Definuje
    // novú metódu (reakciu) aktivita, ktorá sa stará o fungovanie aktívnej
    // rakety (spúšťa rovnomennú reakciu aktívnych čiastočiek – pozri
    // nižšie).
    private class Raketa extends Častica
    {
        // Ďalšia vnorená tried (druhá úroveň), ktorá reprezentuje čiastočku
        // vybuchnutej rakety. Tiež je odvodená od triedy Častica, no
        // rozširuje ju o málo viac než trieda Raketa. Čiastočka totiž musí
        // mať okrem aktivity definovanú ešte rýchlosť a zrýchlenie
        // (vlastnosti, ktoré má robot definované predvolene, ale použitie
        // robota by nebolo efektívne – bolo by to ako použiť Ferrari na
        // jazdu do obchodu, ktorý je krížom cez ulicu). Metóda reset slúži
        // na opätovné nastavenie počiatočných hodnôt vlastností čiastočky.
        private class Čiastočka extends Častica
        {
            // Atribút rýchlosti posunu v smere osi x.
            public double vx = 0;
            // Atribút rýchlosti posunu v smere osi y.
            public double vy = 0;
            // Atribút zrýchlenia posunu v smere osi x.
            public double ax = 0;
            // Atribút zrýchlenia posunu v smere osi y.
            public double ay = 0;
            // Atribút životnosti čiastočky v tikoch.
            public int život = 0;
            // Definovanie vlastnej reakcie na časovač – má za úlohu
            // zabezpečiť činnosť aktívnych čiastočiek a tiež postupné
            // ubúdanie života čiastočky.
            public void aktivita()
            {
                if (život &gt; 0)
                {
                    x += vx;
                    y += vy;
                    vx += ax;
                    vy += ay;
                    --život;
                }
            }
            // Táto metóda slúži na nastavenie počiatočných hodnôt
            // vlastností čiastočky.
            public void reset()
            {
                // Nastavenie súradníc podľa nadradenej triedy rakety:
                x = Raketa.this.x;
                y = Raketa.this.y;
                // Voľba nových parametrov (využíva sa aktuálna inštancia
                // najvyššej hierarchicky, nie dedične, nadradenej triedy):
                Ohňostroj.this.domov();
                Ohňostroj.this.náhodnýSmer();
                double a = Svet.náhodnéReálneČíslo(-0.25, -0.8);
                double v = Svet.náhodnéReálneČíslo(8, 10);
                // Nastavenie nového zrýchlenia:
                Ohňostroj.this.dopredu(a);
                ax = Ohňostroj.this.polohaX();
                ay = Ohňostroj.this.polohaY();
                // Nastavenie novej (počiatočnej) rýchlosti:
                Ohňostroj.this.dopredu(v &#45; a);
                vx = Ohňostroj.this.polohaX();
                vy = Ohňostroj.this.polohaY();
                // Gravitácia:
                ay -= 0.1;
                // Náhodná dĺžka života:
                život = (int)Svet.náhodnéCeléČíslo(8, 16);
            }
        }
        // Vnútorný zoznam čiastočiek každej rakety. (V konštruktore nižšie
        // je určené, že každá raketa bude obsahovať presne 50 čiastočiek.)
        private final Zoznam&lt;Čiastočka&gt; čiastočky = new Zoznam&lt;Čiastočka&gt;();
        // Konštruktor rakety.
        public Raketa()
        {
            // Vytvorenie 50 čiastočiek:
            for (int i = 0; i &lt; 50; ++i)
                čiastočky.pridaj(new Čiastočka());
        }
        // Táto metóda sa stará o „štart“ rakety. V tejto implementácii je to
        // iba odpálenie rakety na náhodnej pozícii (raketa nevyletuje).
        public void štart()
        {
            náhodnáPoloha();
            for (Čiastočka čiastočka : čiastočky) čiastočka.reset();
        }
        // Definovanie vlastnej reakcie na časovač – má za úlohu
        // zabezpečiť činnosť a kreslenie aktívnych rakiet.
        public void aktivita()
        {
            for (Čiastočka čiastočka : čiastočky)
                if (čiastočka.život &gt; 0)
                {
                    čiastočka.aktivita();
                    skočNa(čiastočka);
                    krúžok();
                }
        }
    }
    // Vnútorný zoznam rakiet ohňostroja. (V konštruktore je ich vytvorených
    // desať.)
    private final Zoznam&lt;Raketa&gt; rakety = new Zoznam&lt;Raketa&gt;();
    // Konštruktor ohňostroja.
    private Ohňostroj()
    {
        // Nastavenie parametrov jedinej inštancie robota, ktorá bude použitá
        // na kreslenie čiastočiek rakiet:
        zdvihniPero();
        veľkosť(3);
        skry();
        // Pridanie desiatich rakiet do vnútorného zoznamu:
        for (int i = 0; i &lt; 10; ++i)
            rakety.pridaj(new Raketa());
        // Spustenie časovača (inak by ohňostroj nefungoval):
        Svet.spustiČasovač();
    }
    // Po každom kliknutí sa odpáli ďalšia raketa (po odpálení poslednej
    // sa pokračuje opäť prvou).
    @Override public void klik()
    {
        rakety.ďalší().štart();
    }
    // Pri každom tiku sa prekreslí obrazovka a zabezpečí sa fungovanie
    // aktívnych rakiet.
    @Override public void tik()
    {
        Svet.vymažGrafiku();
        for (Raketa raketa : rakety) raketa.aktivita();
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("ohnostroj.cfg");
        new Ohňostroj();
    }
}
 
 Výsledok:
 
  Ukážka
 náhodného výsledku po niekoľkých klikoch.
 
  
 
 Ďalší príklad, ktorý používa triedu Častica je v opise
 metódy vnorMennýPriestorVlastností
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
double
h
Atribút výšky častice.
double
uhol
Atribút smeru častice.
double
w
Atribút šírky častice.
double
x
Atribút súradnice x polohy častice.
double
y
Atribút súradnice y polohy častice.
Atribúty zdedené z rozhrania Poloha
stred
Atribúty zdedené z rozhrania Smer
JUH, JUHOVYCHOD, JUHOVÝCHOD, JUHOZAPAD, JUHOZÁPAD, SEVER, SEVEROVYCHOD, SEVEROVÝCHOD, SEVEROZAPAD, SEVEROZÁPAD, VYCHOD, VÝCHOD, ZAPAD, ZÁPAD
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Častica() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
aktivita()
Táto metóda je predvolene prázdna.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tejto častice dokonale zhoduje so zadanými
 súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tejto častice a poloha zadaného objektu dokonale
 zhodujú.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí, či sa rozmery častice dokonale zhodujú so zadanými
 rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí, či sa rozmery častice a rozmery zadaného objektu
 dokonale zhodujú.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
máŠírku(double šírka)
Zistí, či má častica zadanú šírku.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Zistí, či má častica zadanú výšku.
void
náhodnáPoloha()
Vygeneruje pre časticu náhodné súradnice x a y, ktoré budú
 v rozsahu hraničných hodnôt plochy plátien sveta grafického
 robota.
void
náhodnýSmer()
Vygeneruje pre časticu náhodnú hodnotu smeru.
void
pasivita()
Táto metóda je predvolene prázdna.
Bod
poloha()
 Metóda vráti objekt spájajúce obidve
 súradnice polohy častice.
void
poloha(double novéX,
      double novéY)
 Metóda nastaví nové súradnice častice.
void
poloha(Poloha bod)
 Metóda nastaví nové súradnice častice
 podľa zadaného bodu.
double
polohaX()
 Metóda vráti súradnicu x polohy častice.
double
polohaY()
 Metóda vráti súradnicu y polohy častice.
Rozmery
rozmery()
Zistí aktuálne rozmery častice.
void
rozmery(double šírka,
       double výška)
Nastaví nové rozmery častice.
void
rozmery(Rozmer rozmer)
Nastaví nové rozmery častice podľa zadanej implementácie
 rozmeru.
double
sirka()
 Alias pre šírka.
void
sirka(double šírka)
 Alias pre šírka.
double
smer()
 Metóda vráti smer častice.
void
smer(double uhol)
 Metóda nastaví nový smer častice.
void
smer(Smer objekt)
 Metóda nastaví nový smer častice.
double
suradnicaX()
 Alias pre súradnicaX.
double
súradnicaX()
 Metóda vráti súradnicu x polohy častice.
double
suradnicaY()
 Alias pre súradnicaY.
double
súradnicaY()
 Metóda vráti súradnicu y polohy častice.
double
šírka()
 Vráti aktuálnu šírku častice.
void
šírka(double šírka)
 Nastaví novú šírku častice.
double
uhol()
 Metóda vráti smer častice.
void
uhol(double uhol)
 Metóda nastaví nový smer častice.
void
uhol(Smer objekt)
 Metóda nastaví nový smer častice.
double
vyska()
 Alias pre výška.
void
vyska(double výška)
 Alias pre výška.
double
výška()
 Vráti aktuálnu výšku častice.
void
výška(double výška)
 Nastaví novú výšku častice.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
x
public double x
Atribút súradnice x polohy častice.
y
public double y
Atribút súradnice y polohy častice.
uhol
public double uhol
Atribút smeru častice.
w
public double w
Atribút šírky častice. (Anglicky: width.)
h
public double h
Atribút výšky častice. (Anglicky: height.)
Podrobnosti konštruktorov
Častica
public Častica()
Podrobnosti metód
polohaX
public double polohaX()
 Metóda vráti súradnicu x polohy častice.
 Metóda je povinnou súčasťou implementácie rozhrania Poloha, inak je prístup k atribútom x, y verejný.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
x-ová súradnica častice
polohaY
public double polohaY()
 Metóda vráti súradnicu y polohy častice.
 Metóda je povinnou súčasťou implementácie rozhrania Poloha, inak je prístup k atribútom x, y verejný.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
y-ová súradnica častice
súradnicaX
public double súradnicaX()
 Metóda vráti súradnicu x polohy častice.
 Metóda je povinnou súčasťou implementácie rozhrania Poloha, inak je prístup k atribútom x, y verejný.
Definované:
súradnicaX v rozhraní Poloha
Návratová hodnota:
x-ová súradnica častice
suradnicaX
public double suradnicaX()
 Alias pre súradnicaX.
Definované:
suradnicaX v rozhraní Poloha
súradnicaY
public double súradnicaY()
 Metóda vráti súradnicu y polohy častice.
 Metóda je povinnou súčasťou implementácie rozhrania Poloha, inak je prístup k atribútom x, y verejný.
Definované:
súradnicaY v rozhraní Poloha
Návratová hodnota:
y-ová súradnica častice
suradnicaY
public double suradnicaY()
 Alias pre súradnicaY.
Definované:
suradnicaY v rozhraní Poloha
poloha
public Bod poloha()
 Metóda vráti objekt spájajúce obidve
 súradnice polohy častice.
 Metóda je povinnou súčasťou implementácie rozhrania Poloha, inak je prístup k atribútom x, y verejný.
Definované:
poloha v rozhraní Poloha
Návratová hodnota:
inštancia triedy Bod obsahujúca aktuálne súradnice
     častice
poloha
public void poloha(Poloha bod)
 Metóda nastaví nové súradnice častice
 podľa zadaného bodu.
Parametre:
bod – bod určujúci novú polohu častice
poloha
public void poloha(double novéX,
                   double novéY)
 Metóda nastaví nové súradnice častice.
Parametre:
novéX – nová x-ová súradnica častice
novéY – nová y-ová súradnica častice
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tejto častice dokonale zhoduje so zadanými
 súradnicami. Ak je zistená zhoda, tak metóda vráti hodnotu true, v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha tejto častice
y – y-ová súradnica, s ktorou má byť porovnaná poloha tejto častice
Návratová hodnota:
true ak sa poloha tejto častice zhoduje so zadanými
     súradnicami, false v opačnom prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tejto častice a poloha zadaného objektu dokonale
 zhodujú. Ak je zistená zhoda, tak metóda vráti hodnotu true,
 v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná s polohou tejto
     častice
Návratová hodnota:
true ak sa poloha tejto častice zhoduje s polohou
     zadaného objektu, false v opačnom prípade
uhol
public double uhol()
 Metóda vráti smer častice.
 Metóda je povinnou súčasťou implementácie rozhrania Smer, inak je prístup k atribútu uhol verejný.
Definované:
uhol v rozhraní Smer
smer
public double smer()
 Metóda vráti smer častice.
 Metóda je povinnou súčasťou implementácie rozhrania Smer, inak je prístup k atribútu uhol verejný.
Definované:
smer v rozhraní Smer
uhol
public void uhol(double uhol)
 Metóda nastaví nový smer častice.
Parametre:
uhol – hodnota určujúca nový uhol častice
smer
public void smer(double uhol)
 Metóda nastaví nový smer častice.
Parametre:
uhol – hodnota určujúca nový uhol častice
uhol
public void uhol(Smer objekt)
 Metóda nastaví nový smer častice.
Parametre:
uhol – objekt určujúci nový uhol častice
smer
public void smer(Smer objekt)
 Metóda nastaví nový smer častice.
Parametre:
uhol – objekt určujúci nový uhol častice
šírka
public double šírka()
 Vráti aktuálnu šírku častice.
 Metóda je povinnou súčasťou implementácie rozhrania Rozmer, inak je prístup k atribútom w, h verejný.
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
aktuálna šírka častice
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
 Vráti aktuálnu výšku častice.
 Metóda je povinnou súčasťou implementácie rozhrania Rozmer, inak je prístup k atribútom w, h verejný.
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
aktuálna výška častice
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
šírka
public void šírka(double šírka)
 Nastaví novú šírku častice.
 Metóda je povinnou súčasťou implementácie rozhrania Rozmer, inak je prístup k atribútom w, h verejný.
Definované:
šírka v rozhraní Rozmer
Parametre:
šírka – nová šírka častice
sirka
public void sirka(double šírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double výška)
 Nastaví novú výšku častice.
 Metóda je povinnou súčasťou implementácie rozhrania Rozmer, inak je prístup k atribútom w, h verejný.
Definované:
výška v rozhraní Rozmer
Parametre:
výška – nová výška častice
vyska
public void vyska(double výška)
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmery
public Rozmery rozmery()
Zistí aktuálne rozmery častice.
Definované:
rozmery v rozhraní Rozmer
Návratová hodnota:
objekt vytvorený podľa aktuálnych rozmerov častice
rozmery
public void rozmery(double šírka,
                    double výška)
Nastaví nové rozmery častice.
 Metóda je povinnou súčasťou implementácie rozhrania Rozmer, inak je prístup k atribútom w, h verejný.
Parametre:
šírka – nová šírka častice
výška – nová výška častice
rozmery
public void rozmery(Rozmer rozmer)
Nastaví nové rozmery častice podľa zadanej implementácie
 rozmeru.
Definované:
rozmery v rozhraní Rozmer
Parametre:
rozmer – inštancia obsahujúca nové rozmery častice
máŠírku
public boolean máŠírku(double šírka)
Zistí, či má častica zadanú šírku.
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – šírka, ktorá má byť porovnaná so šírkou častice
Návratová hodnota:
true ak sa šírka častice zhoduje so
     zadanou šírkou, false v opačnom prípade
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Zistí, či má častica zadanú výšku.
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – výška, ktorá má byť porovnaná s výškou častice
Návratová hodnota:
true ak sa výška častice zhoduje so
     zadanou výškou, false v opačnom prípade
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí, či sa rozmery častice a rozmery zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi častice
Návratová hodnota:
true ak sa rozmery častice zhodujú s rozmermi
     zadaného objektu, false v opačnom prípade
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí, či sa rozmery častice dokonale zhodujú so zadanými
 rozmermi. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – šírka porovnávaná so šírkou častice
výška – výška porovnávaná s výškou častice
Návratová hodnota:
true ak sa rozmery častice zhodujú so
     zadanými rozmermi, false v opačnom prípade
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
náhodnáPoloha
public void náhodnáPoloha()
Vygeneruje pre časticu náhodné súradnice x a y, ktoré budú
 v rozsahu hraničných hodnôt plochy plátien sveta grafického
 robota.
náhodnýSmer
public void náhodnýSmer()
Vygeneruje pre časticu náhodnú hodnotu smeru.
aktivita
public void aktivita()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v triedach odvodených od častice. Častica môže byť chápaná ako
 odľahčená verzia robota. O celú jej funkčnosť (vrátane aktivity
 alebo pasivity) sa musí postarať programátor, ktorý sa ju rozhodne
 rozšíriť a využiť na svoje účely. Aktivita (rovnako ako pasivita)
 častice nie je v programovacom rámci GRobot nikde vnútorne použitá,
 ale jej definícia v tejto triede poskytuje spoločný bod použitia
 všetkých odvodených tried.
pasivita
public void pasivita()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v triedach odvodených od častice. Častica môže byť chápaná ako
 odľahčená verzia robota. O celú jej funkčnosť (vrátane aktivity
 alebo pasivity) sa musí postarať programátor, ktorý sa ju rozhodne
 rozšíriť a využiť na svoje účely. Pasivita (rovnako ako aktivita)
 častice nie je v programovacom rámci GRobot nikde vnútorne použitá,
 ale jej definícia v tejto triede poskytuje spoločný bod použitia
 všetkých odvodených tried.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":9,"i21":9,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":10,"i28":9,"i29":9,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":9,"i48":9,"i49":9,"i50":9,"i51":9,"i52":9,"i53":9,"i54":9,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":9,"i65":9,"i66":9,"i67":9,"i68":10,"i69":10,"i70":9,"i71":9,"i72":9,"i73":9,"i74":9,"i75":9,"i76":9,"i77":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Farba
java.lang.Object
java.awt.Color
Farba
Všetky implementované rozhrania:
Paint, Transparency, Serializable, Comparable&lt;Color&gt;
public class Farba
extends Color
implements Comparable&lt;Color&gt;
Trieda je určená na prácu s farbami v rámci programovacieho rámca
 GRobot. Všetky farby, s ktorými robot pracuje sú zväčša určované
 tromi alebo štyrmi celočíselnými údajmi v rozsahu od 0 do 255 – ide
 o farebné zložky (červenej, zelenej a modrej) na namiešanie
 výslednej farby a zložku (ne)priehľadnosti (0 znamená neviditeľná
 farba, 255 znamená úplne nepriehľadná farba). Táto trieda umožňuje
 definovať farby aj s pomocou neceločíselných rozsahov – od 0.0 po 1.0,
 ktoré sú zase používané napríklad v metódach pracujúcich
 s (ne)priehľadnosťou plátna.
 
 Táto trieda obaľuje triedu Javy Color. Mierne
 rozširuje a upravuje jej správanie, najmä v súvislosti so získavaním
 farieb so svetlejším alebo tmavším odtieňom, kde sa berie do úvahy aj úroveň
 priehľadnosti, ktorú zachováva (na rozdiel od originálnej triedy).
 Ďalšie vybrané metódy sú k dispozícii s názvami preloženými do
 slovenského jazyka. Neceločíselné rozsahy (0.0 –
 1.0) typu float umožňuje zadávať ako údajový
 typ double, pretože tento údajový typ je široko
 používaný grafickým robotom a nevyžaduje špeciálnu syntax pri
 vkladaní hodnôt. (Konkrétne tým trieda programátora oslobodzuje od
 nevyhnutnosti používania operátora pretypovania: (float).)
 
 Rovnako ako originálna trieda Color i trieda
 Farba pracuje buď v predvolenom sRGB farebnom priestore,
 alebo vo farebnom priestore definovanom s pomocou triedy ColorSpace. Každá farba má vlastnú úroveň
 (ne)priehľadnosti, ktorá je predvolene nastavená na «nepriehľadnú»
 alebo môže byť určená v rámci povoleného rozsahu (pozri konštruktory
 nižšie). V súlade s konvenciou triedy Color znamená
 najvyššia hodnota atribútu „priehľadnosti“ (alebo skôr
 nepriehľadnosti – Color.getAlpha()) úplne nepriehľadný
 bod a naopak.
 
 Množstvo predvolených farebných inštancií je definovaných v rozhraní
 Farebnosť. Nasledujúci príklad ukazuje ich využitie
 pri kreslení kruhov vyplnených náhodnou farbou:
 
 
// Zoznam farieb
final Farba[] farby = {
        svetločervená, červená, tmavočervená, svetlozelená, zelená,
        tmavozelená, svetlomodrá, modrá, tmavomodrá, svetlotyrkysová,
        tyrkysová, tmavotyrkysová, svetlopurpurová, purpurová,
        tmavopurpurová, svetložltá, žltá, tmavožltá, čierna, tmavošedá,
        šedá, svetlošedá, biela, svetlohnedá, hnedá, tmavohnedá,
        svetlooranžová, oranžová, tmavooranžová, svetloružová, ružová,
        tmavoružová,
    };
skry();
Svet.nekresli();
for (int i = 0; i &lt; 1000; ++i)
{
    // Náhodná poloha kruhu
    double skočNaX = Svet.náhodnéReálneČíslo(
        Svet.najmenšieX(), Svet.najväčšieX());
    double skočNaY = Svet.náhodnéReálneČíslo(
        Svet.najmenšieY(), Svet.najväčšieY());
    // Náhodná farba a veľkosť kruhu
    int ktoráFarba = (int)Svet.náhodnéCeléČíslo
        (farby.length &#45; 1);
    double akáVeľkosť = Svet.náhodnéCeléČíslo(25, 50);
    // Nakreslenie farebného kruhu
    skočNa(skočNaX, skočNaY);
    farba(farby[ktoráFarba]);
    kruh(akáVeľkosť);
    // Prekreslenie každú 10-tu iteráciu
    if (i % 10 == 0)
    {
        Svet.prekresli();
        Svet.čakaj(0.050);
    }
}
Svet.kresli();
 
 Výsledok:
 
 
 Výsledok kreslenia príkladu.
 
 V príklade je najprv definovaný zoznam farieb v poli, z ktorého sa
 neskôr vyberá náhodná farba. Skryje sa
 aktuálny grafický robot a vypne sa
 automatické prekresľovanie (aby bolo vykonanie príkladu rýchlejšie).
 Potom sa tisíc ráz opakuje sekvencia príkazov na kreslenie kruhu
 (for (i = … 1000…). Kruh sa má nakresliť na náhodnej pozícii, má byť
 vyplnený náhodnou farbou (v rámci spomenutého zoznamu farieb) a má
 mať náhodnú veľkosť (s polomerom medzi 25 až 50 bodov) – generovanie
 náhodných súradníc, veľkosti a výber náhodnej farby sú z dôvodu
 prehľadnosti oddelené od časti samotného kreslenia kruhu. V cykle sa
 nachádza blok príkazov na prekreslenie
 s podmienkou určujúcou, že (exaktne povedané) prekreslenie sa má
 vykonať vždy, keď je riadiaca premenná cyklu i deliteľná
 desiatimi bezo zvyšku (i % 10) – to znamená, že sa
 vykoná každý desiaty raz. Pri prekreslení je program zároveň
 pozdržaný o 50 milisekúnd – to by
 znamenalo, že ak by prekreslenie nezaberalo určitý čas, tak by sa celý
 program stihol vykonať za asi 5 sekúnd; v skutočnosti je to viac,
 pretože prekresľovanie trvá postrehnuteľne dlhší čas. Nakoniec je
 opätovne zapnuté automatické prekresľovanie.
 
 S novšími príkazmi triedy GRobot sa dá predchádzajúci
 príklad skrátiť takto:
 
 
skry();
Svet.nekresli();
for (int i = 0; i &lt; 1000; ++i)
{
    // Voľba náhodnej veľkosti kruhu
    double polomer = Svet.náhodnéCeléČíslo(25, 50);
    // Nakreslenie farebného kruhu
    náhodnáPoloha();
    náhodnáFarba();
    kruh(polomer);
    // Prekreslenie každú 10-tu iteráciu
    if (i % 10 == 0)
    {
        Svet.prekresli();
        Svet.čakaj(0.050);
    }
}
Svet.kresli();
Pozri tiež:
Farebnosť, 
Color, 
ColorSpace, 
Serializovateľnosť
Prehľad atribútov
Atribúty zdedené z triedy java.awt.Color
black, BLACK, blue, BLUE, cyan, CYAN, DARK_GRAY, darkGray, gray, GRAY, green, GREEN, LIGHT_GRAY, lightGray, magenta, MAGENTA, orange, ORANGE, pink, PINK, red, RED, white, WHITE, yellow, YELLOW
Atribúty zdedené z rozhrania java.awt.Transparency
BITMASK, OPAQUE, TRANSLUCENT
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Farba(Color c)
Vytvorí inštanciu farby z jestvujúcej inštancie triedy Color.
Farba(ColorSpace cspace,
     float[] components,
     float alpha)
Vytvorí inštanciu farby v určenom farebnom priestore (ColorSpace).
Farba(double r,
     double g,
     double b)
Vytvorí nepriehľadnú farbu zo zložiek červená (r), zelená (g)
 a modrá (b) v rozsahu (0.0 – 1.0).
Farba(double r,
     double g,
     double b,
     double a)
Vytvorí farbu zo zložiek červená (r), zelená (g), modrá (b)
 a priehľadnosť (a) v rozsahu (0.0 – 1.0).
Farba(Farebnosť o)
Vytvorí novú inštanciu farby podľa farby zadaného objektu.
Farba(int rgb)
Vytvorí nepriehľadnú farbu vo farebnom priestore sRGB, pričom
 jednotlivé farebné zložky tvoria skupiny bitov: červená bity 16 –
 23, zelená 8 – 15 a modrá 0 – 7.
Farba(int rgba,
     boolean hasalpha)
Vytvorí farbu vo farebnom priestore sRGB, pričom jednotlivé
 farebné zložky a priehľadnosť tvoria skupiny bitov: červená bity
 16 – 23, zelená 8 – 15, modrá 0 – 7 a priehľadnosť 24 – 31.
Farba(int r,
     int g,
     int b)
Vytvorí nepriehľadnú farbu vo farebnom priestore sRGB zo zložiek
 červená (r), zelená (g) a modrá (b) v rozsahu (0 – 255).
Farba(int r,
     int g,
     int b,
     int a)
Vytvorí farbu vo farebnom priestore sRGB zo zložiek červená (r),
 zelená (g), modrá (b) a priehľadnosť (a) v rozsahu (0 – 255).
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Farba
bledsia()
 Alias pre svetlejšia.
Farba
bledsia(double faktor)
 Alias pre svetlejšia.
Farba
bledšia()
 Alias pre svetlejšia.
Farba
bledšia(double faktor)
 Alias pre svetlejšia.
int
cervena()
 Alias pre červená.
int
compareTo(Color ináFarba)
Táto metóda je súčasťou implementácie rozhrania Comparable.
int
červená()
 Vráti červenú zložku v rozsahu 0 – 255.
static Farba
dialogVolbaFarby()
 Alias pre zvoľFarbu.
static Farba
dialógVoľbaFarby()
 Alias pre zvoľFarbu.
static Farba
dialogVolbaFarby(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
dialógVoľbaFarby(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
dialogVolbaFarby(String titulok)
 Alias pre zvoľFarbu.
static Farba
dialógVoľbaFarby(String titulok)
 Alias pre zvoľFarbu.
static Farba
dialogVolbaFarby(String titulok,
                Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
dialógVoľbaFarby(String titulok,
                Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
dialogVyberFarby()
 Alias pre vyberFarbu.
static Farba
dialógVýberFarby()
 Alias pre vyberFarbu.
static Farba
dialogVyberFarby(Color počiatočnáFarba)
 Alias pre vyberFarbu.
static Farba
dialógVýberFarby(Color počiatočnáFarba)
 Alias pre vyberFarbu.
static Farba
dialogVyberFarby(String titulok)
 Alias pre vyberFarbu.
static Farba
dialógVýberFarby(String titulok)
 Alias pre vyberFarbu.
static Farba
dialogVyberFarby(String titulok,
                Color počiatočnáFarba)
 Alias pre vyberFarbu.
static Farba
dialógVýberFarby(String titulok,
                Color počiatočnáFarba)
 Alias pre vyberFarbu.
static String
farbaNaRetazec(Color farba)
 Alias pre farbaNaReťazec.
static String
farbaNaReťazec(Color farba)
Prevedie zadanú inštanciu farby do textovej podoby.
static String
farbaNaRetazec(Farebnosť farba)
 Alias pre farbaNaReťazec.
static String
farbaNaReťazec(Farebnosť farba)
Prevedie zadanú implementáciu farebnosti do textovej podoby.
Farba
gamaKorekcia(double γ)
Vyrobí novú farbu upravenú s použitím algoritmu gama (γ) korekcie.
static int
HSBtoRGB(double h,
        double s,
        double b)
Vykoná konverziu z farebnej reprezentácie HSB do RGB.
static int
HSVtoRGB(double h,
        double s,
        double v)
Vykoná konverziu z farebnej reprezentácie HSV do RGB.
Farba
jasKontrast(double jas,
           double kontrast)
Vyrobí novú farbu s upravenými parametrami jasu a kontrastu.
Farba
menejPriehladna()
 Alias pre nepriehľadnejšia.
Farba
menejPriehľadná()
 Alias pre nepriehľadnejšia.
Farba
menejPriehladna(double faktor)
 Alias pre nepriehľadnejšia.
Farba
menejPriehľadná(double faktor)
 Alias pre nepriehľadnejšia.
int
modra()
 Alias pre modrá.
int
modrá()
 Vráti modrú zložku v rozsahu 0 – 255.
Farba
nepriehladnejsia()
 Alias pre nepriehľadnejšia.
Farba
nepriehladnejsia(double faktor)
 Alias pre nepriehľadnejšia.
Farba
nepriehľadnejšia()
Vytvorí menej priehľadnú verziu tejto farby.
Farba
nepriehľadnejšia(double faktor)
Vytvorí menej priehľadnú verziu tejto farby na základe zadaného
 faktora.
Farba
priehladnejsia()
 Alias pre priehľadnejšia.
Farba
priehladnejsia(double faktor)
 Alias pre priehľadnejšia.
Farba
priehľadnejšia()
Vytvorí priehľadnejšiu verziu tejto farby.
Farba
priehľadnejšia(double faktor)
Vytvorí priehľadnejšiu verziu tejto farby na základe zadaného
 faktora.
int
priehladnost()
 Alias pre priehľadnosť.
int
priehľadnosť()
 Vráti úroveň priehľadnosti v rozsahu 0 – 255
static Farba
retazecNaFarbu(String text)
 Alias pre reťazecNaFarbu.
static Farba
reťazecNaFarbu(String text)
Prevedie zadaný reťazec reprezentujúci farbu na inštanciu farby.
static double[]
RGBtoHSB(int rgb)
Vykoná konverziu z farebnej reprezentácie RGB do HSB.
static double[]
RGBtoHSB(int rgb,
        double[] hsb)
Vykoná konverziu z farebnej reprezentácie RGB do HSB.
static double[]
RGBtoHSV(int rgb)
Vykoná konverziu z farebnej reprezentácie RGB do HSV.
static double[]
RGBtoHSV(int rgb,
        double[] hsv)
Vykoná konverziu z farebnej reprezentácie RGB do HSV.
static boolean
spravnyFormat(String text)
 Alias pre správnyFormát.
static boolean
správnyFormát(String text)
Posúdi, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom farbu.
Farba
svetlejsia()
 Alias pre svetlejšia.
Farba
svetlejsia(double faktor)
 Alias pre svetlejšia.
Farba
svetlejšia()
Vytvorí novú bledšiu verziu tejto farby.
Farba
svetlejšia(double faktor)
Vytvorí novú bledšiu verziu tejto farby.
Farba
tmavsia()
 Alias pre tmavšia.
Farba
tmavsia(double faktor)
 Alias pre tmavšia.
Farba
tmavšia()
Vytvorí novú tmavšiu verziu tejto farby.
Farba
tmavšia(double faktor)
Vytvorí novú tmavšiu verziu tejto farby.
String
toString()
Reťazcová reprezentácia tejto farby na účely ladenia obsahujúca
 informáciu o farebných zložkách a alfe.
static Farba
vyberFarbu()
Otvorí dialóg na výber farby.
static Farba
vyberFarbu(Color počiatočnáFarba)
Otvorí dialóg na výber farby.
static Farba
vyberFarbu(String titulok)
Otvorí dialóg na výber farby.
static Farba
vyberFarbu(String titulok,
          Color počiatočnáFarba)
Otvorí dialóg na výber farby.
int
zelena()
 Alias pre zelená.
int
zelená()
 Vráti zelenú zložku v rozsahu 0 – 255.
static Farba
zvolFarbu()
 Alias pre zvoľFarbu.
static Farba
zvoľFarbu()
Otvorí dialóg na výber farby.
static Farba
zvolFarbu(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
zvoľFarbu(Color počiatočnáFarba)
Otvorí dialóg na výber farby.
static Farba
zvolFarbu(String titulok)
 Alias pre zvoľFarbu.
static Farba
zvoľFarbu(String titulok)
Otvorí dialóg na výber farby.
static Farba
zvolFarbu(String titulok,
         Color počiatočnáFarba)
 Alias pre zvoľFarbu.
static Farba
zvoľFarbu(String titulok,
         Color počiatočnáFarba)
Otvorí dialóg na výber farby.
Metódy zdedené z triedy java.awt.Color
brighter, createContext, darker, decode, equals, getAlpha, getBlue, getColor, getColor, getColor, getColorComponents, getColorComponents, getColorSpace, getComponents, getComponents, getGreen, getHSBColor, getRed, getRGB, getRGBColorComponents, getRGBComponents, getTransparency, hashCode, HSBtoRGB, RGBtoHSB
Metódy zdedené z triedy java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
Farba
public Farba(Color c)
Vytvorí inštanciu farby z jestvujúcej inštancie triedy Color.
Parametre:
c – objekt typu Color alebo odvodenej triedy
     (napríklad Farba)
Farba
public Farba(Farebnosť o)
Vytvorí novú inštanciu farby podľa farby zadaného objektu.
Parametre:
o – objekt, ktorého farba určí novú farbu
Farba
public Farba(ColorSpace cspace,
             float[] components,
             float alpha)
Vytvorí inštanciu farby v určenom farebnom priestore (ColorSpace). Pre rôzne farebné priestory
 platia rôzne podmienky. Napríklad: RGB vyžaduje tri komponenty, ale
 CMYK štyri.
 
 Tento konštruktor bol vytvorený na zabezpečenie úplnej
 kompatibility s triedou Color.
Parametre:
cspace – farebný priestor použitý na interpretáciu farebných
     zložiek
components – potrebný počet farebných zložiek požadovaný
     zadaným farebným priestorom
alpha – hodnota priehľadnosti (0.0 – neviditeľná farba; 1.0 –
     nepriehľadná farba)
Výnimky:
IllegalArgumentException – ak je hociktorá hodnota
     farebnej zložky alebo priehľadnosti mimo povoleného rozsahu
     0.0 – 1.0
Pozri tiež:
ColorSpace
Farba
public Farba(double r,
             double g,
             double b)
Vytvorí nepriehľadnú farbu zo zložiek červená (r), zelená (g)
 a modrá (b) v rozsahu (0.0 – 1.0). Priehľadnosť je predvolene
 nastavená na hodnotu 1.0. Skutočná farba použitá pri kreslení
 závisí od výstupného zariadenia, pričom je zvolená taká farba, aby
 bol dosiahnutý čo najlepší výsledok.
Parametre:
r – červená zložka
g – zelená zložka
b – modrá zložka
Výnimky:
IllegalArgumentException – ak je hodnota r,
     g alebo b mimo povoleného rozsahu 0.0 – 1.0
Farba
public Farba(double r,
             double g,
             double b,
             double a)
Vytvorí farbu zo zložiek červená (r), zelená (g), modrá (b)
 a priehľadnosť (a) v rozsahu (0.0 – 1.0). Skutočná farba použitá
 pri kreslení závisí od výstupného zariadenia, pričom je zvolená
 taká farba, aby bol dosiahnutý čo najlepší výsledok.
Parametre:
r – červená zložka
g – zelená zložka
b – modrá zložka
a – priehľadnosť (0.0 – neviditeľná farba;
     1.0 – nepriehľadná farba)
Výnimky:
IllegalArgumentException – ak je hodnota r,
     g, b alebo a mimo povoleného rozsahu
     0.0 – 1.0
Farba
public Farba(int rgb)
Vytvorí nepriehľadnú farbu vo farebnom priestore sRGB, pričom
 jednotlivé farebné zložky tvoria skupiny bitov: červená bity 16 –
 23, zelená 8 – 15 a modrá 0 – 7. Priehľadnosť je predvolene
 nastavená na hodnotu 255. Skutočná farba použitá pri kreslení
 závisí od výstupného zariadenia, pričom je zvolená taká farba, aby
 bol dosiahnutý čo najlepší výsledok.
Parametre:
rgb – kombinácia zložiek RGB
Farba
public Farba(int rgba,
             boolean hasalpha)
Vytvorí farbu vo farebnom priestore sRGB, pričom jednotlivé
 farebné zložky a priehľadnosť tvoria skupiny bitov: červená bity
 16 – 23, zelená 8 – 15, modrá 0 – 7 a priehľadnosť 24 – 31.
 Skutočná farba použitá pri kreslení závisí od výstupného
 zariadenia, pričom je zvolená taká farba, aby bol dosiahnutý čo
 najlepší výsledok. Ak je argument „hasalpha“ (voľný preklad – „má
 priehľadnosť“) rovný false, tak je priehľadnosť
 nastavená na hodnotu 255 (nepriehľadná farba).
Parametre:
rgba – kombinácia zložiek ARGB
hasalpha – ak má byť množina bitov priehľadnosti (bity
     číslo 24 až 31) vzatá do úvahy, tak musí byť hodnota
     tohto argumentu rovná true, inak bude použitá
     hodnota priehľadnosti 255 bez ohľadu na hodnoty uvedených
     bitov
Farba
public Farba(int r,
             int g,
             int b)
Vytvorí nepriehľadnú farbu vo farebnom priestore sRGB zo zložiek
 červená (r), zelená (g) a modrá (b) v rozsahu (0 – 255).
 Priehľadnosť je predvolene nastavená na hodnotu 255 (nepriehľadná
 farba). Skutočná farba použitá pri kreslení závisí od výstupného
 zariadenia, pričom je zvolená taká farba, aby bol dosiahnutý čo
 najlepší výsledok.
Parametre:
r – červená zložka
g – zelená zložka
b – modrá zložka
Výnimky:
IllegalArgumentException – ak je hodnota r,
     g alebo b mimo povoleného rozsahu 0 – 255
Farba
public Farba(int r,
             int g,
             int b,
             int a)
Vytvorí farbu vo farebnom priestore sRGB zo zložiek červená (r),
 zelená (g), modrá (b) a priehľadnosť (a) v rozsahu (0 – 255).
Parametre:
r – červená zložka
g – zelená zložka
b – modrá zložka
a – priehľadnosť (0 – neviditeľná farba;
     255 – nepriehľadná farba)
Výnimky:
IllegalArgumentException – ak je hodnota r,
     g, b alebo a mimo povoleného rozsahu
     0 – 255
Podrobnosti metód
červená
public int červená()
 Vráti červenú zložku v rozsahu 0 – 255.
Návratová hodnota:
červená farebná zložka
cervena
public int cervena()
 Alias pre červená.
zelená
public int zelená()
 Vráti zelenú zložku v rozsahu 0 – 255.
Návratová hodnota:
zelená farebná zložka
zelena
public int zelena()
 Alias pre zelená.
modrá
public int modrá()
 Vráti modrú zložku v rozsahu 0 – 255.
Návratová hodnota:
modrá farebná zložka
modra
public int modra()
 Alias pre modrá.
priehľadnosť
public int priehľadnosť()
 Vráti úroveň priehľadnosti v rozsahu 0 – 255.
 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
úroveň priehľadnosti
priehladnost
public int priehladnost()
 Alias pre priehľadnosť.
svetlejšia
public Farba svetlejšia()
Vytvorí novú bledšiu verziu tejto farby. Metóda použije na každú
 farebnú zložku (RGB) vlastnú mierku (faktor) na zosvetlenie tejto
 farby.
 
 Poznámka: Táto metóda funguje podobne ako
 originálna metóda triedy Color.brighter(), len berie do úvahy aj
 priehľadnosť pôvodnej farby a zachováva ju.
 
 Upozornenie: I keď sú operácie
 svetlejšia a tmavšia opačné (myslené
 logicky), ich niekoľkonásobné striedavé použitie bude v dôsledku
 zaokrúhlení viesť k získaniu úplne inej farby.
 
 Poznámka: Táto metóda používa predvolenú
 hodnotu faktoru zosvetlenia 0.7. Pozri aj svetlejšia(faktor).
Návratová hodnota:
nová inštancia triedy Farba s bledšou
     verziou tejto farby
Pozri tiež:
svetlejšia(), 
tmavšia()
svetlejsia
public Farba svetlejsia()
 Alias pre svetlejšia.
bledšia
public Farba bledšia()
 Alias pre svetlejšia.
bledsia
public Farba bledsia()
 Alias pre svetlejšia.
tmavšia
public Farba tmavšia()
Vytvorí novú tmavšiu verziu tejto farby. Metóda použije na každú
 farebnú zložku (RGB) vlastnú mierku (faktor) na stmavenie tejto
 farby.
 
 Poznámka: Táto metóda funguje podobne ako
 originálna metóda triedy Color.darker(), len berie do úvahy aj
 priehľadnosť pôvodnej farby a zachováva ju.
 
 Upozornenie: I keď sú operácie
 svetlejšia a tmavšia opačné (myslené logicky),
 ich niekoľkonásobné striedavé použitie bude v dôsledku zaokrúhlení
 viesť k získaniu úplne inej farby.
 
 Poznámka: Táto metóda používa predvolenú
 hodnotu faktoru stmavenia 0.7. Pozri aj tmavšia(faktor).
Návratová hodnota:
nová inštancia triedy Farba s tmavšou
     verziou tejto farby
tmavsia
public Farba tmavsia()
 Alias pre tmavšia.
priehľadnejšia
public Farba priehľadnejšia()
Vytvorí priehľadnejšiu verziu tejto farby.
 
 Poznámka: Táto metóda používa predvolenú
 hodnotu faktoru spriehľadnenia 0.7. Pozri aj priehľadnejšia(faktor).
Návratová hodnota:
nová inštancia triedy Farba s priehľadnejšou
     verziou tejto farby
priehladnejsia
public Farba priehladnejsia()
 Alias pre priehľadnejšia.
nepriehľadnejšia
public Farba nepriehľadnejšia()
Vytvorí menej priehľadnú verziu tejto farby.
 
 Poznámka: Táto metóda používa predvolenú
 hodnotu faktoru znepriehľadnenia 0.7. Pozri aj nepriehľadnejšia(faktor).
Návratová hodnota:
nová inštancia triedy Farba s menej
     priehľadnou verziou tejto farby
nepriehladnejsia
public Farba nepriehladnejsia()
 Alias pre nepriehľadnejšia.
menejPriehľadná
public Farba menejPriehľadná()
 Alias pre nepriehľadnejšia.
menejPriehladna
public Farba menejPriehladna()
 Alias pre nepriehľadnejšia.
svetlejšia
public Farba svetlejšia(double faktor)
Vytvorí novú bledšiu verziu tejto farby. Metóda použije na každú
 farebnú zložku (RGB) zadanú mierku (faktor) zosvetlenia.
 
 Upozornenie: I keď sú operácie
 svetlejšia a tmavšia opačné
 (myslené logicky), ich niekoľkonásobné striedavé použitie bude
 v dôsledku zaokrúhlení viesť k získaniu úplne inej farby.
Parametre:
faktor – faktor zosvetlenia – hodnota v rozsahu 0.0 – 1.0,
     pričom krajné hodnoty (0.0 a 1.0) nie sú povolené; čím je
     hodnota faktora nižšia, tým je zmena svetlosti výraznejšia
Návratová hodnota:
nová inštancia triedy Farba s bledšou
     verziou tejto farby
Pozri tiež:
tmavšia(double)
bledšia
public Farba bledšia(double faktor)
 Alias pre svetlejšia.
bledsia
public Farba bledsia(double faktor)
 Alias pre svetlejšia.
svetlejsia
public Farba svetlejsia(double faktor)
 Alias pre svetlejšia.
tmavšia
public Farba tmavšia(double faktor)
Vytvorí novú tmavšiu verziu tejto farby. Metóda použije na každú
 farebnú zložku (RGB) zadanú mierku (faktor) stmavenia.
 
 Upozornenie: I keď sú operácie
 svetlejšia a tmavšia opačné
 (myslené logicky), ich niekoľkonásobné striedavé použitie bude
 v dôsledku zaokrúhlení viesť k získaniu úplne inej farby.
Parametre:
faktor – faktor stmavenia – hodnota v rozsahu 0.0 – 1.0,
     pričom krajné hodnoty (0.0 a 1.0) nie sú na použitie vhodné
     (0.0 by stmavila farbu do čiernej a 1.0 by nevykonala žiadnu
     zmenu svetlosti); čím je hodnota faktora nižšia, tým je
     úroveň stmavenia výraznejšia
Návratová hodnota:
nová inštancia triedy Farba s tmavšou
     verziou tejto farby
tmavsia
public Farba tmavsia(double faktor)
 Alias pre tmavšia.
priehľadnejšia
public Farba priehľadnejšia(double faktor)
Vytvorí priehľadnejšiu verziu tejto farby na základe zadaného
 faktora.
Parametre:
faktor – faktor spriehľadnenia – hodnota v rozsahu 0.0 – 1.0,
     pričom krajné hodnoty (0.0 a 1.0) nie sú na použitie vhodné
     (0.0 by nastavila farbu na úplne priehľadnú a 1.0 by
     nevykonala žiadnu zmenu priehľadnosti); čím je hodnota
     faktora nižšia, tým je úroveň zmeny priehľadnosti výraznejšia
Návratová hodnota:
nová inštancia triedy Farba s priehľadnejšou
     verziou tejto farby
priehladnejsia
public Farba priehladnejsia(double faktor)
 Alias pre priehľadnejšia.
nepriehľadnejšia
public Farba nepriehľadnejšia(double faktor)
Vytvorí menej priehľadnú verziu tejto farby na základe zadaného
 faktora.
Parametre:
faktor – faktor znepriehľadnenia – hodnota v rozsahu 0.0 –
     1.0, pričom krajné hodnoty (0.0 a 1.0) nie sú povolené; čím
     je hodnota faktora nižšia, tým je zmena nepriehľadnosti
     výraznejšia
Návratová hodnota:
nová inštancia triedy Farba s menej
     priehľadnou verziou tejto farby
nepriehladnejsia
public Farba nepriehladnejsia(double faktor)
 Alias pre nepriehľadnejšia.
menejPriehľadná
public Farba menejPriehľadná(double faktor)
 Alias pre nepriehľadnejšia.
menejPriehladna
public Farba menejPriehladna(double faktor)
 Alias pre nepriehľadnejšia.
jasKontrast
public Farba jasKontrast(double jas,
                         double kontrast)
Vyrobí novú farbu s upravenými parametrami jasu a kontrastu. Oba
 parametre môžu nadobúdať kladné aj záporné hodnoty. Na príklade nižšie
 vidno vygenerované farby pri rôznych hodnotách týchto parametrov.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Ukážka rôznych úrovní úpravy jasu a kontrastu
 (oboje v rozsahu −240 až 240 s krokom 80) zvolených farieb(zľava
 doprava: žltá, tmavotyrkysová, svetlopurpurová,
 tmavočervená, modrá a svetlozelená).
 
  
 
 Poznámka: Táto metóda používa rovnaký
 algoritmus ako metóda Obrázok.upravJasKontrast, ale na rozdiel od uvedenej metódy
 spracúva aj farby, ktoré sú úplne priehľadné.
Parametre:
jas – reálnočíselná hodnota určujúca mieru zmeny jasu;
     relevantné sú hodnoty v rozmedzí od −255.0 do 255.0
kontrast – reálnočíselná hodnota určujúca mieru zmeny kontrastu;
     relevantné sú hodnoty v rozmedzí od −255.0 do 255.0
gamaKorekcia
public Farba gamaKorekcia(double γ)
Vyrobí novú farbu upravenú s použitím algoritmu gama (γ) korekcie.
 Metóda používa rovnaký algoritmus ako Obrázok.gamaKorekcia. Ďalšie informácie
 o gama korekcii nájdete v opise uvedenej metódy. Parameter γ
 môže nadobúdať prakticky ľubovoľné hodnoty, ale odporúčaný rozsah je
 v rozmedzí od 0.01 do 7.99. Príklad nižšie
 ukazuje úpravu niekoľkých predvolených farieb s rovnakými hodnotami
 parametra γ.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Ukážka rôznych mier gama korekcie niekoľkých
 predvolených farieb(zľava doprava: žltá,
 tmavotyrkysová,
 svetlopurpurová,
 tmavočervená, modráa svetlozelená postupne
 upravené hodnotami γ: 0,01; 0,25; 0,5; 1,0; 2,0; 4,0 a 7.99).
Parametre:
γ – miera gama korekcie (gama korekcia súvisí s intenzitou
     farby; vhodný rozsah hodnôt je zhruba v rozmedzí 0,01 – 7,99)
Pozri tiež:
Obrázok.gamaKorekcia(double)
vyberFarbu
public static Farba vyberFarbu()
Otvorí dialóg na výber farby. Funguje rovnako ako metóda zvoľFarbu. Predvolená farba v otvorenom dialógu
 bude farba pozadia sveta. Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Návratová hodnota:
zvolená farba alebo null
dialógVýberFarby
public static Farba dialógVýberFarby()
 Alias pre vyberFarbu.
dialogVyberFarby
public static Farba dialogVyberFarby()
 Alias pre vyberFarbu.
zvoľFarbu
public static Farba zvoľFarbu()
Otvorí dialóg na výber farby. Funguje rovnako ako metóda vyberFarbu. Predvolená farba v otvorenom dialógu
 bude farba pozadia sveta. Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Návratová hodnota:
zvolená farba alebo null
zvolFarbu
public static Farba zvolFarbu()
 Alias pre zvoľFarbu.
dialógVoľbaFarby
public static Farba dialógVoľbaFarby()
 Alias pre zvoľFarbu.
dialogVolbaFarby
public static Farba dialogVolbaFarby()
 Alias pre zvoľFarbu.
vyberFarbu
public static Farba vyberFarbu(Color počiatočnáFarba)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda zvoľFarbu. Otvorený dialóg bude mať
 predvolenú zadanú farbu (argument počiatočnáFarba). Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
počiatočnáFarba – predvolená farba v novo otvorenom dialógu
Návratová hodnota:
zvolená farba alebo null
dialógVýberFarby
public static Farba dialógVýberFarby(Color počiatočnáFarba)
 Alias pre vyberFarbu.
dialogVyberFarby
public static Farba dialogVyberFarby(Color počiatočnáFarba)
 Alias pre vyberFarbu.
zvoľFarbu
public static Farba zvoľFarbu(Color počiatočnáFarba)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda vyberFarbu. Otvorený dialóg bude mať
 predvolenú zadanú farbu (argument počiatočnáFarba). Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
počiatočnáFarba – predvolená farba v novo otvorenom dialógu
Návratová hodnota:
zvolená farba alebo null
zvolFarbu
public static Farba zvolFarbu(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
dialógVoľbaFarby
public static Farba dialógVoľbaFarby(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
dialogVolbaFarby
public static Farba dialogVolbaFarby(Color počiatočnáFarba)
 Alias pre zvoľFarbu.
vyberFarbu
public static Farba vyberFarbu(String titulok)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda zvoľFarbu. Predvolená farba v otvorenom
 dialógu bude farba pozadia sveta.
 Po zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
titulok – vlastný titulok dialógu
Návratová hodnota:
zvolená farba alebo null
dialógVýberFarby
public static Farba dialógVýberFarby(String titulok)
 Alias pre vyberFarbu.
dialogVyberFarby
public static Farba dialogVyberFarby(String titulok)
 Alias pre vyberFarbu.
zvoľFarbu
public static Farba zvoľFarbu(String titulok)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda vyberFarbu. Predvolená farba v otvorenom
 dialógu bude farba pozadia sveta.
 Po zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
titulok – vlastný titulok dialógu
Návratová hodnota:
zvolená farba alebo null
zvolFarbu
public static Farba zvolFarbu(String titulok)
 Alias pre zvoľFarbu.
dialógVoľbaFarby
public static Farba dialógVoľbaFarby(String titulok)
 Alias pre zvoľFarbu.
dialogVolbaFarby
public static Farba dialogVolbaFarby(String titulok)
 Alias pre zvoľFarbu.
vyberFarbu
public static Farba vyberFarbu(String titulok,
                               Color počiatočnáFarba)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda zvoľFarbu. Otvorený dialóg bude
 mať predvolenú zadanú farbu (argument počiatočnáFarba). Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
titulok – vlastný titulok dialógu
počiatočnáFarba – predvolená farba v novo otvorenom dialógu
Návratová hodnota:
zvolená farba alebo null
dialógVýberFarby
public static Farba dialógVýberFarby(String titulok,
                                     Color počiatočnáFarba)
 Alias pre vyberFarbu.
dialogVyberFarby
public static Farba dialogVyberFarby(String titulok,
                                     Color počiatočnáFarba)
 Alias pre vyberFarbu.
zvoľFarbu
public static Farba zvoľFarbu(String titulok,
                              Color počiatočnáFarba)
Otvorí dialóg na výber farby. Funguje rovnako ako metóda vyberFarbu. Otvorený dialóg bude
 mať predvolenú zadanú farbu (argument počiatočnáFarba). Po
 zvolení želanej farby používateľom, vráti metóda zvolenú farbu
 v novom objekte typu Farba. Ak používateľ dialóg
 zruší, tak metóda vráti hodnotu null. Programátor má
 možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel na potvrdenie
 a zrušenie dialógu a na reset a miešanie farieb sú upraviteľné
 volaním metódy textTlačidla
 triedy Svet.
 
 
 Dialóg na výber farby.
Parametre:
titulok – vlastný titulok dialógu
počiatočnáFarba – predvolená farba v novo otvorenom dialógu
Návratová hodnota:
zvolená farba alebo null
zvolFarbu
public static Farba zvolFarbu(String titulok,
                              Color počiatočnáFarba)
 Alias pre zvoľFarbu.
dialógVoľbaFarby
public static Farba dialógVoľbaFarby(String titulok,
                                     Color počiatočnáFarba)
 Alias pre zvoľFarbu.
dialogVolbaFarby
public static Farba dialogVolbaFarby(String titulok,
                                     Color počiatočnáFarba)
 Alias pre zvoľFarbu.
RGBtoHSB
public static double[] RGBtoHSB(int rgb)
Vykoná konverziu z farebnej reprezentácie RGB do HSB.
 Argument tejto metódy očakáva zložky farebného priestoru RGB
 skombinované v jednej celočíselnej premennej (prípadná zložka
 priehľadnosti je ignorovaná).
 Hodnoty definujúce farbu farebného priestoru HSB sú vrátené ako
 prvky poľa reálnych čísel v rozsahu od 0.0 do
 1.0. Ide o:
  H – odtieň (hue) farby – vyjadruje farebný odtieň farby v rámci
  viditeľného farebného spektra),
  S – sýtosť (saturation) farby – hodnota 0.0 znamená,
  že farba je odtieňom šedej, hodnota 1.0 vyjadruje
  plne sýte farby,
  B – jas (brightnes) farby.
Parametre:
rgb – farba vyjadrená ako kombinácia zložiek farebného
     priestoru RGB
Návratová hodnota:
hodnoty definujúce farbu vo farebnom priestore HSB
Pozri tiež:
RGBtoHSV(int)
RGBtoHSB
public static double[] RGBtoHSB(int rgb,
                                double[] hsb)
Vykoná konverziu z farebnej reprezentácie RGB do HSB.
 Funguje rovnako ako metóda RGBtoHSB(rgb),
 ibaže očakáva vopred vytvorené trojprvkové pole typu
 double, do ktorého prevedené zložky vloží. Ak je
 namiesto poľa zadaná hodnota null, tak metóda pole
 vytvorí. Výsledné pole (vytvorené metódou alebo prijaté v druhom
 argumente) metóda zároveň vráti vo svojej návratovej hodnote.
Parametre:
rgb – farba vyjadrená ako kombinácia zložiek farebného
     priestoru RGB
hsb – pole, do ktorého metóda vloží hodnoty definujúce farbu
     vo farebnom priestore HSB alebo hodnota null
Návratová hodnota:
pole, ktoré bolo metóde odovzdané cez argument hsb,
     alebo nové pole, ktoré metóda vytvorila v prípade prijatia hodnoty
     null v parametri hsb
Pozri tiež:
RGBtoHSV(int, double[])
HSBtoRGB
public static int HSBtoRGB(double h,
                           double s,
                           double b)
Vykoná konverziu z farebnej reprezentácie HSB do RGB. Zložky
 farebného priestoru HSB sú očakávané v rozsahu od 0.0
 do 1.0.
 Argumenty sú prepočítané na zložky farebného priestoru RGB
 a skombinované do celočíselnej hodnoty vrátenej ako výsledok.
Parametre:
h – odtieň (hue) farby (vyjadruje farbu v rámci viditeľného
     farebného spektra)
s – sýtosť (saturation) farby (0.0 – odtiene
     šedej, 1.0 plne sýte farby)
b – jas (brightnes) farby
Návratová hodnota:
výsledná kombinácia RGB komponentov
Pozri tiež:
HSVtoRGB(double, double, double)
RGBtoHSV
public static double[] RGBtoHSV(int rgb)
Vykoná konverziu z farebnej reprezentácie RGB do HSV.
 Argument tejto metódy očakáva zložky farebného priestoru RGB
 skombinované v jednej celočíselnej premennej (prípadná zložka
 priehľadnosti je ignorovaná).
 Hodnoty definujúce farbu farebného priestoru HSV sú vrátené ako
 prvky poľa reálnych čísel v rozsahu od 0.0 do
 1.0. Ide o:
  H – odtieň (hue) farby – vyjadruje farebný odtieň farby v rámci
  viditeľného farebného spektra),
  S – sýtosť (saturation) farby – hodnota 0.0 znamená,
  že farba je odtieňom šedej, hodnota 1.0 vyjadruje
  plne sýte farby,
  V – valér (value) farby – vyjadruje svetlosť farby.
Parametre:
rgb – farba vyjadrená ako kombinácia zložiek farebného
     priestoru RGB
Návratová hodnota:
hodnoty definujúce farbu vo farebnom priestore HSV
Pozri tiež:
RGBtoHSB(int)
RGBtoHSV
public static double[] RGBtoHSV(int rgb,
                                double[] hsv)
Vykoná konverziu z farebnej reprezentácie RGB do HSV.
 Funguje rovnako ako metóda RGBtoHSV(rgb),
 ibaže očakáva trojprvkové pole typu double, do ktorého
 prevedené zložky vloží. Ak je namiesto poľa zadaná hodnota
 null, tak metóda pole vytvorí. Výsledné pole (vytvorené
 metódou alebo prijaté v druhom argumente) metóda zároveň vráti vo
 svojej návratovej hodnote.
Parametre:
rgb – farba vyjadrená ako kombinácia zložiek farebného
     priestoru RGB
hsv – pole, do ktorého metóda vloží hodnoty definujúce farbu
     vo farebnom priestore HSV alebo hodnota null
Návratová hodnota:
pole, ktoré bolo metóde odovzdané cez argument hsb,
     alebo nové pole, ktoré metóda vytvorila v prípade prijatia hodnoty
     null v parametri hsb
Pozri tiež:
RGBtoHSB(int, double[])
HSVtoRGB
public static int HSVtoRGB(double h,
                           double s,
                           double v)
Vykoná konverziu z farebnej reprezentácie HSV do RGB. Zložky
 farebného priestoru HSV sú očakávané v rozsahu od 0.0
 do 1.0.
 Argumenty sú prepočítané na zložky farebného priestoru RGB
 a skombinované do celočíselnej hodnoty vrátenej ako výsledok.
Parametre:
h – odtieň (hue) farby (vyjadruje farbu v rámci viditeľného
     farebného spektra)
s – sýtosť (saturation) farby (0.0 – odtiene
     šedej, 1.0 plne sýte farby)
v – valér (value) farby (vyjadruje svetlosť farby)
Návratová hodnota:
výsledná kombinácia RGB komponentov
Pozri tiež:
HSBtoRGB(double, double, double)
toString
public String toString()
Reťazcová reprezentácia tejto farby na účely ladenia obsahujúca
 informáciu o farebných zložkách a alfe. Pozri aj metódy
 farbaNaReťazec
 a reťazecNaFarbu.
Prekrývanie:
táto metóda prekrýva originálnu metódu toString v triede Color
Návratová hodnota:
reťazcová reprezentácia tejto farby na účely ladenia
     obsahujúca informáciu o farebných zložkách a alfe
farbaNaReťazec
public static String farbaNaReťazec(Color farba)
Prevedie zadanú inštanciu farby do textovej podoby. (Vhodné
 napríklad pri ukladaní údajov do konfiguračného súboru.)
Parametre:
farba – farba, ktorá má byť prevedená do reťazcovej podoby
Návratová hodnota:
farba prevedená do reťazcovej podoby
Pozri tiež:
reťazecNaFarbu(String)
farbaNaRetazec
public static String farbaNaRetazec(Color farba)
 Alias pre farbaNaReťazec.
farbaNaReťazec
public static String farbaNaReťazec(Farebnosť farba)
Prevedie zadanú implementáciu farebnosti do textovej podoby.
 (Vhodné napríklad pri ukladaní údajov do konfiguračného súboru.)
Parametre:
farba – inštancia farebnosti, ktorá má byť prevedená do
     reťazcovej podoby
Návratová hodnota:
implementácia farebnosti prevedená do reťazcovej podoby
Pozri tiež:
reťazecNaFarbu(String)
farbaNaRetazec
public static String farbaNaRetazec(Farebnosť farba)
 Alias pre farbaNaReťazec.
reťazecNaFarbu
public static Farba reťazecNaFarbu(String text)
Prevedie zadaný reťazec reprezentujúci farbu na inštanciu farby.
 Metóda rozpoznáva buď názvy inštancií rozhrania Farebnosť (modrá, červená…), alebo reťazce v tvare:
 
 
 #rrggbb, kde rr je červená zložka
 v šestnástkovom tvare, gg zelená zložka v šestnástkovom
 tvare a bb modrá zložka v šestnástkovom tvare,
 #rgb, kde r je červená zložka
 v šestnástkovom tvare a g zelená zložka v šestnástkovom
 tvare, b modrá zložka v šestnástkovom tvare, pričom všetky
 zložky v tomto budú rozšírené na: rr, gg, bb,
 napríklad: #8af = #88aaff
 rgb(red, green,
 blue), kde red je červená zložka
 (v desiatkovom tvare), green zelená zložka, blue
 modrá zložka (všetko v desiatkovom tvare),
 rgba(red, green,
 blue, alpha), kde
 red je červená zložka (v desiatkovom tvare), green
 zelená zložka, blue modrá zložka, alpha priehľadnosť
 (všetko v desiatkovom tvare).
 
 
 Upozornenie: Posledný z uvedených
 tvarov nekorešponduje so zápisom používaným v jazykoch slúžiacich
 na tvorbu webu (HTML, CSS…), pretože na rozdiel od nich uvádza
 z dôvodu zachovania presnej hodnoty zložku priehľadnosti ako celé
 číslo v rozsahu od 0 do 255. Na prevod do
 skutočného webového tvaru môžete použiť metódy definované v triede
 SVGPodpora.
 
 Metóda je vhodná ako doplnok k metóde farbaNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený na farbu
Návratová hodnota:
inštancia farby získaná z reťazcovej podoby
Pozri tiež:
farbaNaReťazec(Color)
retazecNaFarbu
public static Farba retazecNaFarbu(String text)
 Alias pre reťazecNaFarbu.
správnyFormát
public static boolean správnyFormát(String text)
Posúdi, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom farbu.
 Metóda rozpoznáva aj názvy inštancií rozhrania Farebnosť (modrá, červená…) a uzná za správe reťazce v jednom
 z nasledujúcich tvarov:
 
 
 #rrggbb, kde rr je červená zložka
 v šestnástkovom tvare, gg zelená zložka v šestnástkovom
 tvare a bb modrá zložka v šestnástkovom tvare,
 #rgb, kde r je červená zložka
 v šestnástkovom tvare a g zelená zložka v šestnástkovom
 tvare, b modrá zložka v šestnástkovom tvare, pričom všetky
 zložky v tomto budú rozšírené na: rr, gg, bb,
 napríklad: #8af = #88aaff
 rgb(red, green,
 blue), kde red je červená zložka
 (v desiatkovom tvare), green zelená zložka, blue
 modrá zložka (všetko v desiatkovom tvare),
 rgba(red, green,
 blue, alpha), kde
 red je červená zložka (v desiatkovom tvare), green
 zelená zložka, blue modrá zložka, alpha priehľadnosť
 (všetko v desiatkovom tvare)
 
 
 Metóda je vhodná ako doplnok k metódam farbaNaReťazec a reťazecNaFarbu.
Parametre:
text – reťazec, ktorý má byť posúdený
Návratová hodnota:
 true ak je zadaný teťazec v rozpoznateľnom
     formáte
Pozri tiež:
farbaNaReťazec(Color), 
farbaNaReťazec(Farebnosť), 
reťazecNaFarbu(String)
spravnyFormat
public static boolean spravnyFormat(String text)
 Alias pre správnyFormát.
compareTo
public int compareTo(Color ináFarba)
Táto metóda je súčasťou implementácie rozhrania Comparable. Porovnanie farieb bolo implementované preto, aby mohli
 byť inštancie farieb zaradené do triedeného zoznamu. Nie je možné
 objektívne určiť ktorá farba je „väčšia“ alebo „menšia,“ ale farby
 sú v počítači reprezentované číslicovo. Táto metóda jednoducho
 vzájomne odčíta číslicové reprezentácie farieb a vráti výsledok.
 Vďaka tomu je možné použiť inštanciu triedy Farba ako kľúč
 triedeného zoznamu, ktorého použitie je v rámci jazyka Java
 efektívnejšie. Tak sa dá vytvoriť triedený zoznam Javy, v ktorom
 sa dajú rýchlo vyhľadávať informácie podľa farebného kľúča.
Definované:
compareTo v rozhraní Comparable&lt;Color&gt;
Parametre:
ináFarba – inštancia inej farby, s ktorou má byť táto farba
     porovnaná
Návratová hodnota:
rozdiel farebných zložiek inej a tejto farby
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Farebnosť
Všetky známe odvodené rozhrania:
Farebnost
Všetky známe implementujúce triedy:
GRobot
public interface Farebnosť
Rozhranie slúži na implementáciu metódy slúžiacej na zistenie farby
 objektu a obsahuje definície konštánt farieb.
Pozri tiež:
Farba
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static Farba
akvamarinova
 Alias pre akvamarínová.
static Farba
akvamarínová
Akvamarínová farba (Farba(0, 225, 
 255)).
static Farba
antracitova
 Alias pre antracitová.
static Farba
antracitová
Antracitová farba (Farba(32, 32, 
 32)).
static Farba
atramentova
 Alias pre atramentová.
static Farba
atramentová
Atramentová farba (Farba(15, 75, 
 255)).
static Farba
biela
Biela farba (Farba(255, 255, 
 255)).
static Farba
cervena
 Alias pre červená.
static Farba
cierna
 Alias pre čierna.
static Farba
červená
Červená farba (Farba(176, 0, 
 0)).
static Farba
čierna
Čierna farba (Farba(0, 0, 
 0)).
static Farba
fialova
 Alias pre fialová.
static Farba
fialová
Fialová farba (Farba(176, 80, 
 176)).
static Farba
hneda
 Alias pre hnedá.
static Farba
hnedá
Hnedá farba (Farba(160, 80, 
 0)).
static Farba
modra
 Alias pre modrá.
static Farba
modrá
Modrá farba (Farba(0, 0, 
 176)).
static Farba
nebeska
 Alias pre nebeská.
static Farba
nebeská
Nebeská farba (Farba(179, 255, 
 255)).
static Farba
oranzova
 Alias pre oranžová.
static Farba
oranžová
Oranžová farba (Farba(220, 150, 
 0)).
static Farba
papierova
 Alias pre papierová.
static Farba
papierová
Papierová farba (Farba(224, 224, 
 224)).
static Farba[]
preddefinovaneFarby
 Alias pre preddefinovanéFarby.
static Farba[]
preddefinovanéFarby
Zoznam (pole) všetkých preddefinovaných farieb.
static Farba
purpurova
 Alias pre purpurová.
static Farba
purpurová
Purpurová farba (Farba(176, 0, 
 176)).
static Farba
ruzova
 Alias pre ružová.
static Farba
ružová
Ružová farba (Farba(255, 179, 
 179)).
static Farba
seda
 Alias pre šedá.
static Farba
siva
 Alias pre šedá.
static Farba
sivá
Šedá farba (čiže  alias
 pre šedú farbu; Farba(144,
 144, 144)).
static Farba
snehova
 Alias pre snehová.
static Farba
snehová
Snehová farba (Farba(240, 240, 
 240)).
static Farba
svetlaNebeska
 Alias pre svetláNebeská.
static Farba
svetláNebeská
Svetlá nebeská farba (Farba(217, 255, 
 255)).
static Farba
svetloakvamarinova
 Alias pre svetloakvamarínová.
static Farba
svetloakvamarínová
Svetloakvamarínová farba (Farba(20, 245, 
 255)).
static Farba
svetloatramentova
 Alias pre svetloatramentová.
static Farba
svetloatramentová
Svetloatramentová farba (Farba(35, 105, 
 255)).
static Farba
svetlocervena
 Alias pre svetločervená.
static Farba
svetločervená
Svetločervená farba (Farba(224, 0, 
 0)).
static Farba
svetlofialova
 Alias pre svetlofialová.
static Farba
svetlofialová
Svetlofialová farba (Farba(224, 112, 
 224)).
static Farba
svetlohneda
 Alias pre svetlohnedá.
static Farba
svetlohnedá
Svetlohnedá farba (Farba(180, 96, 
 0)).
static Farba
svetlomodra
 Alias pre svetlomodrá.
static Farba
svetlomodrá
Svetlomodrá farba (Farba(0, 224, 
 0)).
static Farba
svetlooranzova
 Alias pre svetlooranžová.
static Farba
svetlooranžová
Svetlooranžová farba (Farba(240, 180, 
 0)).
static Farba
svetlopurpurova
 Alias pre svetlopurpurová.
static Farba
svetlopurpurová
Svetlopurpurová farba (Farba(224, 0, 
 224)).
static Farba
svetloruzova
 Alias pre svetloružová.
static Farba
svetloružová
Svetloružová farba (Farba(255, 217, 
 217)).
static Farba
svetloseda
 Alias pre svetlošedá.
static Farba
svetlosiva
 Alias pre svetlošedá.
static Farba
svetlosivá
Svetlošedá farba (čiže
  alias pre svetlošedú
 farbu; Farba(176, 176, 
 176)).
static Farba
svetlošedá
Svetlošedá farba (Farba(176, 176, 
 176)).
static Farba
svetlotyrkysova
 Alias pre svetlotyrkysová.
static Farba
svetlotyrkysová
Svetlotyrkysová farba (Farba(0, 224, 
 224)).
static Farba
svetlozelena
 Alias pre svetlozelená.
static Farba
svetlozelená
Svetlozelená farba (Farba(0, 224, 
 0)).
static Farba
svetlozlta
 Alias pre svetložltá.
static Farba
svetložltá
Svetložltá farba (Farba(240, 240, 
 0)).
static Farba
šedá
Šedá farba (Farba(144, 144, 
 144)).
static Farba
tmavaNebeska
 Alias pre tmaváNebeská.
static Farba
tmaváNebeská
Tmavá nebeská farba (Farba(140, 255, 
 255)).
static Farba
tmavoakvamarinova
 Alias pre tmavoakvamarínová.
static Farba
tmavoakvamarínová
Tmavoakvamarínová farba (Farba(0, 205, 
 255)).
static Farba
tmavoatramentova
 Alias pre tmavoatramentová.
static Farba
tmavoatramentová
Tmavoatramentová farba (Farba(0, 45, 
 255)).
static Farba
tmavocervena
 Alias pre tmavočervená.
static Farba
tmavočervená
Tmavočervená farba (Farba(144, 0, 
 0)).
static Farba
tmavofialova
 Alias pre tmavofialová.
static Farba
tmavofialová
Tmavofialová farba (Farba(144, 48, 
 144)).
static Farba
tmavohneda
 Alias pre tmavohnedá.
static Farba
tmavohnedá
Tmavohnedá farba (Farba(140, 64, 
 0)).
static Farba
tmavomodra
 Alias pre tmavomodrá.
static Farba
tmavomodrá
Tmavomodrá farba (Farba(0, 0, 
 144)).
static Farba
tmavooranzova
 Alias pre tmavooranžová.
static Farba
tmavooranžová
Tmavooranžová farba (Farba(200, 120, 
 0)).
static Farba
tmavopurpurova
 Alias pre tmavopurpurová.
static Farba
tmavopurpurová
Tmavopurpurová farba (Farba(144, 0, 
 144)).
static Farba
tmavoruzova
 Alias pre tmavoružová.
static Farba
tmavoružová
Tmavoružová farba (Farba(255, 140, 
 140)).
static Farba
tmavoseda
 Alias pre tmavošedá.
static Farba
tmavosiva
 Alias pre tmavošedá.
static Farba
tmavosivá
Tmavošedá farba (čiže
  alias pre tmavošedú
 farbu; Farba(96, 96, 
 96)).
static Farba
tmavošedá
Tmavošedá farba (Farba(96, 96, 
 96)).
static Farba
tmavotyrkysova
 Alias pre tmavotyrkysová.
static Farba
tmavotyrkysová
Tmavotyrkysová farba (Farba(0, 144, 
 144)).
static Farba
tmavozelena
 Alias pre tmavozelená.
static Farba
tmavozelená
Tmavozelená farba (Farba(0, 144, 
 0)).
static Farba
tmavozlta
 Alias pre tmavožltá.
static Farba
tmavožltá
Tmavožltá farba (Farba(208, 208, 
 0)).
static Farba
tyrkysova
 Alias pre tyrkysová.
static Farba
tyrkysová
Tyrkysová farba (Farba(0, 176, 
 176)).
static Farba
uhlikova
 Alias pre uhlíková.
static Farba
uhlíková
Uhlíková farba (Farba(16, 16, 
 16)).
static Farba
zelena
 Alias pre zelená.
static Farba
zelená
Zelená farba (Farba(0, 176, 
 0)).
static Farba
ziadna
 Alias pre žiadna.
static Farba
zlta
 Alias pre žltá.
static Farba
žiadna
Farba, ktorá má všetky farebné zložky (aj zložku priehľadnosti) rovnú
 nule (Farba(0, 0, 
 0, 0)).
static Farba
žltá
Žltá farba (Farba(224, 224, 
 0)).
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
Farba
farba()
Prototyp metódy na zistenie farby objektu.
Podrobnosti atribútov
žiadna
static final Farba žiadna
Farba, ktorá má všetky farebné zložky (aj zložku priehľadnosti) rovnú
 nule (Farba(0, 0, 
 0, 0)).
 Technicky ide o neviditeľnú čiernu farbu. Táto inštancia je používaná
 v špeciálnych prípadoch.
ziadna
static final Farba ziadna
 Alias pre žiadna.
biela
static final Farba biela
Biela farba (Farba(255, 255, 
 255)).
 
 Ukážka: 
svetlošedá
static final Farba svetlošedá
Svetlošedá farba (Farba(176, 176, 
 176)).
 
 Ukážka: 
svetloseda
static final Farba svetloseda
 Alias pre svetlošedá.
šedá
static final Farba šedá
Šedá farba (Farba(144, 144, 
 144)).
 
 Ukážka: 
seda
static final Farba seda
 Alias pre šedá.
tmavošedá
static final Farba tmavošedá
Tmavošedá farba (Farba(96, 96, 
 96)).
 
 Ukážka: 
tmavoseda
static final Farba tmavoseda
 Alias pre tmavošedá.
svetlosivá
static final Farba svetlosivá
Svetlošedá farba (čiže
  alias pre svetlošedú
 farbu; Farba(176, 176, 
 176)).
 
 Ukážka: 
svetlosiva
static final Farba svetlosiva
 Alias pre svetlošedá.
sivá
static final Farba sivá
Šedá farba (čiže  alias
 pre šedú farbu; Farba(144,
 144, 144)).
 
 Ukážka: 
siva
static final Farba siva
 Alias pre šedá.
tmavosivá
static final Farba tmavosivá
Tmavošedá farba (čiže
  alias pre tmavošedú
 farbu; Farba(96, 96, 
 96)).
 
 Ukážka: 
tmavosiva
static final Farba tmavosiva
 Alias pre tmavošedá.
čierna
static final Farba čierna
Čierna farba (Farba(0, 0, 
 0)).
 
 Ukážka: 
cierna
static final Farba cierna
 Alias pre čierna.
svetločervená
static final Farba svetločervená
Svetločervená farba (Farba(224, 0, 
 0)).
 
 Ukážka: 
svetlocervena
static final Farba svetlocervena
 Alias pre svetločervená.
červená
static final Farba červená
Červená farba (Farba(176, 0, 
 0)).
 
 Ukážka: 
cervena
static final Farba cervena
 Alias pre červená.
tmavočervená
static final Farba tmavočervená
Tmavočervená farba (Farba(144, 0, 
 0)).
 
 Ukážka: 
tmavocervena
static final Farba tmavocervena
 Alias pre tmavočervená.
svetlozelená
static final Farba svetlozelená
Svetlozelená farba (Farba(0, 224, 
 0)).
 
 Ukážka: 
svetlozelena
static final Farba svetlozelena
 Alias pre svetlozelená.
zelená
static final Farba zelená
Zelená farba (Farba(0, 176, 
 0)).
 
 Ukážka: 
zelena
static final Farba zelena
 Alias pre zelená.
tmavozelená
static final Farba tmavozelená
Tmavozelená farba (Farba(0, 144, 
 0)).
 
 Ukážka: 
tmavozelena
static final Farba tmavozelena
 Alias pre tmavozelená.
svetlomodrá
static final Farba svetlomodrá
Svetlomodrá farba (Farba(0, 224, 
 0)).
 
 Ukážka: 
svetlomodra
static final Farba svetlomodra
 Alias pre svetlomodrá.
modrá
static final Farba modrá
Modrá farba (Farba(0, 0, 
 176)).
 
 Ukážka: 
modra
static final Farba modra
 Alias pre modrá.
tmavomodrá
static final Farba tmavomodrá
Tmavomodrá farba (Farba(0, 0, 
 144)).
 
 Ukážka: 
tmavomodra
static final Farba tmavomodra
 Alias pre tmavomodrá.
svetlotyrkysová
static final Farba svetlotyrkysová
Svetlotyrkysová farba (Farba(0, 224, 
 224)).
 
 Ukážka: 
svetlotyrkysova
static final Farba svetlotyrkysova
 Alias pre svetlotyrkysová.
tyrkysová
static final Farba tyrkysová
Tyrkysová farba (Farba(0, 176, 
 176)).
 
 Ukážka: 
tyrkysova
static final Farba tyrkysova
 Alias pre tyrkysová.
tmavotyrkysová
static final Farba tmavotyrkysová
Tmavotyrkysová farba (Farba(0, 144, 
 144)).
 
 Ukážka: 
tmavotyrkysova
static final Farba tmavotyrkysova
 Alias pre tmavotyrkysová.
svetlopurpurová
static final Farba svetlopurpurová
Svetlopurpurová farba (Farba(224, 0, 
 224)).
 
 Ukážka: 
svetlopurpurova
static final Farba svetlopurpurova
 Alias pre svetlopurpurová.
purpurová
static final Farba purpurová
Purpurová farba (Farba(176, 0, 
 176)).
 
 Ukážka: 
purpurova
static final Farba purpurova
 Alias pre purpurová.
tmavopurpurová
static final Farba tmavopurpurová
Tmavopurpurová farba (Farba(144, 0, 
 144)).
 
 Ukážka: 
tmavopurpurova
static final Farba tmavopurpurova
 Alias pre tmavopurpurová.
svetložltá
static final Farba svetložltá
Svetložltá farba (Farba(240, 240, 
 0)).
 
 Ukážka: 
svetlozlta
static final Farba svetlozlta
 Alias pre svetložltá.
žltá
static final Farba žltá
Žltá farba (Farba(224, 224, 
 0)).
 
 Poznámka: Pozorné oko si môže všimnúť, že
 odtiene žltej sú definované z iných pomerov zložiek r, g, b, než
 odtiene iných základných farieb (červenej, zelenej, modrej…).
 Jednoduchým experimentom sa nám podarilo ukázať, že vnímanie „žltej“
 je natoľko špecifické, že na to, aby bola vnímaná ako skutočne „žltá,“
 musí byť veľmi jasná. Preto pôvodná jasnožltá je teraz definovaná ako
 žltá a jej odtiene k nej majú veľmi blízko. Sami sa môžete presvedčiť,
 že na monitore pôsobia tmavšie odtiene „žltej“ ako žltozelená, olivová,
 lilavá, khaky… Ide čiastočne o psychochromatickú záležitosť a vplyv
 môže mať aj to, že vo farebnom priestore sRGB farba „žltá“ ako taká
 nejestvuje – je miešaná zo zložiek červenej a zelenej. „Technická“ žltá
 nie je taká žltá, aká je vnímaná ľuďmi.
 
 Ukážka: 
zlta
static final Farba zlta
 Alias pre žltá.
tmavožltá
static final Farba tmavožltá
Tmavožltá farba (Farba(208, 208, 
 0)).
 
 Ukážka: 
tmavozlta
static final Farba tmavozlta
 Alias pre tmavožltá.
svetlohnedá
static final Farba svetlohnedá
Svetlohnedá farba (Farba(180, 96, 
 0)).
 
 Ukážka: 
svetlohneda
static final Farba svetlohneda
 Alias pre svetlohnedá.
hnedá
static final Farba hnedá
Hnedá farba (Farba(160, 80, 
 0)).
 
 Ukážka: 
hneda
static final Farba hneda
 Alias pre hnedá.
tmavohnedá
static final Farba tmavohnedá
Tmavohnedá farba (Farba(140, 64, 
 0)).
 
 Ukážka: 
tmavohneda
static final Farba tmavohneda
 Alias pre tmavohnedá.
svetlooranžová
static final Farba svetlooranžová
Svetlooranžová farba (Farba(240, 180, 
 0)).
 
 Ukážka: 
svetlooranzova
static final Farba svetlooranzova
 Alias pre svetlooranžová.
oranžová
static final Farba oranžová
Oranžová farba (Farba(220, 150, 
 0)).
 
 Ukážka: 
oranzova
static final Farba oranzova
 Alias pre oranžová.
tmavooranžová
static final Farba tmavooranžová
Tmavooranžová farba (Farba(200, 120, 
 0)).
 
 Ukážka: 
tmavooranzova
static final Farba tmavooranzova
 Alias pre tmavooranžová.
svetloružová
static final Farba svetloružová
Svetloružová farba (Farba(255, 217, 
 217)).
 
 Ukážka: 
svetloruzova
static final Farba svetloruzova
 Alias pre svetloružová.
ružová
static final Farba ružová
Ružová farba (Farba(255, 179, 
 179)).
 
 Ukážka: 
ruzova
static final Farba ruzova
 Alias pre ružová.
tmavoružová
static final Farba tmavoružová
Tmavoružová farba (Farba(255, 140, 
 140)).
 
 Ukážka: 
tmavoruzova
static final Farba tmavoruzova
 Alias pre tmavoružová.
uhlíková
static final Farba uhlíková
Uhlíková farba (Farba(16, 16, 
 16)).
 
 Ukážka: 
uhlikova
static final Farba uhlikova
 Alias pre uhlíková.
antracitová
static final Farba antracitová
Antracitová farba (Farba(32, 32, 
 32)).
 
 Ukážka: 
antracitova
static final Farba antracitova
 Alias pre antracitová.
papierová
static final Farba papierová
Papierová farba (Farba(224, 224, 
 224)).
 
 Ukážka: 
papierova
static final Farba papierova
 Alias pre papierová.
snehová
static final Farba snehová
Snehová farba (Farba(240, 240, 
 240)).
 
 Ukážka: 
snehova
static final Farba snehova
 Alias pre snehová.
tmavofialová
static final Farba tmavofialová
Tmavofialová farba (Farba(144, 48, 
 144)).
 
 Ukážka: 
tmavofialova
static final Farba tmavofialova
 Alias pre tmavofialová.
fialová
static final Farba fialová
Fialová farba (Farba(176, 80, 
 176)).
 
 Ukážka: 
fialova
static final Farba fialova
 Alias pre fialová.
svetlofialová
static final Farba svetlofialová
Svetlofialová farba (Farba(224, 112, 
 224)).
 
 Ukážka: 
svetlofialova
static final Farba svetlofialova
 Alias pre svetlofialová.
tmavoatramentová
static final Farba tmavoatramentová
Tmavoatramentová farba (Farba(0, 45, 
 255)).
 
 Ukážka: 
tmavoatramentova
static final Farba tmavoatramentova
 Alias pre tmavoatramentová.
atramentová
static final Farba atramentová
Atramentová farba (Farba(15, 75, 
 255)).
 
 Ukážka: 
atramentova
static final Farba atramentova
 Alias pre atramentová.
svetloatramentová
static final Farba svetloatramentová
Svetloatramentová farba (Farba(35, 105, 
 255)).
 
 Ukážka: 
svetloatramentova
static final Farba svetloatramentova
 Alias pre svetloatramentová.
tmavoakvamarínová
static final Farba tmavoakvamarínová
Tmavoakvamarínová farba (Farba(0, 205, 
 255)).
 
 Ukážka: 
tmavoakvamarinova
static final Farba tmavoakvamarinova
 Alias pre tmavoakvamarínová.
akvamarínová
static final Farba akvamarínová
Akvamarínová farba (Farba(0, 225, 
 255)).
 
 Ukážka: 
akvamarinova
static final Farba akvamarinova
 Alias pre akvamarínová.
svetloakvamarínová
static final Farba svetloakvamarínová
Svetloakvamarínová farba (Farba(20, 245, 
 255)).
 
 Ukážka: 
svetloakvamarinova
static final Farba svetloakvamarinova
 Alias pre svetloakvamarínová.
tmaváNebeská
static final Farba tmaváNebeská
Tmavá nebeská farba (Farba(140, 255, 
 255)).
 
 Ukážka: 
tmavaNebeska
static final Farba tmavaNebeska
 Alias pre tmaváNebeská.
nebeská
static final Farba nebeská
Nebeská farba (Farba(179, 255, 
 255)).
 
 Ukážka: 
nebeska
static final Farba nebeska
 Alias pre nebeská.
svetláNebeská
static final Farba svetláNebeská
Svetlá nebeská farba (Farba(217, 255, 
 255)).
 
 Ukážka: 
svetlaNebeska
static final Farba svetlaNebeska
 Alias pre svetláNebeská.
preddefinovanéFarby
static final Farba[] preddefinovanéFarby
Zoznam (pole) všetkých preddefinovaných farieb. Farby v tomto
 poli sú usporiadané podľa zobrazenia v dialógu výberu farby (a príbuzných komponentov), s tým
 drobným rozdielom, že zobrazenie v dialógu je transponované. Pri
 zoraďovaní boli brané do úvahy najmä tieto dve pravidlá: svetlé
 farby umiestňovať vyššie (prípadne vľavo) a príbuzné farby podľa
 možností (s ohľadom na rôznorodosť palety) čo najbližšie k sebe.
 
 Tabuľka farieb zoradených tak, ako sú umiestnené v tomto
 poli farieb:
 
 
 svg.color-box
 {
        width: 24;
        height: 24;
 }
 
 svg.color-box rect
 {
        x: 1; y: 1;
        width: 22px;
        height: 22px;
        stroke-width: 2;
        stroke: black;
 }
 
 
 
 
 
 biela 
 snehová 
 papierová 
 svetlošedá 
 šedá 
 tmavošedá 
 
 svetláNebeská 
 nebeská 
 tmaváNebeská 
 svetloakvamarínová 
 akvamarínová 
 tmavoakvamarínová 
 
 svetlotyrkysová 
 tyrkysová 
 tmavotyrkysová 
 svetlozelená 
 zelená 
 tmavozelená 
 
 svetloatramentová 
 atramentová 
 tmavoatramentová 
 svetlomodrá 
 modrá 
 tmavomodrá 
 
 svetloružová 
 ružová 
 tmavoružová 
 svetločervená 
 červená 
 tmavočervená 
 
 svetložltá 
 žltá 
 tmavožltá 
 svetlopurpurová 
 purpurová 
 tmavopurpurová 
 
 svetlooranžová 
 oranžová 
 tmavooranžová 
 svetlofialová 
 fialová 
 tmavofialová 
 
 svetlohnedá 
 hnedá 
 tmavohnedá 
 antracitová 
 uhlíková 
 čierna 
 
 
 
 (Pozri aj opis metódy dialógu
 na výber farby.)
preddefinovaneFarby
static final Farba[] preddefinovaneFarby
 Alias pre preddefinovanéFarby.
Podrobnosti metód
farba
Farba farba()
Prototyp metódy na zistenie farby objektu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda GRobot.Spojnica
java.lang.Object
GRobot.Spojnica
Nadradená trieda:
GRobot
public static class GRobot.Spojnica
extends Object
Táto trieda slúži na uchovávanie a prístup k vlastnostiam
 čiarových spojníc, ktoré sú definovateľné medzi robotmi.
 Na vytváranie (prípane rušenie) spojníc slúžia výhradne metódy
 z kategórie
 spojníc grafického robota. Táto trieda poskytuje prístup
 k hodnotám jestvujúcich nastavení (vrátane poskytovania
 možnosti ich zmien) a tiež umožňuje nastavovať a čítať
 doplnkové vlastnosti spojníc, napríklad
 vysunutie alebo definovanie
 tvaru značky
 začiatku a/alebo
 konca
 čiary spojnice.
 
 Príklad:
 
 Nasledujúci jednoduchý príklad ukazuje nielen vytvorenie
 spojníc a konfiguráciu ich vlastností, ale používa zároveň
 automatickú konfiguráciu sveta a obsluhu udalostí, vďaka ktorej
 je možné roboty na plátne presúvať myšou.
 
 
import knižnica.*;
import static knižnica.Konštanty.*;
public class TestovanieSpojníc
{
    public static void main(String[] args)
    {
        // Začiatok automatickej konfigurácie:
        Svet.použiKonfiguráciu("TestovanieSpojníc.cfg");
        // Definícia kreslenia vlastného tvaru robotov (elipsy s menom
        // robota v strede):
        KreslenieTvaru tvar = r -&gt;
        {
            r.elipsa(2);
            r.text(r.meno());
        };
        // Definícia kreslenia koncových značiek čiar spojníc:
        KreslenieTvaru šípka = r -&gt;
        {
            r.vpravo(30);
            r.dopredu(10);
            r.zdvihniPero();
            r.vzad(10);
            r.vľavo(60);
            r.položPero();
            r.dopredu(10);
        };
        
        // Vytvorenie štyroch inštancií robotov, ktoré budú prepojené
        // spojnicami (prvý robot je hlavný, takže používame konštruktor,
        // ktorým zároveň nastavíme veľkosť plátien):
        GRobot alfa = new GRobot(400, 400)
        {{
            meno("Alfa");
            vlastnýTvar(tvar);
            veľkosť(20);
            skočNa(-100, 100);
            nekresliTvary();
        }};
        GRobot beta = new GRobot()
        {{
            meno("Beta");
            vlastnýTvar(tvar);
            veľkosť(30);
            skočNa(100, 100);
            nekresliTvary();
        }};
        GRobot gama = new GRobot()
        {{
            meno("Gama");
            vlastnýTvar(tvar);
            veľkosť(40);
            skočNa(100, -100);
            nekresliTvary();
        }};
        GRobot delta = new GRobot()
        {{
            meno("Delta");
            vlastnýTvar(tvar);
            veľkosť(30);
            skočNa(-100, -100);
            nekresliTvary();
        }};
        // Uloženie inštancií do zoznamu:
        final Zoznam&lt;GRobot&gt; zoznam = new Zoznam&lt;GRobot&gt;(
            alfa, beta, gama, delta);
        
        // Vytvorenie (definovanie) spojníc a ich vlastností:
        alfa.spojnica(beta, alfa.elipsa(2), beta.elipsa(2))
            .definujZnačkuKonca(šípka)
            .vysunutie(10);
        beta.spojnica(alfa, beta.elipsa(2), alfa.elipsa(2))
            .definujZnačkuKonca(šípka)
            .vysunutie(10);
        alfa.spojnica(gama, alfa.elipsa(2), gama.elipsa(2))
            .definujZnačkuZačiatku(šípka)
            .definujZnačkuKonca(šípka);
        beta.spojnica(delta, beta.elipsa(2), delta.elipsa(2))
            .definujZnačkuZačiatku(šípka)
            .definujZnačkuKonca(šípka);
        
        // Dokončenie automatickej konfigurácie a obsluha udalostí:
        for (GRobot r : zoznam) r.registrujVKonfigurácii();
        new ObsluhaUdalostí()
        {
            GRobot aktívnyRobot = null;
            @Override public void klik()
            {
                ťahanieMyšou();
            }
            @Override public void stlačenieTlačidlaMyši()
            {
                aktívnyRobot = null;
                for (GRobot r : zoznam) if (r.myšVElipse(2)) aktívnyRobot = r;
            }
            @Override public void ťahanieMyšou()
            {
                if (null != aktívnyRobot)
                {
                    if (ÚdajeUdalostí.myš().isShiftDown())
                    {
                        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                            aktívnyRobot.otočNaMyš();
                    }
                    else
                    {
                        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                            aktívnyRobot.skočNaMyš();
                    }
                }
            }
        };
    }
}
 
 Výsledok:
 
  Ukážka
 výsledku príkladu pri jeho prvom spustení.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
TreeMap&lt;String,Object&gt;
parametre
Parametre rôzneho druhu asociované s touto spojnicou.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Stroke
ciara()
 Alias pre čiara.
GRobot.Spojnica
ciara(Stroke čiara)
 Alias pre čiara.
GRobot
ciel()
 Alias pre cieľ.
GRobot
cieľ()
Vráti inštanciu cieľového robota, čiže toho, ku ktorému
 smeruje táto spojnica.
Stroke
čiara()
Vráti objekt typu (implementáciu rozhrania) Stroke určujúcu viaceré vlastnosti čiary.
GRobot.Spojnica
čiara(Stroke čiara)
Umožňuje určiť nový štýl čiary prostredníctvom
 implementácie rozhrania Stroke.
Shape
dajOrezanieZnackyKonca()
 Alias pre dajOrezanieZnačkyKonca.
Shape
dajOrezanieZnackyZaciatku()
 Alias pre dajOrezanieZnačkyZačiatku.
Shape
dajOrezanieZnačkyKonca()
Vráti inštanciu tvaru vlastného orezania
 značiek pri konci čiary spojnice alebo null,
 ak je použité rovnaké orezanie ako pri kreslení samotnej
 spojnice.
Shape
dajOrezanieZnačkyZačiatku()
Vráti inštanciu tvaru vlastného orezania
 značiek pri začiatku čiary spojnice alebo null,
 ak je použité rovnaké orezanie ako pri kreslení samotnej
 spojnice.
KreslenieTvaru
dajZnackuKonca()
 Alias pre dajZnačkuKonca.
KreslenieTvaru
dajZnackuZaciatku()
 Alias pre dajZnačkuZačiatku.
KreslenieTvaru
dajZnačkuKonca()
Vráti implementované rozhranie kreslenia tvaru koncovej značky čiary spojnice alebo
 null, ak koncová značka nie je definovaná.
KreslenieTvaru
dajZnačkuZačiatku()
Vráti implementované rozhranie kreslenia tvaru začiatočnej značky čiary spojnice alebo
 null, ak začiatočná značka nie je definovaná.
GRobot.Spojnica
definujZnackuKonca(KreslenieTvaru kreslenie)
 Alias pre definujZnačkuKonca.
GRobot.Spojnica
definujZnackuKonca(KreslenieTvaru kreslenie,
                  Shape vlastnéOrezanie)
 Alias pre definujZnačkuKonca.
GRobot.Spojnica
definujZnackuZaciatku(KreslenieTvaru kreslenie)
 Alias pre definujZnačkuZačiatku.
GRobot.Spojnica
definujZnackuZaciatku(KreslenieTvaru kreslenie,
                     Shape vlastnéOrezanie)
 Alias pre definujZnačkuZačiatku.
GRobot.Spojnica
definujZnačkuKonca(KreslenieTvaru kreslenie)
Definuje koncovú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota.
GRobot.Spojnica
definujZnačkuKonca(KreslenieTvaru kreslenie,
                  Shape vlastnéOrezanie)
Definuje koncovú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota a s vlastným spôsobom
 orezania (ktoré sa vzťahuje aj na prípadnú začiatočnú
 značku).
GRobot.Spojnica
definujZnačkuZačiatku(KreslenieTvaru kreslenie)
Definuje začiatočnú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota.
GRobot.Spojnica
definujZnačkuZačiatku(KreslenieTvaru kreslenie,
                     Shape vlastnéOrezanie)
Definuje začiatočnú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota a s vlastným spôsobom
 orezania (ktoré sa vzťahuje aj na prípadnú koncovú značku).
Farba
farba()
Vráti aktuálnu farbu začiatku čiary spojnice alebo
 hodnotu null, ak je farba zdedená od zdrojového
 robota.
GRobot.Spojnica
farba(Color farba)
Určuje novú farbu začiatku čiary spojnice.
GRobot.Spojnica
farba(Farebnosť objekt)
Určuje novú farbu začiatku čiary spojnice prostredníctvom
 objektu, ktorý implementuje rozhranie Farebnosť.
Farba
farbaKonca()
Vráti farbu ukončenia čiary spojnice (slúžiacej na vytvorenie
 farebného prechodu) alebo hodnotu null, ak je farba
 určená automaticky.
GRobot.Spojnica
farbaKonca(Color farba)
Určuje farbu ukončenia čiary spojnice.
GRobot.Spojnica
farbaKonca(Farebnosť objekt)
Určuje farbu ukončenia čiary spojnice prostredníctvom objektu,
 ktorý implementuje rozhranie Farebnosť.
double
hrubkaCiary()
 Alias pre hrúbkaČiary.
GRobot.Spojnica
hrubkaCiary(double hrúbkaČiary)
 Alias pre hrúbkaČiary.
double
hrúbkaČiary()
Vráti hrúbku čiary poskytnutú aktuálnym štýlom čiary.
GRobot.Spojnica
hrúbkaČiary(double hrúbkaČiary)
Určí novú hrúbku čiary spojnice.
Shape
orezanieKonca()
Vráti tvar orezania konca spojnice alebo null,
 ak orezanie nebolo definované.
GRobot.Spojnica
orezanieKonca(Shape orezanieKonca)
Definuje tvar orezania konca spojnice.
Shape
orezanieZaciatku()
 Alias pre orezanieZačiatku.
GRobot.Spojnica
orezanieZaciatku(Shape orezanieZačiatku)
 Alias pre orezanieZačiatku.
Shape
orezanieZačiatku()
Vráti tvar orezania začiatku spojnice alebo null,
 ak orezanie nebolo definované.
GRobot.Spojnica
orezanieZačiatku(Shape orezanieZačiatku)
Definuje tvar orezania začiatku spojnice.
Object
parameter(String index)
Vráti hodnotu parametra asociovanú so zadaným indexom.
void
parameter(String index,
         Object hodnota)
Nastaví alebo vymaže hodnotu parametra asociovanú so
 zadaným indexom.
void
skry()
Skryje túto spojnicu.
boolean
skryta()
 Alias pre skrytá.
boolean
skrytá()
Zistí, či je spojnica viditeľná alebo skrytá.
Line2D.Double
tvar()
Prepočíta a vráti aktuálny tvar úsečky tejto spojnice.
void
ukaz()
 Alias pre ukáž.
void
ukaz(boolean ukáž)
 Alias pre ukáž.
void
ukáž()
Zobrazí túto spojnicu.
void
ukáž(boolean ukáž)
Zobrazí alebo skryje túto spojnicu podľa hodnoty
 parametra ukáž.
GRobot.Spojnica
upravOrezanieZnackyKonca(Shape vlastnéOrezanie)
 Alias pre upravOrezanieZnačkyKonca.
GRobot.Spojnica
upravOrezanieZnackyZaciatku(Shape vlastnéOrezanie)
 Alias pre upravOrezanieZnačkyZačiatku.
GRobot.Spojnica
upravOrezanieZnačkyKonca(Shape vlastnéOrezanie)
Umožňuje zmeniť spôsob orezania značiek pri začiatku
 spojnice.
GRobot.Spojnica
upravOrezanieZnačkyZačiatku(Shape vlastnéOrezanie)
Umožňuje zmeniť spôsob orezania značiek pri začiatku
 spojnice.
boolean
viditelna()
 Alias pre viditeľná.
boolean
viditeľná()
Zistí, či je spojnica viditeľná alebo skrytá.
GRobot.Spojnica
vysunutie(double vysunutie)
Umožňuje určiť vysunutie oboch koncov spojnice od stredov
 prepájaných robotov súčasne.
double
vysunutieKonca()
Zistí aktuálne vysunutie konca spojnice od jej stredu.
GRobot.Spojnica
vysunutieKonca(double vysunutie)
Umožňuje určiť vysunutie koncového bodu spojnice od jeho
 stredu.
double
vysunutieZaciatku()
 Alias pre vysunutieZačiatku.
GRobot.Spojnica
vysunutieZaciatku(double vysunutie)
 Alias pre vysunutieZačiatku.
double
vysunutieZačiatku()
Zistí aktuálne vysunutie začiatku spojnice od jej stredu.
GRobot.Spojnica
vysunutieZačiatku(double vysunutie)
Umožňuje určiť vysunutie začiatočného bodu spojnice od jeho
 stredu.
GRobot
zdroj()
Vráti inštanciu zdrojového robota, čiže toho, od ktorého
 smeruje táto spojnica.
void
zobraz()
Zobrazí túto spojnicu.
void
zobraz(boolean zobraz)
Zobrazí alebo skryje túto spojnicu podľa hodnoty
 parametra zobraz.
boolean
zobrazena()
 Alias pre zobrazená.
boolean
zobrazená()
Zistí, či je spojnica viditeľná alebo skrytá.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
parametre
public final TreeMap&lt;String,Object&gt; parametre
Parametre rôzneho druhu asociované s touto spojnicou.
 
 Na mierne zjednodušenie práce s touto mapou boli
 definované dve metódy spojnice: parameter(index) a parameter(index, hodnota).
Podrobnosti metód
parameter
public Object parameter(String index)
Vráti hodnotu parametra asociovanú so zadaným indexom.
 Ak je hodnota indexu rovná null, tak metóda
 vráti null. Ak parameter nie je definovaný, tak
 metóda tiež vráti null.
 
 Poznámka: Keďže prístup
 k mape parametrov spojnice je
 verejný, programátor môže do nej vkladať ľubovoľné hodnoty
 parametrov, vrátane prázdnych (null). Stavy,
 kedy parameter nejestvuje a kedy je jeho hodnota rovná
 null nie je možné touto metódou rozlíšiť. Na to
 treba použiť metódu parameter.containsKey(index).
Parametre:
index – index asociovaný s hodnotou parametra
Návratová hodnota:
hodnota parametra, ak je nastavená alebo
     null
parameter
public void parameter(String index,
                      Object hodnota)
Nastaví alebo vymaže hodnotu parametra asociovanú so
 zadaným indexom. Ak je hodnota indexu rovná null,
 tak metóda nevykoná nič. Ak je hodnota parametra rovná
 null, tak ho metóda zo zoznamu parametrov
 vymaže.
 
 Poznámka: Prístup
 k mape parametrov spojnice je
 verejný. Vďaka tomu môže do nej programátor vkladať
 ľubovoľné hodnoty parametrov, vrátane prázdnych
 (null), avšak potom sa musí riadiť pravidlami
 práce s mapou TreeMap.
Parametre:
index – index asociovaný s hodnotou parametra
hodnota – nová hodnota parametra, ak má byť parameter
     nastavený alebo null, ak má byť parameter
     vymazaný
dajZnačkuZačiatku
public KreslenieTvaru dajZnačkuZačiatku()
Vráti implementované rozhranie kreslenia tvaru začiatočnej značky čiary spojnice alebo
 null, ak začiatočná značka nie je definovaná.
Návratová hodnota:
implementácia rozhrania vlastného tvaru
     zabezpečujúca kreslenie začiatočnej značky spojnice
     alebo null, ak značka nemá byť kreslená
dajZnackuZaciatku
public KreslenieTvaru dajZnackuZaciatku()
 Alias pre dajZnačkuZačiatku.
dajZnačkuKonca
public KreslenieTvaru dajZnačkuKonca()
Vráti implementované rozhranie kreslenia tvaru koncovej značky čiary spojnice alebo
 null, ak koncová značka nie je definovaná.
Návratová hodnota:
implementácia rozhrania vlastného tvaru
     zabezpečujúca kreslenie koncovej značky spojnice
     alebo null, ak značka nemá byť kreslená
dajZnackuKonca
public KreslenieTvaru dajZnackuKonca()
 Alias pre dajZnačkuKonca.
definujZnačkuZačiatku
public GRobot.Spojnica definujZnačkuZačiatku(KreslenieTvaru kreslenie)
Definuje začiatočnú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota. Hodnota null
 znamená, že značka začiatku spojnice nemá byť kreslená.
 
 Príklad:
 
 
// Vytvorenie dvoch robotov:
GRobot robotA = new GRobot();
GRobot robotB = new GRobot();
// Definície tvarov (objektov kreslenia tvaru):
 r.krúžok();
{
    r.vpravo(30);
    r.vpred(r.veľkosť() / 2);
    r.domov();
    r.vľavo(30);
    r.vpred(r.veľkosť() / 2);
};
// Priradenie tvarov robotom:
robotA.vlastnýTvar(tvarRobotov);
robotB.vlastnýTvar(tvarRobotov);
// Úprava veľkostí, polôh a vypnutie kreslenia tvarov robotmi:
robotA.veľkosť(40);
robotB.veľkosť(60);
robotA.skoč(50, 80);
robotB.skoč(-50, -80);
robotA.nekresliTvary();
robotB.nekresliTvary();
// Definícia novej spojnice s tvarmi jej orezania a značkami začiatku
// a konca. Metódy spojnica, definujZnačkuZačiatku a definujZnačkuKonca
// sú zreťazené: Keďže návratovou hodnotou metódy spojnica je objekt
// spojnice, dá sa na neho priamo nadviazať volaním metódy
// definujZnačuZačiatku a keďže aj jej návratovou hodnotou je ten istý
// objekt, dá sa na to opäť nadviazať volaním metódy definujZnačkuKonca.
robotA.spojnica(robotB, robotA.krúžok(), robotB.krúžok())
    .definujZnačkuZačiatku(tvarŠípky)
    .definujZnačkuKonca(tvarŠípky);
// Toto zreťazenie by sme mohli rozpísať takto:
// 	Spojnica spojnica = robotA.spojnica(robotB,
// 		robotA.krúžok(), robotB.krúžok());
// 	spojnica.definujZnačkuZačiatku(tvarŠípky);
// 	spojnica.definujZnačkuKonca(tvarŠípky);
 
 Výsledok:
 
 
 Výsledné zobrazenie príkladu definície
 vlastných značiek spojnice.
Parametre:
kreslenie – inštancia implementácie vlastného tvaru,
     ktorá zabezpečí nakreslenie začiatočnej značky spojnice
     alebo null ak značka nemá byť kreslená
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
definujZnackuZaciatku
public GRobot.Spojnica definujZnackuZaciatku(KreslenieTvaru kreslenie)
 Alias pre definujZnačkuZačiatku.
definujZnačkuKonca
public GRobot.Spojnica definujZnačkuKonca(KreslenieTvaru kreslenie)
Definuje koncovú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota. Hodnota null
 znamená, že značka konca spojnice nemá byť kreslená.
 
 Poznámka: Príklad použitia definície
 koncovej aj začiatočnej značky spojnice je v opise metódy
 definujZnačkuZačiatku.
Parametre:
kreslenie – inštancia implementácie vlastného tvaru,
     ktorá zabezpečí nakreslenie koncovej značky spojnice
     alebo null ak značka nemá byť kreslená
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
definujZnackuKonca
public GRobot.Spojnica definujZnackuKonca(KreslenieTvaru kreslenie)
 Alias pre definujZnačkuKonca.
definujZnačkuZačiatku
public GRobot.Spojnica definujZnačkuZačiatku(KreslenieTvaru kreslenie,
                                             Shape vlastnéOrezanie)
Definuje začiatočnú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota a s vlastným spôsobom
 orezania (ktoré sa vzťahuje aj na prípadnú koncovú značku).
 Hodnota null parametra kreslenie znamená,
 že značka začiatku spojnice nemá byť kreslená, ale v tom
 prípade stráca hodnota parametra vlastnéOrezanie
 akýkoľvek ďalší zmysel. Inak určuje parameter
 vlastnéOrezanie vlastný tvar orezania kreslenia
 oboch značiek, ktorý má byť odlišný od orezania kreslenia
 čiary samotnej spojnice. Hodnota null parametra
 vlastnéOrezanie hovorí, že pri kreslení značiek
 má byť použité rovnaké orezanie ako pri kreslení čiary
 spojnice.
 
 Podrobnejšie informácie o značkách začiatku a konca
 spojnice sú v opise metódy
 definujZnačkuZačiatku.
 
 Vlastné orezanie je podrobnejšie vysvetlené v opise
 metódy upravOrezanieZnačkyZačiatku
 (resp. upravOrezanieZnačkyKonca).
 
 Poznámka: Príklad použitia
 definície začiatočnej a koncovej značky spojnice je v opise
 metódy definujZnačkuZačiatku a príklad použitia vlastného
 orezania začiatočnej a koncovej značky je v opise metódy
 upravOrezanieZnačkyZačiatku.
 
 Tip: ak chcete druhý parameter využiť
 na orezanie kreslenia koncovej značky, ale nekresliť žiadnu
 začiatočnú značku, tak implementujte a použite
 prázdne rozhranie kreslenia tvaru – to jest také, ktoré
 jestvuje, ale nič nekreslí.
Parametre:
kreslenie – inštancia implementácie vlastného tvaru,
     ktorá zabezpečí nakreslenie začiatočnej značky spojnice
     alebo null ak značka nemá byť kreslená –
     v takom prípade stráca hodnota ďalšieho parametra význam
vlastnéOrezanie – dovoľuje definovať vlastné orezanie
     kreslenia značiek; ak je null, tak je použité
     orezanie, ktoré bolo definované na kreslenie samotnej
     čiary spojnice
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
definujZnackuZaciatku
public GRobot.Spojnica definujZnackuZaciatku(KreslenieTvaru kreslenie,
                                             Shape vlastnéOrezanie)
 Alias pre definujZnačkuZačiatku.
definujZnačkuKonca
public GRobot.Spojnica definujZnačkuKonca(KreslenieTvaru kreslenie,
                                          Shape vlastnéOrezanie)
Definuje koncovú značku čiary spojnice s pomocou
 rozhrania, ktoré v programovacom rámci zároveň slúži na
 definovanie vlastného tvaru robota a s vlastným spôsobom
 orezania (ktoré sa vzťahuje aj na prípadnú začiatočnú
 značku). Hodnota null znamená, že značka konca
 spojnice nemá byť kreslená, ale v tom prípade stráca hodnota
 parametra vlastnéOrezanie akýkoľvek ďalší zmysel.
 Inak určuje parameter vlastnéOrezanie vlastný tvar
 orezania kreslenia oboch značiek, ktorý má byť odlišný od
 orezania kreslenia čiary samotnej spojnice. Hodnota
 null parametra vlastnéOrezanie hovorí,
 že pri kreslení značiek má byť použité rovnaké orezanie ako
 pri kreslení čiary spojnice.
 
 Podrobnejšie informácie o značkách konca aj začiatku
 spojnice sú v opise metódy
 definujZnačkuZačiatku.
 
 Vlastné orezanie je podrobnejšie vysvetlené v opise
 metódy upravOrezanieZnačkyKonca
 (resp. upravOrezanieZnačkyZačiatku).
 
 Poznámka: Príklad použitia
 definície koncovej aj začiatočnej značky spojnice je v opise
 metódy definujZnačkuZačiatku a príklad použitia vlastného
 orezania koncovej aj začiatočnej značky je v opise metódy
 upravOrezanieZnačkyZačiatku.
 
 Tip: ak chcete druhý parameter využiť
 na orezanie kreslenia začiatočnej značky, ale nekresliť
 žiadnu koncovú značku, tak implementujte a použite
 prázdne rozhranie kreslenia tvaru – to jest také, ktoré
 jestvuje, ale nič nekreslí.
Parametre:
kreslenie – inštancia implementácie vlastného tvaru,
     ktorá zabezpečí nakreslenie koncovej značky spojnice
     alebo null ak značka nemá byť kreslená –
     v takom prípade stráca hodnota ďalšieho parametra význam
vlastnéOrezanie – dovoľuje definovať vlastné orezanie
     kreslenia značiek; ak je null, tak je použité
     orezanie, ktoré bolo definované na kreslenie samotnej
     čiary spojnice
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
definujZnackuKonca
public GRobot.Spojnica definujZnackuKonca(KreslenieTvaru kreslenie,
                                          Shape vlastnéOrezanie)
 Alias pre definujZnačkuKonca.
dajOrezanieZnačkyZačiatku
public Shape dajOrezanieZnačkyZačiatku()
Vráti inštanciu tvaru vlastného orezania
 značiek pri začiatku čiary spojnice alebo null,
 ak je použité rovnaké orezanie ako pri kreslení samotnej
 spojnice.
Návratová hodnota:
inštancia tvaru určujúca vlastné orezanie značiek
     pri začiatku spojnice alebo null, ak má byť
     použité rovnaké orezanie ako pri kreslení samotnej
     spojnice
dajOrezanieZnackyZaciatku
public Shape dajOrezanieZnackyZaciatku()
 Alias pre dajOrezanieZnačkyZačiatku.
dajOrezanieZnačkyKonca
public Shape dajOrezanieZnačkyKonca()
Vráti inštanciu tvaru vlastného orezania
 značiek pri konci čiary spojnice alebo null,
 ak je použité rovnaké orezanie ako pri kreslení samotnej
 spojnice.
Návratová hodnota:
inštancia tvaru určujúca vlastné orezanie značiek
     pri konci spojnice alebo null, ak má byť
     použité rovnaké orezanie ako pri kreslení samotnej
     spojnice
dajOrezanieZnackyKonca
public Shape dajOrezanieZnackyKonca()
 Alias pre dajOrezanieZnačkyKonca.
upravOrezanieZnačkyZačiatku
public GRobot.Spojnica upravOrezanieZnačkyZačiatku(Shape vlastnéOrezanie)
Umožňuje zmeniť spôsob orezania značiek pri začiatku
 spojnice.
 
 Pozor! Volanie tejto metódy nemá
 význam ak nie je definované kreslenie značky
 začiatku! Hodnota null znamená, že má byť
 použité rovnaké orezanie ako pri kreslení samotnej čiary
 spojnice.
 
 Tip: Ak chcete použiť vlastné orezanie
 kreslenia značiek pri začiatku spojnice, a pritom
 nekresliť žiadnu začiatočnú značku, tak implementujte
 a použite prázdne rozhranie kreslenia tvaru – to
 jest také, ktoré jestvuje, ale nič nekreslí.
 
 
 Ukážka využitia vlastného
 orezania(podrobnejšie vysvetlenie je
 nižšie).
 
 Obrázok vyššie ukazuje dve situácie používajúce vlastné
 orezanie značiek začiatku a konca. Obrázok poskytuje pohľad
 na detail časti scény, ktorej úplná zmenšená verzia je
 vložená do rámčeka v pravej hornej časti obrázka. Obrázok
 je výsledkom riešenia zadania, ktoré určovalo, že elipsa
 A má mať značku spojnice (v tvare krúžka) kreslenú
 z vonkajšej strany a elipsa B naopak z vnútornej strany
 svojho tvaru.
 
 Elipsa A musí mať nastavené väčšie rozmery orezania než
 sú jej vlastné rozmery, aby bola čiara spojnice kreslená
 ďalej od okraja elipsy. Rozmer orezania spojnice pri tejto
 elipse naznačuje oranžová čiara nakreslená v detailnom
 pohľade. Ak by nejestvovala možnosť nastavenia vlastného
 orezania značky, tak by značku nebolo vidno, lebo všetko za
 hranicou oranžovej čiary by bolo orezané (vrátane značky).
 Značka musí mať nastavené vlastné orezanie totožné
 s rozmermi elipsy (prípadne prázdne orezanie –
 prázdnu oblasť orezania, avšak pozor, to neznamená
 hodnotu null; hodnota null by opäť
 znamenala orezanie totožné s hlavným orezaním, čiže na
 úrovni oranžovej čiary; prázdnu oblasť vytvoríte
 napríklad príkazom new Oblasť() alebo spustením
 metódy vymaž pre jestvujúcu
 oblasť).
 
 Elipsa B musí mať nastavené rovnaké rozmery orezania
 ako sú jej vlastné rozmery, aby sa čiara spojnice končila
 presne na jej hraniciach. Ak by nejestvovala možnosť
 nastavenia vlastného orezania značky, tak by značku takmer
 nebolo vidno, lebo by bola z väčšej časti „ponorená“
 vo vnútri oblasti, ktorá je orezaná. Aby bola celá značka
 viditeľná, musí mať nastavené menšie rozmery orezania,
 napríklad také, ktoré sú na obrázku naznačené žltou
 čiarou (prípadne sa dá použiť prázdna oblasť
 orezania tak ako pri elipse A, pričom to opäť
 neznamená vloženie hodnoty null namiesto
 oblasti vlastného orezania, ale jestvujúcej oblasti
 bez geometrie).
 
 Príklad:
 
 Nasledujúci úryvok kódu ukazuje jednoduchý spôsob
 riešenia rovnakej úlohy akú znázorňuje obrázok a opisuje
 text vyššie (tesne nad týmto príkladom).
 
 
// Definovanie konštánt – veľkosť robotov, veľkosti značiek a pomer
// medzi šírkou a výškou elipsy, ktorá bude tvarom robotov:
final double veľkosťRobota = 50.0;
final double veľkosťZnačky = 12.5;
final double pomer = 2.5;
// Definícia tvaru robotov:
KreslenieTvaru tvar = r -&gt;
{
    r.elipsa(pomer);
    r.text(r.meno());
};
// Definícia tvaru značiek:
KreslenieTvaru značka = r -&gt;
{
    r.zdvihniPero();
    r.vzad(veľkosťZnačky);
    r.kružnica(veľkosťZnačky);
};
// Definícia prvého robota (A):
GRobot A = new GRobot()
{{
    meno("A");
    veľkosť(veľkosťRobota);
    vlastnýTvar(tvar);
    nekresliTvary();
    skoč(-180, 150);
}};
// Definícia druhého robota (B):
GRobot B = new GRobot()
{{
    meno("B");
    veľkosť(veľkosťRobota);
    vlastnýTvar(tvar);
    nekresliTvary();
    skoč(180, -150);
}};
// Definícia spojnice so začiatkom v robote (elipse) A a koncom
// v robote (elipse) B:
A.spojnica(B,
    // Orezanie začiatku spojnice – elipsa, ktorá je väčšia oproti
    // kreslenému tvaru:
    A.elipsa(pomer * A.veľkosť() + veľkosťZnačky * 2.0,
        A.veľkosť() + veľkosťZnačky * 2.0),
    // Orezanie konca spojnice – elipsa, ktorá je totožná s kresleným
    // tvarom:
    B.elipsa(pomer))
    // Definícia značky na začiatku spojnice s vlastným tvarom
    // orezania (elipsou totožnou s kresleným tvarom):
    .definujZnačkuZačiatku(značka, A.elipsa(pomer))
    // Definícia značky na konci spojnice s vlastným tvarom
    // orezania (elipsou menšou oproti kreslenému tvaru):
    .definujZnačkuKonca(značka,
        B.elipsa(pomer * B.veľkosť() &#45; veľkosťZnačky * 2.0,
            B.veľkosť() &#45; veľkosťZnačky * 2.0));
Parametre:
vlastnéOrezanie – vlastné orezanie kreslenia značiek
     pri začiatku spojnice alebo null, ak má
     byť použité rovnaké orezanie, aké je definované pre
     kreslenie samotnej čiary spojnice
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
upravOrezanieZnackyZaciatku
public GRobot.Spojnica upravOrezanieZnackyZaciatku(Shape vlastnéOrezanie)
 Alias pre upravOrezanieZnačkyZačiatku.
upravOrezanieZnačkyKonca
public GRobot.Spojnica upravOrezanieZnačkyKonca(Shape vlastnéOrezanie)
Umožňuje zmeniť spôsob orezania značiek pri začiatku
 spojnice.
 
 Pozor! Volanie tejto metódy nemá
 význam ak nie je definované kreslenie značky
 konca! Hodnota null znamená, že má byť použité
 rovnaké orezanie ako pri kreslení samotnej čiary spojnice.
 
 Tip: Ak chcete použiť vlastné orezanie
 kreslenia značiek pri konci spojnice, a pritom
 nekresliť žiadnu koncovú značku, tak implementujte
 a použite prázdne rozhranie kreslenia tvaru – to
 jest také, ktoré jestvuje, ale nič nekreslí.
 
 
 Ukážka využitia vlastného
 orezania(podrobnejšie vysvetlenie je
 v opise metódy upravOrezanieZnačkyZačiatku pod identickým
 obrázkom.).
 
 Obrázok vyššie ukazuje dve situácie používajúce vlastné
 orezanie značiek začiatku a konca. Obrázok poskytuje pohľad
 na detail časti scény, ktorej úplná zmenšená verzia je
 vložená do rámčeka v pravej hornej časti obrázka. Obrázok
 je výsledkom riešenia zadania, ktoré určovalo, že elipsa
 A má mať značku spojnice (v tvare krúžka) kreslenú
 z vonkajšej strany a elipsa B naopak z vnútornej strany
 svojho tvaru. Podrobnejšie vysvetlenie je v opise metódy
 upravOrezanieZnačkyZačiatku (pod identickým
 obrázkom).
 
 Poznámka: Príklad použitia vlastného
 orezania koncovej aj začiatočnej značky je v opise metódy
 upravOrezanieZnačkyZačiatku.
Parametre:
vlastnéOrezanie – vlastné orezanie kreslenia značiek
     pri konci spojnice alebo null, ak má byť
     použité rovnaké orezanie, aké je definované pre
     kreslenie samotnej čiary spojnice
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
upravOrezanieZnackyKonca
public GRobot.Spojnica upravOrezanieZnackyKonca(Shape vlastnéOrezanie)
 Alias pre upravOrezanieZnačkyKonca.
tvar
public Line2D.Double tvar()
Prepočíta a vráti aktuálny tvar úsečky tejto spojnice.
 Metóda je použiteľná napríklad pri exporte spojníc do
 formátu SVG.
Návratová hodnota:
aktuálny tvar úsečky spojnice
zdroj
public GRobot zdroj()
Vráti inštanciu zdrojového robota, čiže toho, od ktorého
 smeruje táto spojnica.
Návratová hodnota:
inštancia zdrojového robota – toho, od ktorého
     smeruje spojnica
cieľ
public GRobot cieľ()
Vráti inštanciu cieľového robota, čiže toho, ku ktorému
 smeruje táto spojnica.
Návratová hodnota:
inštancia cieľového robota – toho, ku ktorému
     smeruje spojnica
ciel
public GRobot ciel()
 Alias pre cieľ.
čiara
public Stroke čiara()
Vráti objekt typu (implementáciu rozhrania) Stroke určujúcu viaceré vlastnosti čiary. Je vysoká
 pravdepodobnosť, že vrátená implementácia je typu
 BasicStroke, ktorá umožňuje zistiť
 hrúbku čiary,
 štýl ukončenia
 čiary, štýl
 spojov lomených čiar,
 pole hodnôt
 určujúcich čiarkovanú čiaru a podobne.
Návratová hodnota:
implementácia rozhrania Stroke
     určujúca viaceré vlastnosti čiary
Pozri tiež:
čiara(Stroke), 
hrúbkaČiary(), 
hrúbkaČiary(double)
ciara
public Stroke ciara()
 Alias pre čiara.
čiara
public GRobot.Spojnica čiara(Stroke čiara)
Umožňuje určiť nový štýl čiary prostredníctvom
 implementácie rozhrania Stroke. Základnou
 implementáciou je trieda BasicStroke,
 ktorá umožňuje definovať značné množstvo vlastností čiary.
 (Najzložitejší konštruktor uvedenej triedy prijíma
 hrúbku čiary, štýl ukončenia čiary, štýl
 spojov lomených čiar, limit dĺžky špičiek ostrých hrán,
 pole hodnôt určujúcich čiarkovanú čiaru a fázu čiarkovanej
 čiary.)
Parametre:
čiara – štýl čiary určenej implementáciou rozhrania
     Stroke, napríklad BasicStroke
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
Pozri tiež:
čiara(), 
hrúbkaČiary(), 
hrúbkaČiary(double)
ciara
public GRobot.Spojnica ciara(Stroke čiara)
 Alias pre čiara.
hrúbkaČiary
public double hrúbkaČiary()
Vráti hrúbku čiary poskytnutú aktuálnym štýlom čiary. Ak
 hrúbka nie je zistiteľná, tak metóda vráti hodnotu
 -1.
Návratová hodnota:
hrúbka čiary (podľa aktuálneho štýlu čiary) alebo
     -1
Pozri tiež:
hrúbkaČiary(double), 
čiara(), 
čiara(Stroke)
hrubkaCiary
public double hrubkaCiary()
 Alias pre hrúbkaČiary.
hrúbkaČiary
public GRobot.Spojnica hrúbkaČiary(double hrúbkaČiary)
Určí novú hrúbku čiary spojnice. Ak je zadaná záporná
 hodnota, tak spojnica počas kreslenia prevezme hrúbku
 (resp. aj štýl) čiary zdrojového robota spojnice.
Parametre:
hrúbkaČiary – nová hrúbka čiary, prípadne záporná
     hodnota, ak má byť štýl čiary zdedený od hlavného robota
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
Pozri tiež:
hrúbkaČiary(), 
čiara(), 
čiara(Stroke)
hrubkaCiary
public GRobot.Spojnica hrubkaCiary(double hrúbkaČiary)
 Alias pre hrúbkaČiary.
farba
public Farba farba()
Vráti aktuálnu farbu začiatku čiary spojnice alebo
 hodnotu null, ak je farba zdedená od zdrojového
 robota.
Návratová hodnota:
aktuálna farba začiatku čiary spojnice alebo
     null
farba
public GRobot.Spojnica farba(Color farba)
Určuje novú farbu začiatku čiary spojnice. Metóda
 prijíma aj hodnotu null. V takom prípade bude
 farba spojnice počas kreslenia prevzatá od zdrojového
 robota.
Parametre:
farba – nová farba začiatku spojnice alebo null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
farba
public GRobot.Spojnica farba(Farebnosť objekt)
Určuje novú farbu začiatku čiary spojnice prostredníctvom
 objektu, ktorý implementuje rozhranie Farebnosť.
 Metóda prijíma aj hodnotu null. V takom prípade
 bude farba spojnice počas kreslenia prevzatá od zdrojového
 robota.
Parametre:
objekt – objekt určujúci novú farbu začiatku spojnice
     alebo null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
farbaKonca
public Farba farbaKonca()
Vráti farbu ukončenia čiary spojnice (slúžiacej na vytvorenie
 farebného prechodu) alebo hodnotu null, ak je farba
 určená automaticky.
Návratová hodnota:
farba ukončenia čiary spojnice alebo null
farbaKonca
public GRobot.Spojnica farbaKonca(Color farba)
Určuje farbu ukončenia čiary spojnice. Táto farba bude v prípade
 nezhody so začiatočnou farbou použitá na vytvorenie farebného
 prechodu pri kreslení spojnice. Metóda prijíma aj hodnotu
 null. V takom prípade bude farba ukončenia
 spojnice prevzatá od cieľového robota.
Parametre:
farba – farba ukončenia spojnice alebo null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
farbaKonca
public GRobot.Spojnica farbaKonca(Farebnosť objekt)
Určuje farbu ukončenia čiary spojnice prostredníctvom objektu,
 ktorý implementuje rozhranie Farebnosť.
 Táto farba bude v prípade nezhody so začiatočnou farbou použitá
 na vytvorenie farebného prechodu pri kreslení spojnice. Metóda
 prijíma aj hodnotu null. V takom prípade bude farba
 ukončenia spojnice prevzatá od cieľového robota.
 
 Príklad:
 
 
super(350, 250);
skry();
// Definovanie konštánt – veľkosť robotov, veľkosti značiek a pomer
// medzi šírkou a výškou elipsy, ktorá bude tvarom robotov:
final double veľkosťRobota = 25.0;
final double veľkosťZnačky = 6.0;
final double pomer = 2.5;
// Definícia tvaru robotov:
KreslenieTvaru tvar = r -&gt;
{
    r.elipsa(pomer);
    r.text(r.meno());
};
// Definícia prvého robota:
GRobot štart = new GRobot()
{{
    meno("Štart");
    veľkosť(veľkosťRobota);
    vlastnýTvar(tvar);
    nekresliTvary();
    farba(modrá);
    hrúbkaČiary(3);
    písmo("Arial", 28);
    skoč(-90, 75);
}};
// Definícia druhého robota:
GRobot koniec = new GRobot()
{{
    meno("Koniec");
    veľkosť(veľkosťRobota);
    vlastnýTvar(tvar);
    nekresliTvary();
    farba(purpurová);
    hrúbkaČiary(3);
    písmo("Arial", 28);
    skoč(90, -75);
}};
// Definícia spojnice:
Spojnica spojnica = štart.spojnica(koniec,
    // Orezanie spojnice:
    štart.elipsa(pomer), koniec.elipsa(pomer)
// Zrušenie predvolených farieb, aby sa
// zhodovali s farbami prepájaných robotov:
).farba((Farba)null).farbaKonca((Farba)null);
// Počiatočné čakanie tri sekundy:
Svet.čakaj(3.0);
// Zmena farieb a orientácie prvého robota:
štart.farba(zelená);
Svet.čakaj(1.5);
štart.cieľováFarba(žltá);
Svet.čakaj(1.5);
štart.vpravo(30);
Svet.čakaj(1.5);
// Zmena farieb a orientácie druhého robota:
koniec.farba(červená);
Svet.čakaj(1.5);
koniec.cieľováFarba(oranžová);
Svet.čakaj(1.5);
koniec.vľavo(30);
Svet.čakaj(1.5);
// Nastavenie vlastných farieb spojnice:
spojnica.farba(svetlomodrá.bledšia()).farbaKonca(tyrkysová);
 
 Výsledok:
 
 
 
 
 
 
 
 
 
 
 
 
 Jednotlivé fázy
 vykonania programu – zmeny farebnosti v scéne so spojnicou
 postupujú od úplne automatického určenia farebnosti oboch
 koncov spojnice, cez farebné prispôsobenie robotov až po
 individuálne zafarbenie koncov samotnej spojnice.
Parametre:
objekt – objekt určujúci farbu ukončenia spojnice alebo
     null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
orezanieZačiatku
public Shape orezanieZačiatku()
Vráti tvar orezania začiatku spojnice alebo null,
 ak orezanie nebolo definované. Orezanie začiatku (i konca)
 čiary spojnice má význam vo viacerých prípadoch –
 podrobnosti sú v opise metódy orezanieZačiatku(orezanieZačiatku).
Návratová hodnota:
tvar orezania začiatku spojnice alebo
     null
orezanieZaciatku
public Shape orezanieZaciatku()
 Alias pre orezanieZačiatku.
orezanieKonca
public Shape orezanieKonca()
Vráti tvar orezania konca spojnice alebo null,
 ak orezanie nebolo definované. Orezanie konca (i začiatku)
 čiary spojnice má význam vo viacerých prípadoch –
 podrobnosti sú v opise metódy orezanieKonca(orezanieKonca.
Návratová hodnota:
tvar orezania začiatku spojnice alebo
     null
orezanieZačiatku
public GRobot.Spojnica orezanieZačiatku(Shape orezanieZačiatku)
Definuje tvar orezania začiatku spojnice. Ak je zadaná
 hodnota null, tak bude orezanie zrušené.
 Orezanie začiatku (i konca) čiary spojnice má význam vo
 viacerých prípadoch. Napríklad, ak chceme kresliť
 priehľadný tvar robota a zároveň chceme, aby sa čiara
 spojnice začínala na jeho hraniciach alebo potrebujeme
 kresliť
 značku začiatku čiary spojnice presne na hraniciach
 tvaru robota. Tvar orezania by sme v týchto prípadoch
 volili tak, aby vymedzoval hranice objektu, ktorý robot
 reprezentuje svojím tvarom.
 
 Pri definovaní orezania je dôležité vedieť niekoľko
 informácií, aby nevznikali chybné orezania alebo chybné
 umiestňovanie značiek spojníc. V tomto odseku sú
 vysvetľované príčiny a technické detaily (ak ich
 nepotrebujete alebo nechcete vedieť, môžete tento odsek
 preskočiť) a v nasledujúcich odsekoch sú opísané dôsledky
 a vyslovené odporúčania. Orezanie sa deje s pomocou
 tvarov Javy, ktoré sa skladajú z menších častí (čiara,
 krivka, posunutie…) a sú za normálnych okolností
 „nepohyblivé.“ Na to, aby bolo orezanie použiteľné, je
 nevyhnutné tvary „rozhýbať.“ To sa deje s pomocou
 geometrických transformácií. Každý tvar orezania je pri
 použití transformovaný podľa aktuálneho smeru a polohy
 robota umiestneného na prislúchajúcom zakončení spojnice.
 Do tohto procesu vstupuje ešte jeden fakt. Každý tvar
 vygenerovaný robotom je ešte pri jeho generovaní umiestnený
 a pootočený podľa aktuálnej polohy a smeru robota, ktorý
 ho vygeneroval. Preto, aby orezanie mohlo správne fungovať,
 musí byť každý tvar pri definovaní nového alebo
 aktualizovaní jestvujúceho orezania spojnice transformovaný
 do neutrálnej polohy a smeru. Objekt tvaru neobsahuje
 informáciu o tom, ktorý robot ho vygeneroval, ani o tom,
 akú polohu a orientáciu vtedy ten robot mal. Preto sú
 tvary transformované podľa toho robota, ktorý prislúcha
 súvisiacemu zakončeniu spojnice – začiatočné orezanie podľa
 začiatočného robota spojnice a koncové podľa koncového.
 Orezania by tiež mali pokrývať celú plochu tvaru robotov,
 inak sa môžu pri výslednom zobrazení spojnice kresliť
 nežiadúce úseky spojnice a tiež môže nastať chybné
 umiestnenie značiek spojnice. (Podrobnosti sú nižšie.)
 
 Na základe informácií z predchádzajúceho odseku je
 dôležité, aby tvar orezania začiatku spojnice bol
 vygenerovaný začiatočným robotom (to jest robotom, z ktorého
 spojnica vychádza) a tvar orezania konca koncovým robotom
 (to jest tým, v ktorom spojnica končí). Na nasledujúcich
 dvoch animovaných obrázkoch je znázornená spojnica, ktorá
 nie je orezaná (vľavo) a spojnica, ktorá bola správne
 orezaná (vpravo) – tvar orezania začiatku (A) bol
 vygenerovaný začiatočným robotom ("A") a tvar
 orezania konca (B) bol vygenerovaný koncovým (cieľovým)
 robotom ("B").
 
 
 
 
 Spojnica bez orezania.
 Správne orezaná spojnica.
 
 
 Nasledujúce dva animované obrázky ukazujú dve rôzne
 situácie nesprávneho orezania.
 
 Na obrázku vľavo sú použité tri rozmery orezania,
 ktoré nie je zhodné s tvarom robota (neprekrýva sa s ním).
 V prvých dvoch prípadoch nezasahuje orezanie stred tvaru
 prislúchajúceho robota, čo je príčinou toho, že sa
 v určitých fázach animácie spojnica rozdelí na dve časti
 a to zároveň spôsobuje chybné zobrazenie značky spojnice
 (šípky). Orezanie je totiž zároveň používané pri zisťovaní
 umiestnenia krajných značiek spojnice. Používa sa pri tom
 operácia prieniku tvaru orezania s čiarou spojnice. Ak je
 prienik zložitý, tak nemôže byť správne určené umiestnenie
 značky spojnice.
 
 Na obrázku vpravo bol na definovanie začiatočného
 orezania použitý koncový robot a naopak. Tvar orezania je
 za normálnych okolností neviditeľný. Aby bolo jasné, čo
 sa deje, sú tvary orezania na tomto obrázku zobrazené
 tenkými elipsami. Orezanie spojnice je správne v jednom
 jedinom okamihu animácie a to presne v tom, v ktorom bolo
 definované. Ak sa jeden z robotov pohne, orezanie prestane
 správne fungovať.
 
 
 
 
 Nesprávne orezaná spojnica
(tvar, ktorý neprechádza stredom).
 Nesprávne orezaná spojnica
(zámena robotov, ktorí generovali
 orezanie).
 
 
 Príklad:
 
 Tento príklad ukazuje spôsob definovania dvoch robotov
 v tvare hviezdy prepojených správne orezanou spojnicou,
 ktorej jeden koniec má definovanú značku v tvare šípky.
 Oba roboty je možné presúvať a otáčať s pomocou myši.
 Na otáčanie robota je potrebné držať stlačený kláves
 Shift.
 
 
// Konštanta veľkostí robotov:
final double veľkosťRobota = 66.0;
// Kreslenie tvaru šípky, ktorá bude tvoriť značku spojnice:
final KreslenieTvaru šípka = r -&gt;
{
    r.vpravo(20);
    r.vpred(12);
    Poloha p = r.poloha();
    r.zdvihniPero();
    r.vzad(12);
    r.vľavo(40);
    r.položPero();
    r.vpred(12);
    r.choďNa(p);
};
// Definícia tvaru robotov:
final KreslenieTvaru tvar = r -&gt;
{
    r.hviezda();
    r.text(r.meno());
};
// Definícia robota s menom αlpha:
final GRobot α = new GRobot();
α.meno("αlpha");
α.hrúbkaČiary(1.5);
α.veľkosť(veľkosťRobota);
α.vlastnýTvar(tvar);
α.nekresliTvary();
α.zdvihniPero();
// Definícia robota s menom βeta:
final GRobot β = new GRobot();
β.meno("βeta");
β.hrúbkaČiary(1.5);
β.veľkosť(veľkosťRobota);
β.vlastnýTvar(tvar);
β.nekresliTvary();
β.zdvihniPero();
// Nastavenie počiatočných polôh robotov:
α.skoč(110, -55);
β.skoč(-110, 55);
// Definícia spojnice a jej orezania:
Spojnica spojnica = α.spojnica(β);
spojnica.orezanieZačiatku(α.hviezda());
spojnica.orezanieKonca(β.hviezda());
// Nastavenie kreslenia značky začiatku:
spojnica.definujZnačkuZačiatku(šípka);
// Definícia takej obsluhy udalostí, ktorá umožnení presúvanie robotov:
new ObsluhaUdalostí()
{
    // Inštancia robota, na ktorú bolo kliknuté:
    GRobot r = null;
    @Override public void klik()
    {
        // Klik urobí to isté ako ťahanie myšou:
        ťahanieMyšou();
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        // Zistenie, na ktorý robot bolo kliknuté a jeho aktivácia:
        r = null;
        if (α.myšVHviezde()) r = α; else
        if (β.myšVHviezde()) r = β;
    }
    @Override public void ťahanieMyšou()
    {
        if (null != r && ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ak je aktívny jeden z robotov, tak ťahanie ľavého
            // tlačidla myši so súčasným držaním klávesu Shift ho
            // otočí na súradnice myši, v opačnom prípade je robot
            // na súradnice myši presunutý:
            if (ÚdajeUdalostí.myš().isShiftDown())
                r.otočNaMyš();
            else
                r.skočNaMyš();
        }
    }
};
 
 Výsledok:
 
 
 Jednoduché
 presunutie jedného a potom druhého robota
(plátno je orezané a automatický návrat do
 východiskovej polohy bol doprogramovaný,aby
 animácia plynule nadväzovala pri jej opakovaní).
Parametre:
orezanieZačiatku – nový tvar orezania začiatku
     spojnice alebo null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
orezanieZaciatku
public GRobot.Spojnica orezanieZaciatku(Shape orezanieZačiatku)
 Alias pre orezanieZačiatku.
orezanieKonca
public GRobot.Spojnica orezanieKonca(Shape orezanieKonca)
Definuje tvar orezania konca spojnice. Ak je zadaná
 hodnota null, tak bude orezanie zrušené.
 Orezanie konca (i začiatku) čiary spojnice má význam vo
 viacerých prípadoch. Napríklad, ak chceme kresliť
 priehľadný tvar cieľového robota a zároveň chceme, aby sa
 čiara spojnice končila na jeho hraniciach alebo potrebujeme
 kresliť
 značku konca čiary spojnice presne na hraniciach tvaru
 cieľového robota. Tvar orezania by sme v týchto prípadoch
 volili tak, aby vymedzoval hranice objektu, ktorý svojím
 tvarom reprezentuje cieľový robot.
 
 Podrobnejšie informácie o orezaní konca aj začiatku
 spojnice a príklad ich použitia sú v opise metódy
 orezanieZačiatku.
Parametre:
orezanieKonca – nový tvar orezania konca
     spojnice alebo null
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
vysunutieZačiatku
public double vysunutieZačiatku()
Zistí aktuálne vysunutie začiatku spojnice od jej stredu.
 Hodnota 0 znamená, že spojnica smeruje zo stredu
 zdrojového robota (to jest zo súradníc jeho aktuálnej
 polohy). Iná hodnota znamená vysunutie začiatku spojnice
 v kladnom alebo zápornom smere, ktorý je súhlasný s kladným
 alebo záporným smerom osi x, ak os y smeruje do koncového
 bodu spojnice. Napríklad hodnota 10 znamená, že
 začiatok spojnice je vysunutý od aktuálnych súradníc
 zdroja o desať bodov smerom „doprava“ (ak považujeme smer
 „dopredu“ za súhlasný so smerom do cieľa).
 
 
 Znázornenie
 kladného vysunutia začiatku spojnice – zelená čiara je
 spojnica,ktorá nie je vysunutá a červená znázorňuje
 vysunutú spojnicu.
Návratová hodnota:
aktuálne vysunutie začiatku spojnice od aktuálnej
     polohy začiatočného robota (kladné hodnoty znamenajú
     vysunutie smerom „doprava“ vzhľadom na orientáciu od
     zdroja do cieľa, záporné zase „doľava“)
vysunutieZaciatku
public double vysunutieZaciatku()
 Alias pre vysunutieZačiatku.
vysunutieKonca
public double vysunutieKonca()
Zistí aktuálne vysunutie konca spojnice od jej stredu.
 Hodnota 0 znamená, že spojnica smeruje do stredu
 cieľového robota (to jesto na súradnice jeho aktuálnej
 polohy). Iná hodnota znamená vysunutie konca spojnice
 v kladnom alebo zápornom smere, ktorý je súhlasný s kladným
 alebo záporným smerom začiatočného vysunutia spojnice.
 Napríklad hodnota 10 znamená, že koniec spojnice
 je vysunutý o desať bodov smerom „doprava,“ ak považujeme
 smer „dopredu“ za súhlasný so smerom od zdroja do cieľa.
 
 
 Znázornenie
 kladného vysunutia konca spojnice – zelená čiara je
 spojnica,ktorá nie je vysunutá a červená znázorňuje
 vysunutú spojnicu.
Návratová hodnota:
aktuálne vysunutie konca spojnice od aktuálnej
     polohy koncového robota; kladné hodnoty znamenajú
     vysunutie smerom „doprava“ vzhľadom na orientáciu od
     zdroja do cieľa, záporné zase „doľava“
vysunutieZačiatku
public GRobot.Spojnica vysunutieZačiatku(double vysunutie)
Umožňuje určiť vysunutie začiatočného bodu spojnice od jeho
 stredu. Hodnota 0 znamená, že spojnica smeruje
 presne zo stredu zdrojového robota (to jest zo súradníc
 jeho aktuálnej polohy). Iná hodnota vysunie začiatok
 spojnice v kladnom alebo zápornom smere, ktorý je súhlasný
 s kladným alebo záporným smerom osi x, ak os y smeruje do
 koncového bodu spojnice. Napríklad hodnota 10
 znamená, že začiatok spojnice bude vysunutý od aktuálnych
 súradníc zdroja o desať bodov smerom „doprava“ (ak
 považujeme smer „dopredu“ za súhlasný so smerom od zdroja
 do cieľa).
 
 
 Znázornenie
 kladného vysunutia začiatku spojnice – zelená čiara je
 spojnica,ktorá nie je vysunutá a červená znázorňuje
 vysunutú spojnicu.
Parametre:
vysunutie – nové vysunutie začiatku spojnice od
     aktuálnej polohy začiatkočného robota; (kladné hodnoty
     znamenajú vysunutie smerom „doprava“ vzhľadom na
     orientáciu od zdroja do cieľa, záporné zase „doľava“)
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
vysunutieZaciatku
public GRobot.Spojnica vysunutieZaciatku(double vysunutie)
 Alias pre vysunutieZačiatku.
vysunutieKonca
public GRobot.Spojnica vysunutieKonca(double vysunutie)
Umožňuje určiť vysunutie koncového bodu spojnice od jeho
 stredu. Hodnota 0 znamená, že spojnica smeruje
 presne do stredu cieľového robota (to jest na súradnice
 jeho aktuálnej polohy). Iná hodnota vysunie koniec spojnice
 v kladnom alebo zápornom smere, ktorý je súhlasný s kladným
 alebo záporným smerom začiatočného vysunutia spojnice.
 Napríklad hodnota 10 znamená, že koniec spojnice
 bude vysunutý od aktuálnych súradníc cieľa o desať bodov
 smerom „doprava,“ ak považujeme smer „dopredu“ za súhlasný
 so smerom od zdroja do cieľa.
 
 
 Znázornenie
 kladného vysunutia konca spojnice – zelená čiara je
 spojnica,ktorá nie je vysunutá a červená znázorňuje
 vysunutú spojnicu.
Parametre:
vysunutie – nové vysunutie konca spojnice od
     aktuálnej polohy koncového robota; kladné hodnoty
     znamenajú vysunutie smerom „doprava“ vzhľadom na
     orientáciu od zdroja do cieľa, záporné zase „doľava“
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
vysunutie
public GRobot.Spojnica vysunutie(double vysunutie)
Umožňuje určiť vysunutie oboch koncov spojnice od stredov
 prepájaných robotov súčasne. Hodnota 0 znamená,
 že spojnica smeruje presne zo „stredu“ (z aktuálnej polohy)
 zdrojového robota presne do „stredu“ (na súradnice
 aktuálnej polohy) cieľového robota. Iná hodnota vysunie
 začiatok spojnice v kladnom alebo zápornom smere, napríklad
 hodnota 10 znamená, že spojnica bude vysunutá od
 aktuálnych súradníc zdroja a cieľa o desať bodov smerom
 „doprava,“ ak považujeme smer „dopredu“ za súhlasný so
 smerom od zdroja do cieľa.
 
 
 
 
 Znázornenie kladného
 vysunutia začiatku (vľavo) a konca (vpravo) spojnice – zelená
 čiara je spojnica,ktorá nie je vysunutá a červená
 znázorňuje vysunutú spojnicu.
Parametre:
vysunutie – nové vysunutie spojnice od aktuálnych polôh
     prepájaných robotov; kladné hodnoty znamenajú vysunutie
     smerom „doprava“ vzhľadom na orientáciu od zdroja do
     cieľa, záporné zase „doľava“
Návratová hodnota:
aktuálna inštancia spojnice (na reťazové nastavenie
     viacerých vlastností)
viditeľná
public boolean viditeľná()
Zistí, či je spojnica viditeľná alebo skrytá.
 
 Poznámka: Táto metóda nezistí, či
 je spojnica reálne vidno na plátne, iba vráti stav zobrazenia
 určený metódami zobraz a/alebo
 skry. (Tým chce byť vysvetlené,
 že ak je napríklad spojnica skrytá za nejakým objektom, tak
 táto metóda to nezistí.)
Návratová hodnota:
true ak je spojnica zobrazená, false v opačnom prípade
Pozri tiež:
zobrazená(), 
skrytá(), 
ukáž(), 
zobraz(), 
skry(), 
ukáž(boolean), 
zobraz(boolean)
viditelna
public boolean viditelna()
 Alias pre viditeľná.
zobrazená
public boolean zobrazená()
Zistí, či je spojnica viditeľná alebo skrytá.
 
 Poznámka: Táto metóda nezistí, či
 je spojnica reálne vidno na plátne, iba vráti stav zobrazenia
 určený metódami zobraz a/alebo
 skry. (Tým chce byť vysvetlené,
 že ak je napríklad spojnica skrytá za nejakým objektom, tak
 táto metóda to nezistí.)
Návratová hodnota:
true ak je spojnica zobrazená, false v opačnom prípade
Pozri tiež:
viditeľná(), 
skrytá(), 
ukáž(), 
zobraz(), 
skry(), 
ukáž(boolean), 
zobraz(boolean)
zobrazena
public boolean zobrazena()
 Alias pre zobrazená.
skrytá
public boolean skrytá()
Zistí, či je spojnica viditeľná alebo skrytá.
 
 Poznámka: Táto metóda nezistí, či
 je spojnica reálne vidno na plátne, iba vráti stav zobrazenia
 určený metódami zobraz a/alebo
 skry. (Tým chce byť vysvetlené,
 že ak je napríklad spojnica skrytá za nejakým objektom, tak
 táto metóda to nezistí.)
Návratová hodnota:
true ak je spojnica skrytá, false v opačnom prípade
Pozri tiež:
viditeľná(), 
zobrazená(), 
ukáž(), 
zobraz(), 
skry(), 
ukáž(boolean), 
zobraz(boolean)
skryta
public boolean skryta()
 Alias pre skrytá.
ukáž
public void ukáž()
Zobrazí túto spojnicu. Alternatívou tejto metódy je
 metóda zobraz. Opačný efekt má metóda
 skry.
 
 Poznámka: Táto metóda spúšťa
 automatické prekreslenie sveta, ale len v prípade, že sa
 stav viditeľnosti spojnice zmení.
Pozri tiež:
viditeľná(), 
zobrazená(), 
skrytá(), 
zobraz(), 
skry(), 
ukáž(boolean), 
zobraz(boolean)
ukaz
public void ukaz()
 Alias pre ukáž.
zobraz
public void zobraz()
Zobrazí túto spojnicu. Alternatívou tejto metódy je
 metóda ukáž. Opačný efekt má metóda
 skry.
 
 Poznámka: Táto metóda spúšťa
 automatické prekreslenie sveta, ale len v prípade, že sa
 stav viditeľnosti spojnice zmení.
Pozri tiež:
viditeľná(), 
zobrazená(), 
skrytá(), 
ukáž(), 
skry(), 
ukáž(boolean), 
zobraz(boolean)
skry
public void skry()
Skryje túto spojnicu. Opačný efekt majú metódy
 ukáž a zobraz (ktoré
 fungujú identicky – jedna je alternatívou druhej). Uvedené
 metódy majú definované aj verzie s parametrom, ktorého
 hodnota určuje, či má byť spojnica zobrazená alebo
 skrytá.
 
 Poznámka: Táto metóda spúšťa
 automatické prekreslenie sveta, ale len v prípade, že sa
 stav viditeľnosti spojnice zmení.
Pozri tiež:
viditeľná(), 
zobrazená(), 
skrytá(), 
ukáž(), 
zobraz(), 
ukáž(boolean), 
zobraz(boolean)
ukáž
public void ukáž(boolean ukáž)
Zobrazí alebo skryje túto spojnicu podľa hodnoty
 parametra ukáž. Alternatívou tejto metódy je
 metóda zobraz. Okrem tejto
 dvojice metód je definovaná trojica bezparametrických
 metód: ukáž, zobraz
 a skry.
 
 Poznámka: Táto metóda spúšťa
 automatické prekreslenie sveta, ale len v prípade, že sa
 stav viditeľnosti spojnice zmení.
Parametre:
zobraz – ak je hodnota tohto parametera rovná
     true a spojnica nie je viditeľná, tak bude
     zobrazená;
     ak je hodnota tohto parametera rovná false
     a spojnica je viditeľná, tak bude skrytá
Pozri tiež:
viditeľná(), 
zobrazená(), 
skrytá(), 
ukáž(), 
zobraz(), 
skry(), 
zobraz(boolean)
ukaz
public void ukaz(boolean ukáž)
 Alias pre ukáž.
zobraz
public void zobraz(boolean zobraz)
Zobrazí alebo skryje túto spojnicu podľa hodnoty
 parametra zobraz. Alternatívou tejto metódy je
 metóda ukáž. Okrem tejto
 dvojice metód je definovaná trojica bezparametrických
 metód: ukáž, zobraz
 a skry.
 
 Poznámka: Táto metóda spúšťa
 automatické prekreslenie sveta, ale len v prípade, že sa
 stav viditeľnosti spojnice zmení.
Parametre:
zobraz – ak je hodnota tohto parametera rovná
     true a spojnica nie je viditeľná, tak bude
     zobrazená;
     ak je hodnota tohto parametera rovná false
     a spojnica je viditeľná, tak bude skrytá
Pozri tiež:
viditeľná(), 
zobrazená(), 
skrytá(), 
ukáž(), 
zobraz(), 
skry(), 
ukáž(boolean)
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10,"i183":10,"i184":10,"i185":10,"i186":10,"i187":10,"i188":10,"i189":10,"i190":10,"i191":10,"i192":10,"i193":10,"i194":10,"i195":10,"i196":10,"i197":10,"i198":10,"i199":10,"i200":10,"i201":10,"i202":10,"i203":10,"i204":10,"i205":10,"i206":10,"i207":10,"i208":10,"i209":10,"i210":10,"i211":10,"i212":10,"i213":10,"i214":10,"i215":10,"i216":10,"i217":10,"i218":10,"i219":10,"i220":10,"i221":10,"i222":10,"i223":10,"i224":10,"i225":10,"i226":10,"i227":10,"i228":10,"i229":10,"i230":10,"i231":10,"i232":10,"i233":10,"i234":10,"i235":10,"i236":10,"i237":10,"i238":10,"i239":10,"i240":10,"i241":10,"i242":10,"i243":10,"i244":10,"i245":10,"i246":10,"i247":10,"i248":10,"i249":10,"i250":10,"i251":10,"i252":10,"i253":10,"i254":10,"i255":10,"i256":10,"i257":10,"i258":10,"i259":10,"i260":10,"i261":10,"i262":10,"i263":10,"i264":10,"i265":10,"i266":10,"i267":10,"i268":10,"i269":10,"i270":10,"i271":10,"i272":10,"i273":10,"i274":10,"i275":10,"i276":10,"i277":10,"i278":10,"i279":10,"i280":10,"i281":10,"i282":10,"i283":10,"i284":10,"i285":10,"i286":10,"i287":10,"i288":10,"i289":10,"i290":10,"i291":10,"i292":10,"i293":10,"i294":10,"i295":10,"i296":10,"i297":10,"i298":10,"i299":10,"i300":10,"i301":10,"i302":10,"i303":10,"i304":10,"i305":10,"i306":10,"i307":10,"i308":10,"i309":10,"i310":10,"i311":10,"i312":10,"i313":10,"i314":10,"i315":10,"i316":10,"i317":10,"i318":10,"i319":10,"i320":10,"i321":10,"i322":10,"i323":10,"i324":10,"i325":10,"i326":10,"i327":10,"i328":10,"i329":10,"i330":10,"i331":10,"i332":10,"i333":10,"i334":10,"i335":10,"i336":10,"i337":10,"i338":10,"i339":10,"i340":10,"i341":10,"i342":10,"i343":10,"i344":10,"i345":10,"i346":10,"i347":10,"i348":10,"i349":10,"i350":10,"i351":10,"i352":10,"i353":10,"i354":10,"i355":10,"i356":10,"i357":10,"i358":10,"i359":10,"i360":10,"i361":10,"i362":10,"i363":10,"i364":10,"i365":10,"i366":10,"i367":10,"i368":10,"i369":10,"i370":10,"i371":10,"i372":10,"i373":10,"i374":10,"i375":10,"i376":10,"i377":10,"i378":10,"i379":10,"i380":10,"i381":10,"i382":10,"i383":10,"i384":10,"i385":10,"i386":10,"i387":10,"i388":10,"i389":10,"i390":10,"i391":10,"i392":10,"i393":10,"i394":10,"i395":10,"i396":10,"i397":10,"i398":10,"i399":10,"i400":10,"i401":10,"i402":10,"i403":10,"i404":10,"i405":10,"i406":10,"i407":10,"i408":10,"i409":10,"i410":10,"i411":10,"i412":10,"i413":10,"i414":10,"i415":10,"i416":10,"i417":10,"i418":10,"i419":10,"i420":10,"i421":10,"i422":10,"i423":10,"i424":10,"i425":10,"i426":10,"i427":10,"i428":10,"i429":10,"i430":10,"i431":10,"i432":10,"i433":10,"i434":10,"i435":10,"i436":10,"i437":10,"i438":10,"i439":10,"i440":10,"i441":10,"i442":10,"i443":10,"i444":10,"i445":10,"i446":10,"i447":10,"i448":10,"i449":10,"i450":10,"i451":10,"i452":10,"i453":10,"i454":10,"i455":10,"i456":10,"i457":10,"i458":10,"i459":10,"i460":10,"i461":10,"i462":10,"i463":10,"i464":10,"i465":10,"i466":10,"i467":10,"i468":10,"i469":10,"i470":10,"i471":10,"i472":10,"i473":10,"i474":10,"i475":10,"i476":10,"i477":10,"i478":10,"i479":10,"i480":10,"i481":10,"i482":10,"i483":10,"i484":10,"i485":10,"i486":10,"i487":10,"i488":10,"i489":10,"i490":10,"i491":10,"i492":10,"i493":10,"i494":10,"i495":10,"i496":10,"i497":10,"i498":10,"i499":10,"i500":10,"i501":10,"i502":10,"i503":10,"i504":10,"i505":10,"i506":10,"i507":10,"i508":10,"i509":10,"i510":10,"i511":10,"i512":10,"i513":10,"i514":10,"i515":10,"i516":10,"i517":10,"i518":10,"i519":10,"i520":10,"i521":10,"i522":10,"i523":10,"i524":10,"i525":10,"i526":10,"i527":10,"i528":10,"i529":10,"i530":10,"i531":10,"i532":10,"i533":10,"i534":10,"i535":10,"i536":10,"i537":10,"i538":10,"i539":10,"i540":10,"i541":10,"i542":10,"i543":10,"i544":10,"i545":10,"i546":10,"i547":10,"i548":10,"i549":10,"i550":10,"i551":10,"i552":10,"i553":10,"i554":10,"i555":10,"i556":10,"i557":10,"i558":10,"i559":10,"i560":10,"i561":10,"i562":10,"i563":10,"i564":10,"i565":10,"i566":10,"i567":10,"i568":10,"i569":10,"i570":10,"i571":10,"i572":10,"i573":10,"i574":10,"i575":10,"i576":10,"i577":10,"i578":10,"i579":10,"i580":10,"i581":10,"i582":10,"i583":10,"i584":10,"i585":10,"i586":10,"i587":10,"i588":10,"i589":10,"i590":10,"i591":10,"i592":10,"i593":10,"i594":10,"i595":10,"i596":10,"i597":10,"i598":10,"i599":10,"i600":10,"i601":10,"i602":10,"i603":10,"i604":10,"i605":10,"i606":10,"i607":10,"i608":10,"i609":10,"i610":10,"i611":10,"i612":10,"i613":10,"i614":10,"i615":10,"i616":10,"i617":10,"i618":10,"i619":10,"i620":10,"i621":10,"i622":10,"i623":10,"i624":10,"i625":10,"i626":10,"i627":10,"i628":10,"i629":10,"i630":10,"i631":10,"i632":10,"i633":10,"i634":10,"i635":10,"i636":10,"i637":10,"i638":10,"i639":10,"i640":10,"i641":10,"i642":10,"i643":10,"i644":10,"i645":10,"i646":10,"i647":10,"i648":10,"i649":10,"i650":10,"i651":10,"i652":10,"i653":10,"i654":10,"i655":10,"i656":10,"i657":10,"i658":10,"i659":10,"i660":10,"i661":10,"i662":10,"i663":10,"i664":10,"i665":10,"i666":10,"i667":10,"i668":10,"i669":10,"i670":10,"i671":10,"i672":10,"i673":10,"i674":10,"i675":10,"i676":10,"i677":10,"i678":10,"i679":10,"i680":10,"i681":10,"i682":10,"i683":10,"i684":10,"i685":10,"i686":10,"i687":10,"i688":10,"i689":10,"i690":10,"i691":10,"i692":10,"i693":10,"i694":10,"i695":10,"i696":10,"i697":10,"i698":10,"i699":10,"i700":10,"i701":10,"i702":10,"i703":10,"i704":10,"i705":10,"i706":10,"i707":10,"i708":10,"i709":10,"i710":10,"i711":10,"i712":10,"i713":10,"i714":10,"i715":10,"i716":10,"i717":10,"i718":10,"i719":10,"i720":10,"i721":10,"i722":10,"i723":10,"i724":10,"i725":10,"i726":10,"i727":10,"i728":10,"i729":10,"i730":10,"i731":10,"i732":10,"i733":10,"i734":10,"i735":10,"i736":10,"i737":10,"i738":10,"i739":10,"i740":10,"i741":10,"i742":10,"i743":10,"i744":10,"i745":10,"i746":10,"i747":10,"i748":10,"i749":10,"i750":10,"i751":10,"i752":10,"i753":10,"i754":10,"i755":10,"i756":10,"i757":10,"i758":10,"i759":10,"i760":10,"i761":10,"i762":10,"i763":10,"i764":10,"i765":10,"i766":10,"i767":10,"i768":10,"i769":10,"i770":10,"i771":10,"i772":10,"i773":10,"i774":10,"i775":10,"i776":10,"i777":10,"i778":10,"i779":10,"i780":10,"i781":10,"i782":10,"i783":10,"i784":10,"i785":10,"i786":10,"i787":10,"i788":10,"i789":10,"i790":10,"i791":10,"i792":10,"i793":10,"i794":10,"i795":10,"i796":10,"i797":10,"i798":10,"i799":10,"i800":10,"i801":10,"i802":10,"i803":10,"i804":10,"i805":10,"i806":10,"i807":10,"i808":10,"i809":10,"i810":10,"i811":10,"i812":10,"i813":10,"i814":10,"i815":10,"i816":10,"i817":10,"i818":10,"i819":10,"i820":10,"i821":10,"i822":10,"i823":10,"i824":10,"i825":10,"i826":10,"i827":10,"i828":10,"i829":10,"i830":10,"i831":10,"i832":10,"i833":10,"i834":10,"i835":10,"i836":10,"i837":10,"i838":10,"i839":10,"i840":10,"i841":10,"i842":10,"i843":10,"i844":10,"i845":10,"i846":10,"i847":10,"i848":10,"i849":10,"i850":10,"i851":10,"i852":10,"i853":10,"i854":10,"i855":10,"i856":10,"i857":10,"i858":10,"i859":10,"i860":10,"i861":10,"i862":10,"i863":10,"i864":10,"i865":10,"i866":10,"i867":10,"i868":10,"i869":10,"i870":10,"i871":10,"i872":10,"i873":10,"i874":10,"i875":10,"i876":10,"i877":10,"i878":10,"i879":10,"i880":10,"i881":10,"i882":10,"i883":10,"i884":10,"i885":10,"i886":10,"i887":10,"i888":10,"i889":10,"i890":10,"i891":10,"i892":10,"i893":10,"i894":10,"i895":10,"i896":10,"i897":10,"i898":10,"i899":10,"i900":10,"i901":10,"i902":10,"i903":10,"i904":10,"i905":10,"i906":10,"i907":10,"i908":10,"i909":10,"i910":10,"i911":10,"i912":10,"i913":10,"i914":10,"i915":10,"i916":10,"i917":10,"i918":10,"i919":10,"i920":10,"i921":10,"i922":10,"i923":10,"i924":10,"i925":10,"i926":10,"i927":10,"i928":10,"i929":10,"i930":10,"i931":10,"i932":10,"i933":10,"i934":10,"i935":10,"i936":10,"i937":10,"i938":10,"i939":10,"i940":10,"i941":10,"i942":10,"i943":10,"i944":10,"i945":10,"i946":10,"i947":10,"i948":10,"i949":10,"i950":10,"i951":10,"i952":10,"i953":10,"i954":10,"i955":10,"i956":10,"i957":10,"i958":10,"i959":10,"i960":10,"i961":10,"i962":10,"i963":10,"i964":10,"i965":10,"i966":10,"i967":10,"i968":10,"i969":10,"i970":10,"i971":10,"i972":10,"i973":10,"i974":10,"i975":10,"i976":10,"i977":10,"i978":10,"i979":10,"i980":10,"i981":10,"i982":10,"i983":10,"i984":10,"i985":10,"i986":10,"i987":10,"i988":10,"i989":10,"i990":10,"i991":10,"i992":10,"i993":10,"i994":10,"i995":10,"i996":10,"i997":10,"i998":10,"i999":10,"i1000":10,"i1001":10,"i1002":10,"i1003":10,"i1004":10,"i1005":10,"i1006":10,"i1007":10,"i1008":10,"i1009":10,"i1010":10,"i1011":10,"i1012":10,"i1013":10,"i1014":10,"i1015":10,"i1016":10,"i1017":10,"i1018":10,"i1019":10,"i1020":10,"i1021":10,"i1022":10,"i1023":10,"i1024":10,"i1025":10,"i1026":10,"i1027":10,"i1028":10,"i1029":10,"i1030":10,"i1031":10,"i1032":10,"i1033":10,"i1034":10,"i1035":10,"i1036":10,"i1037":10,"i1038":10,"i1039":10,"i1040":10,"i1041":10,"i1042":10,"i1043":10,"i1044":10,"i1045":10,"i1046":10,"i1047":10,"i1048":10,"i1049":10,"i1050":10,"i1051":10,"i1052":10,"i1053":10,"i1054":10,"i1055":10,"i1056":10,"i1057":10,"i1058":10,"i1059":10,"i1060":10,"i1061":10,"i1062":10,"i1063":10,"i1064":10,"i1065":10,"i1066":10,"i1067":10,"i1068":10,"i1069":10,"i1070":10,"i1071":10,"i1072":10,"i1073":10,"i1074":10,"i1075":10,"i1076":10,"i1077":10,"i1078":10,"i1079":10,"i1080":10,"i1081":10,"i1082":10,"i1083":10,"i1084":10,"i1085":10,"i1086":10,"i1087":10,"i1088":10,"i1089":10,"i1090":10,"i1091":10,"i1092":10,"i1093":10,"i1094":10,"i1095":10,"i1096":10,"i1097":10,"i1098":10,"i1099":10,"i1100":10,"i1101":10,"i1102":10,"i1103":10,"i1104":10,"i1105":10,"i1106":10,"i1107":10,"i1108":10,"i1109":10,"i1110":10,"i1111":10,"i1112":10,"i1113":10,"i1114":10,"i1115":10,"i1116":10,"i1117":10,"i1118":10,"i1119":10,"i1120":10,"i1121":10,"i1122":10,"i1123":10,"i1124":10,"i1125":10,"i1126":10,"i1127":10,"i1128":10,"i1129":10,"i1130":10,"i1131":10,"i1132":10,"i1133":10,"i1134":10,"i1135":10,"i1136":10,"i1137":10,"i1138":10,"i1139":10,"i1140":10,"i1141":10,"i1142":10,"i1143":10,"i1144":10,"i1145":10,"i1146":10,"i1147":10,"i1148":10,"i1149":10,"i1150":10,"i1151":10,"i1152":10,"i1153":10,"i1154":10,"i1155":10,"i1156":10,"i1157":10,"i1158":10,"i1159":10,"i1160":10,"i1161":10,"i1162":10,"i1163":10,"i1164":10,"i1165":10,"i1166":10,"i1167":10,"i1168":10,"i1169":10,"i1170":10,"i1171":10,"i1172":10,"i1173":10,"i1174":10,"i1175":10,"i1176":10,"i1177":10,"i1178":10,"i1179":10,"i1180":10,"i1181":10,"i1182":10,"i1183":10,"i1184":10,"i1185":10,"i1186":10,"i1187":10,"i1188":10,"i1189":10,"i1190":10,"i1191":10,"i1192":10,"i1193":10,"i1194":10,"i1195":10,"i1196":10,"i1197":10,"i1198":10,"i1199":10,"i1200":10,"i1201":10,"i1202":10,"i1203":10,"i1204":10,"i1205":10,"i1206":10,"i1207":10,"i1208":10,"i1209":10,"i1210":10,"i1211":10,"i1212":10,"i1213":10,"i1214":10,"i1215":10,"i1216":10,"i1217":10,"i1218":10,"i1219":10,"i1220":10,"i1221":10,"i1222":10,"i1223":10,"i1224":10,"i1225":10,"i1226":10,"i1227":10,"i1228":10,"i1229":10,"i1230":10,"i1231":10,"i1232":10,"i1233":10,"i1234":10,"i1235":10,"i1236":10,"i1237":10,"i1238":10,"i1239":10,"i1240":10,"i1241":10,"i1242":10,"i1243":10,"i1244":10,"i1245":10,"i1246":10,"i1247":10,"i1248":10,"i1249":10,"i1250":10,"i1251":10,"i1252":10,"i1253":10,"i1254":10,"i1255":10,"i1256":10,"i1257":10,"i1258":10,"i1259":10,"i1260":10,"i1261":10,"i1262":10,"i1263":10,"i1264":10,"i1265":10,"i1266":10,"i1267":10,"i1268":10,"i1269":10,"i1270":10,"i1271":10,"i1272":10,"i1273":10,"i1274":10,"i1275":10,"i1276":10,"i1277":10,"i1278":10,"i1279":10,"i1280":10,"i1281":10,"i1282":10,"i1283":10,"i1284":10,"i1285":10,"i1286":10,"i1287":10,"i1288":10,"i1289":10,"i1290":10,"i1291":10,"i1292":10,"i1293":10,"i1294":10,"i1295":10,"i1296":10,"i1297":10,"i1298":10,"i1299":10,"i1300":10,"i1301":10,"i1302":10,"i1303":10,"i1304":10,"i1305":10,"i1306":10,"i1307":10,"i1308":10,"i1309":10,"i1310":10,"i1311":10,"i1312":10,"i1313":10,"i1314":10,"i1315":10,"i1316":10,"i1317":10,"i1318":10,"i1319":10,"i1320":10,"i1321":10,"i1322":10,"i1323":10,"i1324":10,"i1325":10,"i1326":10,"i1327":10,"i1328":10,"i1329":10,"i1330":10,"i1331":10,"i1332":10,"i1333":10,"i1334":10,"i1335":10,"i1336":10,"i1337":10,"i1338":10,"i1339":10,"i1340":10,"i1341":10,"i1342":10,"i1343":10,"i1344":10,"i1345":10,"i1346":10,"i1347":10,"i1348":10,"i1349":10,"i1350":10,"i1351":10,"i1352":10,"i1353":10,"i1354":10,"i1355":10,"i1356":10,"i1357":10,"i1358":10,"i1359":10,"i1360":10,"i1361":10,"i1362":10,"i1363":10,"i1364":10,"i1365":10,"i1366":10,"i1367":10,"i1368":10,"i1369":10,"i1370":10,"i1371":10,"i1372":10,"i1373":10,"i1374":10,"i1375":10,"i1376":10,"i1377":10,"i1378":10,"i1379":10,"i1380":10,"i1381":10,"i1382":10,"i1383":10,"i1384":10,"i1385":10,"i1386":10,"i1387":10,"i1388":10,"i1389":10,"i1390":10,"i1391":10,"i1392":10,"i1393":10,"i1394":10,"i1395":10,"i1396":10,"i1397":10,"i1398":10,"i1399":10,"i1400":10,"i1401":10,"i1402":10,"i1403":10,"i1404":10,"i1405":10,"i1406":10,"i1407":10,"i1408":10,"i1409":10,"i1410":10,"i1411":10,"i1412":10,"i1413":10,"i1414":10,"i1415":10,"i1416":10,"i1417":10,"i1418":10,"i1419":10,"i1420":10,"i1421":10,"i1422":10,"i1423":10,"i1424":10,"i1425":10,"i1426":10,"i1427":10,"i1428":10,"i1429":10,"i1430":10,"i1431":10,"i1432":10,"i1433":10,"i1434":10,"i1435":10,"i1436":10,"i1437":10,"i1438":10,"i1439":10,"i1440":10,"i1441":10,"i1442":10,"i1443":10,"i1444":10,"i1445":10,"i1446":10,"i1447":10,"i1448":10,"i1449":10,"i1450":10,"i1451":10,"i1452":10,"i1453":10,"i1454":10,"i1455":10,"i1456":10,"i1457":10,"i1458":10,"i1459":10,"i1460":10,"i1461":10,"i1462":10,"i1463":10,"i1464":10,"i1465":10,"i1466":10,"i1467":10,"i1468":10,"i1469":10,"i1470":10,"i1471":10,"i1472":10,"i1473":10,"i1474":10,"i1475":10,"i1476":10,"i1477":10,"i1478":10,"i1479":10,"i1480":10,"i1481":10,"i1482":10,"i1483":10,"i1484":10,"i1485":10,"i1486":10,"i1487":10,"i1488":10,"i1489":10,"i1490":10,"i1491":10,"i1492":10,"i1493":10,"i1494":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda GRobot
java.lang.Object
GRobot
Všetky implementované rozhrania:
Farebnosť, Konštanty, Poloha, Priehľadnosť, Rozmer, Smer
public class GRobot
extends Object
implements Poloha, Smer, Rozmer, Farebnosť, Priehľadnosť, Konštanty
Úvod
 
 Táto dokumentácia je podporným materiálom na vyučovanie predmetov
 programovania v Jave s podporou programovacieho rámca GRobot.
 Obsahuje úplný opis všetkých tried a metód vrátane príkladov použitia.
 (Materiál môže byť priebežne aktualizovaný, preto odporúčame sledovať
 tieto stránky.)
stránkach autora (buď samostatne, alebo v rámci 
 href="https://pdf.truni.sk/horvath/softver?generator"
generátora projektov pre 
BlueJ, ktorý spomíname
 
 Od 12. 3. 2019 je zdrojový kód programovacieho rámca GRobot umiestenný
 na serveroch GitHub.
 Jeho
 projekt je v nepravidelných intervaloch aktualizovaný. Môže nastať
 prípad, kedy sa aktuálna verzia tejto dokumentácie presunie na niektorú
 pridruženú službu repozitára. V tom prípade by sa táto informácia objavila
 v opise repozitára. Aktuálna verzia 
balíčka JAR (t. j. binárna verzia rámca), môže svoje
 umiestnenie tiež zmeniť. Aj o tejto skutočnosti sa pokúsime podať
 informáciu na vhodnom umiestnení (on-line).
 
 Programovací rámec má uľahčiť vstup do problematiky programovania.
 Programovanie je široká oblasť. Vstup do tejto problematiky s použitím
 „čistého“ jazyka Java považujeme za náročný, preto vznikol tento
 rámec. Aby bol tento nástroj použiteľný, bolo nevyhnutné vypracovanie
 kompletnej dokumentácie, ktorú ponúkame na týchto stránkach.
 
 Grafický robot je skonštruovaný do sveta s dvomi plátnami, na ktoré môže kresliť. Funkcionalitu robota zabezpečuje najmä
 ústredná trieda GRobot. Okrem nej je rámci definovaných
 asi päťdesiat ďalších tried, ktoré podporujú fungovanie robotov,
 sveta, oboch plátien a ďalších
 prvkov, akými sú napríklad obrázky, zvuky, farby, zoznamy, udalosti, súbory a podobne…
 Tieto triedy vznikli prirodzeným vývojom a ich účelom je zjednodušenie
 používania celého rámca.
 
 Programovanie robota
 
 Nasledujúci príklad ukazuje ako naprogramovať robot tak, aby nakreslil
 trojuholník (rovnostranný):
 
 
for (int i = 0; i &lt; 3; ++i)
{
    dopredu(50.0);
    doprava(120.0);
}
 
 
 Výsledok kreslenia trojuholníka.
 
 Príklad tri razy zopakuje dvojicu príkazov na pohyb robota o 50 bodov
 dopredu a otočenie o 120° doprava. Tým dostaneme trojuholník. (Na
 zamyslenie: prečo sa otáčame o 120°? Keď príklad chceme prepracovať tak,
 aby sa ním dal nakresliť ľubovoľný pravidelný n-uholník, musíme poznať
 odpoveď na túto otázku… Predtým, než sa pozriete na riešenie, skúste
 porozmýšľať…)
 
 Príklad sme prepracovali tak, aby kreslil ľubovoľný pravidelný
 n-uholník so želanou dĺžkou strany. Zaviedli sme dve pomocné premenné,
 ktorých hodnoty stačí zmeniť:
 
 
int početUhlov = 3;
double dĺžkaStrany = 50.0;
for (int i = 0; i &lt; početUhlov; ++i)
{
    dopredu(dĺžkaStrany);
    doprava(360.0 / početUhlov);
}
 
 (Teraz, keď ste uvideli riešenie, poznáte odpoveď na vyššie
 spomenutú otázku? Pri odpovedaní na otázku, prečo sa na nakreslenie
 trojuholníka otáčame práve o 120° môžeme zaujať najmenej dva rôzne postoje.
 Prvý postoj: Keď sa na problém pozrieme z nadhľadu – z pohľadu
 celkového pohybu robota a spýtame sa: koľko ráz sa musím otočiť, aby som
 nakreslil trojuholník? Odpoveď znie dva razy. Kvôli zjednodušeniu výpočtov
 zaveďme predpoklad, že robot musí skončiť otočený rovnakým smerom ako
 začínal. Keď sa potom sa spýtame: koľko ráz sa musí pri kreslení
 trojuholníka robot otočiť, aby skončil obrátený tým istým smerom ako
 začínal? Odpoveď znie tri, čo je rovnaký počet ako počet uhlov
 trojuholníka. V prípade, že kreslíme rovnostranný trojuholník, je miera
 otočenia sa v každom rohu rovnomerná, pretože všetky tri uhly sú rovnaké.
 Na otočenie sa okolo svojej osi o jednu otáčku, sa musí robot otočiť
 o 360°. Keď toto otočenie rovnomerne rozdelíme na tri diely, dostávame
 výsledok pootočenia sa v jednom rohu – 120°. Podobná úvaha platí pre každý
 pravidelný n-uholník. Druhý postoj: Keď sa na problém pozrieme
 detailnejšie len v kľúčovom bode pohybu robota – v rohu a zapojíme
 poznatky z geometrie, ktoré hovoria, že súčet všetkých uhlov
 v trojuholníku musí byť 180°. Keďže kreslíme rovnostranný trojuholník, sú
 všetky tri uhly rovnaké, to znamená 60°. Ibaže pozor, hovoríme o vnútorných
 uhloch trojuholníka. Musíme si uvedomiť, že robot je po nakreslení strany
 otočený „von“ z trojuholníka. Je obrátený v smere kreslenia prvej strany
 a na to, aby sa otočil do smeru kreslenia druhej strany, musí opísať
 „vedľajší“ uhol vnútorného uhla (t. j. doplnok k priamemu uhlu – 180°), čo
 je 120°.)
 
 
 
 Všetky príklady v rámci tejto dokumentácie je nevyhnutné umiestniť do
 triedy. Vhodná je napríklad nasledujúca schéma:
 
 Poznámka: Rovnakú schému generuje aj šablóna
 „Hlavná trieda aplikácie“ v slovenskom preklade softvéru 
BlueJ a tak isto aj
 
generátor projektov od autora programovacieho rámca
 GRobot, ktorý nájdete na 
jeho stránkach. Spomínaný 
 href="https://pdf.truni.sk/horvath/softver?generator"
generátor projektov uľahčuje študentom vytvorenie
 nového projektu BlueJ
 a nasledujúci import programovacieho rámca GRobot do projektu,
 ktorý by inak museli vykonávať ručne.
 
 
import knižnica.GRobot;
«importy ostatných tried, ktoré sú v projekte použité»
public class «názov triedy» extends GRobot
{
    private «názov triedy»()
    {
        «sem vložte kód príkladu»
    }
    public static void main(String[] args)
    {
        new «názov triedy»();
    }
}
 
 Za «názov triedy» treba doplniť vhodný názov –
 mal by vystihovať podstatu (toho, čo trieda robí). Na miesto 
«sem vložte kód príkladu» treba vložiť príklad…
 Vyššie uvedený príklad s kreslením trojuholníka vyzerá v schéme triedy
 takto:
 
 
import knižnica.GRobot;
public class Trojuholník extends GRobot
{
    private Trojuholník()
    {
        for (int i = 0; i &lt; 3; ++i)
        {
            dopredu(50.0);
            doprava(120.0);
        }
    }
    public static void main(String[] args)
    {
        new Trojuholník();
    }
}
 
 V niektorých prípadoch treba medzi importované triedy zaradiť aj
 použité triedy Javy. Napríklad v príklade opisu metódy
 náter, v ktorom sú použité triedy
 Javy RadialGradientPaint,
 MultipleGradientPaint.CycleMethod,
 MultipleGradientPaint.ColorSpaceType,
 Point2D a AffineTransform,
 preto ich treba importovať, o čom informuje aj upozornenie uvedené
 v rámci opisu metódy náter. Väčšinou sa podobné
 upozornenie nachádza v blízkosti príkladov, ktoré sa nespoliehajú len
 na funkcionalitu programovacieho rámca, ale v niektorých prípadoch sa
 mohlo stať, že na to dokumentácia explicitne neupozorňuje.
 
 Metódy a konštruktory
 
 Funkčné prvky tried môžeme rozdeliť do dvoch základných kategórií:
 
 
 metódy
 a konštruktory.
 
 
 Metódy sa starajú o fungovanie objektu počas jeho bytia, konštruktory
 spolupracujú pri vytváraní nového objektu. Konštruktor je vlastne
 špeciálnou odrodou metódy, ktorá nesmie mať určený žiadny návratový typ
 a musí sa volať rovnako ako trieda. Podľa toho ich ľahko rozlíšime.
 Nasledujúci príklad definuje jednoduchú triedu Šípka
 s konštruktorom a metódou:
 
 
 
import knižnica.GRobot;
public class Šípka extends GRobot
{
    public Šípka()
    {
        definujVlastnéKreslenie();
    }
    private void definujVlastnéKreslenie()
    {
        vlastnýTvar(new KreslenieTvaru()
        {
            public void kresli(GRobot r)
            {
                r.zdvihniPero();
                r.posuňVľavo(0.5 * r.veľkosť());
                r.dozadu(r.veľkosť());
                r.položPero();
                r.doprava(15);
                r.dopredu(2 * r.veľkosť());
                r.doprava(150);
                r.dopredu(2 * r.veľkosť());
                // Prípadné ďalšie príkazy…
            }
        });
    }
}
 
 Vlastný tvar robota
 z príkladu vľavo po zväčšení robota na veľkosť 100(šedá
 kružnica je len ilustračná).
 
 
 Okrem tohto rozdelenia, môžeme metódy rozdeliť do ďalších kategórií
 podľa účelu. Z programátorského fyzického hľadiska (z pohľadu jazyka
 Java) medzi nimi rozdiel nie je, ale z programátorského
 logického[1] hľadiska (z pohľadu programátora) ten rozdiel
 (prinajmenšom pre každého skúsenejšieho programátora) vidno. Jasne sa
 rysujú najmä dva druhy metód – takzvané „gettery“ a „settery,“ čo je
 nepreložiteľný názov vyplývajúci z účelu metód. Getter (z anglického
 „get“ – vziať) číta hodnotu vlastnosti a setter (z anglického „set“ –
 nastaviť) ju, naopak, zapisuje. Jednou z hlavných myšlienok objektovo
 orientovaného programovania vždy bolo mať súkromné vlastnosti a verejné
 metódy, ktoré s nimi pracujú. Z toho sa vyvinuli gettery a settery, ktoré
 síce nenašli pevné zakotvenie priamo v jazyku Java, ale programátori ich
 odlišujú od „klasických“ metód. Našiel sa aj zaužívaný spôsob vyjadrenia
 tejto skutočnosti v programe – najjednoduchší možný – v názve metódy.
 Gettery začínajú anglickým „get“ a settery „set“… Takto by vyzeral
 jednoduchý príklad triedy Osoba s vlastnosťou vek
 a prislúchajúcim getterom a setterom:
 
 [1] – termín „logický“ je v počítačovej terminológii často
 používaný ako opak „fyzického“; logický môže znamenať všeobecný,
 nekonkrétny, patriaci do určitej množiny, vytvorený pre určité potreby…
 naopak fyzický znamená kokrétny, pevný, stanovený…; logický a fyzický
 v tomto prípade znamená akoby „pomyselný“ a „skutočný,“ pričom i ten
 pomyselný má v tomto prípade veľký význam, pretože dáva veciam určitý
 zmysel, kategorizuje ich, rozdeľuje…
 
 
public class Osoba
{
    private int vek;
    public int getVek()
    {
        return vek;
    }
    public void setVek(int vek)
    {
        if (vek &lt; 0) throw new GRobotException(
            "Vek nesmie byť záporný!", "negativeAge");
        this.vek = vek;
    }
}
 
 V slovenskom názve anglické slovká get a set nevyzerajú príliš dobre,
 preto sme sa rozhodli ich v rámci projektu programovacieho rámca
 grafického robota zamlčať. Namiesto toho používame v rámci dokumentácie
 ikonu  na getter a  na setter.
 Funkčnosť metód sa tým, samozrejme, nemení, ibaže bez explicitného
 uvedenia „get“ a „set“ v názve ich nie je možné na prvý pohľad (podľa
 názvu) rozoznať, preto sa to usilujeme kompenzovať aspoň v dokumentácii
 s pomocou ikon. Jestvujú vlastnosti, ktoré nemajú žiadny setter. Z toho
 vyplýva, že sú určené len na čítanie. Výskyt opačného typu vlastností
 (len na zápis) je v praxi veľmi zriedkavý. Obvykle by každá vlastnosť
 mala mať možnosť čítania hodnoty. V tomto rámci sa vlastnosti určené len
 na zápis nevyskytujú.
 
 Trieda GRobot a všetky triedy tohto balíčka obsahujú
 definície veľkého množstvo takzvaných  aliasov.
 Aliasy sú presne tým, čo slovo „alias“ vyjadruje – prezývkami. Potreba
 ich vzniku vyplynula z častých (často zbytočných) drobných omylov (kvázi
 „preklepov“) začínajúcich programátorov pri používaní robota (resp.
 jazykov akým je Logo). Tie súviseli s nejednoznačnosťou (slovenského)
 jazyka, v ktorom jestvuje množstvo synoným (v slovenčine sú to napríklad:
 dopredu, vpred, dozadu, vzad a podobne). Časom bolo jasné, že na všetko
 nebude možné vytvoriť alias, preto po dosiahnutí určitej úrovne nasýtenia
 už ďalšie aliasy (v súvislosti s riešením synoným) nevznikali.
 
 
 
 Alias vo väčšine prípadov iba volá originálnu metódu (resp. kopíruje
 správanie originálnej triedy, keďže aliasom môže byť i celá trieda).
 Z technického pohľadu to mierne zvyšuje režijné náklady na činnosť
 programu, preto i skúsenejším programátorom odporúčame používať vždy
 originálne metódy, nie aliasy. Rovnako, v súvislosti s aliasmi tried,
 originálne triedy a ich použitie v rôznych kontextoch je podrobnejšie
 testované. Aj preto odporúčame používať originály.
 
 Každý slovenský identifikátor s diakritikou má tiež definovaný alias
 bez diakritiky, aby bolo rámec možné používať aj bez používania
 diakritiky (z historických dôvodov). Je však nevyhnutné byť pri používaní
 alebo nepoužívaní diakritiky jednotnotný: inak povedané, buď používať
 diakritiku dôsledne, alebo vôbec. Kritické sú prípady priradenia inštancie
 s diakritikou do premennej typu bez diakritiky. Nasledujúci riadok kódu
 nie je preložiteľný:
 
 
PolozkaPonuky položka = new PoložkaPonuky("Položka");
 
 Rovnako nie je použiteľný žiadny identifikátor s čiastočne použitou
 diakritikou (napríklad Priehľadnost alebo Priehladnosť).
 O problémoch s diakritikou v krátkosti informujeme aj
 v úvodnom slove.
 
 
 
 História
 
 Tento programovací rámec (angl. framework) vznikol postupným vývojom
 a rozširovaním malého projektu, ktorý sa spočiatku volal
 Korytnačka, medzitým chvíľu niesol beta označenie Želva
 (táto verzia nebola nikdy publikovaná), potom bol premenovaný na Skupinu
 tried grafického robota, potom na Knižnicu grafického robota, ktorá bola
 nakoniec pretransformovaná na tento programovací rámec.
 
 Ako mohol názov pôvodnej triedy (Korytnačka) zasväteným
 našepkať, počiatky tohto projektu čerpali inšpiráciu aj z filozofie
 programovacieho jazyka 
Logo a jeho pokračovateľov… 
 href="https://en.wikipedia.org/wiki/Logo_(programming_language)"
Logo je programovací jazyk používaný vo výučbe. Keďže
 originál jazyka je určený pre anglicky hovoriace deti a študentov, vzniká
 po svete množstvo jazykových mutácií. Spomeňme dve najdôležitejšie
 v slovenskom jazyku: 
Comenius Logo a úspešného pokračovateľa 
Imagine. Vo svete 
 href="https://en.wikipedia.org/wiki/Logo_(programming_language)"
Loga ide o programovanie kresliacej korytnačky, takže
 učiaci sa môže hneď vidieť výsledky svojho úsilia. Z toho je odvodený
 termín „korytnačia grafika.“ Svet grafického robota sa usiluje tieto
 princípy poskytnúť pre začínajúcich (i pokročilých) programujúcich
 v programovacom jazyku Java. Pozrime sa na stručnú históriu vývoja
 trošku podrobnejšie.
 
 Začalo sa to vývojom triedy Korytnačka niekedy v auguste roku
 2010. Prvé verzie triedy Korytnačka (približne do verzie 4.0)
 boli významnou mierou inšpirované triedou Turtle autora Alfreda
 Herma (Odkaz: Alfred Hermes, Turtle class, 6a, 14.12.2003,
 English), ktorá je súčasťou balíka 
BlueJ. Boli jej
 rozšírením a dá sa povedať, že s ňou boli spätne kompatibilné.
 
 Ďalšie verzie sa od pôvodnej idey značne odchýlili, preto nebola
 deklarovaná spätná kompatibilita s pôvodnou triedou Turtle, ani
 prvými verziami korytnačky. Takže môžeme povedať, že približne od verzie
 4.0, ktorá vznikala niekedy koncom zimného semestra akademického roka
 2010/2011, sa začal vývoj samostatnej triedy Korytnačka, ktorá už
 nebola postavená na jadre pôvodnej triedy Turtle.
 
 Na stránkach univerzity v Princetone (Zdroj: 
https://introcs.cs.princeton.edu/java/stdlib/)
 
 sme našli našli knižnicu pre študentov pozostávajúcu zo 17 tried. Z nich
 nás zaujala trieda Draw, v ktorej sme našli cenné poznatky
 o práci s grafikou v Jave. S využitím týchto informácií sme začali
 budovať novú sériu korytnačiek (beta verzia nového radu bola vyvíjaná
 pod pracovným názvom Želva a bola už postavená na triedach
 s príponou 2D – napríklad Graphics2D…). Postupne
 pribúdali nové a nové vnorené triedy (niekedy nazývané aj zahniezdené
 triedy, angl. 
nested classes) a do stavu s funkčnou lúkou, oblohou,
 súbormi, udalosťami, automatickým časovačom a tak ďalej, sa trieda
 postupne prepracovávala od verzie 5.0 vyššie.
 
 Priebežne prechádzala výraznými úpravami, nie všetky čiastkové verzie
 boli publikované. Od verzie 6.9 boli k dispozícii aliasy všetkých metód
 a vlastností aj bez diakritiky. Táto verzia však nikdy neopustila
 súkromie prostredia svojho vzniku. Priniesla množstvo novej
 funkcionality, ďalšie vnorené triedy, nové metódy, zavrhla niektoré
 staršie koncepty, iné ponechala… Tým sa spätná kompatibilita opäť
 výrazne porušila.
 
 Verzia korytnačky 7.0 už trieda „neuniesla“ svoje meno a na jej báze
 vznikol nový projekt. Keďže študenti (neznalí histórie Loga) mali veľa
 otázok v súvislosti s pomenovaním a fungovaním takto pomenovanej triedy
 (Korytnačka – ako to, že kreslí – učíte nás, že názvy majú byť
 výstižné…) a i samotná postupne sa rozrastajúca korytnačka sa od
 pôvodného konceptu pridŕžajúceho sa logovskej jednoduchosti značne
 odchýlila, rozhodli sme sa, že zmena názvu a založenie nového projektu
 novému konceptu iba prospeje.
 
 Testovanie prvej beta verzie triedy Robot 0.6 sa začalo
 koncom augusta 2011 – rok po začatí vývoja pôvodnej korytnačky. Koncom
 septembra, po rozsiahlych úpravách a revíziách, prekročila verzia číslo
 0.8 (pričom sme sa rozhodli, že verzia 1.0 bude priradená až prvej úplnej
 a riadne otestovanej verzii triedy Robot; vo verzii 0.8 stále
 chýbala definícia jednej triedy). V januári 2013 bola ústredná trieda
 premenovaná na GRobot. Keďže nešlo o výraznú zmenu názvu,
 číslovanie verzií bolo ponechané. Dôvody a dôsledky sú uvedené v 
zozname zmien (pri čísle verzie 1.33)…
 
 Ďalší z významných zlomov nastal na sklonku roka 2015. Knižnica bola
 rozdelená na viacero samostatných súborov a presunutá do balíčka s názvom
 knižnica. Tým sa pôvodná knižnica priblížila ku korektnému
 prístupu tvorby programovacích rámcov (angl. framework) v jazyku Java.
 Tým sa však transformácia neskončila a významný prerod zaznamenala až
 v roku 2018, kedy boli všetky pôvodné aj novšie vnorené triedy (okrem
 jednej – Spojnica) presunuté na vyššiu úroveň v zmysle
 ich transformácie na samostatné triedy balíčka (aj keď v rámci balíčka
 zostali stále úzko prepojené) a knižnica (vtedy vo verzii 1.85) bola
 premenovaná na programovací rámec s číslom verzie 2.0.
 
 Transformácia bola dlho odkladaná, pretože po pôvodnom (počiatočnom)
 rozhodnutí umiestniť „všetko do jediného súboru“ bolo veľmi komplikované
 hľadať cestu späť. Preto pôvodná knižnica veľmi dlho zotrvávala v jednom
 súbore. S nárastom jej objemu počas jej vývoja narastal aj počet
 vnútorných prepojení, ktoré o to viac odďaľovali jej rozdelenie. Autor
 dokonca zvažoval zanechať po určitom čase túto vývojovú líniu
 projektu GRobot a začať vývoj úplne novej verzie umiestnenej
 v balíčku a rozdelenej do samostatných súborov úplne od začiatku. Lenže
 časová náročnosť takéhoto opätovného napísania celého rámca (v tom čase
 zvaného knižnicou) tento postup nedovolila. Preto sa vývoj novej línie
 nezačal a namiesto toho boli niektoré zmeny a kroky súvisiace s ďalším
 vylepšovaním programovacieho rámca vykonané priamo v tejto línii.
 
  
 
 Poznámka: Na úplnosť dodajme, že pôvodný spôsob
 umiestnenia celej skupiny tried do jedného súboru malo jedno rýdzo
 pragmatické odôvodnenie. V tom čase autor úplne zavrhoval distribúciu
 predchodcov tohto rámca vo forme .jar balíčka a tiež nejestvoval
 
generátor projektov. Študenti si museli vytvárať
 projekty sami a do každého nového projektu museli skopírovať celý obsah
 skupiny tried (v tom čase ešte korytnačky). Vzhľadom na prvé systematicky
 sa opakujúce skúsenosti získané ešte počas používania predchádzajúcej
 pomôcky (ktorou bola trieda Konzola – jej účelom bolo predovšetkým
 zjednodušiť čítanie hodnôt zo štandardného vstupu, ktorým je predvolene
 klávesnica, a jej funkcionalitu GRobot absorboval s miernou transformáciou
 k svojim potrebám) bolo najjednoduchším riešením poskytnúť jediný
 nezbalený súbor na prevzatie, ktorý študenti jednoducho a priamo (bez
 rozbaľovania, bez komplikácií) umiestnili do priečinka s novým projektom.
 Z hľadiska princípov tvorby softvéru je tento dôvod určite absurdný, lenže
 tento softvér bol pôvodne primárne tvorený na účely výučby a tomuto cieľu
 podliehalo všetko, čo s projektom súviselo.
 
  
 
 
 
 Ďalšia odporúčaná študijná literatúra
 
 
 
 1.Keogh, James: Java bez předchozích
 znalostí – průvodce pro samouky. 1. vyd. Brno : Computer Press,
 2005. ISBN 80-251-0839-2.
 
 2.Kalaš, Ivan a kol.: Informatika
 pre stredné školy. Bratislava : SPN, 2001.
 ISBN 80-08-01518-7.
 
 3.Zajacová, Katarína: Základy
 programovania. Trnava : 2010. [online]. Dostupné na: 
http://cec.truni.sk/zajacova/2010_ZP_Java/index.html. Citované: 2010 –
 2012.
 
 4.Hudeková, Dominika: Zbierka úloh
 v Jave. Trnava : 2012. [online]. Dostupné na: 
http://cec.truni.sk/hudekova/2012_ZU_Java/index.html. Citované: 2012 –
 2014.
 
 5.Hudeková, Dominika – Novák, Lukáš:
 Java – programovací jazyk pre pokročilých programátorov + Java ako
 prvý programovací jazyk. Trnava : 2014. [online]. Dostupné na: 
http://cec.truni.sk/hudekova/2014_EU_Java/. Citované: 2014 –
 2016.
 
 
 
 Študijná literatúra v anglickom jazyku
 
 
 
 1.Barnes, J. David – Kölling, Michael:
 Objects First with Java: A Practical Introduction Using BlueJ:
 International Edition. 5/E. Canterbury, Kent : University of Kent,
 2012. ISBN 978-013-283554-1.
 
 2.The Java Tutorials (Learning the Java
 Language). Oracle, 1995, 2015. [online]. Dostupné na:
 
https://docs.oracle.com/javase/tutorial/. Citované: 2015 –
 2016.
 
 3.Java Platform Standard Edition 8
 Documentation. Oracle. [online]. Dostupné na:
 
https://docs.oracle.com/javase/8/docs/. Citované: 2014 –
 2016.
 
 
 
 Od verzie 1.0 vyššie je pravidelne aktualizovaný
 zoznam zmien.
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
GRobot.Spojnica
Táto trieda slúži na uchovávanie a prístup k vlastnostiam
 čiarových spojníc, ktoré sú definovateľné medzi robotmi.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static Plátno
podlaha
Reprezentácia podlahy tohto sveta.
static Schránka
schranka
 Alias pre schránka.
static Schránka
schránka
Statická inštancia triedy Schránka, ktorá
 umožňuje pracovať so schránkou operačného systému.
static Plátno
strop
Reprezentácia stropu tohto sveta.
Súbor
subor
 Alias pre súbor.
Súbor
súbor
Každý robot smie otvoriť jeden textový (prípadne konfiguračný)
 súbor na čítanie alebo zápis.
static Svet
svet
Rámec hlavného okna aplikácie.
static SVGPodpora
svgPodpora
Statická inštancia triedy SVGPodpora, ktorá
 zastrešuje podporu importu a exportu vektorových tvarov vo formáte
 SVG.
Atribúty zdedené z rozhrania Poloha
stred
Atribúty zdedené z rozhrania Smer
JUH, JUHOVYCHOD, JUHOVÝCHOD, JUHOZAPAD, JUHOZÁPAD, SEVER, SEVEROVYCHOD, SEVEROVÝCHOD, SEVEROZAPAD, SEVEROZÁPAD, VYCHOD, VÝCHOD, ZAPAD, ZÁPAD
Atribúty zdedené z rozhrania Farebnosť
akvamarinova, akvamarínová, antracitova, antracitová, atramentova, atramentová, biela, cervena, cierna, červená, čierna, fialova, fialová, hneda, hnedá, modra, modrá, nebeska, nebeská, oranzova, oranžová, papierova, papierová, preddefinovaneFarby, preddefinovanéFarby, purpurova, purpurová, ruzova, ružová, seda, siva, sivá, snehova, snehová, svetlaNebeska, svetláNebeská, svetloakvamarinova, svetloakvamarínová, svetloatramentova, svetloatramentová, svetlocervena, svetločervená, svetlofialova, svetlofialová, svetlohneda, svetlohnedá, svetlomodra, svetlomodrá, svetlooranzova, svetlooranžová, svetlopurpurova, svetlopurpurová, svetloruzova, svetloružová, svetloseda, svetlosiva, svetlosivá, svetlošedá, svetlotyrkysova, svetlotyrkysová, svetlozelena, svetlozelená, svetlozlta, svetložltá, šedá, tmavaNebeska, tmaváNebeská, tmavoakvamarinova, tmavoakvamarínová, tmavoatramentova, tmavoatramentová, tmavocervena, tmavočervená, tmavofialova, tmavofialová, tmavohneda, tmavohnedá, tmavomodra, tmavomodrá, tmavooranzova, tmavooranžová, tmavopurpurova, tmavopurpurová, tmavoruzova, tmavoružová, tmavoseda, tmavosiva, tmavosivá, tmavošedá, tmavotyrkysova, tmavotyrkysová, tmavozelena, tmavozelená, tmavozlta, tmavožltá, tyrkysova, tyrkysová, uhlikova, uhlíková, zelena, zelená, ziadna, zlta, žiadna, žltá
Atribúty zdedené z rozhrania Priehľadnosť
NEPRIEHLADNA, NEPRIEHĽADNÁ, NEPRIEHLADNE, NEPRIEHĽADNÉ, NEPRIEHLADNY, NEPRIEHĽADNÝ, NEVIDITELNA, NEVIDITEĽNÁ, NEVIDITELNE, NEVIDITEĽNÉ, NEVIDITELNY, NEVIDITEĽNÝ
Atribúty zdedené z rozhrania Konštanty
ANO, ÁNO, CAKAT, CISELNA_PREMENNA, CITANIE_GIF_ANIMACIE, CITANIE_PNG_SEKVENCIE, ČAKAŤ, ČÍSELNÁ_PREMENNÁ, ČÍTANIE_GIF_ANIMÁCIE, ČÍTANIE_PNG_SEKVENCIE, FAREBNA_PREMENNA, FAREBNÁ_PREMENNÁ, HORIZONTALNA, HORIZONTÁLNA, CHYBA_CITANIA_PNG_SEKVENCIE, CHYBA_CITANIA_SKRIPTU, CHYBA_ČÍTANIA_PNG_SEKVENCIE, CHYBA_ČÍTANIA_SKRIPTU, CHYBA_DVOJITA_MENOVKA, CHYBA_DVOJITÁ_MENOVKA, CHYBA_CHYBAJUCA_MENOVKA, CHYBA_CHÝBAJÚCA_MENOVKA, CHYBA_CHYBNA_STRUKTURA, CHYBA_CHYBNÁ_ŠTRUKTÚRA, CHYBA_NEZNAMA_MENOVKA, CHYBA_NEZNÁMA_MENOVKA, CHYBA_NEZNAME_MENO, CHYBA_NEZNÁME_MENO, CHYBA_NEZNAME_SLOVO, CHYBA_NEZNÁME_SLOVO, CHYBA_NEZNAMY_PRIKAZ, CHYBA_NEZNÁMY_PRÍKAZ, CHYBA_VOLANIA_SKRIPTU, CHYBA_VYKONANIA_PRIKAZU, CHYBA_VYKONANIA_PRÍKAZU, KOPIROVANIE_SUBOROV, KOPÍROVANIE_SÚBOROV, KRESLI_CENTROVANE, KRESLI_CENTROVANÉ, KRESLI_NA_STRED, KRESLI_PRIAMO, KRESLI_ROTOVANE, KRESLI_ROTOVANÉ, KRESLI_V_SMERE, LAVE, ĽAVÉ, mainDeveloper, mainDeveloperTitled, majorVersion, minorVersion, NIE, ODOVZDANIE_UDAJOV, ODOVZDANIE_ÚDAJOV, ODRAZ, ODRAZENIE, ODRAZIT, ODRAZIŤ, OPLOTENIE, OPLOTIT, OPLOTIŤ, PLOT, POLOHOVA_PREMENNA, POLOHOVÁ_PREMENNÁ, POROVNANIE_SUBOROV, POROVNANIE_SÚBOROV, PRAVE, PRAVÉ, PRERUSIT, PRERUŠIŤ, PRETOC, PRETOCENIE, PRETOCIT, PRETOČ, PRETOČENIE, PRETOČIŤ, PREVZATIE_UDAJOV, PREVZATIE_ÚDAJOV, PRIPAJANIE_SUBOROV, PRIPÁJANIE_SÚBOROV, RETAZCOVA_PREMENNA, REŤAZCOVÁ_PREMENNÁ, riadok, SPOSOB_DEAKTIVACIA, SPOSOB_ENTER, SPOSOB_ESCAPE, SPOSOB_SHIFT_TAB, SPOSOB_SHIFT_TABULATOR, SPOSOB_TAB, SPOSOB_TABULATOR, SPÔSOB_DEAKTIVÁCIA, SPÔSOB_ENTER, SPÔSOB_ESCAPE, SPÔSOB_SHIFT_TAB, SPÔSOB_SHIFT_TABULÁTOR, SPÔSOB_TAB, SPÔSOB_TABULÁTOR, STREDNE, STREDNÉ, UKONCENIE_CHYBOU, UKONCENIE_SKRIPTU, UKONČENIE_CHYBOU, UKONČENIE_SKRIPTU, versionNote, versionString, VERTIKALNA, VERTIKÁLNA, VODOROVNA, VODOROVNÁ, VYKONAT_PRIKAZ, VYKONAŤ_PRÍKAZ, VYPISAT_MENOVKU, VYPÍSAŤ_MENOVKU, VYPISAT_MENOVKY, VYPÍSAŤ_MENOVKY, VYPISAT_PREMENNE, VYPÍSAŤ_PREMENNÉ, VYPISAT_PRIKAZ, VYPÍSAŤ_PRÍKAZ, VYPISAT_RIADOK, VYPÍSAŤ_RIADOK, VYPISAT_SKRIPT, VYPÍSAŤ_SKRIPT, years, yearsMonths, ZABRANIT_VYKONANIU, ZABRÁNIŤ_VYKONANIU, ZAPIS_GIF_ANIMACIE, ZÁPIS_GIF_ANIMÁCIE, ZAPIS_PNG_SEKVENCIE, ZÁPIS_PNG_SEKVENCIE, ZAVRETE, ZAVRETÉ, ZIADNA_CHYBA, ZIADNE, ZRUSIT, ZRUŠIŤ, ZVISLA, ZVISLÁ, ŽIADNA_CHYBA, ŽIADNE
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
GRobot()
Predvolený konštruktor nastavujúci predvolené vlastnosti robota.
GRobot(int nováMaximálnaŠírka,
      int nováMaximálnaVýška)
Konštruktor umožňujúci stanovenie iných rozmerov kresliacich
 plátien (podlahy a stropu) než predvolená.
GRobot(int nováMaximálnaŠírka,
      int nováMaximálnaVýška,
      String novýTitulok)
Konštruktor umožňujúci stanovenie iných rozmerov kresliacich
 plátien (podlahy a stropu) než je predvolená a zmenu titulku
 hlavného okna aplikácie sveta.
GRobot(String novýTitulok)
Konštruktor umožňujúci zmenu titulku okna aplikácie sveta.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
aktivacia()
 Alias pre aktivácia.
void
aktivácia()
Táto metóda je predvolene prázdna.
void
aktivaciaOdkazu()
 Alias pre aktiváciaOdkazu.
void
aktiváciaOdkazu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
aktivaciaOkna()
 Alias pre aktiváciaOkna.
void
aktiváciaOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
aktivita()
Táto metóda je predvolene prázdna.
boolean
aktivny()
 Alias pre aktívny.
boolean
aktívny()
Overí, či je tento robot aktívny.
void
aktivuj()
Aktivuje robot a spustí časovač (ak je nečinný).
void
aktivuj(boolean ajČasovač)
Metóda má rovnaký účel ako metóda aktivuj() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak nie je v činnosti).
void
aktivuj(int trvanieAktivity)
Metóda má rovnaký účel ako metóda aktivuj(), ibaže dovoľuje programátorovi určiť trvanie
 aktivity.
void
aktivuj(int trvanieAktivity,
       boolean ajČasovač)
Metóda spája funkcionalitu metód aktivuj(trvanieAktivity) a aktivuj(ajČasovač).
void
bod()
Nakreslí na aktuálnej pozícii robota bod alebo skupinu bodov
 (kruhovú oblasť) podľa aktuálnej hrúbky pera, najmenej však
 oblasť s veľkosťou jedného pixela.
boolean
bodV(double súradnicaBoduX,
    double súradnicaBoduY)
 Alias pre bodVKruhu.
boolean
bodV(Poloha objekt)
 Alias pre bodVKruhu.
boolean
bodVCeste(double súradnicaBoduX,
         double súradnicaBoduY)
Zistí, či sa aktuálne súradnice zadaného bodu nachádzajú
 v uzavretej oblasti cesty, ktorá bola zaznamenaná kreslením
 aktuálneho robota od posledného použitia metódy začniCestu.
boolean
bodVCeste(Poloha objekt)
Funguje rovnako ako metóda bodVCeste(x, y), len namiesto súradníc bodu je použitá poloha
 zadaného objektu…
boolean
bodVElipse(double súradnicaBoduX,
          double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi odvodenými z veľkosti robota a vlastnosti robota pomer.
boolean
bodVElipse(double súradnicaBoduX,
          double súradnicaBoduY,
          double pomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi odvodenými z veľkosti robota a zadaného pomeru strán.
boolean
bodVElipse(double súradnicaBoduX,
          double súradnicaBoduY,
          double a,
          double b)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi zadaných poloosí.
boolean
bodVElipse(Poloha objekt)
Funguje rovnako ako metóda bodVElipse(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVElipse(Poloha objekt,
          double pomer)
Funguje rovnako ako metóda bodVElipse(x, y, pomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVElipse(Poloha objekt,
          double a,
          double b)
Funguje rovnako ako metóda bodVElipse(x, y, a, b), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
boolean
bodVHviezde(double súradnicaBoduX,
           double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom podľa veľkosti
 robota.
boolean
bodVHviezde(double súradnicaBoduX,
           double súradnicaBoduY,
           double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom udaným polomerom opísanej kružnice.
boolean
bodVHviezde(Poloha objekt)
Funguje rovnako ako metóda bodVHviezde(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVHviezde(Poloha objekt,
           double polomer)
Funguje rovnako ako metóda bodVHviezde(x, y, polomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
boolean
bodVKruhu(double súradnicaBoduX,
         double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu
 s polomerom veľkosti robota
 a stredom na aktuálnej pozícii robota.
boolean
bodVKruhu(double súradnicaBoduX,
         double súradnicaBoduY,
         double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu so
 zadaným polomerom stredom na aktuálnej pozícii robota.
boolean
bodVKruhu(Poloha objekt)
Funguje rovnako ako metóda bodVKruhu(x, y), len namiesto súradníc bodu je použitá
 poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVKruhu(Poloha objekt,
         double polomer)
Funguje rovnako ako metóda bodVKruhu(x, y, polomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
boolean
bodVObdlzniku(double súradnicaBoduX,
             double súradnicaBoduY)
 Alias pre bodVObdĺžniku.
boolean
bodVObdlzniku(double súradnicaBoduX,
             double súradnicaBoduY,
             double pomer)
 Alias pre bodVObdĺžniku.
boolean
bodVObdlzniku(double súradnicaBoduX,
             double súradnicaBoduY,
             double a,
             double b)
 Alias pre bodVObdĺžniku.
boolean
bodVObdlzniku(Poloha objekt)
 Alias pre bodVObdĺžniku.
boolean
bodVObdlzniku(Poloha objekt,
             double pomer)
 Alias pre bodVObdĺžniku.
boolean
bodVObdlzniku(Poloha objekt,
             double a,
             double b)
 Alias pre bodVObdĺžniku.
boolean
bodVObdĺžniku(double súradnicaBoduX,
             double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
boolean
bodVObdĺžniku(double súradnicaBoduX,
             double súradnicaBoduY,
             double pomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru strán.
boolean
bodVObdĺžniku(double súradnicaBoduX,
             double súradnicaBoduY,
             double a,
             double b)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi udanými ako poloosi vpísanej elipsy.
boolean
bodVObdĺžniku(Poloha objekt)
Funguje rovnako ako metóda bodVObdĺžniku(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVObdĺžniku(Poloha objekt,
             double pomer)
Funguje rovnako ako metóda bodVObdĺžniku(x, y, pomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVObdĺžniku(Poloha objekt,
             double a,
             double b)
Funguje rovnako ako metóda bodVObdĺžniku(x, y, a, b), len
 namiesto súradníc bodu je použitá poloha zadaného objektu…
boolean
bodVOblasti(double súradnicaBoduX,
           double súradnicaBoduY,
           Area oblasť)
Zistí, či sa súradnice zadaného bodu nachádzajú v zadanej
 oblasti, ktorá je na účely porovnania rotovaná podľa smeru
 robota (za východisko je považovaných 90°; odchýlka v kladom
 alebo zápornom smere náležite rotuje oblasť) a posunutá
 o súradnice robota na plátne (stred sa nachádza v bode [0, 0] –
 v strede plátna; ak je robot v strede plátna, poloha oblasti
 sa nezmení).
boolean
bodVOblasti(Poloha objekt,
           Area oblasť)
Funguje rovnako ako metóda bodVOblasti(x, y, oblasť), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
boolean
bodVoStvorci(double súradnicaBoduX,
            double súradnicaBoduY)
 Alias pre bodVoŠtvorci.
boolean
bodVoStvorci(double súradnicaBoduX,
            double súradnicaBoduY,
            double polomer)
 Alias pre bodVoŠtvorci.
boolean
bodVoStvorci(Poloha objekt)
 Alias pre bodVoŠtvorci.
boolean
bodVoStvorci(Poloha objekt,
            double polomer)
 Alias pre bodVoŠtvorci.
boolean
bodVoŠtvorci(double súradnicaBoduX,
            double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom podľa veľkosti
 robota.
boolean
bodVoŠtvorci(double súradnicaBoduX,
            double súradnicaBoduY,
            double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom udaným polomerom vpísanej kružnice.
boolean
bodVoŠtvorci(Poloha objekt)
Funguje rovnako ako metóda bodVoŠtvorci(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
boolean
bodVoŠtvorci(Poloha objekt,
            double polomer)
Funguje rovnako ako metóda bodVoŠtvorci(x, y, polomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
boolean
bodVPosobisku(double súradnicaBoduX,
             double súradnicaBoduY)
 Alias pre bodVPôsobisku.
boolean
bodVPosobisku(Poloha objekt)
 Alias pre bodVPôsobisku.
boolean
bodVPôsobisku(double súradnicaBoduX,
             double súradnicaBoduY)
Zistí, či sa aktuálne súradnice zadaného bodu nachádzajú
 v oblasti obdĺžnika, v rámci ktorého bolo zaznamenané
 kreslenie aktuálnym robotom.
boolean
bodVPôsobisku(Poloha objekt)
Funguje rovnako ako metóda bodVPôsobisku(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného robota…
boolean
bodVTvare(double súradnicaBoduX,
         double súradnicaBoduY,
         Shape tvar)
Zistí, či sa súradnice zadaného bodu nachádzajú v zadanom
 tvare[1].
boolean
bodVTvare(Poloha objekt,
         Shape tvar)
Funguje rovnako ako metóda bodVTvare(x, y, tvar), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
Shape
cesta()
Ukončí záznam cesty a vráti cestu ako tvar.
Shape
cestu()
 Alias pre cesta.
Shape
cesty()
 Alias pre cesta.
Stroke
ciara()
 Alias pre čiara.
void
ciara(Stroke nováČiara)
 Alias pre čiara.
Bod
ciel()
 Alias pre cieľ.
Bod
cieľ()
Vráti polohu naposledy definovaného cieľa.
void
ciel(double x,
    double y)
 Alias pre cieľ.
void
cieľ(double x,
    double y)
Zapne automatické smerovanie do cieľa.
void
ciel(double x,
    double y,
    boolean spusti)
 Alias pre cieľ.
void
cieľ(double x,
    double y,
    boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(x, y) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť robot automaticky
 spustený (aktivovaný).
void
ciel(double x,
    double y,
    boolean spusti,
    boolean zastavVCieli)
 Alias pre cieľ.
void
cieľ(double x,
    double y,
    boolean spusti,
    boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(x, y) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť robot automaticky
 spustený (aktivovaný) a či má
 zastaviť po dosiahnutí cieľa.
void
ciel(Poloha objekt)
 Alias pre cieľ.
void
cieľ(Poloha objekt)
Zapne automatické smerovanie do cieľa.
void
ciel(Poloha objekt,
    boolean spusti)
 Alias pre cieľ.
void
cieľ(Poloha objekt,
    boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(Poloha) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť tento robot automaticky
 spustený (aktivovaný).
void
ciel(Poloha objekt,
    boolean spusti,
    boolean zastavVCieli)
 Alias pre cieľ.
void
cieľ(Poloha objekt,
    boolean spusti,
    boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(Poloha) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť tento robot automaticky
 spustený (aktivovaný) a či má
 zastaviť po dosiahnutí cieľa.
void
ciel(Shape tvar)
 Alias pre cieľ.
void
cieľ(Shape tvar)
Zapne automatické smerovanie do cieľa, ktorý je určený
 stredom hraníc[1] zadaného tvaru Javy (Shape).
void
ciel(Shape tvar,
    boolean spusti)
 Alias pre cieľ.
void
cieľ(Shape tvar,
    boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(tvar) (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný).
void
ciel(Shape tvar,
    boolean spusti,
    boolean zastavVCieli)
 Alias pre cieľ.
void
cieľ(Shape tvar,
    boolean spusti,
    boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(tvar) (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný) a či má zastaviť po dosiahnutí
 cieľa.
boolean
cielAktivny()
 Alias pre cieľAktívny.
boolean
cieľAktívny()
Zistí, či je robot práve v režime smerovania do
 cieľa.
void
cielNaMys()
 Alias pre cieľNaMyš.
void
cielNaMys(boolean spusti)
 Alias pre cieľNaMyš.
void
cielNaMys(boolean spusti,
         boolean zastavVCieli)
 Alias pre cieľNaMyš.
void
cieľNaMyš()
Zapne automatické smerovanie do cieľa, ktorý bude určený
 aktuálnymi súradnicami myši.
void
cieľNaMyš(boolean spusti)
Metóda má rovnaký účel ako metóda cieľNaMyš() (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný).
void
cieľNaMyš(boolean spusti,
         boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľNaMyš() (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný) a či má zastaviť po dosiahnutí
 cieľa.
Farba
cielovaFarba()
 Alias pre cieľováFarba.
Farba
cieľováFarba()
 Číta cieľovú farbu robota.
void
cielovaFarba(Color nováFarba)
 Alias pre cieľováFarba.
void
cieľováFarba(Color nováFarba)
 Nastaví cieľovú farbu
 (a priehľadnosť) robota podľa použitého objektu
 Color (alebo odvodeného napr.
void
cielovaFarba(Farebnosť podľaObjektu)
 Alias pre cieľováFarba.
void
cieľováFarba(Farebnosť podľaObjektu)
Nastaví cieľovú farbu a priehľadnosť robota podľa zadaného
 objektu, ktorý musí byť implementáciou rozhrania Farebnosť.
Farba
cielovaFarba(int r,
            int g,
            int b)
 Alias pre cieľováFarba.
Farba
cieľováFarba(int r,
            int g,
            int b)
Nastaví cieľovú farbu robota podľa zadaných
 farebných zložiek.
Farba
cielovaFarba(int r,
            int g,
            int b,
            int a)
 Alias pre cieľováFarba.
Farba
cieľováFarba(int r,
            int g,
            int b,
            int a)
Nastaví cieľovú farbu robota a priehľadnosť robota podľa
 zadaných farebných zložiek a úrovne priehľadnosti.
Farba
cielovaFarbaDoma()
 Alias pre cieľováFarbaDoma.
Farba
cieľováFarbaDoma()
Zistí, ako sa mení cieľová farba po prechode robota
 domov.
void
cielovaFarbaDoma(Color nováFarba)
 Alias pre cieľováFarbaDoma.
void
cieľováFarbaDoma(Color nováFarba)
Zmení nastavenie cieľovej farby robota po jeho prechode
 domov.
void
cielovaFarbaDoma(Farebnosť podľaObjektu)
 Alias pre cieľováFarbaDoma.
void
cieľováFarbaDoma(Farebnosť podľaObjektu)
Zmení nastavenie cieľovej farby robota po jeho prechode
 domov.
Farba
cielovaFarbaDoma(int r,
                int g,
                int b)
 Alias pre cieľováFarbaDoma.
Farba
cieľováFarbaDoma(int r,
                int g,
                int b)
Nastaví cieľovú farbu robota po jeho
 prechode domov.
Farba
cielovaFarbaDoma(int r,
                int g,
                int b,
                int a)
 Alias pre cieľováFarbaDoma.
Farba
cieľováFarbaDoma(int r,
                int g,
                int b,
                int a)
Nastaví cieľovú farbu robota po jeho
 prechode domov.
double
cielX()
 Alias pre cieľX.
double
cieľX()
Vráti x-ovú súradnicu naposledy definovaného cieľa.
double
cielY()
 Alias pre cieľY.
double
cieľY()
Vráti y-ovú súradnicu naposledy definovaného cieľa.
void
citajKonfiguraciu(Súbor subor)
 Alias pre čítajKonfiguráciu.
void
citajZoSuboru(Súbor súbor)
 Alias pre čítajZoSúboru.
Stroke
čiara()
Vráti objekt typu Stroke vyjadrujúci
 vlastnosti aktuálnej čiary, ktorou robot kreslí.
void
čiara(Stroke nováČiara)
Podľa zadaného objekt typu Stroke
 nastaví novú čiaru, ktorou bude robot kresliť.
void
čítajKonfiguráciu(Súbor súbor)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
čítajZoSúboru(Súbor súbor)
Prečíta vlastnosti robota zo zadaného súboru.
GRobot.Spojnica
dajSpojnicu(GRobot cieľ)
Vráti inštanciu jestvujúcej spojnice medzi týmto a zadaným
 robotom alebo vráti hodnotu null, ak spojnica
 nejestvuje.
void
deaktivacia()
 Alias pre deaktivácia.
void
deaktivácia()
Táto metóda je predvolene prázdna.
void
deaktivaciaOkna()
 Alias pre deaktiváciaOkna.
void
deaktiváciaOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
deaktivuj()
Deaktivuje robot (napríklad po skončení trvania
 aktivity).
void
deaktivuj(boolean ajČasovač)
Metóda má rovnaký účel ako metóda deaktivuj() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak nie je v činnosti).
void
deaktivuj(int trvaniePasivity)
Metóda má rovnaký účel ako metóda deaktivuj(), ibaže dovoľuje programátorovi určiť trvanie
 pasivity.
void
deaktivuj(int trvaniePasivity,
         boolean ajČasovač)
Metóda spája funkcionalitu metód deaktivuj(trvaniePasivity) a deaktivuj(ajČasovač).
void
dokreslenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
dolava()
 Alias pre doľava.
void
doľava()
 Alias pre vľavo.
void
dolava(double uhol)
 Alias pre doľava.
void
doľava(double uhol)
 Alias pre vľavo.
double
domaX()
 Zistí aktuálnu x-ovú súradnicu
 domovskej pozície robota.
void
domaX(double x)
 Nastaví aktuálnu x-ovú súradnicu
 domovskej pozície robota.
double
domaY()
 Zistí aktuálnu y-ovú súradnicu
 domovskej pozície robota.
void
domaY(double y)
 Nastaví aktuálnu y-ovú súradnicu
 domovskej pozície robota.
void
domov()
Presunie robot „domov“ – na štartovaciu pozíciu
 a obráti ho predvoleným smerom.
void
domov(Častica častica)
Presne ako domov, len s tým rozdielom,
 že robotu nastaví novú štartovaciu pozíciu, smer
 a rozmer (resp. domovskú veľkosť a domovský pomer veľkosti
 robota).
void
domov(double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví nový štartovací smer.
void
domov(double novéXDoma,
     double novéYDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu.
void
domov(double novéXDoma,
     double novéYDoma,
     double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
void
domov(double novéXDoma,
     double novéYDoma,
     Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
void
domov(GRobot iný)
Prevezme všetky parametre domovskej pozície od zadaného
 robota a zároveň ich aplikuje.
void
domov(Poloha nováPolohaDoma)
Presne ako domov, len s tým rozdielom,
 že robotu nastaví novú štartovaciu pozíciu.
void
domov(Poloha nováPolohaDoma,
     double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
void
domov(Poloha nováPolohaDoma,
     Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
void
domov(Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví nový štartovací smer.
void
doprava()
 Alias pre vpravo.
void
doprava(double uhol)
 Alias pre vpravo.
void
dopredu()
Prikáže robotu, aby sa posunul v aktuálnom smere
 dopredu o hodnotu svojej veľkosti.
void
dopredu(double dĺžka)
Prikáže robotu, aby sa posunul dopredu o zadanú dĺžku
 v aktuálnom smere.
void
dosiahnutieCiela()
 Alias pre dosiahnutieCieľa.
void
dosiahnutieCieľa()
Táto metóda je predvolene prázdna.
void
dozadu()
 Alias pre vzad.
void
dozadu(double dĺžka)
 Alias pre vzad.
Zoznam&lt;Bod&gt;
draha()
 Alias pre dráha.
Zoznam&lt;Bod&gt;
dráha()
 Vráti zoznam bodov tvoriaci
 aktuálnu dráhu.
void
draha(Vector&lt;Bod&gt; nováDráha)
 Alias pre dráha.
void
dráha(Vector&lt;Bod&gt; nováDráha)
 Nastaví aktuálnu dráhu podľa zadaného
 zoznamu.
Shape
elipsa()
Nakreslí alebo vyplní na mieste robota elipsu pootočenú
 v smere robota s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru.
Shape
elipsa(double pomer)
Nakreslí alebo vyplní na mieste robota elipsu pootočenú
 v smere robota s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru.
Shape
elipsa(double a,
      double b)
Nakreslí alebo vyplní na mieste robota elipsu so zadanými
 rozmermi pootočenú v smere robota (predvolený smer robota je
 90°).
Shape
elipsu()
 Alias pre elipsa.
Shape
elipsu(double pomer)
 Alias pre elipsa.
Shape
elipsu(double a,
      double b)
 Alias pre elipsa.
Shape
elipsy()
 Alias pre elipsa.
Shape
elipsy(double pomer)
 Alias pre elipsa.
Shape
elipsy(double a,
      double b)
 Alias pre elipsa.
String
F(double číslo,
 int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
String
F(double číslo,
 int šírka,
 int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
Farba
farba()
 Číta farbu robota.
void
farba(Color nováFarba)
 Nastav farbu robota.
void
farba(Farebnosť podľaObjektu)
Nastaví farbu a priehľadnosť robota podľa zadaného
 objektu, ktorý musí byť implementáciou rozhrania Farebnosť.
Farba
farba(int r,
     int g,
     int b)
Nastav farbu robota.
Farba
farba(int r,
     int g,
     int b,
     int a)
Nastav farbu robota.
Color
farbaAktivnehoSlova(String slovo)
 Alias pre farbaAktívnehoSlova.
Color
farbaAktívnehoSlova(String slovo)
Táto metóda je predvolene prázdna, resp. predvolene vracia
 hodnotu null.
Farba
farbaBodu()
Zistí farbu bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí.
boolean
farbaBodu(Color farba)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná so zadanou farbou.
boolean
farbaBodu(Farebnosť objekt)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadaného objektu.
boolean
farbaBodu(int r,
         int g,
         int b)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
boolean
farbaBodu(int r,
         int g,
         int b,
         int a)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
Farba
farbaDoma()
Zistí, ako sa mení farba po prechode robota
 domov.
void
farbaDoma(Color nováFarba)
Nastaví alebo zruší ovplyvňovanie farby robota po jeho
 prechode domov.
void
farbaDoma(Farebnosť podľaObjektu)
Nastaví alebo zruší ovplyvňovanie farby robota po jeho
 prechode domov.
Farba
farbaDoma(int r,
         int g,
         int b)
Nastaví ovplyvňovanie farby robota po jeho
 prechode domov.
Farba
farbaDoma(int r,
         int g,
         int b,
         int a)
Nastaví ovplyvňovanie farby robota po jeho
 prechode domov.
Farba
farbaNaMysi()
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(int r,
           int g,
           int b)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(int r,
           int g,
           int b,
           int a)
 Alias pre farbaNaMyši.
Farba
farbaNaMyši()
Zistí farbu bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) na súradniciach myši.
boolean
farbaNaMyši(Color farba)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná so
 zadanou farbou.
boolean
farbaNaMyši(Farebnosť objekt)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadaného objektu.
boolean
farbaNaMyši(int r,
           int g,
           int b)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadanou prostredníctvom farebných zložiek.
boolean
farbaNaMyši(int r,
           int g,
           int b,
           int a)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
int
fazaDrahy()
 Alias pre fázaDráhy.
int
fázaDráhy()
Zistí aktuálnu fázu pohybu robota po dráhe.
void
fazaDrahy(int nováFáza)
 Alias pre fázaDráhy.
void
fázaDráhy(int nováFáza)
Zmení fázu pohybu robota po dráhe.
Graphics2D
grafika()
Vráti (na technické účely) aktuálny grafický objekt
 používaný týmto robotom.
Double
gyroskop()
Zistí aktuálny stav gyroskopického vyvažovania.
void
gyroskop(Double hodnota)
Nastaví novú hodnotu gyroskopického vyvažovania.
double[]
hraniceOhranicenia()
 Alias pre hraniceOhraničenia.
double[]
hraniceOhraničenia()
Táto metóda vráti pole hraníc alebo hodnotu null.
double
hrubkaCiary()
 Alias pre hrúbkaČiary.
void
hrubkaCiary(double nováHrúbka)
 Alias pre hrúbkaČiary.
Double
hrubkaCiaryDoma()
 Alias pre hrúbkaPeraDoma.
void
hrubkaCiaryDoma(Double nováHrúbka)
 Alias pre hrúbkaPeraDoma.
double
hrúbkaČiary()
 Čítaj hrúbku čiary pera robota.
void
hrúbkaČiary(double nováHrúbka)
 Nastav konkrétnu hrúbku čiary pera.
Double
hrúbkaČiaryDoma()
Zistí, ako sa mení hrúbka pera po prechode robota
 domov.
void
hrúbkaČiaryDoma(Double nováHrúbka)
Nastaví alebo zruší ovplyvňovanie hrúbky pera po prechode
 robota domov.
double
hrubkaPera()
 Alias pre hrúbkaPera.
double
hrúbkaPera()
 Čítaj hrúbku čiary pera robota.
void
hrubkaPera(double nováHrúbka)
 Alias pre hrúbkaPera.
void
hrúbkaPera(double nováHrúbka)
 Nastav konkrétnu hrúbku čiary pera.
Double
hrubkaPeraDoma()
 Alias pre hrúbkaPeraDoma.
Double
hrúbkaPeraDoma()
Zistí, ako sa mení hrúbka pera po prechode robota
 domov.
void
hrubkaPeraDoma(Double nováHrúbka)
 Alias pre hrúbkaPeraDoma.
void
hrúbkaPeraDoma(Double nováHrúbka)
Nastaví alebo zruší ovplyvňovanie hrúbky pera po prechode
 robota domov.
Shape
hviezda()
Nakreslí alebo vyplní na mieste robota hviezdu určenú rozmerom
 opísanej kružnice s polomerom veľkosti
 robota a obrátenú v smere robota.
Shape
hviezda(double polomer)
Nakreslí alebo vyplní na mieste robota päťcípu hviezdu určenú
 rozmerom opísanej kružnice a orientovanú v smere robota.
Shape
hviezdu()
 Alias pre hviezda.
Shape
hviezdu(double polomer)
 Alias pre hviezda.
Shape
hviezdy()
 Alias pre hviezda.
Shape
hviezdy(double polomer)
 Alias pre hviezda.
void
chod(double Δx,
    double Δy)
 Alias pre choď.
void
choď(double Δx,
    double Δy)
Prikáže robotu, aby sa posunul o zadané súradnice
 v horizontálnom a vertikálnom smere.
void
chod(Poloha poloha)
 Alias pre choď.
void
choď(Poloha poloha)
Prikáže robotu, aby sa posunul (prešiel) o súradnice,
 ktoré obsahuje zadaná inštancia polohy.
void
chodNa(double novéX,
      double novéY)
 Alias pre choďNa.
void
choďNa(double novéX,
      double novéY)
Prikáže robotu, aby prešiel na konkrétne súradnice na
 podlahe (strope).
void
chodNa(Poloha objekt)
 Alias pre choďNa.
void
choďNa(Poloha objekt)
Prikáže tomuto robotu, aby prešiel na polohu
 zadaného objektu.
void
chodNa(Shape tvar)
 Alias pre choďNa.
void
choďNa(Shape tvar)
Prikáže robotu, aby prešiel do stredu
 hraníc[1] zadaného tvaru.
void
chodNaCiel()
 Alias pre choďNaCieľ.
void
choďNaCieľ()
Prikáže robotu, aby na podlahe (strope) prešiel na
 aktuálne súradnice cieľa.
void
chodNaMys()
 Alias pre choďNaMyš.
void
choďNaMyš()
Prikáže robotu, aby na podlahe (strope) prešiel na
 aktuálne súradnice myši.
void
chodNaPoObluku(double x,
              double y)
 Alias pre choďNaPoOblúku.
void
choďNaPoOblúku(double x,
              double y)
Pohne robotom po oblúku do cieľového bodu určeného
 súradnicami [x, y] s ohľadom na aktuálne otočenie robota.
void
chodNaPoObluku(Poloha poloha)
 Alias pre choďNaPoOblúku.
void
choďNaPoOblúku(Poloha poloha)
Funguje rovnako ako choďNaPoOblúku(x, y), ale namiesto samostatných súradníc
 prijíma implementáciu rozhrania Poloha
 (napríklad Bod).
void
chodNaPootoceny(double x,
               double y,
               double uhol)
 Alias pre choďNaPootočený.
void
chodNaPootoceny(double x,
               double y,
               Smer smer)
 Alias pre choďNaPootočený.
void
chodNaPootoceny(Poloha poloha,
               double uhol)
 Alias pre choďNaPootočený.
void
chodNaPootoceny(Poloha poloha,
               Smer smer)
 Alias pre choďNaPootočený.
void
choďNaPootočený(double x,
               double y,
               double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
choďNaPootočený(double x,
               double y,
               Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
choďNaPootočený(Poloha poloha,
               double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
choďNaPootočený(Poloha poloha,
               Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
chodPoObluku()
 Alias pre choďPoOblúku.
void
choďPoOblúku()
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania a v prípade, že je položené
 pero, tak oblúk aj nakreslí.
void
chodPoObluku(boolean vpravo)
 Alias pre choďPoOblúku.
void
choďPoOblúku(boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania a v prípade, že je položené
 pero, tak oblúk aj nakreslí.
void
chodPoObluku(double uhol)
 Alias pre choďPoOblúku.
void
choďPoOblúku(double uhol)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol a v prípade, že je položené pero,
 tak oblúk aj nakreslí.
void
chodPoObluku(double uhol,
            boolean vpravo)
 Alias pre choďPoOblúku.
void
choďPoOblúku(double uhol,
            boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol a v prípade, že je položené pero,
 tak oblúk aj nakreslí.
void
chodPoObluku(double uhol,
            double polomer)
 Alias pre choďPoOblúku.
void
choďPoOblúku(double uhol,
            double polomer)
Pohne robotom po oblúku so zadaným polomerom o zadaný
 uhol a v prípade, že je položené pero, tak oblúk aj
 nakreslí.
void
chodPootoceny(double Δx,
             double Δy,
             double uhol)
 Alias pre choďPootočený.
void
chodPootoceny(double Δx,
             double Δy,
             Smer smer)
 Alias pre choďPootočený.
void
choďPootočený(double Δx,
             double Δy,
             double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol.
void
choďPootočený(double Δx,
             double Δy,
             Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol.
boolean
interaktivnyRezim()
 Alias pre interaktívnyRežim.
void
interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
boolean
interaktívnyRežim()
Zistí stav interaktívneho režimu pre tento robot.
void
interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre tento robot.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tohto robota dokonale zhoduje so
 zadanými súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tohto robota a poloha zadaného
 objektu dokonale zhodujú.
boolean
jeNad(GRobot ktorý)
 Alias pre somZa.
boolean
jePod(GRobot ktorý)
 Alias pre somPred.
boolean
jePred(GRobot ktorý)
 Alias pre somZa.
boolean
jePredvolenyTvarVyplneny()
 Alias pre jePredvolenýTvarVyplnený.
boolean
jePredvolenýTvarVyplnený()
Overí spôsob kreslenia predvoleného tvaru trojzubca.
boolean
jeRegistrovany()
 Alias pre jeRegistrovaný.
boolean
jeRegistrovaný()
Overí, či je tento robot registrovaný v konfigurácii sveta.
boolean
jeSpojnica(GRobot cieľ)
Zistí, či medzi týmto a zadaným robotom jestvuje spojnica
 smerujúca od tohto robota.
boolean
jeZa(GRobot ktorý)
 Alias pre somPred.
void
klavesovaSkratka()
 Alias pre klávesováSkratka.
void
klávesováSkratka()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
klik()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
boolean
koliduje(GRobot iný)
Zistí, či tento a zadaný robot vzájomne „kolidujú,“ t. j. či
 nastala ich vzájomná „zrážka“ alebo nie.
Oblast
koliznaOblast()
 Alias pre kolíznaOblasť.
Oblasť
kolíznaOblasť()
 Vráti objekt aktívnej kolíznej oblasti
 tohto robota alebo null, ak oblasť nebola definovaná.
void
koliznaOblast(Shape podľaTvaru)
 Alias pre kolíznaOblasť.
void
kolíznaOblasť(Shape podľaTvaru)
 S pomocou zadaného tvaru definuje
 novú kolíznu oblasť, ktorú bude od tohto okamihu využívať
 robot na detekciu kolízií s pomocou metódy koliduje.
boolean
konfiguraciaZmenena()
 Alias pre konfiguráciaZmenená.
boolean
konfiguráciaZmenená()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
koniecDrahy()
 Alias pre koniecDráhy.
void
koniecDráhy()
Táto metóda je predvolene prázdna.
void
koniecVstupu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
kopirujSpojnice(GRobot odKtorého)
 Alias pre kopírujSpojnice.
void
kopírujSpojnice(GRobot odKtorého)
Skopíruje (alebo aktualizuje) všetky spojnice podľa zadaného
 robota.
void
kracajPoDrahe()
 Alias pre kráčajPoDráhe.
boolean
kracamPoDrahe()
 Alias pre kráčamPoDráhe.
void
kracaniePoDrahe()
 Alias pre kráčaniePoDráhe.
void
kráčajPoDráhe()
Aktivuje robot a zaháji jeho pohyb po aktuálnej dráhe.
boolean
kráčamPoDráhe()
Metóda zistí, či sa robot práve nachádza v režime kráčania
 po dráhe.
void
kráčaniePoDráhe()
Táto metóda je predvolene prázdna.
boolean
kreslenieTvarovPovolene()
 Alias pre kreslenieTvarovPovolené.
boolean
kreslenieTvarovPovolené()
Zistí, či je kreslenie tvarov povolené alebo zakázané.
void
kresliCestu()
Ukončí záznam cesty a nakreslí zaznamenanú cestu aktuálnou
 farbou a hrúbkou čiary.
void
kresliDo(Shape tvar)
Obmedzí akékoľvek kreslenie na aktívne plátno robota (podlahu
 alebo strop) na plochu zadaného útvaru (Shape).
void
kresliDoObrazka(Obrázok obrázok)
 Alias pre kresliNaObrázok.
void
kresliDoObrázka(Obrázok obrázok)
 Alias pre kresliNaObrázok.
Shape
kresliElipsu()
Nakreslí na mieste robota elipsu pootočenú v smere robota
 s veľkosťou odvodenou od veľkosti
 robota podľa zadaného stranového pomeru
Shape
kresliElipsu(double pomer)
Nakreslí na mieste robota elipsu pootočenú v smere robota
 s veľkosťou odvodenou od veľkosti
 robota podľa zadaného stranového pomeru
Shape
kresliElipsu(double a,
            double b)
Nakreslí na mieste robota elipsu so zadanými rozmermi
 pootočenú v smere robota (predvolený smer robota je 90°)
Shape
kresliHviezdu()
Nakreslí na mieste robota hviezdu určenú rozmerom opísanej
 kružnice s polomerom veľkosti robota
 a obrátenú v smere robota
Shape
kresliHviezdu(double polomer)
Nakreslí na mieste robota päťcípu hviezdu určenú rozmerom
 opísanej kružnice a orientovanú v smere robota
Obrázok
kreslimDoObrazka()
 Alias pre kreslímNaObrázok.
Obrázok
kreslímDoObrázka()
 Alias pre kreslímNaObrázok.
boolean
kreslimDoObrazka(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
boolean
kreslímDoObrázka(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
Obrázok
kreslimNaObrazok()
 Alias pre kreslímNaObrázok.
Obrázok
kreslímNaObrázok()
Ak je kreslenie tohto robota presmerované do obrázka
 (inštancie triedy Obrázok), tak táto metóda
 túto inštanciu vráti.
boolean
kreslimNaObrazok(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
boolean
kreslímNaObrázok(Obrázok obrázok)
Zistí, či je kreslenie tohto robota presmerované do určeného
 obrázka.
boolean
kreslimNaPodlahu()
 Alias pre kreslímNaPodlahu.
boolean
kreslímNaPodlahu()
Overí, či tento robot kreslí na podlahu, teda, či je podlaha
 aktívnym plátnom robota.
boolean
kreslimNaStrop()
 Alias pre kreslímNaStrop.
boolean
kreslímNaStrop()
Overí, či tento robot kreslí na strop, teda, či je strop
 aktívnym plátnom robota.
void
kresliNaObrazok(Obrázok obrázok)
 Alias pre kresliNaObrázok.
void
kresliNaObrázok(Obrázok obrázok)
Presmeruje kreslenie tohto robota do určeného obrázka.
void
kresliNaPodlahu()
Po použití tejto metódy bude tento robot kresliť na plátno
 podlahy (predvolený stav).
void
kresliNaStrop()
Po použití tejto metódy bude tento robot kresliť na plátno
 stropu.
Shape
kresliObdlznik()
 Alias pre kresliObdĺžnik.
Shape
kresliObdlznik(double pomer)
 Alias pre kresliObdĺžnik.
Shape
kresliObdlznik(double a,
              double b)
 Alias pre kresliObdĺžnik.
Shape
kresliObdĺžnik()
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota
Shape
kresliObdĺžnik(double pomer)
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota
Shape
kresliObdĺžnik(double a,
              double b)
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota (predvolený smer robota je 90°)
void
kresliPosobisko()
 Alias pre kresliPôsobisko.
void
kresliPosobisko(boolean ánoNie)
 Alias pre kresliPôsobisko.
void
kresliPôsobisko()
Zvýrazní oblasť obdĺžnika – pôsobisko, v rámci ktorého robot
 kreslil od posledného vymazania
 pôsobiska alebo od posledného použitia niektorej
 z metód domov.
void
kresliPôsobisko(boolean ánoNie)
Zapne alebo vypne kreslenie tzv. pôsobiska – oblasti, v rámci
 ktorej robot kreslil od posledného
 vymazania pôsobiska alebo od
 posledného použitia niektorej z metód domov.
Shape
kresliStvorec()
 Alias pre kresliŠtvorec.
Shape
kresliStvorec(double polomer)
 Alias pre kresliŠtvorec.
Shape
kresliŠtvorec()
Nakreslí na mieste robota štvorec určený rozmerom vpísanej
 kružnice s polomerom veľkosti robota
 a obrátený v smere robota
Shape
kresliŠtvorec(double polomer)
Nakreslí na mieste robota štvorec určený rozmerom vpísanej
 kružnice a obrátený v smere robota
void
kresliTvar()
Táto metóda je predvolene prázdna.
Shape
kresliTvar(Shape tvar)
Nakreslí čiaru podľa zadaného tvaru (hrúbkou a farbou čiary
 nastavenou pre tento robot).
Shape
kresliTvar(Shape tvar,
          boolean upravRobotom)
Nakreslí čiaru podľa zadaného tvaru (hrúbkou a farbou čiary
 nastavenou pre tento robot).
void
kresliTvary()
Povolí kreslenie tvarov a písanie textov robotom (predvolený
 stav).
void
kresliUtvary()
 Alias pre kresliTvary.
void
kresliÚtvary()
 Alias pre kresliTvary.
void
kresliVsade()
 Alias pre kresliVšade.
void
kresliVšade()
Zruší oblasť na obmedzenie kreslenia na aktívne plátno
 (podlahu, strop alebo obrázok, do ktorého má robot
 presmerované kreslenie).
Shape
kruh()
Nakreslí na mieste robota kruh s polomerom veľkosti robota
Shape
kruh(double polomer)
Nakreslí na mieste robota kruh so zadaným polomerom
Shape
kruhu()
 Alias pre kruh.
Shape
kruhu(double polomer)
 Alias pre kruh.
Shape
kruzka()
 Alias pre krúžok.
Shape
kruzka(double polomer)
 Alias pre krúžok.
Shape
kruznica()
 Alias pre kružnica.
Shape
kruznica(double polomer)
 Alias pre kružnica.
Shape
kruznice()
 Alias pre kružnica.
Shape
kruznice(double polomer)
 Alias pre kružnica.
Shape
kruznicu()
 Alias pre kružnica.
Shape
kruznicu(double polomer)
 Alias pre kružnica.
Shape
kruzok()
 Alias pre krúžok.
Shape
kruzok(double polomer)
 Alias pre krúžok.
Shape
krúžka()
 Alias pre krúžok.
Shape
krúžka(double polomer)
 Alias pre krúžok.
Shape
kružnica()
Nakreslí na mieste robota kružnicu s polomerom veľkosti robota
Shape
kružnica(double polomer)
Nakreslí na mieste robota kružnicu so zadaným polomerom
Shape
kružnice()
 Alias pre kružnica.
Shape
kružnice(double polomer)
 Alias pre kružnica.
Shape
kružnicu()
 Alias pre kružnica.
Shape
kružnicu(double polomer)
 Alias pre kružnica.
Shape
krúžok()
Nakreslí na mieste robota kruh alebo kružnicu s polomerom
 veľkosti robota.
Shape
krúžok(double polomer)
Nakreslí na mieste robota kružnicu alebo kruh so zadaným
 polomerom.
Zoznam&lt;Double&gt;
mapaSmerov()
 Vráti zoznam hodnôt tvoriaci aktuálnu mapu
 smerov.
void
mapaSmerov(Vector&lt;Double&gt; nováMapaSmerov)
 Nastaví aktuálnu mapu smerov podľa zadaného
 zoznamu.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí, či sa rozmery robota dokonale zhodujú so zadanými
 rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí, či sa rozmery robota a rozmery zadaného objektu
 dokonale zhodujú.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
maSpojnicu(GRobot cieľ)
 Alias pre jeSpojnica.
boolean
máSpojnicu(GRobot cieľ)
 Alias pre jeSpojnica.
boolean
máŠírku(double šírka)
Zistí, či má robot zadanú šírku.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Zistí, či má robot zadanú výšku.
void
maximalizovanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
double
maximalnaRychlost()
 Alias pre maximálnaRýchlosť.
double
maximálnaRýchlosť()
 Zistí hodnotu maximálnej rýchlosti tohto
 robota.
void
maximalnaRychlost(double maximálnaRýchlosť)
 Alias pre maximálnaRýchlosť.
void
maximálnaRýchlosť(double maximálnaRýchlosť)
 Nastaví novú hodnotu maximálnej
 rýchlosti.
double
maximalnaRychlostOtacania()
 Alias pre maximálnaUhlováRýchlosť.
void
maximalnaRychlostOtacania(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
double
maximálnaRýchlosťOtáčania()
 Alias pre maximálnaUhlováRýchlosť.
void
maximálnaRýchlosťOtáčania(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
double
maximalnaRychlostPosunu()
 Alias pre maximálnaRýchlosťPosunu.
double
maximálnaRýchlosťPosunu()
 Zistí hodnotu maximálnej rýchlosti
 posunu tohto robota.
void
maximalnaRychlostPosunu(double maximálnaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
void
maximálnaRýchlosťPosunu(double maximálnaRýchlosťPosunu)
 Nastaví novú hodnotu maximálnej
 rýchlosti posunu.
double
maximalnaUhlovaRychlost()
 Alias pre maximálnaUhlováRýchlosť.
double
maximálnaUhlováRýchlosť()
 Zistí hodnotu maximálnej uhlovej
 rýchlosti (maximálnej rýchlosti otáčania) tohto robota.
void
maximalnaUhlovaRychlost(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
void
maximálnaUhlováRýchlosť(double maximálnaUhlováRýchlosť)
 Nastaví novú hodnotu maximálnej
 uhlovej rýchlosti (rýchlosti otáčania).
String
meno()
 Vráti meno robota alebo
 null ak robot nemá meno.
void
meno(String novéMeno)
 Pomenuje alebo zruší meno tohto
 robota.
double
mierka()
 Zistí aktuálnu hodnotu mierky robota.
void
mierka(double mierka)
 Upraví aktuálnu mierku robota.
double
mierkaPomeru()
 Zistí aktuálnu hodnotu mierky pomeru
 veľkosti robota.
void
mierkaPomeru(double mierka)
 Upraví aktuálnu mierku pomeru
 veľkosti tohto robota.
void
mimoHranic()
 Alias pre mimoHraníc.
void
mimoHraníc()
Táto metóda je predvolene prázdna.
boolean
mimoHranic(Bod[] poleBodov,
          double uhol)
 Alias pre mimoHraníc.
boolean
mimoHraníc(Bod[] poleBodov,
          double uhol)
Táto metóda je predvolene prázdna.
void
minimalizovanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
boolean
mysV()
 Alias pre myšVKruhu.
boolean
mysVCeste()
 Alias pre myšVCeste.
boolean
mysVElipse()
 Alias pre mysVElipse.
boolean
mysVElipse(double pomer)
 Alias pre mysVElipse.
boolean
mysVElipse(double a,
          double b)
 Alias pre mysVElipse.
boolean
mysVHviezde()
 Alias pre myšVHviezde.
boolean
mysVHviezde(double polomer)
 Alias pre myšVHviezde.
boolean
mysVKruhu()
 Alias pre myšVKruhu.
boolean
mysVKruhu(double polomer)
 Alias pre myšVKruhu.
boolean
mysVObdlzniku()
 Alias pre myšVObdĺžniku.
boolean
mysVObdlzniku(double pomer)
 Alias pre myšVObdĺžniku.
boolean
mysVObdlzniku(double a,
             double b)
 Alias pre myšVObdĺžniku.
boolean
mysVOblasti(Area oblasť)
 Alias pre myšVOblasti.
boolean
mysVoStvorci()
 Alias pre myšVoŠtvorci.
boolean
mysVoStvorci(double polomer)
 Alias pre myšVoŠtvorci.
boolean
mysVPosobisku()
 Alias pre myšVPôsobisku.
boolean
myšV()
 Alias pre myšVKruhu.
boolean
myšVCeste()
Zistí, či sa aktuálne súradnice myši nachádzajú v uzavretej
 oblasti cesty, ktorá bola zaznamenaná kreslením aktuálneho
 robota od posledného použitia metódy začniCestu.
boolean
myšVElipse()
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
boolean
myšVElipse(double pomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru poloosí.
boolean
myšVElipse(double a,
          double b)
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi zadaných poloosí.
boolean
myšVHviezde()
Zistí, či sa aktuálne súradnice myši nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom podľa veľkosti
 robota.
boolean
myšVHviezde(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v päťcípej
 hviezde so stredom na aktuálnej pozícii robota, rotovanej
 v smere robota a rozmerom udaným prostredníctvom polomeru
 opísanej kružnice.
boolean
myšVKruhu()
Zistí, či sa aktuálne súradnice myši nachádzajú v kruhu so
 stredom na aktuálnej pozícii robota a polomerom s veľkosťou robota.
boolean
myšVKruhu(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v kruhu so
 stredom na aktuálnej pozícii robota a zadaným polomerom.
boolean
myšVObdĺžniku()
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
boolean
myšVObdĺžniku(double pomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru strán.
boolean
myšVObdĺžniku(double a,
             double b)
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi udanými ako poloosi vpísanej elipsy.
boolean
myšVOblasti(Area oblasť)
Zistí, či sa aktuálne súradnice myši nachádzajú v zadanej
 oblasti, ktorá je na účely porovnania rotovaná podľa smeru
 robota (za východisko je považovaných 90°; odchýlka v kladom
 alebo zápornom smere náležite rotuje oblasť) a posunutá
 o súradnice robota na plátne (stred sa nachádza v bode [0, 0] –
 v strede plátna).
boolean
myšVoŠtvorci()
Zistí, či sa aktuálne súradnice myši nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom podľa veľkosti
 robota.
boolean
myšVoŠtvorci(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom udaným polomerom vpísanej kružnice.
boolean
myšVPôsobisku()
Zistí, či sa aktuálne súradnice myši nachádzajú v oblasti
 obdĺžnika, v rámci ktorého bolo zaznamenané kreslenie
 aktuálnym robotom.
void
nad(GRobot ktorého)
 Alias pre pred.
void
nahodnaFarba()
 Alias pre náhodnáFarba.
void
náhodnáFarba()
Zmení farbu robota na náhodnú.
void
nahodnaPoloha()
 Alias pre náhodnáPoloha.
void
náhodnáPoloha()
Umiestni robot na náhodnú pozíciu na aktívnom plátne
 alebo obrázku.
void
nahodnaPozicia()
 Alias pre náhodnáPoloha.
void
náhodnáPozícia()
 Alias pre náhodnáPoloha.
void
nahodnaVelkost(double miera)
 Alias pre náhodnáVeľkosť.
void
náhodnáVeľkosť(double miera)
Zmení veľkosť robota na náhodnú hodnotu v rozmedzí
 veľkosti, ktorú by mal pri hodnote mierky 1.0
 a násobkom tejto hodnoty o zadanú mieru.
void
nahodnyPomer(double miera)
 Alias pre náhodnýPomer.
void
náhodnýPomer(double miera)
Zmení pomer veľkosti robota na náhodnú hodnotu
 v rozmedzí pomeru veľkosti, ktorú by mal pri hodnote
 mierky pomeru 1.0 a násobkom tejto hodnoty
 o zadanú mieru.
void
nahodnyRozmer(double miera)
 Alias pre náhodnýRozmer.
void
náhodnýRozmer(double miera)
Zmení rozmer robota na náhodnú hodnotu v rozmedzí
 veľkosti a pomeru veľkosti, ktoré by mal pri hodnotách
 mierok veľkosti a pomeru veľkosti 1.0
 a násobkov týchto hodnôt o zadanú mieru.
void
nahodnyRozmer(double mieraVeľkosti,
             double mieraPomeru)
 Alias pre náhodnýRozmer.
void
náhodnýRozmer(double mieraVeľkosti,
             double mieraPomeru)
Zmení rozmer robota na náhodnú hodnotu v rozmedzí
 veľkosti a pomeru veľkosti, ktoré by mal pri hodnotách
 mierok veľkosti a pomeru veľkosti 1.0
 a násobkov týchto hodnôt o zadané miery prislúchajúcich
 údajov.
void
nahodnySmer()
 Alias pre náhodnýSmer.
void
náhodnýSmer()
Otočí robot náhodným smerom.
void
nahodnyUhol()
 Alias pre náhodnýSmer.
void
náhodnýUhol()
 Alias pre náhodnýSmer.
double
najvacsiaRychlost()
 Alias pre maximálnaRýchlosť.
void
najvacsiaRychlost(double najväčšiaRýchlosť)
 Alias pre maximálnaRýchlosť.
double
najvacsiaRychlostOtacania()
 Alias pre maximálnaUhlováRýchlosť.
void
najvacsiaRychlostOtacania(double najväčšiaRýchlosťOtáčania)
 Alias pre maximálnaUhlováRýchlosť.
double
najvacsiaRychlostPosunu()
 Alias pre maximálnaRýchlosťPosunu.
void
najvacsiaRychlostPosunu(double najväčšiaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
int
najvacsiaSirkaZnaku()
 Alias pre najväčšiaŠírkaZnaku.
double
najvacsiaUhlovaRychlost()
 Alias pre maximálnaUhlováRýchlosť.
void
najvacsiaUhlovaRychlost(double najväčšiaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
double
najväčšiaRýchlosť()
 Alias pre maximálnaRýchlosť.
void
najväčšiaRýchlosť(double najväčšiaRýchlosť)
 Alias pre maximálnaRýchlosť.
double
najväčšiaRýchlosťOtáčania()
 Alias pre maximálnaUhlováRýchlosť.
void
najväčšiaRýchlosťOtáčania(double najväčšiaRýchlosťOtáčania)
 Alias pre maximálnaUhlováRýchlosť.
double
najväčšiaRýchlosťPosunu()
 Alias pre maximálnaRýchlosťPosunu.
void
najväčšiaRýchlosťPosunu(double najväčšiaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
int
najväčšiaŠírkaZnaku()
Zistí najväčšiu šírku znaku v bodoch pri použití aktuálneho
 typu písma.
double
najväčšiaUhlováRýchlosť()
 Alias pre maximálnaUhlováRýchlosť.
void
najväčšiaUhlováRýchlosť(double najväčšiaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
void
naSpodok()
Presunie tento robot do pozadia s ohľadom na umiestnenie
 robotov do vrstiev.
Paint
nater()
 Alias pre náter.
Paint
náter()
Vráti objekt s aktuálnym druhom náteru, ktorý grafický
 robot používa na kreslenie (kreslenie čiar pera, vypĺňanie
 plôch a kreslenie obrysových čiar ním generovaných
 pečiatkových tvarov, kreslenie svojho predvoleného tvaru,
 prípadne iné).
void
nater(Paint novýNáter)
 Alias pre náter.
void
náter(Paint novýNáter)
Upraví druh náteru, ktorý grafický robot používa na kreslenie
 (kreslenie čiar pera, vypĺňanie plôch a kreslenie obrysových
 čiar ním generovaných pečiatkových tvarov, kreslenie svojho
 predvoleného tvaru, prípadne iné).
void
naVrch()
Presunie tento robot do popredia s ohľadom na umiestnenie
 robotov do vrstiev.
boolean
neaktivny()
 Alias pre neaktívny.
boolean
neaktívny()
Overí, či je tento robot neaktívny.
void
nekresliDo(Shape tvar)
Vytvára obmedzenie na kreslenie na aktívne plátno robota
 (podlahu, strop alebo obrázok, do ktorého má robot
 presmerované kreslenie).
void
nekresliPosobisko()
 Alias pre nekresliPôsobisko.
void
nekresliPôsobisko()
Skryje zvýraznenie oblasti pôsobiska, ktoré bolo zapnuté
 metódou kresliPôsobisko.
void
nekresliTvary()
Zakáže kreslenie tvarov (kružnice, elipsy,
 štvorca, obdĺžnika…) a písanie textu robotom, aby prislúchajúce metódy
 mohli byť využité na iné účely, napríklad na obmedzenie kreslenia.
void
nekresliUtvary()
 Alias pre nekresliTvary.
void
nekresliÚtvary()
 Alias pre nekresliTvary.
void
nepouziKruhovyNater()
 Alias pre nepoužiKruhovýNáter.
void
nepoužiKruhovýNáter()
Vypne používanie kruhového náteru výplne tvarov, ktorý
 by bol použitý v prípade nastavenia cieľovej farby robota.
void
nevyplnajTvary()
 Alias pre nevypĺňajTvary.
void
nevypĺňajTvary()
Upraví spôsob kreslenia tvarov generovaných robotom.
void
nevyplnajUtvary()
 Alias pre nevypĺňajTvary.
void
nevypĺňajÚtvary()
 Alias pre nevypĺňajTvary.
void
nezastavujPoSpomaleni()
 Alias pre nezastavujPoSpomalení.
void
nezastavujPoSpomalení()
Zruší príkaz robota, ktorý mu určoval, aby sa najbližšie,
 keď dosiahne nulovú rýchlosť automaticky zastavil.
void
nezastavujPoSpomaleniPosunu()
 Alias pre nezastavujPoSpomaleníPosunu.
void
nezastavujPoSpomaleníPosunu()
Zruší robotu príkaz, ktorý mu určoval, aby sa
 najbližšie, keď dosiahne nulovú rýchlosť posunu automaticky
 posun zastavil (s nastavením
 nulového zrýchlenia
 posunu).
void
nizsie()
 Alias pre nižšie.
void
nižšie()
Presunie tento robot o úroveň nižšie v rámci poradia
 kreslenia robotov s ohľadom na umiestnenie robotov do vrstiev.
void
novyDomov()
 Alias pre novýDomov.
void
novýDomov()
Zapamätá si aktuálnu pozíciu a smer ako nový domov.
void
novyDomov(Častica častica)
 Alias pre novýDomov.
void
novýDomov(Častica častica)
Nastaví domovskú polohu a smer robota podľa polohy
 a smeru zadanej častice.
void
novyDomov(double novýUholDoma)
 Alias pre novýDomov.
void
novýDomov(double novýUholDoma)
Nastaví robotu nový domovský smer.
void
novyDomov(double novéXDoma,
         double novéYDoma)
 Alias pre novýDomov.
void
novýDomov(double novéXDoma,
         double novéYDoma)
Nastaví robotu novú domovskú pozíciu.
void
novyDomov(double novéXDoma,
         double novéYDoma,
         double novýUholDoma)
 Alias pre novýDomov.
void
novýDomov(double novéXDoma,
         double novéYDoma,
         double novýUholDoma)
Nastaví robotu novú domovskú pozíciu a smer.
void
novyDomov(double novéXDoma,
         double novéYDoma,
         Smer novýSmerDoma)
 Alias pre novýDomov.
void
novýDomov(double novéXDoma,
         double novéYDoma,
         Smer novýSmerDoma)
Nastaví robotu novú domovskú pozíciu a smer.
void
novyDomov(GRobot iný)
 Alias pre novýDomov.
void
novýDomov(GRobot iný)
Prevezme všetky parametre domovskej pozície od zadaného
 robota.
void
novyDomov(Poloha nováPolohaDoma)
 Alias pre novýDomov.
void
novýDomov(Poloha nováPolohaDoma)
Nastaví robotu novú domovskú pozíciu.
void
novyDomov(Poloha nováPolohaDoma,
         double novýUholDoma)
 Alias pre novýDomov.
void
novýDomov(Poloha nováPolohaDoma,
         double novýUholDoma)
Nastaví robotu novú domovskú pozíciu a smer.
void
novyDomov(Poloha nováPolohaDoma,
         Smer novýSmerDoma)
 Alias pre novýDomov.
void
novýDomov(Poloha nováPolohaDoma,
         Smer novýSmerDoma)
Nastaví robotu novú domovskú pozíciu a smer.
void
novyDomov(Smer novýSmerDoma)
 Alias pre novýDomov.
void
novýDomov(Smer novýSmerDoma)
Nastaví robotu nový domovský smer.
Shape
obdlznik()
 Alias pre obdĺžnik.
Shape
obdlznik(double pomer)
 Alias pre obdĺžnik.
Shape
obdlznik(double a,
        double b)
 Alias pre obdĺžnik.
Shape
obdlznika()
 Alias pre obdĺžnik.
Shape
obdlznika(double pomer)
 Alias pre obdĺžnik.
Shape
obdlznika(double a,
         double b)
 Alias pre obdĺžnik.
Shape
obdĺžnik()
Nakreslí alebo vyplní na mieste robota obdĺžnik určený
 rozmerom vpísanej elipsy a obrátený v smere robota.
Shape
obdĺžnik(double pomer)
Nakreslí alebo vyplní na mieste robota obdĺžnik určený rozmerom
 vpísanej elipsy a obrátený v smere robota.
Shape
obdĺžnik(double a,
        double b)
Nakreslí alebo vyplní na mieste robota obdĺžnik určený rozmerom
 vpísanej elipsy a obrátený v smere robota (predvolený smer
 robota je 90°).
Shape
obdĺžnika()
 Alias pre obdĺžnik.
Shape
obdĺžnika(double pomer)
 Alias pre obdĺžnik.
Shape
obdĺžnika(double a,
         double b)
 Alias pre obdĺžnik.
void
obkresliCestu()
Táto metóda funguje rovnako ako keby sme volali metódy uzavriCestu a kresliCestu za sebou (v uvedenom poradí).
void
obkresliOblast(Area oblasť)
 Alias pre obkresliOblasť.
void
obkresliOblasť(Area oblasť)
Obkreslí zadanú oblasť hrúbkou a farbou čiary nastavenou pre
 tento robot.
void
obnovenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
obratDrahu()
 Alias pre obráťDráhu.
void
obráťDráhu()
Prevráti poradie bodov dráhy.
void
obratMapuSmerov()
 Alias pre obráťDráhu.
void
obráťMapuSmerov()
Prevráti poradie prvkov mapy smerov.
BufferedImage
obrazok()
 Alias pre obrázok.
BufferedImage
obrázok()
Vráti (na technické účely) aktuálny obrázok, na ktorý
 tento robot kreslí.
void
obrazok(Image obrázok)
 Alias pre obrázok.
void
obrázok(Image obrázok)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia.
void
obrazok(Image obrázok,
       double mierka)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia.
void
obrazok(Image obrázok,
       double Δx,
       double Δy)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       double Δx,
       double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa aktuálneho spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(Image obrázok,
       double Δx,
       double Δy,
       double mierka)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       double Δx,
       double Δy,
       double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(Image obrázok,
       int spôsobKreslenia)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       int spôsobKreslenia)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
void
obrazok(Image obrázok,
       int spôsobKreslenia,
       double mierka)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       int spôsobKreslenia,
       double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
void
obrazok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa zadaného spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierka)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierkaX,
       double mierkaY)
 Alias pre obrázok.
void
obrázok(Image obrázok,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierkaX,
       double mierkaY)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(String súbor)
 Alias pre obrázok.
void
obrázok(String súbor)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia.
void
obrazok(String súbor,
       double mierka)
 Alias pre obrázok.
void
obrázok(String súbor,
       double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia.
void
obrazok(String súbor,
       double Δx,
       double Δy)
 Alias pre obrázok.
void
obrázok(String súbor,
       double Δx,
       double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa aktuálneho spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(String súbor,
       double Δx,
       double Δy,
       double mierka)
 Alias pre obrázok.
void
obrázok(String súbor,
       double Δx,
       double Δy,
       double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(String súbor,
       int spôsobKreslenia)
 Alias pre obrázok.
void
obrázok(String súbor,
       int spôsobKreslenia)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
void
obrazok(String súbor,
       int spôsobKreslenia,
       double mierka)
 Alias pre obrázok.
void
obrázok(String súbor,
       int spôsobKreslenia,
       double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
void
obrazok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy)
 Alias pre obrázok.
void
obrázok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa zadaného spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierka)
 Alias pre obrázok.
void
obrázok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
obrazok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierkaX,
       double mierkaY)
 Alias pre obrázok.
void
obrázok(String súbor,
       int spôsobKreslenia,
       double Δx,
       double Δy,
       double mierkaX,
       double mierkaY)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
void
odskoc()
 Alias pre odskoč.
void
odskoc(double dĺžka)
 Alias pre odskoč.
void
odskoč()
Prikáže robotu, aby skokom cúvol z aktuálneho miesta
 o hodnotu svojej veľkosti
 (v aktuálnom smere).
void
odskoč(double dĺžka)
Prikáže robotu, aby skokom cúvol z aktuálneho miesta
 o zadanú dĺžku (v aktuálnom smere).
void
ohranic()
 Alias pre ohranič.
void
ohranic(double horizontálneHranice,
       double vertikálneHranice)
 Alias pre ohranič.
void
ohranic(double ľaváHranica,
       double dolnáHranica,
       double praváHranica,
       double hornáHranica)
 Alias pre ohranič.
void
ohranic(double ľaváHranica,
       double dolnáHranica,
       double praváHranica,
       double hornáHranica,
       int spôsob)
 Alias pre ohranič.
void
ohranic(double horizontálneHranice,
       double vertikálneHranice,
       int spôsob)
 Alias pre ohranič.
void
ohranic(int spôsob)
 Alias pre ohranič.
void
ohranič()
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ
 a podľa rozmerov kresliacej plochy, na ktorú má robot
 nasmerované kreslenie.
void
ohranič(double horizontálneHranice,
       double vertikálneHranice)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ
void
ohranič(double ľaváHranica,
       double dolnáHranica,
       double praváHranica,
       double hornáHranica)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ
void
ohranič(double ľaváHranica,
       double dolnáHranica,
       double praváHranica,
       double hornáHranica,
       int spôsob)
Zapne alebo vypne kontrolu polohy robota počas jeho pohybu
 prostredníctvom určenia vzdialenosti štyroch hraníc od aktuálnej
 polohy robota a spôsobu ohraničenia.
void
ohranič(double horizontálneHranice,
       double vertikálneHranice,
       int spôsob)
Zapne alebo vypne kontrolu polohy robota počas jeho pohybu
 prostredníctvom určenia vzdialenosti dvojice horizontálnych
 a vertikálnych hraníc od aktuálnej polohy robota a spôsobu
 ohraničenia.
void
ohranič(int spôsob)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 so zadaným spôsobom ohraničenia a podľa rozmerov kresliacej
 plochy, na ktorú má robot nasmerované kreslenie.
void
otacajTvar(double otáčanie)
 Alias pre otáčajTvar.
void
otacajTvar(double otáčanie,
          boolean aktivuj)
 Alias pre otáčajTvar.
double
otacanieTvaru()
 Alias pre otáčanieTvaru.
void
otáčajTvar(double otáčanie)
 Nastaví novú hodnotu rovnomerného
 otáčania tvaru robota a aktivuje robot ak je to potrebné.
void
otáčajTvar(double otáčanie,
          boolean aktivuj)
 Nastaví novú hodnotu rovnomerného
 otáčania tvaru robota.
double
otáčanieTvaru()
Zistí aktuálnu hodnotu rovnomerného otáčania tvaru robota.
void
otoc(double uhol)
 Alias pre otoč.
void
otoc(double Δx,
    double Δy)
 Alias pre otoč.
void
otoc(double Δx,
    double Δy,
    double najviacO)
 Alias pre otoč.
void
otoc(Smer objekt)
 Alias pre otoč.
void
otoc(Smer objekt,
    double najviacO)
 Alias pre otoč.
void
otocNa(double x,
      double y)
 Alias pre otočNa.
void
otocNa(double x,
      double y,
      double najviacO)
 Alias pre otočNa.
void
otocNa(Poloha objekt)
 Alias pre otočNa.
void
otocNa(Poloha objekt,
      double najviacO)
 Alias pre otočNa.
void
otocNa(Shape tvar)
 Alias pre otočNa.
void
otocNa(Shape tvar,
      double najviacO)
 Alias pre otočNa.
void
otocNaCiel()
 Alias pre otočNaCieľ.
void
otocNaCiel(double najviacO)
 Alias pre otočNaCieľ.
void
otocNaMys()
 Alias pre otočNaMyš.
void
otocNaMys(double najviacO)
 Alias pre otočNaMyš.
void
otocO(double uhol)
 Alias pre otoč.
void
otocO(double uhol,
     double najviacO)
 Alias pre otoč.
void
otoč(double uhol)
Nasmeruje (otočí) robot rovnakým smerom, ako určuje
 zadaný uhol.
void
otoč(double Δx,
    double Δy)
Nasmeruje robot smerom zadaným s pomocou súradníc [Δx, Δy].
void
otoč(double Δx,
    double Δy,
    double najviacO)
Funguje podobne ako metóda otoč, ibaže obmedzuje uhol pootočenia stanoveným smerom –
 neotočí robot okamžite smerom na zadané súradnice, iba ním
 pootočí stanoveným smerom o maximálnu zadanú hodnotu uhla.
void
otoč(Smer objekt)
Nasmeruje tento robot rovnakým smerom, akým je otočený
 zadaný objekt.
void
otoč(Smer objekt,
    double najviacO)
Funguje podobne ako metóda otoč,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 robot okamžite podľa smeru iného robota, iba ním pootočí
 o maximálnu zadanú hodnotu uhla.
void
otočNa(double x,
      double y)
Nasmeruje robot smerom na zadané súradnice [x, y] na
 podlahe (strope).
void
otočNa(double x,
      double y,
      double najviacO)
Funguje podobne ako metóda otočNa, ibaže obmedzuje uhol pootočenia stanoveným smerom –
 neotočí robot okamžite smerom na zadané súradnice, iba ním
 pootočí stanoveným smerom o maximálnu zadanú hodnotu uhla.
void
otočNa(Poloha objekt)
Nasmeruje tento robot smerom k zadanému objektu.
void
otočNa(Poloha objekt,
      double najviacO)
Funguje podobne ako metóda otočNa,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 tento robot okamžite smerom k objektu, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla.
void
otočNa(Shape tvar)
Nasmeruje tento robot smerom do stredu
 hraníc[1] zadaného tvaru.
void
otočNa(Shape tvar,
      double najviacO)
Funguje podobne ako metóda otočNa,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 tento robot okamžite smerom do stredu hraníc[1]
 tvaru, iba ho pootočí stanoveným smerom o maximálnu zadanú
 hodnotu uhla.
void
otočNaCieľ()
Nasmeruje robot smerom na aktuálne súradnice cieľa.
void
otočNaCieľ(double najviacO)
Funguje podobne ako metóda otočNaCieľ, ibaže obmedzuje uhol pootočenia – neotočí
 robot okamžite smerom k súradniciam cieľa, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla.
void
otočNaMyš()
Nasmeruje robot smerom na aktuálne súradnice myši.
void
otočNaMyš(double najviacO)
Funguje podobne ako metóda otočNaMyš,
 ibaže obmedzuje uhol pootočenia – neotočí tento robot
 okamžite smerom k súradniciam myši, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla.
void
otočO(double uhol)
Otočí robot o zadaný uhol (proti smeru hodinových
 ručičiek).
void
otočO(double uhol,
     double najviacO)
Otočí robot o zadaný uhol s kontrolou maximálneho
 dovoleného uhla pootočenia.
void
otvorenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
oznacKlucovuFazuDrahy(int fáza)
 Alias pre označKľúčovúFázuDráhy.
void
oznacKlucovuFazuDrahy(Poloha poloha)
 Alias pre označKľúčovúFázuDráhy.
void
oznacKlucovuFazuDrahy(Poloha poloha,
                     double okruh)
 Alias pre označKľúčovúFázuDráhy.
void
označKľúčovúFázuDráhy(int fáza)
Označí zadanú fázu dráhy za kľúčovú.
void
označKľúčovúFázuDráhy(Poloha poloha)
Označí takú fázu dráhy za kľúčovú, ktorej poloha je
 najbližšie k zadanej polohe.
void
označKľúčovúFázuDráhy(Poloha poloha,
                     double okruh)
Označí takú fázu dráhy za kľúčovú, ktorej poloha je
 najbližšie k zadanej polohe a v rámci zadaného okruhu.
double[]
parametreVzoruCiaryDoma()
 Alias pre parametreVzoruČiaryDoma.
void
parametreVzoruCiaryDoma(double posunVzoru,
                       double... charakterVzoru)
 Alias pre parametreVzoruČiaryDoma.
double[]
parametreVzoruČiaryDoma()
Zistí, aké parametre majú byť nastavené vzoru čiary pera
 pri prechode robota domov.
void
parametreVzoruČiaryDoma(double posunVzoru,
                       double... charakterVzoru)
Nastaví parametre vzoru čiary pera použité pri prechode
 robota domov.
double[]
parametreVzoruPeraDoma()
Zistí, aké parametre majú byť nastavené vzoru čiary pera
 pri prechode robota domov.
void
parametreVzoruPeraDoma(double posunVzoru,
                      double... charakterVzoru)
Nastaví parametre vzoru čiary pera použité pri prechode
 robota domov.
void
pasivita()
Táto metóda je predvolene prázdna.
boolean
pasivny()
 Alias pre neaktívny.
boolean
pasívny()
 Alias pre neaktívny.
void
peciatka()
 Alias pre pečiatka.
void
pečiatka()
Vytlačí na aktuálnom plátne robota pečiatku v jeho aktuálnom
 tvare.
boolean
peroPolozene()
 Alias pre peroPoložené.
Boolean
peroPolozeneDoma()
 Alias pre peroPoloženéDoma.
boolean
peroPoložené()
Zistí aktuálnu polohu pera.
Boolean
peroPoloženéDoma()
Overí, či robot pri prechode na domovskú pozíciu položí
 pero na plátno.
boolean
peroZdvihnute()
 Alias pre peroZdvihnuté.
boolean
peroZdvihnuté()
Zistí aktuálnu polohu pera.
Boolean
peroZdvihnuteDoma()
 Alias pre peroZdvihnutéDoma.
Boolean
peroZdvihnutéDoma()
Overí, či robot pri prechode na domovskú pozíciu zdvihne
 pero z plátna.
Pismo
pismo()
 Alias pre písmo.
Písmo
písmo()
 Vráti aktuálny typ písma, ktorým
 robot píše.
void
pismo(Font novéPísmo)
 Alias pre písmo.
void
písmo(Font novéPísmo)
 Nastaví nový typ písma, ktorým bude
 robot písať.
Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
Písmo
písmo(String názov,
     double veľkosť)
Nastaví nový typ písma, ktorým bude robot písať.
Pismo
pismoDoma()
 Alias pre písmoDoma.
Písmo
písmoDoma()
Zistí, ako sa mení písmo robota po jeho prechode na
 domovskú pozíciu.
void
pismoDoma(Font novéPísmo)
 Alias pre písmoDoma.
void
písmoDoma(Font novéPísmo)
Nastaví alebo zruší zmenu písma robota po jeho prechode na
 domovskú pozíciu.
Pismo
pismoDoma(String názov,
         double veľkosť)
 Alias pre písmoDoma.
Písmo
písmoDoma(String názov,
         double veľkosť)
Určí nové písmo robota, ktoré bude nastavené po jeho prechode
 na domovskú pozíciu.
void
pod(GRobot ktorého)
 Alias pre za.
void
pohybMysi()
 Alias pre pohybMyši.
void
pohybMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
pokracujVDrahe()
 Alias pre pokračujVDráhe.
void
pokračujVDráhe()
Obnoví pohyb robota po aktuálnej dráhe.
Bod
poloha()
 Vráti aktuálne súradnice robota
 v objekte typu Bod.
void
poloha(double novéX,
      double novéY)
Nastaví nové súradnice robota.
void
poloha(Poloha poloha)
 Nastaví nové súradnice robota.
boolean
polohaPera()
Zistí aktuálnu polohu pera.
void
polohaPera(boolean polož)
Zdvihne alebo položí pero na základe zadanej pravdivostnej
 hodnoty – true položí pero, false
 zdvihne pero.
Boolean
polohaPeraDoma()
Zistí, či sa mení stav pera pri prechode na domovskú
 pozíciu robota.
void
polohaPeraDoma(Boolean položené)
Nastaví správanie zmeny polohy pera po prechode domov na
 základe zadaného objektu typu Boolean.
double
polohaX()
 Zistí aktuálnu x-ovú súradnicu robota.
void
polohaX(double novéX)
 Prikáže robotu, aby preskočil na
 konkrétnu súradnicu na podlahe (strope) v smere osi x.
double
polohaY()
 Zistí aktuálnu y-ovú súradnicu robota.
void
polohaY(double novéY)
 Prikáže robotu, aby preskočil na
 konkrétnu súradnicu na podlahe (strope) v smere osi y.
void
polozPero()
 Alias pre položPero.
void
polozPeroDoma()
 Alias pre položPeroDoma.
void
položPero()
Položí pero tohto robota na plátno podlahy alebo stropu.
void
položPeroDoma()
Spôsobí, že odteraz vždy pri použití niektorej modifikácie
 metódy domov položí robot pero na plátno.
double
pomer()
 Zistí aktuálnu hodnotu pomeru
 rozmerov (šírky a výšky) robota.
void
pomer(double pomer)
 Upraví aktuálny pomer rozmeru
 robota, čo má priamy vplyv na generovanie niektorých tvarov
 robotom
Double
pomerDoma()
Zistí, ako sa mení pomer veľkosti robota po jeho
 prechode na domovskú pozíciu.
void
pomerDoma(Double novýPomer)
Nastaví alebo zruší ovplyvňovanie pomeru veľkosti robota
 po jeho prechode na domovskú pozíciu.
void
pomerPodlaMierky()
 Alias pre pomerPodľaMierky.
void
pomerPodľaMierky()
Nastaví pomer veľkosti robota podľa aktuálnej mierky pomeru tak, aby sa hodnota mierky pomeru vyrovnala na 1.0.
void
pomerPodlaMierky(double zmena)
 Alias pre pomerPodľaMierky.
void
pomerPodľaMierky(double zmena)
Nastaví pomer veľkosti robota podľa aktuálnej mierky pomeru tak, aby nová hodnota
 mierky pomeru nadobudla zadanú
 hodnotu.
double
pootocenieTvaru()
 Alias pre pootočenieTvaru.
void
pootocenieTvaru(double pootočenie)
 Alias pre pootočenieTvaru.
Double
pootocenieTvaruDoma()
 Alias pre pootočenieTvaruDoma.
void
pootocenieTvaruDoma(Double pootočenie)
 Alias pre pootočenieTvaruDoma.
void
pootocMapuSmerov(double uhol)
 Alias pre pootočMapuSmerov.
double
pootočenieTvaru()
 Vráti aktuálnu hodnotu pootočenia
 tvaru robota.
void
pootočenieTvaru(double pootočenie)
 Nastaví pootočenie tvaru robota podľa
 zadanej hodnoty.
Double
pootočenieTvaruDoma()
Zistí, či sa mení pootočenie tvaru pri prechode na
 domovskú pozíciu robota.
void
pootočenieTvaruDoma(Double pootočenie)
Nastaví správanie zmeny pootočenia tvaru robota po prechode
 na domovskú pozíciu na základe zadaného objektu typu
 Double.
void
pootočMapuSmerov(double uhol)
Pootočí hodnoty v mape smerov o zadaný uhol.
Bod
poslednaPoloha()
 Alias pre poslednáPoloha.
Bod
poslednáPoloha()
Vráti posledné súradnice robota v objekte typu
 Bod.
double
poslednaPolohaX()
 Alias pre poslednáPolohaX.
double
poslednáPolohaX()
Zistí poslednú x-ovú súradnicu robota.
double
poslednaPolohaY()
 Alias pre poslednáPolohaY.
double
poslednáPolohaY()
Zistí poslednú y-ovú súradnicu robota.
double
poslednaSuradnicaX()
 Alias pre poslednáSúradnicaX.
double
poslednáSúradnicaX()
 Alias pre poslednáPolohaX.
double
poslednaSuradnicaY()
 Alias pre poslednáSúradnicaY.
double
poslednáSúradnicaY()
 Alias pre poslednáPolohaY.
double
poslednySmer()
 Alias pre poslednýSmer.
double
poslednýSmer()
Zistí posledný uhol (smer) robota.
double
poslednyUhol()
 Alias pre poslednýUhol.
double
poslednýUhol()
Zistí posledný uhol (smer) robota.
Rectangle2D
posobisko()
 Alias pre pôsobisko.
void
posobisko(Poloha bod)
 Alias pre pôsobisko.
void
posobisko(Shape tvar)
 Alias pre pôsobisko.
void
posun(double Δx,
     double Δy)
 Alias pre posuň.
void
posuň(double Δx,
     double Δy)
Prikáže robotu, aby sa posunul o zadané súradnice
 smere osí x a y, pričom obe osi sú pootočené podľa
 rozdielu aktuálneho smeru robota a uhla 90°.
void
posunDolava()
 Alias pre posuňDoľava.
void
posuňDoľava()
 Alias pre posuňVľavo.
void
posunDolava(double dĺžka)
 Alias pre posuňDoľava.
void
posuňDoľava(double dĺžka)
 Alias pre posuňVľavo.
void
posunDoprava()
 Alias pre posuňDoprava.
void
posuňDoprava()
 Alias pre posuňVpravo.
void
posunDoprava(double dĺžka)
 Alias pre posuňDoprava.
void
posuňDoprava(double dĺžka)
 Alias pre posuňVpravo.
void
posunDrahu(double Δx,
          double Δy)
 Alias pre posuňDráhu.
void
posuňDráhu(double Δx,
          double Δy)
Posunie body dráhy o zadaný rozdiel súradníc Δx a Δy.
void
posunDrahu(int početPrvkov)
 Alias pre posuňDráhu.
void
posuňDráhu(int početPrvkov)
Posunie prvky v zozname bodov dráhy o zadaný počet doprava
 (pri zadaní kladného počtu prvkov) alebo doľava (pri zadaní
 záporného počtu prvkov).
void
posunMapuSmerov(int početPrvkov)
 Alias pre posuňMapuSmerov.
void
posuňMapuSmerov(int početPrvkov)
Posunie prvky mapy smerov o zadanú hodnotu doprava.
void
posunVlavo()
 Alias pre posuňVľavo.
void
posuňVľavo()
Prikáže robotu, aby sa posunul vľavo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu).
void
posunVlavo(double dĺžka)
 Alias pre posuňVľavo.
void
posuňVľavo(double dĺžka)
Prikáže robotu, aby sa posunul vľavo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu).
void
posunVpravo()
 Alias pre posuňVpravo.
void
posuňVpravo()
Prikáže robotu, aby sa posunul vpravo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu).
void
posunVpravo(double dĺžka)
 Alias pre posuňVpravo.
void
posuňVpravo(double dĺžka)
Prikáže robotu, aby sa posunul vpravo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu).
void
posunVSmere(double smer)
 Alias pre posuňVSmere.
void
posuňVSmere(double smer)
Prikáže robotu, aby sa posunul v zadanom smere
 o hodnotu svojej veľkosti.
void
posunVSmere(double smer,
           double dĺžka)
 Alias pre posuňVSmere.
void
posuňVSmere(double smer,
           double dĺžka)
Prikáže robotu, aby sa posunul v zadanom smere
 o zadanú dĺžku.
void
posunVSmere(Smer smer)
 Alias pre posuňVSmere.
void
posuňVSmere(Smer smer)
Prikáže robotu, aby sa posunul v zadanom smere
 o hodnotu svojej veľkosti.
void
posunVSmere(Smer smer,
           double dĺžka)
 Alias pre posuňVSmere.
void
posuňVSmere(Smer smer,
           double dĺžka)
Prikáže robotu, aby sa posunul v zadanom smere
 o zadanú dĺžku.
double
posunVzoruCiary()
 Alias pre posunVzoruČiary.
void
posunVzoruCiary(double posun)
 Alias pre posunVzoruČiary.
double
posunVzoruČiary()
Vráti aktuálny posun vzoru čiary pera.
void
posunVzoruČiary(double posun)
Upraví posun vzoru čiary pera.
double
posunVzoruPera()
Vráti aktuálny posun vzoru čiary pera.
void
posunVzoruPera(double posun)
Upraví posun vzoru čiary pera.
void
potvrdenieUdajov()
 Alias pre potvrdenieÚdajov.
void
potvrdenieÚdajov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
potvrdenieVstupu()
 Alias pre potvrdenieÚdajov.
boolean
pouzijeKruhovyNater()
 Alias pre použijeKruhovýNáter.
void
pouziKruhovyNater()
 Alias pre použiKruhovýNáter.
boolean
použijeKruhovýNáter()
Overí, či má robot v prípade nastavenia cieľovej farby vytvoriť kruhový
 náter na výplň tvarov.
void
použiKruhovýNáter()
Prikáže, aby robot v prípade nastavenia cieľovej farby použil na výplň tvarov
 kruhový náter.
Rectangle2D
pôsobisko()
Umožňuje získať tvar (čo zahŕňa jeho rozmery a polohu)
 pôsobiska v objekte typu Rectangle2D.
void
pôsobisko(Poloha bod)
Táto metóda umožňuje rozšíriť pôsobisko tak, aby obsahovalo
 zadaný bod.
void
pôsobisko(Shape tvar)
Táto metóda umožňuje rozšíriť pôsobisko (pozri napríklad metódu
 vymažPôsobisko) o rozmery zadaného
 tvaru.
void
pracuj()
Táto metóda je automaticky spúšťaná časovačom.
void
precitajZoSuboru(Súbor súbor)
 Alias pre čítajZoSúboru.
void
prečítajZoSúboru(Súbor súbor)
 Alias pre čítajZoSúboru.
void
pred(GRobot ktorého)
Presunie tento robot pred zadaný robot (z pohľadu
 zoradenia robotov vo vnútornom zozname, pričom umiestnenie
 robotov do vrstiev zostane neovplyvnené).
void
predvolenaFarba()
 Alias pre predvolenáFarba.
void
predvolenáFarba()
Nastaví farbu robota na predvolenú farbu.
void
predvolenaHrubkaCiary()
 Alias pre predvolenáHrúbkaČiary.
void
predvolenáHrúbkaČiary()
Nastaví hrúbku čiary pera na predvolenú.
void
predvolenaHrubkaPera()
 Alias pre predvolenáHrúbkaPera.
void
predvolenáHrúbkaPera()
Nastaví hrúbku čiary pera na predvolenú.
void
predvolenePismo()
 Alias pre predvolenéPísmo.
void
predvolenéPísmo()
Vráti nastavenie typu písma robota na predvolené.
void
predvolenyDutyTvar()
 Alias pre predvolenýDutýTvar.
void
predvolenýDutýTvar()
Nastaví predvolený dutý tvar robota.
void
predvolenyTvar()
 Alias pre predvolenýTvar.
void
predvolenýTvar()
Nastaví predvolený tvar robota.
void
predvolenyTvar(boolean vyplnený)
 Alias pre predvolenýTvar.
void
predvolenýTvar(boolean vyplnený)
Nastaví predvolený tvar robota.
void
predvolenyVyplnenyTvar()
 Alias pre predvolenýVyplnenýTvar.
void
predvolenýVyplnenýTvar()
Nastaví predvolený vyplnený tvar robota.
void
predvolenyVzorCiary()
 Alias pre predvolenýVzorČiary.
void
predvolenýVzorČiary()
Nastaví vzor čiary pera na predvolený, čo je plná
 neprerušovaná čiara.
void
predvolenyVzorPera()
 Alias pre predvolenýVzorPera.
void
predvolenýVzorPera()
Nastaví vzor čiary pera na predvolený, čo je plná
 neprerušovaná čiara.
void
prekreslenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
prepisBod()
 Alias pre prepíšBod.
void
prepíšBod()
Prepíše farebné zložky a zložku priehľadnosti bodu na
 aktuálnej pozícii robota aktuálnou farbou robota.
void
prepusti()
 Alias pre uvoľni.
void
prepusti(Oblasť oblasť)
 Alias pre uvoľni.
void
preskoc(double Δx,
       double Δy)
 Alias pre preskoč.
void
preskocDolava()
 Alias pre preskočDoľava.
void
preskocDolava(double dĺžka)
 Alias pre preskočDoľava.
void
preskocDoprava()
 Alias pre preskočDoprava.
void
preskocDoprava(double dĺžka)
 Alias pre preskočDoprava.
void
preskocVlavo()
 Alias pre preskočVľavo.
void
preskocVlavo(double dĺžka)
 Alias pre preskočVľavo.
void
preskocVpravo()
 Alias pre preskočVpravo.
void
preskocVpravo(double dĺžka)
 Alias pre preskočVpravo.
void
preskocVSmere(double smer)
 Alias pre preskočVSmere.
void
preskocVSmere(double smer,
             double dĺžka)
 Alias pre preskočVSmere.
void
preskocVSmere(Smer smer)
 Alias pre preskočVSmere.
void
preskocVSmere(Smer smer,
             double dĺžka)
 Alias pre preskočVSmere.
void
preskoč(double Δx,
       double Δy)
Prikáže robotu, aby preskočil o zadané súradnice
 smere osí x a y, pričom obe osi sú pootočené podľa
 rozdielu aktuálneho smeru robota a uhla 90°.
void
preskočDoľava()
 Alias pre preskočVľavo.
void
preskočDoľava(double dĺžka)
 Alias pre preskočVľavo.
void
preskočDoprava()
 Alias pre preskočVpravo.
void
preskočDoprava(double dĺžka)
 Alias pre preskočVpravo.
void
preskočVľavo()
Prikáže robotu, aby preskočil vľavo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu).
void
preskočVľavo(double dĺžka)
Prikáže robotu, aby preskočil vľavo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu).
void
preskočVpravo()
Prikáže robotu, aby preskočil vpravo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu).
void
preskočVpravo(double dĺžka)
Prikáže robotu, aby preskočil vpravo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu).
void
preskočVSmere(double smer)
Prikáže robotu, aby preskočil v zadanom smere o hodnotu
 svojej veľkosti.
void
preskočVSmere(double smer,
             double dĺžka)
Prikáže robotu, aby preskočil v zadanom smere
 o zadanú dĺžku.
void
preskočVSmere(Smer smer)
Prikáže robotu, aby preskočil v zadanom smere o hodnotu
 svojej veľkosti.
void
preskočVSmere(Smer smer,
             double dĺžka)
Prikáže robotu, aby preskočil v zadanom smere
 o zadanú dĺžku.
void
presunutieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
double
priehladnost()
 Alias pre priehľadnosť.
double
priehľadnosť()
 Zistí aktuálnu úroveň
 (ne)priehľadnosti tvaru tohto robota.
void
priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
void
priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň
 (ne)priehľadnosti tohto robota použitú pri kreslení
 (zobrazení) jeho tvaru.
void
priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
void
priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
Double
priehladnostDoma()
 Alias pre priehľadnosťDoma.
Double
priehľadnosťDoma()
Zistí, ako sa mení priehľadnosť robota po jeho prechode na
 domovskú pozíciu.
void
priehladnostDoma(Double nováPriehľadnosť)
 Alias pre priehľadnosťDoma.
void
priehľadnosťDoma(Double nováPriehľadnosť)
Nastaví alebo zruší ovplyvňovanie priehľadnosti robota po
 jeho prechode na domovskú pozíciu.
void
prijatieVyzvy(GRobot autor,
             int kľúč)
 Alias pre prijatieVýzvy.
void
prijatieVýzvy(GRobot autor,
             int kľúč)
Táto metóda je predvolene prázdna.
void
pustenieSuboru(String súbor)
 Alias pre pustenieSúboru.
void
pustenieSúboru(String súbor)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
registrujVKonfiguracii()
 Alias pre registrujVKonfigurácii.
void
registrujVKonfigurácii()
Zaregistruje tento robot v konfigurácii sveta.
void
registrujVKonfiguracii(String novéMeno)
 Alias pre registrujVKonfigurácii.
void
registrujVKonfigurácii(String novéMeno)
Zaregistruje tento robot v konfigurácii sveta pod
 novým menom.
void
rolovanieKolieskomMysi()
 Alias pre rolovanieKolieskomMyši.
void
rolovanieKolieskomMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
rozbehniSa()
Metóda slúži na aktiváciu robota, ktorý má nenulové
 zrýchlenie
void
rozbehniSa(double zrýchlenie)
Metóda nastaví robotu zadané zrýchlenie a v prípade zadania
 nenulovej hodnoty automaticky aktivuje robot.
void
rozbehniSa(double zrýchlenie,
          boolean aktivuj)
Metóda nastaví robotu zadané zrýchlenie a zároveň dovoľuje
 programátorovi určiť, či má byť robot v prípade zadania
 nenulovej hodnoty zrýchlenia automaticky aktivovaný.
void
rozbehniSa(double zrýchlenie,
          double maximálnaRýchlosť)
Metóda nastaví robotu nové hodnoty zrýchlenia a maximálnej rýchlosti
 a v prípade zadania nenulovej hodnoty zrýchlenia
 automaticky aktivuje robot.
void
rozbehniSa(double zrýchlenie,
          double maximálnaRýchlosť,
          boolean aktivuj)
Metóda nastaví robotu nové hodnoty zrýchlenia a maximálnej rýchlosti a dovoľuje
 programátorovi určiť, či má byť robot v prípade zadania
 nenulovej hodnoty zrýchlenia automaticky aktivovaný.
Rozmer
rozmer()
Vráti objekt obsahujúci aktuálne hodnoty
 šírky a výšky
 robota.
void
rozmer(Rozmer rozmer)
Nastaví nové rozmery robota podľa zadanej implementácie
 rozmeru.
Rozmer
rozmerDoma()
Zistí, či a ako sa budú meniť rozmery (šírky a výšky robota po
 prechode na domovskú pozíciu.
void
rozmerDoma(Rozmer novýRozmer)
Nastaví alebo zruší nastavovanie zmeny rozmerov (šírky
 a výšky) robota po prechode na domovskú pozíciu.
Rozmery
rozmery()
Zistí aktuálne rozmery robota.
void
rozmery(double šírka,
       double výška)
Nastaví nové rozmery robota.
void
rozmery(Rozmer rozmer)
Nastaví nové rozmery robota podľa zadanej implementácie
 rozmeru.
double
rychlost()
 Alias pre rýchlosť.
double
rýchlosť()
 Zistí aktuálnu hodnotu
 rýchlosti tohto robota.
void
rychlost(double rýchlosť)
 Alias pre rýchlosť.
void
rýchlosť(double rýchlosť)
 Nastaví robotu novú hodnotu
 rýchlosti a ak je zadaná nenulová hodnota, automaticky ho
 aktivuje (čo môže viesť ku vzniku
 ďalších udalostí opísaných pri metóde aktivuj()), aby sa mohol pohybovať.
void
rychlost(double rýchlosť,
        boolean aktivuj)
 Alias pre rýchlosť.
void
rýchlosť(double rýchlosť,
        boolean aktivuj)
Nastaví robotu novú hodnotu rýchlosti a dovolí
 programátorovi rozhodnúť, či má byť robot automaticky
 aktivovaný.
double
rychlostOtacania()
 Alias pre uhlováRýchlosť.
void
rychlostOtacania(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
void
rychlostOtacania(double uhlováRýchlosť,
                boolean aktivuj)
 Alias pre uhlováRýchlosť.
double
rýchlosťOtáčania()
 Alias pre uhlováRýchlosť.
void
rýchlosťOtáčania(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
void
rýchlosťOtáčania(double uhlováRýchlosť,
                boolean aktivuj)
 Alias pre uhlováRýchlosť.
double
rychlostPosunu()
 Alias pre rýchlosťPosunu.
double
rýchlosťPosunu()
 Zistí aktuálnu hodnotu
 rýchlosti posunu
 tohto robota, čím je chápaná rýchlosť v smere kolmom
 na aktuálny smer robota.
void
rychlostPosunu(double rýchlosťPosunu)
 Alias pre rýchlosťPosunu.
void
rýchlosťPosunu(double rýchlosťPosunu)
 Nastaví robotu novú hodnotu
 rýchlosti posunu tohto robota a ak je zadaná nenulová
 hodnota, tak robot automaticky aktivuje (čo môže viesť ku vzniku ďalších udalostí
 opísaných pri metóde aktivuj()), aby
 sa mohol pohybovať.
void
rychlostPosunu(double rýchlosťPosunu,
              boolean aktivuj)
 Alias pre rýchlosťPosunu.
void
rýchlosťPosunu(double rýchlosťPosunu,
              boolean aktivuj)
Nastaví robotu novú hodnotu rýchlosti posunu a dovolí
 programátorovi rozhodnúť, či má byť robot automaticky
 aktivovaný.
String
S(Object... argumenty)
Táto metóda slúži na rýchly prevod rôznych objektov do
 textovej podoby a ich zlúčenie do jedného reťazca.
void
sekvencia(int kódSpracovania,
         Object zdroj,
         Object cieľ,
         long stav,
         long celkovo)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota
double
sirka()
 Alias pre šírka.
void
sirka(double šírka)
 Alias pre šírka.
int
sirkaMedzery()
 Alias pre šírkaMedzery.
int
sirkaRetazca(String reťazec)
 Alias pre šírkaReťazca.
void
skoc()
 Alias pre skoč.
void
skoc(double dĺžka)
 Alias pre skoč.
void
skoc(double Δx,
    double Δy)
 Alias pre skoč.
void
skoc(Poloha poloha)
 Alias pre skoč.
void
skocNa(double novéX,
      double novéY)
 Alias pre skočNa.
void
skocNa(Poloha objekt)
 Alias pre skočNa.
void
skocNa(Shape tvar)
 Alias pre skočNa.
void
skocNaCiel()
 Alias pre skočNaCieľ.
void
skocNaMys()
 Alias pre skočNaMyš.
void
skocNaPoObluku(double x,
              double y)
 Alias pre skočNaPoOblúku.
void
skocNaPoObluku(Poloha poloha)
 Alias pre skočNaPoOblúku.
void
skocNaPootoceny(double x,
               double y,
               double uhol)
 Alias pre skočNaPootočený.
void
skocNaPootoceny(double x,
               double y,
               Smer smer)
 Alias pre skočNaPootočený.
void
skocNaPootoceny(Poloha poloha,
               double uhol)
 Alias pre skočNaPootočený.
void
skocNaPootoceny(Poloha poloha,
               Smer smer)
 Alias pre skočNaPootočený.
void
skocPoObluku()
 Alias pre skočPoOblúku.
void
skocPoObluku(boolean vpravo)
 Alias pre skočPoOblúku.
void
skocPoObluku(double uhol)
 Alias pre skočPoOblúku.
void
skocPoObluku(double uhol,
            boolean vpravo)
 Alias pre skočPoOblúku.
void
skocPoObluku(double uhol,
            double polomer)
 Alias pre skočPoOblúku.
void
skocPootoceny(double Δx,
             double Δy,
             double uhol)
 Alias pre skočPootočený.
void
skocPootoceny(double Δx,
             double Δy,
             Smer smer)
 Alias pre skočPootočený.
void
skoč()
Prikáže robotu, aby preskočil v aktuálnom smere dopredu
 o hodnotu svojej veľkosti.
void
skoč(double dĺžka)
Prikáže robotu, aby preskočil dopredu o zadanú dĺžku
 v aktuálnom smere.
void
skoč(double Δx,
    double Δy)
Prikáže robotu, aby sa na podlahe (strope) preskočil
 o zadané súradnice v horizontálnom a vertikálnom smere.
void
skoč(Poloha poloha)
Prikáže robotu, aby sa na podlahe (strope) preskočil
 o súradnice, ktoré obsahuje zadaná inštancia polohy.
void
skočNa(double novéX,
      double novéY)
Prikáže robotu, aby preskočil na konkrétne súradnice na
 podlahe (strope).
void
skočNa(Poloha objekt)
Prikáže tomuto robotu, aby preskočil na polohu zadaného
 objektu.
void
skočNa(Shape tvar)
Prikáže robotu, aby preskočil do stredu
 hraníc[1] zadaného tvaru.
void
skočNaCieľ()
Prikáže robotu, aby v rámci podlahy (stropu) preskočil
 na aktuálne súradnice cieľa.
void
skočNaMyš()
Prikáže robotu, aby v rámci podlahy (stropu) preskočil na
 aktuálne súradnice myši.
void
skočNaPoOblúku(double x,
              double y)
Pohne robotom po oblúku do cieľového bodu určeného
 súradnicami [x, y] s ohľadom na aktuálne otočenie robota
 bez nakreslenia oblúka.
void
skočNaPoOblúku(Poloha poloha)
Funguje rovnako ako skočNaPoOblúku(x, y), ale namiesto samostatných súradníc
 prijíma implementáciu rozhrania Poloha
 (napríklad Bod).
void
skočNaPootočený(double x,
               double y,
               double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
skočNaPootočený(double x,
               double y,
               Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
skočNaPootočený(Poloha poloha,
               double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
skočNaPootočený(Poloha poloha,
               Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota.
void
skočPoOblúku()
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania bez nakreslenia oblúka.
void
skočPoOblúku(boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania bez nakreslenia oblúka.
void
skočPoOblúku(double uhol)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol bez jeho nakreslenia.
void
skočPoOblúku(double uhol,
            boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol bez jeho nakreslenia.
void
skočPoOblúku(double uhol,
            double polomer)
Pohne robotom po oblúku so zadaným polomerom o zadaný
 uhol bez jeho nakreslenia.
void
skočPootočený(double Δx,
             double Δy,
             double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol.
void
skočPootočený(double Δx,
             double Δy,
             Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol.
void
skonciCestu()
 Alias pre skončiCestu.
void
skonciKreslenie()
 Alias pre skončiKreslenie.
void
skonciKreslenie(Graphics2D g2d)
 Alias pre skončiKreslenie.
void
skončiCestu()
Ukončí záznam cesty a ponechá ju na ďalšie použitie.
void
skončiKreslenie()
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím interného (aktívneho) grafického objektu
 robota dostupného aj prostredníctvom metódy grafika.
void
skončiKreslenie(Graphics2D g2d)
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím externého grafického objektu Graphics2D.
void
skry()
Skryje tento robot.
void
skryDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov skryje.
void
skrytie()
Táto metóda je predvolene prázdna.
void
skrytieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
boolean
skryty()
 Alias pre skrytý.
boolean
skrytý()
Zistí, či je robot viditeľný alebo skrytý.
Boolean
skrytyDoma()
 Alias pre skrytýDoma.
Boolean
skrytýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu.
double
smer()
 Zistí aktuálny uhol (smer) robota.
void
smer(double uhol)
 Nasmeruje robot podľa zadaného uhla.
double
smer(double Δx,
    double Δy)
Zistí smer k bodu zadanému s pomocou odchýlok súradníc
 v horizontálnom a vertikáklom smere [Δx, Δy].
void
smer(Smer objekt)
 Nasmeruje robot podľa zadaného
 objektu.
double
smerDoma()
 Zistí aktuálny smer (uhol)
 domovskej pozície robota.
void
smerDoma(double uhol)
 Nastaví aktuálny smer (uhol)
 domovskej pozície robota.
double
smerNa(double x,
      double y)
Zistí smer (uhol) z aktuálneho miesta robota smerom na
 zadané súradnice [x, y].
double
smerNa(Poloha objekt)
Zistí smer (uhol) z aktuálneho miesta robota smerom ku
 zadanému objektu.
double
smerNa(Shape tvar)
Zistí smer (uhol) z aktuálneho miesta robota smerom do,
 stredu hraníc[1] zadaného tvaru.
double
smerNaCiel()
 Alias pre smerNaCieľ.
double
smerNaCieľ()
Zistí smer (uhol) z aktuálneho miesta robota smerom
 k aktuálnym súradniciam cieľa.
double
smerNaMys()
 Alias pre smerNaMyš.
double
smerNaMyš()
Zistí smer (uhol) z aktuálneho miesta robota smerom
 k aktuálnym súradniciam myši.
boolean
smerujeDoCiela()
 Alias pre cieľAktívny.
boolean
smerujeDoCieľa()
 Alias pre cieľAktívny.
boolean
somNad(GRobot ktorým)
 Alias pre somPred.
boolean
somPod(GRobot ktorým)
 Alias pre somZa.
boolean
somPred(GRobot ktorým)
Overí, či je tento robot pred zadaným robotom.
boolean
somZa(GRobot ktorým)
Overí, či je tento robot za zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Color farba,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka,
        Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka,
        Color farba,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka,
        Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka,
        Farebnosť objekt,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        double hrúbka,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Farebnosť objekt,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara,
        Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara,
        Color farba,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara,
        Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara,
        Farebnosť objekt,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica
spojnica(GRobot cieľ,
        Stroke čiara,
        Shape orezanieZačiatku,
        Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom.
GRobot.Spojnica[]
spojniceDo()
Vytvorí zoznam všetkých spojníc smerujúcich do tohto
 robota.
GRobot.Spojnica[]
spojniceZ()
Vytvorí zoznam všetkých spojníc smerujúcich z tohto
 robota.
int
sposobKreslenia()
 Alias pre spôsobKreslenia.
void
sposobKreslenia(int novýSpôsobKreslenia)
 Alias pre spôsobKreslenia.
int
sposobOhranicenia()
 Alias pre spôsobOhraničenia.
int
spôsobKreslenia()
 Číta spôsob kreslenia obrázkov
 a písania textov (resp.
void
spôsobKreslenia(int novýSpôsobKreslenia)
 Zmení spôsob kreslenia obrázkov
 a písania textov (resp.
int
spôsobOhraničenia()
Táto metóda vracia aktuálny spôsob ohraničenia robota pri jeho
 pohybe: ODRAZ, PLOT, PRETOČ alebo ŽIADNE.
void
spracovaniePrikazu()
 Alias pre spracovaniePríkazu.
void
spracovaniePríkazu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
spracujRiadokVstupu(String riadokVstupu)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
spustenie()
Táto metóda je predvolene prázdna.
void
spusti()
Aktivuje robot alternatívnym spôsobom a spustí časovač (ak je nečinný).
void
spusti(boolean ajČasovač)
Metóda má rovnaký účel ako metóda spusti() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak už nie je v činnosti).
void
spusti(int trvanieAktivity)
Metóda má rovnaký účel ako metóda spusti(), ibaže dovoľuje programátorovi určiť trvanie
 aktivity.
void
spusti(int trvanieAktivity,
      boolean ajČasovač)
Metóda spája funkcionalitu metód spusti(trvanieAktivity) a spusti(ajČasovač).
void
statieNaDrahe()
 Alias pre státieNaDráhe.
void
státieNaDráhe()
Táto metóda je predvolene prázdna.
void
stlacenieKlavesu()
 Alias pre stlačenieKlávesu.
void
stlacenieTlacidlaMysi()
 Alias pre stlačenieTlačidlaMyši.
void
stlačenieKlávesu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
stlačenieTlačidlaMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
Shape
stvorca()
 Alias pre štvorec.
Shape
stvorca(double polomer)
 Alias pre štvorec.
Shape
stvorec()
 Alias pre štvorec.
Shape
stvorec(double polomer)
 Alias pre štvorec.
double
suradnicaX()
 Alias pre súradnicaX.
double
súradnicaX()
 Alias pre polohaX.
void
suradnicaX(double novéX)
 Alias pre súradnicaX.
void
súradnicaX(double novéX)
 Alias pre polohaX.
double
suradnicaY()
 Alias pre súradnicaY.
double
súradnicaY()
 Alias pre polohaY.
void
suradnicaY(double novéY)
 Alias pre súradnicaY.
void
súradnicaY(double novéY)
 Alias pre polohaY.
boolean
suSpojniceDo()
 Alias pre súSpojniceDo.
boolean
súSpojniceDo()
Overí, či jestvuje aspoň jedna spojnica smerujúca do tohto
 robota.
boolean
suSpojniceZ()
 Alias pre súSpojniceZ.
boolean
súSpojniceZ()
Overí, či jestvuje aspoň jedna spojnica smerujúca z tohto
 robota.
double
šírka()
 Vráti aktuálnu šírku robota.
void
šírka(double šírka)
 Nastaví novú šírku robota.
int
šírkaMedzery()
Zistí šírku medzery v bodoch pri použití aktuálneho typu
 písma.
int
šírkaReťazca(String reťazec)
Zistí šírku zadaného reťazca v bodoch pri použití aktuálneho
 typu písma.
Shape
štvorca()
 Alias pre štvorec.
Shape
štvorca(double polomer)
 Alias pre štvorec.
Shape
štvorec()
Nakreslí alebo vyplní na mieste robota štvorec určený rozmerom
 vpísanej kružnice s polomerom veľkosti
 robota a obrátený v smere robota.
Shape
štvorec(double polomer)
Nakreslí alebo vyplní na mieste robota štvorec určený rozmerom
 vpísanej kružnice a obrátený v smere robota.
void
tahanieMysou()
 Alias pre ťahanieMyšou.
void
ťahanieMyšou()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
tahanieSuborov()
 Alias pre ťahanieSúborov.
void
ťahanieSúborov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
Shape
text(String text)
Napíše[1] zadaný text na pozícii robota podľa
 aktuálneho spôsobu kreslenia (pozri: spôsobKreslenia) alebo vytvorí tvar
 obrysu zadaného textu (čo záleží na tom, či je tento robot
 momentálne zamestnaný
 alebo nie a či je zakázané
 kreslenie tvarov; pozri vysvetlenie pri návratovej hodnote).
Shape
text(String text,
    double Δx,
    double Δy)
Napíše[1] zadaný text na pozícii robota podľa
 aktuálneho spôsobu kreslenia (pozri: spôsobKreslenia) a s vysunutím stredu
 otáčania o zadané odchýlky Δx a Δy alebo vytvorí tvar
 obrysu zadaného textu (čo záleží na tom, či je tento robot
 momentálne zamestnaný
 alebo nie a či je zakázané
 kreslenie tvarov; pozri vysvetlenie pri návratovej hodnote).
Shape
text(String text,
    int spôsobKreslenia)
Napíše[1] zadaný text na pozícii robota podľa
 zadaného spôsobu kreslenia alebo vytvorí tvar obrysu zadaného
 textu.
Shape
text(String text,
    int spôsobKreslenia,
    double Δx,
    double Δy)
Napíše[1] zadaný text na pozícii robota podľa
 zadaného spôsobu kreslenia a s vysunutím stredu otáčania
 o zadané odchýlky Δx a Δy alebo vytvorí tvar obrysu zadaného
 textu.
void
tik()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
Shape
trojzubec()
Táto metóda buď nakreslí, alebo vráti tvar trojzubca, ktorý
 je predvoleným tvarom
 grafického robota.
Shape
trojzubec(boolean starý)
Táto metóda buď nakreslí, alebo vráti starý alebo nový tvar
 trojzubca, ktorý tvorí predvolený tvar grafického robota.
int
trvanieAktivity()
Zisťuje aktuálnu hodnotu trvania aktivity, čo je vlastne
 čas meraný v tikoch
 aplikácie.
void
trvanieAktivity(int trvanieAktivity)
Umožňuje zmeniť aktuálne trvanie aktivity.
int
trvaniePasivity()
Zisťuje aktuálnu hodnotu trvania pasivity.
void
trvaniePasivity(int trvaniePasivity)
Umožňuje zmeniť trvanie pasivity – naplánovať
 automatickú aktiváciu po uplynutí zadaného časového
 intervalu.
Shape
tvarPodlaCiary(Shape tvar)
 Alias pre tvarPodľaČiary.
Shape
tvarPodľaČiary(Shape tvar)
Vyrobí zo zadaného tvaru nový tvar podľa aktuálneho typu
 ťahu.
double
uhlovaRychlost()
 Alias pre uhlováRýchlosť.
double
uhlováRýchlosť()
 Zistí aktuálnu hodnotu
 uhlovej rýchlosti
 (rýchlosti otáčania) tohto robota.
void
uhlovaRychlost(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
void
uhlováRýchlosť(double uhlováRýchlosť)
 Nastaví novú hodnotu uhlovej
 rýchlosti (rýchlosti otáčania) tohto robota.
void
uhlovaRychlost(double uhlováRýchlosť,
              boolean aktivuj)
 Alias pre uhlováRýchlosť.
void
uhlováRýchlosť(double uhlováRýchlosť,
              boolean aktivuj)
Nastaví novú hodnotu uhlovej rýchlosti (rýchlosti
 otáčania) tohto robota.
double
uhloveZrychlenie()
 Alias pre uhlovéZrýchlenie.
double
uhlovéZrýchlenie()
 Zistí hodnotu uhlového zrýchlenia (zrýchlenia
 otáčania) tohto robota.
void
uhloveZrychlenie(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
void
uhlovéZrýchlenie(double uhlovéZrýchlenie)
 Nastaví robotu novú hodnotu
 uhlového zrýchlenia (zrýchlenia otáčania).
void
uhloveZrychlenie(double uhlovéZrýchlenie,
                boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
void
uhlovéZrýchlenie(double uhlovéZrýchlenie,
                boolean aktivuj)
Metóda funguje rovnako ako metóda uhlovéZrýchlenie(double
 uhlovéZrýchlenie), ale dovoľuje programátorovi určiť, či
 smie byť robot (v prípade zadania nenulového zrýchlenia)
 aktivovaný.
double
uhol()
 Zistí aktuálny uhol (smer) robota.
void
uhol(double uhol)
 Nasmeruje robot podľa zadaného uhla.
double
uhol(double Δx,
    double Δy)
 Alias pre smer.
void
uhol(Smer objekt)
 Nasmeruje robot podľa zadaného
 objektu.
double
uholDoma()
 Zistí aktuálny smer (uhol)
 domovskej pozície robota.
void
uholDoma(double uhol)
 Nastaví aktuálny smer (uhol)
 domovskej pozície robota.
double
uholNa(double x,
      double y)
 Alias pre smerNa.
double
uholNa(Poloha objekt)
 Alias pre smerNa.
double
uholNa(Shape tvar)
 Alias pre smerNa.
double
uholNaCiel()
 Alias pre smerNaCieľ.
double
uholNaCieľ()
 Alias pre smerNaCieľ.
double
uholNaMys()
 Alias pre smerNaMyš.
double
uholNaMyš()
 Alias pre smerNaMyš.
double
uholOtacania()
 Alias pre uholOtáčania.
void
uholOtacania(double uhol)
 Alias pre uholOtáčania.
double
uholOtáčania()
 Zistí aktuálnu hodnotu otáčania
 robota pri použití bezparametrických verzií metód
 vpravo, vľavo a iných.
void
uholOtáčania(double uhol)
 Zmení hodnotu otáčania robota pri
 použití bezparametrických verzií metód
 vpravo, vľavo a iných.
void
ukaz()
 Alias pre ukáž.
void
ukaz(boolean ukáž)
 Alias pre ukáž.
void
ukazDoma()
 Alias pre viditeľnýDoma.
void
ukáž()
Zobrazí tento robot.
void
ukáž(boolean ukáž)
Zobrazí alebo skryje tento robot podľa hodnoty
 parametra ukáž.
void
ukážDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov zobrazí.
void
ukoncenie()
 Alias pre ukončenie.
void
ukoncenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                int návratovýKód)
 Alias pre ukončenieProcesu.
void
ukoncenieUpravyTextu(String text,
                    int spôsob)
 Alias pre ukončenieÚpravyTextu.
void
ukončenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
ukončenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                int návratovýKód)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
ukončenieÚpravyTextu(String text,
                    int spôsob)
Táto metóda je predvolene prázdna.
void
ulozDoSuboru(Súbor súbor)
 Alias pre uložDoSúboru.
void
uložDoSúboru(Súbor súbor)
Uloží vlastnosti robota do zadaného súboru.
void
upravCiel(double x,
         double y)
 Alias pre upravCieľ.
void
upravCieľ(double x,
         double y)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa.
void
upravCiel(double x,
         double y,
         boolean spusti)
 Alias pre upravCieľ.
void
upravCieľ(double x,
         double y,
         boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa.
void
upravCiel(Poloha objekt)
 Alias pre upravCieľ.
void
upravCieľ(Poloha objekt)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa.
void
upravCiel(Poloha objekt,
         boolean spusti)
 Alias pre upravCieľ.
void
upravCieľ(Poloha objekt,
         boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa.
void
upravCiel(Shape tvar)
 Alias pre upravCieľ.
void
upravCieľ(Shape tvar)
Ak je smerovanie do cieľa aktívne, upraví cieľové súradnice
 smerom do stredu hraníc[1] zadaného tvaru, inak
 má rovnaký efekt ako volanie metódy cieľ.
void
upravCiel(Shape tvar,
         boolean spusti)
 Alias pre upravCieľ.
void
upravCieľ(Shape tvar,
         boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice smerom do stredu hraníc[1] zadaného
 tvaru a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa.
void
upravCielNaMys()
 Alias pre upravCieľNaMyš.
void
upravCielNaMys(boolean spusti)
 Alias pre upravCieľNaMyš.
void
upravCieľNaMyš()
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice podľa aktuálnych súradníc myši a v prípade,
 že sa nové súradnice dostatočne prekrývajú s aktuálnou
 polohou robota ukočí smerovanie do cieľa.
void
upravCieľNaMyš(boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice podľa aktuálnych súradníc myši a v prípade, že
 sa nové súradnice dostatočne prekrývajú s aktuálnou
 polohou robota ukočí smerovanie do cieľa.
void
upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
void
upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti tohto robota.
boolean
upravText(String text)
Táto metóda umožní používateľovi upraviť text priamo na plátne.
boolean
upravText(String text,
         double šírka)
Táto metóda umožní používateľovi upraviť text priamo na plátne.
void
uvolnenieKlavesu()
 Alias pre uvoľnenieKlávesu.
void
uvoľnenieKlávesu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
uvolnenieTlacidlaMysi()
 Alias pre uvoľnenieTlačidlaMyši.
void
uvoľnenieTlačidlaMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
uvolni()
 Alias pre uvoľni.
void
uvoľni()
Automaticky uvoľní robot z úloh tvorby (prípadne kreslenia)
 oblasti.
void
uvolni(Oblasť oblasť)
 Alias pre uvoľni.
void
uvoľni(Oblasť oblasť)
Uvoľní tento robot z úloh tvorby (prípadne kreslenia) zadanej
 oblasti.
void
uzavriCestu()
Ukončí záznam cesty, uzavrie cestu (prepojí posledný bod
 s prvým bodom posledného kresleného segmentu) a ponechá ju na
 ďalšie použitie.
void
vajce(double polomer,
     String... parametre)
Nakreslí vajce.
double
velkost()
 Alias pre veľkosť.
double
veľkosť()
 Zistí aktuálnu veľkosť robota.
void
velkost(double veľkosť)
 Alias pre veľkosť.
void
veľkosť(double veľkosť)
 Nastaví novú veľkosť robota.
Double
velkostDoma()
 Alias pre veľkosťDoma.
Double
veľkosťDoma()
Zistí, ako sa mení veľkosť robota po jeho prechode na
 domovskú pozíciu.
void
velkostDoma(Double nováVeľkosť)
 Alias pre veľkosťDoma.
void
veľkosťDoma(Double nováVeľkosť)
Nastaví alebo zruší ovplyvňovanie veľkosti robota po jeho
 prechode na domovskú pozíciu.
void
velkostPodlaMierky()
 Alias pre veľkosťPodľaMierky.
void
veľkosťPodľaMierky()
Nastaví veľkosť robota podľa aktuálnej mierky tak, aby sa hodnota mierky vyrovnala na 1.0.
void
velkostPodlaMierky(double zmena)
 Alias pre veľkosťPodľaMierky.
void
veľkosťPodľaMierky(double zmena)
Nastaví veľkosť robota podľa aktuálnej mierky tak, aby nová hodnota mierky nadobudla zadanú hodnotu.
boolean
viditelny()
 Alias pre viditeľný.
boolean
viditeľný()
Zistí, či je robot viditeľný alebo skrytý.
Boolean
viditelnyDoma()
 Alias pre viditeľnýDoma.
Boolean
viditeľnýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu.
void
vlastnyTvar(Image obrázok)
 Alias pre vlastnýTvar.
void
vlastnýTvar(Image obrázok)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
void
vlastnyTvar(Image obrázok,
           boolean upravVeľkosťRobota)
 Alias pre vlastnýTvar.
void
vlastnýTvar(Image obrázok,
           boolean upravVeľkosťRobota)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
void
vlastnyTvar(KreslenieTvaru tvar)
 Alias pre vlastnýTvar.
void
vlastnýTvar(KreslenieTvaru tvar)
Umožní kresliť vlastný tvar robota namiesto klasického tvaru.
void
vlastnyTvar(String súbor)
 Alias pre vlastnýTvar.
void
vlastnýTvar(String súbor)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
void
vlastnyTvar(String súbor,
           boolean upravVeľkosťRobota)
 Alias pre vlastnýTvar.
void
vlastnýTvar(String súbor,
           boolean upravVeľkosťRobota)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
void
vlavo()
 Alias pre vľavo.
void
vľavo()
Prikáže robotu, aby sa obrátil o uhol otáčania (predvolene 45° – s ohľadom
 na definície hodnôt
 konštát v rozhraní Smer) proti
 smeru hodinových ručičiek.
void
vlavo(double uhol)
 Alias pre vľavo.
void
vľavo(double uhol)
Prikáže robotu, aby sa obrátil o zadaný uhol proti smeru
 hodinových ručičiek.
void
volbaKontextovejPolozky()
 Alias pre voľbaKontextovejPoložky.
void
voľbaKontextovejPoložky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
volbaPolozkyPonuky()
 Alias pre voľbaPoložkyPonuky.
void
voľbaPoložkyPonuky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
volbaSystemovejIkony()
 Alias pre voľbaSystémovejIkony.
void
voľbaSystémovejIkony()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
volbaSystemovejPolozky()
 Alias pre voľbaSystémovejPoložky.
void
voľbaSystémovejPoložky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
volbaTlacidla()
 Alias pre voľbaTlačidla.
void
voľbaTlačidla()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
vpravo()
Prikáže robotu, aby sa obrátil o uhol otáčania (predvolene 45° – s ohľadom
 na definície hodnôt
 konštát v rozhraní Smer) v smere
 hodinových ručičiek.
void
vpravo(double uhol)
Prikáže robotu, aby sa obrátil o zadaný uhol v smere
 hodinových ručičiek.
void
vpred()
 Alias pre dopredu.
void
vpred(double dĺžka)
 Alias pre dopredu.
int
vrstva()
 Vráti poradové číslo vrstvy kreslenia,
 v ktorej je umiestnený tento robot.
void
vrstva(int vrstva)
 Preradí tento robot do vrstvy
 s určeným poradovým číslom.
void
vstupDoKlucovejFazyDrahy(int fáza)
 Alias pre vstupDoKľúčovejFázyDráhy.
void
vstupDoKľúčovejFázyDráhy(int fáza)
Táto metóda je predvolene prázdna.
boolean
vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
boolean
vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
void
vylejFarbu()
Robot vyleje na svojej pozícii na aktívne plátno alebo do
 obrázka, kam bolo presmerované jeho kreslenie, svoju
 farbu, ktorá sa odtiaľ rozšíri po okraje
 okolitej kresby.
void
vymazanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
vymazPosobisko()
 Alias pre vymažPôsobisko.
void
vymažPôsobisko()
Vymaže pôsobisko, čo je oblasť obdĺžnika, v rámci ktorého
 robot kreslil od posledného vymazania pôsobiska alebo od
 posledného použitia niektorej z metód domov.
void
vypln()
 Alias pre vyplň.
void
vyplň()
Vyplní aktívne plátno alebo obrázok, do ktorého má robot
 presmerované kreslenie, aktuálnou farbou kreslenia alebo
 náterom robota.
void
vyplnajTvary()
 Alias pre vypĺňajTvary.
void
vypĺňajTvary()
Upraví spôsob kreslenia tvarov generovaných robotom.
void
vyplnajTvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
void
vypĺňajTvary(boolean vypĺňaj)
Upraví spôsob kreslenia tvarov generovaných robotom.
void
vyplnajUtvary()
 Alias pre vypĺňajTvary.
void
vypĺňajÚtvary()
 Alias pre vypĺňajTvary.
void
vyplnajUtvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
void
vypĺňajÚtvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
boolean
vyplnaTvary()
 Alias pre vypĺňajTvary.
boolean
vypĺňaTvary()
Zistí, či je aktivované vypĺňanie tvarov generovaných robotom
 alebo nie.
boolean
vyplnaUtvary()
 Alias pre vypĺňajTvary.
boolean
vypĺňaÚtvary()
 Alias pre vypĺňajTvary.
void
vyplnCestu()
 Alias pre vyplňCestu.
void
vyplňCestu()
Ukončí záznam cesty a vyplní zaznamenanú cestu aktuálnou
 farbou robota.
Shape
vyplnElipsu()
 Alias pre vyplňElipsu.
Shape
vyplňElipsu()
Vyplní elipsu so stredom na mieste robota, pootočenú v smere
 robota, s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru
Shape
vyplnElipsu(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplňElipsu(double pomer)
Vyplní elipsu so stredom na mieste robota, pootočenú v smere
 robota, s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru
Shape
vyplnElipsu(double a,
           double b)
 Alias pre vyplňElipsu.
Shape
vyplňElipsu(double a,
           double b)
Vyplní elipsu so zadanými rozmermi, so stredom na mieste
 robota a pootočenú v smere robota (predvolený smer robota je
 90°)
Shape
vyplnenaElipsa()
 Alias pre vyplňElipsu.
Shape
vyplnenáElipsa()
 Alias pre vyplňElipsu.
Shape
vyplnenaElipsa(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplnenáElipsa(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplnenaElipsa(double a,
              double b)
 Alias pre vyplňElipsu.
Shape
vyplnenáElipsa(double a,
              double b)
 Alias pre vyplňElipsu.
Shape
vyplnenaHviezda()
 Alias pre vyplňHviezdu.
Shape
vyplnenáHviezda()
 Alias pre vyplňHviezdu.
Shape
vyplnenaHviezda(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplnenáHviezda(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplnenehoObdlznika()
 Alias pre vyplňObdĺžnik.
Shape
vyplnenehoObdlznika(double pomer)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenehoObdlznika(double a,
                   double b)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenéhoObdĺžnika()
 Alias pre vyplňObdĺžnik.
Shape
vyplnenéhoObdĺžnika(double pomer)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenéhoObdĺžnika(double a,
                   double b)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenehoStvorca()
 Alias pre vyplňŠtvorec.
Shape
vyplnenehoStvorca(double polomer)
 Alias pre vyplňŠtvorec.
Shape
vyplnenéhoŠtvorca()
 Alias pre vyplňŠtvorec.
Shape
vyplnenéhoŠtvorca(double polomer)
 Alias pre vyplňŠtvorec.
Shape
vyplnenejElipsy()
 Alias pre vyplňElipsu.
Shape
vyplnenejElipsy(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplnenejElipsy(double a,
               double b)
 Alias pre vyplňElipsu.
Shape
vyplnenejHviezdy()
 Alias pre vyplňHviezdu.
Shape
vyplnenejHviezdy(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplnenuElipsu()
 Alias pre vyplňElipsu.
Shape
vyplnenúElipsu()
 Alias pre vyplňElipsu.
Shape
vyplnenuElipsu(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplnenúElipsu(double pomer)
 Alias pre vyplňElipsu.
Shape
vyplnenuElipsu(double a,
              double b)
 Alias pre vyplňElipsu.
Shape
vyplnenúElipsu(double a,
              double b)
 Alias pre vyplňElipsu.
Shape
vyplnenuHviezdu()
 Alias pre vyplňHviezdu.
Shape
vyplnenúHviezdu()
 Alias pre vyplňHviezdu.
Shape
vyplnenuHviezdu(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplnenúHviezdu(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplnenyObdlznik()
 Alias pre vyplňObdĺžnik.
Shape
vyplnenyObdlznik(double pomer)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenyObdlznik(double a,
                double b)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenýObdĺžnik()
 Alias pre vyplňObdĺžnik.
Shape
vyplnenýObdĺžnik(double pomer)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenýObdĺžnik(double a,
                double b)
 Alias pre vyplňObdĺžnik.
Shape
vyplnenyStvorec()
 Alias pre vyplňŠtvorec.
Shape
vyplnenyStvorec(double polomer)
 Alias pre vyplňŠtvorec.
Shape
vyplnenýŠtvorec()
 Alias pre vyplňŠtvorec.
Shape
vyplnenýŠtvorec(double polomer)
 Alias pre vyplňŠtvorec.
Shape
vyplnHviezdu()
 Alias pre vyplňHviezdu.
Shape
vyplňHviezdu()
Vyplní hviezdu so stredom na mieste robota, obrátenú
 v smere robota a určenú rozmerom opísanej kružnice
 s polomerom veľkosti robota
Shape
vyplnHviezdu(double polomer)
 Alias pre vyplňHviezdu.
Shape
vyplňHviezdu(double polomer)
Vyplní päťcípu hviezdu so stredom na mieste robota, orientovanú
 v smere robota a určenú polomerom opísanej kružnice
Shape
vyplnObdlznik()
 Alias pre vyplňObdĺžnik.
Shape
vyplnObdlznik(double pomer)
 Alias pre vyplňObdĺžnik.
Shape
vyplnObdlznik(double a,
             double b)
 Alias pre vyplňObdĺžnik.
Shape
vyplňObdĺžnik()
Vyplní obdĺžnik so stredom na mieste robota, obrátený
 v smere robota a určený rozmermi vpísanej elipsy
Shape
vyplňObdĺžnik(double pomer)
Vyplní obdĺžnik so stredom na mieste robota, obrátený
 v smere robota a určený rozmermi vpísanej elipsy
Shape
vyplňObdĺžnik(double a,
             double b)
Vyplní obdĺžnik so stredom na mieste robota, obrátený v smere
 robota a určený rozmermi vpísanej elipsy (predvolený smer robota
 je 90°)
void
vyplnOblast(Area oblasť)
 Alias pre vyplňOblasť.
void
vyplňOblasť(Area oblasť)
Vyplní plochu zadanej oblasti farbou nastavenou pre tento
 robot, pričom vypĺňanú oblasť rotuje podľa smeru robota (za
 východisko je považovaných 90°; odchýlka v kladom alebo
 zápornom smere náležite rotuje oblasť) a posúva ju o súradnice
 robota na plátne (stred sa nachádza v bode [0, 0] – v strede
 plátna; ak je robot v strede plátna, poloha oblasti sa
 nezmení).
void
vyplnOblast(Area oblasť,
           Image výplň)
 Alias pre vyplňOblasť.
void
vyplňOblasť(Area oblasť,
           Image výplň)
Vyplní plochu zadanej oblasti zadanou textúrou, pričom oblasť
 rotuje podľa smeru[1] robota a posúva ju
 o súradnice[2] robota na plátne.
void
vyplnOblast(Area oblasť,
           String súbor)
 Alias pre vyplňOblasť.
void
vyplňOblasť(Area oblasť,
           String súbor)
Vyplní plochu zadanej oblasti zadanou textúrou, pričom oblasť
 rotuje podľa smeru[1] robota a posúva ju
 o súradnice[2] robota na plátne.
Shape
vyplnStvorec()
 Alias pre vyplňŠtvorec.
Shape
vyplnStvorec(double polomer)
 Alias pre vyplňŠtvorec.
Shape
vyplňŠtvorec()
Vyplní štvorec so stredom na mieste robota, obrátený v smere
 robota a určený polomerom vpísanej kružnice s polomerom
 veľkosti robota
Shape
vyplňŠtvorec(double polomer)
Vyplní štvorec so stredom na mieste robota, obrátený v smere
 robota a určený polomerom vpísanej kružnice
Shape
vyplnTvar(Shape tvar)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar)
Vyplní plochu zadaného tvaru farbou nastavenou pre tento
 robot.
Shape
vyplnTvar(Shape tvar,
         boolean upravRobotom)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar,
         boolean upravRobotom)
Vyplní plochu zadaného tvaru farbou nastavenou pre tento
 robot.
Shape
vyplnTvar(Shape tvar,
         Image výplň)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar,
         Image výplň)
Vyplní plochu zadaného tvaru zadanou textúrou.
Shape
vyplnTvar(Shape tvar,
         Image výplň,
         boolean upravRobotom)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar,
         Image výplň,
         boolean upravRobotom)
Vyplní plochu zadaného tvaru zadanou textúrou.
Shape
vyplnTvar(Shape tvar,
         String súbor)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar,
         String súbor)
Vyplní plochu zadaného tvaru zadanou textúrou.
Shape
vyplnTvar(Shape tvar,
         String súbor,
         boolean upravRobotom)
 Alias pre vyplňTvar.
Shape
vyplňTvar(Shape tvar,
         String súbor,
         boolean upravRobotom)
Vyplní plochu zadaného tvaru zadanou textúrou.
void
vypniGyroskop()
Vypne gyroskopické vyvažovanie kreslenia tvaru.
void
vypniOhranicenie()
 Alias pre vypniOhraničenie.
void
vypniOhraničenie()
Dočasne vypne ohraničenie robota, ak je zapnuté.
double
vyska()
 Alias pre výška.
void
vyska(double výška)
 Alias pre výška.
int
vyskaRiadka()
 Alias pre výškaRiadka.
void
vyssie()
 Alias pre vyššie.
double
výška()
 Vráti aktuálnu výšku robota.
void
výška(double výška)
 Nastaví novú výšku robota.
int
výškaRiadka()
Zistí výšku riadka textu v bodoch pri použití aktuálneho
 typu písma.
void
vyššie()
Presunie tento robot o úroveň vyššie v rámci poradia
 kreslenia robotov s ohľadom na umiestnenie robotov do vrstiev.
Zoznam&lt;Bod&gt;
vytvorDrahu()
 Alias pre vytvorDráhu.
Zoznam&lt;Bod&gt;
vytvorDráhu()
Vytvorí z aktuálnej cesty dráhu so
 zrnitosťou rovnou hodnote aktuálnej rýchlosti robota.
Zoznam&lt;Bod&gt;
vytvorDrahu(double zrnitosť)
 Alias pre vytvorDráhu.
Zoznam&lt;Bod&gt;
vytvorDráhu(double zrnitosť)
Vytvorí z aktuálnej cesty dráhu so
 zadanou zrnitosťou.
Zoznam&lt;Bod&gt;
vytvorDrahu(Shape tvar)
 Alias pre vytvorDráhu.
Zoznam&lt;Bod&gt;
vytvorDráhu(Shape tvar)
Vytvorí zo zadaného tvaru dráhu so zrnitosťou rovnou
 hodnote aktuálnej rýchlosti
 robota.
Zoznam&lt;Bod&gt;
vytvorDrahu(Shape tvar,
           double zrnitosť)
 Alias pre vytvorDráhu.
Zoznam&lt;Bod&gt;
vytvorDráhu(Shape tvar,
           double zrnitosť)
Vytvorí zo zadaného tvaru dráhu so zadanou zrnitosťou.
Zoznam&lt;Double&gt;
vytvorMapuSmerov()
Vytvorí z aktuálnej cesty dráhu so
 zrnitosťou rovnou hodnote aktuálnej rýchlosti robota a z nej vytvorí mapu smerov, ktoré
 budú použité pri pohybe robota po jeho aktuálne dráhe.
Zoznam&lt;Double&gt;
vytvorMapuSmerov(double zrnitosť)
Vytvorí z aktuálnej cesty dráhu so
 zadanou zrnitosťou a z nej vytvorí mapu smerov, ktoré budú
 použité pri pohybe robota po jeho aktuálne dráhe.
Zoznam&lt;Double&gt;
vytvorMapuSmerov(Shape tvar)
Vytvorí zo zadaného tvaru dráhu so zrnitosťou rovnou hodnote
 aktuálnej rýchlosti robota a z nej
 vytvorí mapu smerov, ktoré budú použité pri pohybe robota po
 jeho aktuálne dráhe.
Zoznam&lt;Double&gt;
vytvorMapuSmerov(Shape tvar,
                double zrnitosť)
Vytvorí zo zadaného tvaru dráhu so zadanou zrnitosťou a z nej
 vytvorí mapu smerov, ktoré budú použité pri pohybe robota po
 jeho aktuálne dráhe.
void
vyzviRobotov()
 Alias pre vyzviRoboty.
void
vyzviRobotov(int kľúč)
 Alias pre vyzviRoboty.
void
vyzviRobotov(int kľúč,
            boolean obrátene)
 Alias pre vyzviRoboty.
void
vyzviRoboty()
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia
 prijatieVýzvy,
 pričom autorom výzvy bude tento robot a hodnota argumentu
 kľúč bude rovná -1.
void
vyzviRoboty(int kľúč)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy, pričom
 autorom výzvy bude tento robot.
void
vyzviRoboty(int kľúč,
           boolean obrátene)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy, pričom
 autorom výzvy bude tento robot.
void
vzad()
Prikáže robotu, aby cúvol z aktuálneho miesta o hodnotu
 svojej veľkosti (v aktuálnom
 smere).
void
vzad(double dĺžka)
Prikáže robotu, aby cúvol z aktuálneho miesta o zadanú
 dĺžku (v aktuálnom smere).
double
vzdialenost()
 Alias pre vzdialenosť.
double
vzdialenosť()
Zistí, aká je vzdialenosť tohto robota od stredu
 súradnicovej sústavy.
double
vzdialenostK(double súradnicaBoduX,
            double súradnicaBoduY)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(double súradnicaBoduX,
            double súradnicaBoduY)
 Alias pre vzdialenosťOd.
double
vzdialenostK(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenostK(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenosťK(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenostKMysi()
 Alias pre vzdialenosťOdMyši.
double
vzdialenosťKMyši()
 Alias pre vzdialenosťOdMyši.
double
vzdialenostOd(double súradnicaBoduX,
             double súradnicaBoduY)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(double súradnicaBoduX,
             double súradnicaBoduY)
Zistí vzdialenosť medzi týmto robotom a zadanými súradnicami na
 podlahe (strope).
double
vzdialenostOd(Poloha objekt)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(Poloha objekt)
Zistí vzdialenosť medzi týmto a zadaným objektom.
double
vzdialenostOd(Shape tvar)
 Alias pre vzdialenosťOd.
double
vzdialenosťOd(Shape tvar)
Zistí vzdialenosť medzi týmto robotom a stredom
 hraníc[1] zadaného tvaru.
double
vzdialenostOdMysi()
 Alias pre vzdialenosťOdMyši.
double
vzdialenosťOdMyši()
Zistí vzdialenosť medzi týmto robotom a aktuálnymi súradnicami
 myši.
void
vzniklaChyba(GRobotException.Chyba chyba)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
double[]
vzorCiary()
 Alias pre vzorČiary.
void
vzorCiary(double[] novýVzor)
 Alias pre vzorČiary.
void
vzorCiary(double začiatokVzoru,
         double... pokračovanieVzoru)
 Alias pre vzorČiary.
double[]
vzorČiary()
Vráti aktuálny vzor čiary pera.
void
vzorČiary(double[] novýVzor)
Upraví vzor čiary pera.
void
vzorČiary(double začiatokVzoru,
         double... pokračovanieVzoru)
Upraví vzor čiary pera.
double[]
vzorPera()
Vráti aktuálny vzor čiary pera.
void
vzorPera(double[] novýVzor)
Upraví vzor čiary pera.
void
vzorPera(double začiatokVzoru,
        double... pokračovanieVzoru)
Upraví vzor čiary pera.
void
za(GRobot ktorého)
Presunie tento robot za zadaný robot (z pohľadu zoradenia
 robotov vo vnútornom zozname robotov, pričom umiestnenie
 robotov do vrstiev zostane neovplyvnené).
void
zabrzdi()
Prikáže robotu začať brzdiť a automaticky zastaviť pri dosiahnutí nulovej rýchlosti
void
zabrzdi(double zrýchlenie)
Prikáže robotu začať brzdiť so zadaným „zrýchlením“
 (spomalením) a automaticky zastaviť
 pri dosiahnutí nulovej rýchlosti.
void
zacniCestu()
 Alias pre začniCestu.
void
zacniCestu(boolean rešpektujPolohuPera)
 Alias pre začniCestu.
void
zacniCuvat()
 Alias pre začniCúvať.
void
zacniKreslenie()
 Alias pre začniKreslenie.
void
zacniKreslenie(Graphics2D g2d)
 Alias pre začniKreslenie.
void
začniCestu()
Začne záznam cesty robota.
void
začniCestu(boolean rešpektujPolohuPera)
Začne záznam novej cesty robota.
void
začniCúvať()
Metóda slúži na aktiváciu robota, ktorý má nenulové
 zrýchlenie
void
začniKreslenie()
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím interného (aktívneho) grafického objektu
 robota dostupného aj prostredníctvom metódy grafika.
void
začniKreslenie(Graphics2D g2d)
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím externého grafického objektu Graphics2D.
void
zadanieZnaku()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zachovajFarbuDoma()
Po použití tejto metódy nebude farba robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajHrubkuCiaryDoma()
 Alias pre zachovajHrúbkuČiaryDoma.
void
zachovajHrúbkuČiaryDoma()
Po použití tejto metódy nebude hrúbka pera robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajHrubkuPeraDoma()
 Alias pre zachovajHrúbkuPeraDoma.
void
zachovajHrúbkuPeraDoma()
Po použití tejto metódy nebude hrúbka pera robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajPeroDoma()
Po použití tejto metódy nebude stav polohy pera pri použití
 niektorej modifikácie metódy domov
 ovplyvňovaný.
void
zachovajPismoDoma()
 Alias pre zachovajPísmoDoma.
void
zachovajPísmoDoma()
Po použití tejto metódy nebude písmo robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajPomerDoma()
Po použití tejto metódy nebude pomer veľkosti robota
 (šírky a výšky) pri použití niektorej modifikácie metódy
 domov ovplyvňovaný.
void
zachovajPootocenieTvaruDoma()
 Alias pre zachovajPootočenieTvaruDoma.
void
zachovajPootočenieTvaruDoma()
Po použití tejto metódy nebude stav pootočenia tvaru robota
 pri použití niektorej modifikácie metódy domov ovplyvňovaný.
void
zachovajPriehladnostDoma()
 Alias pre zachovajPriehľadnosťDoma.
void
zachovajPriehľadnosťDoma()
Po použití tejto metódy nebude priehľadnosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajRozmerDoma()
Volanie tejto metódy je ekvivalentné volaniu tejto
 dvojice metód:
 
 zachovajVeľkosťDoma
 zachovajPomerDoma
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
void
zachovajVelkostDoma()
 Alias pre zachovajVeľkosťDoma.
void
zachovajVeľkosťDoma()
Po použití tejto metódy nebude veľkosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajViditelnostDoma()
 Alias pre zachovajViditeľnosťDoma.
void
zachovajViditeľnosťDoma()
Po použití tejto metódy nebude viditeľnosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
void
zachovajVzorCiaryDoma()
 Alias pre zachovajVzorČiaryDoma.
void
zachovajVzorČiaryDoma()
Zruší zmenu parametrov čiarkovania, vrátane jeho posunu,
 pri prechode robota domov.
void
zachovajVzorPeraDoma()
Zruší zmenu parametrov čiarkovania, vrátane jeho posunu,
 pri prechode robota domov.
void
zamestnaj(Oblasť oblasť)
Zamestná tento robot na účely tvorby, prípadne kreslenia,
 zadanej oblasti.
boolean
zamestnany()
 Alias pre zamestnaný.
boolean
zamestnaný()
Overí, či je tento robot zamestnaný pre potreby niektorej
 oblasti.
boolean
zamestnany(Oblasť oblasť)
 Alias pre zamestnaný.
boolean
zamestnaný(Oblasť oblasť)
Overí, či je tento robot zamestnaný pre potreby
 určenej oblasti.
double[]
zaoblenie()
Zistí aktuálne hodnoty šírky a výšky zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
void
zaoblenie(double zaoblenie)
Nastaví hodnoty zaoblenia rohov pravouhlých útvarov
 generovaných robotom (štvorca a obdĺžnika).
void
zaoblenie(double zaoblenieX,
         double zaoblenieY)
Nastaví šírku a výšku zaoblenia rohov pravouhlých útvarov
 generovaných robotom (štvorca a obdĺžnika).
double
zaoblenieX()
 Zistí aktuálnu hodnotu šírky
 zaoblenia rohov pravouhlých útvarov generovaných robotom
 (štvorca a obdĺžnika).
void
zaoblenieX(double zaoblenieX)
 Upraví šírku zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
double
zaoblenieY()
 Zistí aktuálnu hodnotu výšky
 zaoblenia rohov pravouhlých útvarov generovaných robotom
 (štvorca a obdĺžnika).
void
zaoblenieY(double zaoblenieY)
 Upraví výšku zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
void
zapisKonfiguraciu(Súbor subor)
 Alias pre zapíšKonfiguráciu.
void
zapíšKonfiguráciu(Súbor súbor)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zapniOhranicenie()
 Alias pre zapniOhraničenie.
void
zapniOhraničenie()
Opätovne zapne ohraničenie robota, ak bolo predtým aktívne, ale
 bolo vypnuté metódou vypniOhraničenie.
void
zastav()
Deaktivuje robot (napríklad po dosiahnutí cieľa).
void
zastav(boolean ajČasovač)
Metóda má rovnaký účel ako metóda zastav() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak už nie je v činnosti).
void
zastav(int trvaniePasivity)
Metóda má rovnaký účel ako metóda zastav(), ibaže dovoľuje programátorovi naplánovať
 automatickú aktiváciu.
void
zastav(int trvaniePasivity,
      boolean ajČasovač)
Metóda spája funkcionalitu metód zastav(trvaniePasivity) a zastav(ajČasovač).
void
zastavenie()
Táto metóda je predvolene prázdna.
void
zastavenieAnimacie(Obrázok obrázok)
 Alias pre zastavenieAnimácie.
void
zastavenieAnimácie(Obrázok obrázok)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zastaveniePosunu()
Táto metóda je predvolene prázdna.
boolean
zastaviPoSpomaleni()
 Alias pre zastavíPoSpomalení.
boolean
zastavíPoSpomalení()
Zistí, či má robot prikázané automaticky zastaviť pri najbližšom dosiahnutí nulovej
 rýchlosti.
boolean
zastaviPoSpomaleniPosunu()
 Alias pre zastavíPoSpomaleníPosunu.
boolean
zastavíPoSpomaleníPosunu()
Zistí, či má robot prikázané automaticky zastaviť posun pri najbližšom dosiahnutí
 nulovej rýchlosti posunu.
boolean
zastaviVCieli()
 Alias pre zastavíVCieli.
boolean
zastavíVCieli()
Zistí, či má robot prikázané automaticky zastaviť po dosiahnutí cieľa.
void
zastavNaDrahe()
 Alias pre zastavNaDráhe.
void
zastavNaDráhe()
Deaktivuje robot a ukončí jeho pohyb po dráhe.
void
zastavPoSpomaleni()
 Alias pre zastavPoSpomalení.
void
zastavPoSpomalení()
Prikáže robotu, aby najbližšie, keď dosiahne nulovú
 rýchlosť automaticky zastavil.
void
zastavPoSpomaleniPosunu()
 Alias pre zastavPoSpomaleníPosunu.
void
zastavPoSpomaleníPosunu()
Prikáže robotu, aby najbližšie, keď dosiahne nulovú
 rýchlosť posunu automaticky zastavil posun.
void
zastavPosun()
Volanie tejto metódy (či už automatické alebo ručné)
 spôsobí zastavenie pohybu v kolmom smere voči aktuálnej
 orientácii robota – zastavenie posunu.
boolean
zatvorenie()
 Alias pre zavretie.
boolean
zavretie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zavriCestu()
 Alias pre uzavriCestu.
void
zdvihniPero()
Zdvihne pero tohto robota z plátna podlahy alebo stropu.
void
zdvihniPeroDoma()
Spôsobí, že odteraz vždy pri použití niektorej modifikácie
 metódy domov zdvihne robot pero z plátna.
boolean
zmenaPolohy()
Táto metóda je predvolene prázdna.
void
zmenaPosunuListy()
 Alias pre zmenaPosunuLišty.
void
zmenaPosunuLišty()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
boolean
zmenaUhla()
Táto metóda je predvolene prázdna.
void
zmenaVelkostiOkna()
 Alias pre zmenaVeľkostiOkna.
void
zmenaVeľkostiOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zobraz()
Zobrazí tento robot.
void
zobraz(boolean zobraz)
Zobrazí alebo skryje tento robot podľa hodnoty
 parametra zobraz.
void
zobrazDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov zobrazí.
void
zobrazenie()
Táto metóda je predvolene prázdna.
void
zobrazenieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
boolean
zobrazeny()
 Alias pre zobrazený.
boolean
zobrazený()
Zistí, či je robot viditeľný alebo skrytý.
Boolean
zobrazenyDoma()
 Alias pre zobrazenýDoma.
Boolean
zobrazenýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu.
void
zrusCestu()
 Alias pre zrušCestu.
void
zrusCiel()
 Alias pre zrušCieľ.
void
zrusCiel(boolean zastav)
 Alias pre zrušCieľ.
void
zrusCielovuFarbu()
 Alias pre zrušCieľovúFarbu.
void
zrusCielovuFarbuDoma()
 Alias pre zrušCieľovúFarbuDoma.
void
zrusCielovuFarbuDoma(boolean zruš)
 Alias pre zrušCieľovúFarbuDoma.
void
zrusenieUdajov()
 Alias pre zrušenieÚdajov.
void
zrusenieVstupu()
 Alias pre zrušenieÚdajov.
boolean
zrusiCielovuFarbuDoma()
 Alias pre zrušCieľovúFarbuDoma.
void
zrusKlucovuFazuDrahy(int fáza)
 Alias pre zrušKľúčovúFázuDráhy.
void
zrusKlucovuFazuDrahy(Poloha poloha)
 Alias pre zrušKľúčovúFázuDráhy.
void
zrusKlucovuFazuDrahy(Poloha poloha,
                    double okruh)
 Alias pre zrušKľúčovúFázuDráhy.
void
zrusKoliznuOblast()
 Alias pre zrušKolíznuOblasť.
void
zrusNater()
 Alias pre zrušNáter.
void
zrusSledovanieCiela()
 Alias pre zrušCieľ.
void
zrusSledovanieCiela(boolean zastav)
 Alias pre zrušCieľ.
void
zrusSpojnice()
 Alias pre zrušSpojnice.
void
zrusSpojnicu(GRobot cieľ)
 Alias pre zrušSpojnicu.
void
zrušCestu()
Ukončí a zmaže záznam cesty.
void
zrušCieľ()
Vypne smerovanie do cieľa, ktoré bolo zapnuté niektorou
 z verzií metódy cieľ.
void
zrušCieľ(boolean zastav)
Vypne smerovanie do cieľa, ktoré bolo zapnuté niektorou
 z verzií metódy cieľ.
void
zrušCieľovúFarbu()
Zruší nastavenie cieľovej farby robota.
void
zrušCieľovúFarbuDoma()
Po použití tejto metódy bude cieľová farba robota pri
 použití niektorej modifikácie metódy domov
 zrušená.
void
zrušCieľovúFarbuDoma(boolean zruš)
Táto metóda umožňuje nastaviť správanie zmeny cieľovej
 farby robota po prechode na domovskú pozíciu.
void
zrušenieÚdajov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
void
zrušenieVstupu()
 Alias pre zrušenieÚdajov.
boolean
zrušíCieľovúFarbuDoma()
Overí, či bude po použití niektorej modifikácie metódy
 domov cieľová farba zrušená, alebo nie.
void
zrušKľúčovúFázuDráhy(int fáza)
Zruší označenie zadanej fázy dráhy za kľúčové.
void
zrušKľúčovúFázuDráhy(Poloha poloha)
Zruší označenie takej fázy dráhy za kľúčové, ktorej poloha
 je najbližšie k zadanej polohe, pričom sú počas hľadania
 vhodnej fázy na zrušenie brané do úvahy len už označené
 fázy.
void
zrušKľúčovúFázuDráhy(Poloha poloha,
                    double okruh)
Zruší označenie takej fázy dráhy za kľúčové, ktorej poloha
 je najbližšie k zadanej polohe v rámci zadaného okruhu,
 pričom sú počas hľadania vhodnej fázy na zrušenie brané do
 úvahy len už označené fázy.
void
zrušKolíznuOblasť()
 Zruší kolíznu oblasť.
void
zrušNáter()
Zruší definíciu náteru grafického robota.
void
zrušSledovanieCieľa()
 Alias pre zrušCieľ.
void
zrušSledovanieCieľa(boolean zastav)
 Alias pre zrušCieľ.
void
zrušSpojnice()
Zruší všetky spojnice smerujúce k tomuto aj od tohto robota.
void
zrušSpojnicu(GRobot cieľ)
Zruší jestvujúcu spojnicu medzi týmto a zadaným robotom.
double
zrychlenie()
 Alias pre zrýchlenie.
double
zrýchlenie()
 Zistí hodnotu zrýchlenia tohto robota.
void
zrychlenie(double zrýchlenie)
 Alias pre zrýchlenie.
void
zrýchlenie(double zrýchlenie)
 Nastaví robotu novú hodnotu
 zrýchlenia.
void
zrychlenie(double zrýchlenie,
          boolean aktivuj)
 Alias pre zrýchlenie.
void
zrýchlenie(double zrýchlenie,
          boolean aktivuj)
Metóda funguje rovnako ako metóda zrýchlenie(double zrýchlenie), ale
 dovoľuje programátorovi určiť, či smie byť robot
 (v prípade zadania nenulového zrýchlenia) aktivovaný.
double
zrychlenieOtacania()
 Alias pre uhlovéZrýchlenie.
void
zrychlenieOtacania(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
void
zrychlenieOtacania(double uhlovéZrýchlenie,
                  boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
double
zrýchlenieOtáčania()
 Alias pre uhlovéZrýchlenie.
void
zrýchlenieOtáčania(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
void
zrýchlenieOtáčania(double uhlovéZrýchlenie,
                  boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
double
zrychleniePosunu()
 Alias pre zrýchleniePosunu.
double
zrýchleniePosunu()
 Zistí hodnotu zrýchlenia posunu tohto robota.
void
zrychleniePosunu(double zrýchleniePosunu)
 Alias pre zrýchleniePosunu.
void
zrýchleniePosunu(double zrýchleniePosunu)
 Nastaví robotu novú hodnotu
 zrýchlenia posunu.
void
zrychleniePosunu(double zrýchleniePosunu,
                boolean aktivuj)
 Alias pre zrýchleniePosunu.
void
zrýchleniePosunu(double zrýchleniePosunu,
                boolean aktivuj)
Metóda funguje rovnako ako metóda zrýchleniePosunu(double
 zrýchlenie), ale dovoľuje programátorovi určiť, či smie
 byť robot (v prípade zadania nenulového zrýchlenia posunu)
 aktivovaný.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
svet
public static final Svet svet
Rámec hlavného okna aplikácie. Má využitie pri programovaní vlastného
 používateľského rozhrania aplikácie, úprave hlavnej ponuky, ikony
 a podobne…
 
 Poznámka: Na prístup k statickým prvkom triedy
 Svet by ste mali používať syntax:
 Svet.«prvok triedy»
podlaha
public static final Plátno podlaha
Reprezentácia podlahy tohto sveta. Umožňuje vykonávať s podlahou
 rôzne akcie, napríklad zálohovanie do a obnovu zo záložnej pamäte,
 čo sa dá využiť na rýchle kreslenie podkladu a podobne. (Podrobnosti
 sú v opise triedy Plátno.)
strop
public static final Plátno strop
Reprezentácia stropu tohto sveta. Umožňuje vykonávať so stropom
 rôzne akcie, napríklad zálohovanie do a obnovu zo záložnej pamäte,
 čo sa dá využiť napríklad na rýchle nakreslenie kulís objektov
 permanentne prítomných v popredí a podobne. (Podrobnosti sú v opise
 triedy Plátno.)
súbor
public final Súbor súbor
Každý robot smie otvoriť jeden textový (prípadne konfiguračný)
 súbor na čítanie alebo zápis. Podrobnosti o používaní tejto inštancie
 obsahuje opis triedy Súbor.
subor
public final Súbor subor
 Alias pre súbor.
schránka
public static final Schránka schránka
Statická inštancia triedy Schránka, ktorá
 umožňuje pracovať so schránkou operačného systému.
schranka
public static final Schránka schranka
 Alias pre schránka.
svgPodpora
public static final SVGPodpora svgPodpora
Statická inštancia triedy SVGPodpora, ktorá
 zastrešuje podporu importu a exportu vektorových tvarov vo formáte
 SVG.
Podrobnosti konštruktorov
GRobot
public GRobot()
Predvolený konštruktor nastavujúci predvolené vlastnosti robota.
 Pri prvom robote sa zároveň vytvorí svet, čo zahŕňa okno
 aplikácie, podlahu a strop.
 
 Poznámka: Každý vytvorený robot je
 automaticky zaradený na koniec vnútorného zoznamu robotov. Poradie
 v tomto zozname je možné dodatočne ovplyvniť metódami
 naVrch, naSpodok,
 vyššie, nižšie,
 pred a za.
GRobot
public GRobot(String novýTitulok)
Konštruktor umožňujúci zmenu titulku okna aplikácie sveta. Okrem
 zmeny titulku okna sa správa rovnako ako predvolený konštruktor.
Parametre:
novýTitulok – nový titulok hlavného okna
GRobot
public GRobot(int nováMaximálnaŠírka,
              int nováMaximálnaVýška)
Konštruktor umožňujúci stanovenie iných rozmerov kresliacich
 plátien (podlahy a stropu) než predvolená. Aby bol tento
 konštruktor použiteľný, svet ešte nesmie jestvovať. To znamená,
 že úprava rozmerov podlahy a stropu je možná len pri prvom
 vytvorenom robote, inak vznikne výnimka. (Častý spôsob je
 spustenie príkazu super(«rozmery
 plátna») na začiatku konštruktora
 hlavného robota.)
 Ostatné vlastnosti a správanie tohto konštruktora sú rovnaké ako
 pri predvolenom konštruktore.
 
 Upozornenie: Zväčšovanie rozmerov
 plátna znižuje výkonnosť aplikácie.
 
 V súčasnej verzii programovacieho rámca jestvuje metóda
 zmeňRozmeryPlátien, avšak
 je nevyhnutné ju používať len v odôvodnených prípadoch, keďže zmena
 rozmerov plátien je komplexný proces.
Parametre:
nováMaximálnaŠírka – nová maximálna šírka kresliacich
     plátien
nováMaximálnaVýška – nová maximálna výška kresliacich
     plátien
Výnimky:
GRobotException – ak svet už jestvuje
Pozri tiež:
Svet.zmeňRozmeryPlátien(int, int)
GRobot
public GRobot(int nováMaximálnaŠírka,
              int nováMaximálnaVýška,
              String novýTitulok)
Konštruktor umožňujúci stanovenie iných rozmerov kresliacich
 plátien (podlahy a stropu) než je predvolená a zmenu titulku
 hlavného okna aplikácie sveta. Aby bol tento konštruktor
 použiteľný, svet ešte nesmie jestvovať. To znamená, že úprava
 rozmerov podlahy a stropu je možná len pri prvom vytvorenom
 robote, inak vznikne výnimka. (Častý spôsob je spustenie
 príkazu super(«rozmery plátna a titulok
 okna») na začiatku konštruktora
 hlavného robota.)
 Ostatné vlastnosti a správanie tohto konštruktora sú podobné ako
 pri konštruktore prijímajúcom
 jeden argument (reťazec určujúci nvoý titulok hlavného okna).
 
 Upozornenie: Zväčšovanie rozmerov
 plátna znižuje výkonnosť aplikácie.
 
 V súčasnej verzii programovacieho rámca jestvuje metóda
 zmeňRozmeryPlátien, avšak
 je nevyhnutné ju používať len v odôvodnených prípadoch, keďže zmena
 rozmerov plátien je komplexný proces.
Parametre:
nováMaximálnaŠírka – nová maximálna šírka kresliacich
     plátien
nováMaximálnaVýška – nová maximálna výška kresliacich
     plátien
novýTitulok – nový titulok hlavného okna
Výnimky:
GRobotException – ak svet už jestvuje
Pozri tiež:
Svet.zmeňRozmeryPlátien(int, int)
Podrobnosti metód
hrúbkaPera
public double hrúbkaPera()
 Čítaj hrúbku čiary pera robota.
Návratová hodnota:
aktuálna hrúbka čiary pera robota
Pozri tiež:
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(), 
čiara(Stroke), 
hrúbkaPeraDoma, 
vzorČiary(double, double...), 
vzorPera(double, double...)
hrubkaPera
public double hrubkaPera()
 Alias pre hrúbkaPera.
hrúbkaČiary
public double hrúbkaČiary()
 Čítaj hrúbku čiary pera robota.
Návratová hodnota:
aktuálna hrúbka čiary pera robota
Pozri tiež:
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(), 
čiara(Stroke), 
hrúbkaČiaryDoma, 
vzorČiary(double, double...), 
vzorPera(double, double...)
hrubkaCiary
public double hrubkaCiary()
 Alias pre hrúbkaČiary.
hrúbkaPera
public void hrúbkaPera(double nováHrúbka)
 Nastav konkrétnu hrúbku čiary pera.
Parametre:
nováHrúbka – hrúbka čiary pera
Výnimky:
GRobotException – ak je hrúbka čiary pera záporná
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(), 
čiara(Stroke), 
hrúbkaPeraDoma, 
vzorČiary(double, double...), 
vzorPera(double, double...)
hrubkaPera
public void hrubkaPera(double nováHrúbka)
 Alias pre hrúbkaPera.
hrúbkaČiary
public void hrúbkaČiary(double nováHrúbka)
 Nastav konkrétnu hrúbku čiary pera.
Parametre:
nováHrúbka – hrúbka čiary pera
Výnimky:
GRobotException – ak je hrúbka čiary pera záporná
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaPera(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(), 
čiara(Stroke), 
hrúbkaČiaryDoma, 
vzorČiary(double, double...), 
vzorPera(double, double...)
hrubkaCiary
public void hrubkaCiary(double nováHrúbka)
 Alias pre hrúbkaČiary.
predvolenáHrúbkaPera
public void predvolenáHrúbkaPera()
Nastaví hrúbku čiary pera na predvolenú.
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaČiary(), 
čiara(), 
čiara(Stroke), 
predvolenýVzorČiary(), 
predvolenýVzorPera()
predvolenaHrubkaPera
public void predvolenaHrubkaPera()
 Alias pre predvolenáHrúbkaPera.
predvolenáHrúbkaČiary
public void predvolenáHrúbkaČiary()
Nastaví hrúbku čiary pera na predvolenú.
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
čiara(), 
čiara(Stroke), 
predvolenýVzorČiary(), 
predvolenýVzorPera()
predvolenaHrubkaCiary
public void predvolenaHrubkaCiary()
 Alias pre predvolenáHrúbkaČiary.
čiara
public Stroke čiara()
Vráti objekt typu Stroke vyjadrujúci
 vlastnosti aktuálnej čiary, ktorou robot kreslí.
 
 Poznámka: Predvolene ide o objekt
 typu BasicStroke, ktorý definuje
 súvislú čiaru s aktuálnou hrúbkou pera robota.
 
 Pozor! Pri každej zmene hrúbky pera je vytvorený
 nový objekt BasicStroke, ktorý
 nahradí prípadný objekt nastavený metódou čiara(nováČiara).
Návratová hodnota:
aktuálna čiara robota (objekt typu Stroke)
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(Stroke), 
vzorČiary(double, double...), 
vzorPera(double, double...)
ciara
public Stroke ciara()
 Alias pre čiara.
čiara
public void čiara(Stroke nováČiara)
Podľa zadaného objekt typu Stroke
 nastaví novú čiaru, ktorou bude robot kresliť. Ak je
 zadaná hodnota null, tak je čiara resetovaná
 podľa naposledny nastavenej hrúbky čiary.
 
 Poznámka: Nastavenie vlastnej
 čiary prostredníctvom tejto metódy nie je súčasťou
 automatickej
 konfigurácie. (Pozri napríklad metódu registrujVKonfigurácii.)
 
 Pozor! Pri každej zmene hrúbky pera je vytvorený
 nový objekt BasicStroke, ktorý
 nahradí objekt nastavený touto metódou.
 
  
 
 Užitočné zdroje:
 
 
 
Stroking and Filling Graphics
 Primitives (The Java™ Tutorials – 2D Graphics – Working
 with Geometry). Copyright © 1995, 2019 Oracle
 and/or its affiliates. Citované: 9. apríla 2020.
 
 
Use dashed stroke to draw dashed line
 in Java. java2s.com – © Demo Source and Support.
 Citované: 9. apríla 2020.
 
 
Dashed stroke : Stroke – 2D Graphics
 GUI – Java. java2s.com – © Demo Source and
 Support. Citované: 9. apríla 2020.
 
 
Flanagan, David: Stroking Lines (Java
 Foundation Triedy). Copyright © 2001 O’Reilly
 and Associates. ISBN 1-56592-488-6. Published September
 1999. Citované: 9. apríla 2020.
 
 
  
Parametre:
nováČiara – objekt typu Stroke
     vyjadrujúci vlastnosti novej čiary, ktorou bude robot
     kresliť alebo hodnota null
Pozri tiež:
hrúbkaPera(), 
hrúbkaČiary(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
predvolenáHrúbkaPera(), 
predvolenáHrúbkaČiary(), 
čiara(), 
vzorČiary(double, double...), 
vzorPera(double, double...)
ciara
public void ciara(Stroke nováČiara)
 Alias pre čiara.
tvarPodľaČiary
public Shape tvarPodľaČiary(Shape tvar)
Vyrobí zo zadaného tvaru nový tvar podľa aktuálneho typu
 ťahu. Nový tvar bude tvoriť obrys oblasti, ktorú by robot
 vyplnil kreslením zadaného tvaru svojím aktuálnym ťahom.
 
 Príklad:
 
 S pomocou niekoľkých nasledujúcich príkazov sa dá
 vytvoriť jednoduchý tvar oválu, ktorý môže byť obkresľovaný
 (čiarou) alebo vypĺňaný. (Príklad používa triedu Javy
 Shape.)
 
 
// Výroba cesty (iba čiarka dlhá 120 bodov – ovál z nej vytvorí až
// veľmi hrubá čiara, ktorá je v tomto rámci predvolene zaoblená):
odskoč(60);
začniCestu();
skoč(120);
// Nastavenie hrúbky čiary a vyrobenie tvaru z cesty:
hrúbkaČiary(150);
java.awt.Shape tvar = tvarPodľaČiary(cesta());
// Vymazanie čiarky:
Svet.vymaž();
// Nastavenie tenšej čiary a nakreslenie vyrobeného oválu:
hrúbkaČiary(15);
kresliTvar(tvar);
 
 Výsledok:
 
 
 Výsledok kreslenia
 príkladu.
Parametre:
tvar – tvar, z ktorého bude vytvorený nový tvar
     podľa aktuálneho ťahu robota
Návratová hodnota:
nový tvar vytvorený zo zadaného tvaru podľa
     aktuálneho ťahu robota
tvarPodlaCiary
public Shape tvarPodlaCiary(Shape tvar)
 Alias pre tvarPodľaČiary.
farba
public Farba farba()
 Číta farbu robota. Farba robota
 ovplyvňuje farebnosť predvoleného tvaru robota a farbu
 kreslenia (čiar aj pečiatok).
Definované:
farba v rozhraní Farebnosť
Návratová hodnota:
aktuálna farba robota (objekt typu Farba)
Pozri tiež:
farba(Color), 
farba(Farebnosť), 
farba(int, int, int), 
farba(int, int, int, int), 
predvolenáFarba(), 
farbaDoma
farba
public void farba(Color nováFarba)
 Nastav farbu robota. Nastaví
 farbu a priehľadnosť robota podľa použitého objektu
 Color (alebo odvodeného napr. Farba). Farba robota ovplyvňuje farebnosť predvoleného
 tvaru robota a farbu kreslenia (čiar aj pečiatok).
Parametre:
nováFarba – objekt farebného údajového typu určujúci
     novú farbu robota; jestvuje paleta predvolených farieb
     (pozri napríklad: biela, červená, čierna…)
Pozri tiež:
farba(), 
farba(Farebnosť), 
farba(int, int, int), 
farba(int, int, int, int), 
predvolenáFarba(), 
farbaDoma
farba
public void farba(Farebnosť podľaObjektu)
Nastaví farbu a priehľadnosť robota podľa zadaného
 objektu, ktorý musí byť implementáciou rozhrania Farebnosť.
 (Farba robota ovplyvňuje farebnosť predvoleného tvaru robota
 a farbu kreslenia – čiar aj pečiatok.)
Parametre:
podľaObjektu – objekt, podľa ktorého má byť nastavená
     farebnosť pera tohto robota
Pozri tiež:
farba(), 
farba(Color), 
farba(int, int, int), 
farba(int, int, int, int), 
predvolenáFarba()
farba
public Farba farba(int r,
                   int g,
                   int b)
Nastav farbu robota. Nastaví farbu robota podľa zadaných
 farebných zložiek.
 (Farba robota ovplyvňuje farebnosť predvoleného tvaru robota
 a farbu kreslenia – čiar aj pečiatok.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
Návratová hodnota:
objekt typu Farba – nová farba robota
Pozri tiež:
farba(), 
farba(Color), 
farba(Farebnosť), 
farba(int, int, int, int), 
predvolenáFarba()
farba
public Farba farba(int r,
                   int g,
                   int b,
                   int a)
Nastav farbu robota. Nastaví farbu a (ne)priehľadnosť robota
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
 (Farba robota ovplyvňuje farebnosť predvoleného tvaru robota
 a farbu kreslenia – čiar aj pečiatok.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 –
     nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba robota
Pozri tiež:
farba(), 
farba(Color), 
farba(Farebnosť), 
farba(int, int, int), 
predvolenáFarba()
predvolenáFarba
public void predvolenáFarba()
Nastaví farbu robota na predvolenú farbu.
 (Predvolenou farbou robota je čierna.
 Farba robota ovplyvňuje farebnosť predvoleného tvaru robota
 a farbu kreslenia – čiar aj pečiatok.)
Pozri tiež:
farba(), 
farba(Color), 
farba(Farebnosť), 
farba(int, int, int), 
farba(int, int, int, int)
predvolenaFarba
public void predvolenaFarba()
 Alias pre predvolenáFarba.
cieľováFarba
public Farba cieľováFarba()
 Číta cieľovú farbu robota.
 Hodnota null znamená, že tento atribút
 nie je nastavený (to je predvolený stav).
 Podrobnosti o využití tohto atribútu nájdete v opise
 metódy cieľováFarba.
Návratová hodnota:
aktuálna cieľová farba robota (objekt typu
     Farba)
Pozri tiež:
cieľováFarba(Color), 
cieľováFarba(Farebnosť), 
cieľováFarba(int, int, int), 
cieľováFarba(int, int, int, int), 
zrušCieľovúFarbu(), 
cieľováFarbaDoma, 
použiKruhovýNáter()
cielovaFarba
public Farba cielovaFarba()
 Alias pre cieľováFarba.
cieľováFarba
public void cieľováFarba(Color nováFarba)
 Nastaví cieľovú farbu
 (a priehľadnosť) robota podľa použitého objektu
 Color (alebo odvodeného napr.
 Farba). Cieľová farba je použitá
 pri vytváraní farebných prechodov výplní alebo
 obrysových čiar objektov kreslených robotom
 a na vytvorenie farebného prechodu
 čiary kreslenej pri posune robota. Hodnota
 null zruší nastavenie cieľovej farby
 tohto robota.
 
 
Pozor! Predvolene je hodnota
 tohto atribútu po prechode robota domov zrušená!
 (Pozri aj cieľováFarbaDoma.)
 
 Cieľová farba poskytuje najrýchlejší spôsob
 automatického definovania lineárneho farebného prechodu
 používaného robotom pri kreslení.
 Začiatok farebného prechodu je pri pečiatkovaní tvarov za
 robotom a pri kreslení perom v mieste aktuálnej pozície
 robota (pred presunom). Koniec prechodu je pri pečiatkovaní
 tvarov pred robotom a pri kreslení perom v mieste cieľovej
 pozície. Rozsah prechodu pri pečiatkovaní sa dá ovplyvniť
 veľkosťou robota. Pri kreslení perom je rozsah prechodu
 určený automaticky podľa dĺžky posunu robota.
 Pri pečiatkovaní je prechod použitý rovnako na vypĺňanie
 tvarov aj na farebný štýl čiary, ktorou sú tvary
 obkresľované. Na vytvorenie zložitejších prechodov je
 nevyhnutné použiť prislúchajúce triedy Javy spolu
 s vlastnosťou náter. (Príklady sú
 v opise metódy náter(novýNáter).)
 
 Príklad:
 
 
super(250, 250);
skry();
Svet.farbaPozadia(tmavošedá);
farba(svetlotyrkysová);
cieľováFarba(svetlooranžová);
veľkosť(50);
hrúbkaČiary(5);
for (int i = 0; i &lt; 10; ++i)
{
    skoč();
    krúžok();
    odskoč();
    vpravo(36);
}
 
 Výsledok:
 
 
 Výsledkom tohto príkladu je obrázok
 podobný miniatúrnej mandale.
Parametre:
nováFarba – objekt farebného údajového typu
     určujúci cieľovú farbu robota; jestvuje paleta
     predvolených farieb (pozri napríklad: biela, červená, čierna…)
Pozri tiež:
cieľováFarba(), 
cieľováFarba(Farebnosť), 
cieľováFarba(int, int, int), 
cieľováFarba(int, int, int, int), 
zrušCieľovúFarbu(), 
cieľováFarbaDoma, 
použiKruhovýNáter()
cielovaFarba
public void cielovaFarba(Color nováFarba)
 Alias pre cieľováFarba.
cieľováFarba
public void cieľováFarba(Farebnosť podľaObjektu)
Nastaví cieľovú farbu a priehľadnosť robota podľa zadaného
 objektu, ktorý musí byť implementáciou rozhrania Farebnosť.
 (Podrobnosti o využití tohto atribútu nájdete v opise
 metódy cieľováFarba.)
Parametre:
podľaObjektu – objekt, podľa ktorého má byť nastavená
     cieľová farba tohto robota
Pozri tiež:
cieľováFarba(), 
cieľováFarba(Color), 
cieľováFarba(int, int, int), 
cieľováFarba(int, int, int, int), 
zrušCieľovúFarbu(), 
použiKruhovýNáter()
cielovaFarba
public void cielovaFarba(Farebnosť podľaObjektu)
 Alias pre cieľováFarba.
cieľováFarba
public Farba cieľováFarba(int r,
                          int g,
                          int b)
Nastaví cieľovú farbu robota podľa zadaných
 farebných zložiek.
 (Podrobnosti o využití tohto atribútu nájdete v opise
 metódy cieľováFarba.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
Návratová hodnota:
objekt typu Farba – nová cieľová
     farba robota
Pozri tiež:
cieľováFarba(), 
cieľováFarba(Color), 
cieľováFarba(Farebnosť), 
cieľováFarba(int, int, int, int), 
zrušCieľovúFarbu(), 
použiKruhovýNáter()
cielovaFarba
public Farba cielovaFarba(int r,
                          int g,
                          int b)
 Alias pre cieľováFarba.
cieľováFarba
public Farba cieľováFarba(int r,
                          int g,
                          int b,
                          int a)
Nastaví cieľovú farbu robota a priehľadnosť robota podľa
 zadaných farebných zložiek a úrovne priehľadnosti.
 (Podrobnosti o využití tohto atribútu nájdete v opise
 metódy cieľováFarba.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 –
     nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová cieľová
     farba robota
Pozri tiež:
cieľováFarba(), 
cieľováFarba(Color), 
cieľováFarba(Farebnosť), 
cieľováFarba(int, int, int), 
zrušCieľovúFarbu(), 
použiKruhovýNáter()
cielovaFarba
public Farba cielovaFarba(int r,
                          int g,
                          int b,
                          int a)
 Alias pre cieľováFarba.
zrušCieľovúFarbu
public void zrušCieľovúFarbu()
Zruší nastavenie cieľovej farby robota.
 (Podrobnosti o využití tohto atribútu nájdete v opise
 metódy cieľováFarba.)
Pozri tiež:
cieľováFarba(), 
cieľováFarba(Color), 
cieľováFarba(Farebnosť), 
cieľováFarba(int, int, int), 
cieľováFarba(int, int, int, int), 
použiKruhovýNáter()
zrusCielovuFarbu
public void zrusCielovuFarbu()
 Alias pre zrušCieľovúFarbu.
použijeKruhovýNáter
public boolean použijeKruhovýNáter()
Overí, či má robot v prípade nastavenia cieľovej farby vytvoriť kruhový
 náter na výplň tvarov.
 
 Príklad:
 
 
// Prvý kruh bude vyplnený bez špeciálneho náteru – predvolenou
// čiernou farbou.
Svet.farbaTextu(tyrkysová);
Svet.vypíšRiadok("Použije kruhový náter: ", použijeKruhovýNáter());
kruh(180);
// Druhý kruh bude vyplnený lineárnym náterom. Na náter má vplyv
// aj veľkosť robota.
veľkosť(60);
farba(červená);
cieľováFarba(žltá);
Svet.vypíšRiadok("Použije kruhový náter: ", použijeKruhovýNáter());
kruh(120);
// Tretí kruh bude vyplnený kruhovým náterom.
použiKruhovýNáter();
Svet.vypíšRiadok("Použije kruhový náter: ", použijeKruhovýNáter());
kruh(60);
 
 Výsledok:
 
 
 Výsledok kreslenia
 príkladu.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
použiKruhovýNáter(), 
nepoužiKruhovýNáter(), 
cieľováFarba()
pouzijeKruhovyNater
public boolean pouzijeKruhovyNater()
 Alias pre použijeKruhovýNáter.
použiKruhovýNáter
public void použiKruhovýNáter()
Prikáže, aby robot v prípade nastavenia cieľovej farby použil na výplň tvarov
 kruhový náter.
 
 Príklad:
 
 
// Obmedzenie kreslenia:
kresliDo(kružnica(50));
// Nastavenia ovplyvňujúce náter:
veľkosť(80);
farba(biela);
cieľováFarba(modrá);
použiKruhovýNáter();
// Použitie náteru:
skoč(-25, 30);
kruh(100);
// Zrušenie obedzenia kreslenia a nakreslenie okrajovej čiary:
kresliVšade();
skočNa(stred);
hrúbkaČiary(2);
farba(čierna);
kružnica(50);
 
 Predchádzajúca sekvencia príkazov nakreslí obrázok
 nižšie. Vysunutie kruhového náteru je realizované
 s použitím triku 
obmedzenia
 kreslenia.
 
 Výsledok:
 
  Výsledok
 kreslenia.
Pozri tiež:
použijeKruhovýNáter(), 
nepoužiKruhovýNáter(), 
cieľováFarba()
pouziKruhovyNater
public void pouziKruhovyNater()
 Alias pre použiKruhovýNáter.
nepoužiKruhovýNáter
public void nepoužiKruhovýNáter()
Vypne používanie kruhového náteru výplne tvarov, ktorý
 by bol použitý v prípade nastavenia cieľovej farby robota.
 
 Príklad:
 
 
veľkosť(75);
farba(červená);
cieľováFarba(žiadna);
použiKruhovýNáter();
kruh();
vpravo(45);
farba(žltá);
nepoužiKruhovýNáter();
vyplňŠtvorec();
 
 Krátka sekvencia príkazov vyššie nakreslí obrázok nižšie.
 Štvorec prekrýva kruh, ktorý je vyplnený kruhovým náterom.
 Vypnutie kruhového náteru je použité na vyplnenie štvorca
 lineárnym náterom.
 
 Výsledok:
 
  Výsledok.
Pozri tiež:
použijeKruhovýNáter(), 
použiKruhovýNáter(), 
cieľováFarba()
nepouziKruhovyNater
public void nepouziKruhovyNater()
 Alias pre nepoužiKruhovýNáter.
náter
public Paint náter()
Vráti objekt s aktuálnym druhom náteru, ktorý grafický
 robot používa na kreslenie (kreslenie čiar pera, vypĺňanie
 plôch a kreslenie obrysových čiar ním generovaných
 pečiatkových tvarov, kreslenie svojho predvoleného tvaru,
 prípadne iné). Ak náter nie je nastavený, tak táto metóda
 vráti hodnotu null.
 Ďalšie podrobnosti o tejto vlastnosti nájdete v opise metódy
 náter(novýNáter).
 
 Poznámka: Táto vlastnosť robota sa
 pôvodne mala volať výplň, ale tento názov kolidoval
 s príkazom vyplň, preto bolo potrebné hľadať iné
 pomenovanie. Nakoniec sa autor priklonil k názvu náter
 a popri tom sa ukázalo, že s týmto pomenovaním vlastnosť
 lepšie zapadá do kategórie farebnosti a viditeľnosti,
 do ktorej principiálne patrí.
Návratová hodnota:
aktuálny druh náteru, to jest druh výplne
     a obrysových čiar kreslených tvarov alebo null
Pozri tiež:
náter(Paint), 
zrušNáter()
nater
public Paint nater()
 Alias pre náter.
náter
public void náter(Paint novýNáter)
Upraví druh náteru, ktorý grafický robot používa na kreslenie
 (kreslenie čiar pera, vypĺňanie plôch a kreslenie obrysových
 čiar ním generovaných pečiatkových tvarov, kreslenie svojho
 predvoleného tvaru, prípadne iné).
 Ak je namiesto parametra novýNáter zadaná hodnota
 null, tak bude definícia náteru zrušená a robot
 bude kresliť objekty a čiary podľa svojich farebných
 nastavení – pozri vlastnosti farba
 a cieľováFarba.
 Použitie tejto vlastnosti lepšie ukazujú dva príklady
 nižšie.
 
 Poznámka: Táto vlastnosť robota sa
 pôvodne mala volať výplň, ale tento názov kolidoval
 s príkazom vyplň, preto bolo potrebné hľadať iné
 pomenovanie. Nakoniec sa autor priklonil k názvu náter
 a popri tom sa ukázalo, že s týmto pomenovaním vlastnosť
 lepšie zapadá do kategórie farebnosti a viditeľnosti,
 do ktorej principiálne patrí.
 
 Upozornenie: Obidva nasledujúce
 príklady vyžadujú importovanie týchto dvoch tried Javy:
 RadialGradientPaint
 a MultipleGradientPaint.CycleMethod.
 Druhý príklad navyše vyžaduje aj importovanie týchto troch
 tried Javy:
 MultipleGradientPaint.ColorSpaceType,
 Point2D
 a AffineTransform.
 
 Príklad 1:
 
 Tento príklad ukazuje použitie triedy Javy
 RadialGradientPaint
 na výrobu opakujúceho sa excentrického náteru s kruhovým
 farebným prechodom. Náter je použitý na vyplnenie kruhu
 generovaného robotom. Rozdielnosť súradnicových priestorov
 Javy a programovacieho rámca je vyriešená s pomocou
 prislúchajúcich metód triedy Svet.
 
 
super(250, 250);
skry();
// Príprava polí kotiev:
float[] polohy = {0.0f, 0.33f, 1.0f};
Farba[] farby  = {svetlošedá, biela, svetlotyrkysová};
// Vytvorenie náteru kruhového farebného prechodu:
RadialGradientPaint náter = new RadialGradientPaint(
    (float)Svet.prepočítajX(0),
        (float)Svet.prepočítajY(5), 30, // stred a polomer
    (float)Svet.prepočítajX(20),
        (float)Svet.prepočítajY(10),   // ohnisko
    polohy, // polohy farebných kotiev
    farby,  // farby farebných kotiev
    CycleMethod.REFLECT); // metóda opakovania prechodu zrkadlením
// Nastavenie (aktivovanie) náteru a nakreslenie kruhu:
náter(náter);
kruh(100);
 
 Výsledok:
 
 
 Excentrický kruhový náter vypĺňajúci
 kruhovú oblasť.
 
 Príklad 2:
 
 V tomto príklade je ukázané, ako sa dá trieda Javy
 RadialGradientPaint
 použiť na výrobu náteru simulujúceho tieň objektu. Príklad
 zároveň ukazuje spôsob umiestnenia farebného prechodu
 (gradientu) s ohľadom na rozdielnosť súradnicových
 priestorov Javy a programovacieho rámca GRobot a tiež
 spôsob transformácie kruhového gradientu na elipsový.
 
 
super(250, 250);
skry();
// Faktor veľkosti (polovica polomeru) gule:
final double rozmer = 40.0;
// Príprava polí kotiev:
float[] polohy = {0.0f, 1.0f};
Farba[] farby  = {čierna, žiadna};
// Vytvorenie inštancie stredu tieňa s prepočítanými súradnicami:
Point2D.Double polohaStredu = new Point2D.Double(
    Svet.prepočítajX(0), Svet.prepočítajY(-(rozmer * 1.75)));
// Príprava transformácie tieňa:
AffineTransform transformácia = new AffineTransform();
transformácia.concatenate(new SVGPodpora.Transformácia(
    SVGPodpora.Transformácia.POSUN,
    polohaStredu.getX(), polohaStredu.getY()).daj());
transformácia.concatenate(new SVGPodpora.Transformácia(
    SVGPodpora.Transformácia.MIERKA_Y, 0.5).daj());
transformácia.concatenate(new SVGPodpora.Transformácia(
    SVGPodpora.Transformácia.POSUN,
    -polohaStredu.getX(), -polohaStredu.getY()).daj());
// Vytvorenie náteru tieňa:
RadialGradientPaint náter = new RadialGradientPaint(
    polohaStredu, (float)(rozmer * 2), polohaStredu, polohy, farby,
    CycleMethod.NO_CYCLE, ColorSpaceType.LINEAR_RGB,
    transformácia);
// Nakreslenie tieňa:
odskoč(rozmer * 1.75);
náter(náter);
vyplňElipsu(rozmer * 2, rozmer);
podlaha.rozmaž(12, 3);
Svet.farbaPozadia(svetlošedá.bledšia());
náter(null);
skoč(rozmer * 1.75);
// Nakreslenie lúčov nad guľou:
skoč(rozmer);
farba(žltá);
vyplňHviezdu(rozmer * 2);
vpravo(36);
vyplňHviezdu(rozmer * 2);
vľavo(36);
odskoč(rozmer);
// Nakreslenie gule:
farba(svetlomodrá);
kruh(rozmer * 2);
 
 Výsledok:
 
 
 Scéna, v ktorej plní kruhový prechod
 úlohu tieňa.
Parametre:
novýNáter – nový druh náteru, to jest druhu výplne
     a obrysových čiar kreslených tvarov
Pozri tiež:
náter(), 
zrušNáter()
nater
public void nater(Paint novýNáter)
 Alias pre náter.
zrušNáter
public void zrušNáter()
Zruší definíciu náteru grafického robota. Volanie tejto metódy
 je ekvivalentné volaniu metódy:
 náter(null).
Pozri tiež:
náter(), 
náter(Paint)
zrusNater
public void zrusNater()
 Alias pre zrušNáter.
polohaPera
public boolean polohaPera()
Zistí aktuálnu polohu pera.
Návratová hodnota:
true ak je pero položené,
     false v opačnom prípade
Pozri tiež:
polohaPera(boolean), 
peroZdvihnuté(), 
peroPoložené(), 
zdvihniPero(), 
položPero(), 
polohaPeraDoma, 
kreslenieTvarovPovolené
peroZdvihnuté
public boolean peroZdvihnuté()
Zistí aktuálnu polohu pera.
Návratová hodnota:
true ak je pero zdvihnuté z plátna,
     false v opačnom prípade
Pozri tiež:
polohaPera(), 
polohaPera(boolean), 
peroPoložené(), 
zdvihniPero(), 
položPero()
peroZdvihnute
public boolean peroZdvihnute()
 Alias pre peroZdvihnuté.
peroPoložené
public boolean peroPoložené()
Zistí aktuálnu polohu pera.
Návratová hodnota:
true ak je pero položené,
     false v opačnom prípade
Pozri tiež:
polohaPera(), 
polohaPera(boolean), 
peroZdvihnuté(), 
zdvihniPero(), 
položPero()
peroPolozene
public boolean peroPolozene()
 Alias pre peroPoložené.
polohaPera
public void polohaPera(boolean polož)
Zdvihne alebo položí pero na základe zadanej pravdivostnej
 hodnoty – true položí pero, false
 zdvihne pero.
Parametre:
polož – true/&#8203;false
Pozri tiež:
polohaPera(), 
peroZdvihnuté(), 
peroPoložené(), 
zdvihniPero(), 
položPero(), 
polohaPeraDoma
zdvihniPero
public void zdvihniPero()
Zdvihne pero tohto robota z plátna podlahy alebo stropu.
 Robot sa bude presúvať bez kreslenia čiary. Opačný efekt
 má metóda položPero.
Pozri tiež:
polohaPera(), 
polohaPera(boolean), 
peroZdvihnuté(), 
peroPoložené(), 
položPero(), 
dopredu, 
vzad, 
choďNa, 
choďPoOblúku, 
zdvihniPeroDoma, 
nekresliTvary
položPero
public void položPero()
Položí pero tohto robota na plátno podlahy alebo stropu.
 Robot bude pri presune kresliť čiaru. Opačný efekt má
 metóda zdvihniPero.
Pozri tiež:
polohaPera(), 
polohaPera(boolean), 
peroZdvihnuté(), 
peroPoložené(), 
zdvihniPero(), 
dopredu, 
vzad, 
choďNa, 
choďPoOblúku, 
položPeroDoma, 
kresliTvary
polozPero
public void polozPero()
 Alias pre položPero.
viditeľný
public boolean viditeľný()
Zistí, či je robot viditeľný alebo skrytý. Metóda nezistí,
 či skutočne robot vidno, iba vráti stav zobrazenia určený
 metódami zobraz a skry.
 (To znamená, že ak je napríklad robot skrytý za nejakým
 objektom, táto metóda to nezistí.) Alternatívou tejto
 metódy je metóda zobrazený.
Návratová hodnota:
true ak je robot viditeľný, false v opačnom prípade
Pozri tiež:
zobrazený(), 
skrytý(), 
ukáž(), 
zobraz(), 
skry(), 
viditeľnýDoma
viditelny
public boolean viditelny()
 Alias pre viditeľný.
zobrazený
public boolean zobrazený()
Zistí, či je robot viditeľný alebo skrytý. Metóda nezistí,
 či je skutočne robot vidno, iba vráti stav zobrazenia určený
 metódami zobraz a skry.
 (To znamená, že ak je napríklad robot skrytý za nejakým
 objektom, táto metóda to nezistí.)
Návratová hodnota:
true ak je robot zobrazený, false v opačnom prípade
Pozri tiež:
viditeľný(), 
skrytý(), 
ukáž(), 
zobraz(), 
skry(), 
zobrazenýDoma
zobrazeny
public boolean zobrazeny()
 Alias pre zobrazený.
skrytý
public boolean skrytý()
Zistí, či je robot viditeľný alebo skrytý. Metóda nezistí,
 či skutočne robot nevidno, iba vráti stav zobrazenia
 určený metódami zobraz a skry. (To znamená, že ak je napríklad robot skrytý za
 nejakým objektom, táto metóda to nezistí.) Alternatívou
 tejto metódy je metóda viditeľný.
Návratová hodnota:
true ak je robot skrytý, false v opačnom prípade
Pozri tiež:
viditeľný(), 
zobrazený(), 
ukáž(), 
zobraz(), 
skry(), 
skrytýDoma
skryty
public boolean skryty()
 Alias pre skrytý.
ukáž
public void ukáž()
Zobrazí tento robot. Alternatívou tejto metódy je
 metóda zobraz. Opačný efekt má metóda
 skry. Ak robot nebol viditeľný, tak je
 spustená reakcia zobrazenie.
Pozri tiež:
viditeľný(), 
zobrazený(), 
skrytý(), 
zobraz(), 
ukáž(boolean), 
zobraz(boolean), 
skry(), 
ukážDoma
ukaz
public void ukaz()
 Alias pre ukáž.
zobraz
public void zobraz()
Zobrazí tento robot. Alternatívou tejto metódy je
 metóda ukáž. Opačný efekt má metóda
 skry. Ak robot nebol viditeľný, tak je
 spustená reakcia zobrazenie.
Pozri tiež:
viditeľný(), 
zobrazený(), 
skrytý(), 
ukáž(), 
ukáž(boolean), 
zobraz(boolean), 
skry(), 
zobrazDoma
skry
public void skry()
Skryje tento robot. Ak bol robot pred volaním tejto
 metódy viditeľný, tak je spustená reakcia
 skrytie. Opačný efekt majú metódy
 ukáž a zobraz (ktoré
 fungujú identicky – jedna je alternatívou druhej). Uvedené
 metódy majú definované aj verzie s parametrom, ktorého
 hodnota určuje, či má byť robot zobrazený alebo skrytý.
Pozri tiež:
viditeľný(), 
zobrazený(), 
skrytý(), 
ukáž(), 
ukáž(boolean), 
zobraz(), 
zobraz(boolean), 
skryDoma
ukáž
public void ukáž(boolean ukáž)
Zobrazí alebo skryje tento robot podľa hodnoty
 parametra ukáž. Alternatívou tejto metódy je
 metóda zobraz. Okrem tejto
 dvojice metód je definovaná trojica bezparametrických
 metód: ukáž, zobraz
 a skry.
Parametre:
zobraz – ak je hodnota tohto parametera rovná
     true a robot nie je viditeľný, tak bude
     zobrazený (čo bude mať za následok automatické
     spustenie reakcie zobrazenie);
     ak je hodnota tohto parametera rovná false
     a robot je viditeľný, tak bude skrytý (čo bude mať za
     následok automatické spustenie reakcie
     skrytie)
Pozri tiež:
viditeľný(), 
zobrazený(), 
skrytý(), 
ukáž(), 
zobraz(), 
zobraz(boolean), 
skry(), 
ukážDoma
ukaz
public void ukaz(boolean ukáž)
 Alias pre ukáž.
zobraz
public void zobraz(boolean zobraz)
Zobrazí alebo skryje tento robot podľa hodnoty
 parametra zobraz. Alternatívou tejto metódy je
 metóda ukáž. Okrem tejto
 dvojice metód je definovaná trojica bezparametrických
 metód: ukáž, zobraz
 a skry.
Parametre:
zobraz – ak je hodnota tohto parametera rovná
     true a robot nie je viditeľný, tak bude
     zobrazený (čo bude mať za následok automatické
     spustenie reakcie zobrazenie);
     ak je hodnota tohto parametera rovná false
     a robot je viditeľný, tak bude skrytý (čo bude mať za
     následok automatické spustenie reakcie
     skrytie)
Pozri tiež:
viditeľný(), 
zobrazený(), 
skrytý(), 
ukáž(), 
zobraz(), 
ukáž(boolean), 
skry(), 
zobrazDoma
priehľadnosť
public double priehľadnosť()
 Zistí aktuálnu úroveň
 (ne)priehľadnosti tvaru tohto robota.
 
 Poznámka: 
 Kreslenie priehľadných tvarov so sebou prináša jeden efekt,
 ktorý je vhodné vziať do úvahy. Pozri podrobnejšiu poznámku
 v opise metódy priehľadnosť(priehľadnosť).
Definované:
priehľadnosť v rozhraní Priehľadnosť
Návratová hodnota:
aktuálna úroveň priehľadnosti tvaru tohto robota
Pozri tiež:
priehľadnosť(double), 
upravPriehľadnosť(double), 
priehľadnosťDoma()
priehladnost
public double priehladnost()
 Alias pre priehľadnosť.
Definované:
priehladnost v rozhraní Priehľadnosť
priehľadnosť
public void priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň
 (ne)priehľadnosti tohto robota použitú pri kreslení
 (zobrazení) jeho tvaru. Ak chceme, aby bola táto vlastnosť
 korektne použitá, musíme vopred upraviť jej hodnotu, to
 znamená, že ešte pred samotným kreslením (tvaru) robota.
 Počas kreslenia vlastného tvaru je už neskoro. Rovnako obrázky použité namiesto vlastného tvaru by nemali mať nastavenú vlastnú úroveň priehľadnosti,
 ak nechceme, aby ich úroveň priehľadnosti prekryla
 nastavenie priehľadnosti tohto robota (vlastnou úrovňou
 priehľadnosti obrázka máme na mysli inú hodnotu, než
 1.0).
 
 Úroveň 0.0 znamená, že robot by nemal byť zobrazený,
 avšak vždy dôjde minimálne k pokusu o jeho nakreslenie.
 Keď chceme robot skutočne skryť, použijeme metódu
 skry. Úroveň 1.0 znamená, že robot bude
 zobrazený bez úpravy priehľadnosti.
 
 Poznámka: 
Parametre:
priehľadnosť – nová úroveň priehľadnosti tvaru tohto
     robota (0.0 – 1.0)
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double), 
priehľadnosťDoma(Double)
priehladnost
public void priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
priehľadnosť
public void priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
Parametre:
objekt – objekt určujúci novú úroveň priehľadnosti
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double)
priehladnost
public void priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
upravPriehľadnosť
public void upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti tohto robota. Viac
 informácií o priehľadnosti je v opise metódy priehľadnosť.
Parametre:
zmena – hodnota, ktorou bude násobená aktuálna
     hodnota priehľadnosti; príklady: 0.5 – priehľadnosť
     bude znížená o polovicu, 2.0 – úroveň priehľadnosti
     bude zdvojnásobená
Pozri tiež:
priehľadnosť(double), 
priehľadnosť()
upravPriehladnost
public void upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
písmo
public Písmo písmo()
 Vráti aktuálny typ písma, ktorým
 robot píše.
Návratová hodnota:
objekt typu Písmo – aktuálny typ písma
Pozri tiež:
písmo(Font), 
písmo(String, double), 
predvolenéPísmo(), 
písmoDoma()
pismo
public Pismo pismo()
 Alias pre písmo.
písmo
public void písmo(Font novéPísmo)
 Nastaví nový typ písma, ktorým bude
 robot písať.
Parametre:
novéPísmo – objekt typu Písmo alebo
     Font určujúci nový typ písma robota
Pozri tiež:
písmo(), 
písmo(Font), 
písmo(String, double), 
predvolenéPísmo(), 
písmoDoma(Font)
pismo
public void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public Písmo písmo(String názov,
                   double veľkosť)
Nastaví nový typ písma, ktorým bude robot písať.
Parametre:
názov – názov písma; môže byť všeobecný názov
     logického písma (Dialog, DialogInput, Monospaced,
     Serif, SansSerif…) alebo názov
     konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je
     zaokrúhlená na typ float)
Návratová hodnota:
objekt typu Písmo určujúci nový typ písma
     robota
Pozri tiež:
písmo(), 
písmo(Font), 
predvolenéPísmo()
pismo
public Pismo pismo(String názov,
                   double veľkosť)
 Alias pre písmo.
predvolenéPísmo
public void predvolenéPísmo()
Vráti nastavenie typu písma robota na predvolené.
Pozri tiež:
písmo(), 
písmo(Font), 
písmo(String, double)
predvolenePismo
public void predvolenePismo()
 Alias pre predvolenéPísmo.
výškaRiadka
public int výškaRiadka()
Zistí výšku riadka textu v bodoch pri použití aktuálneho
 typu písma. Ak metóda z nejakého dôvodu nedokáže získať
 kontext grafiky, tak vráti nulu – 0.
Návratová hodnota:
výška riadka textu v bodocj pri použití aktuálneho
     písma
vyskaRiadka
public int vyskaRiadka()
 Alias pre výškaRiadka.
šírkaReťazca
public int šírkaReťazca(String reťazec)
Zistí šírku zadaného reťazca v bodoch pri použití aktuálneho
 typu písma. Ak metóda z nejakého dôvodu nedokáže získať
 kontext grafiky, tak vráti nulu – 0.
Parametre:
reťazec – reťazec, ktorého šírka má byť vrátená
Návratová hodnota:
šírka zadaného reťazca v bodoch pri použití
     aktuálneho písma
sirkaRetazca
public int sirkaRetazca(String reťazec)
 Alias pre šírkaReťazca.
šírkaMedzery
public int šírkaMedzery()
Zistí šírku medzery v bodoch pri použití aktuálneho typu
 písma. Ak metóda z nejakého dôvodu nedokáže získať kontext
 grafiky, tak vráti nulu – 0.
Návratová hodnota:
šírka medzery v bodoch pri použití aktuálneho písma
sirkaMedzery
public int sirkaMedzery()
 Alias pre šírkaMedzery.
najväčšiaŠírkaZnaku
public int najväčšiaŠírkaZnaku()
Zistí najväčšiu šírku znaku v bodoch pri použití aktuálneho
 typu písma. Ak metóda z nejakého dôvodu nedokáže získať
 kontext grafiky, tak vráti nulu – 0.
Návratová hodnota:
najväčšia šírka znaku v bodoch pri použití
     aktuálneho písma
najvacsiaSirkaZnaku
public int najvacsiaSirkaZnaku()
 Alias pre najväčšiaŠírkaZnaku.
polohaX
public double polohaX()
 Zistí aktuálnu x-ovú súradnicu robota.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica robota
polohaY
public double polohaY()
 Zistí aktuálnu y-ovú súradnicu robota.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica robota
súradnicaX
public double súradnicaX()
 Alias pre polohaX.
Definované:
súradnicaX v rozhraní Poloha
suradnicaX
public double suradnicaX()
 Alias pre súradnicaX.
Definované:
suradnicaX v rozhraní Poloha
súradnicaY
public double súradnicaY()
 Alias pre polohaY.
Definované:
súradnicaY v rozhraní Poloha
suradnicaY
public double suradnicaY()
 Alias pre súradnicaY.
Definované:
suradnicaY v rozhraní Poloha
polohaX
public void polohaX(double novéX)
 Prikáže robotu, aby preskočil na
 konkrétnu súradnicu na podlahe (strope) v smere osi x. Robot
 nekreslí čiaru, ani nezmení smer.
Parametre:
novéX – nová x-ová súradnica
polohaY
public void polohaY(double novéY)
 Prikáže robotu, aby preskočil na
 konkrétnu súradnicu na podlahe (strope) v smere osi y. Robot
 nekreslí čiaru, ani nezmení smer.
Parametre:
novéY – nová y-ová súradnica
súradnicaX
public void súradnicaX(double novéX)
 Alias pre polohaX.
suradnicaX
public void suradnicaX(double novéX)
 Alias pre súradnicaX.
súradnicaY
public void súradnicaY(double novéY)
 Alias pre polohaY.
suradnicaY
public void suradnicaY(double novéY)
 Alias pre súradnicaY.
poloha
public Bod poloha()
 Vráti aktuálne súradnice robota
 v objekte typu Bod.
 Vrátený objekt bude obsahovať súradnice robota,
 ktoré sú aktuálne v čase volania metódy. V budúcnosti
 tieto hodnoty súradníc nie sú aktualizované.
 To znamená, že vždy keď potrebujete získať aktuálne
 súradnice robota, tak musíte znova volať túto metódu
 a získať nový objekt typu Bod s aktuálnymi
 súradnicami.
Definované:
poloha v rozhraní Poloha
Návratová hodnota:
objekt typu Bod obsahujúci aktuálne
     súradnice robota
poloha
public void poloha(Poloha poloha)
 Nastaví nové súradnice robota.
 Nové súradnice sú očakávané v inštancii triedy, ktorá
 implementuje rozhranie Poloha, takže môže
 ísť o rôzne objekty programovacieho rámca GRobot. Robot sa
 presunie na zadané súradnice, nekreslí pri tom čiaru, ani
 nezmení svoju aktuálnu orientáciu (smer).
Parametre:
poloha – objekt typu Poloha
     obsahujúci nové súradnice robota
poloha
public void poloha(double novéX,
                   double novéY)
Nastaví nové súradnice robota. V podstate ide
 o alternatívu metódy poloha(poloha) a funguje rovnako ako metóda
 skočNa(novéX,
 novéY).
Parametre:
novéX – nová x-ová súradnica
novéY – nová y-ová súradnica
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tohto robota dokonale zhoduje so
 zadanými súradnicami. Ak je zistená zhoda, tak táto metóda
 vráti hodnotu true, v opačnom prípade vráti
 hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha
     tohto robota
y – y-ová súradnica, s ktorou má byť porovnaná poloha
     tohto robota
Návratová hodnota:
true ak sa poloha tohto robota zhoduje
     so zadanými súradnicami, false v opačnom
     prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tohto robota a poloha zadaného
 objektu dokonale zhodujú. Ak je zistená zhoda, tak táto
 metóda vráti hodnotu true, v opačnom prípade
 je vrátená hodnota false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná
     s polohou tohto robota
Návratová hodnota:
true ak sa poloha tohto robota zhoduje
     s polohou zadaného objektu, false
     v opačnom prípade
uhol
public double uhol()
 Zistí aktuálny uhol (smer) robota.
Definované:
uhol v rozhraní Smer
Návratová hodnota:
aktuálny uhol otočenia robota
Pozri tiež:
uhol(double), 
vpravo, 
vľavo, 
uholDoma(), 
smer(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double)
smer
public double smer()
 Zistí aktuálny uhol (smer) robota.
Definované:
smer v rozhraní Smer
Návratová hodnota:
aktuálny uhol otočenia robota
Pozri tiež:
smer(double), 
vpravo, 
vľavo, 
uhol(), 
smerDoma(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double)
uhol
public void uhol(double uhol)
 Nasmeruje robot podľa zadaného uhla.
Parametre:
uhol – uhol smeru robota (nula znamená vpravo,
     deväťdesiat hore a tak ďalej)
Pozri tiež:
smer(double), 
vpravo, 
vľavo, 
otočNa(double, double)
smer
public void smer(double uhol)
 Nasmeruje robot podľa zadaného uhla.
Parametre:
uhol – uhol smeru robota (nula znamená vpravo,
     deväťdesiat hore a tak ďalej)
Pozri tiež:
uhol(double), 
vpravo, 
vľavo, 
otočNa(double, double)
otoč
public void otoč(double uhol)
Nasmeruje (otočí) robot rovnakým smerom, ako určuje
 zadaný uhol. Má v podstate rovnaký efekt ako
  uhol alebo
  smer. Jej
 implementácia je v súlade s dodržaním názvoslovia metód
 programovacieho rámca a jej použitie by mohlo byť
 napríklad nasledujúce:
 
 
otoč(inýRobot.smer());
 
 Táto metóda nemá verziu obmedzujúcu maximálny uhol
 pootočenia (ako napríklad: otoč(Smer, double)),
 pretože by pri definícii nastal konflikt s metódou otoč(Δx, Δy). Ak chcete obmedziť
 maximálny uhol pootočenia, použite metódu otoč(Smer,
 double), ktorú odporúčame použiť v každom prípade.
Parametre:
uhol – uhol smeru robota (nula znamená vpravo,
     deväťdesiat hore a tak ďalej)
Pozri tiež:
smer(double), 
uhol(double), 
vpravo, 
vľavo, 
otočNa(double, double), 
otoč(double, double), 
otoč(double, double, double), 
otočO(double)
otoc
public void otoc(double uhol)
 Alias pre otoč.
uhol
public void uhol(Smer objekt)
 Nasmeruje robot podľa zadaného
 objektu.
Parametre:
objekt – objekt určujúci uhol smeru robota (nula
     znamená vpravo, deväťdesiat hore a tak ďalej)
smer
public void smer(Smer objekt)
 Nasmeruje robot podľa zadaného
 objektu.
Parametre:
objekt – objekt určujúci uhol smeru robota (nula
     znamená vpravo, deväťdesiat hore a tak ďalej)
uholOtáčania
public double uholOtáčania()
 Zistí aktuálnu hodnotu otáčania
 robota pri použití bezparametrických verzií metód
 vpravo, vľavo a iných.
Návratová hodnota:
aktuálny uhol pootočenia robota pri použití metód
     vpravo(),
     vľavo() a iných
Pozri tiež:
uholOtáčania(double), 
vpravo(), 
vľavo(), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double)
uholOtacania
public double uholOtacania()
 Alias pre uholOtáčania.
uholOtáčania
public void uholOtáčania(double uhol)
 Zmení hodnotu otáčania robota pri
 použití bezparametrických verzií metód
 vpravo, vľavo a iných.
Parametre:
uhol – nový uhol pootočenia robota pre metódy
     vpravo(),
     vľavo() iných
Pozri tiež:
uholOtáčania(), 
vpravo(), 
vľavo(), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double)
uholOtacania
public void uholOtacania(double uhol)
 Alias pre uholOtáčania.
pootočenieTvaru
public double pootočenieTvaru()
 Vráti aktuálnu hodnotu pootočenia
 tvaru robota. Ďalšie informácie o pootočení tvaru sú
 v opise metódy pootočenieTvaru(pootočenie).
Návratová hodnota:
hodnota pootočenia tvaru robota
Pozri tiež:
pootočenieTvaru(double), 
otáčanieTvaru(), 
otáčajTvar(double), 
pootočenieTvaruDoma(), 
pootočenieTvaruDoma(Double)
pootocenieTvaru
public double pootocenieTvaru()
 Alias pre pootočenieTvaru.
pootočenieTvaru
public void pootočenieTvaru(double pootočenie)
 Nastaví pootočenie tvaru robota podľa
 zadanej hodnoty. Pootočenie tvaru je uhol, o ktorý je
 pootočené kreslenie tvaru robota voči jeho skutočnému smeru
 (smeru, v ktorom sa pohybuje). Pri
 kreslení
 vlastného tvaru robota je hodnota aktuálneho uhla
 pozmenená o túto hodnotu.
Parametre:
pootočenie – nová hodnota pootočenia tvaru robota
Pozri tiež:
pootočenieTvaru(), 
otáčanieTvaru(), 
otáčajTvar(double), 
pootočenieTvaruDoma(), 
pootočenieTvaruDoma(Double)
pootocenieTvaru
public void pootocenieTvaru(double pootočenie)
 Alias pre pootočenieTvaru.
otáčanieTvaru
public double otáčanieTvaru()
Zistí aktuálnu hodnotu rovnomerného otáčania tvaru robota.
Návratová hodnota:
hodnota rovnomerného otáčania tvaru robota
Pozri tiež:
pootočenieTvaru(), 
pootočenieTvaru(double), 
otáčajTvar(double), 
pootočenieTvaruDoma(), 
pootočenieTvaruDoma(Double)
otacanieTvaru
public double otacanieTvaru()
 Alias pre otáčanieTvaru.
otáčajTvar
public void otáčajTvar(double otáčanie)
 Nastaví novú hodnotu rovnomerného
 otáčania tvaru robota a aktivuje robot ak je to potrebné.
Parametre:
otáčanie – nová hodnota rovnomerného otáčania tvaru
     robota
Pozri tiež:
pootočenieTvaru(), 
pootočenieTvaru(double), 
otáčanieTvaru()
otacajTvar
public void otacajTvar(double otáčanie)
 Alias pre otáčajTvar.
otáčajTvar
public void otáčajTvar(double otáčanie,
                       boolean aktivuj)
 Nastaví novú hodnotu rovnomerného
 otáčania tvaru robota.
Parametre:
otáčanie – nová hodnota rovnomerného otáčania tvaru
     robota
aktivuj – určí, či sa má robot zároveň aktivovať
Pozri tiež:
pootočenieTvaru(), 
pootočenieTvaru(double), 
otáčanieTvaru()
otacajTvar
public void otacajTvar(double otáčanie,
                       boolean aktivuj)
 Alias pre otáčajTvar.
gyroskop
public Double gyroskop()
Zistí aktuálny stav gyroskopického vyvažovania. Ak je
 vyvažovanie vypnuté, tak metóda vráti hodnotu
 null.
Návratová hodnota:
aktuálna hodnota gyroskopického vyvažovania, alebo
     null ak je vyvažovanie vypnuté
Pozri tiež:
gyroskop(Double), 
vypniGyroskop()
gyroskop
public void gyroskop(Double hodnota)
Nastaví novú hodnotu gyroskopického vyvažovania. Táto
 aktivita spôsobí automatické prepočítavanie pootočenia tvaru tak, aby
 výsledný uhol na zobrazenie zodpovedal hodnote gyroskopu.
 Ak je súčasne zapnuté automatické otáčanie tvaru aj
 gyroskopické vyvažovanie, tak dôjde k automatickému
 prepočítavaniu gyroskopického vyvažovania podľa hodnoty
 otáčania tvaru.
Parametre:
hodnota – nová hodnota gyroskopického vyvažovania,
     alebo null ak má byť vyvažovanie vypnuté
Pozri tiež:
gyroskop(), 
vypniGyroskop()
vypniGyroskop
public void vypniGyroskop()
Vypne gyroskopické vyvažovanie kreslenia tvaru.
Pozri tiež:
gyroskop(), 
gyroskop(Double)
náhodnáPoloha
public void náhodnáPoloha()
Umiestni robot na náhodnú pozíciu na aktívnom plátne
 alebo obrázku. To znamená, že náhodné súradnice sú
 vygenerované podľa toho, či robot kreslí na podlahu,
 strop alebo obrázok s inými rozmermi. Na výslednú polohu
 má vplyv aj definícia ohraničenia.
nahodnaPoloha
public void nahodnaPoloha()
 Alias pre náhodnáPoloha.
náhodnáPozícia
public void náhodnáPozícia()
 Alias pre náhodnáPoloha.
nahodnaPozicia
public void nahodnaPozicia()
 Alias pre náhodnáPoloha.
náhodnýSmer
public void náhodnýSmer()
Otočí robot náhodným smerom.
nahodnySmer
public void nahodnySmer()
 Alias pre náhodnýSmer.
náhodnýUhol
public void náhodnýUhol()
 Alias pre náhodnýSmer.
nahodnyUhol
public void nahodnyUhol()
 Alias pre náhodnýSmer.
náhodnáFarba
public void náhodnáFarba()
Zmení farbu robota na náhodnú. Farby sú vybrané
 z preddefinovanej
 množiny farieb.
nahodnaFarba
public void nahodnaFarba()
 Alias pre náhodnáFarba.
náhodnáVeľkosť
public void náhodnáVeľkosť(double miera)
Zmení veľkosť robota na náhodnú hodnotu v rozmedzí
 veľkosti, ktorú by mal pri hodnote mierky 1.0
 a násobkom tejto hodnoty o zadanú mieru.
Parametre:
miera – miera zmeny veľkosti v porovnaní s takou
     hodnotou veľkosti, ktorú by mal robot pri hodnote
     mierky 1.0
nahodnaVelkost
public void nahodnaVelkost(double miera)
 Alias pre náhodnáVeľkosť.
náhodnýPomer
public void náhodnýPomer(double miera)
Zmení pomer veľkosti robota na náhodnú hodnotu
 v rozmedzí pomeru veľkosti, ktorú by mal pri hodnote
 mierky pomeru 1.0 a násobkom tejto hodnoty
 o zadanú mieru.
Parametre:
miera – miera zmeny pomeru veľkosti v porovnaní
     s takou hodnotou pomeru veľkosti, ktorú by mal robot
     pri hodnote mierky pomeru 1.0
nahodnyPomer
public void nahodnyPomer(double miera)
 Alias pre náhodnýPomer.
náhodnýRozmer
public void náhodnýRozmer(double miera)
Zmení rozmer robota na náhodnú hodnotu v rozmedzí
 veľkosti a pomeru veľkosti, ktoré by mal pri hodnotách
 mierok veľkosti a pomeru veľkosti 1.0
 a násobkov týchto hodnôt o zadanú mieru.
Parametre:
miera – miera zmeny rozmeru veľkosti v porovnaní
     s takou hodnotou rozmeru veľkosti, ktorú by mal robot
     pri hodnote mierky rozmeru 1.0
nahodnyRozmer
public void nahodnyRozmer(double miera)
 Alias pre náhodnýRozmer.
náhodnýRozmer
public void náhodnýRozmer(double mieraVeľkosti,
                          double mieraPomeru)
Zmení rozmer robota na náhodnú hodnotu v rozmedzí
 veľkosti a pomeru veľkosti, ktoré by mal pri hodnotách
 mierok veľkosti a pomeru veľkosti 1.0
 a násobkov týchto hodnôt o zadané miery prislúchajúcich
 údajov.
Parametre:
mieraVeľkosti – miera zmeny veľkosti v porovnaní
     s takou hodnotou veľkosti, ktorú by mal robot pri
     hodnote mierky 1.0
mieraPomeru – miera zmeny pomeru veľkosti v porovnaní
     s takou hodnotou pomeru veľkosti, ktorú by mal robot
     pri hodnote mierky pomeru 1.0
nahodnyRozmer
public void nahodnyRozmer(double mieraVeľkosti,
                          double mieraPomeru)
 Alias pre náhodnýRozmer.
poslednáPolohaX
public double poslednáPolohaX()
Zistí poslednú x-ovú súradnicu robota. Táto hodnota sa
 automaticky zálohuje pri každej zmene a nedá sa nastaviť
 ručne.
Návratová hodnota:
posledná x-ová súradnica robota
Pozri tiež:
polohaX(), 
poslednáPolohaY(), 
poslednáPoloha()
poslednaPolohaX
public double poslednaPolohaX()
 Alias pre poslednáPolohaX.
poslednáPolohaY
public double poslednáPolohaY()
Zistí poslednú y-ovú súradnicu robota. Táto hodnota sa
 automaticky zálohuje pri každej zmene a nedá sa nastaviť
 ručne.
Návratová hodnota:
posledná y-ová súradnica robota
Pozri tiež:
polohaY(), 
poslednáPolohaX(), 
poslednáPoloha()
poslednaPolohaY
public double poslednaPolohaY()
 Alias pre poslednáPolohaY.
poslednáSúradnicaX
public double poslednáSúradnicaX()
 Alias pre poslednáPolohaX.
poslednaSuradnicaX
public double poslednaSuradnicaX()
 Alias pre poslednáSúradnicaX.
poslednáSúradnicaY
public double poslednáSúradnicaY()
 Alias pre poslednáPolohaY.
poslednaSuradnicaY
public double poslednaSuradnicaY()
 Alias pre poslednáSúradnicaY.
poslednáPoloha
public Bod poslednáPoloha()
Vráti posledné súradnice robota v objekte typu
 Bod. Vrátený objekt bude obsahovať posledné
 (zálohované) súradnice robota. Poloha tohto bodu nie je
 ďalej aktualizovaná podľa novších záloh polohy robota.
 To znamená, že vždy keď potrebujete získať posledné
 súradnice robota, tak musíte znova volať túto metódu
 a získať nový objekt typu Bod s poslednými
 súradnicami.
Návratová hodnota:
objekt typu Bod obsahujúci posledné
     súradnice robota
Pozri tiež:
poloha(), 
poslednáPolohaX(), 
poslednáPolohaY(), 
poslednáPoloha()
poslednaPoloha
public Bod poslednaPoloha()
 Alias pre poslednáPoloha.
poslednýUhol
public double poslednýUhol()
Zistí posledný uhol (smer) robota.
Návratová hodnota:
posledný uhol otočenia robota
Pozri tiež:
uhol(), 
poslednýSmer()
poslednyUhol
public double poslednyUhol()
 Alias pre poslednýUhol.
poslednýSmer
public double poslednýSmer()
Zistí posledný uhol (smer) robota.
Návratová hodnota:
posledný uhol otočenia robota
Pozri tiež:
uhol(), 
poslednýUhol()
poslednySmer
public double poslednySmer()
 Alias pre poslednýSmer.
domov
public void domov()
Presunie robot „domov“ – na štartovaciu pozíciu
 a obráti ho predvoleným smerom. Akcia presunu robota
 domov môže ovplyvňovať aj iné vlastnosti robota.
 Napríklad metódy zdvihniPeroDoma, položPeroDoma, zobrazDoma
 a skryDoma určujú, že pri presune
 domov sa má zdvihnúť/&#8203;položiť pero alebo
 skryť/&#8203;zobraziť robot. Ďalej sú do úvahy
 brané aj ďalšie nastaviteľné informácie: domovská
 farba, veľkosť, pomer a hrúbka čiary.
 
 Použitie tejto metódy a všetkých jej „klonov“ má za
 následok vymazanie pôsobiska – pozri opisy metód
 vymažPôsobisko
 a kresliPôsobisko.
 
 Upozornenie: Všetky „klony“
 metód, ktoré slúžia na návrat na domovskú pozíciu robota
 ignorujú v metódach kreslenia vlastného tvaru robota
 (kresli
 a kresliTvar) skutočnú domovskú
 polohu a smer robota a pracujú výhradne s údajmi jeho
 polohy a smeru, ktoré boli platné pred začatím kreslenia
 vlastného tvaru. To zároveň znamená, že žiadne ďalšie
 vlastnosti nie sú počas kreslenia vlastného tvaru
 pri návrate na domovskú pozíciu ovplyvňované, ani pôsobisko
 nie je v tejto situácii vymazané.
 Preto je možné metódy návratu na domovskú pozíciu robota
 využívať v rámci metód kreslenia vlastných tvarov robota
 na rýchly návrat a otočenie grafického robota na aktuálnu
 pozíciu a smer (v zmysle pozície a smeru platných pred
 začatím kreslenia vlastného tvaru).
 
 Poznámka: Predvolene ovplyvňuje
 príkaz domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Pozri tiež:
vymažPôsobisko(), 
kresliPôsobisko(), 
domov(double), 
domov(Smer), 
domov(double, double), 
domov(double, double, double), 
domov(double, double, Smer), 
domov(Poloha), 
domov(Poloha, double), 
domov(Poloha, Smer), 
domov(Častica), 
domov(GRobot)
domov
public void domov(double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví nový štartovací smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru je nový štartovací smer platný len do skončenia
 kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
novýUholDoma – nový domovský smer robota
domov
public void domov(Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví nový štartovací smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru je nový štartovací smer platný len do skončenia
 kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
novýSmerDoma – objekt určujúci nový domovský
     smer robota
domov
public void domov(double novéXDoma,
                  double novéYDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu.
 
 Poznámka: Počas kreslenia vlastného
 tvaru je nová štartovacia pozícia platná len do skončenia
 kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
domov
public void domov(double novéXDoma,
                  double novéYDoma,
                  double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru sú nový štartovací smer a pozícia platné len do
 skončenia kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
novýUholDoma – nový domovský smer robota
domov
public void domov(double novéXDoma,
                  double novéYDoma,
                  Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru sú nový štartovací smer a pozícia platné len do
 skončenia kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
novýSmerDoma – objekt určujúci nový domovský
     smer robota
domov
public void domov(Poloha nováPolohaDoma)
Presne ako domov, len s tým rozdielom,
 že robotu nastaví novú štartovaciu pozíciu.
 
 Poznámka: Počas kreslenia vlastného
 tvaru je nová štartovacia pozícia platná len do skončenia
 kreslenia vlastného tvaru. (Pozri aj informácie pri metóde
 domov().)
Parametre:
nováPolohaDoma – bod určujúci nové súradnice
     domovskej pozície v súradnicovom priestore rámca
domov
public void domov(Poloha nováPolohaDoma,
                  double novýUholDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru sú nový štartovací smer a pozícia platné len do
 skončenia kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
nováPolohaDoma – objekt určujúci nové súradnice
     domovskej pozície v súradnicovom priestore rámca
novýUholDoma – nový domovský smer robota
domov
public void domov(Poloha nováPolohaDoma,
                  Smer novýSmerDoma)
Presne ako domov, len s tým rozdielom, že
 robotu nastaví novú štartovaciu pozíciu a smer.
 
 Poznámka: Počas kreslenia vlastného
 tvaru sú nový štartovací smer a pozícia platné len do
 skončenia kreslenia vlastného tvaru.
 (Pozri aj informácie pri metóde domov().)
Parametre:
nováPolohaDoma – objekt určujúci nové súradnice
     domovskej pozície v súradnicovom priestore rámca
novýSmerDoma – objekt určujúci nový smer domovskej
     pozície robota
domov
public void domov(Častica častica)
Presne ako domov, len s tým rozdielom,
 že robotu nastaví novú štartovaciu pozíciu, smer
 a rozmer (resp. domovskú veľkosť a domovský pomer veľkosti
 robota).
 
 Poznámka: Počas kreslenia
 vlastného tvaru sú nový štartovací smer a pozícia platné
 len do skončenia kreslenia vlastného tvaru. (Pozri aj
 informácie pri metóde domov().)
 
 Poznámka: Častica a robot majú ešte jednu spoločnú vlastnosť –
 rozmery. Táto
 vlastnosť nie je touto metódou braná do úvahy.
 V skutočnosti sú rozmery triedy GRobot iba
 „tieňovou“ vlastnosťou – sú prepočítavané podľa vlastností
 veľkosti
 a pomeru.
 
 Poznámka: V súvislosti
 s vlastnosťou rozmeru venujte pozornosť upozorneniu
 v opise metódy rozmery(šírka, výška). To znamená, že volanie
 tejto metódy zmení nastavenia veľkosti doma a pomeru veľkosti doma.
Parametre:
častica – častica určujúca nové súradnice
     domovskej pozície (v súradnicovom priestore rámca)
     a nový smer robota
domov
public void domov(GRobot iný)
Prevezme všetky parametre domovskej pozície od zadaného
 robota a zároveň ich aplikuje. Dotýka sa to domovskej
 pozície, smeru, veľkosti, viditeľnosti a farby robota
 a hrúbky a polohy pera pri prechode na domovskú pozíciu.
 
 Poznámka: Počas kreslenia
 vlastného tvaru platí, že:
 
 od iného robota nie sú prevzaté žiadne údaje o jeho
 veľkosti, viditeľnosti a farbe, ani o veľkosti a polohe
 pera;
 nový štartovací smer a pozícia sú platné len do
 skončenia kreslenia vlastného tvaru.
 
 Pozri aj informácie pri metóde domov().
 
Parametre:
iný – iný robot
novýDomov
public void novýDomov()
Zapamätá si aktuálnu pozíciu a smer ako nový domov.
novyDomov
public void novyDomov()
 Alias pre novýDomov.
novýDomov
public void novýDomov(double novýUholDoma)
Nastaví robotu nový domovský smer.
Parametre:
novýUholDoma – nový domovský smer robota
novyDomov
public void novyDomov(double novýUholDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(Smer novýSmerDoma)
Nastaví robotu nový domovský smer.
Parametre:
novýSmerDoma – nový domovský smer robota
novyDomov
public void novyDomov(Smer novýSmerDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(double novéXDoma,
                      double novéYDoma)
Nastaví robotu novú domovskú pozíciu.
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
novyDomov
public void novyDomov(double novéXDoma,
                      double novéYDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(double novéXDoma,
                      double novéYDoma,
                      double novýUholDoma)
Nastaví robotu novú domovskú pozíciu a smer.
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
novýUholDoma – nový domovský smer robota
novyDomov
public void novyDomov(double novéXDoma,
                      double novéYDoma,
                      double novýUholDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(double novéXDoma,
                      double novéYDoma,
                      Smer novýSmerDoma)
Nastaví robotu novú domovskú pozíciu a smer.
Parametre:
novéXDoma – nová x-ová súradnica domovskej pozície
novéYDoma – nová y-ová súradnica domovskej pozície
novýSmerDoma – nový domovský smer robota
novyDomov
public void novyDomov(double novéXDoma,
                      double novéYDoma,
                      Smer novýSmerDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(Poloha nováPolohaDoma)
Nastaví robotu novú domovskú pozíciu.
Parametre:
nováPolohaDoma – nová domovská pozícia
     (v súradnicovom priestore rámca)
novyDomov
public void novyDomov(Poloha nováPolohaDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(Poloha nováPolohaDoma,
                      double novýUholDoma)
Nastaví robotu novú domovskú pozíciu a smer.
Parametre:
nováPolohaDoma – nová domovská pozícia
     (v súradnicovom priestore rámca)
novýUholDoma – nový domovský smer robota
novyDomov
public void novyDomov(Poloha nováPolohaDoma,
                      double novýUholDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(Poloha nováPolohaDoma,
                      Smer novýSmerDoma)
Nastaví robotu novú domovskú pozíciu a smer.
Parametre:
nováPolohaDoma – nová domovská pozícia
     (v súradnicovom priestore rámca)
novýSmerDoma – nový domovský smer robota
novyDomov
public void novyDomov(Poloha nováPolohaDoma,
                      Smer novýSmerDoma)
 Alias pre novýDomov.
novýDomov
public void novýDomov(Častica častica)
Nastaví domovskú polohu a smer robota podľa polohy
 a smeru zadanej častice.
Parametre:
častica – častica, ktorej poloha a smer určia
     domovskú polohu a smer pre tento robot
novyDomov
public void novyDomov(Častica častica)
 Alias pre novýDomov.
novýDomov
public void novýDomov(GRobot iný)
Prevezme všetky parametre domovskej pozície od zadaného
 robota. Dotýka sa to všetkých aspektov domovskej pozície:
 polohy, smeru, pootočenia tvaru, priehľadnosti,
 viditeľnosti, farby, cieľovej farby, veľkosti pera
 (hrúbky čiary), polohy pera, písma a veľkosti robota pri
 prechode na domovskú pozíciu. Pri väčšine týchto vlastností
 sa dá určiť, či majú alebo nemajú byť pri prechode na
 domovskú pozíciu ovplyvňované. Aj všetky tieto nastavenia
 sa touto metódou kopírujú zo zadaného (iného) robota do
 tohto robota.
Parametre:
iný – iný robot
novyDomov
public void novyDomov(GRobot iný)
 Alias pre novýDomov.
domaX
public double domaX()
 Zistí aktuálnu x-ovú súradnicu
 domovskej pozície robota.
 
 Poznámka: Predvolene ovplyvňuje príkaz
 domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Návratová hodnota:
domovská x-ová súradnica robota
domaY
public double domaY()
 Zistí aktuálnu y-ovú súradnicu
 domovskej pozície robota.
 
 Poznámka: Predvolene ovplyvňuje príkaz
 domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Návratová hodnota:
domovská y-ová súradnica robota
uholDoma
public double uholDoma()
 Zistí aktuálny smer (uhol)
 domovskej pozície robota.
 
 Poznámka: Predvolene ovplyvňuje príkaz
 domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Návratová hodnota:
domovský smer (uhol) robota
Pozri tiež:
uhol(), 
smerDoma(), 
uholDoma(double), 
smerDoma(double)
smerDoma
public double smerDoma()
 Zistí aktuálny smer (uhol)
 domovskej pozície robota.
 
 Poznámka: Predvolene ovplyvňuje príkaz
 domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Návratová hodnota:
domovský smer (uhol) robota
Pozri tiež:
smer(), 
uholDoma(), 
uholDoma(double), 
smerDoma(double)
domaX
public void domaX(double x)
 Nastaví aktuálnu x-ovú súradnicu
 domovskej pozície robota.
Parametre:
x – nová domovská x-ová súradnica robota
domaY
public void domaY(double y)
 Nastaví aktuálnu y-ovú súradnicu
 domovskej pozície robota.
Parametre:
y – nová domovská y-ová súradnica robota
uholDoma
public void uholDoma(double uhol)
 Nastaví aktuálny smer (uhol)
 domovskej pozície robota.
Parametre:
uhol – nový domovský smer (uhol) robota
Pozri tiež:
uholDoma(), 
smerDoma(), 
smerDoma(double)
smerDoma
public void smerDoma(double uhol)
 Nastaví aktuálny smer (uhol)
 domovskej pozície robota.
Parametre:
uhol – nový domovský smer (uhol) robota
Pozri tiež:
uholDoma(), 
smerDoma(), 
uholDoma(double)
pootočenieTvaruDoma
public Double pootočenieTvaruDoma()
Zistí, či sa mení pootočenie tvaru pri prechode na
 domovskú pozíciu robota. Ak je stav pootočenia tvaru po
 prechode robota na domovskú pozíciu zmenený, metóda vráti
 objekt Double s hodnotou, na ktorú
 bude pootočenie tvaru po prechode na domovskú pozíciu
 nastavené. Ak sa po prechode stav pootočenia tvaru nemení,
 tak metóda vráti hodnotu null.
 
 Poznámka: Predvolene ovplyvňuje
 príkaz domov tri vlastnosti:
 polohu, smer,
 a pootočenieTvaru.
Návratová hodnota:
objekt Double alebo
     null
Pozri tiež:
pootočenieTvaruDoma(Double), 
zachovajPootočenieTvaruDoma(), 
pootočenieTvaru(), 
pootočenieTvaru(double)
pootocenieTvaruDoma
public Double pootocenieTvaruDoma()
 Alias pre pootočenieTvaruDoma.
pootočenieTvaruDoma
public void pootočenieTvaruDoma(Double pootočenie)
Nastaví správanie zmeny pootočenia tvaru robota po prechode
 na domovskú pozíciu na základe zadaného objektu typu
 Double. Ak je zadaný objekt
 s konkrétnou číselnou hodnotou, tak bude pootočenie tvaru
 robota po prechode domov upravené na túto hodnotu. Ak je
 zadané null, tak sa stav pootočenia tvaru
 robota po prechode domov nezmení.
Parametre:
položené – objekt Boolean
     alebo null
Pozri tiež:
pootočenieTvaruDoma(), 
zachovajPootočenieTvaruDoma(), 
pootočenieTvaru(), 
pootočenieTvaru(double)
pootocenieTvaruDoma
public void pootocenieTvaruDoma(Double pootočenie)
 Alias pre pootočenieTvaruDoma.
zachovajPootočenieTvaruDoma
public void zachovajPootočenieTvaruDoma()
Po použití tejto metódy nebude stav pootočenia tvaru robota
 pri použití niektorej modifikácie metódy domov ovplyvňovaný.
Pozri tiež:
pootočenieTvaruDoma(), 
pootočenieTvaruDoma(Double), 
pootočenieTvaru(), 
pootočenieTvaru(double)
zachovajPootocenieTvaruDoma
public void zachovajPootocenieTvaruDoma()
 Alias pre zachovajPootočenieTvaruDoma.
polohaPeraDoma
public Boolean polohaPeraDoma()
Zistí, či sa mení stav pera pri prechode na domovskú
 pozíciu robota. Ak je pero po prechode robota na domovskú
 pozíciu položené, tak metóda vráti objekt Boolean s hodnotou true,
 ak zdvihnuté, tak s hodnotou false, ak sa po
 prechode stav pera nemení, tak metóda vráti hodnotu
 null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
polohaPeraDoma(Boolean), 
peroZdvihnutéDoma(), 
peroPoloženéDoma(), 
zdvihniPeroDoma(), 
položPeroDoma(), 
zachovajPeroDoma(), 
polohaPera
peroZdvihnutéDoma
public Boolean peroZdvihnutéDoma()
Overí, či robot pri prechode na domovskú pozíciu zdvihne
 pero z plátna. Ak je pero po prechode robota na
 domovskú pozíciu zdvihnuté, metóda vráti objekt Boolean s hodnotou true, ak
 je položené, tak s hodnotou false, ak sa po
 prechode domov stav pera nemení metóda vráti null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
polohaPeraDoma(), 
polohaPeraDoma(Boolean), 
peroPoloženéDoma(), 
zdvihniPeroDoma(), 
položPeroDoma(), 
zachovajPeroDoma()
peroZdvihnuteDoma
public Boolean peroZdvihnuteDoma()
 Alias pre peroZdvihnutéDoma.
peroPoloženéDoma
public Boolean peroPoloženéDoma()
Overí, či robot pri prechode na domovskú pozíciu položí
 pero na plátno. Ak je pero po prechode robota na
 domovskú pozíciu položené, tak metóda vráti objekt Boolean s hodnotou true, ak
 je zdvihnuté, tak s hodnotou false, ak sa po
 prechode stav pera nemení, tak metóda vráti hodnotu
 null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
polohaPeraDoma(), 
polohaPeraDoma(Boolean), 
peroZdvihnutéDoma(), 
zdvihniPeroDoma(), 
položPeroDoma(), 
zachovajPeroDoma()
peroPolozeneDoma
public Boolean peroPolozeneDoma()
 Alias pre peroPoloženéDoma.
polohaPeraDoma
public void polohaPeraDoma(Boolean položené)
Nastaví správanie zmeny polohy pera po prechode domov na
 základe zadaného objektu typu Boolean. Pri zadaní objektu s hodnotou true,
 bude pero položené, pri objekte s hodnotou false bude pero zdvihnuté a pri zadaní null, sa po prechode domov stav pera nezmení.
Parametre:
položené – objekt Boolean
     alebo null
Pozri tiež:
polohaPeraDoma(), 
peroZdvihnutéDoma(), 
peroPoloženéDoma(), 
zdvihniPeroDoma(), 
položPeroDoma(), 
zachovajPeroDoma(), 
polohaPera
zdvihniPeroDoma
public void zdvihniPeroDoma()
Spôsobí, že odteraz vždy pri použití niektorej modifikácie
 metódy domov zdvihne robot pero z plátna.
Pozri tiež:
polohaPeraDoma(), 
polohaPeraDoma(Boolean), 
peroZdvihnutéDoma(), 
peroPoloženéDoma(), 
položPeroDoma(), 
zachovajPeroDoma(), 
zdvihniPero
položPeroDoma
public void položPeroDoma()
Spôsobí, že odteraz vždy pri použití niektorej modifikácie
 metódy domov položí robot pero na plátno.
Pozri tiež:
polohaPeraDoma(), 
polohaPeraDoma(Boolean), 
peroZdvihnutéDoma(), 
peroPoloženéDoma(), 
zdvihniPeroDoma(), 
zachovajPeroDoma(), 
položPero
polozPeroDoma
public void polozPeroDoma()
 Alias pre položPeroDoma.
zachovajPeroDoma
public void zachovajPeroDoma()
Po použití tejto metódy nebude stav polohy pera pri použití
 niektorej modifikácie metódy domov
 ovplyvňovaný.
Pozri tiež:
polohaPeraDoma(), 
polohaPeraDoma(Boolean), 
peroZdvihnutéDoma(), 
peroPoloženéDoma(), 
zdvihniPeroDoma(), 
položPeroDoma()
viditeľnýDoma
public Boolean viditeľnýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu. Ak je robot po prechode na domovskú
 pozíciu zobrazený, metóda vráti objekt Boolean s hodnotou true, ak
 skrytý, tak s hodnotou false a ak sa po
 prechode domov viditeľnosť nemení, metóda vráti null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
zobrazenýDoma(), 
skrytýDoma(), 
ukážDoma(), 
zobrazDoma(), 
skryDoma(), 
zachovajViditeľnosťDoma(), 
viditeľný
viditelnyDoma
public Boolean viditelnyDoma()
 Alias pre viditeľnýDoma.
zobrazenýDoma
public Boolean zobrazenýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu. Ak je robot po prechode na domovskú
 pozíciu zobrazený, metóda vráti objekt Boolean s hodnotou true, ak
 skrytý, tak s hodnotou false a ak sa po
 prechode domov viditeľnosť nemení, metóda vráti null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
viditeľnýDoma(), 
skrytýDoma(), 
ukážDoma(), 
zobrazDoma(), 
skryDoma(), 
zachovajViditeľnosťDoma(), 
zobrazený
zobrazenyDoma
public Boolean zobrazenyDoma()
 Alias pre zobrazenýDoma.
skrytýDoma
public Boolean skrytýDoma()
Zistí, či sa mení viditeľnosť robota pri prechode na
 domovskú pozíciu. Ak je robot po prechode na domovskú
 pozíciu skrytý, metóda vráti objekt Boolean s hodnotou true, ak
 zobrazený, tak s hodnotou false a ak sa po
 prechode domov viditeľnosť nemení, metóda vráti null.
Návratová hodnota:
objekt Boolean alebo
     null
Pozri tiež:
viditeľnýDoma(), 
zobrazenýDoma(), 
ukážDoma(), 
zobrazDoma(), 
skryDoma(), 
zachovajViditeľnosťDoma(), 
skrytý
skrytyDoma
public Boolean skrytyDoma()
 Alias pre skrytýDoma.
ukážDoma
public void ukážDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov zobrazí.
Pozri tiež:
viditeľnýDoma(), 
zobrazenýDoma(), 
skrytýDoma(), 
zobrazDoma(), 
skryDoma(), 
zachovajViditeľnosťDoma(), 
ukáž
ukazDoma
public void ukazDoma()
 Alias pre viditeľnýDoma.
zobrazDoma
public void zobrazDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov zobrazí.
Pozri tiež:
viditeľnýDoma(), 
zobrazenýDoma(), 
skrytýDoma(), 
ukážDoma(), 
skryDoma(), 
zachovajViditeľnosťDoma(), 
zobraz
skryDoma
public void skryDoma()
Spôsobí, že odteraz sa robot vždy pri použití niektorej
 modifikácie metódy domov skryje.
Pozri tiež:
viditeľnýDoma(), 
zobrazenýDoma(), 
skrytýDoma(), 
ukážDoma(), 
zobrazDoma(), 
zachovajViditeľnosťDoma(), 
skry
zachovajViditeľnosťDoma
public void zachovajViditeľnosťDoma()
Po použití tejto metódy nebude viditeľnosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
viditeľnýDoma(), 
zobrazenýDoma(), 
skrytýDoma(), 
ukážDoma(), 
zobrazDoma(), 
skryDoma()
zachovajViditelnostDoma
public void zachovajViditelnostDoma()
 Alias pre zachovajViditeľnosťDoma.
farbaDoma
public Farba farbaDoma()
Zistí, ako sa mení farba po prechode robota
 domov. Buď je vrátená konkrétna
 farba, alebo hodnota null, ktorá
 signalizuje, že farba sa po prechode domov nemení.
Návratová hodnota:
hodnota farby po prechode robota na domovskú
     pozíciu alebo null
Pozri tiež:
farbaDoma(Color), 
farbaDoma(Farebnosť), 
farbaDoma(int, int, int), 
farbaDoma(int, int, int, int), 
zachovajFarbuDoma(), 
farba
farbaDoma
public void farbaDoma(Color nováFarba)
Nastaví alebo zruší ovplyvňovanie farby robota po jeho
 prechode domov. Ak je zadaná
 konkrétna farebná inštancia, tak sa bude farba robota po
 prechode domov meniť na zadanú hodnotu. Ak je zadaná
 hodnota (Farba)null, tak farba nebude
 po prechode domov ovplyvnená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
nováFarba – nová hodnota farby pera robota, ktorá má
     byť nastavená po jeho prechode na domovskú pozíciu
     alebo pretypovaná hodnota (Farba)null
Pozri tiež:
farbaDoma(), 
farbaDoma(Farebnosť), 
farbaDoma(int, int, int), 
farbaDoma(int, int, int, int), 
zachovajFarbuDoma(), 
farba
farbaDoma
public void farbaDoma(Farebnosť podľaObjektu)
Nastaví alebo zruší ovplyvňovanie farby robota po jeho
 prechode domov. Ak je zadaná
 konkrétna farebná inštancia, tak sa bude farba robota po
 prechode domov meniť na zadanú hodnotu. Ak je zadaná
 hodnota (Farebnosť)null, tak farba
 nebude po prechode domov ovplyvnená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
podľaObjektu – objekt určujúci novú farbu na
     domovskej pozícii alebo pretypovaná hodnota
     (Farebnosť)null
Pozri tiež:
farbaDoma(), 
farbaDoma(Color), 
farbaDoma(int, int, int), 
farbaDoma(int, int, int, int), 
zachovajFarbuDoma()
farbaDoma
public Farba farbaDoma(int r,
                       int g,
                       int b)
Nastaví ovplyvňovanie farby robota po jeho
 prechode domov.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
Návratová hodnota:
objekt typu Farba – nová farba
Pozri tiež:
farbaDoma(), 
farbaDoma(Color), 
farbaDoma(Farebnosť), 
farbaDoma(int, int, int, int), 
zachovajFarbuDoma()
farbaDoma
public Farba farbaDoma(int r,
                       int g,
                       int b,
                       int a)
Nastaví ovplyvňovanie farby robota po jeho
 prechode domov.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 –
     nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba
Pozri tiež:
farbaDoma(), 
farbaDoma(Color), 
farbaDoma(Farebnosť), 
farbaDoma(int, int, int), 
zachovajFarbuDoma()
zachovajFarbuDoma
public void zachovajFarbuDoma()
Po použití tejto metódy nebude farba robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
farbaDoma(), 
farbaDoma(Color), 
farbaDoma(Farebnosť), 
farbaDoma(int, int, int), 
farbaDoma(int, int, int, int)
cieľováFarbaDoma
public Farba cieľováFarbaDoma()
Zistí, ako sa mení cieľová farba po prechode robota
 domov. Buď je vrátená konkrétna
 farba, alebo hodnota null, ktorá signalizuje
 to, že cieľová farba nie je po prechode robota domov
 ovplyvnená.
Návratová hodnota:
hodnota cieľovej farby robota po jeho prechode
     na domovskú pozíciu alebo null
Pozri tiež:
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma(), 
cieľováFarba
cielovaFarbaDoma
public Farba cielovaFarbaDoma()
 Alias pre cieľováFarbaDoma.
cieľováFarbaDoma
public void cieľováFarbaDoma(Color nováFarba)
Zmení nastavenie cieľovej farby robota po jeho prechode
 domov. Hodnota (Farba)null
 znamená, že ak nie je nastavené zrušenie cieľovej farby
 doma, tak cieľová farba nie je po prechode domov
 ovplyvnená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
nováFarba – cieľová farba robota po prechode na
     domovskú pozíciu alebo pretypovaná hodnota
     (Farba)null
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma(), 
cieľováFarba
cielovaFarbaDoma
public void cielovaFarbaDoma(Color nováFarba)
 Alias pre cieľováFarbaDoma.
cieľováFarbaDoma
public void cieľováFarbaDoma(Farebnosť podľaObjektu)
Zmení nastavenie cieľovej farby robota po jeho prechode
 domov. Hodnota (Farebnosť)null znamená, že cieľová farba nie
 je po prechode domov ovplyvnená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
podľaObjektu – objekt určujúci nastavenie cieľovej
     farby robota, ktorá bude použitá pri jeho prechode
     na domovskú pozíciu, pričom pretypovaná hodnota
     (Farebnosť)null signalizuje zrušenie
     nastavenia cieľovej farby pri prechode domov
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma()
cielovaFarbaDoma
public void cielovaFarbaDoma(Farebnosť podľaObjektu)
 Alias pre cieľováFarbaDoma.
cieľováFarbaDoma
public Farba cieľováFarbaDoma(int r,
                              int g,
                              int b)
Nastaví cieľovú farbu robota po jeho
 prechode domov.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
Návratová hodnota:
objekt typu Farba – nová cieľová farba
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma()
cielovaFarbaDoma
public Farba cielovaFarbaDoma(int r,
                              int g,
                              int b)
 Alias pre cieľováFarbaDoma.
cieľováFarbaDoma
public Farba cieľováFarbaDoma(int r,
                              int g,
                              int b,
                              int a)
Nastaví cieľovú farbu robota po jeho
 prechode domov.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu
     0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu
     0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu
     0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 –
     nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová cieľová farba
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma()
cielovaFarbaDoma
public Farba cielovaFarbaDoma(int r,
                              int g,
                              int b,
                              int a)
 Alias pre cieľováFarbaDoma.
zrušíCieľovúFarbuDoma
public boolean zrušíCieľovúFarbuDoma()
Overí, či bude po použití niektorej modifikácie metódy
 domov cieľová farba zrušená, alebo nie.
Návratová hodnota:
true – cieľová farba bude po prechode
     robota domov zrušená; true – cieľová farba
     bude nastavená na konkrétnu farbu alebo nebude
     ovplyvnená – pozri metódu cieľováFarbaDoma
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušCieľovúFarbuDoma(boolean), 
zrušCieľovúFarbuDoma()
zrusiCielovuFarbuDoma
public boolean zrusiCielovuFarbuDoma()
 Alias pre zrušCieľovúFarbuDoma.
zrušCieľovúFarbuDoma
public void zrušCieľovúFarbuDoma(boolean zruš)
Táto metóda umožňuje nastaviť správanie zmeny cieľovej
 farby robota po prechode na domovskú pozíciu. Ak je hodnota
 parametra zruš rovná true, tak cieľová
 farba bude po použití niektorej modifikácie metódy domov zrušená, v opačnom prípade závisí od
 nastavenia parametra robota cieľováFarbaDoma.
Parametre:
zruš – hodnota true znamená, že cieľová
     farba bude po prechode domov
     zrušená a hodnotafalse znamená, že zmena
     cieľovej farby pri prechode domov závisí od nastavenia
     parametra robota cieľováFarbaDoma
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma()
zrusCielovuFarbuDoma
public void zrusCielovuFarbuDoma(boolean zruš)
 Alias pre zrušCieľovúFarbuDoma.
zrušCieľovúFarbuDoma
public void zrušCieľovúFarbuDoma()
Po použití tejto metódy bude cieľová farba robota pri
 použití niektorej modifikácie metódy domov
 zrušená.
Pozri tiež:
cieľováFarbaDoma(), 
cieľováFarbaDoma(Color), 
cieľováFarbaDoma(Farebnosť), 
cieľováFarbaDoma(int, int, int), 
cieľováFarbaDoma(int, int, int, int), 
zrušíCieľovúFarbuDoma(), 
zrušCieľovúFarbuDoma(boolean)
zrusCielovuFarbuDoma
public void zrusCielovuFarbuDoma()
 Alias pre zrušCieľovúFarbuDoma.
hrúbkaPeraDoma
public Double hrúbkaPeraDoma()
Zistí, ako sa mení hrúbka pera po prechode robota
 domov. Buď je vrátená konkrétna
 číselná hodnota, alebo hodnota null, ktorá
 signalizuje, že hrúbka pera sa po prechode domov nemení.
Návratová hodnota:
hrúbka pera domovskej pozície alebo null
Pozri tiež:
hrúbkaČiaryDoma(), 
hrúbkaPeraDoma(Double), 
hrúbkaČiaryDoma(Double), 
zachovajHrúbkuPeraDoma(), 
zachovajHrúbkuČiaryDoma(), 
hrúbkaPera, 
parametreVzoruPeraDoma(double, double...)
hrubkaPeraDoma
public Double hrubkaPeraDoma()
 Alias pre hrúbkaPeraDoma.
hrúbkaČiaryDoma
public Double hrúbkaČiaryDoma()
Zistí, ako sa mení hrúbka pera po prechode robota
 domov. Buď je vrátená konkrétna
 číselná hodnota, alebo hodnota null, ktorá
 signalizuje, že hrúbka pera sa po prechode domov nemení.
Návratová hodnota:
hrúbka pera domovskej pozície alebo null
Pozri tiež:
hrúbkaPeraDoma(), 
hrúbkaPeraDoma(Double), 
hrúbkaČiaryDoma(Double), 
zachovajHrúbkuPeraDoma(), 
zachovajHrúbkuČiaryDoma(), 
hrúbkaČiary, 
parametreVzoruČiaryDoma(double, double...)
hrubkaCiaryDoma
public Double hrubkaCiaryDoma()
 Alias pre hrúbkaPeraDoma.
hrúbkaPeraDoma
public void hrúbkaPeraDoma(Double nováHrúbka)
Nastaví alebo zruší ovplyvňovanie hrúbky pera po prechode
 robota domov. Ak je zadaná konkrétna
 číselná hodnota, hrúbka pera robota bude po prechode domov
 upravená na zadanú hodnotu. Ak je zadaná hodnota null,
 tak hrúbka pera nebude po prechode domov ovplyvnená.
Parametre:
nováHrúbka – nová hrúbka pera domovskej pozície alebo
     null
Pozri tiež:
hrúbkaPeraDoma(), 
hrúbkaČiaryDoma(), 
hrúbkaČiaryDoma(Double), 
zachovajHrúbkuPeraDoma(), 
zachovajHrúbkuČiaryDoma(), 
hrúbkaPera, 
parametreVzoruPeraDoma(double, double...)
hrubkaPeraDoma
public void hrubkaPeraDoma(Double nováHrúbka)
 Alias pre hrúbkaPeraDoma.
hrúbkaČiaryDoma
public void hrúbkaČiaryDoma(Double nováHrúbka)
Nastaví alebo zruší ovplyvňovanie hrúbky pera po prechode
 robota domov. Ak je zadaná konkrétna
 číselná hodnota, hrúbka pera robota bude po prechode domov
 upravená na zadanú hodnotu. Ak je zadaná hodnota null,
 tak hrúbka pera nebude po prechode domov ovplyvnená.
Parametre:
nováHrúbka – nová hrúbka pera domovskej pozície alebo
     null
Pozri tiež:
hrúbkaPeraDoma(), 
hrúbkaČiaryDoma(), 
hrúbkaPeraDoma(Double), 
zachovajHrúbkuPeraDoma(), 
zachovajHrúbkuČiaryDoma(), 
hrúbkaČiary, 
parametreVzoruČiaryDoma(double, double...)
hrubkaCiaryDoma
public void hrubkaCiaryDoma(Double nováHrúbka)
 Alias pre hrúbkaPeraDoma.
zachovajHrúbkuPeraDoma
public void zachovajHrúbkuPeraDoma()
Po použití tejto metódy nebude hrúbka pera robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
hrúbkaPeraDoma(), 
hrúbkaČiaryDoma(), 
hrúbkaPeraDoma(Double), 
hrúbkaČiaryDoma(Double), 
zachovajHrúbkuČiaryDoma(), 
parametreVzoruPeraDoma(double, double...)
zachovajHrubkuPeraDoma
public void zachovajHrubkuPeraDoma()
 Alias pre zachovajHrúbkuPeraDoma.
zachovajHrúbkuČiaryDoma
public void zachovajHrúbkuČiaryDoma()
Po použití tejto metódy nebude hrúbka pera robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
hrúbkaPeraDoma(), 
hrúbkaČiaryDoma(), 
hrúbkaPeraDoma(Double), 
hrúbkaČiaryDoma(Double), 
zachovajHrúbkuPeraDoma(), 
parametreVzoruČiaryDoma(double, double...)
zachovajHrubkuCiaryDoma
public void zachovajHrubkuCiaryDoma()
 Alias pre zachovajHrúbkuČiaryDoma.
predvolenýVzorČiary
public void predvolenýVzorČiary()
Nastaví vzor čiary pera na predvolený, čo je plná
 neprerušovaná čiara. Metóda zároveň zresetuje posun vzoru
 čiary pera.
Pozri tiež:
vzorČiary(double, double...), 
posunVzoruČiary(double), 
predvolenýVzorPera()
predvolenyVzorCiary
public void predvolenyVzorCiary()
 Alias pre predvolenýVzorČiary.
predvolenýVzorPera
public void predvolenýVzorPera()
Nastaví vzor čiary pera na predvolený, čo je plná
 neprerušovaná čiara. Metóda zároveň zresetuje posun vzoru
 čiary pera.
Pozri tiež:
vzorPera(double, double...), 
posunVzoruPera(double), 
predvolenýVzorČiary()
predvolenyVzorPera
public void predvolenyVzorPera()
 Alias pre predvolenýVzorPera.
vzorČiary
public void vzorČiary(double začiatokVzoru,
                      double... pokračovanieVzoru)
Upraví vzor čiary pera. Vzorom sa myslí striedanie čiarok
 a medzier rôznych dĺžok súbežných s líniou kreslenej krivky –
 čiarkovanie.
 
 Dĺžky čiarok vzoru sú uvádzané v pixeloch. Každá hodnota
 striedavo určuje kreslenú a vynechávanú časť. Ak je počet
 hodnôt nepárny, tak sa celý vzor zopakuje v inverznom
 význame hodnôt, čiže pri druhom opakovaní bude začiatokVzoru označovať vynechanú (nekreslenú) časť, ale
 pri treťom opäť kreslenú a tak ďalej. Pozrite sa na obrázok
 nižšie:
 
 
 Zobrazenie
 rôznych vzorov podľa opisu nižšie.
 
 Smerom zdola nahor narastá hrúbka čiarky a smerom zľava
 doprava narastá dĺžka čiarok vzoru, pričom sa striedajú
 vzory s nepárnym a párnym počtom hodnôt. Napríklad prvé dve
 čiary zľava sú vyrobené z dĺžok 1 (nepárny počet
 dĺžok – čiže rovnaká hodnota sa strieda pre kreslenú aj
 vynechanú časť) a 1, 2 (párny
 počet dĺžok – čiže prvá hodnota vyjadruje kreslenú dĺžku
 a druhá vynechanú). Ďalšie dve čiary sú zložené z dĺžok
 2 a 2, 4 a takto
 dĺžky stúpajú až po hodnoty 11 a 11, 22. (So zmenou hrúby sa vždy
 reštartuje čiarkovanie, čo by sa dalo „doladiť“ metódou
 posunVzoruČiary.
 Hrúbka rastie od 1 po 8.)
 
 Tvorba vzoru so zadanými párnymi alebo nepárnymi dĺžkami
 bude možno lepšie pochopiteľná z nasledujúceho obrázka:
 
 
 Zobrazenie
 rôznych vzorov podľa opisu nižšie.
 
 Prvá čiara je vytvorená zo vzoru zadaného ako jedna
 hodnota, ktorú pomenujme n. To znamená, že sa
 striedajú rovnaké kreslené a vynechané dĺžky (n).
 Druhá čiara je vytvorená z dvoch hodnôt:
 n a 2 × n. Tretia čiara z troch hodnôt:
 n, 2 × n a 3 × n. Pri nej si všimnite
 ako sa striedajú kreslené a vynechané časti: prvá je
 kreslená časť s dĺžkou n, potom nasleduje vynechaná
 časť s dĺžkou 2 × n, potom opäť kreslená s dĺžkou
 3 × n a potom sa opakovanie vymení – štvrtá časť je
 vynechaná s dĺžkou n, piata kreslená s dĺžkou
 2 × n a tak ďalej. Štvrtý riadok opäť obsahuje párny
 počet hodnôt (n, 2n, 3n a 4n),
 takže všetky kreslené a vynechané časti sa opakujú stále
 v rovnakom poradí. Takto to pokračuje až po čiaru vzoru
 s párnym počtom hodnôt: n, 2n, 3n,
 4nn, 5n a 6n.
 
 Ak chceme vzor čiary pera
 zrušiť, použijeme metódu predvolenýVzorPera.
Parametre:
začiatokVzoru – prvý prvok vzoru čiary pera
     (čiarkovania); tento parameter je povinný, aby Java
     vedela rozlíšiť, či chceme vzor čiary čítať alebo
     zapisovať
pokračovanieVzoru – zoznam parametrov určujúcich
     ostatné dĺžky kreslených a vynechávaných čiarok
     (čiarkovanie)
Pozri tiež:
vzorČiary(double[]), 
vzorPera(double[]), 
vzorPera(double, double...), 
vzorČiary(), 
vzorPera(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(double, double...), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
vzorCiary
public void vzorCiary(double začiatokVzoru,
                      double... pokračovanieVzoru)
 Alias pre vzorČiary.
vzorČiary
public void vzorČiary(double[] novýVzor)
Upraví vzor čiary pera. Toto je alternatívna verzia
 metódy vzorČiary(začiatokVzoru, pokračovanieVzoru).
 Viac podrobností o fungovaní vzoru čiary nájdete v jej
 opise. Hlavný rozdiel je v tom, že táto metóda prijíma pole
 dĺžok a metóda vzorČiary(začiatokVzoru, pokračovanieVzoru)
 prijíma zoznam parametrov. V rôznych situáciách môže byť
 výhodnejšie jedno alebo druhé.
Parametre:
novýVzor – pole prvkov určujúcich dĺžky kreslených
     a vynechávaných čiarok (čiarkovanie)
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorPera(double[])
vzorCiary
public void vzorCiary(double[] novýVzor)
 Alias pre vzorČiary.
vzorČiary
public double[] vzorČiary()
Vráti aktuálny vzor čiary pera. Pozri metódu vzorČiary(začiatokVzoru, pokračovanieVzoru).
Návratová hodnota:
aktuálny vzor čiary pera
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorPera(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
vzorCiary
public double[] vzorCiary()
 Alias pre vzorČiary.
posunVzoruČiary
public void posunVzoruČiary(double posun)
Upraví posun vzoru čiary pera. Pozri aj: vzorČiary. Posun (alebo
 fáza) je nezáporná hodnota, ktorá posúva začiatok vzoru –
 čiarkovania čiary. Najlepšie to vyjadrujú nasledujúce
 obrázky:
 
 
 
 
 Zobrazenie rôznych fáz
 čiar rovnakého vzoru. Horné čiary majú vždy nulový posun,
 ktorý plynule rastie po jednotkách smerom
 nadol.
Parametre:
posun – určuje posun (fázu) vzoru (čiarkovania) čiary
     od začiatku kreslenej krivky; nezáporná hodnota
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
posunVzoruPera(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(double, double...), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
posunVzoruCiary
public void posunVzoruCiary(double posun)
 Alias pre posunVzoruČiary.
posunVzoruČiary
public double posunVzoruČiary()
Vráti aktuálny posun vzoru čiary pera. Pozri metódu
 posunVzoruČiary(posun).
Návratová hodnota:
aktuálny posun vzoru čiary pera
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorČiary(), 
vzorPera(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
posunVzoruCiary
public double posunVzoruCiary()
 Alias pre posunVzoruČiary.
parametreVzoruČiaryDoma
public double[] parametreVzoruČiaryDoma()
Zistí, aké parametre majú byť nastavené vzoru čiary pera
 pri prechode robota domov. Ak robot
 pri prechode domov vzor čiary nemení, tak je vrátená
 hodnota null. Ak mení čiaru na plnú, tak je
 vrátené prázdne pole. Ak mení vzor čiary podľa určitého
 zadania, tak je vrátene pole obsahujúce posun vzoru v prvom
 prvku (s indexom 0) a charakter vzoru
 (čiarkovanie) v ostatných prvkoch poľa.
 Pozor! Všimnite si, že prvý prvok
 poľa pri použití určitého vzoru označuje posun – fázu
 vzoru.
Návratová hodnota:
parametre vzoru čiary pera pri prechode robota
     domov uložené v poli prvkov typu
     double
Pozri tiež:
parametreVzoruČiaryDoma(double, double...), 
zachovajVzorČiaryDoma(), 
hrúbkaČiaryDoma()
parametreVzoruCiaryDoma
public double[] parametreVzoruCiaryDoma()
 Alias pre parametreVzoruČiaryDoma.
parametreVzoruČiaryDoma
public void parametreVzoruČiaryDoma(double posunVzoru,
                                    double... charakterVzoru)
Nastaví parametre vzoru čiary pera použité pri prechode
 robota domov.
 
 Prvým parametrom je posun vzoru, ktorý môže byť aj
 nulový.
 
 Smerodajnejšími sú ďalšie parametre (zoznam), ktoré
 určujú charakter vzoru – pozri aj vzorČiary. Ak nie je ani jeden z týchto
 parametrov nastavený, znamená to, že robot si má pri
 prechode domov nastaviť plnú čiaru.
 V takom prípade je hodnota posunu irelevantná.
 
 V opačnom prípade určujú parametre charakter vzoru
 (čiarkovanie) a posun sa do úvahy berie.
 
 Ak chceme tieto parametre zrušiť a nastaviť robot tak,
 aby pri prechode domov vzor čiary
 nemenil, tak použijeme metódu zachovajVzorČiaryDoma.
Parametre:
posunVzoru – posun vzoru čiary pera nastavený pri
     prechode robota domov
charakterVzoru – charakter vzoru čiary pera nastavený
     pri prechode robota domov
Pozri tiež:
parametreVzoruČiaryDoma(), 
zachovajVzorČiaryDoma(), 
hrúbkaČiaryDoma(Double)
parametreVzoruCiaryDoma
public void parametreVzoruCiaryDoma(double posunVzoru,
                                    double... charakterVzoru)
 Alias pre parametreVzoruČiaryDoma.
zachovajVzorČiaryDoma
public void zachovajVzorČiaryDoma()
Zruší zmenu parametrov čiarkovania, vrátane jeho posunu,
 pri prechode robota domov.
Pozri tiež:
parametreVzoruČiaryDoma(), 
parametreVzoruČiaryDoma(double, double...), 
zachovajHrúbkuČiaryDoma()
zachovajVzorCiaryDoma
public void zachovajVzorCiaryDoma()
 Alias pre zachovajVzorČiaryDoma.
vzorPera
public void vzorPera(double začiatokVzoru,
                     double... pokračovanieVzoru)
Upraví vzor čiary pera. Vzorom sa myslí striedanie čiarok
 a medzier rôznych dĺžok súbežných s líniou kreslenej krivky –
 čiarkovanie.
 
 Dĺžky čiarok vzoru sú uvádzané v pixeloch. Každá hodnota
 striedavo určuje kreslenú a vynechávanú časť. Ak je počet
 hodnôt nepárny, tak sa celý vzor zopakuje v inverznom
 význame hodnôt, čiže pri druhom opakovaní bude začiatokVzoru označovať vynechanú (nekreslenú) časť, ale
 pri treťom opäť kreslenú a tak ďalej. Pozrite sa na obrázok
 nižšie:
 
 
 Zobrazenie
 rôznych vzorov podľa opisu nižšie.
 
 Smerom zdola nahor narastá hrúbka čiarky a smerom zľava
 doprava narastá dĺžka čiarok vzoru, pričom sa striedajú
 vzory s nepárnym a párnym počtom hodnôt. Napríklad prvé dve
 čiary zľava sú vyrobené z dĺžok 1 (nepárny počet
 dĺžok – čiže rovnaká hodnota sa strieda pre kreslenú aj
 vynechanú časť) a 1, 2 (párny
 počet dĺžok – čiže prvá hodnota vyjadruje kreslenú dĺžku
 a druhá vynechanú). Ďalšie dve čiary sú zložené z dĺžok
 2 a 2, 4 a takto
 dĺžky stúpajú až po hodnoty 11 a 11, 22. (So zmenou hrúby sa vždy
 reštartuje čiarkovanie, čo by sa dalo „doladiť“ metódou
 posunVzoruPera.
 Hrúbka rastie od 1 po 8.)
 
 Tvorba vzoru so zadanými párnymi alebo nepárnymi dĺžkami
 bude možno lepšie pochopiteľná z nasledujúceho obrázka:
 
 
 Zobrazenie
 rôznych vzorov podľa opisu nižšie.
 
 Prvá čiara je vytvorená zo vzoru zadaného ako jedna
 hodnota, ktorú pomenujme n. To znamená, že sa
 striedajú rovnaké kreslené a vynechané dĺžky (n).
 Druhá čiara je vytvorená z dvoch hodnôt:
 n a 2 × n. Tretia čiara z troch hodnôt:
 n, 2 × n a 3 × n. Pri nej si všimnite
 ako sa striedajú kreslené a vynechané časti: prvá je
 kreslená časť s dĺžkou n, potom nasleduje vynechaná
 časť s dĺžkou 2 × n, potom opäť kreslená s dĺžkou
 3 × n a potom sa opakovanie vymení – štvrtá časť je
 vynechaná s dĺžkou n, piata kreslená s dĺžkou
 2 × n a tak ďalej. Štvrtý riadok opäť obsahuje párny
 počet hodnôt (n, 2n, 3n a 4n),
 takže všetky kreslené a vynechané časti sa opakujú stále
 v rovnakom poradí. Takto to pokračuje až po čiaru vzoru
 s párnym počtom hodnôt: n, 2n, 3n,
 4nn, 5n a 6n.
 
 Ak chceme vzor čiary pera
 zrušiť, použijeme metódu predvolenýVzorPera.
Parametre:
začiatokVzoru – prvý prvok vzoru čiary pera
     (čiarkovania); tento parameter je povinný, aby Java
     vedela rozlíšiť, či chceme vzor čiary čítať alebo
     zapisovať
pokračovanieVzoru – zoznam parametrov určujúcich
     ostatné dĺžky kreslených a vynechávaných čiarok
     (čiarkovanie)
Pozri tiež:
vzorČiary(double[]), 
vzorPera(double[]), 
vzorČiary(double, double...), 
vzorČiary(), 
vzorPera(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(double, double...), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
vzorPera
public void vzorPera(double[] novýVzor)
Upraví vzor čiary pera. Toto je alternatívna verzia
 metódy vzorPera(začiatokVzoru, pokračovanieVzoru).
 Viac podrobností o fungovaní vzoru čiary nájdete v jej
 opise. Hlavný rozdiel je v tom, že táto metóda prijíma pole
 dĺžok a metóda vzorPera(začiatokVzoru, pokračovanieVzoru)
 prijíma zoznam parametrov. V rôznych situáciách môže byť
 výhodnejšie jedno alebo druhé.
Parametre:
novýVzor – pole prvkov určujúcich dĺžky kreslených
     a vynechávaných čiarok (čiarkovanie)
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorČiary(double[])
vzorPera
public double[] vzorPera()
Vráti aktuálny vzor čiary pera. Pozri metódu vzorPera(začiatokVzoru, pokračovanieVzoru).
Návratová hodnota:
aktuálny vzor čiary pera
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorČiary(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
posunVzoruPera
public void posunVzoruPera(double posun)
Upraví posun vzoru čiary pera. Pozri aj: vzorPera. Posun (alebo
 fáza) je nezáporná hodnota, ktorá posúva začiatok vzoru –
 čiarkovania čiary. Najlepšie to vyjadrujú nasledujúce
 obrázky:
 
 
 
 
 Zobrazenie rôznych fáz
 čiar rovnakého vzoru. Horné čiary majú vždy nulový posun,
 ktorý plynule rastie po jednotkách smerom
 nadol.
Parametre:
posun – určuje posun (fázu) vzoru (čiarkovania) čiary
     od začiatku kreslenej krivky; nezáporná hodnota
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
posunVzoruČiary(double), 
posunVzoruČiary(), 
posunVzoruPera(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruPeraDoma(double, double...), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
posunVzoruPera
public double posunVzoruPera()
Vráti aktuálny posun vzoru čiary pera. Pozri metódu
 posunVzoruPera(posun).
Návratová hodnota:
aktuálny posun vzoru čiary pera
Pozri tiež:
vzorČiary(double, double...), 
vzorPera(double, double...), 
vzorČiary(), 
vzorPera(), 
posunVzoruČiary(double), 
posunVzoruPera(double), 
posunVzoruČiary(), 
predvolenýVzorČiary(), 
predvolenýVzorPera(), 
parametreVzoruČiaryDoma(), 
hrúbkaPera(double), 
hrúbkaČiary(double), 
čiara(Stroke)
parametreVzoruPeraDoma
public double[] parametreVzoruPeraDoma()
Zistí, aké parametre majú byť nastavené vzoru čiary pera
 pri prechode robota domov. Ak robot
 pri prechode domov vzor čiary nemení, tak je vrátená
 hodnota null. Ak mení čiaru na plnú, tak je
 vrátené prázdne pole. Ak mení vzor čiary podľa určitého
 zadania, tak je vrátene pole obsahujúce posun vzoru v prvom
 prvku (s indexom 0) a charakter vzoru
 (čiarkovanie) v ostatných prvkoch poľa.
 Pozor! Všimnite si, že prvý prvok
 poľa pri použití určitého vzoru označuje posun – fázu
 vzoru.
Návratová hodnota:
parametre vzoru čiary pera pri prechode robota
     domov uložené v poli prvkov typu
     double
Pozri tiež:
parametreVzoruPeraDoma(double, double...), 
zachovajVzorPeraDoma(), 
hrúbkaPeraDoma()
parametreVzoruPeraDoma
public void parametreVzoruPeraDoma(double posunVzoru,
                                   double... charakterVzoru)
Nastaví parametre vzoru čiary pera použité pri prechode
 robota domov.
 
 Prvým parametrom je posun vzoru, ktorý môže byť aj
 nulový.
 
 Smerodajnejšími sú ďalšie parametre (zoznam), ktoré
 určujú charakter vzoru – pozri aj vzorPera. Ak nie je ani jeden z týchto
 parametrov nastavený, znamená to, že robot si má pri
 prechode domov nastaviť plnú čiaru.
 V takom prípade je hodnota posunu irelevantná.
 
 V opačnom prípade určujú parametre charakter vzoru
 (čiarkovanie) a posun sa do úvahy berie.
 
 Ak chceme tieto parametre zrušiť a nastaviť robot tak,
 aby pri prechode domov vzor čiary
 nemenil, tak použijeme metódu zachovajVzorPeraDoma.
Parametre:
posunVzoru – posun vzoru čiary pera nastavený pri
     prechode robota domov
charakterVzoru – charakter vzoru čiary pera nastavený
     pri prechode robota domov
Pozri tiež:
parametreVzoruPeraDoma(), 
zachovajVzorPeraDoma(), 
hrúbkaPeraDoma(Double)
zachovajVzorPeraDoma
public void zachovajVzorPeraDoma()
Zruší zmenu parametrov čiarkovania, vrátane jeho posunu,
 pri prechode robota domov.
Pozri tiež:
parametreVzoruPeraDoma(), 
parametreVzoruPeraDoma(double, double...), 
zachovajHrúbkuPeraDoma()
veľkosťDoma
public Double veľkosťDoma()
Zistí, ako sa mení veľkosť robota po jeho prechode na
 domovskú pozíciu. Buď je vrátená
 konkrétna číselná hodnota, alebo hodnota null,
 ktorá signalizuje, že veľkosť robota sa po prechode domov
 nemení.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Návratová hodnota:
hodnota veľkosti robota po prechode na domovskú
     pozíciu alebo null
Pozri tiež:
pomerDoma(), 
rozmerDoma(), 
zachovajVeľkosťDoma(), 
veľkosť()
velkostDoma
public Double velkostDoma()
 Alias pre veľkosťDoma.
pomerDoma
public Double pomerDoma()
Zistí, ako sa mení pomer veľkosti robota po jeho
 prechode na domovskú pozíciu. Buď
 je vrátená konkrétna číselná hodnota, alebo hodnota
 null, ktorá signalizuje, že pomer veľkosti
 robota sa po prechode domov nemení.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Návratová hodnota:
hodnota pomeru veľkosti robota po prechode na
     domovskú pozíciu alebo null
Pozri tiež:
veľkosťDoma(), 
rozmerDoma(), 
zachovajPomerDoma(), 
pomer()
rozmerDoma
public Rozmer rozmerDoma()
Zistí, či a ako sa budú meniť rozmery (šírky a výšky robota po
 prechode na domovskú pozíciu. V skutočnosti (pozri poznámku
 nižšie) ide o prepočítané hodnoty dvoch iných vlastností:
 veľkosťDoma a pomerDoma. Ak je hociktorá z týchto dvoch vlastností
 nenastavená (rovná null), tak
 bude návratová hodnota tejto metódy null,
 pretože domovský rozmer bez nich nemôže byť vypočítaný.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
 
 veľkosťDoma
 pomerDoma
Návratová hodnota:
objekt obsahujúci zmenu rozmerov robota po
     prechode na domovskú pozíciu alebo null
Pozri tiež:
veľkosťDoma(), 
pomerDoma(), 
zachovajRozmerDoma(), 
rozmery()
veľkosťDoma
public void veľkosťDoma(Double nováVeľkosť)
Nastaví alebo zruší ovplyvňovanie veľkosti robota po jeho
 prechode na domovskú pozíciu. Ak je
 zadaná konkrétna číselná hodnota, veľkosť robota bude
 po prechode domov upravená na zadanú hodnotu. Ak je zadaná
 hodnota null, tak veľkosť robota nebude po
 prechode domov ovplyvnená.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Parametre:
nováVeľkosť – nová veľkosť robota, ktorá bude
     nastavená pri prechode robota na domovskú pozíciu
     alebo null
Pozri tiež:
pomerDoma(Double), 
rozmerDoma(Rozmer), 
zachovajVeľkosťDoma(), 
veľkosť(double)
velkostDoma
public void velkostDoma(Double nováVeľkosť)
 Alias pre veľkosťDoma.
pomerDoma
public void pomerDoma(Double novýPomer)
Nastaví alebo zruší ovplyvňovanie pomeru veľkosti robota
 po jeho prechode na domovskú pozíciu.
 Ak je zadaná konkrétna číselná hodnota, tak bude pomer
 veľkosti robota po prechode domov upravený na zadanú
 hodnotu. Ak je zadaná hodnota null, tak sa
 pomer veľkosti robota po prechode domov nezmení.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Parametre:
novýPomer – nová hodnota pomeru veľkosti pri prechode
     na domovskú pozíciu; null znamená „nemeniť
     pomer pri prechode na domovskú pozíciu“
Pozri tiež:
veľkosťDoma(Double), 
rozmerDoma(Rozmer), 
zachovajPomerDoma(), 
pomer(double)
rozmerDoma
public void rozmerDoma(Rozmer novýRozmer)
Nastaví alebo zruší nastavovanie zmeny rozmerov (šírky
 a výšky) robota po prechode na domovskú pozíciu.
 V skutočnosti nastavuje táto metóda hodnoty dvojice
 vlastností veľkosťDoma
 a pomerDoma. Ich hodnoty sú
 prepočítané podľa pravidiel, ktoré sú rozpísané
 v upozornení v opise metódy rozmery(šírka, výška) (pozri aj poznámku
 nižšie). Ak je hodnota nového rozmeru rovná
 null, tak budú obidve vlastnosti (domovská
 veľkosť a domovský pomer veľkosti) nastavené na
 null.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Parametre:
novýRozmer – inštancia rozmeru, ktorého hodnoty budú
     prepočítané na veľkosťDoma
     a pomerDoma alebo hodnota
     null
Pozri tiež:
veľkosťDoma(Double), 
pomerDoma(Double), 
zachovajRozmerDoma(), 
rozmery(Rozmer)
zachovajVeľkosťDoma
public void zachovajVeľkosťDoma()
Po použití tejto metódy nebude veľkosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Pozri tiež:
veľkosťDoma(), 
pomerDoma(), 
rozmerDoma(), 
veľkosťDoma(Double)
zachovajVelkostDoma
public void zachovajVelkostDoma()
 Alias pre zachovajVeľkosťDoma.
zachovajPomerDoma
public void zachovajPomerDoma()
Po použití tejto metódy nebude pomer veľkosti robota
 (šírky a výšky) pri použití niektorej modifikácie metódy
 domov ovplyvňovaný.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Pozri tiež:
veľkosťDoma(), 
pomerDoma(), 
rozmerDoma(), 
pomerDoma(Double)
zachovajRozmerDoma
public void zachovajRozmerDoma()
Volanie tejto metódy je ekvivalentné volaniu tejto
 dvojice metód:
 
 zachovajVeľkosťDoma
 zachovajPomerDoma
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Pozri tiež:
veľkosťDoma(), 
pomerDoma(), 
rozmerDoma(), 
rozmerDoma(Rozmer)
priehľadnosťDoma
public Double priehľadnosťDoma()
Zistí, ako sa mení priehľadnosť robota po jeho prechode na
 domovskú pozíciu. Buď je vrátená
 konkrétna číselná hodnota, alebo hodnota null,
 ktorá signalizuje, že priehľadnosť robota sa po prechode
 domov nemení.
Návratová hodnota:
hodnota priehľadnosti robota po jeho prechode
     na domovskú pozíciu alebo null
Pozri tiež:
priehľadnosťDoma(Double), 
zachovajPriehľadnosťDoma(), 
priehľadnosť()
priehladnostDoma
public Double priehladnostDoma()
 Alias pre priehľadnosťDoma.
priehľadnosťDoma
public void priehľadnosťDoma(Double nováPriehľadnosť)
Nastaví alebo zruší ovplyvňovanie priehľadnosti robota po
 jeho prechode na domovskú pozíciu.
 Ak je zadaná konkrétna číselná hodnota, priehľadnosť robota
 bude po prechode domov upravená na zadanú hodnotu. Ak je
 zadaná hodnota null, tak priehľadnosť robota
 nebude po prechode domov ovplyvnená.
Parametre:
nováPriehľadnosť – nová priehľadnosť robota na domovskej
     pozícii alebo null
Pozri tiež:
priehľadnosťDoma(), 
zachovajPriehľadnosťDoma(), 
priehľadnosť()
priehladnostDoma
public void priehladnostDoma(Double nováPriehľadnosť)
 Alias pre priehľadnosťDoma.
zachovajPriehľadnosťDoma
public void zachovajPriehľadnosťDoma()
Po použití tejto metódy nebude priehľadnosť robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
priehľadnosťDoma(), 
priehľadnosťDoma(Double)
zachovajPriehladnostDoma
public void zachovajPriehladnostDoma()
 Alias pre zachovajPriehľadnosťDoma.
písmoDoma
public Písmo písmoDoma()
Zistí, ako sa mení písmo robota po jeho prechode na
 domovskú pozíciu. Buď je vrátený
 konkrétny objekt reprezentujúci písmo, alebo hodnota
 null, ktorá signalizuje, že písmo robota sa po
 prechode domov nemení.
Návratová hodnota:
písmo, ktoré bude nastavené po prechode robota na
     domovskú pozíciu alebo null
Pozri tiež:
písmoDoma(Font), 
písmoDoma(String, double), 
zachovajPísmoDoma(), 
písmo()
pismoDoma
public Pismo pismoDoma()
 Alias pre písmoDoma.
písmoDoma
public void písmoDoma(Font novéPísmo)
Nastaví alebo zruší zmenu písma robota po jeho prechode na
 domovskú pozíciu. Ak je zadaný objekt
 typu Písmo alebo Font, tak písmo
 robota sa po prechode domov zmení podľa zadaného objektu.
 Ak je zadaná hodnota null, tak písmo robota nebude
 po prechode domov ovplyvnené.
Parametre:
novéPísmo – objekt typu Písmo alebo
     Font alebo null
Pozri tiež:
písmoDoma(), 
písmoDoma(String, double), 
zachovajPísmoDoma(), 
písmo(String, double)
pismoDoma
public void pismoDoma(Font novéPísmo)
 Alias pre písmoDoma.
písmoDoma
public Písmo písmoDoma(String názov,
                       double veľkosť)
Určí nové písmo robota, ktoré bude nastavené po jeho prechode
 na domovskú pozíciu.
Parametre:
názov – názov písma; môže byť všeobecný názov
     logického písma (Dialog, DialogInput, Monospaced,
     Serif, SansSerif…) alebo názov
     konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je
     zaokrúhlená na typ float)
Návratová hodnota:
objekt typu Písmo určujúci nový typ písma
     robota
Pozri tiež:
písmoDoma(), 
písmoDoma(Font), 
zachovajPísmoDoma(), 
písmo(String, double)
pismoDoma
public Pismo pismoDoma(String názov,
                       double veľkosť)
 Alias pre písmoDoma.
zachovajPísmoDoma
public void zachovajPísmoDoma()
Po použití tejto metódy nebude písmo robota pri
 použití niektorej modifikácie metódy domov
 ovplyvňovaná.
Pozri tiež:
písmoDoma(), 
písmoDoma(Font), 
písmoDoma(String, double)
zachovajPismoDoma
public void zachovajPismoDoma()
 Alias pre zachovajPísmoDoma.
spôsobKreslenia
public int spôsobKreslenia()
 Číta spôsob kreslenia obrázkov
 a písania textov (resp. „kreslenia“ textov) aktuálnym
 robotom.
Návratová hodnota:
spôsob kreslenia, čo môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ
Pozri tiež:
text(String), 
obrázok(String)
sposobKreslenia
public int sposobKreslenia()
 Alias pre spôsobKreslenia.
spôsobKreslenia
public void spôsobKreslenia(int novýSpôsobKreslenia)
 Zmení spôsob kreslenia obrázkov
 a písania textov (resp. „kreslenia“ textov) aktuálnym
 robotom.
Parametre:
novýSpôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Pozri tiež:
text(String), 
obrázok(String)
sposobKreslenia
public void sposobKreslenia(int novýSpôsobKreslenia)
 Alias pre spôsobKreslenia.
meno
public void meno(String novéMeno)
 Pomenuje alebo zruší meno tohto
 robota. Meno robota je používané pri zápise a obnove
 vlastností robota s pomocou konfiguračného súboru
 a interaktívnym režimom.
 
 Zadané meno musí byť unikátne, nesmie byť prázdne ani
 rezervované, nesmie sa začínať ani končiť bodkou a nesmie
 obsahovať znak rovná sa. Na zrušenie mena tohto robota
 treba zavolať túto metódu s argumentom null.
 
 Rezervované mená sú: "svet",
 "podlaha", "strop"
 a "robot". Posledné pomenovanie je rezervované
 pre hlavný robot. Pri
 ňom jedinom toto meno nespôsobí vznik výnimky GRobotException ohlasujúcej zadanie
 nesprávneho (rezervovaného) mena a pre neho je zároveň
 tento reťazec ekvivalentný zrušeniu mena robota zadaním
 hodnoty null. (To znamená, že aj hlavný robot
 môže mať vlastné unikátne meno, ale v prípade priradenia
 predvoleného mena je jeho pomenovanie fiktívne. To znamená,
 že ak by náhodou svoje privilégium hlavný robot z nejakého dôvodu
 stratil, tak sa z neho automaticky stane nepomenovaný
 robot.)
Parametre:
novéMeno – nového meno robota alebo null
     na zrušenie mena tohto robota
Výnimky:
GRobotException – ak zadané meno nespĺňa niektorú
     požiadavku
meno
public String meno()
 Vráti meno robota alebo
 null ak robot nemá meno. Ak ide o hlavný robot, ktorý nebol pomenovaný
 (to znamená, že jeho meno nebolo zmenené), tak metóda vráti rezervované meno
 "robot".
Návratová hodnota:
vráti meno robota alebo null (ak robot
     nemá meno a nejde o hlavný robot)
Pozri tiež:
meno(String)
registrujVKonfigurácii
public void registrujVKonfigurácii()
Zaregistruje tento robot v konfigurácii sveta. To
 znamená, že po ukončení aplikácie budú údaje o tomto
 robote automaticky uložené do konfigurácie sveta. Táto
 metóda by mala byť vykonaná pri spustení aplikácie, pretože
 jej vykonanie zároveň prečíta a použije údaje o robote
 z konfiguračného súboru. Ak tento robot nie je hlavným robotom, tak musí mať definované
 meno, inak vznikne výnimka.
 Ďalšie informácie môžete nájsť pri ekvivalentnej metóde
 sveta registrujRobot(robot).
Pozri tiež:
Svet.registrujRobot(GRobot), 
Svet.dajRobot(String), 
registrujVKonfigurácii(String), 
jeRegistrovaný()
registrujVKonfiguracii
public void registrujVKonfiguracii()
 Alias pre registrujVKonfigurácii.
registrujVKonfigurácii
public void registrujVKonfigurácii(String novéMeno)
Zaregistruje tento robot v konfigurácii sveta pod
 novým menom. To znamená, že po
 ukončení aplikácie budú údaje o tomto robote automaticky
 uložené do konfigurácie sveta. Táto metóda by mala byť
 vykonaná pri spustení aplikácie, pretože jej vykonanie
 zároveň prečíta a použije údaje o robote z konfiguračného
 súboru. Ak tento robot nie je hlavným robotom, tak musí mať definované meno (pričom zadané meno nesmie mať hodnotu
 null), inak vznikne výnimka. Ďalšie informácie
 môžete nájsť pri úzko súvisiacej metóde sveta registrujRobot(robot).
Parametre:
novéMeno – nové meno robota
Pozri tiež:
Svet.registrujRobot(GRobot), 
Svet.dajRobot(String), 
registrujVKonfigurácii(), 
jeRegistrovaný()
registrujVKonfiguracii
public void registrujVKonfiguracii(String novéMeno)
 Alias pre registrujVKonfigurácii.
jeRegistrovaný
public boolean jeRegistrovaný()
Overí, či je tento robot registrovaný v konfigurácii sveta.
Návratová hodnota:
true ak je robot registrovaný
     v konfigurácii sveta, inak false
Pozri tiež:
Svet.registrujRobot(GRobot), 
Svet.dajRobot(String), 
registrujVKonfigurácii(), 
registrujVKonfigurácii(String)
jeRegistrovany
public boolean jeRegistrovany()
 Alias pre jeRegistrovaný.
čítajZoSúboru
public void čítajZoSúboru(Súbor súbor)
                   throws IOException
Prečíta vlastnosti robota zo zadaného súboru. Robot musí
 mať meno (okrem hlavného robota, ktorému je v prípade
 nepriradenia žiadneho mena automaticky priradené meno
 robot) a súbor musí
 byť otvorený na čítanie. Metóda je používaná automatickou konfiguráciou
 sveta. (Ďalšie informácie súvisiace s ukladaním údajov robota
 sú v opise metódy uložDoSúboru(súbor).)
Parametre:
súbor – inštancia triedy súbor
     otvorená na čítanie
Výnimky:
IOException – ak vznikla chyba vo
     vstupno-výstupnej operácii
GRobotException – ak robot nemá meno
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.registrujRobot(GRobot, String), 
uložDoSúboru(Súbor)
citajZoSuboru
public void citajZoSuboru(Súbor súbor)
                   throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
prečítajZoSúboru
public void prečítajZoSúboru(Súbor súbor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
precitajZoSuboru
public void precitajZoSuboru(Súbor súbor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
uložDoSúboru
public void uložDoSúboru(Súbor súbor)
                  throws IOException
Uloží vlastnosti robota do zadaného súboru. Robot musí
 mať meno (okrem hlavného robota, ktorému je v prípade
 nepriradenia žiadneho mena automaticky priradené meno
 robot) a súbor musí
 byť otvorený na zápis. Metóda je používaná automatickou konfiguráciou
 sveta. Do konfigurácie je zapísaných mnoho vlastností
 robota súvisiacich s jeho vzhľadom a aktivitou.
 Nie sú ukladané napríklad: spojnice, nastavenia
 kreslenia vlastného tvaru robota, nastavenie kreslenia do
 obrázka, záloha plátna, záznam cesty, ani zamestnanosť pre
 potreby obrázkov.
Parametre:
súbor – inštancia triedy súbor
     otvorená na zápis
Výnimky:
IOException – ak vznikla chyba vo
     vstupno-výstupnej operácii
GRobotException – ak robot nemá meno
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.registrujRobot(GRobot, String), 
čítajZoSúboru(Súbor)
ulozDoSuboru
public void ulozDoSuboru(Súbor súbor)
                  throws IOException
 Alias pre uložDoSúboru.
Výnimky:
IOException
dopredu
public void dopredu(double dĺžka)
Prikáže robotu, aby sa posunul dopredu o zadanú dĺžku
 v aktuálnom smere. Keď je pero položené, tak kreslí
 čiaru. Opakom je metóda vzad.
 
 Poznámka: V pôvodnom jazyku
 Logo (v anglickej verzii) sú ku každému príkazu pohybu
 korytnačky (z toho pochádza termín „korytnačia grafika“;
 korytnačku v tomto rámci nahrádza grafický robot)
 definované jeho dvojpísmenové skratky (fd – forward –
 dopredu; bk – backward – vzad; rt – right – vpravo; lt –
 left – vľavo). Pri preklade Loga do slovenčiny vznikali
 rôzne nejednoznačnosti, ktoré autori vyriešili ustálením
 nasledujúcich tvarov príkazov pohybu korytnačky:
 dopredu, vzad, vpravo a vľavo, ku ktorým prislúchajú skratky
 príkazov do, vz, vp a vľ. Ak chceme dodržať pravidlo
 vytvorenia skratky z prvých dvoch písmen, tak v slovenskom
 jazyku nenájdeme iné jednoznačné priradenie. V jazyku Java
 je však slovo do rezervované. Preto
 v programovacom rámci GRobot nemôžu byť skratky pre tieto
 príkazy definované. Rozhodli sme sa aspoň definovať všetky
 aliasy príkazov pohybu: vpred, doprava, doľava a dozadu.
Parametre:
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
Pozri tiež:
dopredu (bez zadania dĺžky), 
(vpred), 
vzad, 
(dozadu), 
vpravo, 
(doprava), 
vľavo, 
(doľava), 
choďNa, 
skočNa, 
choďPoOblúku, 
skočPoOblúku, 
zdvihniPero, 
položPero
vpred
public void vpred(double dĺžka)
 Alias pre dopredu.
vzad
public void vzad(double dĺžka)
Prikáže robotu, aby cúvol z aktuálneho miesta o zadanú
 dĺžku (v aktuálnom smere). Keď je pero položené, tak
 kreslí čiaru. Opakom je metóda dopredu.
 
 Poznámka: V pôvodnom jazyku
 Logo (v anglickej verzii) sú ku každému príkazu pohybu
 korytnačky (z toho pochádza termín „korytnačia grafika“;
 korytnačku v tomto rámci nahrádza grafický robot)
 definované jeho dvojpísmenové skratky (fd – forward –
 dopredu; bk – backward – vzad; rt – right – vpravo; lt –
 left – vľavo). Pri preklade Loga do slovenčiny vznikali
 rôzne nejednoznačnosti, ktoré autori vyriešili ustálením
 nasledujúcich tvarov príkazov pohybu korytnačky:
 dopredu, vzad, vpravo a vľavo, ku ktorým prislúchajú skratky
 príkazov do, vz, vp a vľ. Ak chceme dodržať pravidlo
 vytvorenia skratky z prvých dvoch písmen, tak v slovenskom
 jazyku nenájdeme iné jednoznačné priradenie. V jazyku Java
 je však slovo do rezervované. Preto
 v programovacom rámci GRobot nemôžu byť skratky pre tieto
 príkazy definované. Rozhodli sme sa aspoň definovať všetky
 aliasy príkazov pohybu: vpred, doprava, doľava a dozadu.
Parametre:
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
Pozri tiež:
vzad (bez zadania dĺžky), 
dopredu, 
(vpred), 
(dozadu), 
vpravo, 
(doprava), 
vľavo, 
(doľava), 
choďNa, 
skočNa, 
choďPoOblúku, 
skočPoOblúku, 
zdvihniPero, 
položPero
dozadu
public void dozadu(double dĺžka)
 Alias pre vzad.
vpravo
public void vpravo(double uhol)
Prikáže robotu, aby sa obrátil o zadaný uhol v smere
 hodinových ručičiek. Opakom je metóda vľavo.
 
 Poznámka: V pôvodnom jazyku
 Logo (v anglickej verzii) sú ku každému príkazu pohybu
 korytnačky (z toho pochádza termín „korytnačia grafika“;
 korytnačku v tomto rámci nahrádza grafický robot)
 definované jeho dvojpísmenové skratky (fd – forward –
 dopredu; bk – backward – vzad; rt – right – vpravo; lt –
 left – vľavo). Pri preklade Loga do slovenčiny vznikali
 rôzne nejednoznačnosti, ktoré autori vyriešili ustálením
 nasledujúcich tvarov príkazov pohybu korytnačky:
 dopredu, vzad, vpravo a vľavo, ku ktorým prislúchajú skratky
 príkazov do, vz, vp a vľ. Ak chceme dodržať pravidlo
 vytvorenia skratky z prvých dvoch písmen, tak v slovenskom
 jazyku nenájdeme iné jednoznačné priradenie. V jazyku Java
 je však slovo do rezervované. Preto
 v programovacom rámci GRobot nemôžu byť skratky pre tieto
 príkazy definované. Rozhodli sme sa aspoň definovať všetky
 aliasy príkazov pohybu: vpred, doprava, doľava a dozadu.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť
Pozri tiež:
vpravo (bez zadania uhla), 
dopredu, 
(vpred), 
vzad, 
(dozadu), 
(doprava), 
vľavo, 
(doľava), 
otočNa(double, double), 
choďPoOblúku, 
skočPoOblúku
doprava
public void doprava(double uhol)
 Alias pre vpravo.
vľavo
public void vľavo(double uhol)
Prikáže robotu, aby sa obrátil o zadaný uhol proti smeru
 hodinových ručičiek. Opakom je metóda vpravo.
 
 Poznámka: V pôvodnom jazyku
 Logo (v anglickej verzii) sú ku každému príkazu pohybu
 korytnačky (z toho pochádza termín „korytnačia grafika“;
 korytnačku v tomto rámci nahrádza grafický robot)
 definované jeho dvojpísmenové skratky (fd – forward –
 dopredu; bk – backward – vzad; rt – right – vpravo; lt –
 left – vľavo). Pri preklade Loga do slovenčiny vznikali
 rôzne nejednoznačnosti, ktoré autori vyriešili ustálením
 nasledujúcich tvarov príkazov pohybu korytnačky:
 dopredu, vzad, vpravo a vľavo, ku ktorým prislúchajú skratky
 príkazov do, vz, vp a vľ. Ak chceme dodržať pravidlo
 vytvorenia skratky z prvých dvoch písmen, tak v slovenskom
 jazyku nenájdeme iné jednoznačné priradenie. V jazyku Java
 je však slovo do rezervované. Preto
 v programovacom rámci GRobot nemôžu byť skratky pre tieto
 príkazy definované. Rozhodli sme sa aspoň definovať všetky
 aliasy príkazov pohybu: vpred, doprava, doľava a dozadu.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť
Pozri tiež:
vľavo (bez zadania uhla), 
dopredu, 
(vpred), 
vzad, 
(dozadu), 
vpravo, 
(doprava), 
(doľava), 
otočNa(double, double), 
choďPoOblúku, 
skočPoOblúku
vlavo
public void vlavo(double uhol)
 Alias pre vľavo.
doľava
public void doľava(double uhol)
 Alias pre vľavo.
dolava
public void dolava(double uhol)
 Alias pre doľava.
dopredu
public void dopredu()
Prikáže robotu, aby sa posunul v aktuálnom smere
 dopredu o hodnotu svojej veľkosti.
 Keď je pero položené, tak kreslí čiaru. Opakom je metóda
 vzad. (Pozri aj metódu dopredu(dĺžka).)
 
 Poznámka: Cieľom tejto metódy je
 zjednodušiť pohyb robota v interaktívnom režime, kde
 fungujú aj skratky základných príkazov na pohyb: dopredu –
 do, vzad – vz, vpravo – vp a vľavo –
 vľ/vl. Samozrejme, že jej použitiu nič
 nebráni ani pri „klasickom“ programovaní s použitím
 programovacieho rámca GRobot.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
dopredu(dĺžka), 
(vpred), 
vzad, 
(dozadu), 
vpravo, 
(doprava), 
vľavo, 
(doľava), 
zdvihniPero, 
položPero
vpred
public void vpred()
 Alias pre dopredu.
vzad
public void vzad()
Prikáže robotu, aby cúvol z aktuálneho miesta o hodnotu
 svojej veľkosti (v aktuálnom
 smere). Keď je pero položené, tak kreslí čiaru. Opakom je
 metóda dopredu.
 (Pozri aj metódu vzad(dĺžka).)
 
 Poznámka: Cieľom tejto metódy je
 zjednodušiť pohyb robota v interaktívnom režime, kde
 fungujú aj skratky základných príkazov na pohyb: dopredu –
 do, vzad – vz, vpravo – vp a vľavo –
 vľ/vl. Samozrejme, že jej použitiu nič
 nebráni ani pri „klasickom“ programovaní s použitím
 programovacieho rámca GRobot.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
vzad(dĺžka), 
dopredu, 
(vpred), 
(dozadu), 
vpravo, 
(doprava), 
vľavo, 
(doľava), 
zdvihniPero, 
položPero
dozadu
public void dozadu()
 Alias pre vzad.
vpravo
public void vpravo()
Prikáže robotu, aby sa obrátil o uhol otáčania (predvolene 45° – s ohľadom
 na definície hodnôt
 konštát v rozhraní Smer) v smere
 hodinových ručičiek. Opakom je metóda vľavo.
 (Pozri aj metódu vpravo(uhol).)
 
 Poznámka: Cieľom tejto metódy je
 zjednodušiť pohyb robota v interaktívnom režime, kde
 fungujú aj skratky základných príkazov na pohyb: dopredu –
 do, vzad – vz, vpravo – vp a vľavo –
 vľ/vl. Samozrejme, že jej použitiu nič
 nebráni ani pri „klasickom“ programovaní s použitím
 programovacieho rámca GRobot.
Pozri tiež:
vpravo(uhol), 
uholOtáčania(uhol), 
dopredu, 
(vpred), 
vzad, 
(dozadu), 
(doprava), 
vľavo, 
(doľava)
doprava
public void doprava()
 Alias pre vpravo.
vľavo
public void vľavo()
Prikáže robotu, aby sa obrátil o uhol otáčania (predvolene 45° – s ohľadom
 na definície hodnôt
 konštát v rozhraní Smer) proti
 smeru hodinových ručičiek. Opakom je metóda vpravo.
 (Pozri aj metódu vľavo(uhol).)
 
 Poznámka: Cieľom tejto metódy je
 zjednodušiť pohyb robota v interaktívnom režime, kde
 fungujú aj skratky základných príkazov na pohyb: dopredu –
 do, vzad – vz, vpravo – vp a vľavo –
 vľ/vl. Samozrejme, že jej použitiu nič
 nebráni ani pri „klasickom“ programovaní s použitím
 programovacieho rámca GRobot.
Pozri tiež:
vľavo(uhol), 
uholOtáčania(uhol), 
dopredu, 
(vpred), 
vzad, 
(dozadu), 
vpravo, 
(doprava), 
(doľava)
vlavo
public void vlavo()
 Alias pre vľavo.
doľava
public void doľava()
 Alias pre vľavo.
dolava
public void dolava()
 Alias pre doľava.
skoč
public void skoč(double dĺžka)
Prikáže robotu, aby preskočil dopredu o zadanú dĺžku
 v aktuálnom smere. Robot pri skákaní nekreslí čiaru.
 Opakom je metóda odskoč.
 (Pozri aj metódu skoč().)
Parametre:
dĺžka – vzdialenosť, o ktorú má robot preskočiť
Pozri tiež:
dopredu
skoc
public void skoc(double dĺžka)
 Alias pre skoč.
odskoč
public void odskoč(double dĺžka)
Prikáže robotu, aby skokom cúvol z aktuálneho miesta
 o zadanú dĺžku (v aktuálnom smere). Robot pri skákaní
 nekreslí čiaru. Opakom je metóda skoč.
 (Pozri aj metódu odskoč().)
Parametre:
dĺžka – vzdialenosť, o ktorú má robot preskočiť
Pozri tiež:
vzad
odskoc
public void odskoc(double dĺžka)
 Alias pre odskoč.
skoč
public void skoč()
Prikáže robotu, aby preskočil v aktuálnom smere dopredu
 o hodnotu svojej veľkosti. Robot
 pri skákaní nekreslí čiaru. Opakom je metóda
 odskoč.
 (Pozri aj metódu skoč(dĺžka).)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
dopredu
skoc
public void skoc()
 Alias pre skoč.
odskoč
public void odskoč()
Prikáže robotu, aby skokom cúvol z aktuálneho miesta
 o hodnotu svojej veľkosti
 (v aktuálnom smere). Robot pri skákaní nekreslí čiaru.
 Opakom je metóda skoč.
 (Pozri aj metódu odskoč(dĺžka).)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
vzad
odskoc
public void odskoc()
 Alias pre odskoč.
otočO
public void otočO(double uhol)
Otočí robot o zadaný uhol (proti smeru hodinových
 ručičiek). Má rovnaký efekt, ako keby sme volali metódu
 vľavo.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť
Pozri tiež:
otoč(double), 
otočO(double, double)
otocO
public void otocO(double uhol)
 Alias pre otoč.
otočO
public void otočO(double uhol,
                  double najviacO)
Otočí robot o zadaný uhol s kontrolou maximálneho
 dovoleného uhla pootočenia. Volanie tejto metódy má zmysel
 v prípade použitia premennej, ktorej hodnotu chceme
 obmedziť. Ak je absolútna hodnota uhla väčia ako absolútna
 hodnota obmedzenia (parametrom najviacO), tak je
 hodnota uhla otáčania „orezaná“ (nastavená na hodnotu
 najviacO so zachovaním znamienka, ktoré určuje
 smer otáčania).
 
 Kladná hodnota uhla otáčania značí otáčanie proti smeru
 hodinových ručičiek. Znamienko hodnoty obmedzenia je
 ignorované.
 
 Porovnaj s metódu otočO.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť
najviacO – obmedzenie učujúce maximálnu povolenú
     hodnota uhla otáčania
Pozri tiež:
otočO(double)
otocO
public void otocO(double uhol,
                  double najviacO)
 Alias pre otoč.
posuňVpravo
public void posuňVpravo(double dĺžka)
Prikáže robotu, aby sa posunul vpravo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu). Robot zostane
 obrátený tam, kam bol. Keď je pero položené, tak kreslí
 čiaru. Protikladom je metóda posuňVľavo.
Parametre:
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
posunVpravo
public void posunVpravo(double dĺžka)
 Alias pre posuňVpravo.
posuňDoprava
public void posuňDoprava(double dĺžka)
 Alias pre posuňVpravo.
posunDoprava
public void posunDoprava(double dĺžka)
 Alias pre posuňDoprava.
posuňVľavo
public void posuňVľavo(double dĺžka)
Prikáže robotu, aby sa posunul vľavo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu). Robot zostane obrátený
 tam, kam bol. Keď je pero položené, tak kreslí čiaru.
 Protikladom je metóda posuňVpravo.
Parametre:
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
posunVlavo
public void posunVlavo(double dĺžka)
 Alias pre posuňVľavo.
posuňDoľava
public void posuňDoľava(double dĺžka)
 Alias pre posuňVľavo.
posunDolava
public void posunDolava(double dĺžka)
 Alias pre posuňDoľava.
posuňVpravo
public void posuňVpravo()
Prikáže robotu, aby sa posunul vpravo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu). Robot
 zostane obrátený tam, kam bol. Keď je pero položené, tak
 kreslí čiaru. Protikladom je metóda posuňVľavo.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
posunVpravo
public void posunVpravo()
 Alias pre posuňVpravo.
posuňDoprava
public void posuňDoprava()
 Alias pre posuňVpravo.
posunDoprava
public void posunDoprava()
 Alias pre posuňDoprava.
posuňVľavo
public void posuňVľavo()
Prikáže robotu, aby sa posunul vľavo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu). Robot
 zostane obrátený tam, kam bol. Keď je pero položené, tak
 kreslí čiaru. Protikladom je metóda posuňVpravo.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
posunVlavo
public void posunVlavo()
 Alias pre posuňVľavo.
posuňDoľava
public void posuňDoľava()
 Alias pre posuňVľavo.
posunDolava
public void posunDolava()
 Alias pre posuňDoľava.
posuňVSmere
public void posuňVSmere(double smer,
                        double dĺžka)
Prikáže robotu, aby sa posunul v zadanom smere
 o zadanú dĺžku. Robot zostane obrátený tam, kam bol. Keď
 je pero položené, tak kreslí čiaru.
Parametre:
smer – uhol smeru, ktorým sa má robot posunúť
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
Pozri tiež:
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
posunVSmere
public void posunVSmere(double smer,
                        double dĺžka)
 Alias pre posuňVSmere.
posuňVSmere
public void posuňVSmere(double smer)
Prikáže robotu, aby sa posunul v zadanom smere
 o hodnotu svojej veľkosti. Robot
 zostane obrátený tam, kam bol. Keď je pero položené, tak
 kreslí čiaru.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
smer – uhol smeru, ktorým sa má robot posunúť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
posunVSmere
public void posunVSmere(double smer)
 Alias pre posuňVSmere.
posuňVSmere
public void posuňVSmere(Smer smer,
                        double dĺžka)
Prikáže robotu, aby sa posunul v zadanom smere
 o zadanú dĺžku. Robot zostane obrátený tam, kam bol. Keď
 je pero položené, tak kreslí čiaru.
Parametre:
smer – inštancia určujúca smer, ktorým sa má robot
     posunúť
dĺžka – vzdialenosť, o ktorú sa má robot posunúť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
posunVSmere
public void posunVSmere(Smer smer,
                        double dĺžka)
 Alias pre posuňVSmere.
posuňVSmere
public void posuňVSmere(Smer smer)
Prikáže robotu, aby sa posunul v zadanom smere
 o hodnotu svojej veľkosti. Robot
 zostane obrátený tam, kam bol. Keď je pero položené, tak
 kreslí čiaru.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
smer – inštancia určujúca smer, ktorým sa má robot
     posunúť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
posunVSmere
public void posunVSmere(Smer smer)
 Alias pre posuňVSmere.
preskočVpravo
public void preskočVpravo(double dĺžka)
Prikáže robotu, aby preskočil vpravo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu). Robot zostane obrátený
 tam, kam bol a pri skákaní nekreslí čiaru. Protikladom je
 metóda preskočVľavo.
Parametre:
dĺžka – vzdialenosť, o ktorú má robot preskočiť
preskocVpravo
public void preskocVpravo(double dĺžka)
 Alias pre preskočVpravo.
preskočDoprava
public void preskočDoprava(double dĺžka)
 Alias pre preskočVpravo.
preskocDoprava
public void preskocDoprava(double dĺžka)
 Alias pre preskočDoprava.
preskočVľavo
public void preskočVľavo(double dĺžka)
Prikáže robotu, aby preskočil vľavo o zadanú dĺžku
 (vzhľadom na aktuálnu orientáciu). Robot zostane obrátený
 tam, kam bol a pri skákaní nekreslí čiaru.
 Protikladom je metóda preskočVpravo.
Parametre:
dĺžka – vzdialenosť, o ktorú má robot preskočiť
preskocVlavo
public void preskocVlavo(double dĺžka)
 Alias pre preskočVľavo.
preskočDoľava
public void preskočDoľava(double dĺžka)
 Alias pre preskočVľavo.
preskocDolava
public void preskocDolava(double dĺžka)
 Alias pre preskočDoľava.
preskočVpravo
public void preskočVpravo()
Prikáže robotu, aby preskočil vpravo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu). Robot
 zostane obrátený tam, kam bol a pri skákaní nekreslí čiaru.
 Protikladom je metóda preskočVľavo.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
preskocVpravo
public void preskocVpravo()
 Alias pre preskočVpravo.
preskočDoprava
public void preskočDoprava()
 Alias pre preskočVpravo.
preskocDoprava
public void preskocDoprava()
 Alias pre preskočDoprava.
preskočVľavo
public void preskočVľavo()
Prikáže robotu, aby preskočil vľavo o hodnotu svojej
 veľkosti násobenej pomerom (vzhľadom na aktuálnu orientáciu). Robot
 zostane obrátený tam, kam bol a pri skákaní nekreslí čiaru.
 Protikladom je metóda preskočVpravo.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
preskocVlavo
public void preskocVlavo()
 Alias pre preskočVľavo.
preskočDoľava
public void preskočDoľava()
 Alias pre preskočVľavo.
preskocDolava
public void preskocDolava()
 Alias pre preskočDoľava.
preskočVSmere
public void preskočVSmere(double smer,
                          double dĺžka)
Prikáže robotu, aby preskočil v zadanom smere
 o zadanú dĺžku. Robot zostane obrátený tam, kam bol
 a pri skákaní nekreslí čiaru.
Parametre:
smer – uhol smeru, ktorým má robot skočiť
dĺžka – vzdialenosť, o ktorú má robot preskočiť
Pozri tiež:
posuňVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
preskocVSmere
public void preskocVSmere(double smer,
                          double dĺžka)
 Alias pre preskočVSmere.
preskočVSmere
public void preskočVSmere(double smer)
Prikáže robotu, aby preskočil v zadanom smere o hodnotu
 svojej veľkosti. Robot zostane
 obrátený tam, kam bol a pri skákaní nekreslí čiaru.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
smer – uhol smeru, ktorým má robot skočiť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(Smer), 
posuňVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
preskocVSmere
public void preskocVSmere(double smer)
 Alias pre preskočVSmere.
preskočVSmere
public void preskočVSmere(Smer smer,
                          double dĺžka)
Prikáže robotu, aby preskočil v zadanom smere
 o zadanú dĺžku. Robot zostane obrátený tam, kam bol
 a pri skákaní nekreslí čiaru.
Parametre:
smer – inštancia určujúca smer, ktorým má robot skočiť
dĺžka – vzdialenosť, o ktorú má robot preskočiť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
preskocVSmere
public void preskocVSmere(Smer smer,
                          double dĺžka)
 Alias pre preskočVSmere.
preskočVSmere
public void preskočVSmere(Smer smer)
Prikáže robotu, aby preskočil v zadanom smere o hodnotu
 svojej veľkosti. Robot zostane
 obrátený tam, kam bol a pri skákaní nekreslí čiaru.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
smer – inštancia určujúca smer, ktorým má robot skočiť
Pozri tiež:
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
posuň(double, double), 
preskoč(double, double)
preskocVSmere
public void preskocVSmere(Smer smer)
 Alias pre preskočVSmere.
smerNa
public double smerNa(double x,
                     double y)
Zistí smer (uhol) z aktuálneho miesta robota smerom na
 zadané súradnice [x, y]. Ak sú súradnice bodu zhodné so
 súradnicami robota, je vrátená hodnota uhla 360.
Parametre:
x – x-ová súradnica bodu
y – y-ová súradnica bodu
Návratová hodnota:
hodnota uhla určujúceho smer od robota
     k zadanému bodu
Pozri tiež:
smer(), 
uhol(), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double), 
otočNa(double, double, double)
uholNa
public double uholNa(double x,
                     double y)
 Alias pre smerNa.
smerNa
public double smerNa(Poloha objekt)
Zistí smer (uhol) z aktuálneho miesta robota smerom ku
 zadanému objektu. Ak sú polohy robota a objektu zhodné, je
 vrátená hodnota uhla 360. (Cieľový objekt nemusí byť
 viditeľný.)
Parametre:
objekt – objekt vzhľadom ku ktorému bude zistená
     orientácia
Návratová hodnota:
hodnota uhla určujúceho smer od robota
     ku zadanému objektu
Pozri tiež:
smer(), 
uhol(), 
smerNa(double, double), 
uholNa(double, double), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double), 
otočNa(Poloha), 
otočNa(Poloha, double)
uholNa
public double uholNa(Poloha objekt)
 Alias pre smerNa.
smerNa
public double smerNa(Shape tvar)
Zistí smer (uhol) z aktuálneho miesta robota smerom do,
 stredu hraníc[1] zadaného tvaru. Ak je poloha
 robota zhodná so stredom hraníc tvaru, je vrátená hodnota
 uhla 360.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), ku stredu
     hraníc ktorého má byť zistený smer
Návratová hodnota:
hodnota uhla určujúceho smer od robota ku
     zadanému tvaru
Pozri tiež:
smer(), 
uhol(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double), 
otočNa(Shape), 
otočNa(Shape, double)
uholNa
public double uholNa(Shape tvar)
 Alias pre smerNa.
smerNaMyš
public double smerNaMyš()
Zistí smer (uhol) z aktuálneho miesta robota smerom
 k aktuálnym súradniciam myši. Ak sú súradnice myši zhodné
 so súradnicami robota, je vrátená hodnota uhla 360.
Návratová hodnota:
hodnota uhla určujúceho smer od robota
     k aktuálnym súradniciam myši
Pozri tiež:
smer(), 
uhol(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double), 
otočNa(double, double), 
otočNaMyš(), 
otočNaMyš(double)
smerNaMys
public double smerNaMys()
 Alias pre smerNaMyš.
uholNaMyš
public double uholNaMyš()
 Alias pre smerNaMyš.
uholNaMys
public double uholNaMys()
 Alias pre smerNaMyš.
smer
public double smer(double Δx,
                   double Δy)
Zistí smer k bodu zadanému s pomocou odchýlok súradníc
 v horizontálnom a vertikáklom smere [Δx, Δy]. Ak sú zadané
 súradnice [0, 0], metóda vráti hodnotu 360. Efekt je
 rovnaký, ako keby robot stál v bode [0, 0] a použili by sme
 s rovnakými hodnotami metódu smerNa. (Inak povedané – táto metóda pracuje s tzv.
 relatívnymi súradnicami – súradnicami vztiahnutými
 k súčasnej polohe robota.)
Parametre:
Δx – odchýlka v smere osi x
Δy – odchýlka v smere osi y
Návratová hodnota:
hodnota uhla určujúceho smer od stredu
     súradnicovej sústavy k zadanému bodu
Pozri tiež:
smer(), 
uhol(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
uhol(double, double), 
otočNa(double, double)
uhol
public double uhol(double Δx,
                   double Δy)
 Alias pre smer.
otočNa
public void otočNa(double x,
                   double y)
Nasmeruje robot smerom na zadané súradnice [x, y] na
 podlahe (strope). Ak sú súradnice bodu zhodné so
 súradnicami robota, smer robota sa nezmení. Inak je
 vypočítaný uhol smeru medzi aktuálnou polohou robota
 a zadaným bodom, ktorý je použitý na nasmerovanie robota.
Parametre:
x – x-ová súradnica bodu
y – y-ová súradnica bodu
Pozri tiež:
smer(), 
uhol(), 
smerNa(double, double), 
uholNa(double, double), 
smerNa(Poloha), 
uholNa(Poloha), 
smerNa(Shape), 
uholNa(Shape), 
smerNaMyš(), 
uholNaMyš(), 
smer(double, double), 
uhol(double, double)
otocNa
public void otocNa(double x,
                   double y)
 Alias pre otočNa.
otočNa
public void otočNa(double x,
                   double y,
                   double najviacO)
Funguje podobne ako metóda otočNa, ibaže obmedzuje uhol pootočenia stanoveným smerom –
 neotočí robot okamžite smerom na zadané súradnice, iba ním
 pootočí stanoveným smerom o maximálnu zadanú hodnotu uhla.
Parametre:
x – x-ová súradnica bodu
y – y-ová súradnica bodu
najviacO – maximálna hodnota uhla, o ktorú sa môže
     robot otočiť smerom k bodu [x, y]
Pozri tiež:
smerNa(double, double)
otocNa
public void otocNa(double x,
                   double y,
                   double najviacO)
 Alias pre otočNa.
otočNa
public void otočNa(Poloha objekt)
Nasmeruje tento robot smerom k zadanému objektu. Ak sú
 súradnice robota a objektu zhodné, smer robota sa nezmení.
 Inak je vypočítaný uhol smeru medzi polohou robota
 a zadaného objektu a ten je použitý na nasmerovanie robota.
 (Objekt nemusí byť viditeľný.)
Parametre:
objekt – objekt ku ktorému má byť tento robot
     nasmerovaný
Pozri tiež:
smerNa(Poloha)
otocNa
public void otocNa(Poloha objekt)
 Alias pre otočNa.
otočNa
public void otočNa(Poloha objekt,
                   double najviacO)
Funguje podobne ako metóda otočNa,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 tento robot okamžite smerom k objektu, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla.
Parametre:
objekt – objekt ku ktorému má byť tento robot
     nasmerovaný
najviacO – maximálna hodnota uhla, o ktorú sa môže
     tento robot otočiť smerom k objektu
Pozri tiež:
smerNa(Poloha)
otocNa
public void otocNa(Poloha objekt,
                   double najviacO)
 Alias pre otočNa.
otočNa
public void otočNa(Shape tvar)
Nasmeruje tento robot smerom do stredu
 hraníc[1] zadaného tvaru. Ak je poloha robota
 zhodná so stredom hraníc tvaru, smer robota sa nezmení.
 Inak je vypočítaný uhol smeru medzi polohou aktuálneho
 robota a stredom hraníc tvaru a výsledok je použitý na
 nasmerovanie tohto robota.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), do stredu
     hraníc ktorého má byť robot nasmerovaný
Pozri tiež:
smerNa(Shape)
otocNa
public void otocNa(Shape tvar)
 Alias pre otočNa.
otočNa
public void otočNa(Shape tvar,
                   double najviacO)
Funguje podobne ako metóda otočNa,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 tento robot okamžite smerom do stredu hraníc[1]
 tvaru, iba ho pootočí stanoveným smerom o maximálnu zadanú
 hodnotu uhla.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), do stredu
     hraníc ktorého má byť robot nasmerovaný
najviacO – maximálna hodnota uhla, o ktorú sa môže
     tento robot otočiť smerom do stredu hraníc tvaru
Pozri tiež:
smerNa(Shape)
otocNa
public void otocNa(Shape tvar,
                   double najviacO)
 Alias pre otočNa.
otočNaMyš
public void otočNaMyš()
Nasmeruje robot smerom na aktuálne súradnice myši.
 Ak sú súradnice myši zhodné so súradnicami robota, smer
 robota sa nezmení. Inak je vypočítaný uhol smeru medzi
 aktuálnou polohou robota a polohou myši, ktorý je použitý
 na nasmerovanie robota.
Pozri tiež:
smerNaMyš()
otocNaMys
public void otocNaMys()
 Alias pre otočNaMyš.
otočNaMyš
public void otočNaMyš(double najviacO)
Funguje podobne ako metóda otočNaMyš,
 ibaže obmedzuje uhol pootočenia – neotočí tento robot
 okamžite smerom k súradniciam myši, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla.
Parametre:
najviacO – maximálna hodnota uhla, o ktorú sa môže
     tento robot otočiť smerom k aktuálnym súradniciam myši
Pozri tiež:
smerNaMyš()
otocNaMys
public void otocNaMys(double najviacO)
 Alias pre otočNaMyš.
otoč
public void otoč(double Δx,
                 double Δy)
Nasmeruje robot smerom zadaným s pomocou súradníc [Δx, Δy].
 Ak je zadané [0, 0], smer robota sa nezmení. Inak je
 vypočítaný uhol smeru medzi aktuálnou polohou robota
 a súradnicami zmenenými o hodnoty [Δx, Δy]. Efekt je
 v podstate rovnaký, ako keby robot stál v bode [0, 0]
 a použili by sme s rovnakými hodnotami metódu otočNa. (Inak povedané – táto
 metóda pracuje s tzv. relatívnymi súradnicami – súradnicami
 vztiahnutými k súčasnej polohe robota.)
Parametre:
Δx – odchýlka v smere osi x
Δy – odchýlka v smere osi y
Pozri tiež:
smer(double), 
uhol(double), 
vpravo, 
vľavo, 
otočNa(double, double), 
otoč(double), 
otoč(double, double), 
otoč(double, double, double), 
otočO(double)
otoc
public void otoc(double Δx,
                 double Δy)
 Alias pre otoč.
otoč
public void otoč(double Δx,
                 double Δy,
                 double najviacO)
Funguje podobne ako metóda otoč, ibaže obmedzuje uhol pootočenia stanoveným smerom –
 neotočí robot okamžite smerom na zadané súradnice, iba ním
 pootočí stanoveným smerom o maximálnu zadanú hodnotu uhla.
Parametre:
Δx – odchýlka v smere osi x
Δy – odchýlka v smere osi y
najviacO – maximálna hodnota uhla, o ktorú sa môže
     robot otočiť smerom k bodu [Δx, Δy]
Pozri tiež:
otoč(double, double)
otoc
public void otoc(double Δx,
                 double Δy,
                 double najviacO)
 Alias pre otoč.
otoč
public void otoč(Smer objekt)
Nasmeruje tento robot rovnakým smerom, akým je otočený
 zadaný objekt.
Parametre:
objekt – objekt, podľa ktorého chceme nasmerovať
     tento robot
Pozri tiež:
otoč(double, double)
otoc
public void otoc(Smer objekt)
 Alias pre otoč.
otoč
public void otoč(Smer objekt,
                 double najviacO)
Funguje podobne ako metóda otoč,
 ibaže obmedzuje uhol pootočenia stanoveným smerom – neotočí
 robot okamžite podľa smeru iného robota, iba ním pootočí
 o maximálnu zadanú hodnotu uhla.
Parametre:
objekt – objekt, podľa ktorého chceme nasmerovať
     tento robot
najviacO – maximálna hodnota uhla, o ktorú sa môže
     robot otočiť
otoc
public void otoc(Smer objekt,
                 double najviacO)
 Alias pre otoč.
choďNaPootočený
public void choďNaPootočený(double x,
                            double y,
                            double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol 0° znamená, že robot sa
 posunie presne na zadané súradnice. Uhol 180° znamená, že
 robot sa pohne presne opačným smerom než sa nachádzajú
 zadané súradnice.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
choďNaPootočený(Poloha, double), 
choďNaPootočený(double, double, Smer), 
skočNaPootočený(double, double, double), 
skočNaPootočený(double, double, Smer)
chodNaPootoceny
public void chodNaPootoceny(double x,
                            double y,
                            double uhol)
 Alias pre choďNaPootočený.
choďNaPootočený
public void choďNaPootočený(double x,
                            double y,
                            Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
choďNaPootočený(Poloha, Smer), 
choďNaPootočený(double, double, double), 
skočNaPootočený(double, double, double), 
skočNaPootočený(double, double, Smer)
chodNaPootoceny
public void chodNaPootoceny(double x,
                            double y,
                            Smer smer)
 Alias pre choďNaPootočený.
skočNaPootočený
public void skočNaPootočený(double x,
                            double y,
                            double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
skočNaPootočený(Poloha, double), 
choďNaPootočený(double, double, double), 
choďNaPootočený(double, double, Smer), 
skočNaPootočený(double, double, Smer)
skocNaPootoceny
public void skocNaPootoceny(double x,
                            double y,
                            double uhol)
 Alias pre skočNaPootočený.
skočNaPootočený
public void skočNaPootočený(double x,
                            double y,
                            Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
skočNaPootočený(Poloha, Smer), 
choďNaPootočený(double, double, double), 
choďNaPootočený(double, double, Smer), 
skočNaPootočený(double, double, double)
skocNaPootoceny
public void skocNaPootoceny(double x,
                            double y,
                            Smer smer)
 Alias pre skočNaPootočený.
choďNaPootočený
public void choďNaPootočený(Poloha poloha,
                            double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
poloha – objekt určujúci cieľový bod
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
choďNaPootočený(double, double, double), 
choďNaPootočený(Poloha, Smer), 
skočNaPootočený(Poloha, double), 
skočNaPootočený(Poloha, Smer)
chodNaPootoceny
public void chodNaPootoceny(Poloha poloha,
                            double uhol)
 Alias pre choďNaPootočený.
choďNaPootočený
public void choďNaPootočený(Poloha poloha,
                            Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
poloha – objekt určujúci cieľový bod
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
choďNaPootočený(double, double, Smer), 
choďNaPootočený(Poloha, double), 
skočNaPootočený(Poloha, double), 
skočNaPootočený(Poloha, Smer)
chodNaPootoceny
public void chodNaPootoceny(Poloha poloha,
                            Smer smer)
 Alias pre choďNaPootočený.
skočNaPootočený
public void skočNaPootočený(Poloha poloha,
                            double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
poloha – objekt určujúci cieľový bod
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
skočNaPootočený(double, double, double), 
choďNaPootočený(Poloha, double), 
choďNaPootočený(Poloha, Smer), 
skočNaPootočený(Poloha, Smer)
skocNaPootoceny
public void skocNaPootoceny(Poloha poloha,
                            double uhol)
 Alias pre skočNaPootočený.
skočNaPootočený
public void skočNaPootočený(Poloha poloha,
                            Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných súradníc o zadaný uhol so stredom otáčania
 v mieste robota. Príklady: Uhol
 0° znamená, že robot sa posunie presne na zadané súradnice.
 Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané
 súradnice.
Parametre:
poloha – objekt určujúci cieľový bod
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
skočNaPootočený(double, double, Smer), 
choďNaPootočený(Poloha, double), 
choďNaPootočený(Poloha, Smer), 
skočNaPootočený(Poloha, double)
skocNaPootoceny
public void skocNaPootoceny(Poloha poloha,
                            Smer smer)
 Alias pre skočNaPootočený.
choďPootočený
public void choďPootočený(double Δx,
                          double Δy,
                          double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol. Príklady: Uhol
 0° znamená, že robot sa posunie presne o zadané súradnice
 v smere osí x a y. Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané relatívne
 súradnice.
Parametre:
Δx – zmena súradníc v osi x
Δy – zmena súradníc v osi y
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
choďPootočený(double, double, Smer), 
skočPootočený(double, double, double), 
skočPootočený(double, double, Smer)
chodPootoceny
public void chodPootoceny(double Δx,
                          double Δy,
                          double uhol)
 Alias pre choďPootočený.
choďPootočený
public void choďPootočený(double Δx,
                          double Δy,
                          Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol. Príklady: Uhol
 0° znamená, že robot sa posunie presne o zadané súradnice
 v smere osí x a y. Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané relatívne
 súradnice.
Parametre:
Δx – zmena súradníc v osi x
Δy – zmena súradníc v osi y
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
choďPootočený(double, double, double), 
skočPootočený(double, double, double), 
skočPootočený(double, double, Smer)
chodPootoceny
public void chodPootoceny(double Δx,
                          double Δy,
                          Smer smer)
 Alias pre choďPootočený.
skočPootočený
public void skočPootočený(double Δx,
                          double Δy,
                          double uhol)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol. Príklady: Uhol
 0° znamená, že robot sa posunie presne o zadané súradnice
 v smere osí x a y. Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané relatívne
 súradnice.
Parametre:
Δx – zmena súradníc v osi x
Δy – zmena súradníc v osi y
uhol – uhol pootočenia výsledného pohybu voči cieľu
Pozri tiež:
choďPootočený(double, double, double), 
choďPootočený(double, double, Smer), 
skočPootočený(double, double, Smer)
skocPootoceny
public void skocPootoceny(double Δx,
                          double Δy,
                          double uhol)
 Alias pre skočPootočený.
skočPootočený
public void skočPootočený(double Δx,
                          double Δy,
                          Smer smer)
Tento príkaz pošle robot na miesto určené pootočením
 zadaných relatívnych súradníc o zadaný uhol. Príklady: Uhol
 0° znamená, že robot sa posunie presne o zadané súradnice
 v smere osí x a y. Uhol 180° znamená, že robot sa pohne
 presne opačným smerom než sa nachádzajú zadané relatívne
 súradnice.
Parametre:
Δx – zmena súradníc v osi x
Δy – zmena súradníc v osi y
smer – objekt určujúci uhol pootočenia výsledného
     pohybu voči cieľu
Pozri tiež:
choďPootočený(double, double, double), 
choďPootočený(double, double, Smer), 
skočPootočený(double, double, double)
skocPootoceny
public void skocPootoceny(double Δx,
                          double Δy,
                          Smer smer)
 Alias pre skočPootočený.
choďNa
public void choďNa(double novéX,
                   double novéY)
Prikáže robotu, aby prešiel na konkrétne súradnice na
 podlahe (strope). Keď je pero položené, tak kreslí čiaru.
 Robot nezmení smer, kam bol obrátený.
Parametre:
novéX – nová x-ová súradnica
novéY – nová y-ová súradnica
Pozri tiež:
dopredu, 
vzad, 
položPero, 
zdvihniPero, 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Poloha), 
skočNa(Shape), 
choď(double, double), 
skoč(double, double), 
choďPoOblúku(double, double), 
choďNaMyš()
chodNa
public void chodNa(double novéX,
                   double novéY)
 Alias pre choďNa.
choďNa
public void choďNa(Poloha objekt)
Prikáže tomuto robotu, aby prešiel na polohu
 zadaného objektu. Keď je pero položené, tak kreslí čiaru.
 Robot nezmení smer, kam bol obrátený.
Parametre:
objekt – objekt určujúci cieľovú polohu
Pozri tiež:
choďNa(double, double), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Poloha), 
skočNa(Shape), 
choď(double, double), 
skoč(double, double)
chodNa
public void chodNa(Poloha objekt)
 Alias pre choďNa.
choďNa
public void choďNa(Shape tvar)
Prikáže robotu, aby prešiel do stredu
 hraníc[1] zadaného tvaru. Keď je pero položené,
 tak kreslí čiaru. Robot nezmení smer, kam bol obrátený.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), do stredu
     hraníc ktorého prejde tento robot
Pozri tiež:
choďNa(double, double), 
choďNa(Poloha), 
skočNa(double, double), 
skočNa(Poloha), 
skočNa(Shape), 
choď(double, double), 
skoč(double, double)
chodNa
public void chodNa(Shape tvar)
 Alias pre choďNa.
choďNaMyš
public void choďNaMyš()
Prikáže robotu, aby na podlahe (strope) prešiel na
 aktuálne súradnice myši. Keď je pero položené, tak kreslí
 čiaru. Robot nezmení smer, kam bol obrátený.
Pozri tiež:
choďNa(double, double), 
skočNaMyš()
chodNaMys
public void chodNaMys()
 Alias pre choďNaMyš.
choď
public void choď(double Δx,
                 double Δy)
Prikáže robotu, aby sa posunul o zadané súradnice
 v horizontálnom a vertikálnom smere. Keď je pero položené,
 tak kreslí čiaru po aktívnom plátne (podlahe alebo strope).
 Robot nezmení aktuálny smer.
Parametre:
Δx – miera posunutia v smere osi x
Δy – miera posunutia v smere osi y
Pozri tiež:
choďNa(double, double), 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Poloha), 
skočNa(Shape), 
skoč(double, double)
chod
public void chod(double Δx,
                 double Δy)
 Alias pre choď.
choď
public void choď(Poloha poloha)
Prikáže robotu, aby sa posunul (prešiel) o súradnice,
 ktoré obsahuje zadaná inštancia polohy. To znamená, že
 súradnice polohy sú prevedené na relatívne súradnice. Keď
 je pero položené, tak kreslí čiaru po aktívnom plátne
 (podlahe alebo strope). Robot nezmení aktuálny smer.
Parametre:
poloha – poloha, ktorá bude prevedená na relatívne
     súradnice skoku
Pozri tiež:
choď(double, double)
chod
public void chod(Poloha poloha)
 Alias pre choď.
skočNa
public void skočNa(double novéX,
                   double novéY)
Prikáže robotu, aby preskočil na konkrétne súradnice na
 podlahe (strope). Robot nekreslí čiaru, ani nezmení smer,
 kam bol obrátený.
Parametre:
novéX – nová x-ová súradnica
novéY – nová y-ová súradnica
Pozri tiež:
dopredu, 
vzad, 
choďNa(double, double), 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(Poloha), 
skočNa(Shape), 
choď(double, double), 
skoč(double, double), 
skočPoOblúku(double, double), 
skočNaMyš()
skocNa
public void skocNa(double novéX,
                   double novéY)
 Alias pre skočNa.
skočNa
public void skočNa(Poloha objekt)
Prikáže tomuto robotu, aby preskočil na polohu zadaného
 objektu. Robot nekreslí čiaru, ani nezmení smer, kam bol
 obrátený.
Parametre:
objekt – objekt určujúci cieľovú polohu
Pozri tiež:
choďNa(double, double), 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Shape), 
choď(double, double), 
skoč(double, double)
skocNa
public void skocNa(Poloha objekt)
 Alias pre skočNa.
skočNa
public void skočNa(Shape tvar)
Prikáže robotu, aby preskočil do stredu
 hraníc[1] zadaného tvaru. Robot nekreslí čiaru,
 ani nezmení smer, kam bol obrátený.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), do stredu
     hraníc ktorého preskočí tento robot
Pozri tiež:
choďNa(double, double), 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Poloha), 
choď(double, double), 
skoč(double, double)
skocNa
public void skocNa(Shape tvar)
 Alias pre skočNa.
skočNaMyš
public void skočNaMyš()
Prikáže robotu, aby v rámci podlahy (stropu) preskočil na
 aktuálne súradnice myši. Robot nekreslí čiaru, ani nezmení
 smer, kam bol obrátený.
Pozri tiež:
skočNa(double, double), 
choďNaMyš()
skocNaMys
public void skocNaMys()
 Alias pre skočNaMyš.
skoč
public void skoč(double Δx,
                 double Δy)
Prikáže robotu, aby sa na podlahe (strope) preskočil
 o zadané súradnice v horizontálnom a vertikálnom smere.
 Robot nekreslí čiaru, ani nezmení svoj aktuálny smer.
Parametre:
Δx – miera posunutia v smere osi x
Δy – miera posunutia v smere osi y
Pozri tiež:
choďNa(double, double), 
choďNa(Poloha), 
choďNa(Shape), 
skočNa(double, double), 
skočNa(Poloha), 
skočNa(Shape), 
choď(double, double), 
skoč(Poloha)
skoc
public void skoc(double Δx,
                 double Δy)
 Alias pre skoč.
skoč
public void skoč(Poloha poloha)
Prikáže robotu, aby sa na podlahe (strope) preskočil
 o súradnice, ktoré obsahuje zadaná inštancia polohy. To
 znamená, že súradnice polohy sú prevedené na relatívne
 súradnice. Robot nekreslí čiaru, ani nezmení svoj aktuálny
 smer.
Parametre:
poloha – poloha, ktorá bude prevedená na relatívne
     súradnice skoku
Pozri tiež:
skoč(double, double)
skoc
public void skoc(Poloha poloha)
 Alias pre skoč.
posuň
public void posuň(double Δx,
                  double Δy)
Prikáže robotu, aby sa posunul o zadané súradnice
 smere osí x a y, pričom obe osi sú pootočené podľa
 rozdielu aktuálneho smeru robota a uhla 90°. To znamená,
 že ak je aktuálny uhol robota rovný 90° (čo je predvolená
 hodnota), tak sa príkaz správa rovnako ako príkaz
 choď(Δx, Δy) (čiže
 súradnicový systém nie je pootočený), inak robot skočí
 v rámci pootočeného súradnicového priestoru. Keď je pero
 robota položené, tak robot kreslí čiaru.
 
 Poznámka: Príklad používajúcu
 túto metódu je v opise metódy preskoč.
Parametre:
Δx – miera posunutia, o ktorú sa má robot posunúť
     „doprava“ – v smere kolmom vzhľadom na svoju orientáciu
     (záporné hodnoty posúvajú robot „doľava“)
Δy – miera posunutia, o ktorú sa má robot posunúť
     „dopredu“ – priamo v smere svojej orientácie (opäť,
     záporné súradnice posúvajú robot „dozadu“)
Pozri tiež:
preskoč(double, double), 
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer)
posun
public void posun(double Δx,
                  double Δy)
 Alias pre posuň.
preskoč
public void preskoč(double Δx,
                    double Δy)
Prikáže robotu, aby preskočil o zadané súradnice
 smere osí x a y, pričom obe osi sú pootočené podľa
 rozdielu aktuálneho smeru robota a uhla 90°. To znamená,
 že ak je aktuálny uhol robota rovný 90° (čo je predvolená
 hodnota), tak sa príkaz správa rovnako ako príkaz
 skoč(Δx, Δy) (čiže
 súradnicový systém nie je pootočený), inak robot skočí
 v rámci pootočeného súradnicového priestoru. Robot pri
 skákaní nekreslí čiaru.
 
 Príklad:
 
 Tento príklad ukazuje ako funguje metóda preskoč – ľavé tlačidlo posúva robot po plátne
 s použitím tejto metódy a pravé tlačidlo otáča robot
 smerom na myš. Po spustení programu funguje metóda preskoč rovnako ako metóda skoč, pretože predvolený smer robota je 90°.
 Rozdiel sa prejaví až po pootočení robota iným smerom.
 Príklad tiež používa metódu posuň na nakreslenie osí súradnicových sústav (stabilnej
 a pootočenej).
 
 
import knižnica.*;
public class TestPosunovRobota extends GRobot
{
    // Kreslenie osí súradnicových sústav…
    private void kresliOsi()
    {
        // Záloha polohy, smeru a farby robota:
        Poloha p = poloha();
        double u = uhol();
        Farba f = farba();
        skočNa(0, 0);
        // Stabilná súradnicová sústava:
        farba(čierna);
        skoč(-200, 0); choď(400, 0);
        skoč(-200, 200); choď(0, -400);
        skoč(0, 200);
        // Pootočená súradnicová sústava:
        farba(tyrkysová);
        preskoč(-200, 0); posuň(400, 0);
        preskoč(-200, 200); posuň(0, -400);
        // Obnovenie parametrov zo zálohy:
        poloha(p);
        uhol(u);
        farba(f);
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        // Reakcia stlačenia tlačidla myši funguje
        // rovnako ako ťahanie myšou:
        ťahanieMyšou();
    }
    @Override public void ťahanieMyšou()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo presunie robot od stredu
            // o súradnice myši s použitím metódy preskoč
            // (čiže v súradnicovej sústave pootočenej
            // o zmenu smeru robota):
            skočNa(0, 0);
            preskoč(ÚdajeUdalostí.súradnicaMyšiX(),
                ÚdajeUdalostí.súradnicaMyšiY());
        }
        else
        {
            // Ostatné tlačidlá otočia robot na myš:
            Svet.vymaž();
            otočNaMyš();
            kresliOsi();
        }
    }
    public static void main(String... args)
    {
        // Trieda TestPosunovRobota nemá definovaný žiadny konštruktor,
        // preto inicializáciu (prvé volanie metódy kresliOsi) vykonávame
        // tu:
        new TestPosunovRobota().kresliOsi();
    }
}
 
 Výsledok:
 
 
 Príklad v činnosti: Robot bol pootočený
 (použitím pravého tlačidla) a potom posunutý v rámci
 pootočenej súradnicovej sústavy (tyrkysová farba).
Parametre:
Δx – miera posunutia, o ktorú má robot preskočiť
     „doprava“ – v smere kolmom vzhľadom na jeho orientáciu
     (záporné hodnoty kážu robotu skákať „doľava“)
Δy – miera posunutia, o ktorú má robot preskočiť
     „dopredu“ – priamo v smere svojej orientácie (opäť,
     záporné súradnice mu kážu skákať „dozadu“)
Pozri tiež:
posuň(double, double), 
posuňVSmere(double, double), 
preskočVSmere(double, double), 
posuňVSmere(Smer, double), 
preskočVSmere(Smer, double), 
posuňVSmere(double), 
preskočVSmere(double), 
posuňVSmere(Smer), 
preskočVSmere(Smer)
preskoc
public void preskoc(double Δx,
                    double Δy)
 Alias pre preskoč.
choďPoOblúku
public void choďPoOblúku(double uhol,
                         double polomer)
Pohne robotom po oblúku so zadaným polomerom o zadaný
 uhol a v prípade, že je položené pero, tak oblúk aj
 nakreslí. Robot sa predvolene otáča doľava (t. j. pri
 zadaní kladného uhla otáčania a kladného polomeru sa robot
 pri pohybe dopredu otáča doľava, čiže kreslí ľavotočivý
 oblúk). Na obrátenie smeru otáčania (kreslenie pravotočivého
 oblúka) zadajte záporný polomer otáčania. Pri zadaní
 záporného uhla bude robot cúvať. Keď je polomer rovný nule,
 robot zostane stáť aj v prípade, že je uhol nenulový,
 pretože nie je možné určiť vzdialenosť akú by mal prejsť.
 
 Upozornenie: Vo verzii 2.0
 sa zmenil predvolený smer otáčania robota!
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     zadaného polomeru
polomer – polomer otáčania
Pozri tiež:
dopredu, 
vzad, 
vpravo, 
vľavo, 
choďNa, 
skočNa, 
choďPoOblúku(double), 
choďPoOblúku(), 
skočPoOblúku(double, double), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double), 
choďNaPoOblúku(Poloha), 
skočNaPoOblúku(Poloha), 
polohaPera
chodPoObluku
public void chodPoObluku(double uhol,
                         double polomer)
 Alias pre choďPoOblúku.
skočPoOblúku
public void skočPoOblúku(double uhol,
                         double polomer)
Pohne robotom po oblúku so zadaným polomerom o zadaný
 uhol bez jeho nakreslenia. Robot sa predvolene otáča
 doľava (t. j. pri zadaní kladného uhla otáčania a kladného
 polomeru sa robot pri pohybe dopredu otáča doľava, čiže sa
 pohybuje po ľavotočivom oblúku). Na obrátenie smeru
 otáčania (pohyb po pravotočivom oblúku) zadajte záporný
 polomer otáčania. Pri zadaní záporného uhla bude robot
 cúvať. Keď je polomer rovný nule, robot zostane stáť aj
 v prípade, že je uhol nenulový, pretože nie je možné
 určiť vzdialenosť akú by mal prejsť.
 
 Upozornenie: Vo verzii 2.0
 sa zmenil predvolený smer otáčania robota!
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     zadaného polomeru
polomer – polomer otáčania
Pozri tiež:
dopredu, 
vzad, 
vpravo, 
vľavo, 
choďNa, 
skočNa, 
skočPoOblúku(double), 
skočPoOblúku(), 
choďPoOblúku(double, double), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double), 
choďNaPoOblúku(Poloha), 
skočNaPoOblúku(Poloha)
skocPoObluku
public void skocPoObluku(double uhol,
                         double polomer)
 Alias pre skočPoOblúku.
choďPoOblúku
public void choďPoOblúku(double uhol)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol a v prípade, že je položené pero,
 tak oblúk aj nakreslí. Ďalej platia rovnaké informácie
 ako pri metóde choďPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     polomeru určeného veľkosťou robota
Pozri tiež:
choďPoOblúku(double, double), 
veľkosť()
chodPoObluku
public void chodPoObluku(double uhol)
 Alias pre choďPoOblúku.
skočPoOblúku
public void skočPoOblúku(double uhol)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol bez jeho nakreslenia. Ďalej platia
 rovnaké informácie ako pri metóde
 skočPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     polomeru určeného veľkosťou robota
Pozri tiež:
skočNaPoOblúku(double, double), 
veľkosť()
skocPoObluku
public void skocPoObluku(double uhol)
 Alias pre skočPoOblúku.
choďPoOblúku
public void choďPoOblúku()
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania a v prípade, že je položené
 pero, tak oblúk aj nakreslí. Pozri metódy veľkosť()
 a uholOtáčania(). Ďalej platia rovnaké informácie
 ako pri metóde choďPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
choďPoOblúku(double, double), 
veľkosť(), 
uholOtáčania()
chodPoObluku
public void chodPoObluku()
 Alias pre choďPoOblúku.
skočPoOblúku
public void skočPoOblúku()
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania bez nakreslenia oblúka.
 Pozri metódy veľkosť() a uholOtáčania().
 Ďalej platia rovnaké informácie ako pri metóde
 skočPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Pozri tiež:
skočNaPoOblúku(double, double), 
veľkosť(), 
uholOtáčania()
skocPoObluku
public void skocPoObluku()
 Alias pre skočPoOblúku.
choďPoOblúku
public void choďPoOblúku(double uhol,
                         boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol a v prípade, že je položené pero,
 tak oblúk aj nakreslí. Ak je hodnota parametra
 vpravo rovná true, tak sa robot bude
 otáčať doprava. Inak platia rovnaké informácie
 ako pri metóde choďPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     polomeru určeného veľkosťou robota
vpravo – ak je táto hodnota rovná true,
     tak sa robot bude otáčať doprava
Pozri tiež:
choďPoOblúku(double, double), 
veľkosť()
chodPoObluku
public void chodPoObluku(double uhol,
                         boolean vpravo)
 Alias pre choďPoOblúku.
skočPoOblúku
public void skočPoOblúku(double uhol,
                         boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o zadaný uhol bez jeho nakreslenia. Ak je hodnota
 parametra vpravo rovná true, tak sa
 robot bude otáčať doprava. Inak platia rovnaké informácie
 ako pri metóde skočPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
uhol – uhol, o ktorý sa má robot otočiť okolo
     polomeru určeného veľkosťou robota
vpravo – ak je táto hodnota rovná true,
     tak sa robot bude otáčať doprava
Pozri tiež:
skočNaPoOblúku(double, double), 
veľkosť()
skocPoObluku
public void skocPoObluku(double uhol,
                         boolean vpravo)
 Alias pre skočPoOblúku.
choďPoOblúku
public void choďPoOblúku(boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania a v prípade, že je položené
 pero, tak oblúk aj nakreslí. Pozri metódy veľkosť()
 a uholOtáčania(). Ak je hodnota parametra
 vpravo rovná true, tak sa robot bude
 otáčať doprava. Inak platia rovnaké informácie
 ako pri metóde choďPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
vpravo – ak je táto hodnota rovná true,
     tak sa robot bude otáčať doprava
Pozri tiež:
choďPoOblúku(double, double), 
veľkosť(), 
uholOtáčania()
chodPoObluku
public void chodPoObluku(boolean vpravo)
 Alias pre choďPoOblúku.
skočPoOblúku
public void skočPoOblúku(boolean vpravo)
Pohne robotom po oblúku s polomerom rovným veľkosti
 robota o aktuálny uhol otáčania bez nakreslenia oblúka.
 Pozri metódy veľkosť() a uholOtáčania().
 Ak je hodnota parametra vpravo rovná
 true, tak sa robot bude otáčať doprava. Inak
 platia rovnaké informácie ako pri metóde
 skočPoOblúku(uhol, polomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
vpravo – ak je táto hodnota rovná true,
     tak sa robot bude otáčať doprava
Pozri tiež:
skočNaPoOblúku(double, double), 
veľkosť(), 
uholOtáčania()
skocPoObluku
public void skocPoObluku(boolean vpravo)
 Alias pre skočPoOblúku.
choďNaPoOblúku
public void choďNaPoOblúku(double x,
                           double y)
Pohne robotom po oblúku do cieľového bodu určeného
 súradnicami [x, y] s ohľadom na aktuálne otočenie robota.
 Ak robot smeruje približne na miesto súradníc (s odchýlkou
 ±0,0001°), tak sa pohne do cieľového miesta po úsečke
 (pričom bude pootočený o nepatrnú odchýlku). Ak má robot
 položené pero, tak pri pohybe kreslí čiaru. Robot nesmie
 smerovať presne opačným smerom od cieľového miesta, inak
 vznikne výnimka.
 
 Poznámka: Situácia so vznikom
 výnimky by sa s cieľom zvýšenia komfortu práce
 s programovacím rámcom dala vyriešiť generovaním dvoch
 úsečiek – jednej smerujúcej z aktuálnej pozície do
 „nekonečna“ v smere robota a druhej prichádzajúca z opačnej
 strany (z „protiľahlého nekonečna“) do cieľového bodu.
 Problém je v definovaní nekonečna. Aké úsečky by boli
 dostatočne dlhé na to, aby smerovali zdanlivo do nekonečna
 a aby pritom nevznikali prípadné nežiadúce skreslenia,
 ktoré sa v niektorých prípadoch prejavujú pri práci
 s údajovým typom double? Robot navyše pri kreslení
 generuje tvary Javy, ktoré sa môžu stať súčasťou zachytenej
 cesty. Tá môže byť exportovaná mimo programovací rámec.
 Vždy by sa našiel spôsob, ktorý by tento „malý trik“
 odhalil, preto táto metóda radšej generuje výnimku
 a vyriešenie situácie ponecháva na programátora
 používajúceho tento programovací rámec.
 
 Príklad:
 
 
for (int i = 0; i &lt; 360; i += 2.5)
{
    uhol(i);
    skočNa(-100, 0);
    if (i != 180)
        choďNaPoOblúku(100, 0);
}
 
 Výsledok:
 
 
 Vzor pripomínajúci siločiary
 nakreslený s pomocou metódy
 choďNaPoOblúku.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
Výnimky:
GRobotException – ak je robot obrátený opačným smerom
     než sa nachádza cieľový bod (o 180° smerom od neho)
Pozri tiež:
choďNa, 
choďPoOblúku(double, double), 
skočPoOblúku(double, double), 
skočNaPoOblúku(double, double), 
polohaPera
chodNaPoObluku
public void chodNaPoObluku(double x,
                           double y)
 Alias pre choďNaPoOblúku.
choďNaPoOblúku
public void choďNaPoOblúku(Poloha poloha)
Funguje rovnako ako choďNaPoOblúku(x, y), ale namiesto samostatných súradníc
 prijíma implementáciu rozhrania Poloha
 (napríklad Bod).
 
 Varovanie! Počas pridávania metódy
 vajce bolo zistené
 nevysvetliteľné správanie: S použitím tenjo metódy (choďNaPoOblúku(poloha)) nefungoval mechanizmus
 vytvárania cesty na rozdiel od
 použitia metódy choďNaPoOblúku(double, double), pričom táto metóda
 volá tú druhú, takže vo výsledku by nemal byť žiadny rozdiel!
 Ani hlboké testovanie s využitím trasovania cez zásobník
 volaní neodhalil žiadne podozrivé „odbočky“, ktoré by toto
 nepochopiteľné správanie pomohli vysvetliť. To isté volanie
 zvonka tejto metódy funguje, zvnútra spôsobuje problémy.
 Záhada. V tom čase bola aktuálna verzia JVM 1.8.0_331. Možno
 budúce verzie túto záhadu odstránia.
Parametre:
poloha – objekt určujúci súradnice cieľového bodu
Výnimky:
GRobotException – ak je robot obrátený opačným smerom
     než sa nachádza cieľový bod (o 180° smerom od neho)
Pozri tiež:
choďPoOblúku(double, double), 
skočPoOblúku(double, double), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double), 
skočNaPoOblúku(Poloha)
chodNaPoObluku
public void chodNaPoObluku(Poloha poloha)
 Alias pre choďNaPoOblúku.
skočNaPoOblúku
public void skočNaPoOblúku(double x,
                           double y)
Pohne robotom po oblúku do cieľového bodu určeného
 súradnicami [x, y] s ohľadom na aktuálne otočenie robota
 bez nakreslenia oblúka. Ak robot smeruje približne na
 miesto súradníc (s odchýlkou ±0,0001°), tak sa pohne do
 cieľového miesta po úsečke (pričom bude pootočený
 o nepatrnú odchýlku). Robot nesmie smerovať presne opačným
 smerom od cieľového miesta, inak vznikne výnimka.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
Výnimky:
GRobotException – ak je robot obrátený opačným smerom
     než sa nachádza cieľový bod (o 180° smerom od neho)
Pozri tiež:
skočNa, 
choďPoOblúku(double, double), 
skočPoOblúku(double, double), 
choďNaPoOblúku(double, double)
skocNaPoObluku
public void skocNaPoObluku(double x,
                           double y)
 Alias pre skočNaPoOblúku.
skočNaPoOblúku
public void skočNaPoOblúku(Poloha poloha)
Funguje rovnako ako skočNaPoOblúku(x, y), ale namiesto samostatných súradníc
 prijíma implementáciu rozhrania Poloha
 (napríklad Bod).
Parametre:
poloha – objekt určujúci súradnice cieľového bodu
Výnimky:
GRobotException – ak je robot obrátený opačným smerom
     než sa nachádza cieľový bod (o 180° smerom od neho)
Pozri tiež:
choďPoOblúku(double, double), 
skočPoOblúku(double, double), 
choďNaPoOblúku(double, double), 
skočNaPoOblúku(double, double), 
choďNaPoOblúku(Poloha)
skocNaPoObluku
public void skocNaPoObluku(Poloha poloha)
 Alias pre skočNaPoOblúku.
aktívny
public boolean aktívny()
Overí, či je tento robot aktívny. Aktiváciu je možné
 dosiahnuť dvomi základnými spôsobmi:
 
 
 klasickou aktiváciou, ktorá je
 preferovaná pri určovaní alebo zmene hodnôt rýchlosti, zrýchlenia a pod.,
 spustením, ktoré je preferované
 pri stanovovaní a úprave cieľa.
 
Návratová hodnota:
true ak je robot aktívny, inak false
aktivny
public boolean aktivny()
 Alias pre aktívny.
neaktívny
public boolean neaktívny()
Overí, či je tento robot neaktívny. Vracia presne opačnú
 informáciu ako metóda aktívny.
Návratová hodnota:
true ak nie je robot aktívny, inak
     false
neaktivny
public boolean neaktivny()
 Alias pre neaktívny.
pasívny
public boolean pasívny()
 Alias pre neaktívny.
pasivny
public boolean pasivny()
 Alias pre neaktívny.
aktivuj
public void aktivuj()
Aktivuje robot a spustí časovač (ak je nečinný). Metóda upozorní robot
 na aktiváciu volaním metódy aktivácia.
 
 Táto metóda je automaticky spustená metódou pracuj, po uplynutí času pasivity (pozri
 napríklad deaktivuj(trvaniePasivity)), ak bol tento čas určený.
 
 Opakom aktivácie je deaktivácia
 a alternatívou aktivácie je spustenie, ktoré je preferované v iných situáciách –
 pozri informácie pri metóde aktívny.
Pozri tiež:
deaktivuj(), 
spusti()
aktivuj
public void aktivuj(int trvanieAktivity)
Metóda má rovnaký účel ako metóda aktivuj(), ibaže dovoľuje programátorovi určiť trvanie
 aktivity. Trvanie je určené celým číslom, ktoré vyjadruje
 počet tikov časovača, po ktorých je robot
 automaticky deaktivovaný[1]. Po uplynutí času trvania
 aktivity je robot deaktivovaný spustením metódy
 deaktivuj.
 
 [1] – ak chceme získať údaj v sekundách, tak
 musíme trvanie aktivity násobiť
 intervalom časovača;
 avšak spúšťanie tikov
 časovača nikdy nie
 je úplne presné, preto ani vypočítaný údaj v sekundách
 nikdy nebude úplne presný – skutočný čas aktivity robota
 sa môže líšiť podľa momentálneho zaťaženia
 systému…
Parametre:
trvanieAktivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická deaktivácia;
     nula znamená aktiváciu na neurčitý čas (dokedy nie je
     robot deaktivovaný iným spôsobom)
aktivuj
public void aktivuj(boolean ajČasovač)
Metóda má rovnaký účel ako metóda aktivuj() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak nie je v činnosti).
Parametre:
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
aktivuj
public void aktivuj(int trvanieAktivity,
                    boolean ajČasovač)
Metóda spája funkcionalitu metód aktivuj(trvanieAktivity) a aktivuj(ajČasovač). Platia rovnaké pravidlá ako pri
 spomenutých metódach…
Parametre:
trvanieAktivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická deaktivácia;
     nula znamená aktiváciu na neurčitý čas (dokedy nie je
     robot deaktivovaný iným spôsobom)
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
deaktivuj
public void deaktivuj()
Deaktivuje robot (napríklad po skončení trvania
 aktivity). Účelom tejto metódy je deaktivovať robot
 a upozorniť na to inštanciu robota volaním prislúchajúcej
 metódy – pri spustení tejto metódy je automaticky zavolaná
 metóda deaktivácia. Metóda deaktivuj je automaticky spustená aj metódou pracuj po skončení trvania aktivity tohto
 robota (pozri napríklad aktivuj(trvanieAktivity)). Táto metóda je opakom skupiny
 metód aktivuj a alternatívou metódy
 zastav, ktorá je preferovaná v iných
 prípadoch…
Pozri tiež:
aktivuj(), 
deaktivuj(), 
deaktivuj(int), 
deaktivuj(boolean), 
deaktivuj(int, boolean), 
zastav()
deaktivuj
public void deaktivuj(int trvaniePasivity)
Metóda má rovnaký účel ako metóda deaktivuj(), ibaže dovoľuje programátorovi určiť trvanie
 pasivity. Trvanie je určené celým číslom, ktoré vyjadruje
 počet tikov časovača, po ktorých je robot
 automaticky aktivovaný[1]. Po uplynutí času pasivity, je
 robot automaticky aktivovaný spustením metódy aktivuj.
 
 [1] – ak chceme získať údaj v sekundách, tak
 musíme trvanie pasivity násobiť intervalom časovača; avšak
 spúšťanie tikov
 časovača nikdy nie
 je úplne presné, preto ani vypočítaný údaj v sekundách
 nikdy nebude úplne presný – skutočný čas pasivity robota
 sa môže líšiť podľa momentálneho zaťaženia
 systému…
Parametre:
trvaniePasivity – celé číslo určujúce počet
     tikov časovača, po ktorých
     nastane automatická aktivácia;
     nula znamená deaktiváciu na neurčitý čas (navždy alebo
     kým nenastane aktivácia iným spôsobom)
deaktivuj
public void deaktivuj(boolean ajČasovač)
Metóda má rovnaký účel ako metóda deaktivuj() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak nie je v činnosti).
Parametre:
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
deaktivuj
public void deaktivuj(int trvaniePasivity,
                      boolean ajČasovač)
Metóda spája funkcionalitu metód deaktivuj(trvaniePasivity) a deaktivuj(ajČasovač). Platia rovnaké pravidlá ako pri
 spomenutých metódach…
Parametre:
trvaniePasivity – celé číslo určujúce počet
     tikov časovača, po ktorých
     nastane automatická aktivácia;
     nula znamená deaktiváciu na neurčitý čas (navždy alebo
     kým nenastane aktivácia iným spôsobom)
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
Pozri tiež:
aktivuj(), 
deaktivuj(), 
deaktivuj(int), 
deaktivuj(boolean), 
zastav()
spusti
public void spusti()
Aktivuje robot alternatívnym spôsobom a spustí časovač (ak je nečinný).
 Metóda upozorní robot na spustenie (alternatívnu
 aktiváciu) volaním metódy spustenie.
 Opakom tohto spôsobu aktivácie je (okamžité) zastavenie a alternatívou je klasická
 aktivácia, ktorá je preferovaná
 v iných situáciách – pozri informácie pri metóde aktívny.
Pozri tiež:
zastav(), 
aktivuj()
spusti
public void spusti(int trvanieAktivity)
Metóda má rovnaký účel ako metóda spusti(), ibaže dovoľuje programátorovi určiť trvanie
 aktivity. Trvanie je určené celým číslom, ktoré vyjadruje
 počet tikov časovača, po ktorých je robot
 automaticky deaktivovaný[1]. Bez ohľadu na to, že ide
 o alternatívny spôsob aktivácie, je po uplynutí trvania
 aktivity spustená metóda deaktivuj
 (čiže nie zastav[2]).
 
 [1] – ak chceme získať údaj v sekundách, musíme
 trvanie aktivity násobiť intervalom časovača; avšak spúšťanie tikov časovača nikdy nie je úplne
 presné, preto ani vypočítaný údaj v sekundách nikdy nebude
 úplne presný – skutočný čas aktivity robota sa môže líšiť
 podľa momentálneho zaťaženia systému…
 
 [2] – vo všeobecnosti to, či je robot automaticky
 deaktivovaný metódou deaktivuj alebo
 zastav závisí od situácie; zastavenie je
 viazané k dosiahnutiu cieľa, deaktivácia ku všetkým ostatným
 okolnostiam skončenia aktivity (vrátane tejto)…
Parametre:
trvanieAktivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická deaktivácia;
     nula znamená deaktiváciu na neurčitý čas (navždy alebo
     kým nenastane aktivácia iným spôsobom)
spusti
public void spusti(boolean ajČasovač)
Metóda má rovnaký účel ako metóda spusti() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak už nie je v činnosti).
Parametre:
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
spusti
public void spusti(int trvanieAktivity,
                   boolean ajČasovač)
Metóda spája funkcionalitu metód spusti(trvanieAktivity) a spusti(ajČasovač). Platia rovnaké pravidlá ako pri
 spomenutých metódach…
Parametre:
trvanieAktivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická deaktivácia;
     nula znamená deaktiváciu na neurčitý čas (navždy alebo
     kým nenastane aktivácia iným spôsobom)
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
zastav
public void zastav()
Deaktivuje robot (napríklad po dosiahnutí cieľa).
 Účelom tejto metódy je deaktivovať robot, zastaviť
 (zrušiť) smerovanie do cieľa (pozri cieľ alebo niektorý jej „klon“) a upozorniť na
 to inštanciu robota volaním prislúchajúcej metódy – pri
 spustení tejto metódy je automaticky zavolaná metóda
 zastavenie. Metóda zastav
 je automaticky spustená aj metódou pracuj
 po dosiahnutí určeného cieľa týmto robotom (pozri napríklad
 vyššie spomenutú metódu cieľ(x, y)). Táto metóda je opakom skupiny metód spusti a alternatívou metódy deaktivuj, ktorá je preferovaná v iných situáciách…
 
 Pozor! Pozor na podobnosť názvu
 so skupinou metód zabrzdi, ktoré sú
 protikladom supiny metód rozbehniSa
 a ich cieľom je zahájiť brzdenie pohybujúceho sa robota…
Pozri tiež:
spusti(), 
zastav(int), 
zastav(boolean), 
zastav(int, boolean), 
deaktivuj(), 
zastavPosun()
zastav
public void zastav(int trvaniePasivity)
Metóda má rovnaký účel ako metóda zastav(), ibaže dovoľuje programátorovi naplánovať
 automatickú aktiváciu. Čas do automatickej aktivácie je
 určený celým číslom, ktoré vyjadruje počet tikov časovača[1]. Bez
 ohľadu na to, že ide o alternatívny spôsob deaktivácie,
 je robot po uplynutí naplánovaného času aktivovaný metódou
 aktivuj (čiže nie spusti).
 
 [1] – ak chceme získať údaj v sekundách, musíme
 trvanie aktivity násobiť intervalom časovača; avšak spúšťanie tikov časovača nikdy nie je úplne
 presné, preto ani vypočítaný údaj v sekundách nikdy nebude
 úplne presný – skutočný čas čakania robota v pasívnom
 režime na automatickú aktiváciu sa môže líšiť podľa
 momentálneho zaťaženia systému…
Parametre:
trvaniePasivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická aktivácia;
     nulová alebo záporná hodnota znamená, že automatická
     aktivácia nie je je naplánovaná
Pozri tiež:
zastav(), 
zastav(boolean), 
zastav(int, boolean), 
zastavPosun()
zastav
public void zastav(boolean ajČasovač)
Metóda má rovnaký účel ako metóda zastav() s tým, že dovoľuje programátorovi určiť, či má
 byť automaticky spustený
 časovač (ak už nie je v činnosti).
Parametre:
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
Pozri tiež:
zastav(), 
zastav(int), 
zastav(int, boolean), 
zastavPosun()
zastav
public void zastav(int trvaniePasivity,
                   boolean ajČasovač)
Metóda spája funkcionalitu metód zastav(trvaniePasivity) a zastav(ajČasovač). Platia rovnaké pravidlá ako pri
 spomenutých metódach…
Parametre:
trvaniePasivity – celé číslo určujúce počet
     tikov časovača, po ktorých nastane
     automatická aktivácia;
     nulová alebo záporná hodnota znamená, že automatická
     aktivácia nie je je naplánovaná
ajČasovač – ak je true, je (v prípade, že
     je nečinný) automaticky spustený časovač
Pozri tiež:
zastav(), 
zastav(int), 
zastav(boolean), 
zastavPosun()
zastavPosun
public void zastavPosun()
Volanie tejto metódy (či už automatické alebo ručné)
 spôsobí zastavenie pohybu v kolmom smere voči aktuálnej
 orientácii robota – zastavenie posunu.
 
 Táto metóda je automaticky spustená pri splnení
 nasledujúcich podmienok:
 
 
 zrýchlenie
 posunu má nenulovú hodnotu,
 je nastavený príznak zastavenia po spomalení
 posunu
 a rýchlosť posun
 sa dotkla nulovej hranice.
 
 
 Poznámka: Ak je zrýchlenie posunu nenulové,
 tak nemá volanie tejto metódy zmysel. Vtedy sa dá posun
 zastaviť jedine nastavením nulovej rýchlosti posunu.
 
 Úspešné vykonanie zastavenia posunu je signalizované
 udalosťou zastaveniePosunu.
Pozri tiež:
zastav(), 
zastav(int), 
zastav(boolean), 
zastav(int, boolean), 
zastaveniePosunu(), 
rýchlosťPosunu(), 
zrýchleniePosunu(), 
zastavPoSpomaleníPosunu()
trvanieAktivity
public int trvanieAktivity()
Zisťuje aktuálnu hodnotu trvania aktivity, čo je vlastne
 čas meraný v tikoch
 aplikácie. Hodnota 0 (alebo záporná hodnota)
 znamená explicitne neobmedzené trvanie aktivity. (To
 znamená, že nie je otvorene stanovený čas, po ktorom sa
 má robot deaktivovať a deaktivácia nastane buď po
 otvorenej výzve, alebo po vzniknutí inej vhodnej
 udalosti.)
Návratová hodnota:
explicitne (otvorene) stanovený čas
     v tikoch zostávajúci
     do ukončenia stavu aktivity alebo nekladná hodnota
     vypovedajúca o tom, že trvanie aktivity nie je
     explicitne časovo obmedzené
trvanieAktivity
public void trvanieAktivity(int trvanieAktivity)
Umožňuje zmeniť aktuálne trvanie aktivity. Meniť túto
 hodnotu má zmysel len počas trvania stavu aktivity robota
 (napríklad v reakciách aktivácia
 a aktivita alebo tesne po aktivovaní
 robota, napríklad metódou rýchlosť),
 pretože všetky metódy slúžiace na aktiváciu alebo spustenie robota
 túto hodnotu prepisujú (väčšinou na nulu, čo znamená
 neobmedzené trvanie).
Parametre:
trvanieAktivity – nový čas trvania stavu aktivity;
     nekladné hodnoty (nula a záporné hodnoty) určujú,
     že aktivita nemá byť otvorene časovo obmedzená
trvaniePasivity
public int trvaniePasivity()
Zisťuje aktuálnu hodnotu trvania pasivity. Tento čas
 je meraný v tikoch
 časovača. Hodnota 0 (alebo záporná hodnota)
 znamená neobmedzené trvanie pasivity. (To znamená, že nie
 je stanovený čas, po ktorom sa má robot automaticky
 aktivovať a aktivácia nastane napríklad po vzniknutí
 vhodnej udalosti alebo po spustení príkazu aktivácie.)
Návratová hodnota:
čas v tikoch,
     po ktorom má byť robot automaticky aktivovaný;
     nulová alebo záporná hodnota znamená, že automatická
     aktivácia nie je je naplánovaná
trvaniePasivity
public void trvaniePasivity(int trvaniePasivity)
Umožňuje zmeniť trvanie pasivity – naplánovať
 automatickú aktiváciu po uplynutí zadaného časového
 intervalu. Meniť túto hodnotu má zmysel len počas trvania
 stavu pasivity robota (napríklad v reakciách deaktivácia a pasivita
 alebo tesne po deaktivácii robota, napríklad metódou zastav), pretože všetky metódy slúžiace na
 deaktiváciu alebo zastavenie robota túto hodnotu prepisujú
 (väčšinou na nulu, čo znamená nenaplánovanie automatickej
 aktivácie).
Parametre:
trvaniePasivity – nový čas trvania stavu pasivity;
     nulová alebo záporná hodnota znamená, že automatická
     aktivácia nie je je naplánovaná
rýchlosť
public double rýchlosť()
 Zistí aktuálnu hodnotu
 rýchlosti tohto robota.
 Nenulová rýchlosť ešte neznamená, že robot sa pohybuje.
 Pohybujú sa len aktívne roboty.
Návratová hodnota:
aktuálna rýchlosť tohto robota
rychlost
public double rychlost()
 Alias pre rýchlosť.
rýchlosť
public void rýchlosť(double rýchlosť)
 Nastaví robotu novú hodnotu
 rýchlosti a ak je zadaná nenulová hodnota, automaticky ho
 aktivuje (čo môže viesť ku vzniku
 ďalších udalostí opísaných pri metóde aktivuj()), aby sa mohol pohybovať. Ak je zadaná
 nulová hodnota rýchlosti, robot nie je
 automaticky deaktivovaný.
Parametre:
rýchlosť – nová hodnota rýchlosti
rychlost
public void rychlost(double rýchlosť)
 Alias pre rýchlosť.
rýchlosť
public void rýchlosť(double rýchlosť,
                     boolean aktivuj)
Nastaví robotu novú hodnotu rýchlosti a dovolí
 programátorovi rozhodnúť, či má byť robot automaticky
 aktivovaný. Neaktívne roboty sa
 nepohybujú aj keď majú nastavenú nenulovú rýchlosť.
Parametre:
rýchlosť – nová hodnota rýchlosti
aktivuj – ak je true a zadaná rýchlosť je
     nenulová, automaticky aktivuje robot
rychlost
public void rychlost(double rýchlosť,
                     boolean aktivuj)
 Alias pre rýchlosť.
maximálnaRýchlosť
public double maximálnaRýchlosť()
 Zistí hodnotu maximálnej rýchlosti tohto
 robota. Nula znamená „bez obmedzenia.“
Návratová hodnota:
maximálna rýchlosť tohto robota
maximalnaRychlost
public double maximalnaRychlost()
 Alias pre maximálnaRýchlosť.
najväčšiaRýchlosť
public double najväčšiaRýchlosť()
 Alias pre maximálnaRýchlosť.
najvacsiaRychlost
public double najvacsiaRychlost()
 Alias pre maximálnaRýchlosť.
maximálnaRýchlosť
public void maximálnaRýchlosť(double maximálnaRýchlosť)
 Nastaví novú hodnotu maximálnej
 rýchlosti. Touto hodnotou bude limitovaná rýchlosť robota v kladom i zápornom
 smere. Nula znamená „bez obmedzenia.“
Parametre:
maximálnaRýchlosť – nová hodnota maximálnej
     rýchlosti
maximalnaRychlost
public void maximalnaRychlost(double maximálnaRýchlosť)
 Alias pre maximálnaRýchlosť.
najväčšiaRýchlosť
public void najväčšiaRýchlosť(double najväčšiaRýchlosť)
 Alias pre maximálnaRýchlosť.
najvacsiaRychlost
public void najvacsiaRychlost(double najväčšiaRýchlosť)
 Alias pre maximálnaRýchlosť.
rýchlosťPosunu
public double rýchlosťPosunu()
 Zistí aktuálnu hodnotu
 rýchlosti posunu
 tohto robota, čím je chápaná rýchlosť v smere kolmom
 na aktuálny smer robota. Nenulová
 rýchlosť posunu nemusí automaticky znamenať, že robot sa
 pohybuje. Pohybujú sa len aktívne
 roboty. Kladná hodnota rýchlosti posunu znamená posúvanie
 sa „doprava“ – pri predvolenej orientácii robota „hore“
 (na sever – v uhle 90°) to znamená posun v smere uhla 0°
 (na východ). Záporná hodnota znamená opačný smer
 („doľava“).
Návratová hodnota:
aktuálna rýchlosť posunu tohto robota
rychlostPosunu
public double rychlostPosunu()
 Alias pre rýchlosťPosunu.
rýchlosťPosunu
public void rýchlosťPosunu(double rýchlosťPosunu)
 Nastaví robotu novú hodnotu
 rýchlosti posunu tohto robota a ak je zadaná nenulová
 hodnota, tak robot automaticky aktivuje (čo môže viesť ku vzniku ďalších udalostí
 opísaných pri metóde aktivuj()), aby
 sa mohol pohybovať. Rýchlosťou posunu sa rozumie rýchlosť
 v smere kolmom na aktuálny smer
 robota. Kladná hodnota rýchlosti posunu znamená posúvanie
 sa „doprava“ – pri predvolenej orientácii robota „hore“
 (na sever – v uhle 90°) to znamená posun v smere uhla 0°
 (na východ). Záporná hodnota znamená opačný smer
 („doľava“). Ak je zadaná nulová hodnota rýchlosti
 posunu, tak robot nie je automaticky deaktivovaný.
Parametre:
rýchlosť – posunu nová hodnota rýchlosti
rychlostPosunu
public void rychlostPosunu(double rýchlosťPosunu)
 Alias pre rýchlosťPosunu.
rýchlosťPosunu
public void rýchlosťPosunu(double rýchlosťPosunu,
                           boolean aktivuj)
Nastaví robotu novú hodnotu rýchlosti posunu a dovolí
 programátorovi rozhodnúť, či má byť robot automaticky
 aktivovaný. Neaktívne roboty sa
 nepohybujú aj keď majú nastavenú nenulovú rýchlosť
 posunu.
Parametre:
rýchlosťPosunu – nová hodnota rýchlosti posunu
aktivuj – ak je true a zadaná rýchlosť
     posunu je nenulová, tak automaticky aktivuje robot
rychlostPosunu
public void rychlostPosunu(double rýchlosťPosunu,
                           boolean aktivuj)
 Alias pre rýchlosťPosunu.
maximálnaRýchlosťPosunu
public double maximálnaRýchlosťPosunu()
 Zistí hodnotu maximálnej rýchlosti
 posunu tohto robota. Nula znamená „bez obmedzenia.“
Návratová hodnota:
maximálna rýchlosť posunu tohto robota
maximalnaRychlostPosunu
public double maximalnaRychlostPosunu()
 Alias pre maximálnaRýchlosťPosunu.
najväčšiaRýchlosťPosunu
public double najväčšiaRýchlosťPosunu()
 Alias pre maximálnaRýchlosťPosunu.
najvacsiaRychlostPosunu
public double najvacsiaRychlostPosunu()
 Alias pre maximálnaRýchlosťPosunu.
maximálnaRýchlosťPosunu
public void maximálnaRýchlosťPosunu(double maximálnaRýchlosťPosunu)
 Nastaví novú hodnotu maximálnej
 rýchlosti posunu. Touto hodnotou bude limitovaná
 rýchlosť posunu
 tohto robota v kladom i zápornom smere. Nula znamená
 „bez obmedzenia.“
Parametre:
maximálnaRýchlosťPosunu – nová hodnota maximálnej
     rýchlosti posunu
maximalnaRychlostPosunu
public void maximalnaRychlostPosunu(double maximálnaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
najväčšiaRýchlosťPosunu
public void najväčšiaRýchlosťPosunu(double najväčšiaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
najvacsiaRychlostPosunu
public void najvacsiaRychlostPosunu(double najväčšiaRýchlosťPosunu)
 Alias pre maximálnaRýchlosťPosunu.
uhlováRýchlosť
public double uhlováRýchlosť()
 Zistí aktuálnu hodnotu
 uhlovej rýchlosti
 (rýchlosti otáčania) tohto robota. Kladné hodnoty znamenajú
 otáčanie robota doľava. Nenulová uhlová rýchlosť ešte
 neznamená, že robot sa otáča. Pohybujú a otáčajú sa len
 aktívne roboty.
Návratová hodnota:
aktuálna uhlová rýchlosť tohto robota
uhlovaRychlost
public double uhlovaRychlost()
 Alias pre uhlováRýchlosť.
rýchlosťOtáčania
public double rýchlosťOtáčania()
 Alias pre uhlováRýchlosť.
rychlostOtacania
public double rychlostOtacania()
 Alias pre uhlováRýchlosť.
uhlováRýchlosť
public void uhlováRýchlosť(double uhlováRýchlosť)
 Nastaví novú hodnotu uhlovej
 rýchlosti (rýchlosti otáčania) tohto robota. Kladné
 hodnoty znamenajú otáčanie robota doľava. Ak je zadané
 nenulová hodnota, robot je automaticky aktivovaný, aby sa mohol otáčať. Ak je zadaná
 nulová hodnota, robot nie je automaticky
 deaktivovaný.
Parametre:
uhlováRýchlosť – nová hodnota uhlovej rýchlosti
     (rýchlosti otáčania)
uhlovaRychlost
public void uhlovaRychlost(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
rýchlosťOtáčania
public void rýchlosťOtáčania(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
rychlostOtacania
public void rychlostOtacania(double uhlováRýchlosť)
 Alias pre uhlováRýchlosť.
uhlováRýchlosť
public void uhlováRýchlosť(double uhlováRýchlosť,
                           boolean aktivuj)
Nastaví novú hodnotu uhlovej rýchlosti (rýchlosti
 otáčania) tohto robota. Kladné hodnoty znamenajú otáčanie
 robota doľava. Argument aktivuj dovoľuje
 programátorovi určiť, či smie byť robot (v prípade zadania
 nenulovej hodnoty uhlovej rýchlosti) aktivovaný. Neaktívne roboty sa nepohybujú ani neotáčajú
 aj keď majú nastavenú nenulovú rýchlosť, resp. rýchlosť
 otáčania.
Parametre:
uhlováRýchlosť – nová hodnota uhlovej rýchlosti
     (rýchlosti otáčania)
aktivuj – ak je true a zadaná hodnota
     uhlovej rýchlosti je nenulová, robot je aktivovaný
uhlovaRychlost
public void uhlovaRychlost(double uhlováRýchlosť,
                           boolean aktivuj)
 Alias pre uhlováRýchlosť.
rýchlosťOtáčania
public void rýchlosťOtáčania(double uhlováRýchlosť,
                             boolean aktivuj)
 Alias pre uhlováRýchlosť.
rychlostOtacania
public void rychlostOtacania(double uhlováRýchlosť,
                             boolean aktivuj)
 Alias pre uhlováRýchlosť.
maximálnaUhlováRýchlosť
public double maximálnaUhlováRýchlosť()
 Zistí hodnotu maximálnej uhlovej
 rýchlosti (maximálnej rýchlosti otáčania) tohto robota.
 Kladné hodnoty znamenajú otáčanie robota doľava. Nula
 znamená „bez obmedzenia.“
Návratová hodnota:
maximálna uhlová rýchlosť tohto robota
maximalnaUhlovaRychlost
public double maximalnaUhlovaRychlost()
 Alias pre maximálnaUhlováRýchlosť.
maximálnaRýchlosťOtáčania
public double maximálnaRýchlosťOtáčania()
 Alias pre maximálnaUhlováRýchlosť.
maximalnaRychlostOtacania
public double maximalnaRychlostOtacania()
 Alias pre maximálnaUhlováRýchlosť.
najväčšiaUhlováRýchlosť
public double najväčšiaUhlováRýchlosť()
 Alias pre maximálnaUhlováRýchlosť.
najvacsiaUhlovaRychlost
public double najvacsiaUhlovaRychlost()
 Alias pre maximálnaUhlováRýchlosť.
najväčšiaRýchlosťOtáčania
public double najväčšiaRýchlosťOtáčania()
 Alias pre maximálnaUhlováRýchlosť.
najvacsiaRychlostOtacania
public double najvacsiaRychlostOtacania()
 Alias pre maximálnaUhlováRýchlosť.
maximálnaUhlováRýchlosť
public void maximálnaUhlováRýchlosť(double maximálnaUhlováRýchlosť)
 Nastaví novú hodnotu maximálnej
 uhlovej rýchlosti (rýchlosti otáčania). Touto hodnotou bude
 limitovaná rýchlosť
 otáčania robota v kladom i zápornom smere. Kladné hodnoty
 znamenajú otáčanie robota doľava. Nulová maximálna uhlová
 rýchlosť znamená „bez obmedzenia.“
Parametre:
maximálnaUhlováRýchlosť – nová hodnota maximálnej
     uhlovej rýchlosti
maximalnaUhlovaRychlost
public void maximalnaUhlovaRychlost(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
maximálnaRýchlosťOtáčania
public void maximálnaRýchlosťOtáčania(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
maximalnaRychlostOtacania
public void maximalnaRychlostOtacania(double maximálnaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
najväčšiaUhlováRýchlosť
public void najväčšiaUhlováRýchlosť(double najväčšiaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
najvacsiaUhlovaRychlost
public void najvacsiaUhlovaRychlost(double najväčšiaUhlováRýchlosť)
 Alias pre maximálnaUhlováRýchlosť.
najväčšiaRýchlosťOtáčania
public void najväčšiaRýchlosťOtáčania(double najväčšiaRýchlosťOtáčania)
 Alias pre maximálnaUhlováRýchlosť.
najvacsiaRychlostOtacania
public void najvacsiaRychlostOtacania(double najväčšiaRýchlosťOtáčania)
 Alias pre maximálnaUhlováRýchlosť.
zrýchlenie
public double zrýchlenie()
 Zistí hodnotu zrýchlenia tohto robota. Nenulová
 hodnota ešte neznamená, že robot sa pohybuje. Pohybujú sa
 len aktívne roboty.
Návratová hodnota:
zrýchlenie tohto robota
zrychlenie
public double zrychlenie()
 Alias pre zrýchlenie.
zrýchlenie
public void zrýchlenie(double zrýchlenie)
 Nastaví robotu novú hodnotu
 zrýchlenia. V prípade zadania nenulovej hodnoty, je robot
 automaticky aktivovaný, aby sa
 mohol začať pohybovať. Ak má robot nastavenú maximálnu rýchlosť, bude
 zrýchľovať až kým ju nedosiahne, inak bude zrýchľovať
 donekonečna. Ak majú hodnoty rýchlosti a zrýchlenia rôzne znamienka, robot postupne
 spomaľuje a keď dosiahne hranicu nulovej rýchlosti, tak sa
 buď zastaví (ak má prikázané zastaviť po spomalení), alebo sa
 začne pohybovať opačným smerom (t. j. ak išiel dopredu,
 začne cúvať a naopak).
Parametre:
zrýchlenie – nová hodnota zrýchlenia
zrychlenie
public void zrychlenie(double zrýchlenie)
 Alias pre zrýchlenie.
zrýchlenie
public void zrýchlenie(double zrýchlenie,
                       boolean aktivuj)
Metóda funguje rovnako ako metóda zrýchlenie(double zrýchlenie), ale
 dovoľuje programátorovi určiť, či smie byť robot
 (v prípade zadania nenulového zrýchlenia) aktivovaný.
Parametre:
zrýchlenie – nová hodnota zrýchlenia
aktivuj – ak je true a zadaná hodnota
     zrýchlenia je nenulová, robot je aktivovaný
zrychlenie
public void zrychlenie(double zrýchlenie,
                       boolean aktivuj)
 Alias pre zrýchlenie.
zrýchleniePosunu
public double zrýchleniePosunu()
 Zistí hodnotu zrýchlenia posunu tohto robota.
 (Je to zrýchlenie v smere kolmom na aktuálny smer robota. Pozri aj rýchlosťPosunu.) Nenulová hodnota
 automaticky neznamená, že sa robot pohybuje. Pohybujú sa
 len aktívne roboty.
Návratová hodnota:
zrýchlenie posunu tohto robota
zrychleniePosunu
public double zrychleniePosunu()
 Alias pre zrýchleniePosunu.
zrýchleniePosunu
public void zrýchleniePosunu(double zrýchleniePosunu)
 Nastaví robotu novú hodnotu
 zrýchlenia posunu. V prípade zadania nenulovej hodnoty,
 je robot automaticky aktivovaný,
 aby sa mohol začať pohybovať. Ak má robot nastavenú
 maximálnu
 rýchlosť posunu, bude zrýchľovať až kým ju nedosiahne,
 inak bude zrýchľovať donekonečna. Ak majú hodnoty
 rýchlosti posunu
 a zrýchlenia rôzne znamienka, tak robot postupne
 spomaľuje a keď dosiahne hranicu nulovej rýchlosti, tak
 sa buď zastaví (ak má prikázané zastaviť po spomalení posunu),
 alebo sa začne pohybovať opačným smerom.
Parametre:
zrýchleniePosunu – nová hodnota zrýchlenia posunu
zrychleniePosunu
public void zrychleniePosunu(double zrýchleniePosunu)
 Alias pre zrýchleniePosunu.
zrýchleniePosunu
public void zrýchleniePosunu(double zrýchleniePosunu,
                             boolean aktivuj)
Metóda funguje rovnako ako metóda zrýchleniePosunu(double
 zrýchlenie), ale dovoľuje programátorovi určiť, či smie
 byť robot (v prípade zadania nenulového zrýchlenia posunu)
 aktivovaný.
Parametre:
zrýchleniePosunu – nová hodnota zrýchlenia posunu
aktivuj – ak je true a zadaná hodnota
     zrýchlenia posunu je nenulová, tak je robot
     aktivovaný
zrychleniePosunu
public void zrychleniePosunu(double zrýchleniePosunu,
                             boolean aktivuj)
 Alias pre zrýchleniePosunu.
uhlovéZrýchlenie
public double uhlovéZrýchlenie()
 Zistí hodnotu uhlového zrýchlenia (zrýchlenia
 otáčania) tohto robota. Kladné hodnoty znamenajú otáčanie
 robota doľava. Nenulová hodnota ešte neznamená, že robot
 sa otáča. Pohybujú a otáčajú sa len aktívne roboty.
Návratová hodnota:
uhlové zrýchlenie tohto robota
uhloveZrychlenie
public double uhloveZrychlenie()
 Alias pre uhlovéZrýchlenie.
zrýchlenieOtáčania
public double zrýchlenieOtáčania()
 Alias pre uhlovéZrýchlenie.
zrychlenieOtacania
public double zrychlenieOtacania()
 Alias pre uhlovéZrýchlenie.
uhlovéZrýchlenie
public void uhlovéZrýchlenie(double uhlovéZrýchlenie)
 Nastaví robotu novú hodnotu
 uhlového zrýchlenia (zrýchlenia otáčania). V prípade
 zadania nenulovej hodnoty, je robot automaticky
 aktivovaný, aby sa mohol začať
 otáčať. Ak má robot nastavenú maximálnu uhlovú
 rýchlosť, bude zvyšovať rýchlosť otáčania až kým
 nedosiahne stanovenú hranicu, inak bude zrýchľovať
 donekonečna. Ak majú hodnoty rýchlosti otáčania a uhlového
 zrýchlenia rôzne znamienka, robot bude postupne znižovať
 rýchlosť otáčania, kým sa nezačne otáčať opačným smerom.
Parametre:
uhlovéZrýchlenie – nová hodnota uhlového zrýchlenia
     (zrýchlenia otáčania)
uhloveZrychlenie
public void uhloveZrychlenie(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
zrýchlenieOtáčania
public void zrýchlenieOtáčania(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
zrychlenieOtacania
public void zrychlenieOtacania(double uhlovéZrýchlenie)
 Alias pre uhlovéZrýchlenie.
uhlovéZrýchlenie
public void uhlovéZrýchlenie(double uhlovéZrýchlenie,
                             boolean aktivuj)
Metóda funguje rovnako ako metóda uhlovéZrýchlenie(double
 uhlovéZrýchlenie), ale dovoľuje programátorovi určiť, či
 smie byť robot (v prípade zadania nenulového zrýchlenia)
 aktivovaný.
Parametre:
uhlovéZrýchlenie – nová hodnota uhlového zrýchlenia
     (zrýchlenia otáčania)
aktivuj – ak je true a zadaná hodnota
     uhlového zrýchlenia je nenulová, robot je aktivovaný
uhloveZrychlenie
public void uhloveZrychlenie(double uhlovéZrýchlenie,
                             boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
zrýchlenieOtáčania
public void zrýchlenieOtáčania(double uhlovéZrýchlenie,
                               boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
zrychlenieOtacania
public void zrychlenieOtacania(double uhlovéZrýchlenie,
                               boolean aktivuj)
 Alias pre uhlovéZrýchlenie.
rozbehniSa
public void rozbehniSa()
Metóda slúži na aktiváciu robota, ktorý má nenulové
 zrýchlenie.
 Ak má robot nulové zrýchlenie, tak volanie tejto
 robota je
 treba nastaviť vopred.) Vo vyšších verziách programovacieho
 rámca bolo správanie tejto metódy upravené tak, aby sa
 robot vždy rozbiehal dopredu (to znamená, že ak je
 zrýchlenie robota v čase volania tejto metódy záporné,
 upraví sa automaticky na kladné), zároveň bola pridaná
 metóda začniCúvať… Vlastnosť
 rýchlosti posunu bola pridaná v ešte neskorších verziách
 rámca a jej aspekty nie sú touto metódou ovplyvňované (to
 isté platí pri volaní metódy začniCúvať).
Pozri tiež:
začniCúvať(), 
zabrzdi(), 
rozbehniSa(double), 
rozbehniSa(double, double), 
rozbehniSa(double, boolean), 
rozbehniSa(double, double, boolean)
začniCúvať
public void začniCúvať()
Metóda slúži na aktiváciu robota, ktorý má nenulové
 zrýchlenie.
 Ak má robot nulové zrýchlenie, tak volanie tejto
 robota je
 treba nastaviť vopred.) Ak je zrýchlenie robota v čase
 volania tejto metódy kladné, upraví sa automaticky na
 záporné. Táto metóda bola pridaná do vyšších verzií
 programovacieho rámca ako protipól metódy rozbehniSa. Vlastnosť rýchlosti posunu bola
 pridaná v ešte neskorších verziách rámca a jej aspekty nie
 sú touto metódou ovplyvňované.
Pozri tiež:
rozbehniSa(), 
zabrzdi()
zacniCuvat
public void zacniCuvat()
 Alias pre začniCúvať.
rozbehniSa
public void rozbehniSa(double zrýchlenie)
Metóda nastaví robotu zadané zrýchlenie a v prípade zadania
 nenulovej hodnoty automaticky aktivuje robot.
Parametre:
zrýchlenie – nová hodnota zrýchlenia
Pozri tiež:
začniCúvať(), 
zabrzdi(double), 
rozbehniSa(), 
rozbehniSa(double, double), 
rozbehniSa(double, boolean), 
rozbehniSa(double, double, boolean)
rozbehniSa
public void rozbehniSa(double zrýchlenie,
                       double maximálnaRýchlosť)
Metóda nastaví robotu nové hodnoty zrýchlenia a maximálnej rýchlosti
 a v prípade zadania nenulovej hodnoty zrýchlenia
 automaticky aktivuje robot.
Parametre:
zrýchlenie – nová hodnota zrýchlenia
maximálnaRýchlosť – nová hodnota maximálnej rýchlosti
Pozri tiež:
zabrzdi(double), 
rozbehniSa(), 
rozbehniSa(double), 
rozbehniSa(double, boolean), 
rozbehniSa(double, double, boolean)
rozbehniSa
public void rozbehniSa(double zrýchlenie,
                       boolean aktivuj)
Metóda nastaví robotu zadané zrýchlenie a zároveň dovoľuje
 programátorovi určiť, či má byť robot v prípade zadania
 nenulovej hodnoty zrýchlenia automaticky aktivovaný.
Parametre:
zrýchlenie – nová hodnota zrýchlenia
aktivuj – ak je true, automaticky
     aktivuje robot pri zadaní nenulového zrýchlenia
Pozri tiež:
zabrzdi(double), 
rozbehniSa(), 
rozbehniSa(double), 
rozbehniSa(double, double), 
rozbehniSa(double, double, boolean)
rozbehniSa
public void rozbehniSa(double zrýchlenie,
                       double maximálnaRýchlosť,
                       boolean aktivuj)
Metóda nastaví robotu nové hodnoty zrýchlenia a maximálnej rýchlosti a dovoľuje
 programátorovi určiť, či má byť robot v prípade zadania
 nenulovej hodnoty zrýchlenia automaticky aktivovaný.
Parametre:
zrýchlenie – nová hodnota zrýchlenia
maximálnaRýchlosť – nová hodnota maximálnej rýchlosti
aktivuj – ak je true, automaticky
     aktivuje robot pri zadaní nenulového zrýchlenia
Pozri tiež:
zabrzdi(double), 
rozbehniSa(), 
rozbehniSa(double), 
rozbehniSa(double, double), 
rozbehniSa(double, boolean)
zabrzdi
public void zabrzdi()
Prikáže robotu začať brzdiť a automaticky zastaviť pri dosiahnutí nulovej rýchlosti.
 
 Metóda vyžaduje, aby robot mal určitú úroveň
 zrýchlenia (kladnú alebo
 zápornú)!
 Keď robot nie je aktívny alebo má
 nulové zrýchlenie, tak
 nemá volanie tejto metódy žiadny efekt. V opačnom prípade
 je vektor zrýchlenia robota upravený správnym smerom –
 keď robot cúva, tak je jeho zrýchlenie nastavené na kladnú
 hodnotu, keď sa pohybuje smerom dopredu, tak na zápornú.
 Vlastnosť rýchlosti posunu bola do programovacieho rámca
 pridaná v neskorších verziách a jej aspekty nie sú touto
 metódou ovplyvňované. (Pozri zastavPosun.)
 
 Pozor! Pozor na podobnosť názvu
 s metódou zastav, ktorá má na starosti
 deaktiváciu robota (napríklad po dosiahnutí cieľa)…
Pozri tiež:
rozbehniSa(), 
začniCúvať(), 
zabrzdi(double), 
zastavPosun()
zabrzdi
public void zabrzdi(double zrýchlenie)
Prikáže robotu začať brzdiť so zadaným „zrýchlením“
 (spomalením) a automaticky zastaviť
 pri dosiahnutí nulovej rýchlosti. Keď robot nie je
 aktívny alebo je zadané
 zrýchlenie rovné nule, tak nemá volanie metódy žiadny
 efekt.
 V opačnom prípade je vektor zrýchlenia robota upravený
 správnym smerom – keď robot práve cúva, tak je zrýchlenie
 nastavené na kladnú hodnotu, v opačných prípadoch na
 zápornú.
 Vlastnosť rýchlosti posunu bola do programovacieho rámca
 pridaná v neskorších verziách a jej aspekty nie sú touto
 metódou ovplyvňované. (Pozri zastavPosun.)
 
 Pozor! Pozor na podobnosť názvu
 s metódou zastav, ktorá má na starosti
 deaktiváciu robota (napríklad po dosiahnutí cieľa)…
Parametre:
zrýchlenie – nová hodnota zrýchlenia tohto robota
     (nesmie byť rovné nule)
Pozri tiež:
rozbehniSa(double), 
rozbehniSa(double, double), 
rozbehniSa(double, boolean), 
rozbehniSa(double, double, boolean), 
zabrzdi(), 
zastavPosun()
zastavíPoSpomalení
public boolean zastavíPoSpomalení()
Zistí, či má robot prikázané automaticky zastaviť pri najbližšom dosiahnutí nulovej
 rýchlosti.
Návratová hodnota:
true – áno; false – nie
zastaviPoSpomaleni
public boolean zastaviPoSpomaleni()
 Alias pre zastavíPoSpomalení.
zastavPoSpomalení
public void zastavPoSpomalení()
Prikáže robotu, aby najbližšie, keď dosiahne nulovú
 rýchlosť automaticky zastavil.
zastavPoSpomaleni
public void zastavPoSpomaleni()
 Alias pre zastavPoSpomalení.
nezastavujPoSpomalení
public void nezastavujPoSpomalení()
Zruší príkaz robota, ktorý mu určoval, aby sa najbližšie,
 keď dosiahne nulovú rýchlosť automaticky zastavil.
nezastavujPoSpomaleni
public void nezastavujPoSpomaleni()
 Alias pre nezastavujPoSpomalení.
zastavíPoSpomaleníPosunu
public boolean zastavíPoSpomaleníPosunu()
Zistí, či má robot prikázané automaticky zastaviť posun pri najbližšom dosiahnutí
 nulovej rýchlosti posunu.
Návratová hodnota:
true – áno; false – nie
zastaviPoSpomaleniPosunu
public boolean zastaviPoSpomaleniPosunu()
 Alias pre zastavíPoSpomaleníPosunu.
zastavPoSpomaleníPosunu
public void zastavPoSpomaleníPosunu()
Prikáže robotu, aby najbližšie, keď dosiahne nulovú
 rýchlosť posunu automaticky zastavil posun. Táto akcia automaticky nastaví nulové
 zrýchlenie posunu.
zastavPoSpomaleniPosunu
public void zastavPoSpomaleniPosunu()
 Alias pre zastavPoSpomaleníPosunu.
nezastavujPoSpomaleníPosunu
public void nezastavujPoSpomaleníPosunu()
Zruší robotu príkaz, ktorý mu určoval, aby sa
 najbližšie, keď dosiahne nulovú rýchlosť posunu automaticky
 posun zastavil (s nastavením
 nulového zrýchlenia
 posunu).
nezastavujPoSpomaleniPosunu
public void nezastavujPoSpomaleniPosunu()
 Alias pre nezastavujPoSpomaleníPosunu.
cieľAktívny
public boolean cieľAktívny()
Zistí, či je robot práve v režime smerovania do
 cieľa.
Návratová hodnota:
true – áno; false – nie
cielAktivny
public boolean cielAktivny()
 Alias pre cieľAktívny.
smerujeDoCieľa
public boolean smerujeDoCieľa()
 Alias pre cieľAktívny.
smerujeDoCiela
public boolean smerujeDoCiela()
 Alias pre cieľAktívny.
cieľX
public double cieľX()
Vráti x-ovú súradnicu naposledy definovaného cieľa.
Návratová hodnota:
x-ová súradnica naposledy definovaného cieľa
Pozri tiež:
cieľ(), 
cieľY()
cielX
public double cielX()
 Alias pre cieľX.
cieľY
public double cieľY()
Vráti y-ovú súradnicu naposledy definovaného cieľa.
Návratová hodnota:
y-ová súradnica naposledy definovaného cieľa
Pozri tiež:
cieľ(), 
cieľX()
cielY
public double cielY()
 Alias pre cieľY.
cieľ
public Bod cieľ()
Vráti polohu naposledy definovaného cieľa.
Návratová hodnota:
poloha naposledy definovaného cieľa
Pozri tiež:
cieľX(), 
cieľY()
ciel
public Bod ciel()
 Alias pre cieľ.
zastavíVCieli
public boolean zastavíVCieli()
Zistí, či má robot prikázané automaticky zastaviť po dosiahnutí cieľa.
Návratová hodnota:
true – áno; false – nie
zastaviVCieli
public boolean zastaviVCieli()
 Alias pre zastavíVCieli.
zrušCieľ
public void zrušCieľ()
Vypne smerovanie do cieľa, ktoré bolo zapnuté niektorou
 z verzií metódy cieľ. Robot
 je automaticky deaktivovaný rovnakým spôsobom ako pri metóde
 zastav. Ak je automatická deaktivácia
 nežiaduca, tak treba použiť verziu metódy
 zrušCieľ(zastav) s argumentom
 zastav rovným false.
Pozri tiež:
cieľ(double, double), 
zrušCieľ(boolean)
zrusCiel
public void zrusCiel()
 Alias pre zrušCieľ.
zrušSledovanieCieľa
public void zrušSledovanieCieľa()
 Alias pre zrušCieľ.
zrusSledovanieCiela
public void zrusSledovanieCiela()
 Alias pre zrušCieľ.
zrušCieľ
public void zrušCieľ(boolean zastav)
Vypne smerovanie do cieľa, ktoré bolo zapnuté niektorou
 z verzií metódy cieľ.
 Parameter zastav dovoľuje programátorovi rozhodnúť,
 či má alebo nemá robot zostať aktívny.
Parametre:
zastav – ak je true, tak je robot
     deaktivovaný rovnakým spôsobom ako pri volaní metódy
     zastav (bez argumentu).
Pozri tiež:
cieľ(double, double), 
zrušCieľ()
zrusCiel
public void zrusCiel(boolean zastav)
 Alias pre zrušCieľ.
zrušSledovanieCieľa
public void zrušSledovanieCieľa(boolean zastav)
 Alias pre zrušCieľ.
zrusSledovanieCiela
public void zrusSledovanieCiela(boolean zastav)
 Alias pre zrušCieľ.
cieľ
public void cieľ(double x,
                 double y)
Zapne automatické smerovanie do cieľa. Počas tejto
 činnosti je robot automaticky otáčaný smerom na cieľové
 súradnice (buď s ohľadom na aktuálnu rýchlosť otáčania, alebo
 okamžite) a v prípade, že má robot nenulovú rýchlosť (prípadne zrýchlenie), pohybuje sa stanoveným
 smerom. Po dosiahnutí cieľa robot automaticky zastaví. Metóda vynúti spustenie robota.
 Vlastnosť rýchlosti
 posunu (ktorá bola v porovnaní s vlastnosťou
 smerovania do cieľa pridaná do programovacieho rámca
 omnoho neskôr) je pri smerovaní do cieľa úplne
 ignorovaná.
Parametre:
x – x-ová súradnica cieľa
y – y-ová súradnica cieľa
ciel
public void ciel(double x,
                 double y)
 Alias pre cieľ.
cieľ
public void cieľ(double x,
                 double y,
                 boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(x, y) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť robot automaticky
 spustený (aktivovaný).
Parametre:
x – x-ová súradnica cieľa
y – y-ová súradnica cieľa
spusti – ak je rovné true, je vynútené
     spustenie a zároveň je robotu
     prikázané, aby zastavil
     v cieli
ciel
public void ciel(double x,
                 double y,
                 boolean spusti)
 Alias pre cieľ.
cieľ
public void cieľ(double x,
                 double y,
                 boolean spusti,
                 boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(x, y) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť robot automaticky
 spustený (aktivovaný) a či má
 zastaviť po dosiahnutí cieľa.
Parametre:
x – x-ová súradnica cieľa
y – y-ová súradnica cieľa
spusti – ak je rovné true, je vynútené
     spustenie robota
zastavVCieli – určuje, či má robot automaticky
     zastaviť v cieli
ciel
public void ciel(double x,
                 double y,
                 boolean spusti,
                 boolean zastavVCieli)
 Alias pre cieľ.
cieľ
public void cieľ(Poloha objekt)
Zapne automatické smerovanie do cieľa. Metóda vynúti
 spustenie robota. Za nový cieľ sú
 zvolené aktuálne súradnice zadaného objektu a tie ním
 zostávajú, dokedy nie je určené inak. Keď chceme sledovať
 pohybujúci sa robot, musíme cieľ pravidelne
 aktualizovať metódou upravCieľ.
 
 Počas činnosti smerovania na cieľ je robot automaticky
 otáčaný smerom na cieľové súradnice (buď s ohľadom na
 aktuálnu rýchlosť
 otáčania, alebo okamžite) a v prípade, že má robot
 nenulovú rýchlosť (prípadne
 zrýchlenie), pohybuje sa
 stanoveným smerom. Po dosiahnutí cieľa robot automaticky
 zastaví.
 
 Vlastnosť rýchlosti
 posunu (ktorá bola v porovnaní s vlastnosťou
 smerovania do cieľa pridaná do programovacieho rámca
 omnoho neskôr) je pri smerovaní do cieľa úplne
 ignorovaná.
Parametre:
objekt – objekt, ktorého poloha v čase volania tejto
     metódy je zvolená za nový cieľ; ak je null,
     smerovanie do cieľa je zrušené
ciel
public void ciel(Poloha objekt)
 Alias pre cieľ.
cieľ
public void cieľ(Poloha objekt,
                 boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(Poloha) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť tento robot automaticky
 spustený (aktivovaný).
Parametre:
objekt – objekt, ktorého poloha v čase volania tejto
     metódy je zvolená za nový cieľ; ak je null,
     smerovanie do cieľa je zrušené
spusti – ak je rovné true, je vynútené
     spustenie a zároveň je robotu
     prikázané, aby zastavil
     v cieli
ciel
public void ciel(Poloha objekt,
                 boolean spusti)
 Alias pre cieľ.
cieľ
public void cieľ(Poloha objekt,
                 boolean spusti,
                 boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(Poloha) (pozri jej opis), ibaže umožňuje
 programátorovi určiť, či smie byť tento robot automaticky
 spustený (aktivovaný) a či má
 zastaviť po dosiahnutí cieľa.
Parametre:
objekt – objekt, ktorého poloha v čase volania tejto
     metódy je zvolená za nový cieľ; ak je null,
     smerovanie do cieľa je zrušené
spusti – ak je rovné true, je vynútené
     spustenie robota
zastavVCieli – určuje, či má robot automaticky
     zastaviť v cieli
ciel
public void ciel(Poloha objekt,
                 boolean spusti,
                 boolean zastavVCieli)
 Alias pre cieľ.
cieľ
public void cieľ(Shape tvar)
Zapne automatické smerovanie do cieľa, ktorý je určený
 stredom hraníc[1] zadaného tvaru Javy (Shape). Počas tejto činnosti je robot automaticky
 otáčaný smerom na cieľové súradnice (buď s ohľadom na
 aktuálnu rýchlosť
 otáčania, alebo okamžite) a v prípade, že má robot
 nenulovú rýchlosť (prípadne
 zrýchlenie), pohybuje sa
 stanoveným smerom. Po dosiahnutí cieľa robot automaticky
 zastaví. Metóda vynúti spustenie robota.
 Vlastnosť rýchlosti
 posunu (ktorá bola v porovnaní s vlastnosťou
 smerovania do cieľa pridaná do programovacieho rámca
 omnoho neskôr) je pri smerovaní do cieľa úplne
 ignorovaná.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar, ktorého stred hraníc je zvolený za nový
     cieľ; ak je null, smerovanie do cieľa je
     zrušené
ciel
public void ciel(Shape tvar)
 Alias pre cieľ.
cieľ
public void cieľ(Shape tvar,
                 boolean spusti)
Metóda má rovnaký účel ako metóda cieľ(tvar) (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný).
Parametre:
tvar – tvar, ktorého stred hraníc je zvolený za nový
     cieľ; ak je null, smerovanie do cieľa je
     zrušené
spusti – ak je rovné true, je vynútené
     spustenie a zároveň je robotu
     prikázané, aby zastavil
     v cieli
ciel
public void ciel(Shape tvar,
                 boolean spusti)
 Alias pre cieľ.
cieľ
public void cieľ(Shape tvar,
                 boolean spusti,
                 boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľ(tvar) (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný) a či má zastaviť po dosiahnutí
 cieľa.
Parametre:
tvar – tvar, ktorého stred hraníc je zvolený za nový
     cieľ; ak je null, smerovanie do cieľa je
     zrušené
spusti – ak je rovné true, je vynútené
     spustenie robota
zastavVCieli – určuje, či má robot automaticky
     zastaviť v cieli
ciel
public void ciel(Shape tvar,
                 boolean spusti,
                 boolean zastavVCieli)
 Alias pre cieľ.
cieľNaMyš
public void cieľNaMyš()
Zapne automatické smerovanie do cieľa, ktorý bude určený
 aktuálnymi súradnicami myši. Počas tejto činnosti je robot
 automaticky otáčaný smerom na cieľové súradnice (buď
 s ohľadom na aktuálnu rýchlosť otáčania, alebo okamžite) a v prípade, že má
 robot nenulovú rýchlosť
 (prípadne zrýchlenie),
 pohybuje sa stanoveným smerom. Po dosiahnutí cieľa robot
 automaticky zastaví. Metóda vynúti
 spustenie robota.
 Vlastnosť rýchlosti
 posunu (ktorá bola v porovnaní s vlastnosťou
 smerovania do cieľa pridaná do programovacieho rámca
 omnoho neskôr) je pri smerovaní do cieľa úplne
 ignorovaná.
cielNaMys
public void cielNaMys()
 Alias pre cieľNaMyš.
cieľNaMyš
public void cieľNaMyš(boolean spusti)
Metóda má rovnaký účel ako metóda cieľNaMyš() (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný).
Parametre:
spusti – ak je rovné true, je vynútené
     spustenie a zároveň je robotu
     prikázané, aby zastavil
     v cieli
cielNaMys
public void cielNaMys(boolean spusti)
 Alias pre cieľNaMyš.
cieľNaMyš
public void cieľNaMyš(boolean spusti,
                      boolean zastavVCieli)
Metóda má rovnaký účel ako metóda cieľNaMyš() (pozri jej opis), ibaže umožňuje programátorovi
 určiť, či smie byť robot automaticky spustený (aktivovaný) a či má zastaviť po dosiahnutí
 cieľa.
Parametre:
spusti – ak je rovné true, je vynútené
     spustenie robota
zastavVCieli – určuje, či má robot automaticky
     zastaviť v cieli
cielNaMys
public void cielNaMys(boolean spusti,
                      boolean zastavVCieli)
 Alias pre cieľNaMyš.
upravCieľ
public void upravCieľ(double x,
                      double y)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa. Ak smerovanie aktívne nie je, tak má volanie
 tejto metódy rovnaký efekt ako volanie metódy cieľ (pozri jej opis).
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
x – nová x-ová súradnica cieľa
y – nová y-ová súradnica cieľa
upravCiel
public void upravCiel(double x,
                      double y)
 Alias pre upravCieľ.
upravCieľ
public void upravCieľ(double x,
                      double y,
                      boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa. Ak smerovanie aktívne nie je, tak má volanie
 tejto metódy rovnaký efekt ako volanie metódy cieľ.
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
x – nová x-ová súradnica cieľa
y – nová y-ová súradnica cieľa
spusti – dovoľuje programátorovi rozhodnúť, či smie
     byť (v prípade, že smerovanie do cieľa nie je
     aktívne) automaticky volaná metóda spusti
upravCiel
public void upravCiel(double x,
                      double y,
                      boolean spusti)
 Alias pre upravCieľ.
upravCieľ
public void upravCieľ(Poloha objekt)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa. Ak smerovanie aktívne nie je, tak má volanie
 tejto metódy rovnaký efekt ako volanie metódy cieľ.
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
objekt – objekt, ktorého poloha bude použitá ako
     nový cieľ
upravCiel
public void upravCiel(Poloha objekt)
 Alias pre upravCieľ.
upravCieľ
public void upravCieľ(Poloha objekt,
                      boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa. Ak smerovanie aktívne nie je, tak má volanie
 tejto metódy rovnaký efekt ako volanie metódy cieľ.
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
objekt – objekt, ktorého poloha bude použitá ako nový
     cieľ
spusti – dovoľuje programátorovi rozhodnúť, či smie
     byť (v prípade, že smerovanie do cieľa nie je
     aktívne) automaticky volaná metóda spusti
upravCiel
public void upravCiel(Poloha objekt,
                      boolean spusti)
 Alias pre upravCieľ.
upravCieľ
public void upravCieľ(Shape tvar)
Ak je smerovanie do cieľa aktívne, upraví cieľové súradnice
 smerom do stredu hraníc[1] zadaného tvaru, inak
 má rovnaký efekt ako volanie metódy cieľ.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
tvar – tvar, ktorého súradnice stredu hraníc budú
     použité ako nový cieľ
upravCiel
public void upravCiel(Shape tvar)
 Alias pre upravCieľ.
upravCieľ
public void upravCieľ(Shape tvar,
                      boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice smerom do stredu hraníc[1] zadaného
 tvaru a v prípade, že sa nové súradnice dostatočne
 prekrývajú s aktuálnou polohou robota ukočí smerovanie
 do cieľa. Ak smerovanie aktívne nie je, tak má volanie
 tejto metódy rovnaký efekt ako volanie metódy cieľ.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí
 sa jeho stred – čiže „stred hraníc.“
 
 Poznámka: Vlastnosť
 rýchlosti posunu
 (ktorá bola v porovnaní s vlastnosťou smerovania do cieľa
 pridaná do programovacieho rámca omnoho neskôr) je pri
 smerovaní do cieľa úplne ignorovaná.
Parametre:
tvar – tvar, ktorého súradnice stredu hraníc budú
     použité ako nový cieľ
spusti – dovoľuje programátorovi rozhodnúť, či smie
     byť (v prípade, že smerovanie do cieľa nie je
     aktívne) automaticky volaná metóda spusti
upravCiel
public void upravCiel(Shape tvar,
                      boolean spusti)
 Alias pre upravCieľ.
upravCieľNaMyš
public void upravCieľNaMyš()
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice podľa aktuálnych súradníc myši a v prípade,
 že sa nové súradnice dostatočne prekrývajú s aktuálnou
 polohou robota ukočí smerovanie do cieľa. Ak smerovanie
 aktívne nie je, tak má volanie tejto metódy rovnaký efekt
 ako volanie metódy cieľNaMyš (pozri
 jej opis).
upravCielNaMys
public void upravCielNaMys()
 Alias pre upravCieľNaMyš.
upravCieľNaMyš
public void upravCieľNaMyš(boolean spusti)
Ak je smerovanie do cieľa aktívne, upraví cieľové
 súradnice podľa aktuálnych súradníc myši a v prípade, že
 sa nové súradnice dostatočne prekrývajú s aktuálnou
 polohou robota ukočí smerovanie do cieľa. Ak smerovanie
 aktívne nie je, tak má volanie tejto metódy rovnaký
 efekt ako volanie metódy cieľNaMyš (pozri jej opis).
Parametre:
spusti – dovoľuje programátorovi rozhodnúť, či smie
     byť (v prípade, že smerovanie do cieľa nie je
     aktívne) automaticky volaná metóda spusti
upravCielNaMys
public void upravCielNaMys(boolean spusti)
 Alias pre upravCieľNaMyš.
smerNaCieľ
public double smerNaCieľ()
Zistí smer (uhol) z aktuálneho miesta robota smerom
 k aktuálnym súradniciam cieľa. Ak sú súradnice cieľa zhodné
 so súradnicami robota, tak je vrátený uhol 360°. Pred
 volaním tejto metódy je vhodné metódou
 cieľAktívny overiť, či je cieľ
 skutočne aktívny. Táto činnosť nie je vykonaná automaticky,
 pretože v niektorých prípadoch môže byť užitočné ignorovať
 to, či je cieľ aktívny, alebo nie.
Návratová hodnota:
hodnota uhla určujúceho smer od robota
     k aktuálnym súradniciam cieľa
Pozri tiež:
uholNaCieľ(), 
otočNaCieľ(), 
otočNaCieľ(double)
smerNaCiel
public double smerNaCiel()
 Alias pre smerNaCieľ.
uholNaCieľ
public double uholNaCieľ()
 Alias pre smerNaCieľ.
uholNaCiel
public double uholNaCiel()
 Alias pre smerNaCieľ.
choďNaCieľ
public void choďNaCieľ()
Prikáže robotu, aby na podlahe (strope) prešiel na
 aktuálne súradnice cieľa. Keď je pero položené, tak kreslí
 čiaru. Robot nezmení smer, kam bol obrátený. Pred volaním
 tejto metódy je vhodné metódou cieľAktívny overiť, či je cieľ skutočne aktívny. Táto
 činnosť nie je vykonaná automaticky, pretože v niektorých
 prípadoch môže byť užitočné ignorovať to, či je cieľ
 aktívny, alebo nie.
Pozri tiež:
skočNaCieľ()
chodNaCiel
public void chodNaCiel()
 Alias pre choďNaCieľ.
skočNaCieľ
public void skočNaCieľ()
Prikáže robotu, aby v rámci podlahy (stropu) preskočil
 na aktuálne súradnice cieľa. Robot nekreslí čiaru, ani
 nezmení smer, kam bol obrátený. Pred volaním
 tejto metódy je vhodné metódou cieľAktívny overiť, či je cieľ skutočne aktívny. Táto
 činnosť nie je vykonaná automaticky, pretože v niektorých
 prípadoch môže byť užitočné ignorovať to, či je cieľ
 aktívny, alebo nie.
Pozri tiež:
choďNaCieľ()
skocNaCiel
public void skocNaCiel()
 Alias pre skočNaCieľ.
otočNaCieľ
public void otočNaCieľ()
Nasmeruje robot smerom na aktuálne súradnice cieľa.
 Ak sú súradnice cieľa zhodné so súradnicami robota, tak sa
 smer robota sa nezmení. Inak je vypočítaný uhol smeru medzi
 aktuálnou polohou robota a polohou cieľa, ktorý je použitý
 na nasmerovanie robota. Pred volaním
 tejto metódy je vhodné metódou cieľAktívny overiť, či je cieľ skutočne aktívny. Táto
 činnosť nie je vykonaná automaticky, pretože v niektorých
 prípadoch môže byť užitočné ignorovať to, či je cieľ
 aktívny, alebo nie.
Pozri tiež:
smerNaCieľ()
otocNaCiel
public void otocNaCiel()
 Alias pre otočNaCieľ.
otočNaCieľ
public void otočNaCieľ(double najviacO)
Funguje podobne ako metóda otočNaCieľ, ibaže obmedzuje uhol pootočenia – neotočí
 robot okamžite smerom k súradniciam cieľa, iba ho pootočí
 stanoveným smerom o maximálnu zadanú hodnotu uhla. Pred
 volaním tejto metódy je vhodné metódou cieľAktívny overiť, či je cieľ skutočne aktívny. Táto
 činnosť nie je vykonaná automaticky, pretože v niektorých
 prípadoch môže byť užitočné ignorovať to, či je cieľ
 aktívny, alebo nie.
Parametre:
najviacO – maximálna hodnota uhla, o ktorú sa môže
     robot pootočiť smerom k aktuálnym súradniciam cieľa
Pozri tiež:
smerNaCieľ()
otocNaCiel
public void otocNaCiel(double najviacO)
 Alias pre otočNaCieľ.
vytvorDráhu
public Zoznam&lt;Bod&gt; vytvorDráhu()
Vytvorí z aktuálnej cesty dráhu so
 zrnitosťou rovnou hodnote aktuálnej rýchlosti robota. Metóda vypočíta body dráhy
 tak, aby vzdialenosť medzi nimi bola čo najbližšie
 k hodnote rýchlosti (podľa ktorej bola určená zrnitosť
 dráhy).
Pozri tiež:
cesta(), 
rýchlosť(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorDrahu
public Zoznam&lt;Bod&gt; vytvorDrahu()
 Alias pre vytvorDráhu.
vytvorDráhu
public Zoznam&lt;Bod&gt; vytvorDráhu(double zrnitosť)
Vytvorí z aktuálnej cesty dráhu so
 zadanou zrnitosťou. Metóda vypočíta body dráhy tak, aby
 vzdialenosť medzi nimi bola čo najbližšie k zadanej
 zrnitosti.
Parametre:
zrnitosť – určuje približnú vzdialenosť medzi
     bodmi dráhy
Pozri tiež:
cesta(), 
vytvorDráhu(), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorDrahu
public Zoznam&lt;Bod&gt; vytvorDrahu(double zrnitosť)
 Alias pre vytvorDráhu.
vytvorDráhu
public Zoznam&lt;Bod&gt; vytvorDráhu(Shape tvar)
Vytvorí zo zadaného tvaru dráhu so zrnitosťou rovnou
 hodnote aktuálnej rýchlosti
 robota. Metóda vypočíta body dráhy tak, aby vzdialenosť
 medzi nimi bola čo najbližšie k hodnote rýchlosti (podľa
 ktorej bola určená zrnitosť dráhy).
Pozri tiež:
rýchlosť(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorDrahu
public Zoznam&lt;Bod&gt; vytvorDrahu(Shape tvar)
 Alias pre vytvorDráhu.
vytvorDráhu
public Zoznam&lt;Bod&gt; vytvorDráhu(Shape tvar,
                               double zrnitosť)
Vytvorí zo zadaného tvaru dráhu so zadanou zrnitosťou.
 Dráha by mala byť otvorená cesta, inak nie je isté to, kde
 presne robot začne (a kde skončí). Avšak ak na tom nezáleží
 (ak je dôležité len to, aby sa robot pohyboval po
 stanovenej dráhe), tak nie je nevyhnutné túto podmienku
 dodržať. Metóda vypočíta body dráhy tak, aby vzdialenosť
 medzi nimi bola čo najbližšie k zadanej zrnitosti.
Parametre:
tvar – určuje tvar dráhy
zrnitosť – určuje približnú vzdialenosť medzi bodmi dráhy
Návratová hodnota:
zoznam bodov tvoriacich aktuálnu (novú) dráhu robota
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorDrahu
public Zoznam&lt;Bod&gt; vytvorDrahu(Shape tvar,
                               double zrnitosť)
 Alias pre vytvorDráhu.
dráha
public Zoznam&lt;Bod&gt; dráha()
 Vráti zoznam bodov tvoriaci
 aktuálnu dráhu.
Návratová hodnota:
zoznam bodov tvoriacich aktuálnu dráhu
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
draha
public Zoznam&lt;Bod&gt; draha()
 Alias pre dráha.
dráha
public void dráha(Vector&lt;Bod&gt; nováDráha)
 Nastaví aktuálnu dráhu podľa zadaného
 zoznamu. Hodnota null znamená vymazanie aktuálnej
 dráhy. Táto akcia má za následok vymazanie všetkých
 kľúčových fáz dráhy.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
draha
public void draha(Vector&lt;Bod&gt; nováDráha)
 Alias pre dráha.
obráťDráhu
public void obráťDráhu()
Prevráti poradie bodov dráhy.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
obratDrahu
public void obratDrahu()
 Alias pre obráťDráhu.
posuňDráhu
public void posuňDráhu(double Δx,
                       double Δy)
Posunie body dráhy o zadaný rozdiel súradníc Δx a Δy.
 
 Táto metóda má dve verzie, ktoré však fungujú úplne
 odlišne. Toto je verzia, ktorá prijíma dva argumenty
 a posúva súradnice jednotlivých bodov dráhy.
 Ďalšia verzia prijíma jeden
 argument a tá posúva prvky dráhy, čo má zmysel najmä pri
 uzavretých dráhach, ktorým chceme posunúť začiatočný
 a koncový bod robota.
Parametre:
Δx – posunutie bodov v smere osi x
Δy – posunutie bodov v smere osi y
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
posunDrahu
public void posunDrahu(double Δx,
                       double Δy)
 Alias pre posuňDráhu.
posuňDráhu
public void posuňDráhu(int početPrvkov)
Posunie prvky v zozname bodov dráhy o zadaný počet doprava
 (pri zadaní kladného počtu prvkov) alebo doľava (pri zadaní
 záporného počtu prvkov). Prvky, ktoré sú pri posúvaní sa
 doprava na konci zoznamu sa ocitnú na jeho začiatku
 a naopak. Tým je ovplyvnené posunutie začiatočného
 a koncového bodu dráhy robota.
 
 Táto metóda má dve verzie, ktoré však fungujú úplne
 odlišne. Toto je verzia, ktorá prijíma jeden argument
 a posúva prvky v zozname bodov dráhy, čo má zmysel najmä
 pri uzavretých dráhach, ktorým chceme posunúť začiatočný
 a koncový bod robota.
 Ďalšia verzia
 prijíma dva argumenty a tá posúva súradnice jednotlivých
 bodov dráhy.
Parametre:
početPrvkov – počet prvkov, o ktorý má byť dráha
     posunutá
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
posunDrahu
public void posunDrahu(int početPrvkov)
 Alias pre posuňDráhu.
vytvorMapuSmerov
public Zoznam&lt;Double&gt; vytvorMapuSmerov()
Vytvorí z aktuálnej cesty dráhu so
 zrnitosťou rovnou hodnote aktuálnej rýchlosti robota a z nej vytvorí mapu smerov, ktoré
 budú použité pri pohybe robota po jeho aktuálne dráhe. Tvar
 cesty slúžiaci na vytvorenie mapy smerov nemusí byť totožný
 s tvarom cesty, ktorý slúžil na vytvorenie dráhy.
Pozri tiež:
cesta(), 
rýchlosť(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorMapuSmerov
public Zoznam&lt;Double&gt; vytvorMapuSmerov(double zrnitosť)
Vytvorí z aktuálnej cesty dráhu so
 zadanou zrnitosťou a z nej vytvorí mapu smerov, ktoré budú
 použité pri pohybe robota po jeho aktuálne dráhe. Tvar cesty
 slúžiaci na vytvorenie mapy smerov nemusí byť totožný s tvarom
 cesty, ktorý slúžil na vytvorenie dráhy.
Parametre:
zrnitosť – určuje približnú vzdialenosť medzi
     bodmi dráhy
Pozri tiež:
cesta(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorMapuSmerov
public Zoznam&lt;Double&gt; vytvorMapuSmerov(Shape tvar)
Vytvorí zo zadaného tvaru dráhu so zrnitosťou rovnou hodnote
 aktuálnej rýchlosti robota a z nej
 vytvorí mapu smerov, ktoré budú použité pri pohybe robota po
 jeho aktuálne dráhe. Tvar slúžiaci na vytvorenie mapy smerov
 nemusí byť totožný s tvarom, ktorý slúžil na vytvorenie dráhy.
Pozri tiež:
rýchlosť(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
vytvorMapuSmerov
public Zoznam&lt;Double&gt; vytvorMapuSmerov(Shape tvar,
                                       double zrnitosť)
Vytvorí zo zadaného tvaru dráhu so zadanou zrnitosťou a z nej
 vytvorí mapu smerov, ktoré budú použité pri pohybe robota po
 jeho aktuálne dráhe. Tvar slúžiaci na vytvorenie mapy smerov
 nemusí byť totožný s tvarom, ktorý slúžil na vytvorenie dráhy.
Parametre:
tvar – určuje tvar, podľa ktorého bude vytvorená mapa smerov
zrnitosť – určuje približnú vzdialenosť medzi bodmi dráhy
Návratová hodnota:
zoznam hodnôt tvoriacich mapu smerov
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
mapaSmerov
public Zoznam&lt;Double&gt; mapaSmerov()
 Vráti zoznam hodnôt tvoriaci aktuálnu mapu
 smerov.
Návratová hodnota:
zoznam hodnôt tvoriacich mapu smerov
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
mapaSmerov
public void mapaSmerov(Vector&lt;Double&gt; nováMapaSmerov)
 Nastaví aktuálnu mapu smerov podľa zadaného
 zoznamu. Hodnota null znamená vymazanie aktuálnej mapy
 smerov.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
obráťMapuSmerov
public void obráťMapuSmerov()
Prevráti poradie prvkov mapy smerov.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
obratMapuSmerov
public void obratMapuSmerov()
 Alias pre obráťDráhu.
pootočMapuSmerov
public void pootočMapuSmerov(double uhol)
Pootočí hodnoty v mape smerov o zadaný uhol.
Parametre:
uhol – uhol pootočenia hodnôt mapy smerov
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
pootocMapuSmerov
public void pootocMapuSmerov(double uhol)
 Alias pre pootočMapuSmerov.
posuňMapuSmerov
public void posuňMapuSmerov(int početPrvkov)
Posunie prvky mapy smerov o zadanú hodnotu doprava.
 (pri zadaní kladnej hodnoty) alebo doľava (pri zadaní
 zápornej hodnoty). Prvky, ktoré sú pri posúvaní sa
 doprava na konci zoznamu sa ocitnú na jeho začiatku
 a naopak.
Parametre:
početPrvkov – počet prvkov, o ktorý má byť mapa
     smerov posunutá
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
posunMapuSmerov
public void posunMapuSmerov(int početPrvkov)
 Alias pre posuňMapuSmerov.
kráčajPoDráhe
public void kráčajPoDráhe()
Aktivuje robot a zaháji jeho pohyb po aktuálnej dráhe.
 
 Príklad:
 
 
 
import knižnica.*;
public class TestKráčajPoDráhe extends GRobot
{
    private TestKráčajPoDráhe()
    {
        super(400, 400);
        zdvihniPero();
        uhol(80);
        skočNa(&#45;170, &#45;80);
        začniCestu();
        choďPoOblúku(90, 100);
        dopredu(120);
        choďPoOblúku(90, &#45;100);
        vytvorDráhu(8);
        domov();
    }
    @Override public void klik()
    {
        kráčajPoDráhe();
    }
    @Override public void kráčaniePoDráhe()
    {
        náhodnáFarba();
        kružnica(Svet.náhodnéReálneČíslo(1.5, 4));
    }
    public static void main(String[] args)
    {
        new TestKráčajPoDráhe();
    }
}
 
 
 Výsledok:
 
 
 Po kliknutí myšou
 začne robot kráčať po vopred vytvorenej dráhe a zanechá
 pri tom náhodnú farebnú stopu.
Pozri tiež:
aktivuj(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
kracajPoDrahe
public void kracajPoDrahe()
 Alias pre kráčajPoDráhe.
zastavNaDráhe
public void zastavNaDráhe()
Deaktivuje robot a ukončí jeho pohyb po dráhe.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
zastavNaDrahe
public void zastavNaDrahe()
 Alias pre zastavNaDráhe.
pokračujVDráhe
public void pokračujVDráhe()
Obnoví pohyb robota po aktuálnej dráhe. Ak sa robot práve
 nenachádza na dráhe, tak metóda nájde najbližší bod
 na dráhe a presunie ho tam.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
pokracujVDrahe
public void pokracujVDrahe()
 Alias pre pokračujVDráhe.
označKľúčovúFázuDráhy
public void označKľúčovúFázuDráhy(int fáza)
Označí zadanú fázu dráhy za kľúčovú. V kľúčových fázach je
 spúšťaná metóda vstupDoKľúčovejFázyDráhy(int)
 namiesto metódy kráčaniePoDráhe().
Parametre:
fáza – index fázy, ktorá má byť označená za kľúčovú
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
oznacKlucovuFazuDrahy
public void oznacKlucovuFazuDrahy(int fáza)
 Alias pre označKľúčovúFázuDráhy.
zrušKľúčovúFázuDráhy
public void zrušKľúčovúFázuDráhy(int fáza)
Zruší označenie zadanej fázy dráhy za kľúčové.
Parametre:
fáza – index kľúčovej fázy, ktorá má byť zrušená
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
zrusKlucovuFazuDrahy
public void zrusKlucovuFazuDrahy(int fáza)
 Alias pre zrušKľúčovúFázuDráhy.
označKľúčovúFázuDráhy
public void označKľúčovúFázuDráhy(Poloha poloha)
Označí takú fázu dráhy za kľúčovú, ktorej poloha je
 najbližšie k zadanej polohe. Pri vyhľadávaní vhodnej fázy
 na označenie sú brané do úvahy len tie fázy, ktoré nie sú
 označené a označená je potom taká fáza, ktorá ešte nebola
 označená a leží najbližšie k zadanej polohe. To znamená,
 že pri dostatočnom počte opakovaní pokusov o označenie by
 nakoniec boli označené všetky fázy dráhy.
 V kľúčových fázach je
 spúšťaná metóda vstupDoKľúčovejFázyDráhy(int)
 namiesto metódy kráčaniePoDráhe().
Parametre:
fáza – približná poloha fázy, ktorá má byť označená
     za kľúčovú
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
oznacKlucovuFazuDrahy
public void oznacKlucovuFazuDrahy(Poloha poloha)
 Alias pre označKľúčovúFázuDráhy.
zrušKľúčovúFázuDráhy
public void zrušKľúčovúFázuDráhy(Poloha poloha)
Zruší označenie takej fázy dráhy za kľúčové, ktorej poloha
 je najbližšie k zadanej polohe, pričom sú počas hľadania
 vhodnej fázy na zrušenie brané do úvahy len už označené
 fázy. To znamená, že ak jestvuje aspoň jedna kľúčová fáza
 v dráhe, tak s istotou nastane jedno zrušenie – tej
 označenej fázy, ktorá bude najbližšie k zadanej polohe.
Parametre:
fáza – približná poloha kľúčovej fázy, ktorá má byť
     zrušená
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
zrusKlucovuFazuDrahy
public void zrusKlucovuFazuDrahy(Poloha poloha)
 Alias pre zrušKľúčovúFázuDráhy.
označKľúčovúFázuDráhy
public void označKľúčovúFázuDráhy(Poloha poloha,
                                  double okruh)
Označí takú fázu dráhy za kľúčovú, ktorej poloha je
 najbližšie k zadanej polohe a v rámci zadaného okruhu.
 Pri vyhľadávaní vhodnej fázy na označenie sú brané do úvahy
 len tie fázy, ktoré nie sú označené a sú bližšie než
 zadaná maximálna vzdialenosť. Označená je potom taká fáza,
 ktorá ešte nebola označená a leží najbližšie k zadanej
 polohe. Ak taká fáza nejestvuje, tak nie je označená žiadna
 fáza. V kľúčových fázach je
 spúšťaná metóda vstupDoKľúčovejFázyDráhy(int)
 namiesto metódy kráčaniePoDráhe().
Parametre:
fáza – približná poloha fázy, ktorá má byť označená
     za kľúčovú
okruh – vonkajší polomer okruhu bodov, ktoré sú brané
     do úvahy
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
oznacKlucovuFazuDrahy
public void oznacKlucovuFazuDrahy(Poloha poloha,
                                  double okruh)
 Alias pre označKľúčovúFázuDráhy.
zrušKľúčovúFázuDráhy
public void zrušKľúčovúFázuDráhy(Poloha poloha,
                                 double okruh)
Zruší označenie takej fázy dráhy za kľúčové, ktorej poloha
 je najbližšie k zadanej polohe v rámci zadaného okruhu,
 pričom sú počas hľadania vhodnej fázy na zrušenie brané do
 úvahy len už označené fázy. To znamená, že z fáz v zadanom
 okruhu je zrušená tá, ktorá leží najbližšie k zadanej
 polohe. Ak taká fáza nejestvuje, nie je zrušená žiadna
 z fáz.
Parametre:
fáza – približná poloha kľúčovej fázy, ktorá má byť
     zrušená
okruh – vonkajší polomer okruhu bodov, ktoré sú brané
     do úvahy
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
zrusKlucovuFazuDrahy
public void zrusKlucovuFazuDrahy(Poloha poloha,
                                 double okruh)
 Alias pre zrušKľúčovúFázuDráhy.
kráčamPoDráhe
public boolean kráčamPoDráhe()
Metóda zistí, či sa robot práve nachádza v režime kráčania
 po dráhe. (Robot môže byť aj deaktivovaný, ale musí sa
 nachádzať v režime kráčania po dráhe.)
Návratová hodnota:
ak je robot v režime kráčania po dráhe, tak je
     návratová hodnota true
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
kracamPoDrahe
public boolean kracamPoDrahe()
 Alias pre kráčamPoDráhe.
fázaDráhy
public int fázaDráhy()
Zistí aktuálnu fázu pohybu robota po dráhe.
Návratová hodnota:
aktuálna fáza pohybu po dráhe – index prvku
     v zozname, ktorý určuje body dráhy
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
fazaDrahy
public int fazaDrahy()
 Alias pre fázaDráhy.
fázaDráhy
public void fázaDráhy(int nováFáza)
Zmení fázu pohybu robota po dráhe. Ak je hodnota novej fázy
 záporná, pohyb po dráhe je zastavený. Ak je hodnota kladná,
 robot sa presunie na bod s indexom novej fázy a pokračuje
 v pohybe po dráhe.
Parametre:
nováFáza – nová hodnota fázy pohybu robota po dráhe –
     nový index prvku v zozname, ktorý určuje body dráhy
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
fazaDrahy
public void fazaDrahy(int nováFáza)
 Alias pre fázaDráhy.
kráčaniePoDráhe
public void kráčaniePoDráhe()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 a je spúšťaná v pravidelnom časovom intervale počas pohybu
 robota po dráhe, okrem prípadov
 kľúčových fáz
 dráhy, kedy je namiesto tejto metódy spustená metóda
 vstupDoKľúčovejFázyDráhy. V režime pohybu robota po dráhe
 nahrádza táto metóda spolu s metódou
 vstupDoKľúčovejFázyDráhy reakciu aktivita().
Pozri tiež:
aktivita(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe(), 
koniecDráhy()
kracaniePoDrahe
public void kracaniePoDrahe()
 Alias pre kráčaniePoDráhe.
vstupDoKľúčovejFázyDráhy
public void vstupDoKľúčovejFázyDráhy(int fáza)
Táto metóda je predvolene prázdna. Je určená na
 prekrytie a je spúšťaná v kľúčových fázach počas
 pohybu robota po dráhe, kedy nahrádza volanie metódy
 kráčaniePoDráhe. V režime
 pohybu robota po dráhe nahrádza táto metóda spolu s metódou
 kráčaniePoDráhe reakciu
 aktivita().
Parametre:
fáza – aktuálne číslo fázy pohybu
Pozri tiež:
aktivita(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
státieNaDráhe(), 
koniecDráhy()
vstupDoKlucovejFazyDrahy
public void vstupDoKlucovejFazyDrahy(int fáza)
 Alias pre vstupDoKľúčovejFázyDráhy.
státieNaDráhe
public void státieNaDráhe()
Táto metóda je predvolene prázdna. Je určená na
 prekrytie a je spúšťaná v pravidelnom časovom
 intervale počas deaktivácie robota v režime pohybu
 po dráhe. V režime pohybu robota po dráhe nahrádza táto
 metóda reakciu pasivita().
Pozri tiež:
pasivita(), 
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
koniecDráhy()
statieNaDrahe
public void statieNaDrahe()
 Alias pre státieNaDráhe.
koniecDráhy
public void koniecDráhy()
Táto metóda je predvolene prázdna. Je určená na
 prekrytie a je spustená po dokončení pohybu robota
 po dráhe.
Pozri tiež:
vytvorDráhu(), 
vytvorDráhu(double), 
vytvorDráhu(Shape), 
vytvorDráhu(Shape, double), 
dráha(), 
dráha(Vector), 
obráťDráhu(), 
posuňDráhu(double, double), 
posuňDráhu(int), 
vytvorMapuSmerov(), 
vytvorMapuSmerov(double), 
vytvorMapuSmerov(Shape), 
vytvorMapuSmerov(Shape, double), 
mapaSmerov(), 
mapaSmerov(Vector), 
obráťMapuSmerov(), 
pootočMapuSmerov(double), 
posuňMapuSmerov(int), 
kráčajPoDráhe(), 
zastavNaDráhe(), 
pokračujVDráhe(), 
označKľúčovúFázuDráhy(int), 
zrušKľúčovúFázuDráhy(int), 
označKľúčovúFázuDráhy(Poloha), 
zrušKľúčovúFázuDráhy(Poloha), 
označKľúčovúFázuDráhy(Poloha, double), 
zrušKľúčovúFázuDráhy(Poloha, double), 
kráčamPoDráhe(), 
fázaDráhy(), 
fázaDráhy(int), 
kráčaniePoDráhe(), 
vstupDoKľúčovejFázyDráhy(int), 
státieNaDráhe()
koniecDrahy
public void koniecDrahy()
 Alias pre koniecDráhy.
pracuj
public void pracuj()
Táto metóda je automaticky spúšťaná časovačom. Tvorí model
 správania aktívne roboty
 a zároveň pravidelne spúšťa metódu aktivita pre aktívne roboty a pasivita pre pasívne roboty. Aktívny robot môže mať
 definovaný cieľ alebo
 trvanie aktivity (pozri aktivuj(trvanieAktivity). Na to, aby sa robot mohol
 pohybovať (a dostať sa do cieľa), musí mať definovanú
 hodnotu rýchlosti, prípadne
 zrýchlenia. Ďalšie atribúty ako
 maximálna
 rýchlosť, rýchlosť
 otáčania, zrýchlenie otáčania a maximálna rýchlosť
 otáčania sú nepovinné. Iba menia správanie robota pri
 pohybe, ktorý sa tým môže stať o niečo prirodzenejším.
 
 Poznámka: Prekrytím tejto metódy
 by sme mohli úplne prepracovať správanie robota – aktívneho
 aj neaktívneho, avšak odporúčame ponechať predvolené
 správanie a iba korigovať správanie robotov prepisovaním
 metód aktivita a pasivita.
vyzviRoboty
public void vyzviRoboty()
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia
 prijatieVýzvy,
 pričom autorom výzvy bude tento robot a hodnota argumentu
 kľúč bude rovná -1. Prvotné
 poradie robotov je určené poradím ich vytvorenia (čiže ak
 sme nijako neovplyvnili poradie robotov, je prvý vyzvaný
 ten robot, ktorý bol vytvorený ako prvý, to jest robot,
 ktorý je nakreslený pod všetkými ostatnými robotmi).
 Dodatočne môžeme poradie ovplyvniť volaním metód naVrch, naSpodok, vyššie, nižšie, pred
 a za.
 
 Poznámka: Ak je poradie robotov
 zmenené počas spracovania výzviev, dôjde z technických príčin
 k opätovnému spusteniu posielania výziev (inak povedané –
 posielanie výziev sa „reštartuje“). To znamená, že niektoré
 roboty budú vyzvané dva alebo viac ráz. Buďte preto opatrní
 so zmenami poradia v rámci spracovania výziev, aby ste
 nespôsobili vznik nekonečného cyklu… (Rovnaký efekt má
 prípadné vytvorenie nového robota, resp. ľubovoľnej
 inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nie
 je taký efektívny ako definícia vlastného zoznamu robotov (prípadne inštancií odvodených tried)
 a vykonanie hromadnej akcie s pomocou tohto zoznamu. Slúži
 predovšedkým na umožnenie hromadného spracovania bez
 nevyhnutnosti vytvárania takého zoznamu (napríklad pri
 malom počte robotov alebo predtým, než sa programátor
 podrobnejšie oboznámi s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Pozri tiež:
prijatieVýzvy(GRobot, int), 
vyzviRoboty(int), 
vyzviRoboty(int, boolean), 
Svet.vyzviRoboty()
vyzviRobotov
public void vyzviRobotov()
 Alias pre vyzviRoboty.
vyzviRoboty
public void vyzviRoboty(int kľúč)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy, pričom
 autorom výzvy bude tento robot. S pomocou argumentu
 kľúč môžeme odlišovať rôzne druhy výziev
 a ovplyvňovať tým správanie reakcie prijatieVýzvy. Prvotné
 poradie robotov je určené poradím ich vytvorenia (čiže ak
 sme nijako neovplyvnili poradie robotov, je prvý vyzvaný
 ten robot, ktorý bol vytvorený ako prvý, to jest robot,
 ktorý je nakreslený pod všetkými ostatnými robotmi).
 Dodatočne môžeme poradie ovplyvniť volaním metód naVrch, naSpodok, vyššie, nižšie, pred
 a za.
 
 Poznámka: Ak je poradie robotov
 zmenené počas spracovania výzviev, dôjde z technických príčin
 k opätovnému spusteniu posielania výziev (inak povedané –
 posielanie výziev sa „reštartuje“). To znamená, že niektoré
 roboty budú vyzvané dva alebo viac ráz. Buďte preto opatrní
 so zmenami poradia v rámci spracovania výziev, aby ste
 nespôsobili vznik nekonečného cyklu… (Rovnaký efekt má
 prípadné vytvorenie nového robota, resp. ľubovoľnej
 inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nie
 je taký efektívny ako definícia vlastného zoznamu robotov (prípadne inštancií odvodených tried)
 a vykonanie hromadnej akcie s pomocou tohto zoznamu. Slúži
 predovšedkým na umožnenie hromadného spracovania bez
 nevyhnutnosti vytvárania takého zoznamu (napríklad pri
 malom počte robotov alebo predtým, než sa programátor
 podrobnejšie oboznámi s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Parametre:
kľúč – celočíselná hodnota, ktorá je poslaná do
     reakcie prijatieVýzvy každého robota; takto je možné
     odlíšiť rôzne druhy výziev, vďaka čomu môžeme
     ovplyvniť správanie reakcie prijatieVýzvy
Pozri tiež:
prijatieVýzvy(GRobot, int), 
vyzviRoboty(), 
vyzviRoboty(int, boolean), 
Svet.vyzviRoboty(int)
vyzviRobotov
public void vyzviRobotov(int kľúč)
 Alias pre vyzviRoboty.
vyzviRoboty
public void vyzviRoboty(int kľúč,
                        boolean obrátene)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy, pričom
 autorom výzvy bude tento robot. S pomocou argumentu
 kľúč môžeme odlišovať rôzne druhy výziev
 a ovplyvňovať tým správanie reakcie prijatieVýzvy. Argument
 obrátene určuje smer spracovania. Ak je rovný
 true, zoznam robotov bude spracovaný od konca,
 to znamená, že prvý bude vyzvaný buď naposledy vytvorený
 robot, alebo robot aktuálne umiestnený na konci vnútorného
 zoznamu robotov. Záleží od toho, či sme dodatočne
 ovplyvňovali poradie robotov metódami naVrch, naSpodok, vyššie, nižšie, pred
 a za. Ak je hodnota argumentu
 obrátene rovná false, metóda sa správa
 rovnako ako vyzviRoboty(int).
 
 Poznámka: Ak je poradie robotov
 zmenené počas spracovania výzviev, dôjde z technických príčin
 k opätovnému spusteniu posielania výziev (inak povedané –
 posielanie výziev sa „reštartuje“). To znamená, že niektoré
 roboty budú vyzvané dva alebo viac ráz. Buďte preto opatrní
 so zmenami poradia v rámci spracovania výziev, aby ste
 nespôsobili vznik nekonečného cyklu… (Rovnaký efekt má
 prípadné vytvorenie nového robota, resp. ľubovoľnej
 inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nie
 je taký efektívny ako definícia vlastného zoznamu robotov (prípadne inštancií odvodených tried)
 a vykonanie hromadnej akcie s pomocou tohto zoznamu. Slúži
 predovšedkým na umožnenie hromadného spracovania bez
 nevyhnutnosti vytvárania takého zoznamu (napríklad pri
 malom počte robotov alebo predtým, než sa programátor
 podrobnejšie oboznámi s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Parametre:
kľúč – celočíselná hodnota, ktorá je poslaná do
     reakcie prijatieVýzvy každého robota; takto je možné
     odlíšiť rôzne druhy výziev, vďaka čomu môžeme
     ovplyvniť správanie reakcie prijatieVýzvy
obrátene – týmto argumentom môžeme ovplyvniť smer
     spracovania; true znamená spracovanie
     vnútorného zoznamu robotov od konca; false
     znamená rovnaký spôsob spracovania ako pri metóde
     vyzviRoboty(int)
Pozri tiež:
prijatieVýzvy(GRobot, int), 
vyzviRoboty(), 
vyzviRoboty(int), 
Svet.vyzviRoboty(int, boolean)
vyzviRobotov
public void vyzviRobotov(int kľúč,
                         boolean obrátene)
 Alias pre vyzviRoboty.
aktivita
public void aktivita()
Táto metóda je predvolene prázdna. Je automaticky spúšťaná
 metódou pracuj pri aktívnom robote. Jej
 prekrytím môžete upraviť správanie aktívneho robota.
 V režime pohybu robota po dráhe je táto metóda nahradená
 reakciami kráčaniePoDráhe()
 a vstupDoKľúčovejFázyDráhy(int).
 
 Príklad:
 
 Robot v tomto príklade kreslí šedý chuchvalec.
 V konštruktore je robot aktivovaný a nastavuje svoju farbu
 na šedú. Po aktivácii je až do ukončenia aplikácie
 neustále automaticky spúšťaná metóda aktivita,
 v ktorej robot náhodne mení smer a posúva sa o jeden a pol
 boda dopredu. Výsledný efekt je nekonečné kreslenie
 chuchvalca šedého vlákna…
 
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        farba(šedá);
        aktivuj();
    }
    @Override public void aktivita()
    {
        náhodnýSmer();
        dopredu(1.5);
    }
    public static void main(String[] args)
    {
        new HlavnáTrieda();
    }
}
 
 
 Výsledok:
 
 
 Ukážka možného výstupu
 náhodného kreslenia na zmenšenom plátne(robot i tak
 väčšinou veľmi rýchlo opustí plochu
 plátna).
Pozri tiež:
pasivita(), 
aktivácia(), 
deaktivácia(), 
spustenie(), 
zastavenie(), 
dosiahnutieCieľa(), 
kráčaniePoDráhe()
pasivita
public void pasivita()
Táto metóda je predvolene prázdna. Je automaticky spúšťaná
 metódou pracuj pri pasívnom robote. Jej
 prekrytím môžete upraviť správanie pasívneho robota.
 V režime pohybu robota po dráhe je táto metóda nahradená
 reakciou státieNaDráhe().
 
 Príklad:
 
 Príklad ukazuje implementáciu blikania robota v dvoch
 odtieňoch oranžovej farby.
 
 V tomto príklade musíme ručne spustiť časovač (pretože ten nie je
 spúšťaný automaticky a keďže ideme pracovať s pasívnym
 robotom, nepoužívame žiadny príkaz, ktorý spúšťa časovač
 automaticky). V dôsledku toho je v pravidelnom časovom
 intervale spúšťaná metóda pasivita, v ktorej je
 umiestnené jednoduché vetvenie spôsobujúce blikanie robota
 v dvoch odtieňoch oranžovej farby, čo má symbolizovať
 pohotovostný režim. Konštruktor má za úlohu iba
 inicializovať farbu robota na jeden z odtieňov oranžovej.
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        farba(oranžová);
        // Nastavíme predvolený vyplnený tvar robota a zväčšíme
        // jeho veľkosť, aby bol efekt lepšie viditeľný:
        predvolenýVyplnenýTvar();
        veľkosť(30);
    }
    @Override public void pasivita()
    {
        if (oranžová == farba())
            farba(tmavooranžová);
        else
            farba(oranžová);
    }
    public static void main(String[] args)
    {
        new HlavnáTrieda();
        Svet.spustiČasovač(0.5);
    }
}
 
 Výsledok:
 
 
 Výrez plochy s blikajúcim oranžovým
 robotom.
Pozri tiež:
aktivita(), 
aktivácia(), 
deaktivácia(), 
spustenie(), 
zastavenie(), 
dosiahnutieCieľa(), 
státieNaDráhe()
aktivácia
public void aktivácia()
Táto metóda je predvolene prázdna. Je automaticky spustená
 pri volaní metódy aktivuj (alebo jej
 „klonu“). Jej prekrytím môžete upraviť správanie robota pri
 aktivácii.
 
 Príklad:
 
 Tento príklad je podobný ako ten pri metóde spustenie. Oba sa vzájomne odlišujú
 v spôsobe aktivácie robota fungujúceho v úlohe strely a aj
 v dĺžke aktivity. Tento príklad otočí robot pri kliknutí
 myšou na pozíciu ukazovateľa myši a aktivuje ho na 10 tikov. Ide o klasickú aktiváciu (v zmysle
 vysvetlenia v opise metódy aktívny),
 preto sú prekryté metódy aktivácia a deaktivácia. Tie zariadia, že robot
 (strela) sa po aktivácii zobrazí a pri deaktivácii, naopak,
 skryje.
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        zdvihniPero();
        rýchlosť(10, false);
        skry();
    }
    @Override public void aktivácia()
    {
        zobraz();
    }
    @Override public void deaktivácia()
    {
        skry();
    }
    public static void main(String[] args)
    {
        final GRobot strela = new HlavnáTrieda();
        new ObsluhaUdalostí()
        {
            @Override public void klik()
            {
                strela.otočNaMyš();
                strela.aktivuj(10);
            }
        };
    }
}
Pozri tiež:
aktivita(), 
pasivita(), 
deaktivácia(), 
spustenie(), 
zastavenie(), 
dosiahnutieCieľa()
aktivacia
public void aktivacia()
 Alias pre aktivácia.
deaktivácia
public void deaktivácia()
Táto metóda je predvolene prázdna. Je automaticky spustená
 pri volaní metódy deaktivuj. Jej
 prekrytím môžete upraviť správanie robota pri deaktivácii.
 
 Príklad použitia tejto metódy je pri opise metódy
 aktivácia.
Pozri tiež:
aktivita(), 
pasivita(), 
aktivácia(), 
spustenie(), 
zastavenie(), 
dosiahnutieCieľa()
deaktivacia
public void deaktivacia()
 Alias pre deaktivácia.
spustenie
public void spustenie()
Táto metóda je predvolene prázdna. Je automaticky spustená
 pri volaní metódy spusti (alebo jej
 „klonu“). Jej prekrytím môžete upraviť správanie robota pri
 „spustení“ (čo je chápané ako druh akcie s individuálnym
 robotom, nie v zmysle spustenia aplikácie, ani nič podobné).
 
 Príklad:
 
 Tento príklad je podobný ako ten pri metóde aktivácia. Oba sa vzájomne odlišujú
 v spôsobe aktivácie robota fungujúceho v úlohe strely a aj
 v dĺžke aktivity. Tento príklad funguje na princípe
 sledovania cieľa. Pri kliknutí myšou je zahájené smerovanie
 robota (strely) do cieľa, pričom cieľom je pozícia myši
 v čase kliknutia. Ide o alternatívnu aktiváciu (v zmysle
 vysvetlenia v opise metódy aktívny),
 preto sú prekryté metódy spustenie a zastavenie. Tie zariadia, že robot (strela)
 sa po zahájení smerovania na cieľ zobrazí a po dosiahnutí
 cieľa, naopak, skryje.
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        zdvihniPero();
        rýchlosť(10, false);
        skry();
    }
    @Override public void spustenie()
    {
        zobraz();
    }
    @Override public void zastavenie()
    {
        skry();
    }
    public static void main(String[] args)
    {
        final GRobot strela = new HlavnáTrieda();
        new ObsluhaUdalostí()
        {
            @Override public void klik()
            {
                strela.cieľNaMyš(true);
            }
        };
    }
}
Pozri tiež:
aktivita(), 
pasivita(), 
aktivácia(), 
deaktivácia(), 
zastavenie(), 
dosiahnutieCieľa()
zastavenie
public void zastavenie()
Táto metóda je predvolene prázdna. Je automaticky spustená
 pri volaní metódy zastav. Jej prekrytím
 môžete upraviť správanie robota pri „zastavení“ (čo je
 chápané ako opak „spustenia“).
 
 Príklad použitia tejto metódy je pri opise metódy
 spustenie.
Pozri tiež:
aktivita(), 
pasivita(), 
aktivácia(), 
deaktivácia(), 
spustenie(), 
dosiahnutieCieľa()
zastaveniePosunu
public void zastaveniePosunu()
Táto metóda je predvolene prázdna. Je automaticky
 spustená pri volaní metódy zastavPosun po splnení podmienok, ktoré sú pri nej určené.
 Prekrytím tejto metódy môžete upraviť správanie robota pri
 zastavení posunu (čo je druh
 pohybu kolmý na aktuálny smer robota).
Pozri tiež:
zastavenie(), 
zastavPosun(), 
rýchlosťPosunu(), 
zrýchleniePosunu(), 
zastavPoSpomaleníPosunu()
dosiahnutieCieľa
public void dosiahnutieCieľa()
Táto metóda je predvolene prázdna. Je automaticky spustená
 metódou pracuj po dosiahnutí cieľa. Jej prekrytím môžete upraviť
 správanie robota pri dosiahnutí cieľa.
 
 Príklad:
 
 V tomto jednoduchom príklade robot pri každom kliknutí
 zamieri na pozíciu myši v čase kliknutia a po dosiahnutí
 stanoveného cieľa náhodne zmení veľkosť v rozmedzí 5 až 25.
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        zdvihniPero();
        rýchlosť(10, false);
        new ObsluhaUdalostí()
        {
            @Override public void klik()
            {
                cieľNaMyš(true);
            }
        };
    }
    @Override public void dosiahnutieCieľa()
    {
        veľkosť(Svet.náhodnéCeléČíslo(5, 25));
    }
    public static void main(String[] args)
    {
        new HlavnáTrieda();
    }
}
Pozri tiež:
aktivita(), 
pasivita(), 
aktivácia(), 
deaktivácia(), 
spustenie(), 
zastavenie()
dosiahnutieCiela
public void dosiahnutieCiela()
 Alias pre dosiahnutieCieľa.
zobrazenie
public void zobrazenie()
Táto metóda je predvolene prázdna. Je automaticky
 spustená pri zobrazení robota, napríklad počas konštrukcie
 robota, po volaní metódy zobraz (alebo
 jej „klonu“), prípadne po zmene viditeľnosti (to jest
 zobrazení) robota počas prechodu na domovskú pozíciu.
 Jej prekrytím sa dá upraviť správanie robota počas jeho
 zobrazenia.
 
 Príklad:
 
 V tomto príklade sú reakcie zobrazenie
 a skrytie využité na synchronizované
 zobrazovanie a skrývanie dvoch robotov, z ktorých jeden
 predstavuje podvozok a druhý delo tanku (z ktorých oboje
 môže mať samostatný smer). Smerovanie dela sa riadi
 jednoducho pohybom myši nad plátnom a na ovládanie podvozku
 tanku slúžia klávesy A, S, W,
 D. Na synchronizované zobrazovanie a skrývanie
 dvojice robotov slúžia medzerník a ľubovoľné tlačidlo
 myši.
 
 
import knižnica.*;
public class ZobrazenieRobota extends GRobot
{
    private static GRobot delo;
    private ZobrazenieRobota()
    {
        ohranič();
        zaoblenie(5);
        pomer(0.8);
        zdvihniPero();
        hrúbkaČiary(2.5);
        Svet.zbaľ();
        Svet.prekresli();
    }
    @Override public void kresliTvar()
    {
        obdĺžnik();
    }
    @Override public void zobrazenie()
    {
        delo.zobraz();
    }
    @Override public void skrytie()
    {
        delo.skry();
    }
    @Override public void stlačenieKlávesu()
    {
        switch (ÚdajeUdalostí.kláves())
        {
        case Kláves.VK_W: rýchlosť(10); break;
        case Kláves.VK_S: rýchlosť(-10); break;
        case Kláves.VK_A: rýchlosťOtáčania(10); break;
        case Kláves.VK_D: rýchlosťOtáčania(-10); break;
        case Kláves.MEDZERA: skry(); break;
        }
    }
    @Override public void uvoľnenieKlávesu()
    {
        switch (ÚdajeUdalostí.kláves())
        {
        case Kláves.VK_W: case Kláves.VK_S: rýchlosť(0); break;
        case Kláves.VK_A: case Kláves.VK_D: rýchlosťOtáčania(0); break;
        case Kláves.MEDZERA: zobraz(); break;
        }
    }
    @Override public void aktivita()
    {
        delo.skočNa(this);
    }
    @Override public void pohybMyši()
    {
        delo.otočNaMyš();
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        skry();
    }
    @Override public void uvoľnenieTlačidlaMyši()
    {
        zobraz();
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("ZobrazenieRobota.cfg");
        delo = new GRobot(500, 400);
        delo.vlastnýTvar(r -&gt; r.vpred());
        delo.hrúbkaČiary(5);
        delo.veľkosť(15);
        new ZobrazenieRobota();
    }
}
 
 
 Ukážka fungovania
 príkladu synchronizovaného zobrazenia a skrytia robotov
 (podvozku a dela tanku).
Pozri tiež:
skrytie()
skrytie
public void skrytie()
Táto metóda je predvolene prázdna. Je automaticky
 spustená pri skrytí robota, napríklad po volaní metódy
 skry alebo po zmene viditeľnosti (to jest
 skrytí) robota počas prechodu na domovskú pozíciu. Jej
 prekrytím sa dá upraviť správanie robota počas jeho
 skrytia.
 
 Príklad použitia tejto metódy je v opise metódy
 zobrazenie.
Pozri tiež:
zobrazenie()
prijatieVýzvy
public void prijatieVýzvy(GRobot autor,
                          int kľúč)
Táto metóda je predvolene prázdna. Je automaticky spustená
 pri vykonaní metódy Svet.vyzviRoboty(kľúč) alebo GRobot.vyzviRoboty(kľúč).
 Rozhodovanie o účele aktuálnej výzvy v tele tejto reakcie
 je možné určiť s pomocou hodnoty kľúča, ktorého hodnotu
 zadávame pri volaní metód Svet.vyzviRoboty(kľúč), GRobot.vyzviRoboty(kľúč).
 
 Tip: Parameter kľúč poskytuje
 potrebný základ k mechanizmu spracovania výziev. Širšie
 možnosti poskytuje parameter autor. Stačí si
 uvedomiť, že to nemusí byť nevyhnutne objekt typu
 GRobot, ale aj ľubovoľný objekt odvodeného
 údajového typu, ktorý môže obsahovať množstvo doplnkových
 údajov. Autora môžeme vždy spracovať s pomocou mechanizmu
 pretypovania. Pozri nasledujúci kód.
 
 
if (autor instanceof OdvodenýTyp)
{
    OdvodenýTyp odvodenáInštancia = (OdvodenýTyp)autor;
    // práca s údajmi odvodenej inštancie…
}
Parametre:
autor – obsahuje buď objekt, ktorý výzvu poslal
     (autora výzvy), alebo null ak išlo o výzvu
     zo strany sveta (Svet.vyzviRoboty(kľúč))
kľúč – hodnota prijímaná z metód
     Svet.vyzviRoboty(kľúč), GRobot.vyzviRoboty(kľúč)
Pozri tiež:
vyzviRoboty(), 
vyzviRoboty(int), 
vyzviRoboty(int, boolean), 
Svet.vyzviRoboty(), 
Svet.vyzviRoboty(int), 
Svet.vyzviRoboty(int, boolean)
prijatieVyzvy
public void prijatieVyzvy(GRobot autor,
                          int kľúč)
 Alias pre prijatieVýzvy.
mimoHraníc
public boolean mimoHraníc(Bod[] poleBodov,
                          double uhol)
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v niektorej z tried odvodených od robota. Je automaticky
 spúšťaná počas kontroly polohy robota v dôsledku aktivácie
 funkcie ohraničenia polohy robota pri jeho pohybe.
 
 Metóda prijme štvorprvkové pole bodov, ktoré opisuje
 situáciu v čase kolízie robota s niektorou z hraníc
 ohraničenia. Prvý bod poľa obsahuje súradnice robota pred
 začatím pohybu, druhý cieľové súradnice, na ktoré bude robot
 presunutý, ak táto metóda dovolí ďalšie spracovanie
 ohraničenia (návratovou hodnotou) a ďalšie dva body
 vymedzujú úsečku tej hranice ohraničenia, na ktorú robot
 narazil. Aktuálna poloha robota je presne tá, ktorá je mimo
 hraníc.
 
 Posledný parameter určuje orientáciu robota pred
 začatím pohybu (ak sa robot nepohyboval po oblúku, mala
 by byť zhodná s aktuálnou orientáciou robota).
 
 Návratová hodnota tejto reakcie určí, či má spracovanie
 pokračovať vnútorným mechanizmom triedy GRobot. Ak autor prekrytia určí, že nie (návratovou
 hodnotou false), tak cieľové hodnoty nebudú
 nastavené.
 
 Poznámka: Pole bodov je opisné
 a jeho akákoľvek zmena neovplyvní situáciu za hranicami
 tejto metódy. To znamená, že úpravy polôh bodov alebo
 zámena prvkov poľa nezmenia skutočné hodnoty polôh, ktoré
 odzrkadľujú.
 
 Keď zapneme spôsob spracovania ohraničenia ODRAZ a chceme, aby sa pri odraze korektne menil smer
 robota, môžeme na prepočet použiť nasledujúci kód umiestnený
 v rámci reakcie mimoHraníc:
 
 
@Override public boolean mimoHraníc(Bod[] poleBodov, double uhol)
{
    Bod priesečník = Svet.priesečníkÚsečiek(poleBodov[0],
        poloha(), poleBodov[2], poleBodov[3]);
    if (null != priesečník)
        smer(Svet.smer(priesečník, poleBodov[1]));
    return true;
}
 
 
 Grafické
 znázornenie situácie.
 
 
 Príklad:
 
 Tento príklad je implementáciou jednoduchej zábavky.
 Oplotené roboty sú naprogramovaní tak, aby sa každý z nich
 pohyboval vo svojom vymedzenom priestore. Roboty reagujú na
 kliknutie myšou, ale vždy len jeden z nich – ten, ktorý
 je takzvane dotknutý. Ak aktuálne dotknutý robot narazí
 na hranice svojho ohraničenia, posunie stav dotknutia
 nasledujúcemu robotu v poradí.
 
 
                                        import knižnica.*;
                                        public class OplotenéRoboty extends GRobot
                                        {
                                                // Statická premenná slúžiaca na detekciu kolízií priestorov ohraničenia
                                                // robotov.
                                                private static boolean kolíziaPolôh = false;
                                                // Statická premenná počítajúca vytvorené inštancie ohraničených robotov.
                                                private static int početRobotov = 0;
                                                // Statická premenná slúžiaca ako ukazovadlo práve dotknutého robota.
                                                private static int ukazovadloRobota = 0;
                                                // Inštančná premenná slúžiaca ako príznak dotknutia tohto robota.
                                                private boolean dotknutý = false;
                                                // Inštančná premenná slúžiaca na uchovanie indexu (poradia vytvorenia)
                                                // tohto robota.
                                                private int indexRobota;
                                                // Konštruktor – vykoná základné nastavenia tejto inštancie robota.
                                                private OplotenéRoboty()
                                                {
                                                        indexRobota = početRobotov++;
                                                        nájdiPolohu();
                                                        ohranič(100, 50, ODRAZ);
                                                        obdĺžnik(100, 50);
                                                        maximálnaRýchlosť(50);
                                                        zrýchlenie(1.25, false);
                                                        zdvihniPero();
                                                }
                                                // Vyhľadá polohu, ktorá nekoliduje so žiadnym vytvoreným robotom.
                                                private void nájdiPolohu()
                                                {
                                                        farba(šedá);
                                                        do
                                                        {
                                                                kolíziaPolôh = false;
                                                                // Zvolenie náhodnej polohy robota:
                                                                domov(
                                                                        Svet.náhodnéReálneČíslo(
                                                                                Svet.najmenšieX() + 110,
                                                                                Svet.najväčšieX() &#45; 110),
                                                                        Svet.náhodnéReálneČíslo(
                                                                                Svet.najmenšieY() + 60,
                                                                                Svet.najväčšieY() &#45; 60));
                                                                // Nakreslenie šedého obdĺžnika:
                                                                obdĺžnik(100, 50);
                                                                // Overenie kolízií:
                                                                vyzviRoboty(-2);
                                                        }
                                                        while (kolíziaPolôh);
                                                        farba(modrá);
                                                }
                                                // Viacúčelová reakcia na hromadnú výzvu vytvorených robotov.
                                                @Override public void prijatieVýzvy(GRobot autor, int kľúč)
                                                {
                                                        // Kladné kľúče slúžia na dotknutie požadovaného robota.
                                                        if (0 &lt;= kľúč)
                                                        {
                                                                dotknutý = indexRobota == kľúč % početRobotov;
                                                                if (dotknutý) farba(tyrkysová);
                                                                else farba(oranžová);
                                                        }
                                                        // Kľúč −2 je rezervovaný na hľadanie kolízií priestorov ohraničenia
                                                        // robotov.
                                                        else if (-2 == kľúč)
                                                        {
                                                                if (this != autor)
                                                                {
                                                                        if (bodVObdĺžniku(autor, 210, 110))
                                                                        {
                                                                                farba(červená);
                                                                                krúžok();
                                                                                kolíziaPolôh = true;
                                                                        }
                                                                        else
                                                                        {
                                                                                farba(zelená);
                                                                                krúžok();
                                                                        }
                                                                }
                                                        }
                                                        // Kľúč −3 je rezervovaný na vyplnenie priestoru ohraničenia tohto robota.
                                                        else if (-3 == kľúč)
                                                        {
                                                                domov();
                                                                farba(biela);
                                                                vyplňObdĺžnik(100, 50);
                                                        }
                                                        // Kľúč −2 je rezervovaný na nakreslenie orámovania priestoru ohraničenia
                                                        // tohto robota.
                                                        else if (-4 == kľúč)
                                                        {
                                                                domov();
                                                                farba(čierna);
                                                                kresliObdĺžnik(100, 50);
                                                        }
                                                }
                                                // Na kliknutie zareaguje len dotknutý robot a to stanovením nového cieľa
                                                // pohybu podľa polohy myši v čase kliknutia.
                                                @Override public void klik()
                                                {
                                                        if (dotknutý) cieľNaMyš();
                                                }
                                                // Reakcia na narazenie na hranice ohraničenia robota. Tento robot dokončí
                                                // svoj pohyb a s pomocou mechanizmu výzvy bude dotknutý ďalší robot v poradí.
                                                @Override public boolean mimoHraníc(Bod[] poleBodov, double uhol)
                                                {
                                                        Bod poloha = poloha();
                                                        Bod cieľ = poleBodov[1];
                                                        Svet.vyzviRoboty(++ukazovadloRobota);
                                                        poleBodov[1] = poloha;
                                                        Bod priesečník = Svet.priesečníkPriamok(poleBodov);
                                                        if (null != priesečník)
                                                        {
                                                                skočNa(priesečník);
                                                                otočNa(cieľ);
                                                                zrušCieľ(false);
                                                                zabrzdi();
                                                                return false;
                                                        }
                                                        return true;
                                                }
                                                // Hlavná metóda – vstupný bod aplikácie.
                                                public static void main(String... args)
                                                {
                                                        Svet.použiKonfiguráciu("OplotenéRoboty.cfg");
                                                        // Vytvorenie niekoľkých ohraničených robotov. Každý robot si nájde
                                                        // unikátnu polohu, ktorá nekoliduje s ostatnými robotmi. (Ak by bolo
                                                        // robotov príliš veľa, aplikácia sa z tohto cyklu nikdy nevymaní.)
                                                        for (int i = 0; i &lt; 7; ++i) new OplotenéRoboty();
                                                        // Zbalenie a vystredenie sveta pri prvom spustení aplikácie.
                                                        if (Svet.prvéSpustenie())
                                                        {
                                                                Svet.zbaľ();
                                                                Svet.vystreď();
                                                        }
                                                        // Vymazanie priebehu hľadania unikátnych polôh robotov, nakreslenie
                                                        // priestoru ohraničenia pre každý robot a dotknutie prvého robota
                                                        // v poradí.
                                                        podlaha.vymažGrafiku();
                                                        Svet.farbaPozadia(šedá);
                                                        Svet.vyzviRoboty(-3);
                                                        Svet.vyzviRoboty(-4);
                                                        Svet.vyzviRoboty(ukazovadloRobota);
                                                }
                                        }
                                        
 
 Výsledok:
 
 
 Výrez plochy zábavky
 s názvom „oplotené roboty.“
Parametre:
poleBodov – pole bodov obsahujúce súradnice bodov,
     ktoré súvisia s kolíziou s niektorou z hraníc
     ohraničenia – podrobnosti sú v opise vyššie
uhol – uhol (smer) robota pred začatím pohybu
Návratová hodnota:
true znamená, že spracovanie má
     pokračovať vnútorným mechanizmom triedy
     GRobot
mimoHranic
public boolean mimoHranic(Bod[] poleBodov,
                          double uhol)
 Alias pre mimoHraníc.
mimoHraníc
public void mimoHraníc()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v niektorej z tried odvodených od robota. Je automaticky
 spúšťaná po kontrole polohy robota v dôsledku aktivácie
 funkcie ohraničenia polohy robota pri jeho pohybe.
 
 Táto metóda slúži na stručné upozornenie na nedávne
 prekročenie hraníc robotom. Neposkytuje žiadne doplňujúce
 informácie o tom, ako táto udalosť vznikla. Metóda je
 zjednodušenou alternatívou metódy mimoHraníc(poleBodov, uhol), ktorá prijíma
 podrobnosti vo svojich parametroch a po ktorej je volaná,
 ak to uvedená metóda dovolí.
 
 To znamená, že táto metóda je spustená len v prípade,
 ak jej podrobnejšia verzia vrátila hodnotu true,
 čím povolila ďalšie spracovanie. To tiež znamená, že
 v čase spustenia tejto metódy je robot na cieľovom mieste
 určenom pravidlami ohraničenia.
 
 
mimoHranic
public void mimoHranic()
 Alias pre mimoHraníc.
zmenaPolohy
public boolean zmenaPolohy()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v niektorej z tried odvodených od robota. Je spúšťaná
 automaticky vždy pri zmene polohy
 robota (skákanie, rôzne pohyby, všetko, čo vedie ku zmene
 aktuálnej polohy…), okrem zmien vykonávaných v rámci procesu
 kreslenia vlastného tvaru.
 Návratová hodnota tejto metódy určuje, či smie byť zmena
 schválená. Ak nebude schválená, robot sa nepohne, resp.
 technicky sa vráti na svoju poslednú polohu.
 
 Príklad:
 
 
@Override public boolean zmenaPolohy()
{
    Svet.vypíšRiadok("Zmena polohy: ",
        poslednáPoloha(), " – " + poloha());
    Svet.vypíšRiadok("Zistené volanie: ",
        GRobotException.stackTraceToString(
            new Throwable()));
    return true;
}
Návratová hodnota:
určuje, či smie byť zmena schválená
zmenaUhla
public boolean zmenaUhla()
Táto metóda je predvolene prázdna. Je určená na prekrytie
 v niektorej z tried odvodených od robota. Je spúšťaná
 automaticky vždy pri zmene uhla robota
 (nastavovanie, otáčanie, všetko, čo vedie ku zmene
 orientácie…), okrem zmien vykonávaných v rámci procesu
 kreslenia vlastného tvaru.
 Návratová hodnota tejto metódy určuje, či smie byť zmena
 schválená. Ak nebude schválená, robot sa nepohne (neotočí),
 resp. technicky sa vráti naspäť na svoj posledný smer.
 
 Príklad:
 
 
@Override public boolean zmenaUhla()
{
    Svet.vypíšRiadok("Zmena uhla: ",
        poslednýUhol(), " – " + uhol());
    Svet.vypíšRiadok("Zistené volanie: ",
        GRobotException.stackTraceToString(
            new Throwable()));
    return true;
}
Návratová hodnota:
určuje, či smie byť zmena schválená
tik
public void tik()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.tik(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
klik
public void klik()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.klik(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
voľbaPoložkyPonuky
public void voľbaPoložkyPonuky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.voľbaPoložkyPonuky(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
volbaPolozkyPonuky
public void volbaPolozkyPonuky()
 Alias pre voľbaPoložkyPonuky.
voľbaKontextovejPoložky
public void voľbaKontextovejPoložky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.voľbaKontextovejPoložky(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
volbaKontextovejPolozky
public void volbaKontextovejPolozky()
 Alias pre voľbaKontextovejPoložky.
voľbaTlačidla
public void voľbaTlačidla()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.voľbaTlačidla(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
volbaTlacidla
public void volbaTlacidla()
 Alias pre voľbaTlačidla.
zmenaPosunuLišty
public void zmenaPosunuLišty()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.zmenaPosunuLišty().
zmenaPosunuListy
public void zmenaPosunuListy()
 Alias pre zmenaPosunuLišty.
voľbaSystémovejIkony
public void voľbaSystémovejIkony()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.voľbaSystémovejIkony().
volbaSystemovejIkony
public void volbaSystemovejIkony()
 Alias pre voľbaSystémovejIkony.
voľbaSystémovejPoložky
public void voľbaSystémovejPoložky()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.voľbaSystémovejPoložky().
volbaSystemovejPolozky
public void volbaSystemovejPolozky()
 Alias pre voľbaSystémovejPoložky.
vymazanie
public void vymazanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.vymazanie(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
prekreslenie
public void prekreslenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.prekreslenie(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
dokreslenie
public void dokreslenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.dokreslenie(), ktorá
 je historicky staršia (preto mohla nájsť širšie použitie).
zobrazenieOkna
public void zobrazenieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.zobrazenieOkna().
skrytieOkna
public void skrytieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.skrytieOkna().
presunutieOkna
public void presunutieOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.presunutieOkna(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
zmenaVeľkostiOkna
public void zmenaVeľkostiOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.zmenaVeľkostiOkna(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
zmenaVelkostiOkna
public void zmenaVelkostiOkna()
 Alias pre zmenaVeľkostiOkna.
aktiváciaOkna
public void aktiváciaOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.aktiváciaOkna(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
aktivaciaOkna
public void aktivaciaOkna()
 Alias pre aktiváciaOkna.
deaktiváciaOkna
public void deaktiváciaOkna()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.deaktiváciaOkna(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
deaktivaciaOkna
public void deaktivaciaOkna()
 Alias pre deaktiváciaOkna.
maximalizovanie
public void maximalizovanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.maximalizovanie().
minimalizovanie
public void minimalizovanie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.minimalizovanie().
obnovenie
public void obnovenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.obnovenie().
otvorenie
public void otvorenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.otvorenie().
zavretie
public boolean zavretie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.zavretie().
zatvorenie
public boolean zatvorenie()
 Alias pre zavretie.
ukončenie
public void ukončenie()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania metódy ObsluhaUdalostí.ukončenie(), ktorá je historicky staršia (preto
 mohla nájsť širšie použitie).
 
 Priorita spúšťania tejto obsluhy udalosti v prekrytých
 metódach robota a v obsluhe udalostí je upravená tak, aby
 bola udalosť v obsluhe udalostí spustená pred automatickým
 uložením konfigurácie a udalosti v robotoch po ňom.
ukoncenie
public void ukoncenie()
 Alias pre ukončenie.
potvrdenieÚdajov
public void potvrdenieÚdajov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.potvrdenieÚdajov(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
potvrdenieUdajov
public void potvrdenieUdajov()
 Alias pre potvrdenieÚdajov.
potvrdenieVstupu
public void potvrdenieVstupu()
 Alias pre potvrdenieÚdajov.
spracovaniePríkazu
public void spracovaniePríkazu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.spracovaniePríkazu(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
spracovaniePrikazu
public void spracovaniePrikazu()
 Alias pre spracovaniePríkazu.
zrušenieÚdajov
public void zrušenieÚdajov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.zrušenieÚdajov(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
zrusenieUdajov
public void zrusenieUdajov()
 Alias pre zrušenieÚdajov.
zrušenieVstupu
public void zrušenieVstupu()
 Alias pre zrušenieÚdajov.
zrusenieVstupu
public void zrusenieVstupu()
 Alias pre zrušenieÚdajov.
spracujRiadokVstupu
public void spracujRiadokVstupu(String riadokVstupu)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania rovnomennej metódy ObsluhaUdalostí.spracujRiadokVstupu(riadokVstupu).
Parametre:
riadokVstupu – riadok údajov prijatých zo
     štandardného vstupu – pozri aj metódu Svet.aktivujŠtandardnýVstup()
koniecVstupu
public void koniecVstupu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania rovnomennej metódy ObsluhaUdalostí.koniecVstupu().
vzniklaChyba
public void vzniklaChyba(GRobotException.Chyba chyba)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom
 fungovania rovnomennej metódy ObsluhaUdalostí.vzniklaChyba(chyba).
stlačenieTlačidlaMyši
public void stlačenieTlačidlaMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.stlačenieTlačidlaMyši(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
stlacenieTlacidlaMysi
public void stlacenieTlacidlaMysi()
 Alias pre stlačenieTlačidlaMyši.
uvoľnenieTlačidlaMyši
public void uvoľnenieTlačidlaMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.uvoľnenieTlačidlaMyši(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
uvolnenieTlacidlaMysi
public void uvolnenieTlacidlaMysi()
 Alias pre uvoľnenieTlačidlaMyši.
pohybMyši
public void pohybMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.pohybMyši(), ktorá je
 historicky staršia (preto mohla nájsť širšie použitie).
pohybMysi
public void pohybMysi()
 Alias pre pohybMyši.
ťahanieMyšou
public void ťahanieMyšou()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.ťahanieMyšou(), ktorá
 je historicky staršia (preto mohla nájsť širšie použitie).
tahanieMysou
public void tahanieMysou()
 Alias pre ťahanieMyšou.
rolovanieKolieskomMyši
public void rolovanieKolieskomMyši()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.rolovanieKolieskomMyši(), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
rolovanieKolieskomMysi
public void rolovanieKolieskomMysi()
 Alias pre rolovanieKolieskomMyši.
stlačenieKlávesu
public void stlačenieKlávesu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.stlačenieKlávesu(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
stlacenieKlavesu
public void stlacenieKlavesu()
 Alias pre stlačenieKlávesu.
uvoľnenieKlávesu
public void uvoľnenieKlávesu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.uvoľnenieKlávesu(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
uvolnenieKlavesu
public void uvolnenieKlavesu()
 Alias pre uvoľnenieKlávesu.
zadanieZnaku
public void zadanieZnaku()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.zadanieZnaku(), ktorá
 je historicky staršia (preto mohla nájsť širšie použitie).
klávesováSkratka
public void klávesováSkratka()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.klávesováSkratka().
klavesovaSkratka
public void klavesovaSkratka()
 Alias pre klávesováSkratka.
ťahanieSúborov
public void ťahanieSúborov()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.ťahanieSúborov().
tahanieSuborov
public void tahanieSuborov()
 Alias pre ťahanieSúborov.
pustenieSúboru
public void pustenieSúboru(String súbor)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.pustenieSúboru().
Parametre:
súbor – úplná cesta a meno súboru
pustenieSuboru
public void pustenieSuboru(String súbor)
 Alias pre pustenieSúboru.
farbaAktívnehoSlova
public Color farbaAktívnehoSlova(String slovo)
Táto metóda je predvolene prázdna, resp. predvolene vracia
 hodnotu null. Je určená na prekrytie v niektorej
 z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.farbaAktívnehoSlova().
Parametre:
slovo – identifikátor aktívneho slova vnútornej konzoly
Návratová hodnota:
nová farba aktívneho slova alebo null
Pozri tiež:
Plátno.vypíšAktívneSlovo(String, Object[])
farbaAktivnehoSlova
public Color farbaAktivnehoSlova(String slovo)
 Alias pre farbaAktívnehoSlova.
aktiváciaOdkazu
public void aktiváciaOdkazu()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.aktiváciaOdkazu(),
 ktorá je historicky staršia (preto mohla nájsť širšie
 použitie).
aktivaciaOdkazu
public void aktivaciaOdkazu()
 Alias pre aktiváciaOdkazu.
konfiguráciaZmenená
public boolean konfiguráciaZmenená()
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.konfiguráciaZmenená(), ktorá je historicky staršia
 (preto mohla nájsť širšie použitie).
 
 Upozornenie: Pri prekrývaní
 tejto reakcie majte na pamäti, že nie je garantované jej
 automatické vykonanie pri ukončovaní aplikácie (ak vyššia
 vrstva zistí, že konfigurácia bola zmenená, tak ďalej
 nevyšetruje, či ju treba, alebo netreba ukladať
 a automaticky pristúpi k procesu uloženia konfigurácie).
 Vložte do do tela tejto reakcie len taký kód, ktorý rýchlo
 overí, či nastali nejaké zmeny v konfigurácii, ktoré
 treba uložiť a vráti túto informáciu vyššej vrstve.
Pozri tiež:
Svet.použiKonfiguráciu()
konfiguraciaZmenena
public boolean konfiguraciaZmenena()
 Alias pre konfiguráciaZmenená.
čítajKonfiguráciu
public void čítajKonfiguráciu(Súbor súbor)
                       throws IOException
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.čítajKonfiguráciu(súbor), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
Parametre:
súbor – inštancia triedy Súbor
     reprezentujúca otvorený konfiguračný súbor pripravený
     na čítanie údajov
Výnimky:
IOException – ak vznikla chyba vo
     vstupno-výstupnej operácii
citajKonfiguraciu
public void citajKonfiguraciu(Súbor subor)
                       throws IOException
 Alias pre čítajKonfiguráciu.
Výnimky:
IOException
zapíšKonfiguráciu
public void zapíšKonfiguráciu(Súbor súbor)
                       throws IOException
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je totožný s opisom fungovania
 metódy ObsluhaUdalostí.zapíšKonfiguráciu(súbor), ktorá je historicky
 staršia (preto mohla nájsť širšie použitie).
Parametre:
súbor – inštancia triedy Súbor
     reprezentujúca otvorený konfiguračný súbor pripravený
     na zápis údajov
Výnimky:
IOException – ak vznikla chyba vo
     vstupno-výstupnej operácii
zapisKonfiguraciu
public void zapisKonfiguraciu(Súbor subor)
                       throws IOException
 Alias pre zapíšKonfiguráciu.
Výnimky:
IOException
sekvencia
public void sekvencia(int kódSpracovania,
                      Object zdroj,
                      Object cieľ,
                      long stav,
                      long celkovo)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 V podstate je reakciou na udalosť, ktorá súvisí s časovo
 náročným spracovaním údajov počas práce s pevným diskom
 (pozri aj ObsluhaUdalostí.sekvencia(kódSpracovania, zdroj, cieľ, stav,
 celkovo)), napríklad s čítaním a zápisom
 sekvencie PNG súborov (pozri triedu Obrázok
 a jej metódy čítaj(súbor)
 a ulož(súbor,
 prepísať)) alebo kopírovaním súborov a podobne. Typ udalosti, ktorá
 spôsobila spustenie tejto reakcie je určený prvým
 parametrom – kódSpracovania. Ostatné parametre sú
 naplnené podľa ich relevantnosti.
Parametre:
kódSpracovania – obsahuje kód činnosti, ktorá
     spôsobila vznik tejto udalosti; aktuálne platné kódy
     sú: ČÍTANIE_PNG_SEKVENCIE,
     CHYBA_ČÍTANIA_PNG_SEKVENCIE,
     ZÁPIS_PNG_SEKVENCIE,
     ČÍTANIE_GIF_ANIMÁCIE,
     ZÁPIS_GIF_ANIMÁCIE,
     KOPÍROVANIE_SÚBOROV
     PRIPÁJANIE_SÚBOROV,
     POROVNANIE_SÚBOROV,
     ODOVZDANIE_ÚDAJOV
     a PREVZATIE_ÚDAJOV
zdroj – objekt súvisiaci so zdrojom alebo null; napríklad v prípade kopírovania súborov
     je to reťazec s názvom zdrojového
     súboru, v prípade zápisu PNG sekvencie je to
     obrázkový objekt so
     zdrojovou snímkou animácie a podobne
cieľ – objekt súvisiaci s cieľom alebo null; napríklad pri kopírovaní súborov je to
     reťazec s názvom cieľového súboru;
     v prípade čítania PNG sekvencie je to obrázkový objekt s cieľovou snímkou
     animácie (čiže tou, do ktorej sú ukladané prečítané
     údaje) a podobne
stav – hodnota vyjadrujúca aktuálne spracovaný objem
     údajov alebo -1, ak táto hodnota nie je
     známa alebo je irelevantná; môže to byť počet
     spracovaných bajtov, poradové číslo snímky a podobne
celkovo – hodnota vyjadrujúca celkový objem údajov,
     ktorý má byť spracovaný alebo -1, ak táto
     hodnota nie je známa alebo je irelevantná; môže to byť
     veľkosť súboru, celkový počet snímok a podobne
zastavenieAnimácie
public void zastavenieAnimácie(Obrázok obrázok)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je úplne totožný s opisom
 fungovania metódy ObsluhaUdalostí.zastavenieAnimácie(súbor). V skratke – reakcia
 je spustená pri zastavení prehrávania animácie obrázka,
 čo môže byť iniciované automaticky (pozri aj metódu
 obrázka zastav) alebo na podnet
 používateľa (programátora).
Parametre:
obrázok – inštancia obrázka, ktorého prehrávanie bolo
     zastavené
zastavenieAnimacie
public void zastavenieAnimacie(Obrázok obrázok)
 Alias pre zastavenieAnimácie.
ukončenieProcesu
public void ukončenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                             int návratovýKód)
Táto metóda je predvolene prázdna a je určená na
 prekrytie v niektorej z tried odvodených od robota.
 
 Opis fungovania tejto metódy je úplne totožný s opisom
 fungovania metódy ObsluhaUdalostí.ukončenieProcesu(príkazovýRiadok,
 návratovýKód). V skratke – reakcia je spustená pri
 ukončenú procesu, ktorý spustila inštancia príkazového
 riadka.
Parametre:
príkazovýRiadok – inštancia príkazového riadka,
     ktorá proces spustila
návratovýKód – kód, ktorý vrátil externý proces
     pri ukončení
ukoncenieProcesu
public void ukoncenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                             int návratovýKód)
 Alias pre ukončenieProcesu.
vymažPôsobisko
public void vymažPôsobisko()
Vymaže pôsobisko, čo je oblasť obdĺžnika, v rámci ktorého
 robot kreslil od posledného vymazania pôsobiska alebo od
 posledného použitia niektorej z metód domov.
 Pôsobisko sa po vymazaní vždy začína rozširovať od aktuálnych
 súradníc robota smerom von.
Pozri tiež:
domov(), 
pôsobisko(), 
pôsobisko(Shape), 
pôsobisko(Poloha), 
kresliPôsobisko(), 
kresliPôsobisko(boolean), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
vymazPosobisko
public void vymazPosobisko()
 Alias pre vymažPôsobisko.
pôsobisko
public Rectangle2D pôsobisko()
Umožňuje získať tvar (čo zahŕňa jeho rozmery a polohu)
 pôsobiska v objekte typu Rectangle2D.
 Viac informácií o pôsobisku nájdete napríklad v opise metód
 vymažPôsobisko,
 pôsobisko,
 kresliPôsobisko a tak ďalej.
Návratová hodnota:
obdĺžnik typu Rectangle2D, ktorý
     reprezentuje aktuálne pôsobisko tohto robota
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(Shape), 
pôsobisko(Poloha), 
kresliPôsobisko(), 
kresliPôsobisko(boolean), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
posobisko
public Rectangle2D posobisko()
 Alias pre pôsobisko.
pôsobisko
public void pôsobisko(Shape tvar)
Táto metóda umožňuje rozšíriť pôsobisko (pozri napríklad metódu
 vymažPôsobisko) o rozmery zadaného
 tvaru. Pôsobisko je vždy automaticky aktualizované počas
 kreslenia a pečiatkovania robota, ale v niektorých prípadoch
 môže byť užitočné rozšíriť pôsobisko o tvar, ktorý robot priamo
 nenakreslil. Napríklad o tvar, ktorý bol nakreslený na plátno
 metódou podlaha.kresli(…), čo je
 typ kreslenia, za ktoré nie je zodpovedný priamo robot. Pri
 kreslení sú len použité jeho vlastnosti, robot je teda iba
 využitý ako referencia, nič iné. Preto sa pri tomto type
 kreslenia pôsobisko nerozširuje automaticky. Takých metód je
 v rámci všetkých tried programovacieho rámca viac.
Parametre:
tvar – tvar, ktorého rozmery budú započítané do pôsobiska
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(), 
pôsobisko(Poloha), 
kresliPôsobisko(), 
kresliPôsobisko(boolean), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
posobisko
public void posobisko(Shape tvar)
 Alias pre pôsobisko.
pôsobisko
public void pôsobisko(Poloha bod)
Táto metóda umožňuje rozšíriť pôsobisko tak, aby obsahovalo
 zadaný bod. Pre viac informácií pozri metódu
 pôsobisko.
Parametre:
bod – bod, ktorého súradnice budú započítané do pôsobiska
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(), 
pôsobisko(Shape), 
kresliPôsobisko(), 
kresliPôsobisko(boolean), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
posobisko
public void posobisko(Poloha bod)
 Alias pre pôsobisko.
kresliPôsobisko
public void kresliPôsobisko()
Zvýrazní oblasť obdĺžnika – pôsobisko, v rámci ktorého robot
 kreslil od posledného vymazania
 pôsobiska alebo od posledného použitia niektorej
 z metód domov. Pôsobisko je použiteľné
 napríklad s metódami myšVPôsobisku
 alebo bodVPôsobisku.
 
 Pôsobisko je rozširované dynamicky – pri každom kreslení
 aktuálnym robotom, sú porovnané hranice pôsobiska so
 súradnicami a rozmermi kresleného útvaru a podľa nich je
 upravená aktuálna veľkosť pôsobiska. Pôsobisko je možné vymazať
 buď volaním metódy vymažPôsobisko,
 alebo použitím niektorej z metód domov.
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(), 
pôsobisko(Shape), 
pôsobisko(Poloha), 
kresliPôsobisko(boolean), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
kresliPosobisko
public void kresliPosobisko()
 Alias pre kresliPôsobisko.
kresliPôsobisko
public void kresliPôsobisko(boolean ánoNie)
Zapne alebo vypne kreslenie tzv. pôsobiska – oblasti, v rámci
 ktorej robot kreslil od posledného
 vymazania pôsobiska alebo od
 posledného použitia niektorej z metód domov.
 Na zíkanie ďalších informácií pozri metódy
 nekresliPôsobisko,
 kresliPôsobisko atď.
Parametre:
ánoNie – ak je zadaná hodnota true, kreslenie
     (zvýrazňovanie) pôsobiska bude zapnuté, inak bude vypnuté
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(), 
pôsobisko(Shape), 
pôsobisko(Poloha), 
kresliPôsobisko(), 
nekresliPôsobisko(), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
kresliPosobisko
public void kresliPosobisko(boolean ánoNie)
 Alias pre kresliPôsobisko.
nekresliPôsobisko
public void nekresliPôsobisko()
Skryje zvýraznenie oblasti pôsobiska, ktoré bolo zapnuté
 metódou kresliPôsobisko.
Pozri tiež:
domov(), 
vymažPôsobisko(), 
pôsobisko(), 
pôsobisko(Shape), 
pôsobisko(Poloha), 
kresliPôsobisko(), 
kresliPôsobisko(boolean), 
bodVPôsobisku(double, double), 
bodVPôsobisku(Poloha), 
myšVPôsobisku()
nekresliPosobisko
public void nekresliPosobisko()
 Alias pre nekresliPôsobisko.
bodVPôsobisku
public boolean bodVPôsobisku(double súradnicaBoduX,
                             double súradnicaBoduY)
Zistí, či sa aktuálne súradnice zadaného bodu nachádzajú
 v oblasti obdĺžnika, v rámci ktorého bolo zaznamenané
 kreslenie aktuálnym robotom. Tento obdĺžnik nazývame
 pôsobisko. Nasledujúca metóda dovoľuje namiesto súradníc bodu
 použiť objekt:
 bodVPôsobisku(Poloha
 objekt).
 
 Pôsobisko je rozširované dynamicky – pri každom kreslení
 aktuálnym robotom, sú porovnané hranice pôsobiska so
 súradnicami a rozmermi kresleného útvaru a podľa nich je
 upravená aktuálna veľkosť pôsobiska. Pri použití niektorej
 z metód domov, je pôsobisko zmenšené na
 nulu.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
domov(), 
vymažPôsobisko(), 
kresliPôsobisko(), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVPosobisku
public boolean bodVPosobisku(double súradnicaBoduX,
                             double súradnicaBoduY)
 Alias pre bodVPôsobisku.
bodVPôsobisku
public boolean bodVPôsobisku(Poloha objekt)
Funguje rovnako ako metóda bodVPôsobisku(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného robota…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
domov(), 
vymažPôsobisko(), 
kresliPôsobisko(), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVPosobisku
public boolean bodVPosobisku(Poloha objekt)
 Alias pre bodVPôsobisku.
myšVPôsobisku
public boolean myšVPôsobisku()
Zistí, či sa aktuálne súradnice myši nachádzajú v oblasti
 obdĺžnika, v rámci ktorého bolo zaznamenané kreslenie
 aktuálnym robotom. Tento obdĺžnik nazývame pôsobisko.
 
 Pôsobisko je rozširované dynamicky – pri každom kreslení
 aktuálnym robotom, sú porovnané hranice pôsobiska so
 súradnicami a rozmermi kresleného útvaru a podľa nich je
 upravená aktuálna veľkosť pôsobiska. Pri použití niektorej
 z metód domov, je pôsobisko zmenšené na
 nulu.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
domov(), 
vymažPôsobisko(), 
kresliPôsobisko(), 
myšVCeste(), 
myšVElipse(double, double), 
myšVKruhu(double), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVOblasti(Area), 
myšVKruhu()
mysVPosobisku
public boolean mysVPosobisku()
 Alias pre myšVPôsobisku.
spôsobOhraničenia
public int spôsobOhraničenia()
Táto metóda vracia aktuálny spôsob ohraničenia robota pri jeho
 pohybe: ODRAZ, PLOT, PRETOČ alebo ŽIADNE. Podrobnosti o ohraničení
 sú v opise metódy ohranič(vľavo, dole, vpravo, hore,
 spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
sposobOhranicenia
public int sposobOhranicenia()
 Alias pre spôsobOhraničenia.
hraniceOhraničenia
public double[] hraniceOhraničenia()
Táto metóda vráti pole hraníc alebo hodnotu null.
 Ak je ohraničenie aktívne, tak táto metóda vracia reálnočíselné
 pole s aktuálnymi pevnými hranicami ohraničenia, ktoré boli
 vypočítané podľa polohy robota a zadaných vzdialeností pri
 aktivácii ohraničenia. Hranice nasledujú v poradí: ľavá,
 dolná, pravá a horná. Ak nie je ohraničenie aktívne, tak táto
 metóda vracia hodnotu null.
Návratová hodnota:
reálnočíselné pole s aktuálnymi pevnými hranicami
     ohraničenia alebo hodnota null
hraniceOhranicenia
public double[] hraniceOhranicenia()
 Alias pre hraniceOhraničenia.
vypniOhraničenie
public void vypniOhraničenie()
Dočasne vypne ohraničenie robota, ak je zapnuté. To znamená,
 že volanie tejto metódy nemá zmysel, ak je ohraničenie
 vypnuté.
Pozri tiež:
ohranič(double, double, double, double, int), 
zapniOhraničenie()
vypniOhranicenie
public void vypniOhranicenie()
 Alias pre vypniOhraničenie.
zapniOhraničenie
public void zapniOhraničenie()
Opätovne zapne ohraničenie robota, ak bolo predtým aktívne, ale
 bolo vypnuté metódou vypniOhraničenie. To znamená, že volanie tejto metódy nemá
 zmysel buď ak je ohraničenie aktívne, alebo ak nebolo predtým
 vypnuté metódou vypniOhraničenie.
Pozri tiež:
ohranič(double, double, double, double, int), 
vypniOhraničenie()
zapniOhranicenie
public void zapniOhranicenie()
 Alias pre zapniOhraničenie.
ohranič
public void ohranič(double ľaváHranica,
                    double dolnáHranica,
                    double praváHranica,
                    double hornáHranica,
                    int spôsob)
Zapne alebo vypne kontrolu polohy robota počas jeho pohybu
 prostredníctvom určenia vzdialenosti štyroch hraníc od aktuálnej
 polohy robota a spôsobu ohraničenia. Prvé štyri parametre určujú
 vzdialenosti ohraničenia od aktuálnej polohy robota a posledný
 parameter určuje spôsob kontroly polohy.
 
 Rámec podporuje tri spôsoby kontroly. Všetky tri boli
 implementované s dôrazom na výpočtovú jednoduchosť. Dôsledkom
 tohto prístupu je to, že každý zo spôsobov garantuje iba
 správnosť cieľovej polohy, nie fyzikálnu správnosť trasy, po
 ktorej sa do nej robot dostane. V nasledujúcich troch krátkych
 sekciách opíšeme, ako jednotlivé spôsoby fungujú.
 
  
 
 Pretočenie (predvolený spôsob)
 
 Pretočenie je najpriamočiarejší (a zároveň pre iné verzie
 tejto metódy predvolený) spôsob obmedzenia priestoru pohybu
 robota. Robot sa po prekročení niektorého z okrajov presunie
 k protiľahlému okraju (jeho poloha sa pretočí) a pokračuje
 v pohybe týmto spôsobom až do zastavenia.
 
 
 
 
 Spôsob pohybu robota pri jednom
 pretočení sa – cez jeden okraj ohraničenia(texty
 na tomto obrázku vysvetľujú spôsob označenia počiatočnej polohy
 robota).
 Dvojnásobné pretočenie
 robota(čiara úplne vpravo je stredná časť jeho
 cesty).
 
 
 Oplotenie
 
 Oplotenie obmedzuje pohyb robota tak, aby jeho cieľová poloha
 ležala čo najbližšie k miestu, do ktorého by prišiel, keby jeho
 pohyb nebol obmedzovaný. Tento pohyb sa podobá situácii, v ktorej
 by postavička reprezentovaná robotom kĺzala po hranách
 ohraničenia tak, ako keby jej v pohybe bránil nejaký múr, stena
 alebo plot – z čoho je odvodený názov tohto spôsobu obmedzenia
 pohybu robota.
 
 
 
 
 Kontakt s jednou hranou
 ohraničenia.
 Kontakt s dvomi hranami
 ohraničenia.
 
 
 Odrazenie
 
 Tento spôsob spracovania je ekvivalentný situácii, v ktorej
 by sa postavička reprezentovaná robotom odrážala od stien
 ohraničenia až do zastavenia. Garantovaná je len cieľová poloha,
 nie korektnosť dráhy pohybu. Robot tiež pri odrážaní sa nemení
 smer (v zmysle svojej orientácie – aktuálneho uhla pootočenia).
 
 
 
 
 Odrazenie sa od jedného okraja.
 Viacnásobné odrazenie sa.
 
 
 Keďže priorita pri implementácii (všetkých spôsobov
 ohraničenia, nielen tohto) bola kladená na výpočtovú jednoduchosť,
 nie je ani pri jednom spôsobe garantované, že zaznamenaná dráha
 nebude obsahovať body za hranicami ohraničenia priestoru pohybu
 robota, garantovaná je len cieľová poloha. Tá pri tomto spôsobe
 ohraničenia zodpovedá miestu, ktoré by robot dosiahol pri
 odrážaní sa od stien ohraničenia pri zachovaní celkovej dĺžky
 dráhy pohybu, ale jeho skutočná (matematicky zjednodušená) dráha
 nezodpovedá fyzikálne korektnému záznamu dráhy pri takomto
 odrážaní sa.
 
 Rozdiely ukazujú nasledujúce obrázky:
 
 
 
 
 Porovnanie fyzikálne
 správnych odrazení (zelené čiary) so skutočnými výpočtovo menej
 náročnými dráhami robota (červené čiary)(všimnite
 si, že v druhom prípade obsahuje skutočná (matematicky
 zjednodušená) dráha len tri čiary, pričom fyzikálne korektná
 dráha by ich obsahovala päť).
 
  
 
 Implementácia ohraničenia je príkladom toho, ako sa rôznymi
 spôsobmi dá výpočtovo (matematicky) dospieť k rovnakému riešeniu
 (v tomto prípade cieľovej polohe), pričom medzivýsledky môžu byť
 nielen rôzne, ale dokonca fyzikálne nesprávne. Takéto spôsoby
 riešenia sú vhodné v prípade, keď záleží viac na jednoduchosti
 výpočtu, než na detailnej fyzikálnej korektnosti.
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
Parametre:
ľaváHranica – vzdialenosť od robota určujúca ľavé
     ohraničenie
dolnáHranica – vzdialenosť od robota určujúca dolné
     ohraničenie
praváHranica – vzdialenosť od robota určujúca pravé
     ohraničenie
hornáHranica – vzdialenosť od robota určujúca horné
     ohraničenie
spôsob – celočíselná hodnota určujúca spôsob spracovania
     ohraničenia; použite konštanty: ODRAZ,
     PLOT, PRETOČ alebo
     ŽIADNE, pričom pri poslednej hodnote budú
     hodnoty hraníc ignorované (ohraničenie bude vypnuté)
Pozri tiež:
vypniOhraničenie(), 
zapniOhraničenie()
ohranic
public void ohranic(double ľaváHranica,
                    double dolnáHranica,
                    double praváHranica,
                    double hornáHranica,
                    int spôsob)
 Alias pre ohranič.
ohranič
public void ohranič(double ľaváHranica,
                    double dolnáHranica,
                    double praváHranica,
                    double hornáHranica)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ.
 
 Ďalšie podrobnosti o ohraničení nájdete v opise metódy
 ohranič(vľavo, dole, vpravo, hore, spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
Parametre:
ľaváHranica – vzdialenosť od robota určujúca ľavé
     ohraničenie
dolnáHranica – vzdialenosť od robota určujúca dolné
     ohraničenie
praváHranica – vzdialenosť od robota určujúca pravé
     ohraničenie
hornáHranica – vzdialenosť od robota určujúca horné
     ohraničenie
ohranic
public void ohranic(double ľaváHranica,
                    double dolnáHranica,
                    double praváHranica,
                    double hornáHranica)
 Alias pre ohranič.
ohranič
public void ohranič(double horizontálneHranice,
                    double vertikálneHranice,
                    int spôsob)
Zapne alebo vypne kontrolu polohy robota počas jeho pohybu
 prostredníctvom určenia vzdialenosti dvojice horizontálnych
 a vertikálnych hraníc od aktuálnej polohy robota a spôsobu
 ohraničenia. Prvé dva parametre určujú vzdialenosti ohraničenia
 od aktuálnej polohy robota a tretí spôsob kontroly polohy.
 
 Ďalšie podrobnosti o ohraničení nájdete v opise metódy
 ohranič(vľavo, dole, vpravo, hore, spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
Parametre:
horizontálneHranice – vzdialenosť od robota symetricky
     určujúca ľavé a pravé ohraničenie
vertikálneHranice – vzdialenosť od robota symetricky
     určujúca dolné a horné ohraničenie
spôsob – celočíselná hodnota určujúca spôsob spracovania
     ohraničenia; použite konštanty: ODRAZ,
     PLOT, PRETOČ alebo
     ŽIADNE, pričom pri poslednej hodnote budú
     hodnoty hraníc ignorované (ohraničenie bude vypnuté)
ohranic
public void ohranic(double horizontálneHranice,
                    double vertikálneHranice,
                    int spôsob)
 Alias pre ohranič.
ohranič
public void ohranič(double horizontálneHranice,
                    double vertikálneHranice)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ.
 
 Ďalšie podrobnosti o ohraničení nájdete v opise metódy
 ohranič(vľavo, dole, vpravo, hore, spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
Parametre:
horizontálneHranice – vzdialenosť od robota symetricky
     určujúca ľavé a pravé ohraničenie
vertikálneHranice – vzdialenosť od robota symetricky
     určujúca dolné a horné ohraničenie
ohranic
public void ohranic(double horizontálneHranice,
                    double vertikálneHranice)
 Alias pre ohranič.
ohranič
public void ohranič(int spôsob)
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 so zadaným spôsobom ohraničenia a podľa rozmerov kresliacej
 plochy, na ktorú má robot nasmerované kreslenie. To môže
 byť niektoré plátno – podlaha/strop alebo nejaký
 cieľový obrázok… Pripomíname, že hranice sú nastavené od
 aktuálnej polohy robota, čiže na úplné pokrytie kresliacej
 plochy je potrebné, aby sa robot v čase nastavovania
 ohraničenia nachádzal v strede kresliacej polochy, inak bude
 plocha ohraničeného priestoru nesymetrická – na jednej strane
 bude robotu dovolené opustiť plochu kresliaceho plátna
 (obrázka) a na protiľahlej strane bude jeho pohyb obmedzený
 ešte pred okrajom plátna.
 
 Ďalšie podrobnosti o ohraničení nájdete v opise metódy
 ohranič(vľavo, dole, vpravo, hore, spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
Parametre:
spôsob – celočíselná hodnota určujúca spôsob spracovania
     prevoleného ohraničenia – ODRAZ,
     PLOT, PRETOČ alebo
     ŽIADNE, pričom pri poslednej
     hodnote bude ohraničenie bude vypnuté
ohranic
public void ohranic(int spôsob)
 Alias pre ohranič.
ohranič
public void ohranič()
Nastaví nové ohraničenie polohy robota počas jeho pohybu
 s predvoleným spôsobom ohraničenia PRETOČ
 a podľa rozmerov kresliacej plochy, na ktorú má robot
 nasmerované kreslenie. O hraniciach ďalej platia rovnaké
 informácie, ktoré sú uvedené v opise metódy ohranič(spôsob).
 
 Príklad použitia mechanizmu ohraničenia nájdete
 v opise metódy mimoHraníc.
ohranic
public void ohranic()
 Alias pre ohranič.
farbaBodu
public Farba farbaBodu()
Zistí farbu bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí. Ak sa
 robot nachádza mimo kresliaceho plátna, je vrátená inštancia
 farebnosti žiadna. So získanou farbou
 môžeme ďalej pracovať – napríklad ju upravovať alebo zisťovať
 jej vlastnosti (farebné zložky, priehľadnosť…). Testovať, či má
 bod konkrétnu farbu, môžeme napríklad s pomocou metódy farbaBodu(farba).
Návratová hodnota:
farba bodu (objekt typu Farba) na
     pozícii robota alebo inštancia žiadna, ak sa robot nachádza mimo plátna
farbaBodu
public boolean farbaBodu(Color farba)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná so zadanou farbou. Ak sa robot nachádza mimo
 kresliaceho plátna, je vrátená hodnota false.
 Testovať farbu s pomocou tejto metódy môžeme napríklad takto:
 
 
if (farbaBodu(modrá)) …
Parametre:
farba – farba, ktorú chceme porovnať s farbou bodu na
     plátne
Návratová hodnota:
true ak sa robot nachádza v rámci
     rozmerov plátna a farba bodu na mieste robota sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky tri farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Farebnosť objekt)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadaného objektu. Ak sa robot nachádza mimo
 kresliaceho plátna, je vrátená hodnota false.
 Testovať farbu s pomocou tejto metódy môžeme napríklad takto:
 
 
if (farbaBodu(modrá)) …
Parametre:
objekt – objekt, ktorého farbu porovnávame s farbou bodu
Návratová hodnota:
true ak sa robot nachádza v rámci
     rozmerov plátna a farba bodu na mieste robota sa zhoduje
     s farbou zadaného objektu (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak
     false
farbaBodu
public boolean farbaBodu(int r,
                         int g,
                         int b)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 Ak sa robot nachádza mimo kresliaceho
 plátna, je vrátená hodnota false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
Návratová hodnota:
true ak sa robot nachádza v rámci
     rozmerov plátna a farba bodu na mieste robota sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky tri farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(int r,
                         int g,
                         int b,
                         int a)
Zistí, či farba bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) v mieste, kde robot práve stojí je
 zhodná s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti. Ak sa robot nachádza mimo kresliaceho
 plátna, je vrátená hodnota false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na plátne
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na plátne
Návratová hodnota:
true ak sa robot nachádza v rámci
     rozmerov plátna a farba bodu na mieste robota sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky tri farebné
     zložky aj úroveň priehľadnosti), inak false
farbaNaMyši
public Farba farbaNaMyši()
Zistí farbu bodu (jedného pixela) aktívneho plátna robota
 (podlahy alebo stropu) na súradniciach myši. So získanou
 farbou môžeme ďalej pracovať – napríklad ju upravovať alebo
 zisťovať jej vlastnosti (farebné zložky, priehľadnosť…).
 Testovať, či má bod konkrétnu farbu môžeme napríklad
 s pomocou metódy farbaNaMyši(farba).
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 inštanciu farby žiadna.
Návratová hodnota:
farba bodu (objekt typu Farba) na
     pozícii myši
farbaNaMysi
public Farba farbaNaMysi()
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(Color farba)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná so
 zadanou farbou. Testovať farbu s pomocou tejto metódy môžeme
 napríklad takto:
 
 
if (farbaNaMyši(modrá)) …
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
 
 Príklad:
 
 Príklad nakreslí čierny kruh do stredu plátna (teda
 v prípade, že začíname s predvolenými vlastnosťami robota),
 vytvorí obsluhu udalostí, v rámci ktorej bude testovať, či
 je farba bodu na súradniciach myši čierna a ak je, tak pípne.
 
 
kruh(15);
new ObsluhaUdalostí()
{
    @Override public void pohybMyši()
    {
        if (farbaNaMyši(čierna))
        {
            Svet.pípni();
        }
    }
};
Parametre:
farba – farba, ktorú chceme porovnať s farbou bodu na
     plátne
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(Farebnosť objekt)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadaného objektu.
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
Parametre:
objekt – objekt, ktorého farbu porovnávame s farbou bodu
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná s farbou zadaného objektu (musia sa zhodovať všetky
     tri farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(int r,
                           int g,
                           int b)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(int r,
                           int g,
                           int b)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(int r,
                           int g,
                           int b,
                           int a)
Zistí, či je farba bodu (jedného pixela) aktívneho plátna
 robota (podlahy alebo stropu) na súradniciach myši zhodná
 s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(int r,
                           int g,
                           int b,
                           int a)
 Alias pre farbaNaMyši.
vylejFarbu
public void vylejFarbu()
Robot vyleje na svojej pozícii na aktívne plátno alebo do
 obrázka, kam bolo presmerované jeho kreslenie, svoju
 farbu, ktorá sa odtiaľ rozšíri po okraje
 okolitej kresby. Na ďalšie informácie pozri metódu Plátno.vylejFarbu(double, double, Color). Správanie
 tejto metódy sa riadi rovnakými pravidlami.
 
 Príklad:
 
 V tomto príklade ide o vypĺňanie „čmáranice“ náhodnými
 farbami klikaním myšou (pozri zoznam zmien: 
poďakovanie uvedené pri
 verzii 1.35):
 
 
 
 
// Najskôr nakreslíme na plátno „čmáranicu“:
Svet.farbaPozadia(modrá);
hrúbkaČiary(1.5);
farba(biela);
skry();
náhodnáPoloha();
for (int j = 0; j &lt; 30; ++j)
{
    choďNa(
        Svet.náhodnéReálneČíslo(Svet.ľavýOkraj(),
            Svet.pravýOkraj()),
        Svet.náhodnéReálneČíslo(Svet.dolnýOkraj(),
            Svet.hornýOkraj()));
}
// Potom definujeme obsluhu udalostí, v ktorej sa postaráme
// o vypĺňanie častí obrazca náhodou farbou…
new ObsluhaUdalostí()
{
    @Override public void klik()
    {
        farba((int)Svet.náhodnéCeléČíslo(0, 255),
            (int)Svet.náhodnéCeléČíslo(0, 255),
            (int)Svet.náhodnéCeléČíslo(0, 255));
        skočNaMyš();
        vylejFarbu();
    }
};
 
 
 Výsledok:
 
 
 Ukážka čiastočne vyplnenej
 náhodne generovanej „čmáranice.“
kresliNaPodlahu
public void kresliNaPodlahu()
Po použití tejto metódy bude tento robot kresliť na plátno
 podlahy (predvolený stav). Ak chceme, aby robot kreslil na
 strop, použijeme metódu kresliNaStrop().
kresliNaStrop
public void kresliNaStrop()
Po použití tejto metódy bude tento robot kresliť na plátno
 stropu. Ak chceme, aby robot kreslil na podlahu, použijeme
 metódu kresliNaPodlahu().
kreslímNaPodlahu
public boolean kreslímNaPodlahu()
Overí, či tento robot kreslí na podlahu, teda, či je podlaha
 aktívnym plátnom robota. Podobne sa dá overiť kreslenie na strop.
 
 Poznámka: Názov tejto metódy je
 úmyselne uvedený v prvej osobe jednotného čísla
 (kreslímNaPodlahu), pretože diakritický alias otázky
 v tretej osobe (kreslíNaPodlahu? –
 kresliNaPodlahu?) bol v konflikte s rozkazovacím
 spôsobom príbuzných metód (kresliNaPodlahu!).
Návratová hodnota:
true ak aktívne plátno robota je podlaha,
     inak false
kreslimNaPodlahu
public boolean kreslimNaPodlahu()
 Alias pre kreslímNaPodlahu.
kreslímNaStrop
public boolean kreslímNaStrop()
Overí, či tento robot kreslí na strop, teda, či je strop
 aktívnym plátnom robota. Podobne sa dá overiť kreslenie na podlahu.
 
 Poznámka: Názov tejto metódy je
 úmyselne uvedený v prvej osobe jednotného čísla
 (kreslímNaStrop), pretože diakritický alias otázky
 v tretej osobe (kreslíNaStrop? –
 kresliNaStrop?) bol v konflikte s rozkazovacím
 spôsobom príbuzných metód (kresliNaStrop!).
Návratová hodnota:
true ak aktívne plátno robota je strop,
     inak false
kreslimNaStrop
public boolean kreslimNaStrop()
 Alias pre kreslímNaStrop.
vyplň
public void vyplň()
Vyplní aktívne plátno alebo obrázok, do ktorého má robot
 presmerované kreslenie, aktuálnou farbou kreslenia alebo
 náterom robota.
vypln
public void vypln()
 Alias pre vyplň.
kresliNaObrázok
public void kresliNaObrázok(Obrázok obrázok)
Presmeruje kreslenie tohto robota do určeného obrázka.
Parametre:
obrázok – cieľový obrázok
kresliNaObrazok
public void kresliNaObrazok(Obrázok obrázok)
 Alias pre kresliNaObrázok.
kresliDoObrázka
public void kresliDoObrázka(Obrázok obrázok)
 Alias pre kresliNaObrázok.
kresliDoObrazka
public void kresliDoObrazka(Obrázok obrázok)
 Alias pre kresliNaObrázok.
kreslímNaObrázok
public boolean kreslímNaObrázok(Obrázok obrázok)
Zistí, či je kreslenie tohto robota presmerované do určeného
 obrázka.
 
 Poznámka: Názov tejto metódy je
 úmyselne uvedený v prvej osobe jednotného čísla, aby bol
 v súlade s názvami metód kreslímNaPodlahu a kreslímNaStrop,
 pri ktorých nebola iná možnosť na pomenovanie (podrobnosti
 sú uvedené v poznámkach v ich opisoch).
Parametre:
obrázok – obrázok
kreslimNaObrazok
public boolean kreslimNaObrazok(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
kreslímDoObrázka
public boolean kreslímDoObrázka(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
kreslimDoObrazka
public boolean kreslimDoObrazka(Obrázok obrázok)
 Alias pre kreslímNaObrázok.
kreslímNaObrázok
public Obrázok kreslímNaObrázok()
Ak je kreslenie tohto robota presmerované do obrázka
 (inštancie triedy Obrázok), tak táto metóda
 túto inštanciu vráti. V opačnom prípade (čiže ak je kreslenie
 nasmerované na podlahu
 alebo strop) vráti metóda
 hodnotu null.
 
 Poznámka: Názov tejto metódy je úmyselne
 uvedený v prvej osobe jednotného čísla, aby bol v súlade
 s názvami metód kreslímNaPodlahu
 a kreslímNaStrop, pri ktorých
 nebola iná možnosť na pomenovanie. Podrobnosti sú uvedené
 v poznámkach v ich opisoch.
Návratová hodnota:
inštancia typu Obrázok alebo
     null
kreslimNaObrazok
public Obrázok kreslimNaObrazok()
 Alias pre kreslímNaObrázok.
kreslímDoObrázka
public Obrázok kreslímDoObrázka()
 Alias pre kreslímNaObrázok.
kreslimDoObrazka
public Obrázok kreslimDoObrazka()
 Alias pre kreslímNaObrázok.
grafika
public Graphics2D grafika()
Vráti (na technické účely) aktuálny grafický objekt
 používaný týmto robotom. (Definícia tejto metódy sa stala
 nevyhnutnou so vznikom triedy Tlač.)
Návratová hodnota:
aktuálny grafický objekt používaný na kreslenie
     týmto robotom
Pozri tiež:
obrázok(), 
Tlač
obrázok
public BufferedImage obrázok()
Vráti (na technické účely) aktuálny obrázok, na ktorý
 tento robot kreslí. (Definícia tejto metódy dopĺňa
 definíciu metódy grafika.)
Návratová hodnota:
aktuálny obrázok, na ktorý tento robot kreslí
Pozri tiež:
grafika(), 
Tlač
obrazok
public BufferedImage obrazok()
 Alias pre obrázok.
začniKreslenie
public void začniKreslenie(Graphics2D g2d)
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím externého grafického objektu Graphics2D. Má byť spustená pred začatím práce
 s týmto objektom a po skončení práce musí byť volaná párujúca
 metóda skončiKreslenie
 (s tým istým objektom grafiky v parametri).
Parametre:
g2d – objekt, ktorého vlastnosti majú byť nastavené
     podľa vlastností tohto robota
skončiKreslenie
public void skončiKreslenie(Graphics2D g2d)
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím externého grafického objektu Graphics2D. Má byť spustená po ukončení práce
 s týmto objektom, pričom pred začatím práce musí byť volaná
 párujúca metóda začniKreslenie (s tým istým objektom grafiky v parametri).
Parametre:
g2d – objekt, ktorého vlastnosti majú byť obnovené
zacniKreslenie
public void zacniKreslenie(Graphics2D g2d)
 Alias pre začniKreslenie.
skonciKreslenie
public void skonciKreslenie(Graphics2D g2d)
 Alias pre skončiKreslenie.
začniKreslenie
public void začniKreslenie()
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím interného (aktívneho) grafického objektu
 robota dostupného aj prostredníctvom metódy grafika. Má byť spustená pred začatím grafických
 prác za hranicami programovacieho rámca a po skončení prác
 musí byť volaná párujúca metóda skončiKreslenie (bez parametra).
skončiKreslenie
public void skončiKreslenie()
Táto metóda je určená na implementáciu vlastného kreslenia
 robotom s použitím interného (aktívneho) grafického objektu
 robota dostupného aj prostredníctvom metódy grafika. Má byť spustená po ukončení grafických
 prác za hranicami programovacieho rámca, pričom pred začatím
 prác musí byť volaná párujúca metóda začniKreslenie (bez parametra).
zacniKreslenie
public void zacniKreslenie()
 Alias pre začniKreslenie.
skonciKreslenie
public void skonciKreslenie()
 Alias pre skončiKreslenie.
vypĺňajTvary
public void vypĺňajTvary(boolean vypĺňaj)
Upraví spôsob kreslenia tvarov generovaných robotom. Ide
 o úpravu správania metód krúžok,
 elipsa, štvorec, obdĺžnik a hviezda (a všetkých ich
 verzií). Ak má parameter zadanú hodnotu true, tak
 v prípade, že je povolené kreslenie
 tvarov budú uvedené tvary kreslené ako vyplnené plochy, inak
 budú nakreslené ako obrysy. Spustenie tejto metódy zároveň
 upraví spôsob kreslenia predvoleného tvaru robota tak, aby bolo v súlade so zadanou
 hodnotou parametra (true znamená vyplnený trojzubec
 a false dutý).
 
 Poznámka: Spôsob kreslenia
 predvoleného tvaru trojzubca môže byť dodatočne zmenený
 a preto sa môže odlišovať od aktuálneho stavu vypĺňania
 tvarov robotom. Na overenie aktuálneho spôsobu kreslenia
 predvoleného tvaru trojzubca slúži metóda jePredvolenýTvarVyplnený.
Parametre:
vypĺňaj – true alebo false podľa
     toho, či majú byť tvary vymenované v opise vypĺňané alebo
     nie
Pozri tiež:
vypĺňaTvary(), 
kresliTvary(), 
nekresliTvary(), 
kreslenieTvarovPovolené(), 
krúžok(double), 
krúžok(), 
elipsa(double, double), 
elipsa(double), 
štvorec(double), 
štvorec(), 
obdĺžnik(double, double), 
obdĺžnik(double), 
hviezda(double), 
hviezda(), 
predvolenýTvar(boolean)
vyplnajTvary
public void vyplnajTvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
vypĺňajÚtvary
public void vypĺňajÚtvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
vyplnajUtvary
public void vyplnajUtvary(boolean vypĺňaj)
 Alias pre vypĺňajTvary.
vypĺňajTvary
public void vypĺňajTvary()
Upraví spôsob kreslenia tvarov generovaných robotom. Ide
 o úpravu správania metód krúžok,
 elipsa, štvorec, obdĺžnik a hviezda (a všetkých ich
 verzií). Po spustení tejto metódy budú uvedené tvary kreslené
 ako vyplnené plochy. Spustenie tejto metódy zároveň upraví
 spôsob kreslenia predvoleného tvaru robota, ktorý bude teraz vyplneným
 trojzubcom.
Pozri tiež:
vypĺňajTvary(boolean)
vyplnajTvary
public void vyplnajTvary()
 Alias pre vypĺňajTvary.
vypĺňajÚtvary
public void vypĺňajÚtvary()
 Alias pre vypĺňajTvary.
vyplnajUtvary
public void vyplnajUtvary()
 Alias pre vypĺňajTvary.
nevypĺňajTvary
public void nevypĺňajTvary()
Upraví spôsob kreslenia tvarov generovaných robotom. Ide
 o úpravu správania metód krúžok,
 elipsa, štvorec, obdĺžnik a hviezda (a všetkých ich
 verzií). Po spustení tejto metódy budú uvedené tvary kreslené
 ako obrysy. Spustenie tejto metódy zároveň upraví spôsob
 kreslenia predvoleného
 tvaru robota, ktorý bude teraz dutým trojzubcom.
Pozri tiež:
vypĺňajTvary(boolean)
nevyplnajTvary
public void nevyplnajTvary()
 Alias pre nevypĺňajTvary.
nevypĺňajÚtvary
public void nevypĺňajÚtvary()
 Alias pre nevypĺňajTvary.
nevyplnajUtvary
public void nevyplnajUtvary()
 Alias pre nevypĺňajTvary.
vypĺňaTvary
public boolean vypĺňaTvary()
Zistí, či je aktivované vypĺňanie tvarov generovaných robotom
 alebo nie. Stav vypĺňania tvarov súvisí s metódami krúžok, elipsa, štvorec, obdĺžnik a hviezda (a všetkými ich verziami). Ak má vrátený stav hodnotu
 true, znamená to, že tvary budú kreslené ako
 vyplnené plochy, inak budú kreslené ako obrysy (za predpokladu,
 že je povolené kreslenie tvarov).
 (Predvolená hodnota tejto vlastnosti je false.)
Návratová hodnota:
true alebo false podľa toho, či
     sú tvary vymenované v opise vypĺňané alebo nie
Pozri tiež:
vypĺňajTvary(boolean), 
kresliTvary(), 
nekresliTvary(), 
kreslenieTvarovPovolené(), 
krúžok(double), 
krúžok(), 
elipsa(double, double), 
elipsa(double), 
štvorec(double), 
štvorec(), 
obdĺžnik(double, double), 
obdĺžnik(double), 
hviezda(double), 
hviezda(), 
predvolenýTvar(boolean)
vyplnaTvary
public boolean vyplnaTvary()
 Alias pre vypĺňajTvary.
vypĺňaÚtvary
public boolean vypĺňaÚtvary()
 Alias pre vypĺňajTvary.
vyplnaUtvary
public boolean vyplnaUtvary()
 Alias pre vypĺňajTvary.
bod
public void bod()
Nakreslí na aktuálnej pozícii robota bod alebo skupinu bodov
 (kruhovú oblasť) podľa aktuálnej hrúbky pera, najmenej však
 oblasť s veľkosťou jedného pixela. (To znamená, že hrúbky pera
 menšie než jeden pixel sú zaokrúhlené na veľkosť jedného
 pixela.) Na kreslenie je použitá aktuálna farba alebo náter
 robota.
prepíšBod
public void prepíšBod()
Prepíše farebné zložky a zložku priehľadnosti bodu na
 aktuálnej pozícii robota aktuálnou farbou robota. Metóda
 prepíše vždy iba jediný bod na aktuálnej pozícii. Neriadi sa
 veľkosťou pera ani robota.
prepisBod
public void prepisBod()
 Alias pre prepíšBod.
pečiatka
public void pečiatka()
Vytlačí na aktuálnom plátne robota pečiatku v jeho aktuálnom
 tvare.
peciatka
public void peciatka()
 Alias pre pečiatka.
krúžok
public Shape krúžok(double polomer)
Nakreslí na mieste robota kružnicu alebo kruh so zadaným
 polomerom. Vyplnenie tvaru (kreslenie kruhu namiesto kružnice)
 závisí od nastavenia vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Poznámka: Pri hľadaní pomenovania tejto
 metódy vznikol terminologický problém. Slovo „krúžok“ bolo
 použité ako núdzové riešenie situácie, pretože slovenský
 jazyk striktne rozlišuje kruh ako vyplnený tvar a kružnicu
 ako nakreslenú čiaru ohraničujúcu tento vyplnený tvar.
Parametre:
polomer – polomer kruhového útvaru (kruhu alebo kružnice)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je polomer kruhu/kružnice záporný
Pozri tiež:
krúžok(), 
elipsa(double, double), 
štvorec(double), 
obdĺžnik(double, double), 
hviezda(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruzok
public Shape kruzok(double polomer)
 Alias pre krúžok.
krúžka
public Shape krúžka(double polomer)
 Alias pre krúžok.
kruzka
public Shape kruzka(double polomer)
 Alias pre krúžok.
kružnica
public Shape kružnica(double polomer)
Nakreslí na mieste robota kružnicu so zadaným polomerom.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je polomer kružnice záporný
Pozri tiež:
kružnica(), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruznica
public Shape kruznica(double polomer)
 Alias pre kružnica.
kružnicu
public Shape kružnicu(double polomer)
 Alias pre kružnica.
kruznicu
public Shape kruznicu(double polomer)
 Alias pre kružnica.
kružnice
public Shape kružnice(double polomer)
 Alias pre kružnica.
kruznice
public Shape kruznice(double polomer)
 Alias pre kružnica.
kruh
public Shape kruh(double polomer)
Nakreslí na mieste robota kruh so zadaným polomerom.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer kruhu
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Výnimky:
GRobotException – ak je polomer kruhu záporný
Pozri tiež:
kruh(), 
kružnica(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruhu
public Shape kruhu(double polomer)
 Alias pre kruh.
elipsa
public Shape elipsa(double a,
                    double b)
Nakreslí alebo vyplní na mieste robota elipsu so zadanými
 rozmermi pootočenú v smere robota (predvolený smer robota je
 90°). Spôsob nakreslenia tvaru (vyplnenie alebo obkreslenie)
 závisí od nastavenia vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je niektorý rozmer elipsy
     záporný
Pozri tiež:
elipsa(double), 
kružnica(double), 
kruh(double), 
štvorec(double), 
obdĺžnik(double, double), 
hviezda(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
elipsu
public Shape elipsu(double a,
                    double b)
 Alias pre elipsa.
elipsy
public Shape elipsy(double a,
                    double b)
 Alias pre elipsa.
kresliElipsu
public Shape kresliElipsu(double a,
                          double b)
Nakreslí na mieste robota elipsu so zadanými rozmermi
 pootočenú v smere robota (predvolený smer robota je 90°).
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je niektorý rozmer elipsy
     záporný
Pozri tiež:
elipsa(double), 
kresliElipsu(double), 
kružnica(double), 
kruh(double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplňElipsu
public Shape vyplňElipsu(double a,
                         double b)
Vyplní elipsu so zadanými rozmermi, so stredom na mieste
 robota a pootočenú v smere robota (predvolený smer robota je
 90°).
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Výnimky:
GRobotException – ak je niektorý rozmer elipsy
     záporný
Pozri tiež:
elipsa(double), 
vyplňElipsu(double), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnElipsu
public Shape vyplnElipsu(double a,
                         double b)
 Alias pre vyplňElipsu.
vyplnenáElipsa
public Shape vyplnenáElipsa(double a,
                            double b)
 Alias pre vyplňElipsu.
vyplnenaElipsa
public Shape vyplnenaElipsa(double a,
                            double b)
 Alias pre vyplňElipsu.
vyplnenúElipsu
public Shape vyplnenúElipsu(double a,
                            double b)
 Alias pre vyplňElipsu.
vyplnenuElipsu
public Shape vyplnenuElipsu(double a,
                            double b)
 Alias pre vyplňElipsu.
vyplnenejElipsy
public Shape vyplnenejElipsy(double a,
                             double b)
 Alias pre vyplňElipsu.
štvorec
public Shape štvorec(double polomer)
Nakreslí alebo vyplní na mieste robota štvorec určený rozmerom
 vpísanej kružnice a obrátený v smere robota. Spôsob nakreslenia
 tvaru (vyplnenie alebo obkreslenie) závisí od nastavenia
 vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer vpísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
štvorec(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
obdĺžnik(double, double), 
hviezda(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
stvorec
public Shape stvorec(double polomer)
 Alias pre štvorec.
štvorca
public Shape štvorca(double polomer)
 Alias pre štvorec.
stvorca
public Shape stvorca(double polomer)
 Alias pre štvorec.
kresliŠtvorec
public Shape kresliŠtvorec(double polomer)
Nakreslí na mieste robota štvorec určený rozmerom vpísanej
 kružnice a obrátený v smere robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer vpísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
kresliŠtvorec(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kresliStvorec
public Shape kresliStvorec(double polomer)
 Alias pre kresliŠtvorec.
vyplňŠtvorec
public Shape vyplňŠtvorec(double polomer)
Vyplní štvorec so stredom na mieste robota, obrátený v smere
 robota a určený polomerom vpísanej kružnice.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer vpísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
vyplňŠtvorec(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnStvorec
public Shape vyplnStvorec(double polomer)
 Alias pre vyplňŠtvorec.
vyplnenýŠtvorec
public Shape vyplnenýŠtvorec(double polomer)
 Alias pre vyplňŠtvorec.
vyplnenyStvorec
public Shape vyplnenyStvorec(double polomer)
 Alias pre vyplňŠtvorec.
vyplnenéhoŠtvorca
public Shape vyplnenéhoŠtvorca(double polomer)
 Alias pre vyplňŠtvorec.
vyplnenehoStvorca
public Shape vyplnenehoStvorca(double polomer)
 Alias pre vyplňŠtvorec.
obdĺžnik
public Shape obdĺžnik(double a,
                      double b)
Nakreslí alebo vyplní na mieste robota obdĺžnik určený rozmerom
 vpísanej elipsy a obrátený v smere robota (predvolený smer
 robota je 90°). Spôsob nakreslenia tvaru (vyplnenie alebo
 obkreslenie) závisí od nastavenia vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi vpísanej elipsy (na šírku)
b – veľkosť vedľajšej poloosi vpísanej elipsy (na
     výšku)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je niektorý rozmer vpísanej
     elipsy záporný
Pozri tiež:
obdĺžnik(double), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
štvorec(double), 
hviezda(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
obdlznik
public Shape obdlznik(double a,
                      double b)
 Alias pre obdĺžnik.
obdĺžnika
public Shape obdĺžnika(double a,
                       double b)
 Alias pre obdĺžnik.
obdlznika
public Shape obdlznika(double a,
                       double b)
 Alias pre obdĺžnik.
kresliObdĺžnik
public Shape kresliObdĺžnik(double a,
                            double b)
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota (predvolený smer robota je 90°).
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi vpísanej elipsy (na šírku)
b – veľkosť vedľajšej poloosi vpísanej elipsy (na
     výšku)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je niektorý rozmer vpísanej
     elipsy záporný
Pozri tiež:
kresliObdĺžnik(double), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kresliObdlznik
public Shape kresliObdlznik(double a,
                            double b)
 Alias pre kresliObdĺžnik.
vyplňObdĺžnik
public Shape vyplňObdĺžnik(double a,
                           double b)
Vyplní obdĺžnik so stredom na mieste robota, obrátený v smere
 robota a určený rozmermi vpísanej elipsy (predvolený smer robota
 je 90°).
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
a – veľkosť hlavnej poloosi vpísanej elipsy (na šírku)
b – veľkosť vedľajšej poloosi vpísanej elipsy (na
     výšku)
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Výnimky:
GRobotException – ak je niektorý rozmer vpísanej
     elipsy záporný
Pozri tiež:
vyplňObdĺžnik(double), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnObdlznik
public Shape vyplnObdlznik(double a,
                           double b)
 Alias pre vyplňObdĺžnik.
vyplnenýObdĺžnik
public Shape vyplnenýObdĺžnik(double a,
                              double b)
 Alias pre vyplňObdĺžnik.
vyplnenyObdlznik
public Shape vyplnenyObdlznik(double a,
                              double b)
 Alias pre vyplňObdĺžnik.
vyplnenéhoObdĺžnika
public Shape vyplnenéhoObdĺžnika(double a,
                                 double b)
 Alias pre vyplňObdĺžnik.
vyplnenehoObdlznika
public Shape vyplnenehoObdlznika(double a,
                                 double b)
 Alias pre vyplňObdĺžnik.
hviezda
public Shape hviezda(double polomer)
Nakreslí alebo vyplní na mieste robota päťcípu hviezdu určenú
 rozmerom opísanej kružnice a orientovanú v smere robota. Spôsob
 nakreslenia tvaru (vyplnenie alebo obkreslenie) závisí od
 nastavenia vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer opísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
hviezda(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
štvorec(double), 
obdĺžnik(double, double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
hviezdy
public Shape hviezdy(double polomer)
 Alias pre hviezda.
hviezdu
public Shape hviezdu(double polomer)
 Alias pre hviezda.
kresliHviezdu
public Shape kresliHviezdu(double polomer)
Nakreslí na mieste robota päťcípu hviezdu určenú rozmerom
 opísanej kružnice a orientovanú v smere robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer opísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
kresliHviezdu(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
vyplňHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplňHviezdu
public Shape vyplňHviezdu(double polomer)
Vyplní päťcípu hviezdu so stredom na mieste robota, orientovanú
 v smere robota a určenú polomerom opísanej kružnice.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Parametre:
polomer – polomer opísanej kružnice
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Výnimky:
GRobotException – ak je zadaný polomer záporný
Pozri tiež:
vyplňHviezdu(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnHviezdu
public Shape vyplnHviezdu(double polomer)
 Alias pre vyplňHviezdu.
vyplnenáHviezda
public Shape vyplnenáHviezda(double polomer)
 Alias pre vyplňHviezdu.
vyplnenaHviezda
public Shape vyplnenaHviezda(double polomer)
 Alias pre vyplňHviezdu.
vyplnenúHviezdu
public Shape vyplnenúHviezdu(double polomer)
 Alias pre vyplňHviezdu.
vyplnenuHviezdu
public Shape vyplnenuHviezdu(double polomer)
 Alias pre vyplňHviezdu.
vyplnenejHviezdy
public Shape vyplnenejHviezdy(double polomer)
 Alias pre vyplňHviezdu.
krúžok
public Shape krúžok()
Nakreslí na mieste robota kruh alebo kružnicu s polomerom
 veľkosti robota. Vyplnenie tvaru
 (kreslenie kruhu namiesto kružnice) závisí od nastavenia
 vlastnosti vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Poznámka: Pri hľadaní pomenovania tejto
 metódy vznikol terminologický problém. Slovo „krúžok“ bolo
 použité ako núdzové riešenie situácie, pretože slovenský
 jazyk striktne rozlišuje kruh ako vyplnený tvar a kružnicu
 ako nakreslenú čiaru ohraničujúcu tento vyplnený tvar.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
krúžok(double), 
elipsa(double), 
štvorec(), 
obdĺžnik(double), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruzok
public Shape kruzok()
 Alias pre krúžok.
krúžka
public Shape krúžka()
 Alias pre krúžok.
kruzka
public Shape kruzka()
 Alias pre krúžok.
kružnica
public Shape kružnica()
Nakreslí na mieste robota kružnicu s polomerom veľkosti robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kružnica(double), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruznica
public Shape kruznica()
 Alias pre kružnica.
kružnicu
public Shape kružnicu()
 Alias pre kružnica.
kruznicu
public Shape kruznicu()
 Alias pre kružnica.
kružnice
public Shape kružnice()
 Alias pre kružnica.
kruznice
public Shape kruznice()
 Alias pre kružnica.
kruh
public Shape kruh()
Nakreslí na mieste robota kruh s polomerom veľkosti robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
kruh(double), 
kružnica(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kruhu
public Shape kruhu()
 Alias pre kruh.
elipsa
public Shape elipsa(double pomer)
Nakreslí alebo vyplní na mieste robota elipsu pootočenú
 v smere robota s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru. Spôsob
 nakreslenia tvaru (vyplnenie alebo obkreslenie) závisí od
 nastavenia vlastnosti vypĺňajTvary.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi
     (šírky a výšky elipsy – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
elipsa(double, double), 
kružnica(), 
kruh(), 
štvorec(), 
obdĺžnik(double), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
elipsu
public Shape elipsu(double pomer)
 Alias pre elipsa.
elipsy
public Shape elipsy(double pomer)
 Alias pre elipsa.
kresliElipsu
public Shape kresliElipsu(double pomer)
Nakreslí na mieste robota elipsu pootočenú v smere robota
 s veľkosťou odvodenou od veľkosti
 robota podľa zadaného stranového pomeru.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi
     (šírky a výšky elipsy – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliElipsu(double, double), 
kružnica(), 
kruh(), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplňElipsu
public Shape vyplňElipsu(double pomer)
Vyplní elipsu so stredom na mieste robota, pootočenú v smere
 robota, s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi
     (šírky a výšky elipsy – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňElipsu(double, double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnElipsu
public Shape vyplnElipsu(double pomer)
 Alias pre vyplňElipsu.
vyplnenáElipsa
public Shape vyplnenáElipsa(double pomer)
 Alias pre vyplňElipsu.
vyplnenaElipsa
public Shape vyplnenaElipsa(double pomer)
 Alias pre vyplňElipsu.
vyplnenúElipsu
public Shape vyplnenúElipsu(double pomer)
 Alias pre vyplňElipsu.
vyplnenuElipsu
public Shape vyplnenuElipsu(double pomer)
 Alias pre vyplňElipsu.
vyplnenejElipsy
public Shape vyplnenejElipsy(double pomer)
 Alias pre vyplňElipsu.
elipsa
public Shape elipsa()
Nakreslí alebo vyplní na mieste robota elipsu pootočenú
 v smere robota s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru. Spôsob
 nakreslenia tvaru (vyplnenie alebo obkreslenie) závisí od
 nastavenia vlastnosti vypĺňajTvary.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
elipsa(double, double), 
kružnica(), 
kruh(), 
štvorec(), 
obdĺžnik(), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
elipsu
public Shape elipsu()
 Alias pre elipsa.
elipsy
public Shape elipsy()
 Alias pre elipsa.
kresliElipsu
public Shape kresliElipsu()
Nakreslí na mieste robota elipsu pootočenú v smere robota
 s veľkosťou odvodenou od veľkosti
 robota podľa zadaného stranového pomeru.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliElipsu(double, double), 
kružnica(), 
kruh(), 
vyplňElipsu(), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(), 
vyplňObdĺžnik(), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplňElipsu
public Shape vyplňElipsu()
Vyplní elipsu so stredom na mieste robota, pootočenú v smere
 robota, s veľkosťou odvodenou od veľkosti robota podľa zadaného stranového pomeru.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňElipsu(double, double), 
kružnica(), 
kruh(), 
elipsa(), 
kresliElipsu(), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(), 
vyplňObdĺžnik(), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnElipsu
public Shape vyplnElipsu()
 Alias pre vyplňElipsu.
vyplnenáElipsa
public Shape vyplnenáElipsa()
 Alias pre vyplňElipsu.
vyplnenaElipsa
public Shape vyplnenaElipsa()
 Alias pre vyplňElipsu.
vyplnenúElipsu
public Shape vyplnenúElipsu()
 Alias pre vyplňElipsu.
vyplnenuElipsu
public Shape vyplnenuElipsu()
 Alias pre vyplňElipsu.
vyplnenejElipsy
public Shape vyplnenejElipsy()
 Alias pre vyplňElipsu.
štvorec
public Shape štvorec()
Nakreslí alebo vyplní na mieste robota štvorec určený rozmerom
 vpísanej kružnice s polomerom veľkosti
 robota a obrátený v smere robota. Spôsob nakreslenia tvaru
 (vyplnenie alebo obkreslenie) závisí od nastavenia vlastnosti
 vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
štvorec(double), 
kružnica(), 
kruh(), 
elipsa(double), 
obdĺžnik(double), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
stvorec
public Shape stvorec()
 Alias pre štvorec.
štvorca
public Shape štvorca()
 Alias pre štvorec.
stvorca
public Shape stvorca()
 Alias pre štvorec.
kresliŠtvorec
public Shape kresliŠtvorec()
Nakreslí na mieste robota štvorec určený rozmerom vpísanej
 kružnice s polomerom veľkosti robota
 a obrátený v smere robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliŠtvorec(double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kresliStvorec
public Shape kresliStvorec()
 Alias pre kresliŠtvorec.
vyplňŠtvorec
public Shape vyplňŠtvorec()
Vyplní štvorec so stredom na mieste robota, obrátený v smere
 robota a určený polomerom vpísanej kružnice s polomerom
 veľkosti robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňŠtvorec(double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnStvorec
public Shape vyplnStvorec()
 Alias pre vyplňŠtvorec.
vyplnenýŠtvorec
public Shape vyplnenýŠtvorec()
 Alias pre vyplňŠtvorec.
vyplnenyStvorec
public Shape vyplnenyStvorec()
 Alias pre vyplňŠtvorec.
vyplnenéhoŠtvorca
public Shape vyplnenéhoŠtvorca()
 Alias pre vyplňŠtvorec.
vyplnenehoStvorca
public Shape vyplnenehoStvorca()
 Alias pre vyplňŠtvorec.
obdĺžnik
public Shape obdĺžnik(double pomer)
Nakreslí alebo vyplní na mieste robota obdĺžnik určený rozmerom
 vpísanej elipsy a obrátený v smere robota. Spôsob nakreslenia
 tvaru (vyplnenie alebo obkreslenie) závisí od nastavenia
 vlastnosti vypĺňajTvary.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi vpísanej
     elipsy (šírky a výšky obdĺžnika – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
obdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(double), 
štvorec(), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
obdlznik
public Shape obdlznik(double pomer)
 Alias pre obdĺžnik.
obdĺžnika
public Shape obdĺžnika(double pomer)
 Alias pre obdĺžnik.
obdlznika
public Shape obdlznika(double pomer)
 Alias pre obdĺžnik.
kresliObdĺžnik
public Shape kresliObdĺžnik(double pomer)
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi vpísanej
     elipsy (šírky a výšky obdĺžnika – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliObdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kresliObdlznik
public Shape kresliObdlznik(double pomer)
 Alias pre kresliObdĺžnik.
vyplňObdĺžnik
public Shape vyplňObdĺžnik(double pomer)
Vyplní obdĺžnik so stredom na mieste robota, obrátený
 v smere robota a určený rozmermi vpísanej elipsy.
 
 Argument pomer udáva pomer šírky k výške útvaru.
 Hodnota 1.0 znamená rovnakú šírku ako výšku (čiže
 hodnotu rovnú aktuálnej veľkosti
 robota). Čím väčšia hodnota od čísla 1.0, tým
 širší útvar, čím nižšia hodnota (v rozsahu od 1.0
 do 0.0), tým užší útvar.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer hlavnej a vedľajšej poloosi vpísanej
     elipsy (šírky a výšky obdĺžnika – 2.0 znamená
     dvojnásobnú šírku, 0.5 polovičnú a podobne)
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňObdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnObdlznik
public Shape vyplnObdlznik(double pomer)
 Alias pre vyplňObdĺžnik.
vyplnenýObdĺžnik
public Shape vyplnenýObdĺžnik(double pomer)
 Alias pre vyplňObdĺžnik.
vyplnenyObdlznik
public Shape vyplnenyObdlznik(double pomer)
 Alias pre vyplňObdĺžnik.
vyplnenéhoObdĺžnika
public Shape vyplnenéhoObdĺžnika(double pomer)
 Alias pre vyplňObdĺžnik.
vyplnenehoObdlznika
public Shape vyplnenehoObdlznika(double pomer)
 Alias pre vyplňObdĺžnik.
obdĺžnik
public Shape obdĺžnik()
Nakreslí alebo vyplní na mieste robota obdĺžnik určený
 rozmerom vpísanej elipsy a obrátený v smere robota. Spôsob
 nakreslenia tvaru (vyplnenie alebo obkreslenie) závisí od
 nastavenia vlastnosti vypĺňajTvary.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
obdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(), 
štvorec(), 
hviezda(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
obdlznik
public Shape obdlznik()
 Alias pre obdĺžnik.
obdĺžnika
public Shape obdĺžnika()
 Alias pre obdĺžnik.
obdlznika
public Shape obdlznika()
 Alias pre obdĺžnik.
kresliObdĺžnik
public Shape kresliObdĺžnik()
Nakreslí na mieste robota obdĺžnik určený rozmerom vpísanej
 elipsy a obrátený v smere robota.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliObdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(), 
kresliElipsu(), 
vyplňElipsu(), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
vyplňObdĺžnik(), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
kresliObdlznik
public Shape kresliObdlznik()
 Alias pre kresliObdĺžnik.
vyplňObdĺžnik
public Shape vyplňObdĺžnik()
Vyplní obdĺžnik so stredom na mieste robota, obrátený
 v smere robota a určený rozmermi vpísanej elipsy.
 
 Pomer šírky k výške útvaru je určený vlastnosťou robota
 pomer.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňObdĺžnik(double, double), 
kružnica(), 
kruh(), 
elipsa(), 
kresliElipsu(), 
vyplňElipsu(), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnObdlznik
public Shape vyplnObdlznik()
 Alias pre vyplňObdĺžnik.
vyplnenýObdĺžnik
public Shape vyplnenýObdĺžnik()
 Alias pre vyplňObdĺžnik.
vyplnenyObdlznik
public Shape vyplnenyObdlznik()
 Alias pre vyplňObdĺžnik.
vyplnenéhoObdĺžnika
public Shape vyplnenéhoObdĺžnika()
 Alias pre vyplňObdĺžnik.
vyplnenehoObdlznika
public Shape vyplnenehoObdlznika()
 Alias pre vyplňObdĺžnik.
hviezda
public Shape hviezda()
Nakreslí alebo vyplní na mieste robota hviezdu určenú rozmerom
 opísanej kružnice s polomerom veľkosti
 robota a obrátenú v smere robota. Spôsob nakreslenia tvaru
 (vyplnenie alebo obkreslenie) závisí od nastavenia vlastnosti
 vypĺňajTvary.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
hviezda(double), 
kružnica(), 
kruh(), 
elipsa(double), 
štvorec(), 
obdĺžnik(double), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
hviezdu
public Shape hviezdu()
 Alias pre hviezda.
hviezdy
public Shape hviezdy()
 Alias pre hviezda.
kresliHviezdu
public Shape kresliHviezdu()
Nakreslí na mieste robota hviezdu určenú rozmerom opísanej
 kružnice s polomerom veľkosti robota
 a obrátenú v smere robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     kreslený útvar
Pozri tiež:
kresliHviezdu(double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
vyplňHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplňHviezdu
public Shape vyplňHviezdu()
Vyplní hviezdu so stredom na mieste robota, obrátenú
 v smere robota a určenú rozmerom opísanej kružnice
 s polomerom veľkosti robota.
 
 Poloha pera nemá na
 kreslenie tohto útvaru vplyv. Metóda funguje ako pečiatka.
 Útvar nie je nakreslený v prípade, že bol tento robot
 zamestnaný na účely
 tvorby oblasti alebo je zakázané kreslenie tvarov.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
objekt typu Shape reprezentujúci
     vypĺňaný útvar
Pozri tiež:
vyplňHviezdu(double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
kresliHviezdu(), 
text(String), 
text(String, int), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
vyplnHviezdu
public Shape vyplnHviezdu()
 Alias pre vyplňHviezdu.
vyplnenáHviezda
public Shape vyplnenáHviezda()
 Alias pre vyplňHviezdu.
vyplnenaHviezda
public Shape vyplnenaHviezda()
 Alias pre vyplňHviezdu.
vyplnenúHviezdu
public Shape vyplnenúHviezdu()
 Alias pre vyplňHviezdu.
vyplnenuHviezdu
public Shape vyplnenuHviezdu()
 Alias pre vyplňHviezdu.
vyplnenejHviezdy
public Shape vyplnenejHviezdy()
 Alias pre vyplňHviezdu.
vajce
public void vajce(double polomer,
                  String... parametre)
Nakreslí vajce. Táto metóda sa významne odlišuje od ostatných
 metód, ktoré slúžia na kreslenie tvarov. Nemá žiadne verzie.
 Nie sú k nej definované metódy slúžiace na overovanie
 prítomnosti bodov (alebo myši) v rámci tvaru. Negeneruje tvar
 na ďalšie použitie. Neberie do úvahy vypĺňanie tvarov. Všetko
 to súvisí s jedným faktom: Metóda len uzatvára nasledujúci
 algoritmus kreslenia vajíčka. Algoritmus pochádza z 
tohto zdroja.
 
 Na lepšie pochopenie si uveďme najskôr schému kreslenia:
 
 
 Ilustračná
 schéma k algoritmu kreslenia vajca.
 
  
 
 Algoritmus metódy vyzerá zhruba takto:
 
 
// Deklarácie bodov:
Bod S, A, B, C, D, E;
// Zapamätanie si počiatočnej polohy a uhla (do zálohy, aby sme sa
// po skončení kreslenia vedeli vrátiť do pôvodného stavu):
S = poloha();
double u = uhol();
// Kreslenie v „try“ a vrátenie zálohy vo „finally“ (to je „trik“,
// ktorý sa používa v takýchto prípadoch, lebo „finally“ sa vykoná
// vždy, aj keby počas vykonávania bloku „try“ nastala nejaká chyba):
try
{
    // Body A, B, C vieme zistiť veľmi ľahko:
    skoč(polomer);
    C = poloha();
    poloha(S);
    preskočVpravo(polomer);
    B = poloha();
    poloha(S);
    preskočVľavo(polomer);
    A = poloha();
    Bod[]
    // Vypočítame priesečníky priamky |AC| a kružnice {A; 2r} – sú dva:
    P = Svet.priesečníkyPriamkyAKružnice(A, C, A, 2 * polomer);
    // Z nich jeden je bod E – je to ten, ktorý je bližšie k bodu C:
    if (Svet.vzdialenosť(C, P[0]) &lt;
        Svet.vzdialenosť(C, P[P.length &#45; 1]))
        E = P[0]; else E = P[P.length &#45; 1];
    // Podobne nájdeme bod D:
    P = Svet.priesečníkyPriamkyAKružnice(B, C, B, 2 * polomer);
    if (Svet.vzdialenosť(C, P[0]) &lt;
        Svet.vzdialenosť(C, P[P.length &#45; 1]))
        D = P[0]; else D = P[P.length &#45; 1];
    // A nakoniec nakreslíme celé vajce (zložené z oblúkov):
    choďNaPoOblúku(D.polohaX(), D.polohaY());
    choďNaPoOblúku(E.polohaX(), E.polohaY());
    choďNaPoOblúku(B.polohaX(), B.polohaY());
    choďNaPoOblúku(A.polohaX(), A.polohaY());
    // Poznámka: Pozri varovanie v opise metódy:
    // choďNaPoOblúku(poloha)
}
finally
{
    // Vrátenie zálohy:
    skočNa(S);
    uhol(u);
}
 
 
Je to presná kópia algoritmu. Všimnite si, ktoré metódy
 sú v ňom použité – podľa toho sa dá prispôsobiť využitie tejto
 metódy, napríklad: Na vyplnenie vajca treba zdvihnúť pero,
 začať cestu, nakresliť vajce a prevziať a vyplniť alebo priamo
 vyplniť cestu.
 
 Metóda môže prijať nepovinný zoznam reťazcových parametrov,
 s nasledujúcim významom:
 "zaznamenajCestu", "cesta",
 "cestu" – zapne zaznamenávanie cesty pre záverečnú
 štvoricu príkazov choďNaPoOblúku (pozri kód vyššie). Tento príkaz zároveň prikáže
 dočasne zdvihnúť pero (počas vykonávania tejto metódy), aby sa
 vajce nenakreslilo. Tvar bude uložený v ceste. Po skončení vykonávania metódy je obnovená pôvodná
 poloha pera. (Ak bolo pero zdvihnuté, zostane zdvihnuté a po
 skončení vykonávania metódy sa nepoloží.)
 "nezaznamenajCestu", "necesta",
 "necestu" – vypne zaznamenávanie cesty zapnuté podľa
 predchádzajúceho parametra, ale nezruší zdvihnutie pera.
 "zdvihniPero", "nepero" – dočasne
 zdvihne pero – počas vykonávania tejto metódy. Po skončení
 vykonávania metódy je obnovená pôvodná poloha pera.
 "nezdvíhajpero", "nezdvihnipero",
 "pero" – eliminuje akciu dočasného zdvíhania pera.
 Toto má význam vykonať najmä po parametri "cesta"
 (alebo jeho alternatívy), ktorý zároveň prikazuje dočasne
 zdvihnúť pero. Takže kombináciou parametrov: "cesta"
 a "pero" (v uvedenom poradí) sa dá docieliť súčasné
 zaznamenanie cesty aj nakreslenie vajca. Pozor, ak bolo pero
 zdvihnuté, tento parameter ho nepoloží. Tento parameter len
 zruší automatické dočasné zdvíhanie pera, ale ak chceme vajce
 nakresliť, treba mať pero položené už pred volaním tejto
 metódy.
 
 Parametre sú vyhodnocované postupne, to znamená, že tie
 neskoršie uvedené môžu zrušiť alebo čiastočne zrušiť akcie tých
 skôr uvedených. Medzery, spojovníky a podčiarkovníky sú
 z parametrov pred ich vyhodnotením vymazané. Na veľkosti písmen
 nezáleží.
 
  
 
 Mimochodom, vytvorenie schémy vyššie bolo vykonané
 nasledujúcim spôsobom (ktorý je zároveň dobrou ukážkou použitia
 SVG podpory):
 
 
import java.awt.BasicStroke;
import java.awt.Shape;
import knižnica.*;
public class NákresKVajcu extends GRobot
{
    private final static BasicStroke čiaraNákresu = new BasicStroke(
        0.65f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 1.0f,
        new float[]{5.0f, 5.0f}, 0.0f);
    private NákresKVajcu()
    {
        super(800, 540);
        skry();
        písmo(new Písmo("Arial", Písmo.NORMÁLNE, 40));
        nákresKVajcu(130);
    }
    // Prekrytia metód využitých pri kreslení:
    @Override public Shape kružnica(double r)
    {
        Shape s;
        svgPodpora.pridaj(s = super.kružnica(r), this);
        return s;
    }
    @Override public void choďNa(Poloha p)
    {
        super.choďNa(p);
        svgPodpora.pridajÚsečku(this);
    }
    @Override public void choďNaPoOblúku(Poloha p)
    {
        začniCestu();
        super.choďNaPoOblúku(p);
        svgPodpora.pridaj(cesta(), this);
    }
    @Override public Shape kruh(double r)
    {
        Shape s;
        svgPodpora.pridaj(s = super.kruh(r), this);
        return s;
    }
    @Override public Shape text(String s)
    {
        svgPodpora.pridajText(s, this);
        return super.text(s);
    }
    public void nákresKVajcu(double polomer)
    {
        // Deklarácie a záloha (presne ako v príklade vyššie):
        Bod S, A, B, C, D, E;
        S = poloha();
        double u = uhol();
        // Vodiace čiary a kružnice nákresu budú nakreslené šedou
        // čiarkovanou čiarou:
        farba(šedá);
        čiara(čiaraNákresu);
        // || Poznámka: Všetky kresliace metódy použité nižšie (čiže   ||
        // || podľa poradia výskytu: kružnica, choďNa, choďNaPoOblúku, ||
        // || kruh aj text) sú vyššie prekryté tak, aby zároveň s tým  ||
        // || čo kreslia ukladali prislúchajúce tvary do inštancie     ||
        // || SVG podpory.                                             ||
        // Kružnica patriaca k zadanému polomeru vajca
        // (so stredom S a priemerom |AB|):
        kružnica(polomer);
        try
        {
            // Výpočty bodov vajca (zhodné s kódom algoritmu; vyššie):
            skoč(polomer);
            C = poloha();
            poloha(S);
            preskočVpravo(polomer);
            B = poloha();
            poloha(S);
            preskočVľavo(polomer);
            A = poloha();
            Bod[]
            P = Svet.priesečníkyPriamkyAKružnice(A, C, A, 2 * polomer);
            if (Svet.vzdialenosť(C, P[0]) &lt;
                Svet.vzdialenosť(C, P[P.length &#45; 1]))
                E = P[0]; else E = P[P.length &#45; 1];
            P = Svet.priesečníkyPriamkyAKružnice(B, C, B, 2 * polomer);
            if (Svet.vzdialenosť(C, P[0]) &lt;
                Svet.vzdialenosť(C, P[P.length &#45; 1]))
                D = P[0]; else D = P[P.length &#45; 1];
            // Úsečky nákresu (jedným ťahom):
            skočNa(E);
            choďNa(A);
            kružnica(2 * polomer); // (ľavá kružnica s polomerom |AB|)
            choďNa(B);
            kružnica(2 * polomer); // (pravá kružnica s polomerom |AB|)
            choďNa(D);
            // Menšia kružnica so stredom v bode C:
            skočNa(C);
            kružnica(Svet.vzdialenosť(C, D));
            // Farebné zvýraznenie segmentov vajca:
            hrúbkaČiary(3.25);
            skočNa(A);
            farba(svetlooranžová); choďNaPoOblúku(D);
            farba(svetlomodrá); choďNaPoOblúku(E);
            farba(svetlooranžová); choďNaPoOblúku(B);
            farba(svetločervená); choďNaPoOblúku(A);
            // Popisy bodov a ich vyznačenie čiernymi bodkami:
            farba(čierna);
            skočNa(A); kruh(3); preskočVľavo(40); text("A");
            skočNa(B); kruh(3); preskočVpravo(40); text("B");
            skočNa(C); kruh(3); skoč(30); text("C");
            skočNa(D); kruh(3); preskoč(-40, 10); text("D");
            skočNa(E); kruh(3); preskoč(40, 10); text("E");
            skočNa(S); kruh(3); odskoč(30); text("S");
        }
        finally
        {
            skočNa(S); uhol(u); // (vrátenie zálohy)
            // Uloženie do súboru:
            svgPodpora.zapíš("schema-vajca.svg", null, true);
        }
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("NákresKVajcu.cfg");
        new NákresKVajcu();
    }
}
 
  
Parametre:
polomer – polomer určujúci veľkosť vajíčka; ide o polomer
     kružnice so stredom S – pozri schému vyššie
parametre – nepovinný zoznam parametrov (podrobnosti sú
     v rámci opisu; vyššie)
trojzubec
public Shape trojzubec()
Táto metóda buď nakreslí, alebo vráti tvar trojzubca, ktorý
 je predvoleným tvarom
 grafického robota. Metóda má zvláštne postavenie. Má jednu
 ďalšiu verziu prijímajúcu jeden logický parameter –
 trojzubec(starý). Obidve verzie
 metódy vždy nanovo prepočítajú súradnice polygónu trojzubca
 podľa aktuálnej polohy,
 orientácie a veľkosti robota. Verzia prijímajúca logický parameter dovoľuje
 prepočítať tvar aj podľa starej koncepcie (pozri obrázok
 v jej opise), naproti tomu
 táto verzia metódy prepočíta vždy len novú verziu tvaru
 trojzubca. Inak fungujú rovnako.
 
 Ak je zapnuté kreslenie tvarov
 robotom, tak sa polygón priamo nakreslí alebo vyplní podľa
 aktuálneho nastavenia vypĺňania predvoleného tvaru, ktoré je ovplyvňované aj
 nastavením vykonávaným metódou vypĺňajTvary. Tvar je kreslený alebo vyplnený s použitím
 aktuálnej farby
 a hrúbky (prípadne aj
 typu) čiary robota. V tomto prípade
 má metóda návratovú hodnotu null.
 
 Ak je kreslenie tvarov
 vypnuté, tak metóda z polygónu vyrobí tvar Javy a vráti ho v návratovej hodnote.
 
 Táto metóda neaktualizuje pôsobisko. Slúži len na nakreslenie, vyplnenie alebo
 vrátenie tvaru trojzubca, ktorý slúži ako predvolený tvar
 robota.
 
 (Pozri aj zmeny tvaru robota zachytené na obrázku v opise
 metódy trojzubec(starý).)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
aktuálny tvar robota (v zmysle
     aktuálnych parametrov robota – polohy, smeru, veľkosti…;
     iba novú verziu – pozri aj obrázok v opise metódy
     trojzubec(starý)) alebo
     null (podrobnosti sú v opise vyššie)
trojzubec
public Shape trojzubec(boolean starý)
Táto metóda buď nakreslí, alebo vráti starý alebo nový tvar
 trojzubca, ktorý tvorí predvolený tvar grafického robota. Spôsob činnosti je
 rovnaký ako pri metóde trojzubec(),
 detaily nájdete tam. Jediný rozdiel je, že táto verzia metódy
 dovoľuje nakresliť alebo vrátiť aj starú verziu tvaru –
 umožňuje to hodnota logického parametra starý.
 
 Rozdiel medzi starým a novým tvarom je zobrazený na
 obrázku nižšie. Na ilustráciu sú na obrázku zároveň
 nakreslené kružnice odrážajúce skutočnú veľkosť robota.
 Plocha kruhu ohraničeného kružnicou bola a je zároveň
 predvolenou kolíznou „oblasťou“
 (resp. plochou) robota.
 
 
 Starý predvolený tvar robota (pred verziou
 1.75 – vľavo) a nový predvolený tvar robota
 (vpravo)(šedé kružnice sú len
 ilustračné).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
starý – ak je hodnota parametera rovná true,
     tak táto metóda pracuje so starým tvarom robota (pozri
     obrázok vyššie), inak pracuje rovnako ako metóda
     trojzubec()
Návratová hodnota:
aktuálny (v zmysle aktuálnych parametrov robota –
     polohy, smeru, veľkosti…) starý alebo nový
     tvar robota (pozri obrázok vyššie)
     alebo null (podrobnosti sú v opise metódy
     trojzubec())
kresliTvar
public Shape kresliTvar(Shape tvar)
Nakreslí čiaru podľa zadaného tvaru (hrúbkou a farbou čiary
 nastavenou pre tento robot).
 
 Táto metóda berie do úvahy príznak
 kreslenia tvarov. Treba podotknúť,
 že ak je kreslenie tvarov robotom vypnuté, tak volanie tejto metódy nemá žiadny praktický
 význam, pretože len vráti rovnaký tvar, ktorý jej bol zadaný
 ako parameter (tvar).
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie nakresliteľné.
 
 Poznámka: Názov tejto metódy koliduje
 s názvom metódy kresliTvar() určenej na
 prekrytie a kreslenie vlastného tvaru robota. Okrem toho je
 definovaná metóda kresliTvary(), ktorá
 slúži na opätovné povolenie kreslenia tvarov a písania textov
 robotom po ich vypnutí metódou nekresliTvary().
Parametre:
tvar – objekt typu Shape
Návratová hodnota:
vráti rovnaký tvar ako bol zadaný v parametri
     tvar (na ďalšie použitie)
vyplňTvar
public Shape vyplňTvar(Shape tvar)
Vyplní plochu zadaného tvaru farbou nastavenou pre tento
 robot.
 
 Metóda berie do úvahy príznak
 kreslenia tvarov. Treba podotknúť,
 že ak je kreslenie tvarov robotom vypnuté, tak volanie tejto metódy nemá žiadny praktický
 význam, pretože len vráti rovnaký tvar, ktorý jej bol zadaný
 ako parameter (tvar).
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
Parametre:
tvar – objekt typu Shape
Návratová hodnota:
vráti rovnaký tvar ako bol zadaný v parametri
     tvar (na ďalšie použitie)
vyplnTvar
public Shape vyplnTvar(Shape tvar)
 Alias pre vyplňTvar.
vyplňTvar
public Shape vyplňTvar(Shape tvar,
                       String súbor)
Vyplní plochu zadaného tvaru zadanou textúrou.
 Textúra je zadaná ako názov súboru s obrázkom, ktorý bude
 použitý na dlaždicové vyplnenie plochy tvaru.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Metóda berie do úvahy príznak
 kreslenia tvarov. Treba podotknúť,
 že ak je kreslenie tvarov robotom vypnuté, tak volanie tejto metódy nemá žiadny praktický
 význam, pretože len vráti rovnaký tvar, ktorý jej bol zadaný
 ako parameter (tvar).
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape
súbor – názov súboru s obrázkom textúry
Návratová hodnota:
vráti rovnaký tvar ako bol zadaný v parametri
     tvar (na ďalšie použitie)
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
Svet.priečinokObrázkov(), 
Svet.priečinokObrázkov(String)
vyplnTvar
public Shape vyplnTvar(Shape tvar,
                       String súbor)
 Alias pre vyplňTvar.
vyplňTvar
public Shape vyplňTvar(Shape tvar,
                       Image výplň)
Vyplní plochu zadaného tvaru zadanou textúrou.
 Textúra bude použitá na dlaždicové vyplnenie plochy tvaru. Je
 zadaná ako objekt typu Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
 
 Metóda berie do úvahy príznak
 kreslenia tvarov. Treba podotknúť,
 že ak je kreslenie tvarov robotom vypnuté, tak volanie tejto metódy nemá žiadny praktický
 význam, pretože len vráti rovnaký tvar, ktorý jej bol zadaný
 ako parameter (tvar).
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape
výplň – obrázok textúry
Návratová hodnota:
vráti rovnaký tvar ako bol zadaný v parametri
     tvar (na ďalšie použitie)
vyplnTvar
public Shape vyplnTvar(Shape tvar,
                       Image výplň)
 Alias pre vyplňTvar.
kresliTvar
public Shape kresliTvar(Shape tvar,
                        boolean upravRobotom)
Nakreslí čiaru podľa zadaného tvaru (hrúbkou a farbou čiary
 nastavenou pre tento robot). Ak je hodnota parametra
 upravRobotom rovná true, tak bude tvar
 pootočený podľa smeru robota (za východisko je považovaných
 90°; odchýlka v kladom alebo zápornom smere náležite pootočí
 tvar) a posunutý o súradnice robota na plátne (východisko
 posunu je umiestnené do bodu [0, 0] – do stredu plátna; ak
 sa robot nachádza v strede plátna, tak sa poloha tvaru
 nezmení).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota a tiež príznak
 kreslenia tvarov.
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie nakresliteľné.
 
 Poznámka: Názov tejto metódy koliduje
 s názvom metódy kresliTvar() určenej na
 prekrytie a kreslenie vlastného tvaru robota. Okrem toho je
 definovaná metóda kresliTvary(), ktorá
 slúži na opätovné povolenie kreslenia tvarov a písania textov
 robotom po ich vypnutí metódou nekresliTvary().
Parametre:
tvar – objekt typu Shape
upravRobotom – ak je hodnota tohto parametra rovná
     true, tak zadaný tvar bude upravený podľa polohy
     a orientácie robota, inak tvar nebude ovplyvňovaný
Návratová hodnota:
vráti buď rovnaký tvar ako bol zadaný v parametri,
     tvar, alebo tvar transformovaný podľa polohy
     a orientácie robota (na ďalšie použitie)
vyplňTvar
public Shape vyplňTvar(Shape tvar,
                       boolean upravRobotom)
Vyplní plochu zadaného tvaru farbou nastavenou pre tento
 robot. Ak je hodnota parametra upravRobotom rovná
 true, tak bude vypĺňaný tvar pootočený podľa
 smeru robota (za východisko je považovaných 90°; odchýlka
 v kladom alebo zápornom smere náležite pootočí tvar)
 a posunutý o súradnice robota na plátne (východisko posunu
 je umiestnené do bodu [0, 0] – do stredu plátna; ak sa robot
 nachádza v strede plátna, tak sa poloha tvaru nezmení).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota a tiež príznak
 kreslenia tvarov.
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
Parametre:
tvar – objekt typu Shape
upravRobotom – ak je hodnota tohto parametra rovná
     true, tak zadaný tvar bude upravený podľa polohy
     a orientácie robota, inak tvar nebude ovplyvňovaný
Návratová hodnota:
vráti buď rovnaký tvar ako bol zadaný v parametri,
     tvar, alebo tvar transformovaný podľa polohy
     a orientácie robota (na ďalšie použitie)
vyplnTvar
public Shape vyplnTvar(Shape tvar,
                       boolean upravRobotom)
 Alias pre vyplňTvar.
vyplňTvar
public Shape vyplňTvar(Shape tvar,
                       String súbor,
                       boolean upravRobotom)
Vyplní plochu zadaného tvaru zadanou textúrou. Ak je hodnota
 parametra upravRobotom rovná true, tak
 zadaný tvar bude pootočený podľa smeru[1] robota
 a posunutý o súradnice[2] robota na plátne.
 Pootočenie a poloha textúry nie sú nijako ovplyvňované
 polohou a smerom robota. Textúra je zadaná ako názov súboru
 s obrázkom, ktorý bude použitý na dlaždicové vyplnenie
 plochy tvaru.
 
 [1] – za východisko je považovaných 90°; odchýlka
 v kladom alebo zápornom smere náležite pootočí
 tvar.
 [2] – východisko posunu je umiestnené do bodu [0, 0] –
 do stredu plátna; ak sa robot nachádza v strede plátna,
 tak sa poloha tvaru nezmení.
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota a tiež príznak
 kreslenia tvarov.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape
súbor – názov súboru s obrázkom textúry
upravRobotom – ak je hodnota tohto parametra rovná
     true, tak zadaný tvar bude upravený podľa polohy
     a orientácie robota, inak tvar nebude ovplyvňovaný
Návratová hodnota:
vráti buď rovnaký tvar ako bol zadaný v parametri,
     tvar, alebo tvar transformovaný podľa polohy
     a orientácie robota (na ďalšie použitie)
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
Svet.priečinokObrázkov(), 
Svet.priečinokObrázkov(String)
vyplnTvar
public Shape vyplnTvar(Shape tvar,
                       String súbor,
                       boolean upravRobotom)
 Alias pre vyplňTvar.
vyplňTvar
public Shape vyplňTvar(Shape tvar,
                       Image výplň,
                       boolean upravRobotom)
Vyplní plochu zadaného tvaru zadanou textúrou. Ak je hodnota
 parametra upravRobotom rovná true, tak
 zadaný tvar bude pootočený podľa smeru[1] robota
 a posunutý o súradnice[2] robota na plátne.
 Pootočenie a poloha textúry nie sú nijako ovplyvňované
 polohou a smerom robota. Textúra bude použitá na dlaždicové
 vyplnenie plochy tvaru. Je zadaná ako objekt typu
 Image, za ktorý môže byť dosadený aj objekt
 typu Obrázok.
 
 [1] – za východisko je považovaných 90°; odchýlka
 v kladom alebo zápornom smere náležite pootočí
 tvar.
 [2] – východisko posunu je umiestnené do bodu [0, 0] –
 do stredu plátna; ak sa robot nachádza v strede plátna,
 tak sa poloha tvaru nezmení.
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota a tiež príznak
 kreslenia tvarov.
 
 Poznámka: Táto metóda bola pridaná
 spolu s triedou SVGPodpora, aby boli ňou
 rozpoznané tvary jednoduchšie vyplniteľné.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape
výplň – obrázok textúry
upravRobotom – ak je hodnota tohto parametra rovná
     true, tak zadaný tvar bude upravený podľa polohy
     a orientácie robota, inak tvar nebude ovplyvňovaný
Návratová hodnota:
vráti buď rovnaký tvar ako bol zadaný v parametri,
     tvar, alebo tvar transformovaný podľa polohy
     a orientácie robota (na ďalšie použitie)
vyplnTvar
public Shape vyplnTvar(Shape tvar,
                       Image výplň,
                       boolean upravRobotom)
 Alias pre vyplňTvar.
myšVKruhu
public boolean myšVKruhu(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v kruhu so
 stredom na aktuálnej pozícii robota a zadaným polomerom.
Parametre:
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVElipse(double, double), 
myšVPôsobisku(), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVOblasti(Area), 
myšVKruhu()
mysVKruhu
public boolean mysVKruhu(double polomer)
 Alias pre myšVKruhu.
myšVElipse
public boolean myšVElipse(double a,
                          double b)
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi zadaných poloosí.
Parametre:
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVKruhu(double), 
myšVPôsobisku(), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVOblasti(Area), 
myšVKruhu()
mysVElipse
public boolean mysVElipse(double a,
                          double b)
 Alias pre mysVElipse.
myšVoŠtvorci
public boolean myšVoŠtvorci(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom udaným polomerom vpísanej kružnice.
Parametre:
polomer – polomer kružnice vpísanej do štvorca so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVElipse(double, double), 
myšVKruhu(double), 
myšVPôsobisku(), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVOblasti(Area), 
myšVKruhu()
mysVoStvorci
public boolean mysVoStvorci(double polomer)
 Alias pre myšVoŠtvorci.
myšVObdĺžniku
public boolean myšVObdĺžniku(double a,
                             double b)
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi udanými ako poloosi vpísanej elipsy.
Parametre:
a – veľkosť hlavnej poloosi (šírka vpísanej elipsy)
b – veľkosť vedľajšej poloosi (výška vpísanej elipsy)
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVKruhu(double), 
myšVElipse(double, double), 
myšVPôsobisku(), 
myšVoŠtvorci(double), 
myšVHviezde(double), 
myšVOblasti(Area), 
myšVKruhu()
mysVObdlzniku
public boolean mysVObdlzniku(double a,
                             double b)
 Alias pre myšVObdĺžniku.
myšVHviezde
public boolean myšVHviezde(double polomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v päťcípej
 hviezde so stredom na aktuálnej pozícii robota, rotovanej
 v smere robota a rozmerom udaným prostredníctvom polomeru
 opísanej kružnice.
Parametre:
polomer – polomer kružnice opísanej okolo hviezdy so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVElipse(double, double), 
myšVKruhu(double), 
myšVPôsobisku(), 
myšVObdĺžniku(double, double), 
myšVOblasti(Area), 
myšVKruhu()
mysVHviezde
public boolean mysVHviezde(double polomer)
 Alias pre myšVHviezde.
myšVOblasti
public boolean myšVOblasti(Area oblasť)
Zistí, či sa aktuálne súradnice myši nachádzajú v zadanej
 oblasti, ktorá je na účely porovnania rotovaná podľa smeru
 robota (za východisko je považovaných 90°; odchýlka v kladom
 alebo zápornom smere náležite rotuje oblasť) a posunutá
 o súradnice robota na plátne (stred sa nachádza v bode [0, 0] –
 v strede plátna).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
Parametre:
oblasť – oblasť, ktorá má byť použitá na overenie
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVCeste(), 
myšVElipse(double, double), 
myšVKruhu(double), 
myšVPôsobisku(), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVKruhu()
mysVOblasti
public boolean mysVOblasti(Area oblasť)
 Alias pre myšVOblasti.
myšVKruhu
public boolean myšVKruhu()
Zistí, či sa aktuálne súradnice myši nachádzajú v kruhu so
 stredom na aktuálnej pozícii robota a polomerom s veľkosťou robota.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVElipse(double), 
myšVoŠtvorci(), 
myšVObdĺžniku(double), 
myšVHviezde()
mysVKruhu
public boolean mysVKruhu()
 Alias pre myšVKruhu.
myšV
public boolean myšV()
 Alias pre myšVKruhu.
mysV
public boolean mysV()
 Alias pre myšVKruhu.
myšVElipse
public boolean myšVElipse(double pomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru poloosí.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer veľkosť hlavnej a vedľajšej poloosi
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVKruhu(), 
myšVoŠtvorci(), 
myšVObdĺžniku(double), 
myšVHviezde()
mysVElipse
public boolean mysVElipse(double pomer)
 Alias pre mysVElipse.
myšVElipse
public boolean myšVElipse()
Zistí, či sa aktuálne súradnice myši nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVKruhu(), 
myšVoŠtvorci(), 
myšVObdĺžniku(), 
myšVHviezde()
mysVElipse
public boolean mysVElipse()
 Alias pre mysVElipse.
myšVoŠtvorci
public boolean myšVoŠtvorci()
Zistí, či sa aktuálne súradnice myši nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom podľa veľkosti
 robota.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVElipse(double), 
myšVKruhu(), 
myšVObdĺžniku(double), 
myšVHviezde()
mysVoStvorci
public boolean mysVoStvorci()
 Alias pre myšVoŠtvorci.
myšVObdĺžniku
public boolean myšVObdĺžniku(double pomer)
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru strán.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
pomer – pomer veľkosť hlavnej a vedľajšej poloosi
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVKruhu(), 
myšVElipse(double), 
myšVoŠtvorci(), 
myšVHviezde()
mysVObdlzniku
public boolean mysVObdlzniku(double pomer)
 Alias pre myšVObdĺžniku.
myšVObdĺžniku
public boolean myšVObdĺžniku()
Zistí, či sa aktuálne súradnice myši nachádzajú v obdĺžniku
 pootočenom v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVKruhu(), 
myšVElipse(), 
myšVoŠtvorci(), 
myšVHviezde()
mysVObdlzniku
public boolean mysVObdlzniku()
 Alias pre myšVObdĺžniku.
myšVHviezde
public boolean myšVHviezde()
Zistí, či sa aktuálne súradnice myši nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom podľa veľkosti
 robota.
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVElipse(double), 
myšVKruhu(), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double)
mysVHviezde
public boolean mysVHviezde()
 Alias pre myšVHviezde.
bodVKruhu
public boolean bodVKruhu(double súradnicaBoduX,
                         double súradnicaBoduY,
                         double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu so
 zadaným polomerom stredom na aktuálnej pozícii robota.
 Nasledujúca metóda dovoľuje namiesto súradníc bodu použiť
 objekt: bodVKruhu(Poloha
 objekt, double polomer)
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVKruhu
public boolean bodVKruhu(Poloha objekt,
                         double polomer)
Funguje rovnako ako metóda bodVKruhu(x, y, polomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVElipse
public boolean bodVElipse(double súradnicaBoduX,
                          double súradnicaBoduY,
                          double a,
                          double b)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi zadaných poloosí. Nasledujúca metóda
 dovoľuje namiesto súradníc bodu použiť objekt:
 bodVElipse(Poloha
 objekt, double a, double b)
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVElipse
public boolean bodVElipse(Poloha objekt,
                          double a,
                          double b)
Funguje rovnako ako metóda bodVElipse(x, y, a, b), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
a – veľkosť hlavnej poloosi (na šírku elipsy)
b – veľkosť vedľajšej poloosi (na výšku elipsy)
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVoŠtvorci
public boolean bodVoŠtvorci(double súradnicaBoduX,
                            double súradnicaBoduY,
                            double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom udaným polomerom vpísanej kružnice. Nasledujúca
 metóda dovoľuje namiesto súradníc bodu použiť objekt: bodVoŠtvorci(Poloha objekt, double
 polomer)
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
polomer – polomer kružnice vpísanej do štvorca so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVoStvorci
public boolean bodVoStvorci(double súradnicaBoduX,
                            double súradnicaBoduY,
                            double polomer)
 Alias pre bodVoŠtvorci.
bodVoŠtvorci
public boolean bodVoŠtvorci(Poloha objekt,
                            double polomer)
Funguje rovnako ako metóda bodVoŠtvorci(x, y, polomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
polomer – polomer kružnice vpísanej do štvorca so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVoStvorci
public boolean bodVoStvorci(Poloha objekt,
                            double polomer)
 Alias pre bodVoŠtvorci.
bodVObdĺžniku
public boolean bodVObdĺžniku(double súradnicaBoduX,
                             double súradnicaBoduY,
                             double a,
                             double b)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi udanými ako poloosi vpísanej elipsy.
 Nasledujúca metóda dovoľuje namiesto súradníc bodu použiť
 objekt: bodVObdĺžniku(Poloha objekt, double a, double b)
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
a – veľkosť hlavnej poloosi (šírka vpísanej elipsy)
b – veľkosť vedľajšej poloosi (výška vpísanej elipsy)
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(double súradnicaBoduX,
                             double súradnicaBoduY,
                             double a,
                             double b)
 Alias pre bodVObdĺžniku.
bodVObdĺžniku
public boolean bodVObdĺžniku(Poloha objekt,
                             double a,
                             double b)
Funguje rovnako ako metóda bodVObdĺžniku(x, y, a, b), len
 namiesto súradníc bodu je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
a – veľkosť hlavnej poloosi (šírka vpísanej elipsy)
b – veľkosť vedľajšej poloosi (výška vpísanej elipsy)
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(Poloha objekt,
                             double a,
                             double b)
 Alias pre bodVObdĺžniku.
bodVHviezde
public boolean bodVHviezde(double súradnicaBoduX,
                           double súradnicaBoduY,
                           double polomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom udaným polomerom opísanej kružnice. Nasledujúca
 metóda dovoľuje namiesto súradníc bodu použiť objekt: bodVHviezde(Poloha objekt, double
 polomer)
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
polomer – polomer kružnice opísanej okolo hviezdy so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVHviezde
public boolean bodVHviezde(Poloha objekt,
                           double polomer)
Funguje rovnako ako metóda bodVHviezde(x, y, polomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
polomer – polomer kružnice opísanej okolo hviezdy so
     stredom na aktuálnej pozícii robota
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVTvare
public boolean bodVTvare(double súradnicaBoduX,
                         double súradnicaBoduY,
                         Shape tvar)
Zistí, či sa súradnice zadaného bodu nachádzajú v zadanom
 tvare[1]. Nasledujúca metóda dovoľuje namiesto
 súradníc bodu použiť objekt: bodVTvare(Poloha objekt, Shape tvar).
 
 [1] – podľa 
definície prítomnosti bodu v tvare
 (originál je v anglickom jazyku, preklad nasleduje).
 
 Podľa definície je bod považovaný za ležiaci vo vnútri
 tvaru vtedy a len vtedy, ak:
 
 
 leží úplne vo vnútri hraníc tvaru,
 alebo leží presne na hranici tvaru a priestor
 priliehajúci k bodu v stúpajúcom smere osi x je úplne
 umiestnený vo vnútri hraníc tvaru,
 alebo leží presne na horizontálnom segmente tvaru
 a priestor priliehajúci k bodu v stúpajúcom smere osi y je
 úplne umiestnený vo vnútri hraníc tvaru.
 
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
tvar – tvar použitý na overenie
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
Oblasť.bodV(double, double), 
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area)
bodVTvare
public boolean bodVTvare(Poloha objekt,
                         Shape tvar)
Funguje rovnako ako metóda bodVTvare(x, y, tvar), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
tvar – tvar použitý na overenie
Návratová hodnota:
true/&#8203;false
Pozri tiež:
Oblasť.bodV(Poloha), 
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area)
bodVKruhu
public boolean bodVKruhu(double súradnicaBoduX,
                         double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu
 s polomerom veľkosti robota
 a stredom na aktuálnej pozícii robota. Nasledujúca metóda
 dovoľuje namiesto súradníc bodu použiť objekt:
 bodVKruhu(Poloha objekt)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVElipse(double, double, double), 
bodVoŠtvorci(double, double), 
bodVObdĺžniku(double, double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodV
public boolean bodV(double súradnicaBoduX,
                    double súradnicaBoduY)
 Alias pre bodVKruhu.
bodVKruhu
public boolean bodVKruhu(Poloha objekt)
Funguje rovnako ako metóda bodVKruhu(x, y), len namiesto súradníc bodu je použitá
 poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVElipse(Poloha, double), 
bodVoŠtvorci(Poloha), 
bodVObdĺžniku(Poloha, double), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodV
public boolean bodV(Poloha objekt)
 Alias pre bodVKruhu.
bodVElipse
public boolean bodVElipse(double súradnicaBoduX,
                          double súradnicaBoduY,
                          double pomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi odvodenými z veľkosti robota a zadaného pomeru strán. Nasledujúca metóda
 dovoľuje namiesto súradníc bodu použiť objekt:
 bodVElipse(Poloha objekt,
 double pomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
pomer – pomer šírky a výšky elipsy
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVoŠtvorci(double, double), 
bodVObdĺžniku(double, double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVElipse
public boolean bodVElipse(Poloha objekt,
                          double pomer)
Funguje rovnako ako metóda bodVElipse(x, y, pomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
pomer – pomer šírky a výšky elipsy
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVoŠtvorci(Poloha), 
bodVObdĺžniku(Poloha, double), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVElipse
public boolean bodVElipse(double súradnicaBoduX,
                          double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v elipse
 pootočenej v smere robota, so stredom na aktuálnej pozícii
 robota a s rozmermi odvodenými z veľkosti robota a vlastnosti robota pomer.
 Nasledujúca metóda dovoľuje namiesto súradníc bodu použiť
 objekt: bodVElipse(Poloha
 objekt).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVoŠtvorci(double, double), 
bodVObdĺžniku(double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVElipse
public boolean bodVElipse(Poloha objekt)
Funguje rovnako ako metóda bodVElipse(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVoŠtvorci(Poloha), 
bodVObdĺžniku(Poloha), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVoŠtvorci
public boolean bodVoŠtvorci(double súradnicaBoduX,
                            double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú vo štvorci so
 stredom na aktuálnej pozícii robota, rotovanom v smere robota
 a rozmerom podľa veľkosti
 robota. Nasledujúca metóda dovoľuje namiesto súradníc bodu
 použiť objekt:
 bodVoŠtvorci(Poloha objekt)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVElipse(double, double, double), 
bodVObdĺžniku(double, double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVoStvorci
public boolean bodVoStvorci(double súradnicaBoduX,
                            double súradnicaBoduY)
 Alias pre bodVoŠtvorci.
bodVoŠtvorci
public boolean bodVoŠtvorci(Poloha objekt)
Funguje rovnako ako metóda bodVoŠtvorci(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVElipse(Poloha, double), 
bodVObdĺžniku(Poloha, double), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVoStvorci
public boolean bodVoStvorci(Poloha objekt)
 Alias pre bodVoŠtvorci.
bodVObdĺžniku
public boolean bodVObdĺžniku(double súradnicaBoduX,
                             double súradnicaBoduY,
                             double pomer)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi podľa veľkosti robota a zadaného pomeru strán. Nasledujúca metóda
 dovoľuje namiesto súradníc bodu použiť objekt: bodVObdĺžniku(objekt, pomer).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
pomer – pomer šírky a výšky obdĺžnika
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVElipse(double, double, double), 
bodVoŠtvorci(double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(double súradnicaBoduX,
                             double súradnicaBoduY,
                             double pomer)
 Alias pre bodVObdĺžniku.
bodVObdĺžniku
public boolean bodVObdĺžniku(Poloha objekt,
                             double pomer)
Funguje rovnako ako metóda bodVObdĺžniku(x, y, pomer), len namiesto
 súradníc bodu je použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
pomer – pomer šírky a výšky obdĺžnika
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVElipse(Poloha, double), 
bodVoŠtvorci(Poloha), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(Poloha objekt,
                             double pomer)
 Alias pre bodVObdĺžniku.
bodVObdĺžniku
public boolean bodVObdĺžniku(double súradnicaBoduX,
                             double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v obdĺžniku
 so stredom na aktuálnej pozícii robota, rotovanom v smere
 robota a s rozmermi podľa veľkosti robota a vlastnosti robota pomer.
 Nasledujúca metóda dovoľuje namiesto súradníc bodu použiť
 objekt: bodVObdĺžniku(objekt).
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVElipse(double, double), 
bodVoŠtvorci(double, double), 
bodVHviezde(double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(double súradnicaBoduX,
                             double súradnicaBoduY)
 Alias pre bodVObdĺžniku.
bodVObdĺžniku
public boolean bodVObdĺžniku(Poloha objekt)
Funguje rovnako ako metóda bodVObdĺžniku(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVElipse(Poloha, double), 
bodVoŠtvorci(Poloha), 
bodVHviezde(Poloha), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
bodVObdlzniku
public boolean bodVObdlzniku(Poloha objekt)
 Alias pre bodVObdĺžniku.
bodVHviezde
public boolean bodVHviezde(double súradnicaBoduX,
                           double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v hviezde so
 stredom na aktuálnej pozícii robota, rotovanej v smere robota
 a rozmerom podľa veľkosti
 robota. Nasledujúca metóda dovoľuje namiesto súradníc bodu
 použiť objekt:
 bodVHviezde(Poloha objekt)
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVKruhu(double, double), 
bodVElipse(double, double, double), 
bodVoŠtvorci(double, double), 
bodVObdĺžniku(double, double, double), 
bodVCeste(double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVHviezde
public boolean bodVHviezde(Poloha objekt)
Funguje rovnako ako metóda bodVHviezde(x, y), len namiesto súradníc bodu je
 použitá poloha zadaného objektu…
 
 Informácia: Mierka nemá na funkciu tejto metódy vplyv.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVKruhu(Poloha), 
bodVElipse(Poloha, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double), 
bodVCeste(Poloha), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
obrázok
public void obrázok(String súbor)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia. Pozri aj spôsobKreslenia. Predvolene to znamená obrázok rotovaný
 kolmo na aktuálny smer robota a vycentrovaný na aktuálnej
 polohe robota. Takže pri základných hodnotách robota, sa
 obrázok zobrazí vodorovne v strede plátna (pretože robot je
 na začiatku umiestnený v strede podlahy (v bode [0, 0])
 a smeruje hore (v uhle 90°)).
 Veľkosť kresleného obrázka je ovplyvňovaná mierkou robota, ktorá je v predvolenom stave
 pomerom aktuálnej veľkosti robota a veľkosti robota, ktorú mal
 pri svojom vytvorení. Mierka sa dá upravovať metódou mierka a resetuje sa i pri zmene vlastného obrázkového tvaru robota.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia. Pozri aj spôsobKreslenia. Predvolene to znamená obrázok rotovaný
 kolmo na aktuálny smer robota a vycentrovaný na aktuálnej
 polohe robota. Takže pri základných hodnotách robota, sa
 obrázok zobrazí vodorovne v strede plátna (pretože robot je
 na začiatku umiestnený v strede podlahy (v bode [0, 0])
 a smeruje hore (v uhle 90°)).
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    int spôsobKreslenia)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
 Veľkosť kresleného obrázka je ovplyvňovaná mierkou robota, ktorá je v predvolenom stave
 pomerom aktuálnej veľkosti robota a veľkosti robota, ktorú mal
 pri svojom vytvorení. Mierka sa dá upravovať metódou mierka a resetuje sa i pri zmene vlastného obrázkového tvaru robota.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int, double), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    int spôsobKreslenia)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    int spôsobKreslenia,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    int spôsobKreslenia,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    double Δx,
                    double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa aktuálneho spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy. Pozri aj spôsobKreslenia.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    double Δx,
                    double Δy)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa zadaného spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    double Δx,
                    double Δy,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Pozri aj spôsobKreslenia.
 Odchýlky otáčania sú upravené podľa mierky.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double), 
obrázok(String, int, double, double, double)
obrazok
public void obrazok(String súbor,
                    double Δx,
                    double Δy,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Odchýlky otáčania sú upravené podľa zadanej mierky.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double)
obrazok
public void obrazok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia. Pozri aj spôsobKreslenia. Predvolene to znamená obrázok rotovaný
 kolmo na aktuálny smer robota a vycentrovaný na aktuálnej
 polohe robota. Takže pri základných hodnotách robota, sa
 obrázok zobrazí vodorovne v strede plátna (pretože robot je
 na začiatku umiestnený v strede podlahy (v bode [0, 0])
 a smeruje hore (v uhle 90°)).
 Veľkosť kresleného obrázka je ovplyvňovaná mierkou robota, ktorá je v predvolenom stave
 pomerom aktuálnej veľkosti robota a veľkosti robota, ktorú mal
 pri svojom vytvorení. Mierka sa dá upravovať metódou mierka a resetuje sa i pri zmene vlastného obrázkového tvaru robota.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
obrazok
public void obrazok(Image obrázok)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia. Pozri aj spôsobKreslenia. Predvolene to znamená obrázok rotovaný
 kolmo na aktuálny smer robota a vycentrovaný na aktuálnej
 polohe robota. Takže pri základných hodnotách robota, sa
 obrázok zobrazí vodorovne v strede plátna (pretože robot je
 na začiatku umiestnený v strede podlahy (v bode [0, 0])
 a smeruje hore (v uhle 90°)).
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
obrazok
public void obrazok(Image obrázok,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    int spôsobKreslenia)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia. Obrázok je všeobecný typ Image, za
 ktorý môže byť dosadený aj objekt typu Obrázok.
 Veľkosť kresleného obrázka je ovplyvňovaná mierkou robota, ktorá je v predvolenom stave
 pomerom aktuálnej veľkosti robota a veľkosti robota, ktorú mal
 pri svojom vytvorení. Mierka sa dá upravovať metódou mierka a resetuje sa i pri zmene vlastného obrázkového tvaru robota.
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    int spôsobKreslenia)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    int spôsobKreslenia,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia. Obrázok je všeobecný typ Image, za
 ktorý môže byť dosadený aj objekt typu Obrázok.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    int spôsobKreslenia,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    double Δx,
                    double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa aktuálneho spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
 Pozri aj spôsobKreslenia. Obrázok
 je všeobecný typ Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    double Δx,
                    double Δy)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    double Δx,
                    double Δy,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa aktuálneho spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Pozri aj spôsobKreslenia.
 Obrázok je všeobecný typ Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
 Odchýlky otáčania sú upravené podľa mierky.
 
 Komplexný interaktívny príklad použitia tejto metódy je
 v opise metódy obrázok(obrázok, spôsobKreslenia, Δx, Δy,
 mierka).
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    double Δx,
                    double Δy,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy)
Nakreslí obrázok v mierke robota na
 pozícii robota podľa zadaného spôsobu kreslenia s vysunutím
 stredu otáčania o zadané odchýlky Δx a Δy.
 Obrázok je všeobecný typ Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierka)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Obrázok je všeobecný typ Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
 Odchýlky otáčania sú upravené podľa mierky.
 
 Príklad:
 
 Nasledujúci príklad ukazuje možnosti transformácie obrázkov
 s pomocou programovacieho rámca GRobot. Príklad je interaktívny.
 Po preložení a spustení sú na obrazovke zobrazené informácie
 o tom, ako je možné zobrazený obrázok transformovať, pričom
 používateľ rýchlo zistí, že obrázkom (a jeho transformáciami)
 vlastne na plátno kreslí.
 
 
import knižnica.*;
public class TestRotovaniaObrázkov extends GRobot
{
    // Posunutie stredu rotácie a mierka obrázka.
    private double Δx = 0.0, Δy = 0.0, mierka = 1.0;
    // Obrázok, ktorý bude transformovaný.
    private Obrázok obrázok;
    // Metóda na „vyrobenie“ obsahu obrázka.
    private void vyrobObrázok()
    {
        obrázok = new Obrázok(300, 200);
        kresliNaObrázok(obrázok);
        farba(199, 201, 203, 5);
        for (double i = 1.0; i &gt; 0.0; i &#45;= 0.03)
            vyplňElipsu(150.0 * i, 100.0 * i);
        farba(99, 101, 103);
        nekresliTvary();
        písmo("Arial", 32);
        skočNa(0, 10);
        Oblasť text1 = new Oblasť(text("Text v elipse"));
        vyplňOblasť(text1);
        písmo("Arial", 16);
        skočNa(0, &#45;20);
        Oblasť text2 = new Oblasť(text("na testovanie rotácie obrázka…"));
        vyplňOblasť(text2);
        obrázok.rozmaž();
        farba(čierna);
        písmo("Arial", 32);
        skočNa(0, 10);
        vyplňOblasť(text1);
        písmo("Arial", 16);
        skočNa(0, &#45;20);
        vyplňOblasť(text2);
        kresliNaPodlahu();
        kresliTvary();
    }
    // Konštruktor.
    private TestRotovaniaObrázkov()
    {
        super(600, 400);
        skry();
        vyrobObrázok();
        Svet.vypíšRiadok("Ťahaním myšou (alebo klikom) sa dá dosiahnuť:");
        Svet.vypíšRiadok("             Shift – vysunutie stredu otáčania");
        Svet.vypíšRiadok("           Control – zmena mierky obrázka");
        Svet.vypíšRiadok("               Alt – rotácia obrázka");
        Svet.vypíšRiadok("«bez modifikátora» – presunutie obrázka");
        kreslenie();
    }
    // Metóda, ktorá pridáva transformovaný obrázok ku kresbe na plátne.
    public void kreslenie()
    {
        Bod bod = poloha();
        obrázok(obrázok, Δx, Δy, mierka);
        farba(modrá);
        kruh(4);
        skoč(Δx, Δy);
        farba(červená);
        kruh(3);
        skočNa(bod);
        farba(čierna);
    }
    // Reakcia na kliknutie.
    @Override public void klik()
    {
        ťahanieMyšou();
    }
    // Reakcia na ťahanie myšou.
    @Override public void ťahanieMyšou()
    {
        if (ÚdajeUdalostí.myš().isShiftDown())
        {
            Δx = ÚdajeUdalostí.polohaMyšiX() &#45; polohaX();
            Δy = ÚdajeUdalostí.polohaMyšiY() &#45; polohaY();
        }
        else if (ÚdajeUdalostí.myš().isControlDown())
        {
            mierka = vzdialenosťKMyši() / 125.0;
        }
        else if (ÚdajeUdalostí.myš().isAltDown())
        {
            Bod bod = poloha();
            skoč(Δx, Δy);
            otočNaMyš();
            skočNa(bod);
        }
        else
        {
            skočNaMyš();
        }
        kreslenie();
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        new TestRotovaniaObrázkov();
    }
}
 
 Výsledok:
 
 
 Ukážka možného
 výsledku experimentovania s obrázkom.
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierka – určuje mierku (zväčšenie alebo zmenšenie)
     kreslenia obrázka; príklady: 1.0 – originálna veľkosť,
     2.0 – dvojnásobná veľkosť, 0.5 – polovičná veľkosť
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierka)
 Alias pre obrázok.
obrázok
public void obrázok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierkaX,
                    double mierkaY)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Odchýlky otáčania sú upravené podľa zadanej mierky.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť
     vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierkaX – určuje mierku šírky obrázka
mierkaY – určuje mierku šírky obrázka
Výnimky:
GRobotException – ak je obrázok poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String), 
obrázok(String), 
obrázok(String, double), 
obrázok(String, double, double), 
obrázok(String, double, double, double), 
obrázok(String, int), 
obrázok(String, int, double), 
obrázok(String, int, double, double)
obrazok
public void obrazok(String súbor,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierkaX,
                    double mierkaY)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierkaX,
                    double mierkaY)
Nakreslí obrázok na pozícii robota podľa zadaného spôsobu
 kreslenia s vysunutím stredu otáčania o zadané odchýlky Δx a Δy.
 Obrázok je všeobecný typ Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
 Odchýlky otáčania sú upravené podľa mierky.
 
 Poznámka: Tieto metódy nesmú brať
 do úvahy priehľadnosť robota. Kolidovalo by to s inými
 mechanizmami programovacieho rámca. Je dosť iných spôsobov
 ako nakresliť spriehľadnaný obrázok. Napríklad nastaviť
 priehľadnosť inštancii triedy Obrázok alebo
 kresliť obrázkový tvar spriehľadneného robota.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
mierkaX – určuje mierku šírky obrázka
mierkaY – určuje mierku výšky obrázka
Výnimky:
GRobotException – ak je obrázok poškodený alebo
     nebol nájdený
obrazok
public void obrazok(Image obrázok,
                    int spôsobKreslenia,
                    double Δx,
                    double Δy,
                    double mierkaX,
                    double mierkaY)
 Alias pre obrázok.
text
public Shape text(String text)
Napíše[1] zadaný text na pozícii robota podľa
 aktuálneho spôsobu kreslenia (pozri: spôsobKreslenia) alebo vytvorí tvar
 obrysu zadaného textu (čo záleží na tom, či je tento robot
 momentálne zamestnaný
 alebo nie a či je zakázané
 kreslenie tvarov; pozri vysvetlenie pri návratovej hodnote).
 Predvolene roboty píšu text rotovaný kolmo na ich aktuálny smer
 a vycentrovaný na ich aktuálnej polohe. Takže pri základných
 hodnotách robota, sa text zobrazí vodorovne v strede plátna
 (pretože robot býva pri vytvorení umiestnený v strede podlahy
 (v bode [0, 0]) a nasmerovaný hore (v uhle 90°)).
 
 [1] – alebo skôr „nakreslí“ zadaný text – písanie textu
 robotom totiž prebieha podobne, ako keby robot vytvoril z textu
 pečiatku a tú vytlačil podľa aktuálneho spôsobu kreslenia
 (predvolene vycentrovanú na svojej pozícii a rotovanú podľa
 svojho smeru); jednoducho s textom napísaným robotom je
 zaobchádzané ako s grafikou…
 
 Poznámka: Táto metóda nemôže prijímať
 variabilný počet argumentov (podobne ako metódy sveta vypíš a vypíšRiadok), pretože má definované rôzne verzie, ktoré
 umožňujú programátorovi operatívne meniť spôsob (a/alebo
 polohu) kreslenia textov. Z toho dôvodu bola definovaná
 statická metóda S, ktorá prijíma
 variabilný počet argumentov, ktoré konvertuje na jeden zlúčený
 reťazec. (Na získanie ďalších podrobností pozri opis metódy
 S.)
Parametre:
text – text, ktorý má byť vypísaný
Návratová hodnota:
ak nie je robot zamestnaný a je povolené
     kreslenie tvarov, metóda píše text a má návratovú hodnotu
     null;
     v opačnom prípade metóda nenapíše nič a vracia objekt typu
     Shape (tvar) reprezentujúci obrys zadaného
     textu (tvar textu)
Pozri tiež:
Plátno.vypíš(Object...), 
Plátno.vypíšRiadok(Object...), 
text(String, int), 
text(String, double, double), 
text(String, int, double, double)
text
public Shape text(String text,
                  double Δx,
                  double Δy)
Napíše[1] zadaný text na pozícii robota podľa
 aktuálneho spôsobu kreslenia (pozri: spôsobKreslenia) a s vysunutím stredu
 otáčania o zadané odchýlky Δx a Δy alebo vytvorí tvar
 obrysu zadaného textu (čo záleží na tom, či je tento robot
 momentálne zamestnaný
 alebo nie a či je zakázané
 kreslenie tvarov; pozri vysvetlenie pri návratovej hodnote).
 Predvolene roboty píšu text rotovaný kolmo na ich aktuálny smer
 a vycentrovaný na ich aktuálnej polohe. Takže pri základných
 hodnotách robota, sa text zobrazí vodorovne v strede plátna
 (pretože robot býva pri vytvorení umiestnený v strede podlahy
 (v bode [0, 0]) a nasmerovaný hore (v uhle 90°)).
 
 [1] – alebo skôr „nakreslí“ zadaný text – písanie textu
 robotom totiž prebieha podobne, ako keby robot vytvoril z textu
 pečiatku a tú vytlačil podľa aktuálneho spôsobu kreslenia
 (predvolene vycentrovanú na svojej pozícii a rotovanú podľa
 svojho smeru); jednoducho s textom napísaným robotom je
 zaobchádzané ako s grafikou…
Parametre:
text – text, ktorý má byť vypísaný
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Návratová hodnota:
ak nie je robot zamestnaný a je povolené
     kreslenie tvarov, metóda píše text a má návratovú hodnotu
     null;
     v opačnom prípade metóda nenapíše nič a vracia objekt typu
     Shape (tvar) reprezentujúci obrys zadaného
     textu (tvar textu)
Pozri tiež:
Plátno.vypíš(Object...), 
Plátno.vypíšRiadok(Object...), 
text(String), 
text(String, int), 
text(String, int, double, double)
text
public Shape text(String text,
                  int spôsobKreslenia)
Napíše[1] zadaný text na pozícii robota podľa
 zadaného spôsobu kreslenia alebo vytvorí tvar obrysu zadaného
 textu. Záleží od toho, či je tento robot zamestnaný a či je zakázané kreslenie tvarov (pozri
 vysvetlenie pri návratovej hodnote).
 
 [1] – alebo skôr „nakreslí“ zadaný text – písanie textu
 robotom totiž prebieha podobne, ako keby robot vytvoril
 z textu pečiatku a tú vytlačil podľa zadaného spôsobu
 kreslenia…
Parametre:
text – text, ktorý má byť vypísaný
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Návratová hodnota:
ak nie je robot zamestnaný a je povolené
     kreslenie tvarov, metóda píše text a má návratovú hodnotu
     null;
     v opačnom prípade metóda nenapíše nič a vracia objekt typu
     Shape (tvar) reprezentujúci obrys zadaného
     textu (tvar textu)
Pozri tiež:
Plátno.vypíš(Object...), 
Plátno.vypíšRiadok(Object...), 
text(String), 
text(String, double, double), 
text(String, int, double, double), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
text
public Shape text(String text,
                  int spôsobKreslenia,
                  double Δx,
                  double Δy)
Napíše[1] zadaný text na pozícii robota podľa
 zadaného spôsobu kreslenia a s vysunutím stredu otáčania
 o zadané odchýlky Δx a Δy alebo vytvorí tvar obrysu zadaného
 textu. Záleží od toho, či je tento robot zamestnaný a či je zakázané kreslenie tvarov (pozri
 vysvetlenie pri návratovej hodnote).
 
 [1] – alebo skôr „nakreslí“ zadaný text – písanie textu
 robotom totiž prebieha podobne, ako keby robot vytvoril
 z textu pečiatku a tú vytlačil podľa zadaného spôsobu
 kreslenia…
Parametre:
text – text, ktorý má byť vypísaný
spôsobKreslenia – môže byť buď hodnota Konštanty.KRESLI_PRIAMO, alebo kombinácia hodnôt Konštanty.KRESLI_NA_STRED a Konštanty.KRESLI_ROTOVANÉ.
Δx – vysunutie stredu otáčania v smere osi x
Δy – vysunutie stredu otáčania v smere osi y
Návratová hodnota:
ak nie je robot zamestnaný a je povolené
     kreslenie tvarov, metóda píše text a má návratovú hodnotu
     null;
     v opačnom prípade metóda nenapíše nič a vracia objekt typu
     Shape (tvar) reprezentujúci obrys zadaného
     textu (tvar textu)
Pozri tiež:
Plátno.vypíš(Object...), 
Plátno.vypíšRiadok(Object...), 
text(String), 
text(String, double, double), 
text(String, int), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
cesta(), 
kresliTvary, 
nekresliTvary, 
Oblasť.zamestnaj(GRobot), 
Oblasť.uvoľni()
upravText
public boolean upravText(String text)
Táto metóda umožní používateľovi upraviť text priamo na plátne.
 Správa sa rovnako ako metóda upravText so zadanou zápornou hodnotou predvolenej šírky
 textového komponentu. V opise uvedenej metódy sú príklady
 použitia mechanizmu úpravy textov.
Parametre:
text – predvolený textu určený na úpravu
Návratová hodnota:
true ak sa úpravu podarilo zahájiť,
     inak false
Pozri tiež:
upravText(String, double), 
ukončenieÚpravyTextu(String, int)
upravText
public boolean upravText(String text,
                         double šírka)
Táto metóda umožní používateľovi upraviť text priamo na plátne.
 Metóda zobrazí na aktuálnych súradniciach robota priehľadný
 komponent na úpravu textu so zadaným textom vo farbe aktuálneho
 robota. Po stlačení ENTER, ESC, TAB,
 Shift + TAB alebo po deaktivácii textového komponentu
 je úprava automaticky ukončená a je spustená metóda
 ukončenieÚpravyTextu, ktorú by mal programátor prekryť
 a zariadiť spracovanie zadaného textu.
 
 Príklady:
 
 Prvý príklad je jednoduchší. Výsledok po spustení programu
 vyzerá takto:
 
 
 (Plátno v ukážke je zmenšené.)
 
 Po kliknutí na ľubovoľné miesto na ploche sa začne úprava
 textu (ak už neprebieha). Ak sa úprava textu neskončí
 stlačením klávesu ESC, tak sa zmeny textu prijmú.
 (Niekedy môže byť žiadnuce, aby sa zmeny prijali v každom
 prípade. Vtedy treba podmienku if (SPÔSOB_ESCAPE != spôsob)
 odstrániť alebo prislúchajúcim spôsobom upraviť.)
 
 
import knižnica.*;
public class TestÚpravTextov extends GRobot
{
    // Textov určený na úpravu
    private String text = "Môj text na úpravu";
    // Súkromný konštruktor hlavnej triedy
    private TestÚpravTextov()
    {
        skry();
        text(text);
    }
    // Obsluha udalosti kliknutia myšou – odštartuje úpravu (ak neprebieha)
    @Override public void klik()
    {
        if (upravText(text, 200))
            podlaha.vymažGrafiku();
    }
    // Prekrytá metóda spracúvajúca ukončenie aktuálnej úpravy
    @Override public void ukončenieÚpravyTextu(String text, int spôsob)
    {
        // Text sa uloží len ak nebol stlačený kláves ESCAPE,…
        if (SPÔSOB_ESCAPE != spôsob) this.text = text;
        // …ale vypíše sa v každom prípade.
        text(this.text);
    }
    // Hlavná metóda
    public static void main(String args[])
    {
        new TestÚpravTextov();
    }
}
 
 Nasledujúci príklad je komplikovanejší – ukazuje ako
 striedavo upravovať niekoľko textov na ploche. Tesne po
 spustení vyzerá obsah plátna takto:
 
 
 (Plátno v ukážke
 je zmenšené.)
 
  
 
 
import knižnica.*;
public class TestÚpravTextov extends GRobot
{
    // Využitie triedy Častica na definovanie novej triedy,
    // ktorá bude použitá na uchovávanie textových objektov,
    // ktoré budú upravovateľné. Trieda využíva služby hlavného
    // robota.
    private class TextNaÚpravu extends Častica
    {
        // Aktuálna hodnota textu určeného na úpravu
        public String text;
        // Aktuálna farba textu určeného na úpravu
        public Farba farba;
        // Konštruktor
        public TextNaÚpravu(String text, double x, double y, Farba farba)
        {
            this.text = text;
            this.x = x;
            this.y = y;
            this.farba = farba;
        }
        // Nakreslenie textu
        public void nakresli()
        {
            skočNa(this);
            farba(farba);
            text(text);
        }
    }
    // Pole inštancií textov určených na úpravy
    private TextNaÚpravu texty[] =
    {
        new TextNaÚpravu("Červený text", 0, 50, červená),
        new TextNaÚpravu("Zelený text", 0, 0, zelená),
        new TextNaÚpravu("Modrý text", 0, &#45;50, modrá),
    };
    // Inštancia, ktorá si bude uchovávať aktuálne upravovaný objekt
    private TextNaÚpravu upravujeSa = null;
    // Súkromný konštruktor hlavnej triedy
    private TestÚpravTextov()
    {
        skry();
        písmo("Calibri", 30);
        for (TextNaÚpravu text : texty)
            text.nakresli();
    }
    // Obsluha udalosti kliknutia myšou
    @Override public void klik()
    {
        if (null == upravujeSa)
        {
            // Zakaždým, keď sa nič neupravuje, tak sa prekreslí
            // obrazovka a ak sa pritom zistí, že bolo kliknuté
            // v rámci vymedzeného obdĺžnika niektorého z textov,
            // tak sa zaháji jeho úprava…
            podlaha.vymažGrafiku();
            for (TextNaÚpravu text : texty)
            {
                skočNa(text);
                if (myšVObdĺžniku(100, 20))
                {
                    skočNa(text);
                    farba(text.farba);
                    upravText(text.text, 200);
                    upravujeSa = text;
                }
                else text.nakresli();
            }
        }
    }
    // Prekrytá metóda spracúvajúca ukončenie aktuálnej úpravy
    @Override public void ukončenieÚpravyTextu(String text, int spôsob)
    {
        if (SPÔSOB_ESCAPE != spôsob)
            upravujeSa.text = text;
        
        // Na tomto mieste by bolo vhodné implementovať mechanizmus
        // pohybu po upravovaných inštanciách klávesom TAB (pohyb
        // dopredu – SPÔSOB_TABULÁTOR == spôsob, pohyb dozadu –
        // – SPÔSOB_SHIFT_TABULÁTOR == spôsob). Stačilo by nájsť,
        // ten prvok v poli, ktorý je práve upravovaný a podľa toho
        // zahájiť úpravu nasledujúceho alebo predchádzajúceho prvku.
        // Aby bol tento príklad kratší, tak podrobná implementácia
        // tohto mechanizmu je uvedená nižšie, za týtmo príkladom…
        
        // Nakreslí a ukončí sa úprava aktuálneho prvku
        upravujeSa.nakresli();
        upravujeSa = null;
    }
    // Hlavná metóda
    public static void main(String args[])
    {
        new TestÚpravTextov();
    }
}
 
 Ďalej je uvedená implementácia presúvania sa medzi textami
 tabulátorom, ktorá je spomenutá v komentároch príkladu vyššie.
 Touto implementáciou treba nahradiť trojicu riadkov začínajúcu
 sa komentárom // Nakreslí a ukončí sa úprava
 aktuálneho prvku (na konci reakcie ukončenieÚpravyTextu –
 pár riadkov od konca zdrojového kódu celého príkladu):
 
 
// Táto inštancia bude slúžiť na signalizáciu zahájenia úpravy
// nového textu – pri posunutí klávesom TAB to bude nasledujúca
// inštancia v poli, pri posunutí naspäť (Shift + TAB) to bude
// predchádzajúca… (Predvolene to nebude žiadna.)
TextNaÚpravu začniÚpravuNovéhoTextu = null;
if (SPÔSOB_TABULÁTOR == spôsob)
{
    if (upravujeSa == texty[texty.length &#45; 1])
    {
        // Posledná inštancia presunie upravovanie na prvú:
        začniÚpravuNovéhoTextu = texty[0];
    }
    else for (int i = texty.length &#45; 2; i &gt;= 0; &#45;&#45;i)
    {
        // Je jedno v akom smere prehľadávame pole, tak
        // sme sa rozhodli pre spätné vyhľadávanie (aby
        // sme cyklus mierne výpočtovo odľahčili…).
        // Po nájdení aktuálneho prvku „označíme“ nasledujúci:
        if (upravujeSa == texty[i])
        {
            začniÚpravuNovéhoTextu = texty[i + 1];
            break;
        }
    }
}
else if (SPÔSOB_SHIFT_TABULÁTOR == spôsob)
{
    if (upravujeSa == texty[0])
    {
        // Prvá inštancia presunie upravovanie na poslednú:
        začniÚpravuNovéhoTextu = texty[texty.length &#45; 1];
    }
    else for (int i = 1; i &lt; texty.length; ++i)
    {
        // Prehľadávame od druhej inštancie po poslednú.
        // Po nájdení aktuálneho prvku „označíme“ predchádzajúci:
        if (upravujeSa == texty[i])
        {
            začniÚpravuNovéhoTextu = texty[i – 1];
            break;
        }
    }
}
// Nakreslí a ukončí sa úprava aktuálneho prvku
upravujeSa.nakresli();
upravujeSa = null;
// Ak sme predtým zadali požiadavku na zahájenie úpravy
// nového textu, tak túto požiadavku korektne spracujeme:
if (null != začniÚpravuNovéhoTextu)
{
    // Vymazanie podlahy a prekreslenie ostatných textov
    podlaha.vymažGrafiku();
    for (TextNaÚpravu prekresli : texty)
        if (začniÚpravuNovéhoTextu != prekresli)
            prekresli.nakresli();
    skočNa(začniÚpravuNovéhoTextu);
    farba(začniÚpravuNovéhoTextu.farba);
    upravText(začniÚpravuNovéhoTextu.text, 200);
    upravujeSa = začniÚpravuNovéhoTextu;
}
Parametre:
text – predvolený textu určený na úpravu
šírka – predvolená šírka textového komponentu – ak je
     zadané záporné číslo, tak bude mať komponent šírku
     totožnú so šírkou prevoleného textu
Návratová hodnota:
true ak sa úpravu podarilo zahájiť,
     inak false
Pozri tiež:
upravText(String), 
ukončenieÚpravyTextu(String, int)
ukončenieÚpravyTextu
public void ukončenieÚpravyTextu(String text,
                                 int spôsob)
Táto metóda je predvolene prázdna. Je určená na prekrytie
 a je spúšťaná po ukončení úpravy textu začatej metódou upravText. Prvý argumet je konečná
 podoba upraveného textu a druhý argument je jeden
 z nasledujúcich spôsobov:
 
 
 SPÔSOB_ESCAPE
–bol stlačený kláves ESC
 SPÔSOB_ENTER
–bol stlačený kláves ENTER
 SPÔSOB_TABULÁTOR
 SPÔSOB_TAB
–bol stlačený kláves TABULÁTOR
 SPÔSOB_SHIFT_TABULÁTORSPÔSOB_SHIFT_TAB–bola stlačená klávesová
 kombinácia Shift + tabulátor
 SPÔSOB_DEAKTIVÁCIA
–komponent textového prvku bol deaktivovaný
 (napríklad po kliknutí myšou na plátno)
 
Parametre:
text – konečná podoba upraveného textu, ktorá môže byť
     spracovaná podľa potreby
spôsob – jeden z vyššie uvedených spôsobov ukončenia
     úpravy textu
Pozri tiež:
upravText(String), 
upravText(String, double)
ukoncenieUpravyTextu
public void ukoncenieUpravyTextu(String text,
                                 int spôsob)
 Alias pre ukončenieÚpravyTextu.
F
public String F(double číslo,
                int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
 Prijíma reálne číslo a hodnotu počtu desatinných miest, ktoré
 majú byť zobrazené.
 Rovnaká metóda je definovaná aj v triede Svet:
 F(číslo, desatinné).
 Metóda má ešte jednu verziu: Svet.F(číslo, šírka, desatinné).
 
 Príklad:
 
 
double a = 10.335;
Svet.vypíšRiadok("Hodnota: ", F(a, 2));
 
 Výsledok:
 
 
Hodnota: 10,34
 
 Znak použitý na oddelenie desatinných miest naformátovaného
 čísla je možné zmeniť volaním metódy oddeľovačDesatinnejČasti.
 Použitie znaku na oddelenie tisícov je možné upraviť (vypnúť,
 zmeniť) volaním metódy oddeľovačTisícov.
Parametre:
číslo – hodnota, ktorá má byť naformátovaná
desatinné – počet desatinných miest, ktoré majú byť uvedené
     vo výslednom (naformátovanom) tvare
Pozri tiež:
Svet.formát, 
Svet.oddeľovačPrvkovPoľa(String), 
Svet.oddeľovačDesatinnejČasti(char), 
Svet.oddeľovačTisícov(Character), 
Svet.vypíš(Object[]), 
Svet.F(double, int), 
Svet.F(double, int, int), 
F(double, int, int)
F
public String F(double číslo,
                int šírka,
                int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
 Prijíma reálne číslo, potom hodnotu určujúcu šírku výsledného
 reťazca (počet znakov), na ktorú má byť zarovnaný zľava
 a nakoniec počet desatinných miest, ktoré majú byť zobrazené.
 Rovnaká metóda je definovaná aj v triede Svet:
 F(číslo, šírka, desatinné).
 Metóda má ešte jednu verziu: Svet.F(číslo, desatinné).
 
 Príklad:
 
 
double a = 10.335;
Svet.vypíšRiadok("1234567", riadok, F(a, 7, 2));
 
 Výsledok:
 
 
1234567
  10,34
 
 Znak použitý na oddelenie desatinných miest naformátovaného
 čísla je možné zmeniť volaním metódy oddeľovačDesatinnejČasti.
 Použitie znaku na oddelenie tisícov je možné upraviť (vypnúť,
 zmeniť) volaním metódy oddeľovačTisícov.
Parametre:
číslo – hodnota, ktorá má byť naformátovaná
šírka – najmenší počet znakov výsledného naformátovaného
     reťazca (pri krátkych číslach budú chýbajúce znaky doplnené
     medzerami)
desatinné – počet desatinných miest, ktoré majú byť uvedené
     vo výslednom (naformátovanom) tvare
Pozri tiež:
Svet.formát, 
Svet.oddeľovačPrvkovPoľa(String), 
Svet.oddeľovačDesatinnejČasti(char), 
Svet.oddeľovačTisícov(Character), 
Svet.vypíš(Object[]), 
Svet.F(double, int), 
Svet.F(double, int, int), 
F(double, int)
S
public String S(Object... argumenty)
Táto metóda slúži na rýchly prevod rôznych objektov do
 textovej podoby a ich zlúčenie do jedného reťazca. Pri
 zlučovaní používa rovnaké pravidlá, aké sú opísané v opise
 metódy Plátno.vypíš(argumenty). Súvisí
 to napríklad so spôsobom pridávania medzier medzi reťazce
 zlučovaných argumentov, automatickým formátovaním čísiel
 a podobne.
 
 
 
 Ukážka použitia:
 
 
text(S("Skóre:", aktuálneSkóre));
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
Svet.vypíš(Object[]), 
Svet.S(Object[])
začniCestu
public void začniCestu()
Začne záznam cesty robota. Odteraz sa pohyb robota bude
 zaznamenávať. Zaznamenaná cesta vytvorí oblasť, ktorú je možné
 kedykoľvek nakresliť, vyplniť alebo obkresliť čiarou. Cesta je
 použiteľná aj s myšou, pozri myšVCeste.
 Táto metóda spustí spôsob záznamu cesty počas ktorého nebude
 braná do úvahy poloha pera – každá časť cesty bude pridaná tak,
 ako keby bolo pero položené. Takto je možné vytvoriť cestu
 v „tichom režime“ a dodatočne ju kompletne vykresliť. Ak
 chceme zmeniť spôsob záznamu, musíme použiť metódu:
 začniCestu(boolean).
Pozri tiež:
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
zacniCestu
public void zacniCestu()
 Alias pre začniCestu.
začniCestu
public void začniCestu(boolean rešpektujPolohuPera)
Začne záznam novej cesty robota. Odteraz sa pohyb robota bude
 zaznamenávať. Zaznamenaná cesta vytvorí oblasť, ktorú je možné
 kedykoľvek nakresliť, vyplniť alebo obkresliť čiarou. Cesta je
 použiteľná aj s myšou (pozri myšVCeste).
 Parameter rešpektujPolohuPera určuje, či má byť počas
 záznamu cesty braná do úvahy aj poloha pera a výslednú cestu
 má byť vytvorená z rôznych častí, ktoré smú alebo nesmú byť
 vykreslené, podľa toho, či bolo počas záznamu cesty pero
 zdvihnuté alebo položené. Niekedy nie je výhodné brať do
 úvahy polohu pera. Napríklad ak chceme zaznamenať celú cestu
 v „tichom režime“ – so zdvihnutým perom a dodatočne ju
 kompletne vykresliť.
Parametre:
rešpektujPolohuPera – ak je rovné true,
     záznam cesty bude brať do úvahy polohu pera
Pozri tiež:
začniCestu(), 
skončiCestu(), 
zrušCestu(), 
uzavriCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
zacniCestu
public void zacniCestu(boolean rešpektujPolohuPera)
 Alias pre začniCestu.
skončiCestu
public void skončiCestu()
Ukončí záznam cesty a ponechá ju na ďalšie použitie. Dokedy
 opätovne nepoužijeme metódu začniCestu
 alebo metódu zrušCestu, je zaznamenaná
 cesta opakovane použiteľná.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
zrušCestu(), 
uzavriCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
skonciCestu
public void skonciCestu()
 Alias pre skončiCestu.
zrušCestu
public void zrušCestu()
Ukončí a zmaže záznam cesty.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
uzavriCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
zrusCestu
public void zrusCestu()
 Alias pre zrušCestu.
uzavriCestu
public void uzavriCestu()
Ukončí záznam cesty, uzavrie cestu (prepojí posledný bod
 s prvým bodom posledného kresleného segmentu) a ponechá ju na
 ďalšie použitie. Dokedy opätovne nepoužijeme metódu začniCestu alebo metódu zrušCestu, je zaznamenaná cesta ľubovoľný počet ráz
 použiteľná.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
zavriCestu
public void zavriCestu()
 Alias pre uzavriCestu.
vyplňCestu
public void vyplňCestu()
Ukončí záznam cesty a vyplní zaznamenanú cestu aktuálnou
 farbou robota.
 
 Tip: Ak chcete vytvorenú cestu rotovať
 alebo posúvať, vytvorte z nej oblasť a použite
 metódu vyplňOblasť alebo použite
 triedu SVGPodpora, ktorá má definované
 metódy na ľubovoľnú
 transformáciu tvarov.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
uzavriCestu(), 
kresliCestu(), 
obkresliCestu(), 
cesta()
vyplnCestu
public void vyplnCestu()
 Alias pre vyplňCestu.
kresliCestu
public void kresliCestu()
Ukončí záznam cesty a nakreslí zaznamenanú cestu aktuálnou
 farbou a hrúbkou čiary.
 
 Použitie tohto príkazu sa stáva nenahraditeľným napríklad
 v prípade, že chceme použiť polopriehľadné pero, ktoré pri
 klasickom kreslení zanecháva v uzlových bodoch pohybu robota
 prebytočnú farbu. Vtedy je v podstate nevyhnutné zvoliť
 nasledujúci postup:
 
 
 zdvihnúť pero robota,
 začať záznam cesty (spôsobom „bez ohľadu na polohu
 pera“),
 vykonať potrebné pohyby robotom
 a použiť túto metódu na nakreslenie výslednej
 cesty.
 
 
 Bez ohľadu na uvedený prípad, metóda je použiteľná
 ľubovoľne. Napríklad ak chceme dráhu robota prekresliť po
 inom kreslení (čím ju v podstate dostaneme do popredia)
 a podobne.
 
 Poznámka: Otvorená cesta sa odlišuje
 od uzavretej. Metódy robota uzavriCestu
 a obkresliCestu spôsobujú uzavretie
 cesty, ostatné metódy spôsobujúce ukončenie záznamu cesty,
 vrátane tejto, nechávajú cestu otvorenou. V súčasnej verzii
 programovacieho rámca je možné transformovať, to jest napríklad
 rotovať alebo posúvať, aj otvorené cesty, a to vďaka novej
 triede SVGPodpora, ktorá má definované
 metódy
 na ľubovoľnú transformáciu akéhokoľvek tvaru.
 
 Uzavretú cestu je možné rotovať a/alebo posúvať i tak, že sa
 z nej vytvorí oblasť a použije sa metóda
 obkresliOblasť.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
uzavriCestu(), 
vyplňCestu(), 
obkresliCestu(), 
cesta()
obkresliCestu
public void obkresliCestu()
Táto metóda funguje rovnako ako keby sme volali metódy uzavriCestu a kresliCestu za sebou (v uvedenom poradí). To znamená, že
 cesta sa uzavrie vtedy a len vtedy, ak ešte stále v čase jej
 volania prebieha záznam cesty, ktorý je súčasne s jej volaním
 ukončený. Potom je vykreslená výsledná cesta.
 
 Tip: Ak chcete vytvorenú cestu rotovať
 a/alebo posúvať, vytvorte z nej oblasť
 a použite metódu obkresliOblasť
 alebo použite triedu SVGPodpora, ktorá
 má definované metódy na ľubovoľnú
 transformáciu tvarov.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
uzavriCestu(), 
vyplňCestu(), 
kresliCestu(), 
cesta()
cesta
public Shape cesta()
Ukončí záznam cesty a vráti cestu ako tvar. Metóda je
 využiteľná (respektíve tvar, ktorý vracia je využiteľný) na
 tvorbu oblasti, obmedzenie kreslenia, vytvorenie transformovaného
 tvaru a podobne.
 
 Príklad:
 
 V nasledujúcom príklade najskôr zaznamenáme otvorenú
 cestu v tvare lomenej čiary a túto cestu potom využijeme na
 nakreslenie útvaru podobného mandale. Namiesto volania
 metódy cesta by bolo možné využiť triedu Javy
 Shape na uchovanie objektu cesty, aby bolo
 vykonávanie príkladu mierne efektívnejšie. Komentáre
 v príklade ukazujú, ako by sa to dalo docieliť.
 
 Na ozrejmenie fungovania príkladu je dôležité poukázať
 na rozdiel medzi súradnicovým priestorom Javy (predvoleným
 súradnicovým priestorom, ktorý je používaný v oblasti
 2D počítačovej grafiky) a súradnicovým priestorom
 programovacieho rámca GRobot (ktorý je v podstate štandardným
 karteziánskym súradnicovým priestorom). Zhňme to v dvoch
 samostatných bodoch:
 
 
 
 Java predvolene pracuje so súradnicovým systémom,
 ktorý je bežne používaný v 2D počítačovej grafike. Stred,
 respektíve počiatok, súradnicovej sústavy (to jest bod so
 súradnicami [0, 0]) je umiestnený vždy v ľavom hornom rohu
 zobrazovanej oblasti (buď celej obrazovky, obrázka, plátna,
 alebo niečoho podobného). Hodnoty na x-ovej, respektíve
 horizontálnej, osi rastú zľava doprava (to je spoločné pre
 obidva súradnicové systémy) a hodnoty y-ovej, respektíve
 vertikálnej, osi rastú zhora nadol (čiže presne opačne než
 pri klasickom karteziánskom súradnicovom systéme).
 
 Súradnicový systém programovacieho rámca GRobot má
 počiatok súradnicovej sústavy v strede plátna a aby sme
 to skrátili, tak jediným ďalším rozdielom oproti
 predchádzajúcemu systému je smer rastu hodnôt vertikálnej
 osi – zospodu nahor (čiže rovnako ako pri klasickom
 karteziánskom súradnicovom systéme).
 
 
 
 Tento rozdiel sa prejavuje aj pri transformáciách triedy
 SVGPodpora. V nasledujúcom príklade je
 na riadku 47 príkaz transformácie otočenia
 (new Transformácia(Transformácia.OTOČ…), ktorý
 má posunutý stred otáčania do bodu [200, 200]. Sú to
 súradnice vyjadrené v súradnicovom systéme Javy. Tento bod
 v tomto prípade korešponduje so stredom súradnicovej sústavy
 programovacieho rámca GRobot, ktorý je vždy prepočítavaný podľa
 aktuálnych rozmerov plátien tak, aby bol v ich strede. Na
 riadku 14 je volanie nadradeného konštruktora (super(400, 400);), ktoré nastavuje rozmery plátien na 400 × 400
 bodov a z toho vyplýva, že aktuálny stred súradnicovej
 sústavy programovacieho rámca je posunutý do bodu [200, 200]
 súradnicového priestoru Javy.
 
 
import knižnica.*;
import knižnica.SVGPodpora.Transformácia;
// Ak by sme sa rozhodli využiť triedu Javy Shape, tak takto by sme ju
// importovali:
// import java.awt.Shape;
public class TvarZCesty extends GRobot
{
    // Konštruktor
    public TvarZCesty()
    {
        // Nastavenie romerov plátna na 400 × 400 bodov:
        super(400, 400);
        // Zdvihnutie pera a zahájenie záznamu cesty:
        zdvihniPero();
        začniCestu();
        // „Nakreslenie“ cesty (jej zaznamenanie do vnútornej pamäte robota):
        dopredu(60);
        vpravo(60);
        dopredu(60);
        vľavo(120);
        dopredu(60);
        vpravo(60);
        dopredu(60);
        // Ak by sme sa rozhodli využiť triedu Javy Shape,
        // tak takto by definovali jej inštanciu:
        // Shape cesta = cesta();
        // Úprava hrúbky čiary:
        hrúbkaČiary(2.5);
        // Kreslenie transformovanej cesty:
        for (int i = 0; i &lt; 12; ++i)
        {
            náhodnáFarba();
            // Ak by sme sa rozhodli využiť triedu Javy Shape, tak na
            // nasledujúcom riadku by nebolo volanie metódy „cesta(),“ ale
            // použitie inštancie triedy Shape: „cesta“ (zjednodušene
            // povedané by bolo treba zmazať zátvorky za identifikátorom
            // „cesta“):
            podlaha.kresli(SVGPodpora.dajVýsledný(cesta(),
                new Transformácia(Transformácia.OTOČ,
                    i * 30.0, 200.0, 200.0)));
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("tvar-z-cesty.cfg");
        new TvarZCesty();
    }
}
 
 Výsledok:
 
 
 
 
 Dve ukážky možných
 výsledkov kreslenia príkladu.
Pozri tiež:
začniCestu(), 
začniCestu(boolean), 
skončiCestu(), 
zrušCestu(), 
uzavriCestu(), 
vyplňCestu(), 
kresliCestu(), 
obkresliCestu(), 
kružnica(double), 
kruh(double), 
elipsa(double, double), 
kresliElipsu(double, double), 
vyplňElipsu(double, double), 
štvorec(double), 
kresliŠtvorec(double), 
vyplňŠtvorec(double), 
obdĺžnik(double, double), 
kresliObdĺžnik(double, double), 
vyplňObdĺžnik(double, double), 
hviezda(double), 
kresliHviezdu(double), 
vyplňHviezdu(double), 
kružnica(), 
kruh(), 
elipsa(double), 
kresliElipsu(double), 
vyplňElipsu(double), 
štvorec(), 
kresliŠtvorec(), 
vyplňŠtvorec(), 
obdĺžnik(double), 
kresliObdĺžnik(double), 
vyplňObdĺžnik(double), 
hviezda(), 
kresliHviezdu(), 
vyplňHviezdu(), 
text(String), 
text(String, int)
cestu
public Shape cestu()
 Alias pre cesta.
cesty
public Shape cesty()
 Alias pre cesta.
myšVCeste
public boolean myšVCeste()
Zistí, či sa aktuálne súradnice myši nachádzajú v uzavretej
 oblasti cesty, ktorá bola zaznamenaná kreslením aktuálneho
 robota od posledného použitia metódy začniCestu. Cesta je zaznamenávaná až do použitia metód skončiCestu, zrušCestu,
 vyplňCestu alebo kresliCestu. Dokedy opätovne nepoužijeme metódu začniCestu alebo metódu zrušCestu, je zaznamenaná cesta opakovane použiteľná.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
myšVElipse(double, double), 
myšVKruhu(double), 
myšVPôsobisku(), 
myšVoŠtvorci(double), 
myšVObdĺžniku(double, double), 
myšVHviezde(double), 
myšVOblasti(Area)
mysVCeste
public boolean mysVCeste()
 Alias pre myšVCeste.
bodVCeste
public boolean bodVCeste(double súradnicaBoduX,
                         double súradnicaBoduY)
Zistí, či sa aktuálne súradnice zadaného bodu nachádzajú
 v uzavretej oblasti cesty, ktorá bola zaznamenaná kreslením
 aktuálneho robota od posledného použitia metódy začniCestu. Cesta je zaznamenávaná až do
 použitia metód skončiCestu, zrušCestu, vyplňCestu
 alebo kresliCestu. Dokedy opätovne
 nepoužijeme metódu začniCestu alebo
 metódu zrušCestu, je zaznamenaná cesta
 opakovane použiteľná. Nasledujúca metóda dovoľuje namiesto
 súradníc bodu použiť objekt: bodVCeste(Poloha objekt).
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVOblasti(double, double, Area), 
bodVTvare(double, double, Shape)
bodVCeste
public boolean bodVCeste(Poloha objekt)
Funguje rovnako ako metóda bodVCeste(x, y), len namiesto súradníc bodu je použitá poloha
 zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
Pozri tiež:
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVOblasti(Poloha, Area), 
bodVTvare(Poloha, Shape)
zamestnaj
public void zamestnaj(Oblasť oblasť)
Zamestná tento robot na účely tvorby, prípadne kreslenia,
 zadanej oblasti. Má rovnaký efekt ako volanie metódy oblasť.zamestnaj(robot). Od okamihu
 zamestnania stráca robot dočasne svoje schopnosti kreslenia
 útvarov a písania textov. Je to z dôvodu ich presunutia do
 tvorby oblasti. Zamestnaný robot nekreslí
 útvary ani nie je schopný písať texty dovtedy, kým nie je zo
 služby uvoľnený
 (prepustený).
 
 Robot nesmie byť zamestnaný pre inú oblasť, lebo vznikne
 výnimka.
Parametre:
oblasť – objekt typu Oblasť
Výnimky:
GRobotException – ak je robot zamestnaný pre inú oblasť
Pozri tiež:
uvoľni(Oblasť), 
uvoľni(), 
zamestnaný(), 
zamestnaný(Oblasť)
uvoľni
public void uvoľni(Oblasť oblasť)
Uvoľní tento robot z úloh tvorby (prípadne kreslenia) zadanej
 oblasti. Má rovnaký efekt ako volanie metódy oblasť.uvoľni(robot). Ak tento robot
 nebol zamestnaný pre zadanú oblasť, tak nemá volanie metódy
 žiadny efekt.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
oblasť – objekt typu Oblasť
Pozri tiež:
zamestnaj(Oblasť), 
uvoľni(), 
zamestnaný(), 
zamestnaný(Oblasť)
uvolni
public void uvolni(Oblasť oblasť)
 Alias pre uvoľni.
prepusti
public void prepusti(Oblasť oblasť)
 Alias pre uvoľni.
uvoľni
public void uvoľni()
Automaticky uvoľní robot z úloh tvorby (prípadne kreslenia)
 oblasti. Má podobný efekt ako volanie metódy oblasť.uvoľni(). Ak robot nebol zamestnaný pre
 žiadnu oblasť, tak nemá volanie metódy žiadny efekt.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Pozri tiež:
zamestnaj(Oblasť), 
uvoľni(Oblasť), 
zamestnaný(), 
zamestnaný(Oblasť)
uvolni
public void uvolni()
 Alias pre uvoľni.
prepusti
public void prepusti()
 Alias pre uvoľni.
zamestnaný
public boolean zamestnaný()
Overí, či je tento robot zamestnaný pre potreby niektorej
 oblasti.
Návratová hodnota:
true/&#8203;false
Pozri tiež:
zamestnaj(Oblasť), 
uvoľni(Oblasť), 
uvoľni(), 
zamestnaný(Oblasť)
zamestnany
public boolean zamestnany()
 Alias pre zamestnaný.
zamestnaný
public boolean zamestnaný(Oblasť oblasť)
Overí, či je tento robot zamestnaný pre potreby
 určenej oblasti.
Parametre:
oblasť – cieľová oblasť
Návratová hodnota:
true/&#8203;false
Pozri tiež:
zamestnaj(Oblasť), 
uvoľni(Oblasť), 
uvoľni(), 
zamestnaný()
zamestnany
public boolean zamestnany(Oblasť oblasť)
 Alias pre zamestnaný.
obkresliOblasť
public void obkresliOblasť(Area oblasť)
Obkreslí zadanú oblasť hrúbkou a farbou čiary nastavenou pre
 tento robot. Oblasť rotuje podľa smeru robota (za východisko
 je považovaných 90°; odchýlka v kladom alebo zápornom smere
 náležite rotuje oblasť) a posunie o súradnice robota na plátne
 (stred sa nachádza v bode [0, 0] – v strede plátna; ak je
 robot v strede plátna, poloha oblasti sa nezmení).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
Parametre:
oblasť – objekt typu Area (resp. Oblasť)
Pozri tiež:
Oblasť.kresli(), 
Oblasť.kresli(GRobot)
obkresliOblast
public void obkresliOblast(Area oblasť)
 Alias pre obkresliOblasť.
vyplňOblasť
public void vyplňOblasť(Area oblasť)
Vyplní plochu zadanej oblasti farbou nastavenou pre tento
 robot, pričom vypĺňanú oblasť rotuje podľa smeru robota (za
 východisko je považovaných 90°; odchýlka v kladom alebo
 zápornom smere náležite rotuje oblasť) a posúva ju o súradnice
 robota na plátne (stred sa nachádza v bode [0, 0] – v strede
 plátna; ak je robot v strede plátna, poloha oblasti sa
 nezmení).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
Parametre:
oblasť – objekt typu Area (resp. Oblasť)
Pozri tiež:
Oblasť.vyplň(), 
Oblasť.vyplň(GRobot)
vyplnOblast
public void vyplnOblast(Area oblasť)
 Alias pre vyplňOblasť.
vyplňOblasť
public void vyplňOblasť(Area oblasť,
                        String súbor)
Vyplní plochu zadanej oblasti zadanou textúrou, pričom oblasť
 rotuje podľa smeru[1] robota a posúva ju
 o súradnice[2] robota na plátne. Rotácia a poloha
 textúry nie sú nijako ovplyvňované polohou a smerom robota.
 Textúra je zadaná ako názov súboru s obrázkom, ktorý bude
 použitý na dlaždicové vyplnenie plochy oblasti.
 
 [1] – za východisko je považovaných 90°; odchýlka
 v kladom alebo zápornom smere náležite rotuje
 oblasť.
 [2] – stred sa nachádza v bode [0, 0] – v strede
 plátna; ak je robot v strede plátna, poloha oblasti sa
 nezmení.
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
oblasť – objekt typu Area (resp. Oblasť)
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
Svet.priečinokObrázkov(), 
Svet.priečinokObrázkov(String), 
Oblasť.vyplň(String), 
Oblasť.vyplň(GRobot, String)
vyplnOblast
public void vyplnOblast(Area oblasť,
                        String súbor)
 Alias pre vyplňOblasť.
vyplňOblasť
public void vyplňOblasť(Area oblasť,
                        Image výplň)
Vyplní plochu zadanej oblasti zadanou textúrou, pričom oblasť
 rotuje podľa smeru[1] robota a posúva ju
 o súradnice[2] robota na plátne. Rotácia a poloha
 textúry nie sú nijako ovplyvňované polohou a smerom robota.
 Textúra bude použitá na dlaždicové vyplnenie plochy oblasti. Je
 zadaná ako objekt typu Image, za ktorý môže byť
 dosadený aj objekt typu Obrázok.
 
 [1] – za východisko je považovaných 90°; odchýlka
 v kladom alebo zápornom smere náležite rotuje
 oblasť.
 [2] – stred sa nachádza v bode [0, 0] – v strede
 plátna; ak je robot v strede plátna, poloha oblasti sa
 nezmení.
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
oblasť – objekt typu Area (resp. Oblasť)
výplň – obrázok textúry
Pozri tiež:
Oblasť.vyplň(Image), 
Oblasť.vyplň(GRobot, Image)
vyplnOblast
public void vyplnOblast(Area oblasť,
                        Image výplň)
 Alias pre vyplňOblasť.
bodVOblasti
public boolean bodVOblasti(double súradnicaBoduX,
                           double súradnicaBoduY,
                           Area oblasť)
Zistí, či sa súradnice zadaného bodu nachádzajú v zadanej
 oblasti, ktorá je na účely porovnania rotovaná podľa smeru
 robota (za východisko je považovaných 90°; odchýlka v kladom
 alebo zápornom smere náležite rotuje oblasť) a posunutá
 o súradnice robota na plátne (stred sa nachádza v bode [0, 0] –
 v strede plátna; ak je robot v strede plátna, poloha oblasti
 sa nezmení). Nasledujúca metóda dovoľuje namiesto súradníc
 bodu použiť objekt: bodVOblasti(Poloha objekt, Area oblasť).
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
oblasť – oblasť, ktorá má byť použitá na overenie
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
Oblasť.bodV(double, double), 
bodVPôsobisku(double, double), 
bodVKruhu(double, double, double), 
bodVElipse(double, double, double, double), 
bodVoŠtvorci(double, double, double), 
bodVObdĺžniku(double, double, double, double), 
bodVHviezde(double, double, double), 
bodVCeste(double, double), 
bodVTvare(double, double, Shape)
bodVOblasti
public boolean bodVOblasti(Poloha objekt,
                           Area oblasť)
Funguje rovnako ako metóda bodVOblasti(x, y, oblasť), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
 
 Metóda berie do úvahy aj aktuálnu
 mierku robota.
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
oblasť – oblasť, ktorá má byť použitá na overenie
Návratová hodnota:
true/&#8203;false
Pozri tiež:
Oblasť.bodV(Poloha), 
bodVPôsobisku(Poloha), 
bodVKruhu(Poloha, double), 
bodVElipse(Poloha, double, double), 
bodVoŠtvorci(Poloha, double), 
bodVObdĺžniku(Poloha, double, double), 
bodVHviezde(Poloha, double), 
bodVCeste(Poloha), 
bodVTvare(Poloha, Shape)
vrstva
public void vrstva(int vrstva)
 Preradí tento robot do vrstvy
 s určeným poradovým číslom. Vrstva môže byť chápaná ako
 symbolická hodnota, ktorá ovplyvňuje poradie kreslenia
 robotov (podrobnosti sú v opise metódy vrstva()). Zmenou hodnoty vrstvy sa nezmení umiestnenie
 robota v rámci vnútorného zoznamu robotov. Vrstva ovplyvňuje
 poradie kreslenia v rámci všetkých robotov, pričom poradie
 kreslenia robotov umiestnených v rovnakej vrstve je určené
 poradím vo vnútornom zozname robotov.
Parametre:
vrstva – poradové číslo vrstvy kreslenia, do ktorej má
     byť tento robot premiestnený
vrstva
public int vrstva()
 Vráti poradové číslo vrstvy kreslenia,
 v ktorej je umiestnený tento robot.
 
 Predvolené číslo vrstvy je 0. Stúpajúca hodnota
 čísla vrstvy znamená neskoršie kreslenie, čiže „zobrazenie
 (robota, resp. ním reprezentovaného objektu) viac v popredí.“
 Ešte raz v skratke: Robot s vyšším číslom vrstvy bude nakreslený
 neskôr, čo znamená, že bude vizuálne prekrývať roboty s nižšími
 číslami vrstiev. (Čísla vrstiev môžu byť aj záporné.)
 
 Príklad:
 
 Desať robotov v kruhu je po spustení kreslených v tom poradí,
 ako boli vytvorené. Kliknutie ľavým tlačidlom myši „priblíži“
 robot (presunie ho do vyššej vrstvy) a kliknutie iným
 (predpokladajme, že pravým, ale môže to byť aj stredné)
 tlačidlom vykoná opak.
 
 
import knižnica.*;
public class Vrstvy extends GRobot
{
    public class Trojzubec extends GRobot
    {
        public Trojzubec(double uhol)
        {
            // Nastavenie vlastností (odvodeného) robota.
            uhol(uhol);
            veľkosť(60);
            preskočVpravo(120);
            hrúbkaČiary(2);
        }
        @Override public void kresliTvar()
        {
            // Kreslenie tvaru:
            farba(svetlošedá);
            kružnica();
            farba(modrá);
            vypĺňajTvary();
            trojzubec();
            farba(žltá);
            nevypĺňajTvary();
            trojzubec();
            farba(svetlozelená);
            text("" + vrstva());
        }
        @Override public void klik()
        {
            // Klik ľavým tlačidlom posunie robota do vyššej vrstvy (do
            // popredia) a klik ľavým naopak. Roboty v rovnakých vrstvách
            // sú kreslení buď podľa poradia, v ktorom boli vytvorení, alebo
            // podľa upraveného poradia (pozri napríklad medódy: naVrch,
            // naSpodok, vyššie, nižšie…).
            if (myšV())
            {
                if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                    vrstva(vrstva() + 1);
                else
                    vrstva(vrstva() – 1);
            }
        }
    }
    private Vrstvy()
    {
        // Konštruktor nadradenej triedy (GRobot) upraví veľkosť plátna.
        // (Toto je použiteľné len pri hlavnom robote.)
        super(400, 400);
        skry();
        // Vytvorenie desiatich robotov (zoradených za sebou na kružnici).
        for (int i = 0; i 360; i += 36) new Trojzubec(i);
    }
    // Hlavná metóda. (Vstupný bod programu.)
    public static void main(String... args) { new Vrstvy(); }
}
 
 Výsledok:
 
 
 Vzhľad príkladu s vrstvami.
Návratová hodnota:
celé číslo určujúce poradové číslo vrstvy kreslenia
     pre tento robot
naVrch
public void naVrch()
Presunie tento robot do popredia s ohľadom na umiestnenie
 robotov do vrstiev. Technicky to znamená, že robot bude
 umiestnený na koniec vnútorného zoznamu robotov. Poradie
 umiestnenia robotov v tomto zozname ovplyvňuje poradie kreslenia
 robotov nachádzajúcich sa v spoločnej vrstve. Pri štandardnom
 spracovaní s pomocou výzvy treba
 počítať s tým, že tento robot bude odteraz vyzývaný ako posledný
 (bez ohľadu na umiestnenie do vrstiev).
Pozri tiež:
naSpodok(), 
vyššie(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
jePred(GRobot), 
jeZa(GRobot)
naSpodok
public void naSpodok()
Presunie tento robot do pozadia s ohľadom na umiestnenie
 robotov do vrstiev. Technicky to znamená, že robot bude
 umiestnený na začiatok vnútorného zoznamu robotov. Poradie
 umiestnenia robotov v tomto zozname ovplyvňuje poradie kreslenia
 robotov nachádzajúcich sa v spoločnej vrstve. Pri štandardnom
 spracovaní s pomocou výzvy treba
 počítať s tým, že tento robot bude odteraz vyzývaný ako prvý
 (bez ohľadu na umiestnenie do vrstiev).
Pozri tiež:
naVrch(), 
vyššie(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
jePred(GRobot), 
jeZa(GRobot)
vyššie
public void vyššie()
Presunie tento robot o úroveň vyššie v rámci poradia
 kreslenia robotov s ohľadom na umiestnenie robotov do vrstiev.
 Technicky to znamená to, že robot bude umiestnený o jeden
 prvok ďalej v rámci vnútorného zoznamu robotov. Poradie
 umiestnenia robotov v tomto zozname ovplyvňuje poradie
 kreslenia robotov nachádzajúcich sa v spoločnej vrstve. Pri
 štandardnom spracovaní s pomocou výzvy to bude znamenať, že tento robot bude odteraz vyzývaný
 o niečo neskôr (poradie vyzývania nesúvisí s umiestnením
 robotov do vrstiev).
Pozri tiež:
naVrch(), 
naSpodok(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
jePred(GRobot), 
jeZa(GRobot)
vyssie
public void vyssie()
 Alias pre vyššie.
nižšie
public void nižšie()
Presunie tento robot o úroveň nižšie v rámci poradia
 kreslenia robotov s ohľadom na umiestnenie robotov do vrstiev.
 Technicky to znamená to, že robot bude umiestnený o jeden prvok
 skôr v rámci vnútorného zoznamu robotov. Poradie umiestnenia
 robotov v tomto zozname ovplyvňuje poradie kreslenia robotov
 nachádzajúcich sa v spoločnej vrstve. Pri štandardnom spracovaní
 s pomocou výzvy to bude znamenať,
 že tento robot bude odteraz vyzývaný o niečo skôr
 (poradie vyzývania nesúvisí s umiestnením robotov do vrstiev).
Pozri tiež:
naVrch(), 
naSpodok(), 
vyššie(), 
pred(GRobot), 
za(GRobot), 
somPred(GRobot), 
somZa(GRobot)
nizsie
public void nizsie()
 Alias pre nižšie.
pred
public void pred(GRobot ktorého)
Presunie tento robot pred zadaný robot (z pohľadu
 zoradenia robotov vo vnútornom zozname, pričom umiestnenie
 robotov do vrstiev zostane neovplyvnené). Technicky to znamená,
 že tento robot bude vo vnútornom zozname robotov umiestnený
 „za“ zadaný robot, to jest – jeho poradové číslo v zozname
 robotov bude vyššie.
 Poradie umiestnenia robotov v tomto zozname ovplyvňuje
 poradie kreslenia robotov nachádzajúcich sa v spoločnej vrstve,
 pričom roboty s nižším poradovým číslom sú kreslené skôr, preto
 sú v rámci jednej vrstvy zobrazené pod svojími rovesníkmi.
 Pri štandardnom spracovaní s pomocou výzvy bude tento robot odteraz vyzývaný
 tesne po zadanom robote
 (poradie vyzývania nesúvisí s umiestnením robotov do vrstiev).
Parametre:
ktorého – robot, pred ktorého má byť tento robot
     posunutý
Pozri tiež:
naVrch(), 
naSpodok(), 
vyššie(), 
nižšie(), 
za(GRobot), 
somPred(GRobot), 
somZa(GRobot)
nad
public void nad(GRobot ktorého)
 Alias pre pred.
za
public void za(GRobot ktorého)
Presunie tento robot za zadaný robot (z pohľadu zoradenia
 robotov vo vnútornom zozname robotov, pričom umiestnenie
 robotov do vrstiev zostane neovplyvnené). Technicky to znamená,
 že tento robot bude vo vnútornom zozname robotov umiestnený
 „pred“ zadaný robot, to jest – jeho poradové číslo v zozname
 robotov bude nižšie.
 Poradie umiestnenia robotov v tomto zozname ovplyvňuje poradie
 kreslenia robotov nachádzajúcich sa v spoločnej vrstve, pričom
 roboty s nižším poradovým číslom sú kreslené skôr, preto sú
 v rámci jednej vrstvy zobrazené pod svojími rovesníkmi. Pri
 štandardnom spracovaní s pomocou výzvy bude tento robot odteraz vyzývaný skôr, než zadaný robot
 (poradie vyzývania nesúvisí s umiestnením robotov do vrstiev).
Parametre:
ktorého – robot, za ktorého má byť tento robot
     umiestnený
Pozri tiež:
naVrch(), 
naSpodok(), 
vyššie(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
somPred(GRobot), 
somZa(GRobot)
pod
public void pod(GRobot ktorého)
 Alias pre za.
somPred
public boolean somPred(GRobot ktorým)
Overí, či je tento robot pred zadaným robotom. S ohľadom na
 umiestnenie robotov do vrstiev to nemusí nevyhnutne znamenať,
 že tento robot bude skutočne nakreslený pred zadaným robotom.
 Ak chcete overiť skutočné poradie zobrazovania, porovnajte
 najskôr hodnoty umiestnenia robotov vo vrstvách.
 Metóda vráti true pre všetkých robotov, ktorí sú
 technicky umiestnení za týmto robotom (to znamená, že sú vo
 vnútornom zozname robotov na pozícii s nižším poradovým číslom).
 Metóda berie do úvahy aj skrytých robotov.
Parametre:
ktorým – robot, voči ktorému má byť overená poloha tohto
     robota
Návratová hodnota:
true ak je tento robot umiestnený nad
     určeným robotom, inak false
Pozri tiež:
naVrch(), 
naSpodok(), 
vyššie(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
somZa(GRobot)
somNad
public boolean somNad(GRobot ktorým)
 Alias pre somPred.
jeZa
public boolean jeZa(GRobot ktorý)
 Alias pre somPred.
jePod
public boolean jePod(GRobot ktorý)
 Alias pre somPred.
somZa
public boolean somZa(GRobot ktorým)
Overí, či je tento robot za zadaným robotom. S ohľadom na
 umiestnenie robotov do vrstiev to nemusí nevyhnutne znamenať,
 že tento robot bude skutočne nakreslený za zadaným robotom.
 Ak chcete overiť skutočné poradie zobrazovania, porovnajte
 najskôr hodnoty umiestnenia robotov vo vrstvách.
 Metóda vráti true pre všetky roboty, ktoré sú
 technicky umiestnené pred týmto robotom (to znamená, že sú vo
 vnútornom zozname robotov na pozícii s vyšším poradovým číslom).
 Metóda berie do úvahy aj skryté roboty.
Parametre:
ktorým – robot, voči ktorému má byť overená poloha tohto
     robota
Návratová hodnota:
true ak je tento robot umiestnený pod
     určeným robotom, inak false
Pozri tiež:
naVrch(), 
naSpodok(), 
vyššie(), 
nižšie(), 
pred(GRobot), 
za(GRobot), 
somPred(GRobot)
somPod
public boolean somPod(GRobot ktorým)
 Alias pre somZa.
jePred
public boolean jePred(GRobot ktorý)
 Alias pre somZa.
jeNad
public boolean jeNad(GRobot ktorý)
 Alias pre somZa.
dajSpojnicu
public GRobot.Spojnica dajSpojnicu(GRobot cieľ)
Vráti inštanciu jestvujúcej spojnice medzi týmto a zadaným
 robotom alebo vráti hodnotu null, ak spojnica
 nejestvuje.
Parametre:
cieľ – partnerský (cieľový) robot medzi ktorým má byť
     hľadaná jestvujúca spojnica
Návratová hodnota:
jestvujúca inštancia spojnice
     alebo null
Pozri tiež:
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot), 
spojniceZ(), 
spojniceDo(), 
súSpojniceZ(), 
súSpojniceDo()
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať
 aktuálnu farbu a hrúbku (aj typ) čiary tohto robota, ak
 spojnica medzi týmto a zadaným robotom jestvuje, jej farba
 a hrúbka (aj typ) čiary sa aktualizujú podľa zdrojového robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku čiary a aktuálnu farbu tohto robota (typ čiary bude
 predvolený – súvislá čiara). Ak spojnica jestvuje, hrúbka čiary
 sa aktualizuje zadanou hodnotou (typ bude opäť predvolený –
 súvislá čiara) a farba sa aktualizuje podľa aktuálnej farby
 tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary, ktorá značí automatický
 štýl čiary spojnice určený podľa aktuálneho štýlu čiary
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 farbu čiary a hrúbku (aj typ) čiary podľa aktuálneho
 nastavenia tohto robota. Ak spojnica jestvuje, jej farba sa
 aktualizuje zadanou hodnotou a hrúbka čiary sa aktualizuje
 podľa aktuálnej hrúbky (a typu) čiary tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: Namiesto konkrétnej farby
 je povolené zadať aj hodnotu null, ktorá signalizuje
 automatickú farbu podľa aktuálnej hodnoty zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka,
                                Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku a farbu čiary (typ čiary bude predvolený – súvislá
 čiara). Ak spojnica jestvuje, hrúbka a farba čiary sa
 aktualizujú zadanými hodnotami (typ bude opäť predvolený –
 súvislá čiara).
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary a hodnotu
 null namiesto konkrétnej farby, čo značí
 automatické hodnoty podľa aktuálnych vlastností zdrojového
 robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať farbu
 čiary určenú zadaným objektom a hrúbku (aj typ) čiary podľa
 aktuálneho nastavenia tohto robota. Ak spojnica jestvuje, jej
 farba sa aktualizuje podľa farby zadaného objektu a hrúbka (aj
 typ) čiary sa aktualizuje podľa aktuálnej hrúbky čiary tohto
 robota. (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: Namiesto konkrétnej farby
 je povolené zadať aj hodnotu null, ktorá signalizuje
 automatickú farbu podľa aktuálnej hodnoty zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
objekt – objekt, podľa ktorého bude určená farba čiary
     spojnice
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka,
                                Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku a farbu čiary podľa zadaného objektu (typ čiary bude
 predvolený – súvislá čiara). Ak spojnica jestvuje, hrúbka čiary
 sa aktualizuje zadanou hodnotou a farba sa aktualizuje podľa
 farby zadaného objektu (typ čiary bude opäť predvolený – súvislá
 čiara).
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary a hodnotu
 null namiesto konkrétnej inštancie farebnosti, čo
 značí automatické hodnoty podľa aktuálnych vlastností
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
objekt – objekt, podľa ktorého sa určí farba čiary
     spojnice
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadaný
 typ čiary a aktuálnu farbu tohto robota. Ak spojnica jestvuje,
 typ čiary sa aktualizuje podľa zadaného objektu a farba sa
 aktualizuje podľa aktuálnej farby tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary je povolené zadať aj hodnotu null, čo značí
 automatický štýl čiary spojnice určený podľa aktuálneho štýlu
 čiary zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara,
                                Color farba)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadaný
 typ a farbu čiary. Ak spojnica jestvuje, typ a farba čiary sa
 aktualizujú zadanými hodnotami.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary alebo farby je povolené zadať aj hodnotu null,
 čo značí automatické hodnoty podľa aktuálnych vlastností
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara,
                                Farebnosť objekt)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať typ
 a farbu čiary podľa zadaných objektov. Ak spojnica jestvuje,
 typ a farba čiary sa aktualizujú podľa zadaných objektov.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Všetky verzie metódy spojnica,
 ktoré neobsahujú parametre orezanieZačiatku
 a orezanieKonca rušia oblasti orezania začiatku a konca
 spojnice.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary alebo inštancie farebnosti je povolené zadať aj hodnotu
 null, čo značí automatické hodnoty podľa aktuálnych
 vlastností zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
objekt – objekt, podľa ktorého sa určí farba čiary
     spojnice
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať
 aktuálnu farbu a hrúbku (aj typ) čiary tohto robota, ak
 spojnica medzi týmto a zadaným robotom jestvuje, jej farba
 a hrúbka (aj typ) čiary sa aktualizujú podľa zdrojového robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku čiary a aktuálnu farbu tohto robota (typ čiary bude
 predvolený – súvislá čiara). Ak spojnica jestvuje, hrúbka čiary
 sa aktualizuje zadanou hodnotou (typ bude opäť predvolený –
 súvislá čiara) a farba sa aktualizuje podľa aktuálnej farby
 tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary, čo značí automatický
 štýl čiary spojnice určený podľa aktuálneho štýlu čiary
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Color farba,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 farbu čiary a hrúbku (aj typ) čiary podľa aktuálneho
 nastavenia tohto robota. Ak spojnica jestvuje, jej farba sa
 aktualizuje zadanou hodnotou a hrúbka čiary sa aktualizuje
 podľa aktuálnej hrúbky (a typu) čiary tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: Namiesto konkrétnej farby
 je povolené zadať aj hodnotu null, ktorá signalizuje
 automatickú farbu podľa aktuálnej hodnoty zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka,
                                Color farba,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku a farbu čiary (typ čiary bude predvolený – súvislá
 čiara). Ak spojnica jestvuje, hrúbka a farba čiary sa
 aktualizujú zadanými hodnotami (typ bude opäť predvolený –
 súvislá čiara).
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary a hodnotu
 null namiesto konkrétnej farby, čo značí
 automatické hodnoty podľa aktuálnych vlastností zdrojového
 robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Farebnosť objekt,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať farbu
 čiary určenú zadaným objektom a hrúbku (aj typ) čiary podľa
 aktuálneho nastavenia tohto robota. Ak spojnica jestvuje, jej
 farba sa aktualizuje podľa farby zadaného objektu a hrúbka (aj
 typ) čiary sa aktualizuje podľa aktuálnej hrúbky čiary tohto
 robota. (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: Namiesto konkrétneho objektu
 farebnosti je povolené zadať hodnotu null, čo značí
 automatickú farbu podľa aktuálnej hodnoty zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
objekt – objekt, podľa ktorého bude určená farba čiary
     spojnice
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                double hrúbka,
                                Farebnosť objekt,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadanú
 hrúbku a farbu čiary podľa zadaného objektu (typ čiary bude
 predvolený – súvislá čiara). Ak spojnica jestvuje, hrúbka čiary
 sa aktualizuje zadanou hodnotou a farba sa aktualizuje podľa
 farby zadaného objektu (typ čiary bude opäť predvolený – súvislá
 čiara).
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: V tomto prípade je povolené
 zadávať zápornú hodnotu hrúbky čiary a hodnotu
 null namiesto konkrétnej inštancie farebnosti, čo
 značí automatické hodnoty podľa aktuálnych vlastností
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
hrúbka – hrúbka čiary spojnice
objekt – objekt, podľa ktorého sa určí farba čiary
     spojnice
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Výnimky:
GRobotException – ak je hrúbka čiary záporná
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadaný
 typ čiary a aktuálnu farbu tohto robota. Ak spojnica jestvuje,
 typ čiary sa aktualizuje podľa zadaného objektu a farba sa
 aktualizuje podľa aktuálnej farby tohto robota.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary je povolené zadať hodnotu null, čo značí
 automatický štýl čiary spojnice určený podľa aktuálneho štýlu
 čiary zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara,
                                Color farba,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať zadaný
 typ a farbu čiary. Ak spojnica jestvuje, typ a farba čiary sa
 aktualizujú zadanými hodnotami.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary alebo farby je povolené zadať hodnotu null,
 čo značí automatické hodnoty podľa aktuálnych vlastností
 zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
farba – farba čiary spojnice (argument musí byť objekt
     typu Color alebo potomok)
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
spojnica
public GRobot.Spojnica spojnica(GRobot cieľ,
                                Stroke čiara,
                                Farebnosť objekt,
                                Shape orezanieZačiatku,
                                Shape orezanieKonca)
Vytvorí novú alebo upraví parametre jestvujúcej spojnice
 medzi týmto a zadaným robotom. Nová spojnica bude mať typ
 a farbu čiary podľa zadaných objektov. Ak spojnica jestvuje,
 typ a farba čiary sa aktualizujú podľa zadaných objektov.
 (Ide o spojnicu smerujúcu od tohto robota.)
 Navyše budú nastavené alebo aktualizované parametre orezania
 začiatku a/alebo konca spojnice – posledné dva parametre
 (orezanieZačiatku a orezanieKonca) môžu
 určovať tvar oblasti orezania spojnice počas jej kreslenia.
 
 Poznámka: Namiesto konkrétneho štýlu
 čiary alebo inštancie farebnosti je povolené zadať hodnotu
 null, čo značí automatické hodnoty podľa aktuálnych
 vlastností zdrojového robota.
Parametre:
cieľ – partnerský robot medzi ktorým bude vytvorená
     alebo upravená jestvujúca spojnica
čiara – objekt určujúci typ čiary spojnice
objekt – objekt, podľa ktorého sa určí farba čiary
     spojnice
orezanieZačiatku – tvar orezania začiatku spojnice alebo
     null (začiatok spojnice je určený polohou
     tohto, zdrojového, robota)
orezanieKonca – tvar orezania konca spojnice alebo
     null (koniec spojnice je určený polohou
     cieľového robota – pozri parameter cieľ)
Návratová hodnota:
nová alebo jestvujúca inštancia
     spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
kopírujSpojnice
public void kopírujSpojnice(GRobot odKtorého)
Skopíruje (alebo aktualizuje) všetky spojnice podľa zadaného
 robota. Skopírujú (aktualizujú) sa jednak spojnice, ktoré boli
 definované smerom k zadanému robotu a aj spojnice definované
 smerom od neho.
Parametre:
odKtorého – robot, podľa ktorého budú vytvorené nové
     (prípadne aktualizované jestvujúce) spojnice aktuálneho
     robota
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
kopirujSpojnice
public void kopirujSpojnice(GRobot odKtorého)
 Alias pre kopírujSpojnice.
zrušSpojnice
public void zrušSpojnice()
Zruší všetky spojnice smerujúce k tomuto aj od tohto robota.
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
jeSpojnica(GRobot)
zrusSpojnice
public void zrusSpojnice()
 Alias pre zrušSpojnice.
zrušSpojnicu
public void zrušSpojnicu(GRobot cieľ)
Zruší jestvujúcu spojnicu medzi týmto a zadaným robotom.
 (Smerujúcu od tohto robota.)
Parametre:
cieľ – partnerský robot voči ktorému bude zrušená
     jestvujúca spojnica
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnice(), 
jeSpojnica(GRobot)
zrusSpojnicu
public void zrusSpojnicu(GRobot cieľ)
 Alias pre zrušSpojnicu.
jeSpojnica
public boolean jeSpojnica(GRobot cieľ)
Zistí, či medzi týmto a zadaným robotom jestvuje spojnica
 smerujúca od tohto robota.
Parametre:
cieľ – partnerský robot voči ktorému bude overená
     existencia spojnice
Pozri tiež:
dajSpojnicu(GRobot), 
spojnica(GRobot), 
spojnica(GRobot, double), 
spojnica(GRobot, Color), 
spojnica(GRobot, double, Color), 
spojnica(GRobot, double, Farebnosť), 
spojnica(GRobot, Farebnosť), 
spojnica(GRobot, Stroke), 
spojnica(GRobot, Stroke, Color), 
spojnica(GRobot, Stroke, Farebnosť), 
spojnica(GRobot, Shape, Shape), 
spojnica(GRobot, double, Shape, Shape), 
spojnica(GRobot, Color, Shape, Shape), 
spojnica(GRobot, double, Color, Shape, Shape), 
spojnica(GRobot, double, Farebnosť, Shape, Shape), 
spojnica(GRobot, Farebnosť, Shape, Shape), 
spojnica(GRobot, Stroke, Shape, Shape), 
spojnica(GRobot, Stroke, Color, Shape, Shape), 
spojnica(GRobot, Stroke, Farebnosť, Shape, Shape), 
kopírujSpojnice(GRobot), 
zrušSpojnicu(GRobot), 
zrušSpojnice(), 
spojniceZ(), 
spojniceDo(), 
súSpojniceZ(), 
súSpojniceDo()
máSpojnicu
public boolean máSpojnicu(GRobot cieľ)
 Alias pre jeSpojnica.
maSpojnicu
public boolean maSpojnicu(GRobot cieľ)
 Alias pre jeSpojnica.
spojniceZ
public GRobot.Spojnica[] spojniceZ()
Vytvorí zoznam všetkých spojníc smerujúcich z tohto
 robota.
Návratová hodnota:
zoznam spojníc smerujúcich z tohto robota
Pozri tiež:
dajSpojnicu(GRobot), 
spojniceDo(), 
súSpojniceZ(), 
súSpojniceDo(), 
jeSpojnica(GRobot)
spojniceDo
public GRobot.Spojnica[] spojniceDo()
Vytvorí zoznam všetkých spojníc smerujúcich do tohto
 robota.
Návratová hodnota:
zoznam spojníc smerujúcich do tohto robota
Pozri tiež:
dajSpojnicu(GRobot), 
spojniceZ(), 
súSpojniceZ(), 
súSpojniceDo(), 
jeSpojnica(GRobot)
súSpojniceZ
public boolean súSpojniceZ()
Overí, či jestvuje aspoň jedna spojnica smerujúca z tohto
 robota. Niekedy je užitočné rýchlo overiť túto informáciu bez
 zbytočného vytvárania inštancií zoznamov.
Návratová hodnota:
true, ak jestvuje aspoň jedna spojnica
     smerujúca z tohto robota
Pozri tiež:
dajSpojnicu(GRobot), 
spojniceZ(), 
spojniceDo(), 
súSpojniceDo(), 
jeSpojnica(GRobot)
suSpojniceZ
public boolean suSpojniceZ()
 Alias pre súSpojniceZ.
súSpojniceDo
public boolean súSpojniceDo()
Overí, či jestvuje aspoň jedna spojnica smerujúca do tohto
 robota. Niekedy je užitočné rýchlo overiť túto informáciu bez
 zbytočného vytvárania inštancií zoznamov.
Pozri tiež:
dajSpojnicu(GRobot), 
spojniceZ(), 
spojniceDo(), 
súSpojniceZ(), 
jeSpojnica(GRobot)
suSpojniceDo
public boolean suSpojniceDo()
 Alias pre súSpojniceDo.
veľkosť
public double veľkosť()
 Zistí aktuálnu veľkosť robota.
 Veľkosť robota je číslo, ktoré (v základnom stave
 robota) vymedzuje polomer kruhového priestoru so stredom na
 súradniciach robota. Chápanie údaju o veľkosti môže
 programátor upraviť preprogramovaním súvisiacich metód.
 Predvolená hodnota je 10.0. Veľkosť robota sa,
 okrem kreslenia predvoleného tvaru robota, používa aj pri
 základnom spôsobe detekcie
 kolízií, používajú ju bezparametrické verzie metód
 dopredu a vzad a má vplyv
 aj na kreslenie vlastného
 obrázkového tvaru robota (pozri aj metódu mierka).
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Návratová hodnota:
veľkosť robota
Pozri tiež:
veľkosť(double), 
veľkosťDoma(), 
pomerDoma(), 
veľkosťPodľaMierky(), 
mierka()
velkost
public double velkost()
 Alias pre veľkosť.
veľkosť
public void veľkosť(double veľkosť)
 Nastaví novú veľkosť robota.
 Veľkosť robota je číslo, ktoré (v základnom stave
 robota) vymedzuje polomer kruhového priestoru so stredom na
 súradniciach robota. Chápanie údaju o veľkosti môže
 programátor upraviť preprogramovaním súvisiacich metód.
 Predvolená hodnota je 10.0. Veľkosť robota sa,
 okrem kreslenia predvoleného tvaru robota, používa aj pri
 základnom spôsobe detekcie
 kolízií, používajú ju bezparametrické verzie metód
 dopredu a vzad a má vplyv
 aj na kreslenie vlastného
 obrázkového tvaru robota (pozri aj metódu mierka).
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Parametre:
veľkosť – nová veľkosť robota (mala by byť väčšia ako
     nula, inak môže dôjsť k rôznym vedľajším efektom pri
     používaní robota)
Pozri tiež:
veľkosť(), 
veľkosťDoma(Double), 
pomerDoma(Double), 
veľkosťPodľaMierky(), 
mierka()
velkost
public void velkost(double veľkosť)
 Alias pre veľkosť.
šírka
public double šírka()
 Vráti aktuálnu šírku robota.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
aktuálna šírka robota
Pozri tiež:
šírka(double), 
máŠírku(double), 
rozmery()
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
 Vráti aktuálnu výšku robota.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
aktuálna výška robota
Pozri tiež:
výška(double), 
máVýšku(double), 
rozmery()
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
šírka
public void šírka(double šírka)
 Nastaví novú šírku robota.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
šírka v rozhraní Rozmer
Parametre:
šírka – nová šírka robota
Pozri tiež:
šírka(), 
máŠírku(double), 
rozmery()
sirka
public void sirka(double šírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double výška)
 Nastaví novú výšku robota.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
výška v rozhraní Rozmer
Parametre:
výška – nová výška robota
Pozri tiež:
výška(), 
máVýšku(double), 
rozmery()
vyska
public void vyska(double výška)
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmer
public Rozmer rozmer()
Vráti objekt obsahujúci aktuálne hodnoty
 šírky a výšky
 robota. (Ide o prepočítané hodnoty – pozri poznámku nižšie.)
 
 
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
 
 
 
 Upozornenie: Do verzie 2.1
 programovacieho rámca bola táto metóda aliasom metódy veľkosť. (Z tohto vyjadrenia vyplýva, že
 toto už viac neplatí.) Od uvedenej verzie je táto metóda
 aliasom metódy rozmery (aby sa
 zabránilo zmätkom s podobnosťou názvov).
 
 Poznámka: Metóda pri každom volaní
 vytvorí novú inštanciu triedy Rozmery. (Z toho
 vyplýva, že opakované a časté volanie tejto metódy je menej
 efektívne v porovnaní s inými metódami na zisťovanie rozmerov –
 znižuje výkon aplikácie.
Návratová hodnota:
objekt vytvorený podľa aktuálnych rozmerov robota
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double), 
rozmer(Rozmer)
rozmer
public void rozmer(Rozmer rozmer)
Nastaví nové rozmery robota podľa zadanej implementácie
 rozmeru.
 
 
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
 
 
 
 Upozornenie: Do verzie 2.1
 programovacieho rámca bola táto metóda aliasom metódy veľkosť. (Z tohto vyjadrenia vyplýva, že
 toto už viac neplatí.) Od uvedenej verzie je táto metóda
 aliasom metódy rozmery (aby sa
 zabránilo zmätkom s podobnosťou názvov).
Parametre:
rozmer – inštancia obsahujúca nové rozmery robota
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double), 
rozmer()
rozmery
public Rozmery rozmery()
Zistí aktuálne rozmery robota.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
rozmery v rozhraní Rozmer
Návratová hodnota:
objekt vytvorený podľa aktuálnych rozmerov robota
Pozri tiež:
šírka(), 
výška(), 
rozmer(), 
rozmery(), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double), 
rozmery(double, double), 
rozmery(Rozmer)
rozmery
public void rozmery(double šírka,
                    double výška)
Nastaví nové rozmery robota.
 
 Upozornenie: Rozmery
 (šírka a výška)
 robota sú takpovediac „tieňové“ vlastnosti. V skutočnosti sú
 vnútorne tieto hodnoty premietané cez vlastnosti veľkosti a pomeru robota.
 Pri nastavovaní rozmerov platí, že aktuálna veľkosť robota je
 nastavená na polovicou zadanej výšky a aktuálny pomer veľkosti
 robota je nastavený (vypočítaný) ako pomer (podiel) polovice
 zadanej šírky a novej veľkosti (ktorá bola práve vypočítaná).
 Podobne to platí naopak: výška je vypočítaná ako dvojnásobok
 aktuálnej veľkosti robota a šírka je súčinom výšky (ktorá bola
 práve vypočítaná) a pomeru veľkosti robota. Reálne nie
 sú hodnoty šírky a výšky robota uchovávané. (Vždy ide
 o prepočet.)
 
 Vzorce prepočtov:
 
 
// Prepočet šírky a výšky na veľkosť a pomer veľkosti
// (pozor, v druhom riadku je použitá vypočítaná
// hodnota z prvého riadka):
veľkosť = výška / 2.0;
pomerVeľkosti = (šírka / 2.0) / veľkosť;
    // (Poznámka: Ak je veľkosť nulová, tak je aj pomer nastavený na nulu.)
// Prepočet veľkosti a pomeru veľkosti na šírku a výšku:
šírka = 2.0 * veľkosť * pomerVeľkosti;
výška = 2.0 * veľkosť;
Parametre:
šírka – nová šírka robota
výška – nová výška robota
Pozri tiež:
šírka(), 
výška(), 
rozmer(), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double), 
rozmery(), 
rozmery(Rozmer)
rozmery
public void rozmery(Rozmer rozmer)
Nastaví nové rozmery robota podľa zadanej implementácie
 rozmeru.
 
 Poznámka: Venujte pozornosť
 upozorneniu v opise metódy rozmery(šírka, výška).
Definované:
rozmery v rozhraní Rozmer
Parametre:
rozmer – inštancia obsahujúca nové rozmery robota
Pozri tiež:
šírka(), 
výška(), 
rozmer(), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double), 
rozmery(), 
rozmery(double, double)
máŠírku
public boolean máŠírku(double šírka)
Zistí, či má robot zadanú šírku.
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – šírka, ktorá má byť porovnaná so šírkou robota
Návratová hodnota:
true ak sa šírka robota zhoduje so
     zadanou šírkou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery()
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Zistí, či má robot zadanú výšku.
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – výška, ktorá má byť porovnaná s výškou robota
Návratová hodnota:
true ak sa výška robota zhoduje so
     zadanou výškou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery()
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí, či sa rozmery robota a rozmery zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi robota
Návratová hodnota:
true ak sa rozmery robota zhodujú s rozmermi
     zadaného objektu, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery()
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí, či sa rozmery robota dokonale zhodujú so zadanými
 rozmermi. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – šírka porovnávaná so šírkou robota
výška – výška porovnávaná s výškou robota
Návratová hodnota:
true ak sa rozmery robota zhodujú so
     zadanými rozmermi, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery()
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
veľkosťPodľaMierky
public void veľkosťPodľaMierky()
Nastaví veľkosť robota podľa aktuálnej mierky tak, aby sa hodnota mierky vyrovnala na 1.0. (Ak bola veľkosť mierky
 už predtým jednotková, volanie metódy nebude mať žiadny efekt.)
 Ak mala mierka napríklad hodnotu
 2.0, tak sa veľkosť robota zdvojnásobí
 (a mierka sa zresetuje na hodnotu
 1.0).
Pozri tiež:
veľkosťPodľaMierky(double), 
veľkosť(), 
mierka()
velkostPodlaMierky
public void velkostPodlaMierky()
 Alias pre veľkosťPodľaMierky.
veľkosťPodľaMierky
public void veľkosťPodľaMierky(double zmena)
Nastaví veľkosť robota podľa aktuálnej mierky tak, aby nová hodnota mierky nadobudla zadanú hodnotu.
 
 Ak je napríklad veľkosť mierky
 rovná 2.0, veľkosť robota
 rovná 20.0 a zadaná hodnota je rovná 3.0,
 tak nová veľkosť robota bude
 30.0 a mierka
 3.0.
 
 Alebo napríklad veľkosť mierky
 rovná 4.0, veľkosť robota
 rovná 25.0 a zadaná hodnota rovná 6.0,
 tak nová veľkosť robota bude rovná
 37.5 (a nová hodnota mierky
 6.0).
Parametre:
zmena – hodnota, ktorú má mať mierka po zmene veľkosti
     robota
Pozri tiež:
veľkosťPodľaMierky(), 
veľkosť(), 
mierka()
velkostPodlaMierky
public void velkostPodlaMierky(double zmena)
 Alias pre veľkosťPodľaMierky.
pomerPodľaMierky
public void pomerPodľaMierky()
Nastaví pomer veľkosti robota podľa aktuálnej mierky pomeru tak, aby sa hodnota mierky pomeru vyrovnala na 1.0. (Ak
 bola mierka pomeru už predtým jednotková, volanie metódy nebude
 mať žiadny efekt.) Ak mala mierka
 pomeru napríklad hodnotu 2.0, tak sa pomer veľkosti
 robota zdvojnásobí (a mierka
 pomeru sa zresetuje na hodnotu 1.0).
Pozri tiež:
pomerPodľaMierky(double), 
pomer(), 
mierkaPomeru()
pomerPodlaMierky
public void pomerPodlaMierky()
 Alias pre pomerPodľaMierky.
pomerPodľaMierky
public void pomerPodľaMierky(double zmena)
Nastaví pomer veľkosti robota podľa aktuálnej mierky pomeru tak, aby nová hodnota
 mierky pomeru nadobudla zadanú
 hodnotu.
 
 Ak je napríklad hodnota mierky
 pomeru rovná 2.0, pomer
 veľkosti robota sa rovná 20.0 a zadaná hodnota je
 rovná 3.0, tak nová pomeru
 veľkosti robota bude 30.0 a mierka pomeru 3.0.
 
 Alebo napríklad hodnota mierky
 pomeru sa rovná 4.0, pomer
 veľkosti robota je rovný 25.0 a zadaná hodnota
 zmeny je 6.0, tak nová hodnota pomeru veľkosti robota bude rovná 37.5 (a nová
 hodnota mierky pomeru
 6.0).
Parametre:
zmena – hodnota, ktorú má mať mierka pomeru po korekcii
     pomeru veľkosti robota
Pozri tiež:
pomerPodľaMierky(), 
pomer(), 
mierkaPomeru()
pomerPodlaMierky
public void pomerPodlaMierky(double zmena)
 Alias pre pomerPodľaMierky.
mierka
public double mierka()
 Zistí aktuálnu hodnotu mierky robota.
 Táto hodnota je prepočítavaná vnútorne. Na mierku má vplyv aj
 zmena hodnoty veľkosti robota
 (pretože mierka je v skutočnosti pomerom aktuálnej
 veľkosti robota a veľkosti robota, ktorú mal pri svojom
 vytvorení, resete mierky alebo pri poslednej zmene mierky). Mierka sa resetuje
 pri zmene vlastného
 obrázkového tvaru robota.
 
 Mierka pôvodne primárne slúžila na úpravu veľkosti obrázkov
 pri ich kreslení robotom. Mierka má vplyv aj na
 kreslenie oblastí a tvarov
 Javy robotom. V tej súvislosti aj na zisťovanie prítomnosti
 bodov v tvaroch
 a prípadne na ďalšie súvisiace vlastnosti/funkcie
 programovacieho rámca.
 
 Mierka nemá vplyv na veľkosť kreslenia tvarov robota
 bezparametrickými verziami metód (napríklad kružnica()), ani na mieru pohybu robota bezparametrickými
 verziami metód pohybu (napríklad dopredu()). Má vplyv iba na veľkosť vlastného obrázkového tvaru robota.
Návratová hodnota:
aktuálna mierka robota
Pozri tiež:
mierka(double), 
veľkosť(), 
veľkosťPodľaMierky()
mierka
public void mierka(double mierka)
 Upraví aktuálnu mierku robota. Táto
 hodnota je prepočítavaná vnútorne. Na mierku má vplyv aj zmena
 hodnoty veľkosti robota. Ďalšie
 informácie o význame a vplyve mierky sú v opise metódy
 mierka().
Parametre:
mierka – nová mierka robota
Pozri tiež:
mierka(), 
veľkosť(), 
veľkosťPodľaMierky()
mierkaPomeru
public double mierkaPomeru()
 Zistí aktuálnu hodnotu mierky pomeru
 veľkosti robota. Táto hodnota je prepočítavaná vnútorne. Na
 mierku pomeru veľkosti má vplyv aj zmena hodnoty pomeru veľkosti robota (pretože mierka pomeru
 veľkosti je v skutočnosti pomerom aktuálneho pomeru veľkosti
 robota a pomeru, ktorý mal nastavený pri svojom vytvorení,
 resete mierky pomeru alebo pri poslednej zmene mierky pomeru). Mierka sa
 resetuje pri zmene vlastného
 obrázkového tvaru robota.
 
 Táto mierka ovplyvňuje aj rozmery obrázkov pri ich kreslení
 robotom. Má vplyv aj na kreslenie oblastí
 a tvarov Javy robotom. V tej súvislosti aj
 na zisťovanie prítomnosti bodov v tvaroch
 a prípadne na ďalšie súvisiace vlastnosti/funkcie
 programovacieho rámca.
 
 Táto mierka nemá vplyv na rozmery kreslenia tvarov robota
 bezparametrickými verziami metód (napríklad kružnica()), ani na mieru pohybu robota bezparametrickými
 verziami metód pohybu (napríklad dopredu()). Má vplyv iba na rozmer vlastného obrázkového tvaru robota.
Návratová hodnota:
aktuálna mierka pomeru veľkosti robota
Pozri tiež:
mierkaPomeru(double), 
pomer(), 
pomerPodľaMierky()
mierkaPomeru
public void mierkaPomeru(double mierka)
 Upraví aktuálnu mierku pomeru
 veľkosti tohto robota. Táto hodnota je prepočítavaná vnútorne.
 Má na ňu vplyv aj zmena hodnoty pomeru
 veľkosti robota. Ďalšie informácie o význame a vplyve tejto
 mierky sú v opise metódy mierkaPomeru().
Parametre:
mierka – nová mierka pomeru veľkosti robota
Pozri tiež:
mierkaPomeru(), 
pomer(), 
pomerPodľaMierky()
pomer
public double pomer()
 Zistí aktuálnu hodnotu pomeru
 rozmerov (šírky a výšky) robota. Táto hodnota ovplyvňyje aj
 pomer šírky a výšky tých tvarov, pri ktorých nemusia byť ich
 rozmery (šírky a výšky) zhodné, čiže napríklad 
 elipsy a obdĺžnika.
 
 Pomer má vplyv len na tie metódy generovania tvarov,
 ktoré neprijímajú žiadny argument. Výška tvaru je určená
 veľkosťou robota a šírka je od nej
 odvodená (vypočítaná podľa hodnoty pomeru). Predvolená hodnota
 pomeru je 1.0, čiže generované tvary majú predvolene
 rovnakú šírku a výšku. Ak sa hodnota pomeru zmení (napríklad)
 na 2.0, tak tvary budú mať dvojnásobnú šírku, ak na
 0.5, tak polovičnú a tak ďalej.
  
 V tejto súvislosti venujte pozornosť upozorneniu v opise
 metódy rozmery(šírka,
 výška).
 
  Ukážky
 pomerov veľkostí: vľavo „obdĺžnik“ s predvoleným pomerom
 veľkostí (1; čiže štvorec, ibaže nakreslený metódou obdĺžnik), v strede obdĺžnik s pomerom 0,8 a vpravo
 s pomerom 1,2.
 
 
Návratová hodnota:
aktuálny pomer rozmerov robota
Pozri tiež:
pomer(double), 
elipsa(), 
obdĺžnik(), 
veľkosť()
pomer
public void pomer(double pomer)
 Upraví aktuálny pomer rozmeru
 robota, čo má priamy vplyv na generovanie niektorých tvarov
 robotom.
 
 Ide o pomer šírky a výšky robota a v tej súvislosti tých
 tvarov, pri ktorých nemusia byť obidva ich rozmery (šírka
 a výška) zhodné, čiže napríklad elipsa
 a obdĺžnik.
 
 Pomer má vplyv len na tie metódy generovania tvarov, ktoré
 neprijímajú žiadny argument. Rozmer dotknutých tvarov je,
 okrem tohto čísla, určený veľkosťou
 robota. Ďalšie informácie o význame a vplyve pomeru sú v opise
 metódy pomer().
 
 Poznámka: Od verzie 2.1 je pomer
 využívaný aj pri implementácii rozhrania Rozmer.
 V tejto súvislosti venujte pozornosť upozorneniu v opise
 metódy rozmery(šírka,
 výška).
Parametre:
pomer – nový pomer rozmerov robota
Pozri tiež:
pomer(), 
elipsa(), 
obdĺžnik(), 
veľkosť()
zaoblenie
public double[] zaoblenie()
Zistí aktuálne hodnoty šírky a výšky zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
 
 
 Ukážky zaoblenia: vľavo obdĺžnik bez
 zaoblenia rohov, v strede nerovnomerné zaoblenie rohov (15 bodov
 horizontálne a 45 bodov vertikálne) a vpravo rovnomerné zaoblenie
 rohov (50 bodov).
 
 
Návratová hodnota:
reálnočíselné pole s hodnotami šírky a výšky zaoblenia
Pozri tiež:
zaoblenie(double), 
zaoblenie(double, double), 
zaoblenieX(), 
zaoblenieX(double), 
zaoblenieY(), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenie
public void zaoblenie(double zaoblenie)
Nastaví hodnoty zaoblenia rohov pravouhlých útvarov
 generovaných robotom (štvorca a obdĺžnika).
Parametre:
zaoblenie – nová hodnota zaoblenia (platí na šírku
     aj výšku zároveň)
Pozri tiež:
zaoblenie(), 
zaoblenie(double, double), 
zaoblenieX(), 
zaoblenieX(double), 
zaoblenieY(), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenie
public void zaoblenie(double zaoblenieX,
                      double zaoblenieY)
Nastaví šírku a výšku zaoblenia rohov pravouhlých útvarov
 generovaných robotom (štvorca a obdĺžnika).
Parametre:
zaoblenieX – nová šírka zaoblenia
zaoblenieY – nová výška zaoblenia
Pozri tiež:
zaoblenie(), 
zaoblenie(double), 
zaoblenieX(), 
zaoblenieX(double), 
zaoblenieY(), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenieX
public double zaoblenieX()
 Zistí aktuálnu hodnotu šírky
 zaoblenia rohov pravouhlých útvarov generovaných robotom
 (štvorca a obdĺžnika).
Návratová hodnota:
šírka zaoblenia
Pozri tiež:
zaoblenie(), 
zaoblenie(double), 
zaoblenie(double, double), 
zaoblenieX(double), 
zaoblenieY(), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenieX
public void zaoblenieX(double zaoblenieX)
 Upraví šírku zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
Parametre:
zaoblenieX – nová šírka zaoblenia
Pozri tiež:
zaoblenie(), 
zaoblenie(double), 
zaoblenie(double, double), 
zaoblenieX(), 
zaoblenieY(), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenieY
public double zaoblenieY()
 Zistí aktuálnu hodnotu výšky
 zaoblenia rohov pravouhlých útvarov generovaných robotom
 (štvorca a obdĺžnika).
Návratová hodnota:
výška zaoblenia
Pozri tiež:
zaoblenie(), 
zaoblenie(double), 
zaoblenie(double, double), 
zaoblenieX(), 
zaoblenieX(double), 
zaoblenieY(double), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
zaoblenieY
public void zaoblenieY(double zaoblenieY)
 Upraví výšku zaoblenia rohov
 pravouhlých útvarov generovaných robotom (štvorca
 a obdĺžnika).
Parametre:
zaoblenieX – nová výška zaoblenia
Pozri tiež:
zaoblenie(), 
zaoblenie(double), 
zaoblenie(double, double), 
zaoblenieX(), 
zaoblenieX(double), 
zaoblenieY(), 
štvorec(), 
obdĺžnik(), 
veľkosť(), 
pomer()
kolíznaOblasť
public Oblasť kolíznaOblasť()
 Vráti objekt aktívnej kolíznej oblasti
 tohto robota alebo null, ak oblasť nebola definovaná.
 Pre viac informácií pozrite setter vlastnosti kolíznaOblasť.
Návratová hodnota:
objekt typu Oblasť alebo
     null
koliznaOblast
public Oblast koliznaOblast()
 Alias pre kolíznaOblasť.
kolíznaOblasť
public void kolíznaOblasť(Shape podľaTvaru)
 S pomocou zadaného tvaru definuje
 novú kolíznu oblasť, ktorú bude od tohto okamihu využívať
 robot na detekciu kolízií s pomocou metódy koliduje.
 Použitie kolíznej oblasti je v rozpoznávaní kolízií presnejšie,
 ale značne pomalšie než predvolený spôsob detekcie kolízií
 (kružnicami; pozri metódu koliduje).
 Ak chcete kolíznu oblasť zrušiť, tak buď zadajte namiesto
 argumentu tejto metódy hodnotu null,
 alebo zavolajte metódu zrušKolíznuOblasť.
 
 Podrobnosti o spôsobe detekcie kolízií a význame kolíznej
 oblasti nájdete v opise metódy koliduje.
Parametre:
podľaTvaru – objekt typu Shape (resp.
     Area alebo Oblasť) alebo
     hodnota null
koliznaOblast
public void koliznaOblast(Shape podľaTvaru)
 Alias pre kolíznaOblasť.
zrušKolíznuOblasť
public void zrušKolíznuOblasť()
 Zruší kolíznu oblasť. Od tohto okamihu
 budú kolízie vyhodnocované predvoleným spôsobom – pozri opisy
 metód kolíznaOblasť
 a koliduje.
zrusKoliznuOblast
public void zrusKoliznuOblast()
 Alias pre zrušKolíznuOblasť.
koliduje
public boolean koliduje(GRobot iný)
Zistí, či tento a zadaný robot vzájomne „kolidujú,“ t. j. či
 nastala ich vzájomná „zrážka“ alebo nie. Overenie tejto
 situácie nie je jednoduchá a priamočiara záležitosť.
 Najjednoduchší (a výpočtovo najrýchlejší) spôsob je zistiť
 ich vzájomnú vzdialenosť, ktorá ak klesne pod určitú hranicu
 (v tomto prípade sa berie do úvahy súčet
 veľkostí oboch robotov), tak to
 bude vyhodnotené ako kolízia. V praxi tento prístup vytvorí
 efekt „neviditeľných kruhových bublín“ okolo stredov obidvoch
 robotov, ktorých „stret“ (čiatočné prekrytie) znamená kolíziu:
 
 
 Dva roboty na
 kolíznom kurze a pri kolízii(šedé kružnice sú
 ilustračné – v podstate označujúneviditeľné bubliny,
 o ktorých sa píše vyššie).
 
 Príklad:
 
 V nasledujúcom príklade sú inicializovaní modrý a tyrkysový
 robot, v rámci čoho sú nasmerovaní na kolízny kurz zo svojej
 (novej) domovskej pozície. Po zrážke sa vrátia späť na domovskú
 pozíciu a celý cyklus sa zopakuje.
 
 
// Inicializácia modrého robota
private final static GRobot modrý = new GRobot()
{{
    zdvihniPero();
    farba(modrá);
    veľkosť(20);
    domov(40, 35, 200);
    rýchlosť(10);
}};
// Inicializácia tyrkysového robota
private final static GRobot tyrkysový = new GRobot()
{{
    zdvihniPero();
    farba(tyrkysová);
    veľkosť(15);
    domov(&#45;40, &#45;35, 80);
    rýchlosť(10);
}};
// Konštruktor hlavnej triedy
private HlavnáTrieda()
{
    skry();
    aktivuj();
}
@Override public void aktivita()
{
    // Detekcia kolízií modrého a tyrkysového robota
    // v reakcii na aktivitu v hlavnej triede
    if (modrý.koliduje(tyrkysový))
    {
        Svet.pípni();
        modrý.domov();
        tyrkysový.domov();
    }
}
 
 Výsledok:
 
 
 Animácia príkladu.
 
  
 
 Tento základný prístup však nemusí vždy vyhovovať. Ak chceme
 dosiahnuť presné zistenie kolízie, musíme zvoliť iný spôsob.
 Roboty podporujú určenie kolíznej oblasti. Zistenie stretu dvoch robotov s pomocou
 oblastí je presné, ale náročnejšie na
 výpočet, takže je zároveň aj pomalšie. Použitie kolíznych
 oblastí je potrebné vopred dobre zvážiť. Odporúčame ich
 používať veľmi obozretne – v menšej miere. Rozhodne nie pre
 veľké množstvo naraz jestvujúcich potenciálne kolidujúcich
 robotov.
 
 Ďalším spôsobom zistenia kolízie môže byť overenie, či sa
 určitý bod (napríklad robot, resp. jeho poloha) nachádza
 v sledovanom útvare –
 kruhu,
 elipse,
 štvorci,
 obdĺžniku,
 ceste,
 oblasti,
 tvare…
 
 Upozornenie: Ak má aspoň jeden
 robot definovanú kolíznu
 oblasť, tak je braná do úvahy aj mierka robotov. V opačnom prípade nemá mierka na funkciu tejto metódy vplyv.
Parametre:
iný – iný robot, ktorého vzájomnú kolíziu s týmto robotom
     chceme otestovať
vzdialenosť
public double vzdialenosť()
Zistí, aká je vzdialenosť tohto robota od stredu
 súradnicovej sústavy.
Návratová hodnota:
vzdialenosť robota od stredu súradnicovej sústavy
Pozri tiež:
vzdialenosťOd(double, double), 
vzdialenosťOd(Poloha), 
vzdialenosťOd(Shape), 
vzdialenosťOdMyši(), 
Svet.vzdialenosť(Poloha)
vzdialenost
public double vzdialenost()
 Alias pre vzdialenosť.
vzdialenosťOd
public double vzdialenosťOd(double súradnicaBoduX,
                            double súradnicaBoduY)
Zistí vzdialenosť medzi týmto robotom a zadanými súradnicami na
 podlahe (strope).
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
vzdialenosť medzi týmto robotom a zadaným bodom
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(Poloha), 
vzdialenosťOdMyši()
vzdialenostOd
public double vzdialenostOd(double súradnicaBoduX,
                            double súradnicaBoduY)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(double súradnicaBoduX,
                           double súradnicaBoduY)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(double súradnicaBoduX,
                           double súradnicaBoduY)
 Alias pre vzdialenosťOd.
vzdialenosťOd
public double vzdialenosťOd(Poloha objekt)
Zistí vzdialenosť medzi týmto a zadaným objektom.
Parametre:
objekt – objekt od ktorého zisťujeme vzdialenosť
Návratová hodnota:
vzdialenosť medzi týmto robotom a zadaným objektom
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(double, double), 
vzdialenosťOd(Poloha), 
vzdialenosťOd(Shape), 
vzdialenosťOdMyši(), 
Svet.vzdialenosť(Poloha)
vzdialenostOd
public double vzdialenostOd(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(Poloha objekt)
 Alias pre vzdialenosťOd.
vzdialenosťOd
public double vzdialenosťOd(Shape tvar)
Zistí vzdialenosť medzi týmto robotom a stredom
 hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), od stredu hraníc
     ktorého zisťujeme vzdialenosť
Návratová hodnota:
vzdialenosť medzi robotom a stredom hraníc zadaného
     tvaru
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(Poloha), 
vzdialenosťOdMyši()
vzdialenostOd
public double vzdialenostOd(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenosťK
public double vzdialenosťK(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenostK
public double vzdialenostK(Shape tvar)
 Alias pre vzdialenosťOd.
vzdialenosťOdMyši
public double vzdialenosťOdMyši()
Zistí vzdialenosť medzi týmto robotom a aktuálnymi súradnicami
 myši.
Návratová hodnota:
vzdialenosť medzi týmto robotom a súradnicami myši
Pozri tiež:
vzdialenosť(), 
vzdialenosťOd(Poloha), 
Svet.vzdialenosť(Poloha)
vzdialenostOdMysi
public double vzdialenostOdMysi()
 Alias pre vzdialenosťOdMyši.
vzdialenosťKMyši
public double vzdialenosťKMyši()
 Alias pre vzdialenosťOdMyši.
vzdialenostKMysi
public double vzdialenostKMysi()
 Alias pre vzdialenosťOdMyši.
kresliTvar
public void kresliTvar()
Táto metóda je predvolene prázdna. Jej prekrytím dokážeme
 upraviť predvolený tvar robota. Kreslenie v tele prekrytej
 metódy kresliTvar podlieha rovnakým pravidlám ako
 kreslenie v tele metódy
 KreslenieTvaru.kresli(GRobot r). Prekrytie tejto metódy (kresliTvar) je síce najjednoduchší spôsob zmeny tvaru
 robota, ale je menej efektívny.
 
 Poznámka: Účinnosť tejto metódy môže
 zrušiť volanie metódy vlastnýTvar (pozri jej opis) a opätovne obnoviť volanie
 niektorej z verzií metód predvolenýTvar.
 
 Poznámka: Táto metóda v skrytosti
 využíva rovnaký mechanizmus ako definovanie vlastného tvaru. Pre väčšie množstvá inštancií
 jednej triedy odporúčame:
 
 implementovať rozhranie KreslenieTvaru, ktoré obsahuje metódu
 kresli,
 staticky vytvoriť jednu inštanciu z tejto
 implementácie
 a tú vzápätí využiť (napríklad v konštruktore triedy)
 vo volaní metódy vlastnýTvar(tvar). Príklad je v opise rozhrania
 KreslenieTvaru.)
 
 
 Príklad:
 
 Robot s metódou kresliTvar prekrytou
 nasledujúcim spôsobom bude mať tvar kružnice:
 
 
@Override public void kresliTvar()
{
    kružnica();
}
 
 Poznámka: Ak potrebujete vytlačiť
 na aktuálne plátno pečiatku aktuálneho tvaru, volajte metódu
 pečiatka.
 
 Poznámka: Názov tejto metódy koliduje
 s názvom novších metód kresliTvar(tvar) a kresliTvar(tvar, upravRobotom) určených na kreslenie obrysov
 tvarov Javy, ktoré mohli byť napríklad importované z SVG
 súboru. Okrem toho je definovaná metóda kresliTvary(), ktorá slúži na opätovné povolenie kreslenia
 tvarov a písania textov robotom po ich vypnutí metódou
 nekresliTvary().
Pozri tiež:
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
pečiatka(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
predvolenýTvar
public void predvolenýTvar()
Nastaví predvolený tvar robota. Predvoleným tvarom robota
 je buď trojzubec (vyplnený alebo dutý, podľa toho, či je
 zapnuté alebo vypnuté vypĺňanie tvarov robotom), alebo tvar kreslený prekrytou
 metódou kresliTvar.
Pozri tiež:
kresliTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
predvolenyTvar
public void predvolenyTvar()
 Alias pre predvolenýTvar.
predvolenýVyplnenýTvar
public void predvolenýVyplnenýTvar()
Nastaví predvolený vyplnený tvar robota. Predvoleným tvarom
 robota je buď trojzubec (v tomto prípade vyplnený), alebo tvar
 kreslený prekrytou metódou kresliTvar.
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
predvolenyVyplnenyTvar
public void predvolenyVyplnenyTvar()
 Alias pre predvolenýVyplnenýTvar.
predvolenýDutýTvar
public void predvolenýDutýTvar()
Nastaví predvolený dutý tvar robota. Predvoleným tvarom
 robota je buď trojzubec (v tomto prípade dutý), alebo tvar
 kreslený prekrytou metódou kresliTvar.
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
predvolenyDutyTvar
public void predvolenyDutyTvar()
 Alias pre predvolenýDutýTvar.
predvolenýTvar
public void predvolenýTvar(boolean vyplnený)
Nastaví predvolený tvar robota. Predvoleným tvarom robota je
 buď trojzubec (vyplnený alebo dutý – v tomto prípade to závisí
 od hodnoty zadanej do parametra), alebo tvar kreslený prekrytou
 metódou kresliTvar. Argument
 vyplnený má význam len ak nebola prekrytá metóda
 kresliTvar. Vtedy zostáva predvoleným
 tvarom trojzubec a hodnota tohto argumentu umožňuje určiť, či
 má byť vyplnený alebo kreslený obrysom (dutý).
Parametre:
vyplnený – ak je true a aktuálna inštancia
     nemá prekrytú metódu kresliTvar,
     kreslí vyplnený trujzubec, inak jeho obrys
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
predvolenyTvar
public void predvolenyTvar(boolean vyplnený)
 Alias pre predvolenýTvar.
jePredvolenýTvarVyplnený
public boolean jePredvolenýTvarVyplnený()
Overí spôsob kreslenia predvoleného tvaru trojzubca. Ak je
 robot v stave, kedy je jeho predvoleným tvarom trojzubec
 (pozri opis metódy predvolenýTvar(vyplnený) alebo jej príbuzných), tak táto metóda
 overí, či má byť vyplnený alebo dutý.
Návratová hodnota:
true ak má byť predvolený tvar trojzubca
     vyplnený, false ak má byť dutý
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
jePredvolenyTvarVyplneny
public boolean jePredvolenyTvarVyplneny()
 Alias pre jePredvolenýTvarVyplnený.
vlastnýTvar
public void vlastnýTvar(String súbor)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
 Ak bola predtým volaná metóda
 vlastnýTvar(KreslenieTvaru
 tvar), tak ňou definované vlastné kreslenie bude zrušené.
 
 Nastavenie vlastného tvaru obrázka zresetuje mierku robota. Ak chcete, aby veľkosť robota (aspoň
 približne) korešpondovala s veľkosťou obrázka, tak nastavte
 veľkosť robota na vhodnú hodnotu ešte pred nastavením
 vlastného tvaru obrázka alebo volajte metódu
 vlastnýTvar("názov",
 upravVeľkosťRobota) s druhým argumentom true.
 
 Tipy: Vhodná hodnota by mohla byť
 napríklad priemerná hodnota vypočítaná zo šírky a výšky
 obrázka. Presne túto hodnotu používa metóda
 vlastnýTvar("názov",
 upravVeľkosťRobota).
 Ak chcete kombinovať vlastné kreslenie tvaru s obrázkami,
 použite iba vlastné
 kreslenie tvaru robota používajúce rozhranie
 KreslenieTvaru a v tele metódy
 kresli uvedeného
 rozhrania volajte metódu robota r.obrázok("názov súboru").
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť použitý
     namiesto predvoleného tvaru robota
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru), 
Svet.priečinokObrázkov(String)
vlastnyTvar
public void vlastnyTvar(String súbor)
 Alias pre vlastnýTvar.
vlastnýTvar
public void vlastnýTvar(Image obrázok)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
 Ak bola predtým volaná metóda
 vlastnýTvar(KreslenieTvaru
 tvar), tak ňou definované vlastné kreslenie bude zrušené.
 
 Nastavenie vlastného tvaru obrázka zresetuje mierku robota. Ak chcete, aby veľkosť robota (aspoň
 približne) korešpondovala s veľkosťou obrázka, tak nastavte
 veľkosť robota na vhodnú hodnotu ešte pred nastavením
 vlastného tvaru obrázka alebo volajte metódu
 vlastnýTvar(obrázok,
 upravVeľkosťRobota) s druhým argumentom true.
 
 Tipy: Vhodná hodnota by mohla byť
 napríklad priemerná hodnota vypočítaná zo šírky a výšky
 obrázka. Presne túto hodnotu používa metóda
 vlastnýTvar(obrázok,
 upravVeľkosťRobota).
 Ak chcete kombinovať vlastné kreslenie tvaru s obrázkami,
 použite iba vlastné
 kreslenie tvaru robota používajúce rozhranie
 KreslenieTvaru a v tele metódy
 kresli uvedeného
 rozhrania volajte metódu robota r.obrázok(obrázok).
Parametre:
obrázok – obrázok, ktorý má byť použitý namiesto
     predvoleného tvaru robota
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru)
vlastnyTvar
public void vlastnyTvar(Image obrázok)
 Alias pre vlastnýTvar.
vlastnýTvar
public void vlastnýTvar(String súbor,
                        boolean upravVeľkosťRobota)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
 Ak bola predtým volaná metóda
 vlastnýTvar(KreslenieTvaru
 tvar), tak ňou definované vlastné kreslenie bude zrušené.
 Ak je parameter upravVeľkosťRobota rovný
 true, tak bude zároveň upravená
 veľkosť robota a to tak, aby
 zodpovedala priemeru šírky a výšky obrázka.
 
 Tip: Ak chcete kombinovať vlastné
 kreslenie tvaru s obrázkami, použite iba vlastné kreslenie tvaru
 robota používajúce rozhranie KreslenieTvaru a v tele metódy
 kresli uvedeného
 rozhrania volajte metódu robota r.obrázok("názov súboru").
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť použitý
     namiesto predvoleného tvaru robota
upravVeľkosťRobota – hodnota true určuje, že
     pred nastavením vlastného tvaru obrázka robota má byť
     upravená jeho veľkosť tak, aby zodpovedala priemeru šírky
     a výšky obrázka
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(Image, boolean), 
vlastnýTvar(KreslenieTvaru), 
Svet.priečinokObrázkov(String)
vlastnyTvar
public void vlastnyTvar(String súbor,
                        boolean upravVeľkosťRobota)
 Alias pre vlastnýTvar.
vlastnýTvar
public void vlastnýTvar(Image obrázok,
                        boolean upravVeľkosťRobota)
Zmení tvar robota z klasického tvaru na zadaný obrázok.
 Ak bola predtým volaná metóda
 vlastnýTvar(KreslenieTvaru
 tvar), tak ňou definované vlastné kreslenie bude zrušené.
 Ak je parameter upravVeľkosťRobota rovný
 true, tak bude zároveň upravená
 veľkosť robota a to tak, aby
 zodpovedala priemeru šírky a výšky obrázka.
 
 Tip: Ak chcete kombinovať vlastné
 kreslenie tvaru s obrázkami, použite iba vlastné kreslenie tvaru
 robota používajúce rozhranie KreslenieTvaru a v tele metódy
 kresli uvedeného
 rozhrania volajte metódu robota r.obrázok(obrázok).
Parametre:
obrázok – obrázok, ktorý má byť použitý namiesto
     predvoleného tvaru robota
upravVeľkosťRobota – hodnota true určuje, že
     pred nastavením vlastného tvaru obrázka robota má byť
     upravená jeho veľkosť tak, aby zodpovedala priemeru šírky
     a výšky obrázka
Pozri tiež:
kresliTvar(), 
predvolenýTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(KreslenieTvaru)
vlastnyTvar
public void vlastnyTvar(Image obrázok,
                        boolean upravVeľkosťRobota)
 Alias pre vlastnýTvar.
vlastnýTvar
public void vlastnýTvar(KreslenieTvaru tvar)
Umožní kresliť vlastný tvar robota namiesto klasického tvaru.
 Metóda vyžaduje implementované rozhranie KreslenieTvaru. Ak bola predtým volaná metóda
 vlastnýTvar(String súbor) alebo
 vlastnýTvar(Image obrázok), tak
 nimi definovaný obrázkový tvar bude zrušený.
 
 Volanie tejto metódy zruší vlastné kreslenie definované
 v prekrytej metóde kresliTvar a to dokonca
 aj ak je zadaná hodnota null. Hodnota null
 tak umožňuje návrat kreslenia k originálnemu, skutočne
 predvolenému kresleniu tvaru robota (k trojzubcu). Ak chcete
 obnoviť mechanizmus kreslenia cez prekrytú metódu kresliTvar, použite niektorú z verzií metód
 predvolenýTvar.
 
 Tip: Ak chcete kombinovať vlastné
 kreslenie tvaru s obrázkami, použite iba vlastné kreslenie tvaru
 robota používajúce rozhranie KreslenieTvaru a v tele metódy
 kresli uvedeného
 rozhrania volajte prislúchajúcu metódu robota:
 r.obrázok("názov súboru") alebo
 r.obrázok(obrázok).
Parametre:
tvar – implementácia rozhrania KreslenieTvaru
Pozri tiež:
KreslenieTvaru, 
kresliTvar(), 
predvolenýVyplnenýTvar(), 
predvolenýDutýTvar(), 
predvolenýTvar(), 
predvolenýTvar(boolean), 
jePredvolenýTvarVyplnený(), 
vlastnýTvar(String), 
vlastnýTvar(Image), 
vlastnýTvar(String, boolean), 
vlastnýTvar(Image, boolean)
vlastnyTvar
public void vlastnyTvar(KreslenieTvaru tvar)
 Alias pre vlastnýTvar.
kresliTvary
public void kresliTvary()
Povolí kreslenie tvarov a písanie textov robotom (predvolený
 stav). Metóda je opakom metódy nekresliTvary.
 
 Poznámka: Táto metóda spôsobí
 automatické prepustenie robota zo
 služieb kreslenia a tvorby oblasti.
 
 Poznámka: Názov tejto metódy je podobný
 názvom metód v singulári kresliTvar. Avšak tie slúžia
 na úplne iné účely. Metóda kresliTvar()
 je určená na prekrytie a kreslenie vlastného tvaru robota.
 A novšie metódy kresliTvar(tvar)
 a kresliTvar(tvar,
 upravRobotom) sú určené na kreslenie obrysov tvarov Javy,
 ktoré mohli byť napríklad importované z SVG súboru.
Pozri tiež:
nekresliTvary(), 
kreslenieTvarovPovolené(), 
kružnica, 
kresliElipsu, 
kresliŠtvorec, 
kresliObdĺžnik, 
kresliHviezdu, 
text, 
cesta, 
položPero
kresliÚtvary
public void kresliÚtvary()
 Alias pre kresliTvary.
kresliUtvary
public void kresliUtvary()
 Alias pre kresliTvary.
nekresliTvary
public void nekresliTvary()
Zakáže kreslenie tvarov (kružnice, elipsy,
 štvorca, obdĺžnika…) a písanie textu robotom, aby prislúchajúce metódy
 mohli byť využité na iné účely, napríklad na obmedzenie kreslenia. Znamená to, že metódy
 na kreslenie útvarov a písanie textu robotom budú generovať
 tvary Javy (Shape) bez ich vykreslenia na aktívne
 plátno robota. Kreslenie opäť povolíme metódou kresliTvary.
 
 Poznámka: Táto metóda spôsobí
 automatické prepustenie robota zo
 služieb kreslenia a tvorby oblasti.
Pozri tiež:
kresliTvary(), 
kreslenieTvarovPovolené(), 
kružnica, 
kresliElipsu, 
kresliŠtvorec, 
kresliObdĺžnik, 
kresliHviezdu, 
text, 
cesta, 
zdvihniPero
nekresliÚtvary
public void nekresliÚtvary()
 Alias pre nekresliTvary.
nekresliUtvary
public void nekresliUtvary()
 Alias pre nekresliTvary.
kreslenieTvarovPovolené
public boolean kreslenieTvarovPovolené()
Zistí, či je kreslenie tvarov povolené alebo zakázané.
 Kreslenie mohlo byť povolené alebo zakázané metódami kresliTvary, resp. nekresliTvary, prípadne iným mechanizmom).
Návratová hodnota:
true – kreslenie tvarov je povolené;
     false – kreslenie tvarov je zakázané
Pozri tiež:
kresliTvary(), 
nekresliTvary(), 
kružnica, 
kresliElipsu, 
kresliŠtvorec, 
kresliObdĺžnik, 
kresliHviezdu, 
text, 
cesta, 
polohaPera
kreslenieTvarovPovolene
public boolean kreslenieTvarovPovolene()
 Alias pre kreslenieTvarovPovolené.
kresliVšade
public void kresliVšade()
Zruší oblasť na obmedzenie kreslenia na aktívne plátno
 (podlahu, strop alebo obrázok, do ktorého má robot
 presmerované kreslenie).
Pozri tiež:
Plátno.kresliVšade(), 
Obrázok.kresliVšade(), 
kresliDo(Shape), 
nekresliDo(Shape)
kresliVsade
public void kresliVsade()
 Alias pre kresliVšade.
kresliDo
public void kresliDo(Shape tvar)
Obmedzí akékoľvek kreslenie na aktívne plátno robota (podlahu
 alebo strop) na plochu zadaného útvaru (Shape).
 
 Robot disponuje množinou metód na kreslenie tvarov
 (kružnica, elipsa, štvorec…), ktoré
 zároveň generujú tvary. Na ich použitie s touto metódou je
 dobré predtým kreslenie tvarov zakázať a neskôr opäť povoliť.
 Metóda text dokonca zákaz kreslenia
 tvarov požaduje, aby mohla vygenerovať tvar (bez zákazu má
 návratovú hodnotu null). Tvar je možné vytvoriť aj
 z cesty…
 
 Obmedzenie zužuje aktuálny priestor kreslenia, to znamená,
 že sa priebežne vytvára oblasť, ktorá je prienikom všetkých
 obmedzení. Ak chceme vytvoriť obmedzenie pre tvar, ktorý je
 možné vytvoriť inou množinovou operáciou, môžeme na
 obmedzenie kreslenia použiť Oblasť (zadanú
 namiesto parametra tvar). Je nevyhnutné podotknúť, že
 obmedzenie je viazané na plátno a je platné pre všetky
 roboty.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
Plátno.kresliDo(Shape), 
Obrázok.kresliDo(Shape), 
kresliVšade(), 
nekresliDo(Shape)
nekresliDo
public void nekresliDo(Shape tvar)
Vytvára obmedzenie na kreslenie na aktívne plátno robota
 (podlahu, strop alebo obrázok, do ktorého má robot
 presmerované kreslenie). Funguje rovnako ako metóda kresliDo, ibaže obrátene – kreslenie je
 možné všade, okrem zadaného tvaru alebo oblasti.
 
 Rovnako ako pri metóde kresliDo,
 sa aj toto obmedzenie kombinuje s aktuálnymi obmedzeniami na
 kreslenie a je platné pre všetky roboty.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
Plátno.nekresliDo(Shape), 
Obrázok.nekresliDo(Shape), 
kresliDo(Shape), 
kresliVšade()
vykonajPríkaz
public boolean vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
Parametre:
príkaz – príkazový riadok spĺňajúci pravidlá uvedené
     v opise metódy interaktívnyRežim
Návratová hodnota:
true ak bol príkaz nájdený a podarilo
     sa ho vykonať
Výnimky:
GRobotException – ak bolo vykonávanie príkazu zrušené
IllegalAccessException – ak metóda, s ktorou súvisí
     vykonávanie príkazu nie je dostupná (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súvisí vykonávanie príkazu nie je
     požadovaného typu, ani ho na neho nie je možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súvisí vykonávanie príkazu vznikla výnimka
Pozri tiež:
Svet.vykonajPríkaz(String), 
Plátno.vykonajPríkaz(String), 
interaktívnyRežim(boolean), 
Svet.interaktívnyRežim(boolean), 
Plátno.interaktívnyRežim(boolean), 
Svet.režimLadenia(boolean)
vykonajPrikaz
public boolean vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
interaktívnyRežim
public void interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre tento robot.
 Pozri: Svet.interaktívnyRežim(zapni).
Parametre:
zapni – ak je true, režim bude pre tento robot
     zapnutý, inak bude vypnutý
Pozri tiež:
Svet.interaktívnyRežim(boolean), 
Plátno.interaktívnyRežim(boolean), 
Svet.režimLadenia(boolean)
interaktivnyRezim
public void interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
interaktívnyRežim
public boolean interaktívnyRežim()
Zistí stav interaktívneho režimu pre tento robot.
 Pozri: Svet.interaktívnyRežim(zapni).
Návratová hodnota:
stav režimu pre tento robot
interaktivnyRezim
public boolean interaktivnyRezim()
 Alias pre interaktívnyRežim.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Trieda GRobotException.Chyba
java.lang.Object
GRobotException.Chyba
Nadradená trieda:
GRobotException
public static class GRobotException.Chyba
extends Object
Trieda uchovávajúca záznam denníka. Obsahuje dve údajové polia
 (atribúty), z ktorých je relevantné vždy len jedno.
Pozri tiež:
GRobotException.Denník, 
GRobotException.denník, 
GRobotException.poslednáVýnimka()
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
String
sprava
 Alias pre správa.
String
správa
Jednoduché textové chybové hlásenie programovacieho rámca.
Exception
vynimka
 Alias pre výnimka.
Exception
výnimka
Inštancia vzniknutej alebo programovacím rámcom generovanej
 výnimky.
Prehľad metód
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
správa
public final String správa
Jednoduché textové chybové hlásenie programovacieho rámca.
výnimka
public final Exception výnimka
Inštancia vzniknutej alebo programovacím rámcom generovanej
 výnimky. Zväčša ide o inštanciu triedy GRobotException.
sprava
public final String sprava
 Alias pre správa.
vynimka
public final Exception vynimka
 Alias pre výnimka.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
var methods = {"i0":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda GRobotException.Denník
java.lang.Object
java.util.AbstractCollection&lt;E&gt;
java.util.AbstractList&lt;E&gt;
java.util.Vector&lt;Typ&gt;
Zoznam&lt;GRobotException.Chyba&gt;
GRobotException.Denník
Všetky implementované rozhrania:
Serializable, Cloneable, Iterable&lt;GRobotException.Chyba&gt;, Collection&lt;GRobotException.Chyba&gt;, List&lt;GRobotException.Chyba&gt;, RandomAccess
Známe priame odvodené triedy:
GRobotException.Dennik
Nadradená trieda:
GRobotException
public static class GRobotException.Denník
extends Zoznam&lt;GRobotException.Chyba&gt;
Trieda zoznamu chybových hlásení a evidencie výnimiek vypísaných
 a/alebo vzniknutých počas činnosti programovacieho rámca. Aktívna
 inštancia denníka je dostupná prostredníctvom statického atribútu
 denník.
 
 Upozornenie: Obsah denníka sa nezapisuje
 automaticky. Najjednoduchší spôsob zápisu denníka do súboru je uvedený
 nižšie – volanie metódy pripoj v reakcii
 na ukončenie aplikácie.
 
 
@Override public void ukončenie()
{
    GRobotException.denník.pripoj("priklad.log");
}
 
 (Alternatívou by mohlo byť napríklad využitie udalosti vzniklaChyba.)
 
 Okrem zápisu do súboru sa s denníkom dá pracovať ako s klasickým
 zoznamom. Jednotlivé položky zoznamu sú inštancie
 triedy GRobotException.Chyba, ktoré obsahujú dve verejné
 položky: správa a výnimka. Z nich je spravidla relevantná len jedna. Tieto položky,
 resp. spravidla jedna z nich, obsahujú podrobnosti o vzniku chyby.
Pozri tiež:
GRobotException.Chyba, 
GRobotException.denník, 
GRobotException.poslednáVýnimka(), 
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy Zoznam
Zoznam.ObratenyIterator&lt;Typ&gt;, Zoznam.ObrátenýIterátor&lt;Typ&gt;
Prehľad atribútov
Atribúty zdedené z triedy java.util.Vector
capacityIncrement, elementCount, elementData
Atribúty zdedené z triedy java.util.AbstractList
modCount
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Denník() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
pripoj(String názovSúboru)
Pripojí aktuálny obsah denníka do súboru so zadaným menom.
Metódy zdedené z triedy Zoznam
aktualny, aktuálny, bolPrejdenyDokola, bolPrejdenýDokola, citaj, citaj, čítaj, čítaj, daj, daj, dalsi, dalsiPrvok, ďalší, ďalšíPrvok, dlzka, dĺžka, hladaj, hľadaj, hladaj, hľadaj, hladajOdzadu, hľadajOdzadu, hladajOdzadu, hľadajOdzadu, jePrazdny, jePrázdny, kapacita, nahodny, náhodný, nahodnyPrvok, náhodnýPrvok, nahrad, nahraď, najdi, nájdi, najdi, nájdi, najdiPosledny, nájdiPosledný, najdiPosledny, nájdiPosledný, naopak, naopak, nastav, obsahuje, odober, odober, odober, odoberOdKonca, odzadu, odzadu, pocet, pocitadlo, pocitadlo, pocitadloNaKoniec, pocitadloNaZaciatok, počet, počítadlo, počítadlo, počítadloNaKoniec, počítadloNaZačiatok, posledny, posledný, poslednyPrvok, poslednýPrvok, prazdny, prázdny, predchadzajuci, predchádzajúci, predchadzajuciPrvok, predchádzajúciPrvok, prejdenyDokola, prejdenýDokola, prepis, prepíš, presun, presuň, presun, presuň, presun, presuň, presun, presuň, pridaj, pridaj, pridaj, pridaj, prvy, prvý, prvyPrvok, prvýPrvok, tento, velkost, veľkosť, vloz, vlož, vrat, vráť, vrat, vráť, vymaz, vymaz, vymaz, vymazOdKonca, vymaž, vymaž, vymaž, vymažOdKonca, vymen, vymeň, vymen, vymeň, vymen, vymeň, vymen, vymeň
Metódy zdedené z triedy java.util.Vector
add, add, addAll, addAll, addElement, capacity, clear, clone, contains, containsAll, copyInto, elementAt, elements, ensureCapacity, equals, firstElement, forEach, get, hashCode, indexOf, indexOf, insertElementAt, isEmpty, iterator, lastElement, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeAllElements, removeElement, removeElementAt, removeIf, removeRange, replaceAll, retainAll, set, setElementAt, setSize, size, sort, spliterator, subList, toArray, toArray, toString, trimToSize
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.util.Collection
parallelStream, stream
Podrobnosti konštruktorov
Denník
public Denník()
Podrobnosti metód
pripoj
public void pripoj(String názovSúboru)
Pripojí aktuálny obsah denníka do súboru so zadaným menom.
 Súbor denníka musí mať príponu .log. Ak ju nemá,
 metóda ju automaticky doplní.
 
 Upozornenie: Obsah denníka sa
 nezapisuje automaticky. Najjednoduchší spôsob zápisu denníka do
 súboru je uvedený v príklade nižšie (ide o volanie tejto metódy
 v tele reakcie ukončenia
 aplikácie).
 
 Príklad použitia:
 
 
@Override public void ukončenie()
{
    GRobotException.denník.pripoj("priklad.log");
}
 
 Alternatívou by mohlo byť napríklad využitie udalosti vzniklaChyba.
Parametre:
názovSúboru – názov súboru s denníkom na pripojenie
     aktuálneho obsahu tejto inštancie denníka
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":9,"i3":9,"i4":10,"i5":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda GRobotException
java.lang.Object
java.lang.Throwable
java.lang.Exception
java.lang.RuntimeException
GRobotException
Všetky implementované rozhrania:
Serializable
public class GRobotException
extends RuntimeException
Výnimka generovaná programovacím rámcom so slovenským textom opisujúcim
 udalosť a univerzálnym jazykovým identifikátorom umožňujúcim preklad do
 ľubovoľného jazyka. Tento objekt bol do prostredia programovacieho rámca
 pridaný potom, čo začala byť využívaná za hranicami svojho pôvodného
 určenia. Jestvuje len veľmi málo výnimiek v rámci programovacieho rámca,
 ktoré nie sú priamo generované prostredníctvom tejto triedy (napríklad
 systémové správy, ktoré sú posúvané programovacím rámcom: NoSuchElementException, NullPointerException, UnsupportedFlavorException alebo priamy vznik správ ArrayIndexOutOfBoundsException, IllegalArgumentException, ktoré
 sú generované niektorými metódami Javy, ktoré programovací rámec vnútorne
 používa…).
 
 V nasledujúcej tabuľke uvádzame zoznam všetkých jazykových
 identifikátorov výnimiek GRobotException s prislúchajúcimi
 slovenskými textami a stručným vysvetlnením príčin vzniku týchto
 výnimiek:
 
 
 Jazykový identifikátorText výnimky v slovenskom
 jazykuStručné vysvetlenie
 
 archiveIsOpenForWritingArchív je
 otvorený na zápis.Vzniká pri pokuse o rozbalenie archívu, ktorý je práve otvorený na zápis.
 
 archiveNameOmittedNázov archívu nesmie byť
 zamlčaný.Vzniká pri pokuse o prácu s archívom so zamlčaným
 (nulovým – null) menom. Môže ísť priamo o pokus o otvorenie
 archívu metódami triedy Archív, o pokus o pridanie položky
 sprostredkovane, napríklad triedou Súbor s pripojeným archívom a podobne. Spresňujúcim
 objektom je inštancia NullPointerException (bez textu).
 
 archiveNotOpenForReadingArchív nie je
 otvorený na čítanie.Vzniká pri pokuse o čítanie prostredníctvom
 inštancie typu Archív, ak nebol otvorený žiadny archív na
 čítanie.
 
 archiveNotOpenArchív nie je
 otvorený.Vzniká pri pokuse o čítanie alebo zápis údaju
 v rámci inštancie typu Archív v situácii, keď nebol
 otvorený žiadny archív na čítanie ani zápis.
 
 archiveNotOpenForWritingArchív nie je
 otvorený na zápis.Vzniká pri pokuse o zápis prostredníctvom
 inštancie typu Archív, ak nebol otvorený žiadny archív
 na zápis.
 
 cannotAppendDataToEntryNemôžem pripojiť
 údaje k položke archívu.Vzniká pri pokuse otvoriť súbor na zápis s príznakom
 pripojiť rovným true, keď je k súboru pripojený archív.
 
 cannotCloseArchiveNepodarilo sa zavrieť
 archív: «názov»Metóda zavri
 triedy Archív zlyhala. Spresneňujúcim objektom
 (zistiteľným metódou getCause) je pôvodná
 výnimka, ktorá spôsobila vznik chyby počas spracovania.
 
 cannotGetAddressNepodarilo sa získať
 adresu zariadenia.Zlyhal pokus o zistenie adresy zariadenia
 metódou dajAdresu triedy Spojenie.
 
 cannotGetCanonicalHostNameNepodarilo
 sa získať kánonický názov zariadenia (hosťa).Zlyhal pokus
 o zistenie kánonického názvu zariadenia metódou
 dajNázovHosťa s hodnotou
 parametra kánonický rovnou true (v triede
 Spojenie).
 
 cannotGetHostNameNepodarilo sa získať
 názov zariadenia (hosťa).Zlyhal pokus o zistenie názvu
 zariadenia metódou dajNázovHosťa
 triedy Spojenie).
 
 cannotGetHardwareAddressNepodarilo sa získať
 harvérovú adresu zariadenia.Zlyhal pokus o zistenie hardvérovej
 (obvykle MAC) adresy metódou dajHardvérovúAdresu triedy Spojenie.
 
 cannotOpenArchiveNepodarilo sa otvoriť
 archív: «názov»Konštruktor triedy Archív nemohol otvoriť archív so zadaným názvom. Spresneňujúcim
 objektom (zistiteľným metódou getCause)
 je pôvodná výnimka, ktorá spôsobila vznik chyby počas
 spracovania.
 
 commandCancelledVykonanie príkazu bolo
 zrušené: «príkaz»Znamená, že vykonávanie príkazu
 v interaktívnom režime
 bolo zrušené. Znenie príkazu je zistiteľné metódou
 getParameter.
 
 configNotApplicableKonfiguráciu nie je
 možné použiť. Svet už bol inicializovaný!Vzniká pri pokuse
 o použitie automatickej konfigurácie vo svete, ktorý už
 jestvuje.
 
 cursorAlreadyExistsKurzor so zadaným
 menom («meno») už jestvuje.Vzniká pri pokuse
 o vytvorenie kurzora. Meno je zistiteľné metódou
 getParameter.
 
 cursorNotExistsKurzor so zadaným menom
 («meno») nejestvuje.Vzniká pri pokuse o zmenu
 kurzora, ktorý nebol definovaný. Meno je zistiteľné metódou
 getParameter.
 
 duplicateEntryPoložka „«názov
 položky»“ už v archíve jestvuje.Vzniká pri pokuse
 o pridanie duplicitnej položky do archívu. Názov položky je
 zistiteľný metódou getParameter.
 
 entryNameOmittedNázov položky nesmie byť
 zamlčaný.Vzniká pri pokuse o pridanie položky s „prázdnym“
 (nulovým – null) menom do archívu, ak
 meno nie je možné získať iným spôsobom (napríklad z názvu pridávaného
 súboru). Spresňujúcim objektom je inštancia NullPointerException
 (bez textu).
 
 eventFactoryAlreadyExistsObsluha
 udalostí už bola definovaná!Vzniká pri pokuse o vytvorenie
 ďalšej obsluhy udalostí v prípade, že nebolo explicitne povolené
 viacnásobné vytváranie obsluhy udalostí.
 
 fileNameOmittedNázov súboru nesmie byť
 zamlčaný.Vzniká pri rôznych príležitostiach (je generovaná
 viacerými triedamy rámca – Archív, Obrázok, Plátno, Spojenie,
 Súbor, SVGPodpora). Vzniká pri
 pokusoch o otvorenie, čítanie, zápis alebo pridanie súboru s „prázdnym“
 (nulovým – null) menom. Spresňujúcim objektom je inštancia
 NullPointerException (bez textu).
 
 fileNotFoundSúbor „«súbor»“
 nebol nájdený.Vzniká pri pokuse o otvorenie nejestvujúceho
 súboru («súbor») na čítanie. Názov súboru je zistiteľný
 metódou getParameter. Spresňujúcim objektom
 je pôvodná systémová výnimka FileNotFoundException.
 
 fileNotOpenForReadingSúbor nie je
 otvorený na čítanie.Vzniká pri pokuse o čítanie prostredníctvom
 inštancie typu Súbor, ak nebol otvorený žiadny súbor na
 čítanie.
 
 fileNotOpenForWritingSúbor nie je
 otvorený na zápis.Vzniká pri pokuse o zápis prostredníctvom
 inštancie typu Súbor, ak nebol otvorený žiadny súbor
 na zápis.
 
 firstFileNotExistsPrvý súbor
 „«súbor»“ nejestvuje.Vzniká pri porovnaní súborov,
 ak prvý súbor nejestvuje. Názov súboru je zistiteľný metódou
 getParameter. Spresňujúcim objektom je
 inštancia FileNotFoundException (bez textu).
 
 firstObjectNotFilePrvý súbor
 „«súbor»“ nie je súbor.Vzniká pri porovnaní súborov,
 ak prvý z objektov nie je súbor. Názov objektu je zistiteľný metódou
 getParameter.
 
 imageAlreadyExistsObrázok
 „«súbor»“ už jestvuje.Vzniká pri pokuse o zápis
 obrázka do súboru, ktorý už jestvuje («súbor»), ale len
 v prípade, že nebola explicitne zadaná hodnota parametra prepísania
 súboru. Názov súboru je zistiteľný metódou getParameter.
 
 imageBrokenObrázok je
 poškodený!Znamená, že spracovanie obrázka zlyhalo, pretože
 je pravdepodobne poškodený.
 
 imageFileBrokenObrázok „«súbor»“
 je poškodený!Znamená, že spracovanie obrázka prečítaného zo
 súboru zlyhalo pravdepodobne preto, lebo súbor bol poškodený. Názov
 súboru je zistiteľný metódou
 getParameter.
 
 imageNotFoundObrázok „«súbor»“
 nebol nájdený.Znamená, že pokus o prečítanie súboru s obrázkom
 («súbor») zlyhal z dôvodu nenájdenia súboru. Názov súboru je
 zistiteľný metódou getParameter.
 
 imageSizeImmutableRozmery obrázka
 nie je možné zmeniť.Vzniká pri pokuse o zmenu rozmerov
 obrázka. (Pozri napríklad šírka(šírka)),
 výška(výška)) alebo rozmery(rozmer))
 
 imageSizeMismatchRozmery obrázokov
 svetelnej operácie sa nezhodujú.Vzniká pri pokuse o vykonanie
 svetelnej operácie (pozri svetlo(grafika, svetlo) alebo svetlo(svetlo)) s rozdielnymi rozmermi.
 
 invalidDashNeplatný vzor čiary
 pera.Vzniká pri pokuse o nastavenie vzoru čiary pera, ktorý nie je platný
 (napríklad má všetky dĺžky čiarok a medzier nulové). Spresňujúcim objektom
 je pôvodná výnimka, ktorá chybu spôsobila.
 
 invalidDashPhaseNeplatný posun vzoru čiary
 pera.Vzniká pri pokuse o nastavenie negatívneho posunu vzoru čiary pera. Spresňujúcim
 objektom je pôvodná výnimka, ktorá chybu spôsobila.
 
 invalidDomainNeplatná doména:
 «doména»Zlyhal pokus o zostavenie koreňa cieľa
 komunikácie inštancie triedy Spojenie v dôsledku
 zadania neplatnej domény. Doména je zistiteľná metódou
 getParameter.
 
 invalidImageFormatNeplatný formát
 obrázka: «prípona»Vzniká pri pokuse o zápis obrázka
 do súboru s nepodporovaným formátom určeným podľa prípony súboru
 («prípona»). Prípona súboru je zistiteľná metódou
 getParameter.
 
 invalidImageTemplateŠablóna názvov
 sekvencie obrázkov „«šablóna»“ nie je použiteľná.Vzniká
 pri pokuse o čítanie alebo zápis sekvencie obrázkov vo formáte PNG,
 pričom prípona súboru neurčuje formát PNG. Šablóna je zistiteľná
 metódou getParameter.
 
 invalidProtocolNeplatný protokol:
 «protokol»Zlyhal pokus o zostavenie koreňa cieľa
 komunikácie inštancie triedy Spojenie v dôsledku
 zadania neplatného komunikačného protokolu. Protokol je zistiteľný metódou
 getParameter.
 
 invalidRemotePathNeplatná vzdialená
 cesta: «vzdialená cesta»Zlyhal pokus o zostavenie
 koreňa cieľa komunikácie inštancie triedy Spojenie
 v dôsledku zadania neplatnej vzdialenej cesty. Vzdialená cesta je
 zistiteľná metódou getParameter.
 
 namespaceContainsEqualsMenný priestor
 nesmie obsahovať znak rovná sa.Vzniká pri pokuse o prácu
 s menným priestorom, ktorého názov obsahuje znak rovná sa. Názov
 menného priestoru je zistiteľný metódou
 getParameter.
 
 namespaceEmptyMenný priestor nesmie
 byť prázdny.Vzniká pri pokuse o prácu s menným priestorom
 bez názvu.
 
 namespaceEndsWithDotMenný priestor
 sa nesmie končiť bodkou.Vzniká pri pokuse o prácu s menným
 priestorom, ktorého názov sa končí bodkou. Názov menného priestoru
 je zistiteľný metódou getParameter.
 
 namespaceStartsWithDotMenný priestor
 sa nesmie začínať bodkou.Vzniká pri pokuse o prácu s menným
 priestorom, ktorého názov sa začína bodkou. Názov menného priestoru
 je zistiteľný metódou getParameter.
 
 namespaceStartsWithSemicolonMenný
 priestor sa nesmie začínať znakom komentára.Vzniká pri
 pokuse o prácu s menným priestorom, ktorého názov sa začína
 bodkočiarkou (znakom komentára). Názov menného priestoru je
 zistiteľný metódou getParameter.
 
 negativeLineWidthHrúbka čiary nesmie
 byť záporná!Vzniká pri pokuse o zadanie zápornej hrúbky
 čiary spojnice. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 negativePenWidthHrúbka čiary pera
 nesmie byť záporná!Vzniká pri pokuse o zadanie zápornej
 hrúbky pera. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 negativeRadiusPolomer «objektu»
 nesmie byť záporný!Vzniká pri pokuse o zadanie záporného
 polomeru kružnice, kruh, vpísanej kružnice alebo opísanej kružnice
 (doplnené namiesto «objektu»), čo spresňuje aj
 voliteľný parameter výnimky, ktorý môže
 nadobúdať hodnoty circle, filledCircle,
 incircle alebo circumcircle. Spresňujúcim
 objektom je výnimka IllegalArgumentException
 (bez textu).
 
 negativeSemiaxeDĺžka poloosy
 «objektu» nesmie byť záporná!Vzniká pri pokuse
 o zadanie záporného rozmeru poloosy elipsy, vyplnenej elipsy alebo
 vpísanej elipsy (doplnené namiesto «objektu»), čo spresňuje
 aj voliteľný parameter výnimky, ktorý môže
 nadobúdať hodnoty ellipse, filledEllipse
 alebo inellipse. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 noRobotWithSuchNameRobot so zadaným
 menom («meno») nejestvuje.Vzniká pri pokuse
 o registráciu robota v konfigurácii podľa mena, ktoré nepatrí žiadnemu
 robotu. Meno údajného robota, ktorého registrácia zlyhala je
 zistiteľné metódou getParameter. Spresňujúcim
 objektom je výnimka IllegalArgumentException
 (bez textu).
 
 pathEmptyNázov priečinka nesmie by
 prázdny.Vzniká pri pokuse o vypísanie zoznamu súborov
 s prázdnym názvom priečinka.
 
 pathInvalidZadaná cesta («cesta»)
 nesmeruje na priečinok.Vzniká pri pokuse o vypísanie zoznamu
 súborov na ceste, ktorej cieľom nie je priečinok. Cesta je zistiteľná
 metódou getParameter.
 
 pathNotFoundCesta „«cesta»“
 nebola nájdená.Vzniká pri pokuse o vypísanie zoznamu súborov
 na neplatnej ceste («cesta»). Cesta je zistiteľná metódou
 getParameter. Spresňujúcim objektom je výnimka
 FileNotFoundException generovaná inou súčasťou
 programovacieho rámca.
 
 pathUnreadableCestu „«cesta»“
 nie je možné čítať.Vzniká pri pokuse o vypísanie zoznamu
 súborov na ceste, ktorú nie je možné čítať. Cesta je zistiteľná
 metódou getParameter.
 
 propertyContainsDotNázov vlastnosti
 nesmie obsahovať bodku.Vzniká pri pokuse o prácu
 s vlastnosťou, ktorej názov obsahuje bodku. Názov vlastnosti je
 zistiteľný metódou getParameter.
 
 propertyContainsEqualsNázov vlastnosti
 nesmie obsahovať znak rovná sa.Vzniká pri pokuse o prácu
 s vlastnosťou pri zadaní názvu vlastnosti obsahujúceho znak rovná sa.
 Názov vlastnosti je zistiteľný metódou
 getParameter.
 
 propertyDuplicateV konfiguračnom súbore
 sa nachádza zdvojená vlastnosť: «názov»Vzniká pri
 čítaní konfiguračného súboru, ktorý obsahuje duplikát určitej
 vlastnosti. Názov vlastnosti je zistiteľný metódou
 getParameter.
 
 propertyNameEmptyNázov vlastnosti
 nesmie byť prázdny,“ prípadne „V konfiguračnom súbore sa nachádza
 vlastnosť bez názvu.Vzniká pri pokuse o prácu s vlastnosťou
 bez názvu.
 
 propertyStartsWithBracketNázov vlastnosti
 sa nesmie začínať znakom hranatej zátvorky.Vzniká pri pokuse
 o prácu s vlastnosťou, ktorej názov sa začína znakom hranatej zátvorky
 ([). Názov vlastnosti je zistiteľný metódou
 getParameter.
 
 propertyStartsWithSemicolonNázov
 vlastnosti sa nesmie začínať znakom komentára,“ prípadne
 „V konfiguračnom súbore sa nachádza vlastnosť začínajúca sa znakom
 komentára.Vzniká pri pokuse o prácu s vlastnosťou, ktorej
 názov sa začína bodkočiarkou (znakom komentára). Názov vlastnosti je
 zistiteľný metódou getParameter.
 
 robotAlreadyEmployedTento robot už je
 zamestnaný na účely tvorby inej oblasti.Vzniká pri pokuse
 o zamestnanie robota na účely tvorby oblasti, ktorý už je zamestnancom
 inej oblasti.
 
 robotHasNoNameRobot nemá meno,“
 prípadne „Zadaný robot nemá meno.Vzniká pri pokuse
 o prečítanie konfigurácie zo súboru alebo o registráciu v konfigurácii
 takého robota, ktorý nebol pomenovaný.
 
 robotHeadsToOpositeDirectionRobot je
 obrátený presne opačným smerom od cieľového miesta kreslenia oblúka –
 musel by prejsť nekonečnom, aby sa do cieľa dostal.Vzniká pri
 pokuse o kreslenie takého oblúka, ktorý by smeroval do
 nekonečna.
 
 robotNameContainsEqualsMeno robota nesmie
 obsahovať znak rovná sa.Vzniká pri pokuse o priradenie takého
 mena robotu, ktoré obsahuje znak rovná sa. Meno robota, ktorého
 priradenie zlyhalo je zistiteľné metódou
 getParameter. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 robotNameEmptyMeno robota nesmie byť
 prázdne.Vzniká pri pokuse o priradenie prázdneho mena
 robotu. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 robotNameEndsWithDotMeno robota sa
 nesmie končiť bodkou.Vzniká pri pokuse o priradenie takého
 mena robotu, ktoré sa končí znakom bodky. Meno robota, ktorého
 priradenie zlyhalo je zistiteľné metódou
 getParameter. Spresňujúcim objektom je
 výnimka IllegalArgumentException (bez textu).
 
 robotNameMustBeUniqueMeno robota
 («meno») musí byť unikátne.Vzniká pri pokuse
 o priradenie takého mena robotu, ktoré už bolo použité. Meno robota,
 ktorého priradenie zlyhalo je zistiteľné metódou
 getParameter. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 robotNameReservedZadané meno robota je
 rezervované.Vzniká pri pokuse o priradenie takého mena robota,
 ktoré je rezervované. Zadané meno robota (ktorého priradenie zlyhalo)
 je zistiteľné metódou getParameter. Spresňujúcim
 objektom je výnimka IllegalArgumentException (bez
 textu).
 
 robotNameStartsWithDotMeno robota sa
 nesmie začínať bodkou.Vzniká pri pokuse o priradenie takého
 mena robotu, ktoré sa začína znakom bodky. Meno robota, ktorého
 priradenie zlyhalo je zistiteľné metódou
 getParameter. Spresňujúcim objektom je
 výnimka IllegalArgumentException (bez textu).
 
 robotNameStartsWithSemicolonMeno robota
 sa nesmie začínať znakom komentára.Vzniká pri pokuse
 o priradenie takého mena robotu, ktoré sa začína znakom bodkočiarky
 (znak komentára). Meno robota, ktorého priradenie zlyhalo je
 zistiteľné metódou getParameter. Spresňujúcim
 objektom je výnimka IllegalArgumentException
 (bez textu).
 
 scriptNotFoundSkript „«skript»“
 nebol nájdený.Znamená, že pokus o prečítanie skriptu zo súboru
 («skript») zlyhal z dôvodu nenájdenia súboru. Názov súboru je
 zistiteľný metódou getParameter. Spresňujúcim
 objektom je pôvodná systémová výnimka
 FileNotFoundException.
 
 secondFileNotExistsDruhý súbor
 „«súbor»“ nejestvuje.Vzniká pri porovnaní súborov,
 ak druhý súbor nejestvuje. Názov súboru je zistiteľný metódou
 getParameter. Spresňujúcim objektom je
 inštancia FileNotFoundException (bez textu).
 
 secondObjectNotFileDruhý súbor
 „«súbor»“ nie je súbor.Vzniká pri porovnaní súborov,
 ak druhý z objektov nie je súbor. Názov objektu je zistiteľný metódou
 getParameter.
 
 sectionAlreadyExistsSekcia so zadaným
 názvom „«názov»“ už jestvuje.Vzniká pri pokuse
 o premenovanie sekcie na názov, ktorý patrí inej sekcii. Názov sekcie
 je zistiteľný metódou getParameter.
 
 sectionStartsWithSemicolonNázov sekcie
 sa nesmie začínať znakom komentára,“ prípadne „V konfiguračnom súbore
 sa nachádza sekcia alebo prvok poľa vlastností začínajúci sa znakom
 komentára.Vzniká pri pokuse o prácu so sekciou alebo prvkom
 poľa vlastností, ktorého názov sa začína bodkočiarkou (znakom
 komentára). Názov objektu je zistiteľný metódou
 getParameter.
 
 segmentsAreParallelÚsečky sú
 paralelné.Táto výnimka vzniká pri hľadaní priesečníkov
 úsečiek.
 
 soundAlreadyExistsZvuk
 „«súbor»“ už jestvuje.Vzniká pri pokuse o zápis zvuku
 do súboru, ktorý už jestvuje («súbor»), ale len v prípade, že
 nebola explicitne zadaná hodnota parametra prepísania súboru. Názov súboru
 je zistiteľný metódou getParameter.
 
 soundNotFoundZvuk „«súbor»“ nebol
 nájdený.Znamená, že pokus o prečítanie súboru so zvukom
 («súbor») zlyhal z dôvodu nenájdenia súboru. Názov súboru je
 zistiteľný metódou getParameter.
 
 soundUnreadableZvuk „«súbor»“
 nie je možné čítať.Znamená, že pokus o prečítanie súboru
 so zvukom («súbor») zlyhal z dôvodu nesprávneho formátu,
 prípadne iných príčin. Názov súboru je zistiteľný metódou
 getParameter.
 
 sourceFileNotExistsZdrojový súbor
 „«súbor»“ nejestvuje.Vzniká pri kopírovaní alebo
 pripájaní súborov, ak zdrojový súbor nejestvuje. Názov súboru je
 zistiteľný metódou getParameter. Spresňujúcim
 objektom je inštancia FileNotFoundException
 (bez textu).
 
 sourceObjectNotFileZdrojový súbor
 „«súbor»“ nie je súbor.Vzniká pri kopírovaní alebo
 pripájaní súborov, ak zdrojový objekt nie je súbor. Názov objektu je
 zistiteľný metódou getParameter.
 
 svgImportErrorChyba pri spracovaní SVG
 údajov.Vzniká pri spracovaní SVG údajov zadaných vo forme
 XML/SVG reťazca (do metódy pridajSVG). Spresneňujúcim objektom (zistiteľným metódou getCause) je pôvodná výnimka, ktorá spôsobila
 vznik chyby počas spracovania.
 
 svgReadErrorChyba pri spracovaní SVG
 súboru „«meno».“Vzniká pri spracovaní SVG súboru.
 Spresneňujúcim objektom (zistiteľným metódou
 getCause) je pôvodná výnimka, ktorá
 vyvolala chybu spracovania.
 
 svgWriteErrorChyba pri zápise SVG
 súboru „«meno».“Vzniká pri zapisovaní SVG súboru.
 Spresneňujúcim objektom (zistiteľným metódou
 getCause) je pôvodná výnimka, ktorá
 vyvolala chybu spracovania.
 
 targetFileExistsCieľový súbor
 „«súbor»“ už jestvuje.Vzniká pri kopírovaní súborov,
 ak cieľový súbor jestvuje a nebol explicitne zadaný príznak prepísania
 súboru. Názov súboru je zistiteľný metódou
 getParameter.
 
 targetObjectNotFileCieľový súbor
 „«súbor»“ nie je súbor.Vzniká pri kopírovaní alebo
 pripájaní súborov, ak cieľový objekt nie je súbor. Názov objektu je
 zistiteľný metódou getParameter.
 
 unsupportedDataTypePočas čítania zo
 súboru nastal pokus o vloženie údajov do premennej nasledujúceho
 nepodporovaného údajového typu: «meno triedy»Vzniká
 pri pokuse o prečítanie údajov nepodporovaného údajového typu zo
 súboru. Ekvivalentný druh výnimky nevzniká pri pokuse o zápis údajov
 do súboru, pretože pri zápise je každý objekt jednoducho prevedený
 na reťazec metódou toString. Kanonický názov triedy,
 ktorej čítanie zlyhalo je zistiteľný metódou
 getParameter. Spresňujúcim objektom je výnimka
 IllegalArgumentException (bez textu).
 
 worldAlreadyExistsSvet už
 jestvuje!Vzniká pri pokuse o inicializáciu nového robota
 (v jestvujúcom svete), ktorý sa pokúša predefinovať rozmery
 kresliacich plátien.
 
 zeroPositionCannotBeChangedPolohu stredu
 nie je možné meniť!Vzniká pri pokuse o zmenu polohy inštancie
 stred.
 
 
 
 Poznámka: Vznik výnimiek a rôznych iných
 chybových stavov programovacieho rámca je sprevádzaný vznikom udalosti
 vzniklaChyba(chyba).
Pozri tiež:
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
GRobotException.Dennik
 Alias pre Denník.
static class 
GRobotException.Denník
Trieda zoznamu chybových hlásení a evidencie výnimiek vypísaných
 a/alebo vzniknutých počas činnosti programovacieho rámca.
static class 
GRobotException.Chyba
Trieda uchovávajúca záznam denníka.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static GRobotException.Dennik
dennik
 Alias pre denník.
static GRobotException.Dennik
denník
Denník chybových správ generovaných rámcom.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
GRobotException(String message,
               String langIDString)
Konštruktor umožňujúci vytvorenie výnimky s textom správy
 a univerzálnym jazykovým identifikátorom.
GRobotException(String message,
               String langIDString,
               String parameter)
Konštruktor umožňujúci vytvorenie výnimky s textom správy,
 univerzálnym jazykovým identifikátorom a parametrom.
GRobotException(String message,
               String langIDString,
               String parameter,
               Throwable cause)
Konštruktor umožňujúci vytvorenie výnimky s textom správy,
 univerzálnym jazykovým identifikátorom, parametrom a ďalším
 objektom výnimky, ktorý spresňuje okolnosti vzniku tejto výnimky.
GRobotException(String message,
               String langIDString,
               Throwable cause)
Konštruktor umožňujúci vytvorenie výnimky s textom správy
 univerzálnym jazykovým identifikátorom a ďalším objektom výnimky,
 ktorý spresňuje okolnosti vzniku tejto výnimky.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
String
getLangIDString()
Metóda vracajúca univerzálny jazykový identifikátor.
String
getParameter()
Metóda vracajúca nepovinný parameter spresňujúci vznik výnimky
 alebo null.
static GRobotException
poslednaVynimka()
 Alias pre poslednáVýnimka.
static GRobotException
poslednáVýnimka()
Vráti objekt s detailami o poslednej výnimke vygenerovanej
 programovacím rámcom.
String
stackTraceToString()
Metóda vracajúca stopu zásobníka volaní metód v čase vzniku tejto
 výnimky v reťazcovej podobe.
static String
stackTraceToString(Throwable t)
Metóda vracajúca stopu zásobníka volaní metód v čase vzniku
 zadanej výnimky v reťazcovej podobe.
Metódy zdedené z triedy java.lang.Throwable
addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace, toString
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
denník
public static final GRobotException.Dennik denník
Denník chybových správ generovaných rámcom. Denník sa začína
 utvárať v čase inicializácie programovacieho rámca. Predvolene je
 uchovávaný len v pamäti počítača, to znamená, že po ukončení
 aplikácie je jeho obsah vymazaný (stratený). Príklad uchovania
 denníka do súboru je v opise metódy denníka
 pripoj.
Pozri tiež:
GRobotException.Denník, 
GRobotException.Chyba, 
poslednáVýnimka()
dennik
public static final GRobotException.Dennik dennik
 Alias pre denník.
Podrobnosti konštruktorov
GRobotException
public GRobotException(String message,
                       String langIDString)
Konštruktor umožňujúci vytvorenie výnimky s textom správy
 a univerzálnym jazykovým identifikátorom.
Parametre:
message – text správy (spravidla v slovenčine) dostupný
     prostredníctvom zdedenej metódy Throwable.getMessage()
langIDString – univerzálny jazykový identifikátor dostupný
     prostredníctvom metódy getLangIDString()
GRobotException
public GRobotException(String message,
                       String langIDString,
                       Throwable cause)
Konštruktor umožňujúci vytvorenie výnimky s textom správy
 univerzálnym jazykovým identifikátorom a ďalším objektom výnimky,
 ktorý spresňuje okolnosti vzniku tejto výnimky. Spresňujúcim
 objektom môže byť napríklad: IllegalArgumentException,
 FileNotFoundException, IOException,
 NullPointerException…
Parametre:
message – text správy (spravidla v slovenčine) dostupný
     prostredníctvom zdedenej metódy Throwable.getMessage()
langIDString – univerzálny jazykový identifikátor dostupný
     prostredníctvom metódy getLangIDString()
cause – spresňujúci objekt výnimky dostupný prostredníctvom
     metódy getCause
GRobotException
public GRobotException(String message,
                       String langIDString,
                       String parameter)
Konštruktor umožňujúci vytvorenie výnimky s textom správy,
 univerzálnym jazykovým identifikátorom a parametrom.
Parametre:
message – text správy (spravidla v slovenčine) dostupný
     prostredníctvom zdedenej metódy Throwable.getMessage()
langIDString – univerzálny jazykový identifikátor dostupný
     prostredníctvom metódy getLangIDString()
parameter – parameter dopĺňajúci informáciu o vzniknutej
     výnimke (napríklad meno súboru) dostupný prostredníctvom
     metódy getParameter
GRobotException
public GRobotException(String message,
                       String langIDString,
                       String parameter,
                       Throwable cause)
Konštruktor umožňujúci vytvorenie výnimky s textom správy,
 univerzálnym jazykovým identifikátorom, parametrom a ďalším
 objektom výnimky, ktorý spresňuje okolnosti vzniku tejto výnimky.
 Spresňujúcim objektom môže byť napríklad:
 IllegalArgumentException, FileNotFoundException,
 IOException, NullPointerException…
Parametre:
message – text správy (spravidla v slovenčine) dostupný
     prostredníctvom zdedenej metódy Throwable.getMessage()
langIDString – univerzálny jazykový identifikátor dostupný
     prostredníctvom metódy getLangIDString()
parameter – parameter dopĺňajúci informáciu o vzniknutej
     výnimke (napríklad meno súboru) dostupný prostredníctvom
     metódy getParameter
cause – spresňujúci objekt výnimky dostupný prostredníctvom
     metódy getCause
Podrobnosti metód
poslednáVýnimka
public static GRobotException poslednáVýnimka()
Vráti objekt s detailami o poslednej výnimke vygenerovanej
 programovacím rámcom.
Návratová hodnota:
inštancia naposledy generovanej výnimky programovacím rámcom
     (môže byť aj null, ak ešte žiadna výnimka nevznikla)
Pozri tiež:
GRobotException.Denník, 
GRobotException.Chyba, 
denník
poslednaVynimka
public static GRobotException poslednaVynimka()
 Alias pre poslednáVýnimka.
getLangIDString
public String getLangIDString()
Metóda vracajúca univerzálny jazykový identifikátor.
Návratová hodnota:
univerzálny jazykový identifikátor využiteľný pri
     prekladoch prostredia
getParameter
public String getParameter()
Metóda vracajúca nepovinný parameter spresňujúci vznik výnimky
 alebo null.
Návratová hodnota:
nepovinný spresňujúci parameter výnimky, napríklad meno
     súboru (pozri tabuľku uvedenú
     v hlavnom opise tejto triedy)
stackTraceToString
public String stackTraceToString()
Metóda vracajúca stopu zásobníka volaní metód v čase vzniku tejto
 výnimky v reťazcovej podobe. Termín stopa zásobníka znamená, že ak
 je obsah zásobníka príliš veľký, tak nejde o úplný výpis obsahu
 zásobníka, ale len o stopu (trasu) vracajúcu sa späť od miesta vzniku
 výnimky po určitú maximálnu hĺbku.
Návratová hodnota:
reťazec s výpisom stopy (trasy) volaní metód v čase vzniku
     tejto výnimky
stackTraceToString
public static String stackTraceToString(Throwable t)
Metóda vracajúca stopu zásobníka volaní metód v čase vzniku
 zadanej výnimky v reťazcovej podobe. Podrobnosti nájdete v opise
 dynamickej verzie tejto metódy.
 Táto metóda funguje rovnako, len slúži na získanie výpisu stopy
 zásobníka z ľubovoľnej inštancie Throwable.
 (Čiže aj z inštancií výnimiek iného typu, než GRobotException.
Parametre:
t – ľubovoľná inštancia Throwable
Návratová hodnota:
reťazec s výpisom stopy (trasy) volaní metód v čase vzniku
     zadanej výnimky
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Trieda Kláves
java.lang.Object
java.util.EventObject
java.awt.AWTEvent
java.awt.event.ComponentEvent
java.awt.event.InputEvent
java.awt.event.KeyEvent
Kláves
Všetky implementované rozhrania:
Serializable
Známe priame odvodené triedy:
Klaves
public class Kláves
extends KeyEvent
Trieda je určená na použitie s udalosťami klávesnice (KeyEvent). Definuje niekoľko konštánt kódov klávesov, čím
 uľahčuje použitie klávesnice (pozri metódy obsluhy
 udalostí stlačenieKlávesu,
 uvoľnenieKlávesu).
 Nasledujúci príklad pri stlačení klávesu VĽAVO pípne:
 
 
new ObsluhaUdalostí()
{
    @Override public void stlačenieKlávesu()
    {
        if (ÚdajeUdalostí.kláves(Kláves.VĽAVO))
        {
            Svet.pípni();
        }
    }
};
Pozri tiež:
KeyEvent, 
Serializovateľnosť
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
BACK_SPACE
Kód klávesu Backspace (KeyEvent.VK_BACK_SPACE).
static int
BACKSPACE
Kód klávesu Backspace (KeyEvent.VK_BACK_SPACE).
static int
DELETE
Kód klávesu Delete (KeyEvent.VK_DELETE).
static int
DOLE
Kód klávesu dole (KeyEvent.VK_DOWN).
static int
END
Kód klávesu Page Down (KeyEvent.VK_END).
static int
ENTER
Kód klávesu Enter (KeyEvent.VK_ENTER).
static int
ESCAPE
Kód klávesu Escape (KeyEvent.VK_ESCAPE).
static int
HOME
Kód klávesu Page Up (KeyEvent.VK_HOME).
static int
HORE
Kód klávesu hore (KeyEvent.VK_UP).
static int
INSERT
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
static int
KONIEC
Kód klávesu Page Down (KeyEvent.VK_END).
static int
MEDZERA
Kód klávesu medzerník (KeyEvent.VK_SPACE).
static int
MEDZERNIK
Kód klávesu medzerník (KeyEvent.VK_SPACE).
static int
MEDZERNÍK
Kód klávesu medzerník (KeyEvent.VK_SPACE).
static int
PAGE_DOWN
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
static int
PAGE_UP
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
static int
SKRATKA_PONUKY
Kombinačný kód klávesových skratiek ponuky, čo je na niektorých
 operačných systémoch (ako Windows) kód pre kláves Ctrl,
 na iných kód pre iný kláves, napríklad ⌘ (Command)
 na macOS (predtým OS X a Mac OS) pre Apple Macintosh.
static int
STRANA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
static int
STRANA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
static int
STRANKA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
static int
STRÁNKA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
static int
STRANKA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
static int
STRÁNKA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
static int
TAB
Kód klávesu tabulátor (KeyEvent.VK_TAB).
static int
TABULATOR
Kód klávesu tabulátor (KeyEvent.VK_TAB).
static int
TABULÁTOR
Kód klávesu tabulátor (KeyEvent.VK_TAB).
static int
VLAVO
Kód klávesu vľavo (KeyEvent.VK_LEFT).
static int
VĽAVO
Kód klávesu vľavo (KeyEvent.VK_LEFT).
static int
VLOZIT
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
static int
VLOŽIŤ
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
static int
VPRAVO
Kód klávesu vpravo (KeyEvent.VK_RIGHT).
static int
ZACIATOK
Kód klávesu Page Up (KeyEvent.VK_HOME).
static int
ZAČIATOK
Kód klávesu Page Up (KeyEvent.VK_HOME).
Atribúty zdedené z triedy java.awt.event.KeyEvent
CHAR_UNDEFINED, KEY_FIRST, KEY_LAST, KEY_LOCATION_LEFT, KEY_LOCATION_NUMPAD, KEY_LOCATION_RIGHT, KEY_LOCATION_STANDARD, KEY_LOCATION_UNKNOWN, KEY_PRESSED, KEY_RELEASED, KEY_TYPED, VK_0, VK_1, VK_2, VK_3, VK_4, VK_5, VK_6, VK_7, VK_8, VK_9, VK_A, VK_ACCEPT, VK_ADD, VK_AGAIN, VK_ALL_CANDIDATES, VK_ALPHANUMERIC, VK_ALT, VK_ALT_GRAPH, VK_AMPERSAND, VK_ASTERISK, VK_AT, VK_B, VK_BACK_QUOTE, VK_BACK_SLASH, VK_BACK_SPACE, VK_BEGIN, VK_BRACELEFT, VK_BRACERIGHT, VK_C, VK_CANCEL, VK_CAPS_LOCK, VK_CIRCUMFLEX, VK_CLEAR, VK_CLOSE_BRACKET, VK_CODE_INPUT, VK_COLON, VK_COMMA, VK_COMPOSE, VK_CONTEXT_MENU, VK_CONTROL, VK_CONVERT, VK_COPY, VK_CUT, VK_D, VK_DEAD_ABOVEDOT, VK_DEAD_ABOVERING, VK_DEAD_ACUTE, VK_DEAD_BREVE, VK_DEAD_CARON, VK_DEAD_CEDILLA, VK_DEAD_CIRCUMFLEX, VK_DEAD_DIAERESIS, VK_DEAD_DOUBLEACUTE, VK_DEAD_GRAVE, VK_DEAD_IOTA, VK_DEAD_MACRON, VK_DEAD_OGONEK, VK_DEAD_SEMIVOICED_SOUND, VK_DEAD_TILDE, VK_DEAD_VOICED_SOUND, VK_DECIMAL, VK_DELETE, VK_DIVIDE, VK_DOLLAR, VK_DOWN, VK_E, VK_END, VK_ENTER, VK_EQUALS, VK_ESCAPE, VK_EURO_SIGN, VK_EXCLAMATION_MARK, VK_F, VK_F1, VK_F10, VK_F11, VK_F12, VK_F13, VK_F14, VK_F15, VK_F16, VK_F17, VK_F18, VK_F19, VK_F2, VK_F20, VK_F21, VK_F22, VK_F23, VK_F24, VK_F3, VK_F4, VK_F5, VK_F6, VK_F7, VK_F8, VK_F9, VK_FINAL, VK_FIND, VK_FULL_WIDTH, VK_G, VK_GREATER, VK_H, VK_HALF_WIDTH, VK_HELP, VK_HIRAGANA, VK_HOME, VK_I, VK_INPUT_METHOD_ON_OFF, VK_INSERT, VK_INVERTED_EXCLAMATION_MARK, VK_J, VK_JAPANESE_HIRAGANA, VK_JAPANESE_KATAKANA, VK_JAPANESE_ROMAN, VK_K, VK_KANA, VK_KANA_LOCK, VK_KANJI, VK_KATAKANA, VK_KP_DOWN, VK_KP_LEFT, VK_KP_RIGHT, VK_KP_UP, VK_L, VK_LEFT, VK_LEFT_PARENTHESIS, VK_LESS, VK_M, VK_META, VK_MINUS, VK_MODECHANGE, VK_MULTIPLY, VK_N, VK_NONCONVERT, VK_NUM_LOCK, VK_NUMBER_SIGN, VK_NUMPAD0, VK_NUMPAD1, VK_NUMPAD2, VK_NUMPAD3, VK_NUMPAD4, VK_NUMPAD5, VK_NUMPAD6, VK_NUMPAD7, VK_NUMPAD8, VK_NUMPAD9, VK_O, VK_OPEN_BRACKET, VK_P, VK_PAGE_DOWN, VK_PAGE_UP, VK_PASTE, VK_PAUSE, VK_PERIOD, VK_PLUS, VK_PREVIOUS_CANDIDATE, VK_PRINTSCREEN, VK_PROPS, VK_Q, VK_QUOTE, VK_QUOTEDBL, VK_R, VK_RIGHT, VK_RIGHT_PARENTHESIS, VK_ROMAN_CHARACTERS, VK_S, VK_SCROLL_LOCK, VK_SEMICOLON, VK_SEPARATER, VK_SEPARATOR, VK_SHIFT, VK_SLASH, VK_SPACE, VK_STOP, VK_SUBTRACT, VK_T, VK_TAB, VK_U, VK_UNDEFINED, VK_UNDERSCORE, VK_UNDO, VK_UP, VK_V, VK_W, VK_WINDOWS, VK_X, VK_Y, VK_Z
Atribúty zdedené z triedy java.awt.event.InputEvent
ALT_DOWN_MASK, ALT_GRAPH_DOWN_MASK, ALT_GRAPH_MASK, ALT_MASK, BUTTON1_DOWN_MASK, BUTTON1_MASK, BUTTON2_DOWN_MASK, BUTTON2_MASK, BUTTON3_DOWN_MASK, BUTTON3_MASK, CTRL_DOWN_MASK, CTRL_MASK, META_DOWN_MASK, META_MASK, SHIFT_DOWN_MASK, SHIFT_MASK
Atribúty zdedené z triedy java.awt.event.ComponentEvent
COMPONENT_FIRST, COMPONENT_HIDDEN, COMPONENT_LAST, COMPONENT_MOVED, COMPONENT_RESIZED, COMPONENT_SHOWN
Atribúty zdedené z triedy java.awt.AWTEvent
ACTION_EVENT_MASK, ADJUSTMENT_EVENT_MASK, COMPONENT_EVENT_MASK, consumed, CONTAINER_EVENT_MASK, FOCUS_EVENT_MASK, HIERARCHY_BOUNDS_EVENT_MASK, HIERARCHY_EVENT_MASK, id, INPUT_METHOD_EVENT_MASK, INVOCATION_EVENT_MASK, ITEM_EVENT_MASK, KEY_EVENT_MASK, MOUSE_EVENT_MASK, MOUSE_MOTION_EVENT_MASK, MOUSE_WHEEL_EVENT_MASK, PAINT_EVENT_MASK, RESERVED_ID_MAX, TEXT_EVENT_MASK, WINDOW_EVENT_MASK, WINDOW_FOCUS_EVENT_MASK, WINDOW_STATE_EVENT_MASK
Atribúty zdedené z triedy java.util.EventObject
source
Prehľad metód
Metódy zdedené z triedy java.awt.event.KeyEvent
getExtendedKeyCode, getExtendedKeyCodeForChar, getKeyCode, getKeyChar, getKeyLocation, getKeyModifiersText, getKeyText, isActionKey, paramString, setKeyCode, setKeyChar, setModifiers
Metódy zdedené z triedy java.awt.event.InputEvent
consume, getMaskForButton, getModifiers, getModifiersEx, getModifiersExText, getWhen, isAltDown, isAltGraphDown, isConsumed, isControlDown, isMetaDown, isShiftDown
Metódy zdedené z triedy java.awt.event.ComponentEvent
getComponent
Metódy zdedené z triedy java.awt.AWTEvent
getID, setSource, toString
Metódy zdedené z triedy java.util.EventObject
getSource
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
VĽAVO
public static final int VĽAVO
Kód klávesu vľavo (KeyEvent.VK_LEFT).
Pozri tiež:
Hodnoty konštánt
VLAVO
public static final int VLAVO
Kód klávesu vľavo (KeyEvent.VK_LEFT).
Pozri tiež:
Hodnoty konštánt
VPRAVO
public static final int VPRAVO
Kód klávesu vpravo (KeyEvent.VK_RIGHT).
Pozri tiež:
Hodnoty konštánt
HORE
public static final int HORE
Kód klávesu hore (KeyEvent.VK_UP).
Pozri tiež:
Hodnoty konštánt
DOLE
public static final int DOLE
Kód klávesu dole (KeyEvent.VK_DOWN).
Pozri tiež:
Hodnoty konštánt
MEDZERA
public static final int MEDZERA
Kód klávesu medzerník (KeyEvent.VK_SPACE).
Pozri tiež:
Hodnoty konštánt
MEDZERNÍK
public static final int MEDZERNÍK
Kód klávesu medzerník (KeyEvent.VK_SPACE).
Pozri tiež:
Hodnoty konštánt
MEDZERNIK
public static final int MEDZERNIK
Kód klávesu medzerník (KeyEvent.VK_SPACE).
Pozri tiež:
Hodnoty konštánt
PAGE_UP
public static final int PAGE_UP
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
Pozri tiež:
Hodnoty konštánt
STRÁNKA_HORE
public static final int STRÁNKA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
Pozri tiež:
Hodnoty konštánt
STRANKA_HORE
public static final int STRANKA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
Pozri tiež:
Hodnoty konštánt
STRANA_HORE
public static final int STRANA_HORE
Kód klávesu Page Up (KeyEvent.VK_PAGE_UP).
Pozri tiež:
Hodnoty konštánt
PAGE_DOWN
public static final int PAGE_DOWN
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
Pozri tiež:
Hodnoty konštánt
STRÁNKA_DOLE
public static final int STRÁNKA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
Pozri tiež:
Hodnoty konštánt
STRANKA_DOLE
public static final int STRANKA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
Pozri tiež:
Hodnoty konštánt
STRANA_DOLE
public static final int STRANA_DOLE
Kód klávesu Page Down (KeyEvent.VK_PAGE_DOWN).
Pozri tiež:
Hodnoty konštánt
HOME
public static final int HOME
Kód klávesu Page Up (KeyEvent.VK_HOME).
Pozri tiež:
Hodnoty konštánt
ZAČIATOK
public static final int ZAČIATOK
Kód klávesu Page Up (KeyEvent.VK_HOME).
Pozri tiež:
Hodnoty konštánt
ZACIATOK
public static final int ZACIATOK
Kód klávesu Page Up (KeyEvent.VK_HOME).
Pozri tiež:
Hodnoty konštánt
END
public static final int END
Kód klávesu Page Down (KeyEvent.VK_END).
Pozri tiež:
Hodnoty konštánt
KONIEC
public static final int KONIEC
Kód klávesu Page Down (KeyEvent.VK_END).
Pozri tiež:
Hodnoty konštánt
TAB
public static final int TAB
Kód klávesu tabulátor (KeyEvent.VK_TAB).
Pozri tiež:
Hodnoty konštánt
TABULÁTOR
public static final int TABULÁTOR
Kód klávesu tabulátor (KeyEvent.VK_TAB).
Pozri tiež:
Hodnoty konštánt
TABULATOR
public static final int TABULATOR
Kód klávesu tabulátor (KeyEvent.VK_TAB).
Pozri tiež:
Hodnoty konštánt
ENTER
public static final int ENTER
Kód klávesu Enter (KeyEvent.VK_ENTER).
Pozri tiež:
Hodnoty konštánt
ESCAPE
public static final int ESCAPE
Kód klávesu Escape (KeyEvent.VK_ESCAPE).
Pozri tiež:
Hodnoty konštánt
BACKSPACE
public static final int BACKSPACE
Kód klávesu Backspace (KeyEvent.VK_BACK_SPACE).
Pozri tiež:
Hodnoty konštánt
BACK_SPACE
public static final int BACK_SPACE
Kód klávesu Backspace (KeyEvent.VK_BACK_SPACE).
Pozri tiež:
Hodnoty konštánt
DELETE
public static final int DELETE
Kód klávesu Delete (KeyEvent.VK_DELETE).
Pozri tiež:
Hodnoty konštánt
INSERT
public static final int INSERT
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
Pozri tiež:
Hodnoty konštánt
VLOŽIŤ
public static final int VLOŽIŤ
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
Pozri tiež:
Hodnoty konštánt
VLOZIT
public static final int VLOZIT
Kód klávesu Insert (vložiť) (KeyEvent.VK_INSERT).
Pozri tiež:
Hodnoty konštánt
SKRATKA_PONUKY
public static final int SKRATKA_PONUKY
Kombinačný kód klávesových skratiek ponuky, čo je na niektorých
 operačných systémoch (ako Windows) kód pre kláves Ctrl,
 na iných kód pre iný kláves, napríklad ⌘ (Command)
 na macOS (predtým OS X a Mac OS) pre Apple Macintosh.
 Použitie tohto kódu má zmysel napríklad pri volaní metódy Svet.pridajKlávesovúSkratku(príkaz, kódKlávesu, modifikátor)
 v argumente modifikátor.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Rozhranie Konštanty
Všetky známe odvodené rozhrania:
Konstanty
Všetky známe implementujúce triedy:
GRobot
public interface Konštanty
Toto rozhranie zhromažďuje všetky konštanty používané v programovacom
 rámci. Trieda GRobot ho implementuje (čo je povedané kvázi
 obrazne, striktne v súlade s terminológiou Javy; v skutočnosti toto
 rozhranie nedefinuje žiadne metódy na implementáciu), preto sú všetky
 konštanty použiteľné priamo (bez odkazu na rozhranie) v každej triede
 odvodenej od triedy GRobot. V prípade potreby môže toto
 rozhranie implementovať ľubovoľná trieda, čím získa priamy prístup
 k definovaným konštantám.
 
 Mnohé triedy programovacieho rámca staticky importujú konkrétne
 konštanty z tohto rozhrania, aby sa dal lepšie udržať prehľad v tom,
 ktorá trieda používa konkrétne konštanty (napríklad trieda Spojenie importuje konštanty PREVZATIE_ÚDAJOV a ODOVZDANIE_ÚDAJOV).
 
 Statický import je totiž iným (a z pohľadu filozofie jazyka Java
 možno „správnejším“) spôsobom získania priameho prístupu ku konštantám
 rozhrania (alebo triedy). V prípade potreby môžu byť v konkrétnej triede
 staticky importované všetky konštanty tohto rozhrania:
 
 
import static knižnica.Konštanty.*;
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
ANO
 Alias pre ÁNO.
static int
ÁNO
Hodnota, ktorú vráti metóda v prípade, že používateľ zvolil
 z predvolených odpovedí „áno.“
 (Použiteľné napríklad pri metóde otázka.)
static int
CAKAT
 Alias pre ČAKAŤ.
static int
CISELNA_PREMENNA
 Alias pre ČÍSELNÁ_PREMENNÁ.
static int
CITANIE_GIF_ANIMACIE
 Alias pre ČÍTANIE_GIF_ANIMÁCIE.
static int
CITANIE_PNG_SEKVENCIE
 Alias pre ČÍTANIE_PNG_SEKVENCIE.
static int
ČAKAŤ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má čakať pred vykonaním riadka skriptu.
static int
ČÍSELNÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota číselnej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
static int
ČÍTANIE_GIF_ANIMÁCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
ČÍTANIE_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
FAREBNA_PREMENNA
 Alias pre FAREBNÁ_PREMENNÁ.
static int
FAREBNÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota farebnej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
static int
HORIZONTALNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
static int
HORIZONTÁLNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
static int
CHYBA_CITANIA_PNG_SEKVENCIE
 Alias pre CHYBA_ČÍTANIA_PNG_SEKVENCIE.
static int
CHYBA_CITANIA_SKRIPTU
 Alias pre CHYBA_ČÍTANIA_SKRIPTU.
static int
CHYBA_ČÍTANIA_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
CHYBA_ČÍTANIA_SKRIPTU
Toto je kód chyby rezervovaný na signalizovanie situácie, keď
 sa vykonávanie skriptu ani nemohlo začať pretože skript mal byť
 prečítaný zo súboru (prípadne zdroja), pričom táto akcia
 zlyhala.
static int
CHYBA_DVOJITA_MENOVKA
 Alias pre CHYBA_DVOJITÁ_MENOVKA.
static int
CHYBA_DVOJITÁ_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_CHYBAJUCA_MENOVKA
 Alias pre CHYBA_CHÝBAJÚCA_MENOVKA.
static int
CHYBA_CHÝBAJÚCA_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_CHYBNA_STRUKTURA
 Alias pre CHYBA_CHYBNÁ_ŠTRUKTÚRA.
static int
CHYBA_CHYBNÁ_ŠTRUKTÚRA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_NEZNAMA_MENOVKA
 Alias pre CHYBA_NEZNÁMA_MENOVKA.
static int
CHYBA_NEZNÁMA_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_NEZNAME_MENO
 Alias pre CHYBA_NEZNÁME_MENO.
static int
CHYBA_NEZNÁME_MENO
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_NEZNAME_SLOVO
 Alias pre CHYBA_NEZNÁME_SLOVO.
static int
CHYBA_NEZNÁME_SLOVO
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_NEZNAMY_PRIKAZ
 Alias pre CHYBA_NEZNÁMY_PRÍKAZ.
static int
CHYBA_NEZNÁMY_PRÍKAZ
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
CHYBA_VOLANIA_SKRIPTU
Toto je kód chyby rezervovaný na signalizovanie situácie, keď
 vykonávanie (volanie) vnorených skriptov zaznamenalo príliš mnoho
 vnorení, čo z bezpečnostných dôvodov nie je povolené.
static int
CHYBA_VYKONANIA_PRIKAZU
 Alias pre CHYBA_VYKONANIA_PRÍKAZU.
static int
CHYBA_VYKONANIA_PRÍKAZU
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
KOPIROVANIE_SUBOROV
 Alias pre KOPÍROVANIE_SÚBOROV.
static int
KOPÍROVANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
KRESLI_CENTROVANE
 Alias pre KRESLI_CENTROVANÉ.
static int
KRESLI_CENTROVANÉ
 Alias pre KRESLI_NA_STRED.
static int
KRESLI_NA_STRED
Príznak centrovania textu alebo obrázka na polohu (stred) robota.
static int
KRESLI_PRIAMO
Príznak priameho spôsobu písania textov a kreslenia obrázkov –
 nerotuje, necentruje.
static int
KRESLI_ROTOVANE
 Alias pre KRESLI_ROTOVANÉ.
static int
KRESLI_ROTOVANÉ
Príznak rotovania textu alebo obrázka kolmo na smer robota.
static int
KRESLI_V_SMERE
 Alias pre KRESLI_ROTOVANÉ.
static int
LAVE
 Alias pre ĽAVÉ.
static int
ĽAVÉ
Číselná konštanta ľavého tlačidla myši (1).
static String
mainDeveloper
Konštanta s menom hlavného (zatiaľ jediného) vývojára tejto
                        verzie rámca (v podstate na účel výpisu copyrightu… kto vie, či
                        časom pribudnú aj nejakí ďalší…)
static String
mainDeveloperTitled
Konštanta s menom a titulmi hlavného vývojára tejto verzie
                        rámca (na účely automatického spracovania dokumentácie…)
static int
majorVersion
Konštanta majoritnej verzie tohto rámca.
static int
minorVersion
Konštanta minoritnej verzie tohto rámca.
static int
NIE
Hodnota, ktorú vráti metóda v prípade, že používateľ zvolil
 z predvolených odpovedí „nie.“
 (Použiteľné napríklad pri metóde otázka.)
static int
ODOVZDANIE_UDAJOV
 Alias pre ODOVZDANIE_ÚDAJOV.
static int
ODOVZDANIE_ÚDAJOV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
ODRAZ
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 kontakte s hranicami odrazí naspäť do priestoru vymedzeného
 hranicami.
static int
ODRAZENIE
 Alias pre ODRAZ.
static int
ODRAZIT
 Alias pre ODRAZ.
static int
ODRAZIŤ
 Alias pre ODRAZ.
static int
OPLOTENIE
 Alias pre PLOT.
static int
OPLOTIT
 Alias pre PLOT.
static int
OPLOTIŤ
 Alias pre PLOT.
static int
PLOT
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 kontakte s hranicami kĺže pozdĺž hranice, dokedy nedosiahne bod,
 ktorý je najbližšie k cieľovému umiestneniu.
static int
POLOHOVA_PREMENNA
 Alias pre POLOHOVÁ_PREMENNÁ.
static int
POLOHOVÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota polohovej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
static int
POROVNANIE_SUBOROV
 Alias pre POROVNANIE_SÚBOROV.
static int
POROVNANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
PRAVE
 Alias pre PRAVÉ.
static int
PRAVÉ
Číselná konštanta pravého tlačidla myši (3).
static int
PRERUSIT
 Alias pre PRERUŠIŤ.
static int
PRERUŠIŤ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má prerušiť vykonávanie skriptu.
static int
PRETOC
 Alias pre PRETOČ.
static int
PRETOCENIE
 Alias pre PRETOČ.
static int
PRETOCIT
 Alias pre PRETOČ.
static int
PRETOČ
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 prekročení hranice presunie na protiľahnú stranu ohraničenia
 a pokračuje ďalej v rámci vymedzenej plochy.
static int
PRETOČENIE
 Alias pre PRETOČ.
static int
PRETOČIŤ
 Alias pre PRETOČ.
static int
PREVZATIE_UDAJOV
 Alias pre PREVZATIE_ÚDAJOV.
static int
PREVZATIE_ÚDAJOV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
PRIPAJANIE_SUBOROV
 Alias pre PRIPÁJANIE_SÚBOROV.
static int
PRIPÁJANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
RETAZCOVA_PREMENNA
 Alias pre REŤAZCOVÁ_PREMENNÁ.
static int
REŤAZCOVÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota reťazcovej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
static char
riadok
Znaková konštanta nového riadka.
static int
SPOSOB_DEAKTIVACIA
 Alias pre SPÔSOB_DEAKTIVÁCIA.
static int
SPOSOB_ENTER
 Alias pre SPÔSOB_ENTER.
static int
SPOSOB_ESCAPE
 Alias pre SPÔSOB_ESCAPE.
static int
SPOSOB_SHIFT_TAB
 Alias pre SPÔSOB_SHIFT_TAB.
static int
SPOSOB_SHIFT_TABULATOR
 Alias pre SPÔSOB_SHIFT_TABULÁTOR.
static int
SPOSOB_TAB
 Alias pre SPÔSOB_TAB.
static int
SPOSOB_TABULATOR
 Alias pre SPÔSOB_TABULÁTOR.
static int
SPÔSOB_DEAKTIVÁCIA
Spôsob ukončenia úprav textu dekativáciou textového komponentu
 (napríklad kliknutím myšou na plátne).
static int
SPÔSOB_ENTER
Spôsob ukončenia úprav textu klávesom ENTER.
static int
SPÔSOB_ESCAPE
Spôsob ukončenia úprav textu klávesom ESC.
static int
SPÔSOB_SHIFT_TAB
Spôsob ukončenia úprav textu klávesovou kombináciou Shift + TAB
 (resp.
static int
SPÔSOB_SHIFT_TABULÁTOR
Spôsob ukončenia úprav textu klávesovou kombináciou
 Shift + tabulátor (resp.
static int
SPÔSOB_TAB
Spôsob ukončenia úprav textu klávesom TAB (čo je aliasom kávesu
 TABULÁTOR).
static int
SPÔSOB_TABULÁTOR
Spôsob ukončenia úprav textu klávesom TABULÁTOR (čo je aliasom
 kávesu TAB).
static int
STREDNE
 Alias pre STREDNÉ.
static int
STREDNÉ
Číselná konštanta stredného tlačidla myši (2).
static int
UKONCENIE_CHYBOU
 Alias pre UKONČENIE_CHYBOU.
static int
UKONCENIE_SKRIPTU
 Alias pre UKONČENIE_SKRIPTU.
static int
UKONČENIE_CHYBOU
Konštanta režimu ladenia
 v interaktívnom
 režime – režim oznamuje, že ladenie bolo ukončené chybou.
static int
UKONČENIE_SKRIPTU
Konštanta režimu ladenia
 v interaktívnom
 režime – režim oznamuje, že ladenie bolo ukončené (bez chyby).
static String
versionNote
Konštanta poznámky verzie tohto rámca.
static String
versionString
Úplný reťazec poskytujúci informácie o tejto verzii rámca
                        (angl. frameworku).
static int
VERTIKALNA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
static int
VERTIKÁLNA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
static int
VODOROVNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
static int
VODOROVNÁ
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
static int
VYKONAT_PRIKAZ
 Alias pre VYKONAŤ_PRÍKAZ.
static int
VYKONAŤ_PRÍKAZ
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vykonať potvrdený
 príkazový riadok.
static int
VYPISAT_MENOVKU
 Alias pre VYPÍSAŤ_MENOVKY.
static int
VYPÍSAŤ_MENOVKU
 Alias pre VYPÍSAŤ_MENOVKY.
static int
VYPISAT_MENOVKY
 Alias pre VYPÍSAŤ_MENOVKY.
static int
VYPÍSAŤ_MENOVKY
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má na vnútornú konzolu pred začatím
 vykonávania skriptu vypísať definície všetkých menoviek v skripte,
 ktoré sa mu podarilo vyhľadať počas analýzy skriptu.
static int
VYPISAT_PREMENNE
 Alias pre VYPÍSAŤ_PREMENNÉ.
static int
VYPÍSAŤ_PREMENNÉ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má vypísať obsah všetkých premenných na
 vnútornú konzolu pred začatím vykonávania skriptu.
static int
VYPISAT_PRIKAZ
 Alias pre VYPÍSAŤ_PRÍKAZ.
static int
VYPÍSAŤ_PRÍKAZ
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vypísať ozvenu
 potvrdeného príkazového riadka na vnútornú konzolu.
static int
VYPISAT_RIADOK
 Alias pre VYPÍSAŤ_RIADOK.
static int
VYPÍSAŤ_RIADOK
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má vypísať riadok skriptu na vnútornú
 konzolu.
static int
VYPISAT_SKRIPT
 Alias pre VYPÍSAŤ_SKRIPT.
static int
VYPÍSAŤ_SKRIPT
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vypísať úplné znenie
 aktuálne vykonávaného skriptu na vnútornú konzolu.
static String
years
Konštanta rozpätia rokov vývoja tejto verzie rámca
                        (v podstate na účel výpisu copyrightu…)
static String
yearsMonths
Konštanta rozpätia rokov a mesiacov vývoja tejto verzie rámca
                        (na účely automatického spracovania dokumentácie…)
static int
ZABRANIT_VYKONANIU
 Alias pre ZABRÁNIŤ_VYKONANIU.
static int
ZABRÁNIŤ_VYKONANIU
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má v poslednej chvíli zabrániť
 vykonaniu príkazu s konkrétnymi hodnotami parametrov.
static int
ZAPIS_GIF_ANIMACIE
 Alias pre ZÁPIS_GIF_ANIMÁCIE.
static int
ZÁPIS_GIF_ANIMÁCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
ZAPIS_PNG_SEKVENCIE
 Alias pre ZÁPIS_PNG_SEKVENCIE.
static int
ZÁPIS_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia
static int
ZAVRETE
 Alias pre ZAVRETÉ.
static int
ZAVRETÉ
Hodnota, ktorú vráti metóda v prípade, že používateľ nezvolil
 žiadnu možnosť a zavrel dialóg.
static int
ZIADNA_CHYBA
 Alias pre ŽIADNA_CHYBA.
static int
ZIADNE
 Alias pre ŽIADNE.
static int
ZRUSIT
 Alias pre ZRUŠIŤ.
static int
ZRUŠIŤ
Hodnota, ktorú vráti metóda v prípade, že používateľ dialóg zrušil.
static int
ZVISLA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
static int
ZVISLÁ
Konštanta slúžiaca na určenie zvislej orientácie lišty.
static int
ŽIADNA_CHYBA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
static int
ŽIADNE
Číselná konštanta, ktorá môže mať v budúcnosti aj iný význam, ale
 aktuálne len určuje, že robot nepoužíva žiadny spôsob
 ohraničenia.
Podrobnosti atribútov
majorVersion
static final int majorVersion
Konštanta majoritnej verzie tohto rámca.
Pozri tiež:
Hodnoty konštánt
minorVersion
static final int minorVersion
Konštanta minoritnej verzie tohto rámca.
Pozri tiež:
Hodnoty konštánt
versionNote
static final String versionNote
Konštanta poznámky verzie tohto rámca.
Pozri tiež:
Hodnoty konštánt
years
static final String years
Konštanta rozpätia rokov vývoja tejto verzie rámca
                        (v podstate na účel výpisu copyrightu…)
Pozri tiež:
Hodnoty konštánt
yearsMonths
static final String yearsMonths
Konštanta rozpätia rokov a mesiacov vývoja tejto verzie rámca
                        (na účely automatického spracovania dokumentácie…)
Pozri tiež:
Hodnoty konštánt
mainDeveloper
static final String mainDeveloper
Konštanta s menom hlavného (zatiaľ jediného) vývojára tejto
                        verzie rámca (v podstate na účel výpisu copyrightu… kto vie, či
                        časom pribudnú aj nejakí ďalší…)
Pozri tiež:
Hodnoty konštánt
mainDeveloperTitled
static final String mainDeveloperTitled
Konštanta s menom a titulmi hlavného vývojára tejto verzie
                        rámca (na účely automatického spracovania dokumentácie…)
Pozri tiež:
Hodnoty konštánt
versionString
static final String versionString
Úplný reťazec poskytujúci informácie o tejto verzii rámca
                        (angl. frameworku).
KRESLI_PRIAMO
static final int KRESLI_PRIAMO
Príznak priameho spôsobu písania textov a kreslenia obrázkov –
 nerotuje, necentruje. Nachádza využitie pri metódach spôsobKreslenia, text alebo obrázok.
Pozri tiež:
Hodnoty konštánt
KRESLI_NA_STRED
static final int KRESLI_NA_STRED
Príznak centrovania textu alebo obrázka na polohu (stred) robota.
 Nachádza využitie pri metódach spôsobKreslenia, text alebo obrázok.
Pozri tiež:
Hodnoty konštánt
KRESLI_ROTOVANÉ
static final int KRESLI_ROTOVANÉ
Príznak rotovania textu alebo obrázka kolmo na smer robota.
 Nachádza využitie pri metódach spôsobKreslenia, text alebo
 obrázok.
Pozri tiež:
Hodnoty konštánt
KRESLI_ROTOVANE
static final int KRESLI_ROTOVANE
 Alias pre KRESLI_ROTOVANÉ.
Pozri tiež:
Hodnoty konštánt
KRESLI_CENTROVANÉ
static final int KRESLI_CENTROVANÉ
 Alias pre KRESLI_NA_STRED.
Pozri tiež:
Hodnoty konštánt
KRESLI_CENTROVANE
static final int KRESLI_CENTROVANE
 Alias pre KRESLI_CENTROVANÉ.
Pozri tiež:
Hodnoty konštánt
KRESLI_V_SMERE
static final int KRESLI_V_SMERE
 Alias pre KRESLI_ROTOVANÉ.
Pozri tiež:
Hodnoty konštánt
ŽIADNE
static final int ŽIADNE
Číselná konštanta, ktorá môže mať v budúcnosti aj iný význam, ale
 aktuálne len určuje, že robot nepoužíva žiadny spôsob
 ohraničenia.
Pozri tiež:
Hodnoty konštánt
ZIADNE
static final int ZIADNE
 Alias pre ŽIADNE.
Pozri tiež:
Hodnoty konštánt
ODRAZ
static final int ODRAZ
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 kontakte s hranicami odrazí naspäť do priestoru vymedzeného
 hranicami.
Pozri tiež:
Hodnoty konštánt
ODRAZENIE
static final int ODRAZENIE
 Alias pre ODRAZ.
Pozri tiež:
Hodnoty konštánt
ODRAZIŤ
static final int ODRAZIŤ
 Alias pre ODRAZ.
Pozri tiež:
Hodnoty konštánt
ODRAZIT
static final int ODRAZIT
 Alias pre ODRAZ.
Pozri tiež:
Hodnoty konštánt
PLOT
static final int PLOT
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 kontakte s hranicami kĺže pozdĺž hranice, dokedy nedosiahne bod,
 ktorý je najbližšie k cieľovému umiestneniu.
Pozri tiež:
Hodnoty konštánt
OPLOTENIE
static final int OPLOTENIE
 Alias pre PLOT.
Pozri tiež:
Hodnoty konštánt
OPLOTIŤ
static final int OPLOTIŤ
 Alias pre PLOT.
Pozri tiež:
Hodnoty konštánt
OPLOTIT
static final int OPLOTIT
 Alias pre PLOT.
Pozri tiež:
Hodnoty konštánt
PRETOČ
static final int PRETOČ
Číselná konštanta spôsobu ohraničenia robota, kedy sa robot po
 prekročení hranice presunie na protiľahnú stranu ohraničenia
 a pokračuje ďalej v rámci vymedzenej plochy.
Pozri tiež:
Hodnoty konštánt
PRETOC
static final int PRETOC
 Alias pre PRETOČ.
Pozri tiež:
Hodnoty konštánt
PRETOČENIE
static final int PRETOČENIE
 Alias pre PRETOČ.
Pozri tiež:
Hodnoty konštánt
PRETOCENIE
static final int PRETOCENIE
 Alias pre PRETOČ.
Pozri tiež:
Hodnoty konštánt
PRETOČIŤ
static final int PRETOČIŤ
 Alias pre PRETOČ.
Pozri tiež:
Hodnoty konštánt
PRETOCIT
static final int PRETOCIT
 Alias pre PRETOČ.
Pozri tiež:
Hodnoty konštánt
ĽAVÉ
static final int ĽAVÉ
Číselná konštanta ľavého tlačidla myši (1).
 Použiteľná napríklad s metódami tlačidloMyši(), tlačidloMyši(ktoré), tlačidloMyšiDole(ktoré) alebo
 tlačidloMyšiHore(ktoré).
Pozri tiež:
Hodnoty konštánt
LAVE
static final int LAVE
 Alias pre ĽAVÉ.
Pozri tiež:
Hodnoty konštánt
STREDNÉ
static final int STREDNÉ
Číselná konštanta stredného tlačidla myši (2).
 Použiteľná napríklad s metódami tlačidloMyši(), tlačidloMyši(ktoré), tlačidloMyšiDole(ktoré) alebo
 tlačidloMyšiHore(ktoré).
Pozri tiež:
Hodnoty konštánt
STREDNE
static final int STREDNE
 Alias pre STREDNÉ.
Pozri tiež:
Hodnoty konštánt
PRAVÉ
static final int PRAVÉ
Číselná konštanta pravého tlačidla myši (3).
 Použiteľná napríklad s metódami tlačidloMyši(), tlačidloMyši(ktoré), tlačidloMyšiDole(ktoré) alebo
 tlačidloMyšiHore(ktoré).
Pozri tiež:
Hodnoty konštánt
PRAVE
static final int PRAVE
 Alias pre PRAVÉ.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_ESCAPE
static final int SPÔSOB_ESCAPE
Spôsob ukončenia úprav textu klávesom ESC.
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_ESCAPE
static final int SPOSOB_ESCAPE
 Alias pre SPÔSOB_ESCAPE.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_ENTER
static final int SPÔSOB_ENTER
Spôsob ukončenia úprav textu klávesom ENTER.
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_ENTER
static final int SPOSOB_ENTER
 Alias pre SPÔSOB_ENTER.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_TAB
static final int SPÔSOB_TAB
Spôsob ukončenia úprav textu klávesom TAB (čo je aliasom kávesu
 TABULÁTOR).
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_TAB
static final int SPOSOB_TAB
 Alias pre SPÔSOB_TAB.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_TABULÁTOR
static final int SPÔSOB_TABULÁTOR
Spôsob ukončenia úprav textu klávesom TABULÁTOR (čo je aliasom
 kávesu TAB).
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_TABULATOR
static final int SPOSOB_TABULATOR
 Alias pre SPÔSOB_TABULÁTOR.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_SHIFT_TAB
static final int SPÔSOB_SHIFT_TAB
Spôsob ukončenia úprav textu klávesovou kombináciou Shift + TAB
 (resp. Shift + tabulátor).
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_SHIFT_TAB
static final int SPOSOB_SHIFT_TAB
 Alias pre SPÔSOB_SHIFT_TAB.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_SHIFT_TABULÁTOR
static final int SPÔSOB_SHIFT_TABULÁTOR
Spôsob ukončenia úprav textu klávesovou kombináciou
 Shift + tabulátor (resp. Shift + TAB).
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_SHIFT_TABULATOR
static final int SPOSOB_SHIFT_TABULATOR
 Alias pre SPÔSOB_SHIFT_TABULÁTOR.
Pozri tiež:
Hodnoty konštánt
SPÔSOB_DEAKTIVÁCIA
static final int SPÔSOB_DEAKTIVÁCIA
Spôsob ukončenia úprav textu dekativáciou textového komponentu
 (napríklad kliknutím myšou na plátne).
Pozri tiež:
GRobot.upravText(String), 
GRobot.upravText(String, double), 
GRbobot#ukončenieÚpravyTextu(String, int), 
Hodnoty konštánt
SPOSOB_DEAKTIVACIA
static final int SPOSOB_DEAKTIVACIA
 Alias pre SPÔSOB_DEAKTIVÁCIA.
Pozri tiež:
Hodnoty konštánt
ČÍTANIE_PNG_SEKVENCIE
static final int ČÍTANIE_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota
 sekvencia a reakciu aktívnej obsluhy udalostí
 sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave čítania PNG sekvencie obrázkov
 metódou Obrázok.čítaj(názovSúboru).
Pozri tiež:
Hodnoty konštánt
CITANIE_PNG_SEKVENCIE
static final int CITANIE_PNG_SEKVENCIE
 Alias pre ČÍTANIE_PNG_SEKVENCIE.
Pozri tiež:
Hodnoty konštánt
CHYBA_ČÍTANIA_PNG_SEKVENCIE
static final int CHYBA_ČÍTANIA_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota
 sekvencia a reakciu aktívnej obsluhy udalostí
 sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu v prípade nedostatku voľnej pamäte na prečítanie celej
 PNG sekvencie obrázkov. (V takom prípade je všetko, čo bolo doteraz
 prečítané uvoľnené a metóda Obrázok.čítaj(názovSúboru) vráti hodnotu
 null.)
Pozri tiež:
Hodnoty konštánt
CHYBA_CITANIA_PNG_SEKVENCIE
static final int CHYBA_CITANIA_PNG_SEKVENCIE
 Alias pre CHYBA_ČÍTANIA_PNG_SEKVENCIE.
Pozri tiež:
Hodnoty konštánt
ZÁPIS_PNG_SEKVENCIE
static final int ZÁPIS_PNG_SEKVENCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave zápisu PNG sekvencie obrázkov
 metódou Obrázok.ulož(názovSúboru, prepísať)
 (resp. jej inou verziou).
Pozri tiež:
Hodnoty konštánt
ZAPIS_PNG_SEKVENCIE
static final int ZAPIS_PNG_SEKVENCIE
 Alias pre ZÁPIS_PNG_SEKVENCIE.
Pozri tiež:
Hodnoty konštánt
ČÍTANIE_GIF_ANIMÁCIE
static final int ČÍTANIE_GIF_ANIMÁCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave čítania animovaného obrázka
 vo formáte GIF metódou Obrázok.čítaj(názovSúboru).
Pozri tiež:
Hodnoty konštánt
CITANIE_GIF_ANIMACIE
static final int CITANIE_GIF_ANIMACIE
 Alias pre ČÍTANIE_GIF_ANIMÁCIE.
Pozri tiež:
Hodnoty konštánt
ZÁPIS_GIF_ANIMÁCIE
static final int ZÁPIS_GIF_ANIMÁCIE
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave zápisu animovaného obrázka
 vo formáte GIF metódou Obrázok.ulož(názovSúboru, prepísať)
 (resp. jej inou verziou).
Pozri tiež:
Hodnoty konštánt
ZAPIS_GIF_ANIMACIE
static final int ZAPIS_GIF_ANIMACIE
 Alias pre ZÁPIS_GIF_ANIMÁCIE.
Pozri tiež:
Hodnoty konštánt
KOPÍROVANIE_SÚBOROV
static final int KOPÍROVANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave kopírovania súboru metódou
 Súbor.kopíruj(zdroj, cieľ, prepísať) (resp. niektorou
 jej verziou).
Pozri tiež:
Hodnoty konštánt
KOPIROVANIE_SUBOROV
static final int KOPIROVANIE_SUBOROV
 Alias pre KOPÍROVANIE_SÚBOROV.
Pozri tiež:
Hodnoty konštánt
PRIPÁJANIE_SÚBOROV
static final int PRIPÁJANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave pripájania súboru metódou
 Súbor.pripoj(zdroj, cieľ).
Pozri tiež:
Hodnoty konštánt
PRIPAJANIE_SUBOROV
static final int PRIPAJANIE_SUBOROV
 Alias pre PRIPÁJANIE_SÚBOROV.
Pozri tiež:
Hodnoty konštánt
POROVNANIE_SÚBOROV
static final int POROVNANIE_SÚBOROV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave porovnávania súborov metódou
 Súbor.porovnaj(názov1, názov2).
Pozri tiež:
Hodnoty konštánt
POROVNANIE_SUBOROV
static final int POROVNANIE_SUBOROV
 Alias pre POROVNANIE_SÚBOROV.
Pozri tiež:
Hodnoty konštánt
ODOVZDANIE_ÚDAJOV
static final int ODOVZDANIE_ÚDAJOV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave odovzdávania údajov relevantnou
 metódou triedy Spojenie. (Napríklad pošliSúbor(názovSúboru).)
Pozri tiež:
Hodnoty konštánt
ODOVZDANIE_UDAJOV
static final int ODOVZDANIE_UDAJOV
 Alias pre ODOVZDANIE_ÚDAJOV.
Pozri tiež:
Hodnoty konštánt
PREVZATIE_ÚDAJOV
static final int PREVZATIE_ÚDAJOV
Táto konštanta opisuje stav súvisiaci s reakciou
 sekvencia.
 
 (Je relevantná pre reakcie robota sekvencia a reakciu aktívnej obsluhy
 udalostí sekvencia.)
 
 Parameter kódSpracovania uvedenej reakcie nadobúda túto
 hodnotu počas informovania o stave prijímania údajov relevantnou
 metódou triedy Spojenie. (Napríklad uložOdpoveď(názovSúboru).
Pozri tiež:
Hodnoty konštánt
PREVZATIE_UDAJOV
static final int PREVZATIE_UDAJOV
 Alias pre PREVZATIE_ÚDAJOV.
Pozri tiež:
Hodnoty konštánt
ZAVRETÉ
static final int ZAVRETÉ
Hodnota, ktorú vráti metóda v prípade, že používateľ nezvolil
 žiadnu možnosť a zavrel dialóg. (Pozri skupinu metód otázka.)
Pozri tiež:
Hodnoty konštánt
ZAVRETE
static final int ZAVRETE
 Alias pre ZAVRETÉ.
Pozri tiež:
Hodnoty konštánt
ZRUŠIŤ
static final int ZRUŠIŤ
Hodnota, ktorú vráti metóda v prípade, že používateľ dialóg zrušil.
 (Použiteľné napríklad pri metóde otázka.)
Pozri tiež:
Hodnoty konštánt
ZRUSIT
static final int ZRUSIT
 Alias pre ZRUŠIŤ.
Pozri tiež:
Hodnoty konštánt
ÁNO
static final int ÁNO
Hodnota, ktorú vráti metóda v prípade, že používateľ zvolil
 z predvolených odpovedí „áno.“
 (Použiteľné napríklad pri metóde otázka.)
Pozri tiež:
Hodnoty konštánt
ANO
static final int ANO
 Alias pre ÁNO.
Pozri tiež:
Hodnoty konštánt
NIE
static final int NIE
Hodnota, ktorú vráti metóda v prípade, že používateľ zvolil
 z predvolených odpovedí „nie.“
 (Použiteľné napríklad pri metóde otázka.)
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_PREMENNÉ
static final int VYPÍSAŤ_PREMENNÉ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má vypísať obsah všetkých premenných na
 vnútornú konzolu pred začatím vykonávania skriptu.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYPISAT_PREMENNE
static final int VYPISAT_PREMENNE
 Alias pre VYPÍSAŤ_PREMENNÉ.
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_MENOVKY
static final int VYPÍSAŤ_MENOVKY
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má na vnútornú konzolu pred začatím
 vykonávania skriptu vypísať definície všetkých menoviek v skripte,
 ktoré sa mu podarilo vyhľadať počas analýzy skriptu.
 
 Poznámka: V priebehu vývoja
 programovacieho rámca sa automatický výpis menoviek stal
 irelevantným, takže táto akcia sa teraz vykonáva len na
 požiadanie. (Pôvodne sa mechanizmus ladenia pýtal na každú
 menovku zvlášť, preto zostali definované aliasy aj v singulári
 (t. j. VYPÍSAŤ_MENOVKU a jeho alias bez
 diakritiky), ktoré teraz rámec aktívne nevyužíva.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYPISAT_MENOVKY
static final int VYPISAT_MENOVKY
 Alias pre VYPÍSAŤ_MENOVKY.
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_MENOVKU
static final int VYPÍSAŤ_MENOVKU
 Alias pre VYPÍSAŤ_MENOVKY.
Pozri tiež:
Hodnoty konštánt
VYPISAT_MENOVKU
static final int VYPISAT_MENOVKU
 Alias pre VYPÍSAŤ_MENOVKY.
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_RIADOK
static final int VYPÍSAŤ_RIADOK
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má vypísať riadok skriptu na vnútornú
 konzolu.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYPISAT_RIADOK
static final int VYPISAT_RIADOK
 Alias pre VYPÍSAŤ_RIADOK.
Pozri tiež:
Hodnoty konštánt
ČAKAŤ
static final int ČAKAŤ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má čakať pred vykonaním riadka skriptu.
 Ak je odpoveď na túto otázku true, tak táto správa
 vznikne opakovane po 350 ms, kým nebude odpoveď false.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
CAKAT
static final int CAKAT
 Alias pre ČAKAŤ.
Pozri tiež:
Hodnoty konštánt
PRERUŠIŤ
static final int PRERUŠIŤ
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má prerušiť vykonávanie skriptu.
 Ak je odpoveď true, tak sa vykonávanie skriptu ukončí.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
PRERUSIT
static final int PRERUSIT
 Alias pre PRERUŠIŤ.
Pozri tiež:
Hodnoty konštánt
ZABRÁNIŤ_VYKONANIU
static final int ZABRÁNIŤ_VYKONANIU
Konštanta režimu ladenia –
 režim sa pokúša zistiť, či má v poslednej chvíli zabrániť
 vykonaniu príkazu s konkrétnymi hodnotami parametrov. Táto otázka
 ladenia sa dá využiť aj na overenie toho, s akými hodnotami
 parametrov bude v skutočnosti metóda zavolaná.
 Ak je odpoveď true, tak sa príkaz nevykoná a stroj
 skriptu pokračuje tak, akoby metóda príkazu nebola nájdená (to
 znamená, že stroj ešte môže nájsť inú alternatívu na vykonanie
 podobného príkazu).
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
ZABRANIT_VYKONANIU
static final int ZABRANIT_VYKONANIU
 Alias pre ZABRÁNIŤ_VYKONANIU.
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_PRÍKAZ
static final int VYPÍSAŤ_PRÍKAZ
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vypísať ozvenu
 potvrdeného príkazového riadka na vnútornú konzolu.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYPISAT_PRIKAZ
static final int VYPISAT_PRIKAZ
 Alias pre VYPÍSAŤ_PRÍKAZ.
Pozri tiež:
Hodnoty konštánt
VYKONAŤ_PRÍKAZ
static final int VYKONAŤ_PRÍKAZ
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vykonať potvrdený
 príkazový riadok.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYKONAT_PRIKAZ
static final int VYKONAT_PRIKAZ
 Alias pre VYKONAŤ_PRÍKAZ.
Pozri tiež:
Hodnoty konštánt
UKONČENIE_SKRIPTU
static final int UKONČENIE_SKRIPTU
Konštanta režimu ladenia
 v interaktívnom
 režime – režim oznamuje, že ladenie bolo ukončené (bez chyby).
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
UKONCENIE_SKRIPTU
static final int UKONCENIE_SKRIPTU
 Alias pre UKONČENIE_SKRIPTU.
Pozri tiež:
Hodnoty konštánt
UKONČENIE_CHYBOU
static final int UKONČENIE_CHYBOU
Konštanta režimu ladenia
 v interaktívnom
 režime – režim oznamuje, že ladenie bolo ukončené chybou.
 V parametri riadok metódy
 ladenie
 je číslo riadka, na ktorom vznikla chyba a reťazec parametra
 príkaz obsahuje v tomto prípade jednoduchý text chybového
 hlásenia.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
UKONCENIE_CHYBOU
static final int UKONCENIE_CHYBOU
 Alias pre UKONČENIE_CHYBOU.
Pozri tiež:
Hodnoty konštánt
VYPÍSAŤ_SKRIPT
static final int VYPÍSAŤ_SKRIPT
Konštanta režimu ladenia
 v interaktívnom
 režime – režim sa pokúša overiť, či smie vypísať úplné znenie
 aktuálne vykonávaného skriptu na vnútornú konzolu.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
VYPISAT_SKRIPT
static final int VYPISAT_SKRIPT
 Alias pre VYPÍSAŤ_SKRIPT.
Pozri tiež:
Hodnoty konštánt
ČÍSELNÁ_PREMENNÁ
static final int ČÍSELNÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota číselnej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
CISELNA_PREMENNA
static final int CISELNA_PREMENNA
 Alias pre ČÍSELNÁ_PREMENNÁ.
Pozri tiež:
Hodnoty konštánt
FAREBNÁ_PREMENNÁ
static final int FAREBNÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota farebnej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
FAREBNA_PREMENNA
static final int FAREBNA_PREMENNA
 Alias pre FAREBNÁ_PREMENNÁ.
Pozri tiež:
Hodnoty konštánt
POLOHOVÁ_PREMENNÁ
static final int POLOHOVÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota polohovej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
POLOHOVA_PREMENNA
static final int POLOHOVA_PREMENNA
 Alias pre POLOHOVÁ_PREMENNÁ.
Pozri tiež:
Hodnoty konštánt
REŤAZCOVÁ_PREMENNÁ
static final int REŤAZCOVÁ_PREMENNÁ
Konštanta režimu ladenia –
 režim oznamuje, že hodnota reťazcovej premennej sa zmenila a pokúša
 sa zistiť, či má novú hodnotu vypísať.
Pozri tiež:
ObsluhaUdalostí.ladenie(int, String, int), 
Hodnoty konštánt
RETAZCOVA_PREMENNA
static final int RETAZCOVA_PREMENNA
 Alias pre REŤAZCOVÁ_PREMENNÁ.
Pozri tiež:
Hodnoty konštánt
CHYBA_VOLANIA_SKRIPTU
static final int CHYBA_VOLANIA_SKRIPTU
Toto je kód chyby rezervovaný na signalizovanie situácie, keď
 vykonávanie (volanie) vnorených skriptov zaznamenalo príliš mnoho
 vnorení, čo z bezpečnostných dôvodov nie je povolené.
 
 Táto chyba súvisí s metódou sveta volajSkript, ktorá môže byť použitá ako príkaz skriptu, čím vzniká
 možnosť uviaznutia v nekonečnom množstve vzájomných volaní skriptov
 (túto situáciu môže nechtiac spôsobiť pisateľ skriptov).
 
 
Pozri tiež:
Hodnoty konštánt
CHYBA_ČÍTANIA_SKRIPTU
static final int CHYBA_ČÍTANIA_SKRIPTU
Toto je kód chyby rezervovaný na signalizovanie situácie, keď
 sa vykonávanie skriptu ani nemohlo začať pretože skript mal byť
 prečítaný zo súboru (prípadne zdroja), pričom táto akcia
 zlyhala.
Pozri tiež:
Hodnoty konštánt
CHYBA_CITANIA_SKRIPTU
static final int CHYBA_CITANIA_SKRIPTU
 Alias pre CHYBA_ČÍTANIA_SKRIPTU.
Pozri tiež:
Hodnoty konštánt
ŽIADNA_CHYBA
static final int ŽIADNA_CHYBA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 nenastala žiadna chyba.
Pozri tiež:
Hodnoty konštánt
ZIADNA_CHYBA
static final int ZIADNA_CHYBA
 Alias pre ŽIADNA_CHYBA.
Pozri tiež:
Hodnoty konštánt
CHYBA_VYKONANIA_PRÍKAZU
static final int CHYBA_VYKONANIA_PRÍKAZU
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 nastala chyba počas vykonávania príkazu. Mohlo ísť napríklad
 o zadanie nesprávneho argumentu.
Pozri tiež:
Hodnoty konštánt
CHYBA_VYKONANIA_PRIKAZU
static final int CHYBA_VYKONANIA_PRIKAZU
 Alias pre CHYBA_VYKONANIA_PRÍKAZU.
Pozri tiež:
Hodnoty konštánt
CHYBA_DVOJITÁ_MENOVKA
static final int CHYBA_DVOJITÁ_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 v skripte sa vyskytla dvojnásobná definícia menovky. Táto chyba
 nastáva pri konštrukcii skriptu. Konštrukcia síce (vnútorne)
 pokračuje aj po jej vzniku, ale vykonávanie takéhoto skriptu by
 nebolo bezpečné, pretože skript by pri riadiacich príkazoch
 na, ak, dokedy (s prípadnou alternatívou
 inak pri posledných dvoch) nemusel správne identifikovať
 (a pravdepodobne ani neidentifikoval) tú menovku, ktorou mal
 autor skriptu v úmysle pokračovať, preto metódy produkujúce
 skripty takéto chybné inštancie „skartujú.“
Pozri tiež:
Hodnoty konštánt
CHYBA_DVOJITA_MENOVKA
static final int CHYBA_DVOJITA_MENOVKA
 Alias pre CHYBA_DVOJITÁ_MENOVKA.
Pozri tiež:
Hodnoty konštánt
CHYBA_CHÝBAJÚCA_MENOVKA
static final int CHYBA_CHÝBAJÚCA_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 za riadiacim príkazom na, ak, dokedy alebo
 za alternatívou inak) chýba menovka.
Pozri tiež:
Hodnoty konštánt
CHYBA_CHYBAJUCA_MENOVKA
static final int CHYBA_CHYBAJUCA_MENOVKA
 Alias pre CHYBA_CHÝBAJÚCA_MENOVKA.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNÁMA_MENOVKA
static final int CHYBA_NEZNÁMA_MENOVKA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 menovka za riadiacim príkazom na, ak, dokedy
 alebo za alternatívou inak je neznáma (nie je definovaná
 v rámci aktuálneho bloku skriptu).
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNAMA_MENOVKA
static final int CHYBA_NEZNAMA_MENOVKA
 Alias pre CHYBA_NEZNÁMA_MENOVKA.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNÁME_SLOVO
static final int CHYBA_NEZNÁME_SLOVO
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 za menovkou riadiaceho príkazu ak alebo dokedy
 sa vyskytlo neznáme slovo. Za prvou menovkou môže nasledovať ďalšia
 menovka a to buď bezprostredne, alebo za slovom určujúcim
 alternatívu – inak. Ostatné slová sú považované za
 neznáme.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNAME_SLOVO
static final int CHYBA_NEZNAME_SLOVO
 Alias pre CHYBA_NEZNÁME_SLOVO.
Pozri tiež:
Hodnoty konštánt
CHYBA_CHYBNÁ_ŠTRUKTÚRA
static final int CHYBA_CHYBNÁ_ŠTRUKTÚRA
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 pokus o korektné rozpoznanie riadiaceho príkazu obzor,
 ak, opakuj alebo dokedy zlyhal. Môže
 ísť o prípad, výskytu riadiaceho príkazu obzor bez bloku,
 o prípad, keď nie je definovaná riadiaca premenná príkazov
 opakovania (opakuj, dokedy), o prípad, keď riadiaci
 príkaz opakovania nenájde blok na opakovanie (a nemôže túto chybu
 nijako opraviť) alebo môže ísť o neznámu syntaktickú chybu.)
Pozri tiež:
Hodnoty konštánt
CHYBA_CHYBNA_STRUKTURA
static final int CHYBA_CHYBNA_STRUKTURA
 Alias pre CHYBA_CHYBNÁ_ŠTRUKTÚRA.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNÁME_MENO
static final int CHYBA_NEZNÁME_MENO
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 naposledy aktivovaná
 inštancia už alebo ešte nejestvuje. (Zadané meno inštancie je
 neznáme.)
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNAME_MENO
static final int CHYBA_NEZNAME_MENO
 Alias pre CHYBA_NEZNÁME_MENO.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNÁMY_PRÍKAZ
static final int CHYBA_NEZNÁMY_PRÍKAZ
Kód poslednej chyby
 interaktívneho režimu
 alebo vykonávania skriptu,
 ktorý signalizuje, že
 zadaný príkaz nebol rozpoznaný. Najčastejšími príčinami sú
 syntaktické chyby alebo neaktivovanie správnej (prípadne žiadnej)
 inštancie, to jest takej, ktorá skutočne obsahuje definíciu metódy
 zodpovedajúcej príkazu skriptu.
Pozri tiež:
Hodnoty konštánt
CHYBA_NEZNAMY_PRIKAZ
static final int CHYBA_NEZNAMY_PRIKAZ
 Alias pre CHYBA_NEZNÁMY_PRÍKAZ.
Pozri tiež:
Hodnoty konštánt
VERTIKÁLNA
static final int VERTIKÁLNA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
VERTIKALNA
static final int VERTIKALNA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
ZVISLÁ
static final int ZVISLÁ
Konštanta slúžiaca na určenie zvislej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
ZVISLA
static final int ZVISLA
Konštanta slúžiaca na určenie zvislej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
HORIZONTÁLNA
static final int HORIZONTÁLNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
HORIZONTALNA
static final int HORIZONTALNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
VODOROVNÁ
static final int VODOROVNÁ
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
VODOROVNA
static final int VODOROVNA
Konštanta slúžiaca na určenie vodorovnej orientácie lišty.
Pozri tiež:
Hodnoty konštánt
riadok
static final char riadok
Znaková konštanta nového riadka.
 (Použiteľné napríklad pri metóde
 vypíš.
 Tiež má svoj význam pri používaní metódy
 dialóg
 a jej klonov.)
Pozri tiež:
Hodnoty konštánt
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda KontextováPoložka
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.AbstractButton
javax.swing.JMenuItem
KontextováPoložka
Všetky implementované rozhrania:
ImageObserver, ItemSelectable, MenuContainer, Serializable, Accessible, MenuElement, SwingConstants
Známe priame odvodené triedy:
KontextovaPolozka
public class KontextováPoložka
extends JMenuItem
Trieda KontextováPonuka spolu s triedou
 KontextováPoložka umožňujú používanie kontextových ponúk.
 Voľba položky kontextovej ponuky spôsobí vznik udalosti voľbaKontextovejPoložky.
 V uvedenej obsluhe udalosti môžeme zistiť, ktorá položka bola zvolená
 metódou ÚdajeUdalostí.kontextováPoložka(). Komplexný príklad nájdete v opise
 triedy KontextováPonuka.
Pozri tiež:
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JMenuItem
JMenuItem.AccessibleJMenuItem
Vnorené triedy/rozhrania odvodené od triedy javax.swing.AbstractButton
AbstractButton.AccessibleAbstractButton, AbstractButton.ButtonChangeListener
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JComponent
JComponent.AccessibleJComponent
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty zdedené z triedy javax.swing.AbstractButton
actionListener, BORDER_PAINTED_CHANGED_PROPERTY, CONTENT_AREA_FILLED_CHANGED_PROPERTY, DISABLED_ICON_CHANGED_PROPERTY, DISABLED_SELECTED_ICON_CHANGED_PROPERTY, FOCUS_PAINTED_CHANGED_PROPERTY, HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY, HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY, changeEvent, changeListener, ICON_CHANGED_PROPERTY, itemListener, MARGIN_CHANGED_PROPERTY, MNEMONIC_CHANGED_PROPERTY, model, MODEL_CHANGED_PROPERTY, PRESSED_ICON_CHANGED_PROPERTY, ROLLOVER_ENABLED_CHANGED_PROPERTY, ROLLOVER_ICON_CHANGED_PROPERTY, ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY, SELECTED_ICON_CHANGED_PROPERTY, TEXT_CHANGED_PROPERTY, VERTICAL_ALIGNMENT_CHANGED_PROPERTY, VERTICAL_TEXT_POSITION_CHANGED_PROPERTY
Atribúty zdedené z triedy javax.swing.JComponent
listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
Atribúty zdedené z triedy java.awt.Component
accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania javax.swing.SwingConstants
BOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
KontextováPoložka(String text)
Vytvorí novú kontextovú položku so zadaným textom.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
aktivna()
 Alias pre aktívna.
boolean
aktívna()
Overí, či je položka aktívna.
boolean
aktivovana()
 Alias pre aktivovaná.
boolean
aktivovaná()
Overí, či bola táto kontextová položka naposledy aktivovaná
 (zvolená).
void
aktivuj()
Aktivuje položku.
void
deaktivuj()
Deaktivuje položku.
Farba
farbaPozadia()
 Číta farbu pozadia položky.
void
farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia položky
 podľa zadanej farebnej inštancie.
void
farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia položky podľa zadaného objektu.
Farba
farbaPozadia(int r,
            int g,
            int b)
Nastaví farbu pozadia položky podľa zadaných farebných zložiek.
Farba
farbaPozadia(int r,
            int g,
            int b,
            int a)
Nastaví farbu a (ne)priehľadnosť pozadia položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
Farba
farbaTextu()
 Zistí aktuálnu farbu textu položky.
void
farbaTextu(Color nováFarba)
 Nastav farbu textu položky.
void
farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu položky podľa zadaného objektu.
Farba
farbaTextu(int r,
          int g,
          int b)
Nastaví farbu textu položky podľa zadaných farebných zložiek.
Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastaví farbu a (ne)priehľadnosť textu položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
Obrázok
ikona()
 Vráti základnú ikonu položky alebo
 null ak položka nemá priradenú ikonu, ktorá bola
 vytvorená z inštancie typu Obrázok.
void
ikona(Image obrázok)
 Nastaví alebo odstráni ikonu položky určenú
 obrázkom.
void
ikona(String súbor)
Nastaví alebo odstráni ikonu položky uloženú v súbore s obrázkom.
int
medzeraMedziIkonouATextom()
 Zistí aktuálu veľkosť medzery medzi ikonou
 a textom tejto položky.
void
medzeraMedziIkonouATextom(int medzera)
 Ak má toto položka nastavenú ikonu aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
Obrazok
obrazok()
 Alias pre ikona.
void
obrazok(Image obrázok)
 Alias pre ikona.
void
obrazok(String súbor)
 Alias pre ikona.
void
odznac()
 Alias pre odznač.
void
odznač()
Zruší označenie položky.
void
oznac()
 Alias pre označ.
boolean
oznacena()
 Alias pre označená.
void
označ()
Označí položku.
boolean
označená()
Overí, či je položka označená.
Pismo
pismo()
 Alias pre písmo.
Písmo
písmo()
 Číta aktuálny typ písma textu položky.
void
pismo(Font novéPísmo)
 Alias pre písmo.
void
písmo(Font novéPísmo)
 Nastaví nový typ písma textu položky.
Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
Písmo
písmo(String názov,
     double veľkosť)
Nastaví nový typ písma textu položky.
void
prikaz(String príkaz)
 Alias pre príkaz.
void
príkaz(String príkaz)
Prepojí túto položku kontextovej ponuky s príkazom priradeným ku
 klávesovej skratke.
String[]
riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tejto položke priradený
 v textovej forme.
Skript
skript()
Vráti skript priradený k tejto položke alebo null,
 ak k položke nebol priradený žiadny skript.
void
skript(Skript skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skript(String skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skript(String[] riadky)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skry()
Skryje položku.
String
text()
 Prečíta aktuálny text položky.
void
text(String text)
 Nastaví nový text položky.
boolean
viditelna()
 Alias pre viditeľná.
boolean
viditeľná()
Zistí, či je položka viditeľná (zobrazená) alebo nie.
void
zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
void
zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia položky.
void
zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
void
zdedenáFarbaTextu()
Nastaví zdedenú farbu textu položky.
void
zobraz()
Zobrazí položku.
boolean
zobrazena()
 Alias pre zobrazená.
boolean
zobrazená()
Zistí, či je položka zobrazená (viditeľná) alebo nie.
void
zrusOznacenie()
 Alias pre zrušOznačenie.
void
zrušOznačenie()
Zruší označenie položky.
boolean
zvolena()
 Alias pre aktivovaná.
boolean
zvolená()
 Alias pre aktivovaná.
Metódy zdedené z triedy javax.swing.JMenuItem
actionPropertyChanged, addMenuDragMouseListener, addMenuKeyListener, configurePropertiesFromAction, fireMenuDragMouseDragged, fireMenuDragMouseEntered, fireMenuDragMouseExited, fireMenuDragMouseReleased, fireMenuKeyPressed, fireMenuKeyReleased, fireMenuKeyTyped, getAccelerator, getAccessibleContext, getComponent, getMenuDragMouseListeners, getMenuKeyListeners, getSubElements, getUIClassID, init, isArmed, menuSelectionChanged, paramString, processKeyEvent, processMenuDragMouseEvent, processMenuKeyEvent, processMouseEvent, removeMenuDragMouseListener, removeMenuKeyListener, setAccelerator, setArmed, setEnabled, setModel, setUI, updateUI
Metódy zdedené z triedy javax.swing.AbstractButton
addActionListener, addChangeListener, addImpl, addItemListener, createActionListener, createActionPropertyChangeListener, createChangeListener, createItemListener, doClick, doClick, fireActionPerformed, fireItemStateChanged, fireStateChanged, getAction, getActionCommand, getActionListeners, getDisabledIcon, getDisabledSelectedIcon, getDisplayedMnemonicIndex, getHideActionText, getHorizontalAlignment, getHorizontalTextPosition, getChangeListeners, getIcon, getIconTextGap, getItemListeners, getLabel, getMargin, getMnemonic, getModel, getMultiClickThreshhold, getPressedIcon, getRolloverIcon, getRolloverSelectedIcon, getSelectedIcon, getSelectedObjects, getText, getUI, getVerticalAlignment, getVerticalTextPosition, checkHorizontalKey, checkVerticalKey, imageUpdate, isBorderPainted, isContentAreaFilled, isFocusPainted, isRolloverEnabled, isSelected, paintBorder, removeActionListener, removeChangeListener, removeItemListener, removeNotify, setAction, setActionCommand, setBorderPainted, setContentAreaFilled, setDisabledIcon, setDisabledSelectedIcon, setDisplayedMnemonicIndex, setFocusPainted, setHideActionText, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabel, setLayout, setMargin, setMnemonic, setMnemonic, setMultiClickThreshhold, setPressedIcon, setRolloverEnabled, setRolloverIcon, setRolloverSelectedIcon, setSelected, setSelectedIcon, setText, setUI, setVerticalAlignment, setVerticalTextPosition
Metódy zdedené z triedy javax.swing.JComponent
addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getĎalšieFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintComponent, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printComponent, printChildren, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setĎalšieFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, checkImage, checkImage, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
KontextováPoložka
public KontextováPoložka(String text)
Vytvorí novú kontextovú položku so zadaným textom. Použite metódu
 pridajPoložku
 na jej pridanie do konkrétnej ponuky…
Parametre:
text – text položky ponuky
Podrobnosti metód
aktivovaná
public boolean aktivovaná()
Overí, či bola táto kontextová položka naposledy aktivovaná
 (zvolená). Metóda je použiteľná v reakcii voľbaKontextovejPoložky.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true ak bola pri poslednom vyvolaní kontextovej
     ponuky aktivovaná práve táto položka, v opačnom prípade false
aktivovana
public boolean aktivovana()
 Alias pre aktivovaná.
zvolená
public boolean zvolená()
 Alias pre aktivovaná.
zvolena
public boolean zvolena()
 Alias pre aktivovaná.
aktívna
public boolean aktívna()
Overí, či je položka aktívna. Aktívna položka znamená, že je
 použiteľná používateľom. S deaktivovanými položkami používateľ
 nemôže manipulovať.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true – je aktívna;
     false – nie je aktívna
Pozri tiež:
aktivuj(), 
deaktivuj()
aktivna
public boolean aktivna()
 Alias pre aktívna.
aktivuj
public void aktivuj()
Aktivuje položku. Predvolene je položka aktívna. Ak ju deaktivujeme (pozri nižšie), tak po vykonaní tohto
 príkazu položky (aktivuj), bude opäť použiteľná a bude
 reagovať na klikanie myšou aj voľbu klávesnicou.
Pozri tiež:
aktívna(), 
aktivuj(), 
deaktivuj()
deaktivuj
public void deaktivuj()
Deaktivuje položku. Položka prestane byť použiteľná, prestane
 reagovať na myš a klávesnicu.
Pozri tiež:
aktívna(), 
aktivuj(), 
deaktivuj()
označená
public boolean označená()
Overí, či je položka označená. Označená položka zmení svoj vzhľad,
 spôsob zmeny je závislý od operačného systému a interpretácia tohto
 stavu závisí od programátora…
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true – je označená;
     false – nie je označená
Pozri tiež:
označ(), 
odznač(), 
zrušOznačenie()
oznacena
public boolean oznacena()
 Alias pre označená.
označ
public void označ()
Označí položku. (Pre viac informácií pozri opis metódy označená.)
Pozri tiež:
aktívna(), 
odznač(), 
zrušOznačenie()
oznac
public void oznac()
 Alias pre označ.
odznač
public void odznač()
Zruší označenie položky. (Pre viac informácií pozri opis metódy
 označená.)
Pozri tiež:
aktívna(), 
označ(), 
zrušOznačenie()
odznac
public void odznac()
 Alias pre odznač.
zrušOznačenie
public void zrušOznačenie()
Zruší označenie položky. (Pre viac informácií pozri opis metódy
 označená.)
Pozri tiež:
aktívna(), 
označ(), 
odznač()
zrusOznacenie
public void zrusOznacenie()
 Alias pre zrušOznačenie.
viditeľná
public boolean viditeľná()
Zistí, či je položka viditeľná (zobrazená) alebo nie. Po
 vytvorení je položka predvolene viditeľná, môžeme ju skrývať
 a zobrazovať metódami skry a zobraz. (Položky ponúk však namiesto skrývania a zobrazovania
 odporúčame aktivovať alebo deaktivovať.) Alternatívou tejto metódy je metóda
 zobrazená.
Pozri tiež:
zobrazená(), 
zobraz(), 
skry()
viditelna
public boolean viditelna()
 Alias pre viditeľná.
zobrazená
public boolean zobrazená()
Zistí, či je položka zobrazená (viditeľná) alebo nie. Po
 vytvorení je položka predvolene viditeľná, môžeme ju skrývať
 a zobrazovať metódami skry a zobraz. (Položky ponúk však namiesto skrývania a zobrazovania
 odporúčame aktivovať alebo deaktivovať.) Alternatívou tejto metódy je metóda
 viditeľná.
Pozri tiež:
viditeľná(), 
zobraz(), 
skry()
zobrazena
public boolean zobrazena()
 Alias pre zobrazená.
zobraz
public void zobraz()
Zobrazí položku. (Pre viac informácií pozri opis metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
skry()
skry
public void skry()
Skryje položku. (Pre viac informácií pozri opis metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
zobraz()
farbaTextu
public Farba farbaTextu()
 Zistí aktuálnu farbu textu položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba textu položky (objekt typu Farba)
farbaTextu
public void farbaTextu(Color nováFarba)
 Nastav farbu textu položky. Nastaví farbu
 a priehľadnosť textu položky podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou textu
     položky; jestvuje paleta predvolených farieb (pozri napr.:
     biela, červená, čierna…)
farbaTextu
public void farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu položky podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu textu položky
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b)
Nastaví farbu textu položky podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b,
                        int a)
Nastaví farbu a (ne)priehľadnosť textu položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
zdedenáFarbaTextu
public void zdedenáFarbaTextu()
Nastaví zdedenú farbu textu položky. Farba textu položky bude
 zdedená od nadradeného komponentu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaTextu
public void zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
farbaPozadia
public Farba farbaPozadia()
 Číta farbu pozadia položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba pozadia položky (objekt typu Farba)
farbaPozadia
public void farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia položky
 podľa zadanej farebnej inštancie.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaPozadia
public void farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia položky podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu pozadia
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b)
Nastaví farbu pozadia položky podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b,
                          int a)
Nastaví farbu a (ne)priehľadnosť pozadia položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
zdedenáFarbaPozadia
public void zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaPozadia
public void zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
písmo
public Písmo písmo()
 Číta aktuálny typ písma textu položky.
Návratová hodnota:
objekt typu Písmo – aktuálne písmo
Pozri tiež:
písmo(Font), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo()
 Alias pre písmo.
písmo
public void písmo(Font novéPísmo)
 Nastaví nový typ písma textu položky.
Parametre:
novéPísmo – objekt typu Písmo alebo Font
     určujúci nový typ písma
Pozri tiež:
písmo(), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public Písmo písmo(String názov,
                   double veľkosť)
Nastaví nový typ písma textu položky. (Nová inštancia triedy
 Písmo je touto metódou vrátená na prípadné ďalšie
 použitie.)
Parametre:
názov – názov písma; môže byť všeobecný názov logického
     písma (Dialog, DialogInput, Monospaced, Serif, SansSerif…)
     alebo názov konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená
     na typ float)
Návratová hodnota:
nový objekt typu Písmo
Pozri tiež:
písmo(), 
písmo(Font), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo(String názov,
                   double veľkosť)
 Alias pre písmo.
text
public String text()
 Prečíta aktuálny text položky.
Návratová hodnota:
aktuálny text položky
Pozri tiež:
text(String)
text
public void text(String text)
 Nastaví nový text položky.
Parametre:
text – nový text položky
Pozri tiež:
text()
ikona
public void ikona(String súbor)
Nastaví alebo odstráni ikonu položky uloženú v súbore s obrázkom.
 Táto metóda nastavuje základnú ikonu položky. (Bez nej nemá význam
 priraďovať položke ostatné druhy ikon…)
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
 
 Poznámka: Z dôvodu konzistencie je k tejto
 metóde definovaný alias obrazok(súbor)
 (s názvom bez diakritiky), ktorý má korešpondovať s aliasom metódy
 ikona() (určeným na čítanie ikony).
Parametre:
súbor – názov súboru s obrázkom, ktorý bude použitý na
     vytvorenie ikony položky alebo (String)null
     ak chceme ikonu položky odstrániť
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
ikona(Image), 
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(String súbor)
 Alias pre ikona.
ikona
public void ikona(Image obrázok)
 Nastaví alebo odstráni ikonu položky určenú
 obrázkom. Táto metóda nastavuje základnú ikonu položky. (Bez nej
 nemá význam priraďovať položke ostatné druhy ikon…)
 
 Poznámka: Z dôvodu konzistencie je k tejto
 metóde definovaný alias obrazok(obrázok)
 (s názvom bez diakritiky), ktorý má korešpondovať s aliasom metódy
 ikona().
Parametre:
obrázok – obrázok určujúci novú ikonu položky alebo
     (Image)null ak chceme ikonu položky
     odstrániť
Pozri tiež:
ikona(String)
obrazok
public void obrazok(Image obrázok)
 Alias pre ikona.
ikona
public Obrázok ikona()
 Vráti základnú ikonu položky alebo
 null ak položka nemá priradenú ikonu, ktorá bola
 vytvorená z inštancie typu Obrázok.
 
 Poznámka: Názov tejto metódy neobsahuje
 žiadnu diakritiku, preto nemohol byť definovaný prislúchajúci alias,
 ktorý by vracal objekt typu Obrazok (t. j. triedy
 aliasu, ktorej názov tiež neobsahuje diakritiku). Z toho dôvodu je
 alias nahradený metódou obrazok (bez diakritiky).
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
ikona(String), 
ikona(Image)
obrazok
public Obrazok obrazok()
 Alias pre ikona.
medzeraMedziIkonouATextom
public int medzeraMedziIkonouATextom()
 Zistí aktuálu veľkosť medzery medzi ikonou
 a textom tejto položky.
 
 Poznámka: Táto metóda zrkadlí definíciu
 z triedy AbstractButton (čiže položka je
 z pohľadu objektového modelu chápaná ako tlačidlo). V niektorých
 definíciách vzhľadu (L&F) však nemusia byť položky chápané ako
 typické tlačidlá, ich vzhľad sa môže odlišovať a pokus o prácu
 s medzerou medzi ikonou a textom nemusí mať očakávaný efekt.
Návratová hodnota:
celé číslo vyjadrujúce počet pixelov medzi ikonou
     a textom tejto položky
medzeraMedziIkonouATextom
public void medzeraMedziIkonouATextom(int medzera)
 Ak má toto položka nastavenú ikonu aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
 Predvolená hodnota je štyri pixely.
 
 Poznámka: Táto metóda zrkadlí definíciu
 z triedy AbstractButton (čiže položka je
 z pohľadu objektového modelu chápaná ako tlačidlo). V niektorých
 definíciách vzhľadu (L&F) však nemusia byť položky chápané ako
 typické tlačidlá, ich vzhľad sa môže odlišovať a pokus o prácu
 s medzerou medzi ikonou a textom nemusí mať očakávaný efekt.
Parametre:
medzera – celé číslo určujúce počet pixelov medzi ikonou
     a textom
príkaz
public void príkaz(String príkaz)
Prepojí túto položku kontextovej ponuky s príkazom priradeným ku
 klávesovej skratke.
 Odteraz odpoveďou na zvolenie tejto položky nebude spustenie reakcie
 voľbaKontextovejPoložky, ale reakcie
 klávesováSkratka.
 Ak chcete priradenie príkazu k položke zrušiť, zadajte hodnotu
 null.
 
 Upozornenie: Predtým, než
 odoberiete klávesovú
 skratku zo sveta, zrušte aj priadenie príkazu k tejto položke
 (zadaním hodnoty null), inak by mohlo vzniknúť neočakávané
 správanie programu.
 
 Poznámka: Spustenie tejto metódy spôsobí
 aktualizáciu údajov vzhľadu súvisiacich s klávesovou skratkou
 zadaného príkazu podľa vzhľadu tejto položky. Každé ďalšie spustenie
 tejto metódy pre niektorú položku ponuky alebo kontextovej ponuky
 spôsobí novú aktualizáciu údajov vzhľadu a spätne aktualizáciu
 vzhľadu všetkých položiek, ktoré boli predtým s týmto príkazom
 previazané. Preto je vhodné vyvarovať sa previazaniu konkrétneho
 príkazu s viacerými položkami ponuky alebo kontextovej ponuky (ak
 to nie je vyslovene vyžadované).
Parametre:
príkaz – príkaz na priradenie alebo null
Pozri tiež:
Svet.pridajKlávesovúSkratku(String, int), 
Svet.pridajKlávesovúSkratku(String, int, int)
prikaz
public void prikaz(String príkaz)
 Alias pre príkaz.
skript
public Skript skript()
Vráti skript priradený k tejto položke alebo null,
 ak k položke nebol priradený žiadny skript.
Návratová hodnota:
skript priradený k tejto položke alebo null
Pozri tiež:
riadkySkriptu(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
riadkySkriptu
public String[] riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tejto položke priradený
 v textovej forme. V opačnom prípade vráti null, pričom
 položka môže mať definovaný skript – pozri aj metódu skript.
Návratová hodnota:
skript priradený k tejto položke alebo null
Pozri tiež:
skript(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String[] riadky)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
riadky – skript vo forme poľa reťazcov (riadkov skriptu)
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
skript – skript vo forme reťazca oddeľovaného znakmi
     nového riadka
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(Skript skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
skript – inštanicia triedy Skript
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(String), 
Svet.vykonajSkript(String[]), 
Skript
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":9,"i13":10,"i14":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda KontextováPonuka
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.JPopupMenu
KontextováPonuka
Všetky implementované rozhrania:
ImageObserver, MenuContainer, Serializable, Accessible, MenuElement
Známe priame odvodené triedy:
KontextovaPonuka
public class KontextováPonuka
extends JPopupMenu
Trieda KontextováPonuka spolu s triedou KontextováPoložka umožňujú používanie kontextových
 ponúk. Voľba položky kontextovej ponuky spôsobí vznik udalosti voľbaKontextovejPoložky.
 V uvedenej obsluhe udalosti môžeme zistiť, ktorá položka bola zvolená
 metódou ÚdajeUdalostí.kontextováPoložka().
 
 
// Vytvoríme ponuku:
final KontextováPonuka mojaKontextováPonuka = new KontextováPonuka();
// Vytvoríme všetky položky, niektoré priamo pridávajúc do ponuky:
final KontextováPoložka novýObjekt =
    mojaKontextováPonuka.pridajPoložku("Nový objekt");
final KontextováPoložka preusporiadať =
    mojaKontextováPonuka.pridajPoložku("Preusporiadať");
final KontextováPoložka ďalšiaAkcia1 =
    new KontextováPoložka("Ďalšia akcia 1");
final KontextováPoložka ďalšiaAkcia2 =
    new KontextováPoložka("Ďalšia akcia 2");
final KontextováPoložka ďalšiaAkcia3 =
    new KontextováPoložka("Ďalšia akcia 3");
// Pridáme oddeľovač a vnorenú ponuku:
mojaKontextováPonuka.pridajOddeľovač();
mojaKontextováPonuka.pridajPonuku("Ďalšie akcie",
    ďalšiaAkcia1, ďalšiaAkcia2, null, ďalšiaAkcia3);
// Definujeme obsluhu udalostí:
new ObsluhaUdalostí()
{
    @Override public void klik()
    {
        // Kontextová ponuka sa zobrazí po stlačení pravého tlačidla:
        if (ÚdajeUdalostí.tlačidloMyši(PRAVÉ))
            mojaKontextováPonuka.zobraz();
    }
    @Override public void voľbaKontextovejPoložky()
    {
        // Zistíme, ktorá kontextová položka bola zvolená:
        KontextováPoložka položka = ÚdajeUdalostí.kontextováPoložka();
        // Na základe voľby vykonáme akciu:
        // …
        if (novýObjekt == položka)
        {
            Svet.správa("Zvolená položka „Nový objekt.“");
        }
        else if (preusporiadať == položka)
        {
            Svet.správa("Zvolená položka „Preusporiadať.“");
        }
        else if (ďalšiaAkcia1 == položka)
        {
            Svet.správa("Zvolená položka „Ďalšia akcia 1.“");
        }
        else if (ďalšiaAkcia2 == položka)
        {
            Svet.správa("Zvolená položka „Ďalšia akcia 2.“");
        }
        else if (ďalšiaAkcia3 == položka)
        {
            Svet.správa("Zvolená položka „Ďalšia akcia 3.“");
        }
    }
};
 
 Výsledok:
 
 
 
  
 
 Ukážka kontextovej ponuky vytvorenej
 príkladoma zobrazenej v OS Windows.
 Ukážka kontextovej ponuky vytvorenej
 príkladoma zobrazenej v macOS (predtým OS X
 a Mac OS).
Pozri tiež:
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JPopupMenu
JPopupMenu.AccessibleJPopupMenu, JPopupMenu.Separator
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JComponent
JComponent.AccessibleJComponent
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty zdedené z triedy javax.swing.JComponent
listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
Atribúty zdedené z triedy java.awt.Component
accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
KontextováPonuka()
Vytvorí novú kontextovú ponuku (bez titulného popisu, ktorý
 nebude možné pridať ani dodatočne).
KontextováPonuka(String popis)
Vytvorí kontextovú ponuku s titulným popisom.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
JMenuItem
add(String text)
Vytvorí novú položku ponuky so zadaným textom a pripojí ju na
 koniec ponuky.
String
getLabel()
 Vráti popis kontextovej ponuky.
String
popis()
 Vráti popis kontextovej ponuky.
void
popis(String text)
 Nastaví text popisu ponuky.
void
pridajOddelovac()
 Alias pre pridajOddeľovač.
void
pridajOddeľovač()
Pridá nový oddeľovač položiek na koniec ponuky.
JMenuItem
pridajPolozku(JMenuItem položka)
 Alias pre pridajPoložku.
KontextováPoložka
pridajPolozku(String text)
 Alias pre pridajPoložku.
JMenuItem
pridajPoložku(JMenuItem položka)
Pripojí na koniec ponuky novú kontextovú položku, ktorej
 vytvorenie musí zabezpečiť programátor.
KontextováPoložka
pridajPoložku(String text)
Vytvorí novú položku ponuky so zadaným textom a pripojí ju na
 koniec ponuky.
JMenuItem
pridajPonuku(String text,
            JMenuItem... položky)
Vytvorí novú vnorenú ponuku zo zadaných položiek a pripojí ju na
 koniec aktuálnej ponuky.
void
setLabel(String text)
 Nastaví text popisu ponuky.
static JMenu
vytvorPonuku(String text,
            JMenuItem... položky)
Vytvorí novú ponuku zo zadaných položiek.
void
zobraz()
Zobrazí kontextovú ponuku na poslednej zaznamenanej pozícii myši.
void
zobraz(double x,
      double y)
Zobrazí kontextovú ponuku nad plátnom na zadanej pozícii.
Metódy zdedené z triedy javax.swing.JPopupMenu
add, add, addMenuKeyListener, addPopupMenuListener, addSeparator, createActionComponent, createActionChangeListener, firePopupMenuCanceled, firePopupMenuWillBecomeInvisible, firePopupMenuWillBecomeVisible, getAccessibleContext, getComponent, getComponentAtIndex, getComponentIndex, getDefaultLightWeightPopupEnabled, getInvoker, getMargin, getMenuKeyListeners, getPopupMenuListeners, getSelectionModel, getSubElements, getUI, getUIClassID, insert, insert, isBorderPainted, isLightWeightPopupEnabled, isPopupTrigger, isVisible, menuSelectionChanged, pack, paintBorder, paramString, processFocusEvent, processKeyEvent, processKeyEvent, processMouseEvent, remove, removeMenuKeyListener, removePopupMenuListener, setBorderPainted, setDefaultLightWeightPopupEnabled, setInvoker, setLightWeightPopupEnabled, setLocation, setPopupSize, setPopupSize, setSelected, setSelectionModel, setUI, setVisible, show, updateUI
Metódy zdedené z triedy javax.swing.JComponent
addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getĎalšieFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintComponent, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printComponent, printChildren, processComponentKeyEvent, processKeyBinding, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeNotify, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setĎalšieFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, unregisterKeyboardAction, update
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, checkImage, checkImage, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
KontextováPonuka
public KontextováPonuka()
Vytvorí novú kontextovú ponuku (bez titulného popisu, ktorý
 nebude možné pridať ani dodatočne).
KontextováPonuka
public KontextováPonuka(String popis)
Vytvorí kontextovú ponuku s titulným popisom. text nesmie
 byť null a môže byť dodatočne upravovaný metódou
 popis(String).
Parametre:
popis – text popisu ponuky; nesmie byť null
Podrobnosti metód
pridajPoložku
public JMenuItem pridajPoložku(JMenuItem položka)
Pripojí na koniec ponuky novú kontextovú položku, ktorej
 vytvorenie musí zabezpečiť programátor.
Parametre:
položka – nová kontextová položka (môže byť aj typu
     KontextováPoložka), ktorú treba
     pridať na koniec ponuky
Návratová hodnota:
pridaná kontextová položka
Pozri tiež:
pridajPoložku(String), 
pridajOddeľovač(), 
pridajPonuku(String, JMenuItem[]), 
vytvorPonuku(String, JMenuItem[])
pridajPolozku
public JMenuItem pridajPolozku(JMenuItem položka)
 Alias pre pridajPoložku.
pridajPoložku
public KontextováPoložka pridajPoložku(String text)
Vytvorí novú položku ponuky so zadaným textom a pripojí ju na
 koniec ponuky.
Parametre:
text – text novej kontextovej položky
Návratová hodnota:
nová kontextová položka
Pozri tiež:
pridajPoložku(JMenuItem), 
pridajOddeľovač(), 
pridajPonuku(String, JMenuItem[]), 
vytvorPonuku(String, JMenuItem[])
pridajPolozku
public KontextováPoložka pridajPolozku(String text)
 Alias pre pridajPoložku.
pridajOddeľovač
public void pridajOddeľovač()
Pridá nový oddeľovač položiek na koniec ponuky.
Pozri tiež:
pridajPoložku(JMenuItem), 
pridajPoložku(String), 
pridajPonuku(String, JMenuItem[]), 
vytvorPonuku(String, JMenuItem[])
pridajOddelovac
public void pridajOddelovac()
 Alias pre pridajOddeľovač.
pridajPonuku
public JMenuItem pridajPonuku(String text,
                              JMenuItem... položky)
Vytvorí novú vnorenú ponuku zo zadaných položiek a pripojí ju na
 koniec aktuálnej ponuky. Ak je niektorá zo zadaných položiek
 null, je do ponuky vložený oddeľovač.
Parametre:
text – text položky novej vnorenej ponuky
položky – zoznam položiek
Návratová hodnota:
vytvorená (a pridaná) ponuka
Pozri tiež:
pridajPoložku(JMenuItem), 
pridajOddeľovač(), 
vytvorPonuku(String, JMenuItem[])
vytvorPonuku
public static JMenu vytvorPonuku(String text,
                                 JMenuItem... položky)
Vytvorí novú ponuku zo zadaných položiek. Využiteľné na vytváranie
 kaskádových ponúk. Ak je niektorá zo zadaných položiek null, tak je do ponuky vložený oddeľovač.
Parametre:
text – text položky novej vnorenej ponuky
položky – zoznam položiek
Návratová hodnota:
vytvorená ponuka
Pozri tiež:
pridajPoložku(JMenuItem), 
pridajOddeľovač(), 
pridajPonuku(String, JMenuItem[])
popis
public void popis(String text)
 Nastaví text popisu ponuky.
 Má zmysel len v prípade, že ponuka bola vytvorená konštruktorom:
 KontextováPonuka(popis). text nesmie byť null.
 
 (Pozri aj:
 JPopupMenu.setLabel(String).)
Parametre:
text – text popisu ponuky; nesmie byť null
popis
public String popis()
 Vráti popis kontextovej ponuky.
 Má zmysel len v prípade, že ponuka bola vytvorená konštruktorom:
 KontextováPonuka(popis).
Návratová hodnota:
text popisu ponuky alebo null ak ponuka nemôže
     mať popis
zobraz
public void zobraz()
Zobrazí kontextovú ponuku na poslednej zaznamenanej pozícii myši.
zobraz
public void zobraz(double x,
                   double y)
Zobrazí kontextovú ponuku nad plátnom na zadanej pozícii.
Parametre:
x – x-ová súradnica polohy na zobrazenie ponuky
y – y-ová súradnica polohy na zobrazenie ponuky
add
public JMenuItem add(String text)
Vytvorí novú položku ponuky so zadaným textom a pripojí ju na
 koniec ponuky.
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JPopupMenu.add(String). 
 
 
Prekrývanie:
táto metóda prekrýva originálnu metódu add v triede JPopupMenu
Parametre:
text – text novej kontextovej položky
Návratová hodnota:
nová kontextová položka; aj keď je návratová hodnota
     typu JMenuItem, vrátený objekt je typu KontextováPoložka, t. j. výsledok môže byť
     bez rizika pretypovaný
Pozri tiež:
pridajPoložku(String)
setLabel
public void setLabel(String text)
 Nastaví text popisu ponuky. Má zmysel len
 v prípade, že ponuka bola vytvorená konštruktorom: KontextováPonuka(popis).
 text nesmie byť null.
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JPopupMenu.setLabel(String). 
Prekrývanie:
táto metóda prekrýva originálnu metódu setLabel v triede JPopupMenu
Parametre:
text – text popisu ponuky; nesmie byť null
Pozri tiež:
popis(String)
getLabel
public String getLabel()
 Vráti popis kontextovej ponuky. Má zmysel
 len v prípade, že ponuka bola vytvorená konštruktorom: KontextováPonuka(popis).
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JPopupMenu.getLabel(). 
Prekrývanie:
táto metóda prekrýva originálnu metódu getLabel v triede JPopupMenu
Návratová hodnota:
text popisu ponuky alebo null ak ponuka nemôže
     mať popis
Pozri tiež:
popis()
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie KreslenieTvaru
public interface KreslenieTvaru
Rozhranie používané na kreslenie (vlastných) tvarov robota, začiatočných a koncových značiek spojníc
 robotov, definíciu kreslenia a export prvkov roja do
 formátu SVG, prípadne na ďalšie zákaznícky definované účely.
 
 Implementácia tohto rozhrania je vstupom prislúchajúcich metód,
 napríklad metódy definovania vlastného tvaru robota: GRobot.vlastnýTvar(tvar); metód
 na definovanie tvarov značiek spojníc: Spojnica.definujZnačkuZačiatku(kreslenie),
 Spojnica.definujZnačkuKonca(kreslenie) a podobne.
 
 Príklad:
 
 
import knižnica.*;
public class GKruh extends GRobot
{
    // Statická inštancia kreslenia vlastného tvaru – statickosť znamená, že
    // bude vytvorený jediný objekt pre všetky inštancie triedy GKruh (pozri
    // hlavnú metódu nižšie).
    public static KreslenieTvaru tvarKruhu = new KreslenieTvaru()
    {
        public void kresli(GRobot r)
        {
            // Vlastné kreslenie:
            r.kruh();
        }
    };
    // Konštruktor
    private GKruh()
    {
        // Všetky objekty budú mať spoločné kreslenie vlastného tvaru, ktoré
        // však bude prispôsobované podľa individuálnych vlastností robotov:
        vlastnýTvar(tvarKruhu);
    }
    // Hlavná metóda
    public static void main(String[] args)
    {
        // Vytvoríme tri objekty typu GKruh:
        GKruh gKruh1 = new GKruh();
        GKruh gKruh2 = new GKruh();
        GKruh gKruh3 = new GKruh();
        // Každý umiestnime na náhodnú pozíciu:
        gKruh1.náhodnáPoloha();
        gKruh2.náhodnáPoloha();
        gKruh3.náhodnáPoloha();
        // Zmeníme mu náhodú farbu:
        gKruh1.náhodnáFarba();
        gKruh2.náhodnáFarba();
        gKruh3.náhodnáFarba();
        // A určíme mu náhodnú veľkosť v rozmedzí 10
        // (čo je aktuálna veľkosť pri jednotkovej mierke) až 30
        // (čo je trojnásobok tejto hodnoty):
        gKruh1.náhodnáVeľkosť(3));
        gKruh2.náhodnáVeľkosť(3));
        gKruh3.náhodnáVeľkosť(3));
    }
}
 
 Výsledok:
 
 
 Ukážka
 možného vzhľadu po vykonaní príkladu(plátno na
 obrázku je zmenšené).
 
  
 
 Použitie rozhrania môže vyzerať komplikovane, preto bolo
 robotu umožnené zmeniť tvar aj (z hľadiska začínajúceho
 programátora) jednoduchším spôsobom. Metódou GRobot.kresliTvar()
 (myslíme tým jej prekrytím). Z vnútorného (technického)
 hľadiska je však činnosť spomínanej metódy zabezpečovaná
 komplikovanejším mechanizmom s mierne vyššími režijnými
 nákladmi na vykonávanie, preto skúsenejším programátorom
 odporúčame využitie tohto rozhrania.
 
 Táto verzia programovacieho rámca je závislá od použitia
 verzie Javy 8. V tejto verzii Javy sa dá použiť aj skrátená
 (funkcionálna) syntax kreslenia vlastného tvaru s použitím
 tohto rozhrania. Ide o takzvaný lambda výraz (priamo vo volaní
 metódy robota vlastnýTvar, ako to ukazuje nasledujúci príklad, ho odporúčame
 použiť iba v prípade unikátneho kreslenia tvaru jedinej
 inštancie robota, keďže pri každom takomto použití by bola
 vytvorená unikátna inštancia implementácie rozhrania, čím by
 sa strácal celkový zmysel jeho použitia):
 
 
 r.krúžok());
 
 Prípadne, ak „jednoducho vieme,“ že r je robot
 a nepotrebujeme to dávať najavo nikomu tretiemu, tak môžeme
 zápis ešte viac skrátiť:
 
 
 r.krúžok());
 
 Viac príkazov kreslenia je potrebné uzavrieť do bloku:
 
 
    {
        r.kružnica();
        r.dopredu();
        // …
    });
 
 A nakoniec, lambda výraz je použiteľný aj priamo na
 univerzálnu implementáciu rozhrania použiteľnú s viacerými
 inštanciami robota:
 
 
GRobot prvý = new GRobot();
GRobot druhý = new GRobot();
GRobot tretí = new GRobot();
// …
{
    r.kružnica();
    r.dopredu();
    // …
};
prvý.vlastnýTvar(tvar);
druhý.vlastnýTvar(tvar);
tretí.vlastnýTvar(tvar);
// …
Pozri tiež:
GRobot.vlastnýTvar(KreslenieTvaru)
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
void
kresli(GRobot r)
Jediná metóda rozhrania určená na vykonanie určenej činnosti
 (napríklad kreslenie vlastného tvaru robota, zabezpečenie exportu
 prvkov do externého formátu a podobne).
Podrobnosti metód
kresli
void kresli(GRobot r)
Jediná metóda rozhrania určená na vykonanie určenej činnosti
 (napríklad kreslenie vlastného tvaru robota, zabezpečenie exportu
 prvkov do externého formátu a podobne). Prijíma parameter typu
 GRobot, teda objekt (inštanciu) robota, ktorý má
 primárne slúžiť na vykonanie alebo podporu vykonania určenej
 činnosti – kreslenie vlastného tvaru, kreslenie značiek spojníc,
 kedy je automaticky použitý zdrojový
 alebo cieľový robot) a podobne.
 V prípade kreslenia vlastného tvaru dodržujte zásadu, že kreslenie
 má byť čo najjednoduchšie a malo by využívať len metódy kreslenia
 inštancie „r“ prijatej v argumente tejto metódy.
 
 Príklad:
 
 
vlastnýTvar(new KreslenieTvaru()
{
    public void kresli(GRobot r)
    {
        // Vždy modrá kružnica s „nosom“
        r.farba(modrá);
        r.kružnica();
        r.dopredu(2 * r.veľkosť());
    }
});
 
 
 Ukážka
 vzhľadu.
 
 Poznámky: Niektoré metódy upravujú
 v rámci kreslenia vlastného tvaru svoje správanie. Napríklad
 skupina metód domov vráti a otočí robot
 do aktuálnej pozície a smeru – to jest do polohy a smeru v čase
 začatia vlastného kreslenia a to bez ohľadu na to, ako je
 v skutočnosti definovaný aktuálny domov robota. Metódy uhol, smer, uholDoma a smerDoma
 vracajú hodnotu upravenú o aktuálne pootočenie tvaru (pozri metódu
 pootočenieTvaru).
  
 Dôležitou informáciou je tiež to, že hodnoty takmer všetkých
 (dostatočne elementárnych) vlastností ako poloha, smer, stav pera
 (a mnoho iných) sú pred začatím kreslenia vlastného tvaru robota
 zálohované a po dokončení tejto činnosti sú opätovne vrátené do
 pôvodného stavu. Pero robota je pri začatí kreslenia vlastného tvaru
 vždy položené bez ohľadu na jeho
 skutočný stav a tiež je (bez ohľadu na skutočný stav) zapnuté
 kreslenie tvarov robotom.
  
 Zálohovanie sa nevzťahuje na iné použitia tohto rozhrania (napríklad
 kreslenie roja kresliacim robotom). Každé iné použitie tohto rozhrania
 má svoje vlastné pravidlá.
Parametre:
r – inštancia robota použitý na vykonanie určenej činnosti
     alebo jej podporu (nakreslenie vlastného tvaru a pod.);
     v prípade kreslenia vlastného tvaru je to presne tá inštancia,
     ktorá požaduje kreslenie vlastného tvaru
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Oblasť
java.lang.Object
java.awt.geom.Area
Oblasť
Všetky implementované rozhrania:
Shape, Cloneable, Poloha
Známe priame odvodené triedy:
Oblast
public class Oblasť
extends Area
implements Poloha
Trieda je rozšírením triedy Javy Area. Oblasť je
 ľubovoľná plocha, ktorá môže byť napríklad obkreslená čiarou,
 vyplnená farbou, použitá na obmedzenie kreslenia, prípadne na ďalšie účely. Na tvorbe oblasti sa
 môže podieľať zvolený robot alebo ju môžeme vytvoriť s pomocou útvarov
 (Shape) Javy. Každý robot je schopný produkovať útvary,
 ktoré môžu byť využité na vytvorenie oblasti. Filozofia je taká, že
 zavoláme metódu robota na nakreslenie útvaru alebo výpis textu (ktoré
 zároveň produkujú útvary) a vyprodukovaný útvar (s jeho veľkosťou
 a orientáciou) pridáme či odoberieme od tvorenej oblasti, vytvoríme
 prienik alebo alternatívu s vytváranou oblasťou. Počas
 procesu tvorby oblasti by však bolo nežiaduce (prípadne
 nemožné[1]), aby robot súčasne produkované útvary
 kreslil[2]. Preto je dobré ho zamestnať na účely tvorby oblasti. Zamestnaný
 robot nekreslí útvary ani nepíše texty dovtedy, kým nie je zo služby
 uvoľnený (prepustený).
 
 [1] – to sa dotýka útvarov vytvorených
 z textu.
 [2] – nemali by sme možnosť zabrániť
 nakresleniu produkovaného útvaru – zdvihnutie pera by nepomohlo,
 pretože jeho poloha nemá na kreslenie útvarov vplyv.
 
 Na tvorbu oblasti je možné použiť tieto metódy robota:
 krúžok(polomer),
 kružnica(polomer),
 kruh(polomer),
 elipsa(a, b),
 kresliElipsu(a, b),
 vyplňElipsu(a, b),
 štvorec(polomer),
 kresliŠtvorec(polomer),
 vyplňŠtvorec(polomer),
 obdĺžnik(a, b),
 kresliObdĺžnik(a, b),
 vyplňObdĺžnik(a, b),
 hviezda(polomer),
 kresliHviezdu(polomer),
 vyplňHviezdu(polomer),
 cesta(),
 text(text)
 a text(text, spôsobKreslenia).
 
 Každá z nich môže byť argumentom metód pridaj,
 odober, prienik
 a alternatíva.
 
 Príklad:
 
 V tomto príklade sú oblasti použité na nakreslenie šrafovaného
 obrázka. Oblasti tu slúžia na vymedzenie plochy, do ktorej môže
 robot kresliť, vďaka čomu bude výsledkom kreslenia šrafov cez celú
 plochu plátna vyšrafovanie iba vymedzenej plochy.
 
 
import knižnica.*;
public class ŠrafovanýObrázokZOblastí extends GRobot
{
    // Konštruktor hlavného robota.
    private ŠrafovanýObrázokZOblastí()
    {
        // Volaním nadradeného konštruktora zmeníme romery plátna
        // (volanie nadradeného konštruktora musí byť prvým príkazom
        // každého nového konštruktora):
        super(600, 400);
        // Pred začatím kreslenia vypneme automatické prekresľovanie,
        // aby bol celý proces rýchlejší:
        Svet.nekresli();
        // Najskôr zdvihneme pero a vypneme kreslenie tvarov robota,…
        zdvihniPero();
        nekresliTvary();
        // …aby sme mohli nerušene vygenerovať predlohy všetkých oblastí,
        // ktoré budeme používať pri kreslení šrafovaného obrázka:
        Oblasť koruna1 = new Oblasť(pootočenáElipsa(-100, 80, 0, 50, 100));
        koruna1.pridaj(pootočenáElipsa(-70, 70, 0, 30, 80));
        koruna1.pridaj(pootočenáElipsa(-140, 60, 0, 30, 60));
        Oblasť kmeň1 = new Oblasť(kmeň(-100, -70, 0, 40, 140));
        kmeň1.odober(koruna1);
        Oblasť koruna2 = new Oblasť(pootočenáElipsa(140, 70, 0, 40, 80));
        koruna2.pridaj(pootočenáElipsa(110, 80, 0, 30, 60));
        koruna2.pridaj(pootočenáElipsa(180, 60, 0, 30, 50));
        Oblasť kmeň2 = new Oblasť(kmeň(140, -60, 0, 30, 120));
        kmeň2.odober(koruna2);
        Oblasť krík1 = new Oblasť(pootočenáElipsa(25, -50, 0, 80, 50));
        krík1.pridaj(pootočenáElipsa(-5, -20, 10, 35, 30));
        krík1.pridaj(pootočenáElipsa(55, -20, -10, 35, 30));
        krík1.pridaj(pootočenáElipsa(-35, -70 , 10, 35, 30));
        krík1.pridaj(pootočenáElipsa(75, -70 , -10, 35, 30));
        Oblasť krík2 = new Oblasť(pootočenáElipsa(275, -60 , 0, 75, 45));
        krík2.pridaj(pootočenáElipsa(245, -30 , 10, 30, 25));
        krík2.pridaj(pootočenáElipsa(305, -30 , -10, 30, 25));
        krík2.pridaj(pootočenáElipsa(215, -80 , 10, 30, 25));
        krík2.pridaj(pootočenáElipsa(325, -80 , -10, 30, 25));
        Oblasť krík3 = new Oblasť(pootočenáElipsa(-265, -80 , 0, 75, 45));
        krík3.pridaj(pootočenáElipsa(-235, -50 , 10, 30, 25));
        krík3.pridaj(pootočenáElipsa(-295, -50 , -10, 30, 25));
        krík3.pridaj(pootočenáElipsa(-205, -100 , 10, 30, 25));
        krík3.pridaj(pootočenáElipsa(-315, -100 , -10, 30, 25));
        Oblasť horizont = horizont();
        Oblasť slnko = kružnicaNa(280, 200, 80);
        Oblasť oblak = oblak();
        
        // (Všimnite si, že od oblasti zeme a oblohy musíme odčítať všetky
        // také oblasti, ktoré ich prekrývajú, inak by šrafovanie zasiahlo
        // aj do nich.)
        Oblasť zem = new Oblasť(horizont);
        zem.odober(koruna1);
        zem.odober(kmeň1);
        zem.odober(koruna2);
        zem.odober(kmeň2);
        zem.odober(krík1);
        zem.odober(krík2);
        zem.odober(krík3);
        // Počiatočný tvar oblasti oblohy získame odčítaním oblasti
        // horizontu od obdĺžnika prekrývajúceho celé plátno (zasahujúc
        // mierne za jeho hranice):
        domov();
        Oblasť obloha = new Oblasť(obdĺžnik(310, 210));
        obloha.odober(horizont);
        // (Potom pokračujeme odčítavaním oblastí tvarov, ktoré oblohu
        // prekrývajú – ako je napísané vyššie.)
        obloha.odober(koruna1);
        obloha.odober(kmeň1);
        obloha.odober(koruna2);
        obloha.odober(kmeň2);
        obloha.odober(krík1);
        obloha.odober(krík2);
        obloha.odober(krík3);
        obloha.odober(slnko);
        obloha.odober(oblak);
        
        // Pred šrafovaním položíme pero:
        položPero();
        
        // A vyšrafujeme a obkreslíme jednotlivé oblasti:
        kresliDo(koruna1);
        šrafovanie3();
        kresliVšade();
        koruna1.kresli(this); // &lt;-- toto znamená, že koruna1 bude
                              // nakreslená „týmto“ (this), to jest
                              // aktuálnym robotom
        kresliDo(kmeň1);
        šrafovanie4();
        kresliVšade();
        kmeň1.kresli(this);
        kresliDo(koruna2);
        šrafovanie4();
        kresliVšade();
        koruna2.kresli(this);
        kresliDo(kmeň2);
        šrafovanie3();
        kresliVšade();
        kmeň2.kresli(this);
        
        kresliDo(krík1);
        šrafovanie3();
        šrafovanie4();
        kresliVšade();
        krík1.kresli(this);
        kresliDo(krík2);
        šrafovanie3();
        šrafovanie4();
        kresliVšade();
        krík2.kresli(this);
        kresliDo(krík3);
        šrafovanie3();
        šrafovanie4();
        kresliVšade();
        krík3.kresli(this);
        
        kresliDo(zem);
        šrafovanie1();
        kresliVšade();
        zem.kresli(this);
        kresliDo(obloha);
        šrafovanie2();
        kresliVšade();
        obloha.kresli(this);
        
        kresliDo(slnko);
        šrafovanie3();
        kresliVšade();
        slnko.kresli(this);
        kresliDo(oblak);
        šrafovanie4();
        kresliVšade();
        oblak.kresli(this);
        
        // Obrázok je hotový, spätne zapneme prekresľovanie:
        Svet.kresli();
    }
    
    // Šrafovanie vo vertikálnom (zvislom) smere.
    // (Implementácia sa spolieha na presné rozmery plátna: 600 × 400 bodov.)
    private void šrafovanie1()
    {
        smer(90);
        for (int i = 0; i &lt; 41; ++i)
        {
            skočNa(-300 + i * 15, -200);
            dopredu(400);
        }
    }
    // Šrafovanie v horizontálnom (vodorovnom) smere.
    // (Implementácia sa spolieha na presné rozmery plátna: 600 × 400 bodov.)
    private void šrafovanie2()
    {
        smer(0);
        for (int i = 0; i &lt; 28; ++i)
        {
            skočNa(-300, -200 + i * 15);
            dopredu(600);
        }
    }
    // Šrafovanie v diagonálnom smere 45° (zospodu zľava hore doprava).
    // (Implementácia sa spolieha na presné rozmery plátna: 600 × 400 bodov.)
    private void šrafovanie3()
    {
        smer(45);
        for (int i = 0; i &lt; 68; ++i)
        {
            skočNa(300 &#45; i * 15, -200);
            dopredu(580);
        }
    }
    // Šrafovanie v diagonálnom smere 135° (zospodu sprava hore doľava).
    // (Implementácia sa spolieha na presné rozmery plátna: 600 × 400 bodov.)
    private void šrafovanie4()
    {
        smer(135);
        for (int i = 0; i &lt; 68; ++i)
        {
            skočNa(-300 + i * 15, -200);
            dopredu(580);
        }
    }
    
    // Nasledujúca metóda slúži na vygenerovanie oblasti v tvare pootočenej
    // elipsy (so stanovením jej rozmerov).
    //   sx – x-ová súradnica stredu elipsy
    //   sy – y-ová súradnica stredu elipsy
    //   α  – uhol pootočenia elipsy
    //   a  – veľkosť hlavnej poloosi elipsy
    //   b  – veľkosť vedľajšej poloosi elipsy
    private Oblasť pootočenáElipsa(
        double sx, double sy, double α, double a, double b)
    {
        skočNa(sx, sy);
        smer(90 + α);
        return new Oblasť(elipsa(a, b));
    }
    // Nasledujúca metóda slúži na vygenerovanie oblasti, ktorú ohraničuje
    // kružnica s určením jej stredu (a samozrejme i polomeru).
    //   sx – x-ová súradnica stredu kružnice
    //   sy – y-ová súradnica stredu kružnice
    //   r  – polomer kružnice
    private Oblasť kružnicaNa(double sx, double sy, double r)
    {
        skočNa(sx, sy);
        return new Oblasť(kružnica(r));
    }
    
    // Nasledujúca metóda slúži na vygenerovanie tvaru nazvaného kmeň. Ide
    // o tvar získaný odrezaním plôšok z dvoch protiľahlých strán obdĺžnika,
    // pričom plôšky sú určené oblúčikmi tak, že v podstate vymedzujú
    // kruhové odseky. Tento tvar dokážeme získať rôznymi spôsobmi, ale
    // v tomto príklade ho vytvárame z cesty (čiže akoby zo záznamu dráhy,
    // ktorú robot prechádza), pričom okrem priamočiareho kráčania
    // použijeme aj príkazy robota na kráčanie po oblúku.
    //   sx – x-ová súradnica stredu kmeňa
    //   sy – y-ová súradnica stredu kmeňa
    //   α  – pootočenie tvaru kmeňa
    //   š  – šírka kmeňa
    //   v  – výška kmeňa
    private Oblasť kmeň(double sx, double sy, double α, double š, double v)
    {
        // Najprv treba vypočítať/získať súradnice rohov obdĺžnika
        // ohraničujúceho tvar kmeňa.
        // Prvým krokom je presun na súradnice stredu, pootočenie
        // a potom presun na súradnice ľavého dolného rohu kmeňa:
        skočNa(sx, sy);
        smer(90 + α);
        dozadu(v / 2.0);
        posuňDoľava(š / 2.0);
        // Potom pokračujeme postupným zapamätávaním aktuálnych súradníc
        // a pochodovanie po ohraničujúcom obdĺžniku, čím získavame súradnice
        // rohov obdĺžnika:
        Bod vľavoDole = poloha();
        dopredu(v);
        Bod vľavoHore = poloha();
        vpravo(90);
        dopredu(š);
        Bod vpravoHore = poloha();
        vpravo(90);
        dopredu(v);
        Bod vpravoDole = poloha();
        // Teraz môžeme začať kresliť tvar kmeňa. Najprv sa presunieme
        // do ľavého spodného rohu a pootočíme robot o 10° doprava vzhľadom
        // na počiatočné pootočenie, čiže presne na uhol 80° + α:
        skočNa(vľavoDole);
        smer(80 + α);
        // Zahájime záznam cesty a postupne sa rôznymi spôsobmi posúvame do
        // ďalších rohov ohraničujúceho obdĺžnika tak, aby sme získali
        // požadovaný tvar:
        začniCestu();
        choďNaPoOblúku(vľavoHore);
        choďNa(vpravoHore);
        smer(260 + α);
        choďNaPoOblúku(vpravoDole);
        // Nakoniec cestu zavrieme a výsledný tvar vrátime:
        uzavriCestu();
        return new Oblasť(cesta());
    }
    
    // Tvar horizontu je vytvorený napevno ako obdĺžnik, ktorý je o niečo
    // širší ako šírka plátna, je tiež posunutý mierne pod úroveň rozmerov
    // plátna a namiesto hornej strany má čiaru vytvorenú z niekoľkých
    // oblúkov.
    // (Implementácia sa spolieha na presné rozmery plátna: 600 × 400 bodov.)
    private Oblasť horizont()
    {
        skočNa(-310, -210);
        začniCestu();
        choďNa(-310, -80);
        smer(30);
        choďNaPoOblúku(50, 0);
        choďNaPoOblúku(230, -50);
        choďNaPoOblúku(310, -50);
        choďNa(310, -210);
        uzavriCestu();
        return new Oblasť(cesta());
    }
    // Tvar oblaku je najkomplikovanejší z generovaných tvarov. Je
    // vytvorený zlúčením trojice „chumáčov“ rotovaných elíps. Tvar je
    // v tomto príklade vytvorený napevno. Keby sme ho chceli
    // parametrizovať (získať možnosť úpravy jeho polohy, prípadne
    // orientáciu a podobne), museli by sme sa zamerať na požadované
    // časti metódy – poloha chumáčov je nastavená s pomocou trojice:
    // riadiaca štruktúra switch a volanie metód smer a dopredu;
    // s úpravou orientácie oblaku by to bolo komplikovanejšie, na to
    // by bolo potrebné metódu mierne prepracovať.
    private Oblasť oblak()
    {
        // Vytvorenie oblasti, do ktorej budú postupne zlučované všetky
        // vygenerované elipsy:
        Oblasť oblak = new Oblasť();
        // Vonkajší cyklus určuje, že budú vygenerované tri „chumáče“ elíps:
        for (int j = 0; j &lt; 3; ++j)
        {
            // Vnútorný cyklus určuje, že každý „chumáč“ bude pozostávať
            // z piatich elíps:
            for (int i = 0; i &lt; 5; ++i)
            {
                // Toto vetvenie určuje stredy jednotlivých „chumáčov“:
                switch (j)
                {
                    case 0: skočNa(-280, 200); break;
                    case 1: skočNa(-250, 220); break;
                    case 2: skočNa(-220, 200); break;
                }
                // Tieto dva príkazy rozmiestňujú elipsy v rámci jedného
                // „chumáča“:
                smer(75 * i);
                dopredu(20);
                // Vygenerovanie elipsy a jej pridanie do oblasti:
                oblak.pridaj(elipsa(50, 30));
            }
        }
        // Vrátenie výsledného tvaru oblaku:
        return oblak;
    }
    
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("srafovany-obrazok-z-oblasti.cfg");
        new ŠrafovanýObrázokZOblastí();
    }
}
 
 Výsledok:
 
 
 
  
 
 Skica obrázka – všetky použité tvary (len
 predlohy) s vyznačením plochy plátna (tyrkysovou farbou).
 Výsledný vyšrafovaný obrázok.
 
 Výsledok je vcelku uspokojivý. No čo ak by sme chceli štyri metódy
 na šrafovanie nahradiť jedinou univerzálnou? Metódou, ktorá by
 dovoľovala určiť šírku šrafov a ich smer?
 
 Poznámka: Zachováme spôsob prešrafovania
 celej plochy plátna, pretože tento spôsob dokáže bez dodatočných úprav
 v algoritme zabezpečiť univerzálne polohovanie šrafov v rôznych
 tvaroch pri zadaní rovnakých parametrov rozostupu a smeru šrafovania.
 Ak by nám na univerálnom polohovaní nezáležalo (alebo by sme si ho
 boli ochotní algoritmicky doriešiť) a chceli by sme byť úsporní
 a prešrafovať len plochu šrafovanej oblasti, museli by sme zadať
 šrafovanú oblasť ako parameter metódy a potom by bolo treba: nahradiť
 zisťovanie šírky a výšky plátien šírkou a výškou oblasti, použiť príkaz na hľadanie vzdialenosti k stredu oblasti (resp.
 tvaru) a nahradiť alebo eliminovať príkaz prechodu na domovskú pozíciu robota, napríklad nahradiť ho príkazom
 prechodu (preskoku) do stredu oblasti
 alebo eliminovať ho zabezpečením tohto prechodu (do stredu oblasti)
 už na začiatku algoritmu a zisťovaním vzdialenosti k opačnému bodu
 vyšetrovanej pomyselnej úsečky – robot by sa potom už nemusel dodatočne
 nikam presúvať.
 
 Takáto metóda je uvedená nižšie a funguje tak, že najskôr zistí
 rozsah šrafovania, presunie sa mimo šrafovanú plochu v určenom smere
 šrafovania a prešrafuje ju s použitím určeného rozostupu šrafov.
 
 
private void šrafovanie(double smer, double rozostup)
{
    // Presun za hranice plôch plátien sveta (o vzdialenosť šírky
    // šrafovania v oboch smeroch osí súradnicovej sústavy do pravého
    // horného rohu plôch plátien) a zistenie vzdialenosti od stredu
    // súradnicovej sústavy. Táto vzdialenosť bude určovať rozsah
    // šrafovania od stredu šrafovanej plochy (t. j. celého plátna):
    skočNa(Svet.šírka() + rozostup, Svet.výška() + rozostup);
    double rozsah = vzdialenosť();
    // Presun na začiatok (ak predpokladáme, že domovskú pozíciu
    // nebudeme meniť) a nasmerovanie sa do smeru šrafovania:
    domov();
    smer(smer);
    // Presun za hranice šrafovanej plochy o zistený rozsah:
    zdvihniPero();
    dozadu(rozsah);
    posuňVpravo(rozsah);
    // Postupné prešrafovanie celej plochy:
    for (double l = -rozsah; l &lt; rozsah; l += rozostup)
    {
        položPero();
        dopredu(2 * rozsah);
        zdvihniPero();
        vzad(2 * rozsah);
        posuňVľavo(rozostup);
    }
}
 
 Skutočný priebeh šrafovania obdĺžnikového tvaru (napríklad celého
 plátna) v smere 72° a s rozostupom 4 body:
 
 
 Skutočný priebeh šrafovania príkazom
 šrafovanie(72, 4) z nadhľadu – tyrkysový obdĺžnik
 vymedzuje plochu šrafovanej oblasti.
 
 Nižšie je obrázok šrafovaný metódami zhrnutými v nasledujúcej
 tabuľke:
 
 
 
 
 
 
 OblasťPríkazy
 koruna1
 šrafovanie(18, 12);šrafovanie(-18, 12);
 kmeň1
 šrafovanie(72, 8);šrafovanie(108, 8);
 koruna2
 šrafovanie(18, 12);šrafovanie(-18, 12);
 kmeň2
 šrafovanie(72, 8);šrafovanie(108, 8);
 
  
 
 OblasťPríkaz
 krík1
 šrafovanie(90, 9);
 krík2
 šrafovanie(72, 9);
 krík3
 šrafovanie(108, 9);
 zem
 šrafovanie(30, 16);
 obloha
 šrafovanie(0, 18);
 slnko
 šrafovanie(45, 20);
 oblak
 šrafovanie(-45, 20);
 
 
 
 
 
 Výsledok šrafovania obrázka príkazmi
 uvedenými v tabuľke vyššie.
 
  
 
 Na záver niekoľko faktov o oblastiach a o ich vnútornej stavbe.
 Informácie vyplývajú aj z originálnej dokumentácie triedy Area (pozri odkaz nižšie). Oblasť tvorí vždy uzavretý útvar (obopína
 vždy nejakú plochu po celom jej obvode). Aj keď bola vytvorená
 z tvaru, ktorý pôvodne nebol je uzavretý (napríklad neuzavretá cesta). Ak sa pokúsime vytvoriť oblasť z útvaru, ktorý
 „nemá“ (neobopína) žiadnu plochu (napríklad úsečka), získame
 prázdnu oblasť. Aj keď útvary, z ktorých
 oblasť tvoríme, sú jednoduché, výsledná oblasť nikdy nie je
 v skutočnosti taká jednoduchá. Napríklad kružnica alebo elipsa sú na pohľad jednoduché, ale
 z nich vytvorená oblasť bude vždy tvorená viacerými segmentami
 (v tomto prípade krivkami). Zložitosť oblasti má vplyv na rýchlosť
 spracovania pri jej použití v programe, najmä na detekciu
 kolízií.
Pozri tiež:
Area
Prehľad atribútov
Atribúty zdedené z rozhrania Poloha
stred
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Oblasť()
Predvolený konštruktor.
Oblasť(GRobot zamestnanec)
Vytvorí prázdnu oblasť so zadaným zamestnancom.
Oblasť(Shape tvar)
Vytvorí oblasť z určeného tvaru.
Oblasť(Shape tvar,
      GRobot zamestnanec)
Vytvorí oblasť z určeného tvaru a so zadaným zamestnancom.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
alternativa(Shape tvar)
 Alias pre alternatíva.
void
alternatíva(Shape tvar)
Vytvorí z oblasti a zadaného tvaru alternatívu – XOR (vylučujúce
 alebo, buď/alebo).
boolean
bodV(double súradnicaBoduX,
    double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v tejto oblasti.
boolean
bodV(Poloha r)
Zistí, či sa bod polohy robota nachádza v tejto oblasti.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tejto oblasti (t. j. súradníc jej stredu)
 dokonale zhoduje so zadanými súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tejto oblasti (t. j. súradníc jej stredu)
 a poloha zadaného objektu dokonale zhodujú.
void
kresli()
Nakreslí túto oblasť s využitím zamestnaného robota (použije jeho farbu alebo náter, hrúbku pera
 a aktívne plátno).
void
kresli(GRobot r)
Nakreslí túto oblasť na aktívne plátno aktuálnou farbou (alebo
 nátorom) a hrúbkou pera zadaného robota.
boolean
mysV()
 Alias pre myšV.
boolean
myšV()
Zistí, či sa aktuálne súradnice myši nachádzajú v tejto oblasti.
void
odober(Shape tvar)
Odoberie z oblasti zadaný tvar.
Bod
poloha()
Vypočíta a vráti polohu stredu oblasti.
double
polohaX()
Vypočíta a vráti x-ovú súradnicu polohy stredu oblasti.
double
polohaY()
Vypočíta a vráti y-ovú súradnicu polohy stredu oblasti.
boolean
prazdna()
 Alias pre prázdna.
boolean
prázdna()
Zistí, či je táto oblasť prázdna – t. j. či obopína nejakú plochu.
void
prepusti()
 Alias pre uvoľni.
void
prepusti(GRobot zamestnanec)
 Alias pre uvoľni.
void
pridaj(Shape tvar)
Pridá k oblasti zadaný tvar.
void
prienik(Shape tvar)
Vytvorí prienik oblasti a zadaného tvaru.
double
sirka()
 Alias pre šírka.
double
suradnicaX()
 Alias pre súradnicaX.
double
súradnicaX()
Vypočíta a vráti x-ovú súradnicu polohy stredu oblasti.
double
suradnicaY()
 Alias pre súradnicaY.
double
súradnicaY()
Vypočíta a vráti y-ovú súradnicu polohy stredu oblasti.
double
šírka()
Vráti šírku oblasti.
void
uvolni()
 Alias pre uvoľni.
void
uvoľni()
Automaticky uvoľní robot zamestnaný na účely tvorby (prípadne kreslenia) tejto oblasti.
void
uvolni(GRobot zamestnanec)
 Alias pre uvoľni.
void
uvoľni(GRobot zamestnanec)
Uvoľní robot zamestnaný na
 účely tvorenia tejto oblasti.
void
vymaz()
 Alias pre vymaž.
void
vymaž()
Kompletne odstráni geometriu oblasti – vyprázdni oblasť.
void
vypln()
 Alias pre vyplň.
void
vyplň()
Vyplní plochu tejto oblasti s využitím zamestnaného robota (použije jeho farbu alebo
 náter a aktívne plátno).
void
vypln(GRobot r)
 Alias pre vyplň.
void
vyplň(GRobot r)
Vyplní plochu tejto oblasti na aktívne plátno aktuálnou farbou
 (alebo náterom) zadaného robota.
void
vypln(GRobot r,
     Image výplň)
 Alias pre vyplň.
void
vyplň(GRobot r,
     Image výplň)
Vyplní plochu tejto oblasti na aktívne plátno zadaného robota
 zadanou textúrou.
void
vypln(GRobot r,
     String súbor)
 Alias pre vyplň.
void
vyplň(GRobot r,
     String súbor)
Vyplní plochu tejto oblasti na aktívne plátno zadaného robota
 zadanou textúrou.
void
vypln(Image výplň)
 Alias pre vyplň.
void
vyplň(Image výplň)
Vyplní plochu tejto oblasti textúrou s využitím zamestnaného robota (použije jeho aktívne
 plátno).
void
vypln(String súbor)
 Alias pre vyplň.
void
vyplň(String súbor)
Vyplní plochu tejto oblasti textúrou s využitím zamestnaného robota (použije jeho aktívne
 plátno).
double
vyska()
 Alias pre výška.
double
výška()
Vráti výšku oblasti.
void
zamestnaj(GRobot zamestnanec)
Zamestná zadaného robota na účely tvorby tejto oblasti.
boolean
zamestnany()
 Alias pre zamestnaný.
boolean
zamestnaný()
Overí, či je pre túto oblasť zamestnaný ľubovoľný robot.
boolean
zamestnany(GRobot zamestnanec)
 Alias pre zamestnaný.
boolean
zamestnaný(GRobot zamestnanec)
Overí, či je pre túto oblasť zamestnaný určený robot.
Metódy zdedené z triedy java.awt.geom.Area
add, clone, contains, contains, contains, contains, createTransformedArea, equals, exclusiveOr, getBounds, getBounds2D, getPathIterator, getPathIterator, intersect, intersects, intersects, isEmpty, isPolygonal, isRectangular, isSingular, reset, subtract, transform
Metódy zdedené z triedy java.lang.Object
equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Oblasť
public Oblasť()
Predvolený konštruktor. Dovoľuje vytvoriť oblasť bez spresňujúcich
 parametrov.
Oblasť
public Oblasť(Shape tvar)
Vytvorí oblasť z určeného tvaru.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
Oblasť
public Oblasť(GRobot zamestnanec)
Vytvorí prázdnu oblasť so zadaným zamestnancom. Pre podrobnosti
 o zamestnancovi pozri metódu zamestnaj.
Parametre:
zamestnanec – robot, ktorý má byť použitý na účely tvorby
     tejto oblasti (prípadne na jej nakreslenie)
Výnimky:
GRobotException – ak je stanovený robot zamestnaný pre inú
     oblasť
Oblasť
public Oblasť(Shape tvar,
              GRobot zamestnanec)
Vytvorí oblasť z určeného tvaru a so zadaným zamestnancom. Pre
 podrobnosti o zamestnancovi pozri metódu zamestnaj.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
zamestnanec – robot, ktorý má byť použitý na účely tvorby
     tejto oblasti (prípadne na jej nakreslenie)
Výnimky:
GRobotException – ak je stanovený robot zamestnaný pre inú
     oblasť
Podrobnosti metód
prázdna
public boolean prázdna()
Zistí, či je táto oblasť prázdna – t. j. či obopína nejakú plochu.
Návratová hodnota:
true ak je táto oblasť prázdna
     (netvorí/neobsahuje žiadny útvar); inak false
prazdna
public boolean prazdna()
 Alias pre prázdna.
zamestnaj
public void zamestnaj(GRobot zamestnanec)
Zamestná zadaného robota na účely tvorby tejto oblasti. Oblasť
 môže byť vytvorená aj bez pomoci robota (prostriedkami Javy),
 avšak na využitie možností robota, je jednoduchšie zamestnať
 robot, ktorý pomôže vytvoriť oblasť s pomocou svojich prostriedkov
 na kreslenie útvarov a písanie textov (resp. „kreslenie“ textov).
 Každý robot stráca súčasne so zamestnaním schopnosť kreslenia
 a vypĺňania útvarov (okrem kreslenia a vypĺňania cesty) a písania
 textov. Je to z dôvodu presunutia týchto schopností do tvorby
 oblasti… Po prepustení robota zo
 služby sa jeho schopnosti automaticky obnovia.
 
 Robot nesmie byť zamestnaný pre inú oblasť, lebo vznikne
 výnimka.
 
 Na tvorbu oblasti je možné použiť tieto metódy robota:
 krúžok(polomer),
 kružnica(polomer),
 kruh(polomer),
 elipsa(a, b),
 kresliElipsu(a, b),
 vyplňElipsu(a, b),
 štvorec(polomer),
 kresliŠtvorec(polomer),
 vyplňŠtvorec(polomer),
 obdĺžnik(a, b),
 kresliObdĺžnik(a, b),
 vyplňObdĺžnik(a, b),
 hviezda(polomer),
 kresliHviezdu(polomer),
 vyplňHviezdu(polomer),
 cesta(),
 text(text)
 a text(text, spôsobKreslenia).
 
 Každá z nich môže byť argumentom metód pridaj, odober, prienik a alternatíva.
Parametre:
zamestnanec – robot, ktorý má byť použitý na účely tvorby
     tejto oblasti (prípadne na jej nakreslenie)
Výnimky:
GRobotException – ak je robot zamestnaný pre inú oblasť
uvoľni
public void uvoľni()
Automaticky uvoľní robot zamestnaný na účely tvorby (prípadne kreslenia) tejto oblasti.
 Ak taký robot nejestvuje, volanie metódy nemá žiadny efekt.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Pozri tiež:
uvoľni(GRobot), 
GRobot.uvoľni()
uvolni
public void uvolni()
 Alias pre uvoľni.
prepusti
public void prepusti()
 Alias pre uvoľni.
uvoľni
public void uvoľni(GRobot zamestnanec)
Uvoľní robot zamestnaný na
 účely tvorenia tejto oblasti. Ak zadaný robot nebol zamestnaný
 pre túto oblasť, volanie tejto metódy nemá žiadny efekt.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
zamestnanec – robot, ktorý bol zamestnaný pre túto oblasť
Pozri tiež:
uvoľni(), 
GRobot.uvoľni(Oblasť)
uvolni
public void uvolni(GRobot zamestnanec)
 Alias pre uvoľni.
prepusti
public void prepusti(GRobot zamestnanec)
 Alias pre uvoľni.
zamestnaný
public boolean zamestnaný()
Overí, či je pre túto oblasť zamestnaný ľubovoľný robot.
Návratová hodnota:
true/&#8203;false
zamestnany
public boolean zamestnany()
 Alias pre zamestnaný.
zamestnaný
public boolean zamestnaný(GRobot zamestnanec)
Overí, či je pre túto oblasť zamestnaný určený robot.
Parametre:
zamestnanec – vyšetrovaný robot
Návratová hodnota:
true/&#8203;false
zamestnany
public boolean zamestnany(GRobot zamestnanec)
 Alias pre zamestnaný.
pridaj
public void pridaj(Shape tvar)
Pridá k oblasti zadaný tvar.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
Pozri tiež:
zamestnaj(GRobot)
odober
public void odober(Shape tvar)
Odoberie z oblasti zadaný tvar.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
Pozri tiež:
zamestnaj(GRobot)
prienik
public void prienik(Shape tvar)
Vytvorí prienik oblasti a zadaného tvaru.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
Pozri tiež:
zamestnaj(GRobot)
alternatíva
public void alternatíva(Shape tvar)
Vytvorí z oblasti a zadaného tvaru alternatívu – XOR (vylučujúce
 alebo, buď/alebo). Nová oblasť bude obsahovať také plochy, ktoré
 patrili buď výlučne do pôvodnej oblasti, alebo výlučne do zadaného
 tvaru.
Parametre:
tvar – ľubovoľný tvar Javy; ak sa chcete vyhnúť ťažkostiam
     s úpravou súradnicového priestoru, odporúčame na generovanie
     tvarov používať metódy robota (pozri úvod), najlepšie toho, ktorý bol na účely tvorby tejto
     oblasti zamestnaný
Pozri tiež:
zamestnaj(GRobot)
alternativa
public void alternativa(Shape tvar)
 Alias pre alternatíva.
vymaž
public void vymaž()
Kompletne odstráni geometriu oblasti – vyprázdni oblasť. Použiteľné
 pri recyklovaní objektu, keď vykonal prácu na ktorú bol určený…
vymaz
public void vymaz()
 Alias pre vymaž.
kresli
public void kresli()
Nakreslí túto oblasť s využitím zamestnaného robota (použije jeho farbu alebo náter, hrúbku pera
 a aktívne plátno). Keď bol robot medzičasom uvoľnený zo služby, nebude mať volanie tejto
 metódy žiadny efekt. Volanie tejto metódy nakreslí oblasť tak, ako
 bola vytvorená. Keď chcete využiť aj aktuálnu polohu a rotáciu
 robota, volajte metódu obkresliOblasť.
vyplň
public void vyplň()
Vyplní plochu tejto oblasti s využitím zamestnaného robota (použije jeho farbu alebo
 náter a aktívne plátno). Keď bol robot medzičasom uvoľnený zo služby, tak nemá volanie tejto metódy
 žiadny efekt. Volanie tejto metódy vyplní oblasť tak, ako bola
 vytvorená. Keď chcete využiť aj aktuálnu polohu a rotáciu robota,
 volajte metódu vyplňOblasť.
vypln
public void vypln()
 Alias pre vyplň.
vyplň
public void vyplň(String súbor)
Vyplní plochu tejto oblasti textúrou s využitím zamestnaného robota (použije jeho aktívne
 plátno). Keď bol robot medzičasom uvoľnený zo služby, tak nemá volanie tejto metódy
 žiadny efekt. Volanie tejto metódy vyplní oblasť tak, ako bola
 vytvorená. Keď chcete využiť aj aktuálnu polohu a rotáciu robota,
 volajte metódu vyplňOblasť. Textúra je súbor s obrázkom, ktorý bude použitý na
 dlaždicové vyplnenie oblasti.
 
 Obrázok (výplne) prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
Svet.priečinokObrázkov(String)
vypln
public void vypln(String súbor)
 Alias pre vyplň.
vyplň
public void vyplň(Image výplň)
Vyplní plochu tejto oblasti textúrou s využitím zamestnaného robota (použije jeho aktívne
 plátno). Keď bol robot medzičasom uvoľnený zo služby, tak nemá volanie tejto metódy
 žiadny efekt. Volanie tejto metódy vyplní oblasť tak, ako bola
 vytvorená. Keď chcete využiť aj aktuálnu polohu a rotáciu robota,
 volajte metódu vyplňOblasť. Textúra je obrázok (objekt typu
 Image alebo odvodený), ktorý bude
 použitý na dlaždicové vyplnenie oblasti.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
výplň – obrázok s textúrou
vypln
public void vypln(Image výplň)
 Alias pre vyplň.
kresli
public void kresli(GRobot r)
Nakreslí túto oblasť na aktívne plátno aktuálnou farbou (alebo
 nátorom) a hrúbkou pera zadaného robota. Táto metóda nakreslí oblasť
 tak, ako bola vytvorená. Keď ju chcete rotovať a/alebo posúvať,
 použite metódu obkresliOblasť.
Parametre:
r – robot, ktorý bude použitý na nakreslenie tejto oblasti
     (iba farba, hrúbka pera a aktívne plánto)
vyplň
public void vyplň(GRobot r)
Vyplní plochu tejto oblasti na aktívne plátno aktuálnou farbou
 (alebo náterom) zadaného robota. Táto metóda vyplní oblasť tak, ako
 bola vytvorená. Keď ju chcete rotovať a/alebo posúvať, použite
 metódu vyplňOblasť.
Parametre:
r – robot, ktorý bude použitý na vyplnenie tejto oblasti (iba
     farba a aktívne plánto)
vypln
public void vypln(GRobot r)
 Alias pre vyplň.
vyplň
public void vyplň(GRobot r,
                  String súbor)
Vyplní plochu tejto oblasti na aktívne plátno zadaného robota
 zadanou textúrou. Táto metóda vyplní oblasť tak, ako bola
 vytvorená.
 Keď ju chcete rotovať a/alebo posúvať, použite metódu vyplňOblasť. Textúra je súbor
 s obrázkom, ktorý bude použitý na dlaždicové vyplnenie oblasti.
 
 Obrázok (výplne) prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
r – robot, ktorý bude použitý na vyplnenie tejto oblasti
     (iba aktívne plánto)
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
Svet.priečinokObrázkov(String)
vypln
public void vypln(GRobot r,
                  String súbor)
 Alias pre vyplň.
vyplň
public void vyplň(GRobot r,
                  Image výplň)
Vyplní plochu tejto oblasti na aktívne plátno zadaného robota
 zadanou textúrou. Táto metóda vyplní oblasť tak, ako bola
 vytvorená.
 Keď ju chcete rotovať a/alebo posúvať, použite metódu vyplňOblasť. Textúra je
 obrázok (objekt typu Image alebo odvodený), ktorý bude použitý na dlaždicové
 vyplnenie oblasti.
Parametre:
r – robot, ktorý bude použitý na vyplnenie tejto oblasti
     (iba aktívne plánto)
výplň – obrázok s textúrou
vypln
public void vypln(GRobot r,
                  Image výplň)
 Alias pre vyplň.
bodV
public boolean bodV(double súradnicaBoduX,
                    double súradnicaBoduY)
Zistí, či sa súradnice zadaného bodu nachádzajú v tejto oblasti.
 Metóda posudzuje oblasť tak, ako bola vytvorená. Keď chcete
 využiť rotáciu alebo posun niektorého robota, použite metódu
 bodVOblasti.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
bodV
public boolean bodV(Poloha r)
Zistí, či sa bod polohy robota nachádza v tejto oblasti. Metóda
 posudzuje polohu bodu v oblasti v takom stave, ako bola
 vytvorená. Keď chcete využiť rotáciu alebo posun niektorého
 robota, použite metódu bodVOblasti.
Parametre:
r – robot, ktorého poloha je vyšetrovaná
Návratová hodnota:
true – áno; false – nie
myšV
public boolean myšV()
Zistí, či sa aktuálne súradnice myši nachádzajú v tejto oblasti.
 Metóda posudzuje oblasť tak, ako bola vytvorená. Keď chcete
 využiť rotáciu alebo posun niektorého robota, použite metódu
 myšVOblasti.
Návratová hodnota:
true – áno; false – nie
mysV
public boolean mysV()
 Alias pre myšV.
polohaX
public double polohaX()
Vypočíta a vráti x-ovú súradnicu polohy stredu oblasti.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
x-ová súradnica polohy stredu oblasti
polohaY
public double polohaY()
Vypočíta a vráti y-ovú súradnicu polohy stredu oblasti.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
y-ová súradnica polohy stredu oblasti
súradnicaX
public double súradnicaX()
Vypočíta a vráti x-ovú súradnicu polohy stredu oblasti.
Definované:
súradnicaX v rozhraní Poloha
Návratová hodnota:
x-ová súradnica polohy stredu oblasti
suradnicaX
public double suradnicaX()
 Alias pre súradnicaX.
Definované:
suradnicaX v rozhraní Poloha
súradnicaY
public double súradnicaY()
Vypočíta a vráti y-ovú súradnicu polohy stredu oblasti.
Definované:
súradnicaY v rozhraní Poloha
Návratová hodnota:
y-ová súradnica polohy stredu oblasti
suradnicaY
public double suradnicaY()
 Alias pre súradnicaY.
Definované:
suradnicaY v rozhraní Poloha
poloha
public Bod poloha()
Vypočíta a vráti polohu stredu oblasti.
Definované:
poloha v rozhraní Poloha
Návratová hodnota:
poloha stredu oblasti
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tejto oblasti (t. j. súradníc jej stredu)
 dokonale zhoduje so zadanými súradnicami. Ak je zistená zhoda, tak
 metóda vráti hodnotu true, v opačnom prípade hodnotu
 false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha tejto oblasti
y – y-ová súradnica, s ktorou má byť porovnaná poloha tejto oblasti
Návratová hodnota:
true ak sa poloha tejto oblasti zhoduje so zadanými
     súradnicami, false v opačnom prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tejto oblasti (t. j. súradníc jej stredu)
 a poloha zadaného objektu dokonale zhodujú. Ak je zistená zhoda,
 tak metóda vráti hodnotu true, v opačnom prípade hodnotu
 false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná s polohou tejto
     oblasti
Návratová hodnota:
true ak sa poloha tejto oblasti zhoduje s polohou
     zadaného objektu, false v opačnom prípade
šírka
public double šírka()
Vráti šírku oblasti.
Návratová hodnota:
šírka oblasti
sirka
public double sirka()
 Alias pre šírka.
výška
public double výška()
Vráti výšku oblasti.
Návratová hodnota:
výška oblasti
vyska
public double vyska()
 Alias pre výška.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":9,"i9":10,"i10":10,"i11":10,"i12":9,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":9,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":9,"i128":9,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":9,"i164":9,"i165":9,"i166":9,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10,"i183":10,"i184":10,"i185":10,"i186":10,"i187":10,"i188":10,"i189":10,"i190":10,"i191":10,"i192":10,"i193":10,"i194":10,"i195":10,"i196":10,"i197":10,"i198":10,"i199":10,"i200":10,"i201":10,"i202":10,"i203":10,"i204":10,"i205":10,"i206":10,"i207":10,"i208":10,"i209":10,"i210":10,"i211":10,"i212":10,"i213":10,"i214":10,"i215":10,"i216":10,"i217":10,"i218":10,"i219":10,"i220":10,"i221":10,"i222":10,"i223":10,"i224":10,"i225":10,"i226":10,"i227":10,"i228":10,"i229":10,"i230":10,"i231":10,"i232":10,"i233":10,"i234":10,"i235":10,"i236":10,"i237":10,"i238":10,"i239":10,"i240":10,"i241":10,"i242":10,"i243":10,"i244":10,"i245":10,"i246":10,"i247":10,"i248":10,"i249":10,"i250":10,"i251":10,"i252":10,"i253":10,"i254":10,"i255":10,"i256":10,"i257":10,"i258":10,"i259":10,"i260":10,"i261":10,"i262":10,"i263":10,"i264":10,"i265":10,"i266":10,"i267":10,"i268":10,"i269":10,"i270":10,"i271":10,"i272":10,"i273":10,"i274":10,"i275":10,"i276":10,"i277":10,"i278":10,"i279":10,"i280":10,"i281":10,"i282":10,"i283":10,"i284":10,"i285":10,"i286":10,"i287":10,"i288":10,"i289":10,"i290":10,"i291":10,"i292":10,"i293":10,"i294":10,"i295":10,"i296":10,"i297":10,"i298":10,"i299":10,"i300":10,"i301":10,"i302":10,"i303":10,"i304":10,"i305":10,"i306":10,"i307":10,"i308":10,"i309":10,"i310":10,"i311":10,"i312":10,"i313":10,"i314":10,"i315":10,"i316":10,"i317":10,"i318":10,"i319":10,"i320":10,"i321":10,"i322":10,"i323":10,"i324":10,"i325":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Obrázok
java.lang.Object
java.awt.Image
java.awt.image.BufferedImage
Obrázok
Všetky implementované rozhrania:
RenderedImage, WritableRenderedImage, Transparency, Priehľadnosť, Rozmer
Známe priame odvodené triedy:
Obrazok
public class Obrázok
extends BufferedImage
implements Priehľadnosť, Rozmer
Obrázok je rozšírením triedy Javy BufferedImage
 nielen o funkcionalitu bežne používanú vo svete grafického robota.
 
 Obrázok obsahuje komponent grafika, vďaka ktorému
 môžeme do obrázkov priamo
 kresliť.
 
 Trieda je využiteľná v rôznych situáciách, napríklad pri vypĺňaní plátna, definícii vlastného tvaru robota a podobne. Ponúka
 nástroje na zrkadlenie, zmenu svetlosti, úpravu na farebný
 negatív, rozmazanie a tak ďalej.
 
 Upozornenie: Pri úpravách obrázkov (hoci
 ich vlastnými metódami, napríklad prevráťVodorovne, bledší, negatív, rozmaž a podobne) nikdy nie je spustené
 automatické prekreslenie! Všetky zmeny vykonané v obrázu sa prejavia
 až pri jeho najbližšom nakreslení! Následkom je napríklad i to, že
 ak je obrázok použitý ako vlastný tvar niektorého robota, treba po
 každej zmene (úprave priehľadnosti,
 vypĺňaní,
 kreslení…) zabezpečiť prekreslenie sveta.
 
 Poznámka: Automatické prekresľovanie sveta
 sa pri úpravách obsahu obrázkov alebo ich vlastností ich vlastnými
 metódami neaktivuje napríklad i preto, že svet nemá nikdy garantované,
 či je stanovený obrázok niekde použitý alebo iba pasívne uložený
 v pamäti…)
 
 Príklad:
 
 Nasledujúci príklad ukazuje možné použitie triedy
 Obrázok ako vlastného tvaru viacerých robotov
 znázorňujúcich hodiny (hodinových robotov). Obrázok je prekresľovaný
 podľa potreby. Takéto použitie je v tomto prípade efektívnejšie,
 pretože prekresľovanie tvaru je vykonávané len v prípade potreby
 (v tomto prípade každú minútu) a prekreslený tvar dokáže využiť
 množstvo robotov naraz.
 
 Príklad obsahuje aj možnosť zobrazenia na celej obrazovke. Tá je
 pred zrakom Javy zakrytá komentármi označenými dvojitou mriežkou:
 // ##. Po odstránení všetkých takto označených znakov
 komentárov (vrátane znakov dvojitej mriežky) bude príklad fungovať
 v režime celej obrazovky.
 
 
import knižnica.*;
import java.util.Calendar;
public class ObrázokAkoTvar extends GRobot
{
    // Spoločná inštancia obrázka, ktorá bude tvoriť vlastný tvar
    // hodinových robotov.
    private final static Obrázok tvarHodín = new Obrázok(50, 50);
    // Atribúty uchovávajúce starý a nový čas. Ak bude zistená zmena,
    // čo bude každú minútu, tak budú hodiny prekreslené.
    private int hodina0 = 0, minúta0 = 0, hodina1 = -1, minúta1 = -1;
    // Nebolo by efektívne overovať hodnoty času niekoľko ráz za sekundu,
    // preto je tu toto počítadlo, ktoré spôsobí, že overenie hodnôt času
    // bude vykonané raz za minútu.
    private int overČasPo = -1;
    // ## private static int zariadenie = 0;
    
    // Súkromná trieda hodín.
    private static class Hodiny extends GRobot
    {
        // Konštruktor, ktorý nastaví všetkým hodinám rovnaké parametre
        // a náhodnú individuálnu rýchlosť.
        private Hodiny()
        {
            zdvihniPero();
            vlastnýTvar(tvarHodín);
            náhodnáPoloha();
            novýCieľ();
            gyroskop(90.0);
            rýchlosť(Svet.náhodnéReálneČíslo(1.5, 3.5), false);
        }
        // Nový cieľ je nastavený na začiatku a potom vždy po dosiahnutí
        // starého cieľa.
        private void novýCieľ()
        {
            Bod štart = poloha();
            náhodnáPoloha();
            Bod cieľ = poloha();
            skočNa(štart);
            cieľ(cieľ);
            kružnica();
        }
        // Reakcia na dosiahnutie cieľa hodinami.
        @Override public void dosiahnutieCieľa()
        {
            novýCieľ();
        }
    }
    
    // Konštruktor hlavného robota. Sú v ňom vykonané potrebné nastavenia
    // a vytvorené hodinové roboty.
    private ObrázokAkoTvar()
    {
        // ## super(Svet.šírkaZariadenia(zariadenie),
        // ## 	Svet.výškaZariadenia(zariadenie));
        // ## Svet.celáObrazovka(zariadenie);
        Svet.nekresli();
        Svet.farbaPozadia(čierna);
        kresliDoObrázka(tvarHodín);
        skry();
        veľkosť(22.0);
        hrúbkaČiary(2.2);
        farba(svetlotyrkysová);
        for (int i = 0; i &lt; 50; ++i)
            new Hodiny();
        Svet.spustiČasovač();
    }
    // Zistenie nových hodnôt času. Metóda používa triedu Javy Calendar.
    private void dajČas()
    {
        Calendar teraz = Calendar.getInstance();
        hodina0 = teraz.get(Calendar.HOUR);
        minúta0 = teraz.get(Calendar.MINUTE);
    }
    // Metóda slúžiaca na nakreslenie tvaru hodín. Kreslenie je vykonané len
    // v prípade, že sa hodnoty času zmenili, pričom hodnoty časových údajov
    // sú overované každú minútu.
    private void nakresliHodiny()
    {
        // Hodnota času je overovaná každú minútu. Predvolená hodnota
        // časovača je 40 ms, to je 25 ráz za sekundu, preto je čas overený
        // každých 1 500 tikov.
        if (0 == ++overČasPo % 1500) dajČas();
        // Kreslenie je vykonané len v prípade, že sa hodnoty času zmenili.
        if (hodina1 != hodina0 || minúta1 != minúta0)
        {
            // Vymazanie starého tvaru hodín.
            tvarHodín.vymaž();
            // Uloženie aktuálnej farby hlavného robota – tá bude použitá
            // na nakreslenie hodín.
            Farba farba = farba();
            domov();
            // Farba pozadia sveta je použitá na vyplnenie tvaru hodín.
            farba(Svet.farbaPozadia());
            kruh();
            // Nakreslenie kružnice uloženou farbou.
            farba(farba);
            kružnica();
            // Nakreslenie štyroch značiek hodín – na 12., 3., 6. a 9. hodine.
            for (int i = 0; i &lt; 4; ++i)
            {
                zdvihniPero();
                dopredu(veľkosť() * 0.8);
                položPero();
                dopredu(veľkosť() * 0.2);
                zdvihniPero();
                dozadu(veľkosť());
                doprava(90);
            }
            položPero();
            // Nakreslenie hodinovej ručičky.
            domov();
            smer(90 &#45; 30 * hodina0 &#45; 0.5 * minúta0);
            dopredu(veľkosť() * 0.5);
            // Nakreslenie minútovej ručičky.
            domov();
            smer(90 &#45; 6 * minúta0);
            dopredu(veľkosť() * 0.9);
            // Synchronizácia hodnôt času – ďalšia zmena nastane o minútu.
            hodina1 = hodina0;
            minúta1 = minúta0;
        }
    }
    // Reakcia na tik časovača. Prekresľuje tvar hodín a svet (obidvoje len
    // ak je to potrebné).
    @Override public void tik()
    {
        nakresliHodiny();
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("obrazok-ako-vlastny-tvar.cfg");
        // ## if (Svet.početZariadení() &gt; 1) ++zariadenie;
        new ObrázokAkoTvar();
    }
}
 
 Výsledok:
 
  Na ploche
 plátna sa bude pohybovať niekoľko „hodinových robotov.“
Pozri tiež:
Svet.priečinokObrázkov(String)
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
Graphics2D
grafika
Grafika obrázka (pre potreby kreslenia do obrázka).
int
sirka
Šírka obrázka.
int
šírka
Šírka obrázka.
int
vyska
Výška obrázka.
int
výška
Výška obrázka.
Atribúty zdedené z triedy java.awt.image.BufferedImage
TYPE_3BYTE_BGR, TYPE_4BYTE_ABGR, TYPE_4BYTE_ABGR_PRE, TYPE_BYTE_BINARY, TYPE_BYTE_GRAY, TYPE_BYTE_INDEXED, TYPE_CUSTOM, TYPE_INT_ARGB, TYPE_INT_ARGB_PRE, TYPE_INT_BGR, TYPE_INT_RGB, TYPE_USHORT_555_RGB, TYPE_USHORT_565_RGB, TYPE_USHORT_GRAY
Atribúty zdedené z triedy java.awt.Image
accelerationPriority, SCALE_AREA_AVERAGING, SCALE_DEFAULT, SCALE_FAST, SCALE_REPLICATE, SCALE_SMOOTH, UndefinedProperty
Atribúty zdedené z rozhrania Priehľadnosť
NEPRIEHLADNA, NEPRIEHĽADNÁ, NEPRIEHLADNE, NEPRIEHĽADNÉ, NEPRIEHLADNY, NEPRIEHĽADNÝ, NEVIDITELNA, NEVIDITEĽNÁ, NEVIDITELNE, NEVIDITEĽNÉ, NEVIDITELNY, NEVIDITEĽNÝ
Atribúty zdedené z rozhrania java.awt.Transparency
BITMASK, OPAQUE, TRANSLUCENT
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Obrázok()
Predvolený konštruktor.
Obrázok(Image obrázok)
Vytvorí nový obrázok podľa zadaného obrázka ako predlohy.
Obrázok(int šírka,
       int výška)
Konštruktor, ktorý vytvorí nový prázdny obrázok so zadanými
 rozmermi (v bodoch).
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
animujeSa()
Zistí, či je práve spustená animácia obrázka.
void
bledsi()
 Alias pre bledší.
void
bledsi(double faktor)
 Alias pre bledší.
void
bledší()
Zvýši úroveň svetlosti tohto obrázka.
void
bledší(double faktor)
Zvýši úroveň svetlosti tohto obrázka.
void
ciernobiely()
 Alias pre čiernobiely.
void
ciernobiely(boolean vyvážiťZložky)
 Alias pre čiernobiely.
void
ciernobiely(double váhaČervenej,
           double váhaZelenej,
           double váhaModrej)
 Alias pre čiernobiely.
static Obrazok
citaj(String súbor)
 Alias pre čítaj.
void
čiernobiely()
Upraví tento obrázok do odtieňov šedej s použitím priemerovania
 farebných zložiek.
void
čiernobiely(boolean vyvážiťZložky)
Upraví tento obrázok do odtieňov šedej s možnosťou určenia
 predvoleného vyváženia farebných zložiek – podľa modelu ľudského
 vnímania farieb.
void
čiernobiely(double váhaČervenej,
           double váhaZelenej,
           double váhaModrej)
Upraví tento obrázok do odtieňov šedej s možnosťou určenia
 vlastného vyváženia jednotlivých farebných zložiek.
static Obrázok
čítaj(String súbor)
Prečíta do vnútornej pamäte sveta zadaný obrázok zo súboru
 a vytvorí z neho nový objekt typu Obrázok.
void
dalsiaSnimka()
 Alias pre ďalšiaSnímka.
void
ďalšiaSnímka()
Aktivuje nasledujúcu snímku animácie.
Vlnenie
definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
boolean
doSchranky()
 Alias pre doSchránky.
boolean
doSchránky()
Vloží obsah tohto obrázka do schránky.
Vlnenie
existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
Farba
farbaBodu(double x,
         double y)
Zistí farbu bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca.
boolean
farbaBodu(double x,
         double y,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje so zadanou
 farbou.
boolean
farbaBodu(double x,
         double y,
         Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadaného objektu.
boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadanou prostredníctvom farebných zložiek.
boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadanou prostredníctvom farebných zložiek a úrovne priehľadnosti.
Farba
farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) obrázka na súradniciach
 určených polohou objektu.
boolean
farbaBodu(Poloha objekt,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu v súradnicovom priestore rámca zhoduje so zadanou
 farbou.
boolean
farbaBodu(Poloha objekt,
         Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 prvého zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou druhého zadaného objektu.
boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou zadanou prostredníctvom farebných zložiek a úrovne.
boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
void
farebneTienidlo(Color farba)
 Alias pre farebnéTienidlo.
void
farebnéTienidlo(Color farba)
Použije na tento obrázok zadané farebné tienidlo.
void
farebnyFilter(Color farba)
 Alias pre farebnýFilter.
void
farebnýFilter(Color farba)
Použije na tento obrázok zadaný farebný filter.
void
farebnyFilter(Farebnosť objekt)
 Alias pre farebnýFilter.
void
farebnýFilter(Farebnosť objekt)
Použije na tento obrázok farebný filter podľa farby zadaného
 objektu.
void
gamaKorekcia(double γ)
Upraví intenzitu farieb obrázka na základe hodnoty parametra
 gama (γ).
Graphics2D
grafika()
Vráti objekt grafiky obrázka (pre potreby kreslenia do obrázka).
void
jednofarebny(Color farba)
 Alias pre monochromatický.
void
jednofarebný(Color farba)
 Alias pre monochromatický.
void
jednofarebny(Farebnosť objekt)
 Alias pre monochromatický.
void
jednofarebný(Farebnosť objekt)
 Alias pre monochromatický.
Vlnenie
jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
void
kresli(double x,
      double y,
      Image obrázok)
Nakreslí do tohto obrázka zadaný obrázok, pričom ho posunie
 od stredu o zadané súradnice v horizontálnom a vertikálnom
 smere.
void
kresli(double x,
      double y,
      String súbor)
Nakreslí do tohto obrázka obrázok zo zadaného súboru, ktorý bude
 posunutý od stredu o zadané súradnice v horizontálnom
 a vertikálnom smere.
void
kresli(Image obrázok)
Nakreslí do stredu tohto obrázka zadaný obrázok.
void
kresli(Poloha objekt,
      Image obrázok)
Nakreslí do tohto obrázka zadaný obrázok, obrázok bude
 posunutý o súradnice určené polohou zadaného objektu.
void
kresli(Poloha objekt,
      String súbor)
Nakreslí do tohto obrázka obrázok zo zadaného súboru, obrázok
 bude posunutý o súradnice určené polohou zadaného objektu.
void
kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru do obrázka.
void
kresli(Shape tvar,
      GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru do
 obrázka.
void
kresli(String súbor)
Nakreslí do stredu tohto obrázka obrázok zo zadaného súboru.
GRobot
kreslic()
 Alias pre kreslič.
void
kreslic(GRobot kreslič)
 Alias pre kreslič.
GRobot
kreslič()
 Vráti aktuálneho kresliča obrázka alebo
 null, ak nie je kreslič nastavený.
void
kreslič(GRobot kreslič)
 Nastaví „kresliča“ obrázka – grafického
 robota, ktorý bude slúžiť na alternatívne kreslenie a vypĺňanie
 tvarov v rámci obrázka.
void
kresliDo(Shape tvar)
Obmedzí kreslenie na tento obrázok na plochu zadaného útvaru
 (Shape).
void
kresliVsade()
 Alias pre kresliVšade.
void
kresliVšade()
Zruší oblasť na obmedzenie kreslenia na tento obrázok.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí zhodu rozmerov obrázka so zadanými rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí zhodu rozmerov obrázka s rozmermi zadaného objektu.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
máŠírku(double šírka)
Overí zhodu šírky obrázka so zadanou hodnotou.
boolean
maVlnenie()
 Alias pre máVlnenie.
boolean
máVlnenie()
Overí, či je definovaná inštancia vlnenia pre tento obrázok.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Overí zhodu výšky obrázka so zadanou hodnotou.
double
maximalneX()
 Alias pre najväčšieX.
double
maximálneX()
 Alias pre najväčšieX.
double
maximalneY()
 Alias pre najväčšieY.
double
maximálneY()
 Alias pre najväčšieY.
double
minimalneX()
 Alias pre najmenšieX.
double
minimálneX()
 Alias pre najmenšieX.
double
minimalneY()
 Alias pre najmenšieY.
double
minimálneY()
 Alias pre najmenšieY.
void
monochromaticky(Color farba)
 Alias pre monochromatický.
void
monochromatický(Color farba)
Upraví tento obrázok do odtieňov zadanej farby.
void
monochromaticky(Farebnosť objekt)
 Alias pre monochromatický.
void
monochromatický(Farebnosť objekt)
Upraví tento obrázok do odtieňov farby zadaného objektu.
double
najmensieX()
 Alias pre najmenšieX.
double
najmensieY()
 Alias pre najmenšieY.
double
najmenšieX()
 Zistí najmenšiu x-ovú súradnicu
 obrázka.
double
najmenšieY()
 Zistí najmenšiu y-ovú súradnicu
 obrázka.
double
najvacsieX()
 Alias pre najväčšieX.
double
najvacsieY()
 Alias pre najväčšieY.
double
najväčšieX()
 Zistí najväčšiu x-ovú súradnicu
 obrázka.
double
najväčšieY()
 Zistí najväčšiu y-ovú súradnicu
 obrázka.
void
negativ()
 Alias pre negatív.
void
negatív()
Pretvorí tento obrázok na svoj farebný negatív.
void
nekresliDo(Shape tvar)
Vytvára obmedzenie kreslenia na tento obrázok.
void
odstranVlnenie()
 Alias pre odstráňVlnenie.
void
odstráňVlnenie()
Ukončí vlnenie a úplne odstráni inštanciu vlnenia tohto obrázka
 z prostredia programovacieho rámca GRobot.
void
odtieneSedej()
 Alias pre čiernobiely.
void
odtieneSedej(boolean vyvážiťZložky)
 Alias pre čiernobiely.
void
odtieneSedej(double váhaČervenej,
            double váhaZelenej,
            double váhaModrej)
 Alias pre čiernobiely.
void
odtieneŠedej()
 Alias pre čiernobiely.
void
odtieneŠedej(boolean vyvážiťZložky)
 Alias pre čiernobiely.
void
odtieneŠedej(double váhaČervenej,
            double váhaZelenej,
            double váhaModrej)
 Alias pre čiernobiely.
int
opakovaniaAnimacie()
 Alias pre opakovaniaAnimácie.
int
opakovaniaAnimácie()
Zistí, koľko opakovaní zostáva do ukončenia animácie.
void
opakovaniaAnimacie(int početOpakovaní)
 Alias pre opakovaniaAnimácie.
void
opakovaniaAnimácie(int početOpakovaní)
Ak má tento obrázok nenulový počet snímok animácie, tak táto
 metóda nastaví nový počet opakovaní animácie zostávajúci do
 ukončenia animácie a to bez ohľadu na to, či je animácia spustená
 alebo nie.
Farba[]
paleta(int početFarieb)
Vyrobí paletu najpoužívanejších farieb vyskytujúcich sa
 v aktuálnej snímke obrázka so zadaným maximálnym počtom farieb.
Farba[]
paleta(int početFarieb,
      int hranicaZdravia)
Vyrobí paletu najpoužívanejších farieb vyskytujúcich sa
 v aktuálnej snímke obrázka so zadaným maximálnym počtom farieb
 a hranicou zdravia 256.
int
pocetFarieb()
 Alias pre početFarieb.
int
pocetOpakovani()
 Alias pre početOpakovaní.
void
pocetOpakovani(int početOpakovaní)
 Alias pre početOpakovaní.
int
pocetSnimok()
 Alias pre početSnímok.
int
početFarieb()
Zistí počet farieb použitých v aktuálnej snímke obrázka.
int
početOpakovaní()
Zistí, koľko opakovaní zostáva do ukončenia animácie.
void
početOpakovaní(int početOpakovaní)
Ak má tento obrázok nenulový počet snímok animácie, tak táto
 metóda nastaví nový počet opakovaní animácie zostávajúci do
 ukončenia animácie a to bez ohľadu na to, či je animácia spustená
 alebo nie.
int
početSnímok()
Vráti aktuálny počet snímok animácie uloženej v tomto obrázku.
boolean
porovnaj(Image inýObrázok)
Porovná obsah tejto a zadanej inštancie obrázka.
static boolean
porovnaj(Image obrázok1,
        Image obrázok2)
Porovná obsahy dvoch zadaných inštancií obrázkov.
void
poslednaSnimka()
 Alias pre poslednáSnímka.
void
poslednáSnímka()
Aktivuje poslednú snímku animácie.
void
posterizuj()
Posterizuje obrázok podľa predvolenej palety preddefinovaných farieb.
void
posterizuj(boolean difúziaChyby)
Posterizuje obrázok podľa predvolenej palety preddefinovaných farieb a umožňuje
 zvoliť, či má byť pri tomto procese použitý algoritmus difúzie
 chyby.
void
posterizuj(boolean difúziaChyby,
          Color[] paleta)
Posterizuje obrázok podľa palety zadanej vo forme poľa farieb
 a umožňuje zvoliť, či má byť pri tomto procese použitý algoritmus
 difúzie chyby.
void
posterizuj(boolean difúziaChyby,
          Color prváFarba,
          Color... ostatnéFarby)
Posterizuje obrázok podľa palety zadanej vo forme zoznamu
 farieb, pričom povinné je zadanie aspoň jednej farby a umožňuje
 zvoliť, či má byť pri tomto procese použitý algoritmus difúzie
 chyby.
void
posterizuj(Color[] paleta)
Posterizuje obrázok podľa palety zadanej vo forme poľa farieb.
void
posterizuj(Color prváFarba,
          Color... ostatnéFarby)
Posterizuje obrázok podľa palety zadanej vo forme zoznamu
 farieb, pričom povinné je zadanie aspoň jednej farby.
boolean
pouziMasku(BufferedImage maska)
 Alias pre použiMasku.
boolean
použiMasku(BufferedImage maska)
Použije na tento obrázok masku vyrobenú zo zadaného obrázka.
static Obrazok
precitaj(String súbor)
 Alias pre čítaj.
static Obrázok
prečítaj(String súbor)
 Alias pre čítaj.
void
predchadzajucaSnimka()
 Alias pre predchádzajúcaSnímka.
void
predchádzajúcaSnímka()
Aktivuje predchádzajúcu snímku animácie.
void
prepisBod(double x,
         double y,
         Color farba)
 Alias pre prepíšBod.
void
prepisBod(double x,
         double y,
         Farebnosť objekt)
 Alias pre prepíšBod.
void
prepisBod(double x,
         double y,
         int farba)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         Color farba)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         Farebnosť objekt)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         int farba)
 Alias pre prepíšBod.
void
prepíšBod(double x,
         double y,
         Color farba)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii zadanou farbou.
void
prepíšBod(double x,
         double y,
         Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii farbou zadaného objektu.
void
prepíšBod(double x,
         double y,
         int farba)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii zadanou kombináciou zložiek ARGB zakódovaných
 v celočíselnej hodnote.
void
prepíšBod(Poloha bod,
         Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu zadanou farbou.
void
prepíšBod(Poloha bod,
         Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu farbou zadaného objektu.
void
prepíšBod(Poloha bod,
         int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu zadanou kombináciou zložiek ARGB zakódovaných v celočíselnej
 hodnote.
void
pretoc(double Δx,
      double Δy)
 Alias pre pretoč.
void
pretoč(double Δx,
      double Δy)
Pretočí obsah obrázka o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere.
void
prevratHorizontalne()
 Alias pre prevráťVodorovne.
void
prevráťHorizontálne()
 Prevráti obrázok podľa zvislej osi –
 pravá časť obrázka sa ocitne vľavo a naopak.
void
prevratVertikalne()
 Alias pre prevráťZvislo.
void
prevráťVertikálne()
 Prevráti obrázok podľa vodorovnej osi –
 horná časť obrázka sa ocitne dole a naopak.
void
prevratVodorovne()
 Alias pre prevráťVodorovne.
void
prevráťVodorovne()
Prevráti obrázok podľa zvislej osi – pravá časť obrázka
 sa ocitne vľavo a naopak.
void
prevratZvislo()
 Alias pre prevráťZvislo.
void
prevráťZvislo()
Prevráti obrázok podľa vodorovnej osi – horná časť obrázka sa
 ocitne dole a naopak.
void
pridajSnimku()
 Alias pre pridajSnímku.
void
pridajSnímku()
Pridá novú snímku na koniec animácie s aktuálnou (naposledy
 použitou) hodnotou trvania zobrazenia
 a s aktuálnou grafikou obrázka.
void
pridajSnimku(Image obrázok)
 Alias pre pridajSnímku.
void
pridajSnímku(Image obrázok)
Pridá novú snímku na koniec animácie s aktuálnou (naposledy
 použitou) hodnotou trvania zobrazenia
 a so zadanou grafikou.
void
pridajSnimku(Image obrázok,
            double trvanie)
 Alias pre pridajSnímku.
void
pridajSnímku(Image obrázok,
            double trvanie)
Pridá novú snímku na koniec animácie so zadanou grafikou a so
 zadanou hodnotou trvania jej zobrazenia.
void
pridajVlnenie()
Pridá alebo zresetuje vlnenie tohto obrázka.
void
pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto obrázka.
void
pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie tohto obrázka.
void
pridajVlnenie(int útlm,
             boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto obrázka.
static String
priecinokObrazkov()
 Alias pre priečinokObrázkov.
static void
priecinokObrazkov(String priečinok)
 Alias pre priečinokObrázkov.
static String
priečinokObrázkov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú obrázky
 prečítané.
static void
priečinokObrázkov(String priečinok)
Ak sú všetky obrázky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
double
priehladnost()
 Alias pre priehľadnosť.
double
priehľadnosť()
 Zistí aktuálnu úroveň priehľadnosti
 tohto obrázka.
void
priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
void
priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň (ne)priehľadnosti
 tohto obrázka, pričom jednotlivé body na obrázku môžu mať svoju
 vlastnú úroveň priehľadnosti.
void
priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
void
priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
void
prvaSnimka()
 Alias pre prváSnímka.
void
prváSnímka()
Aktivuje prvú snímku animácie.
void
roluj(double Δx,
     double Δy)
Posunie obsah obrázka o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere.
void
rozmaz()
 Alias pre rozmaž.
void
rozmaz(Color pozadie)
 Alias pre rozmaž.
void
rozmaz(Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      Color pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      Color pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaž()
Rozmaže grafiku obrázka.
void
rozmaž(Color pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(Farebnosť pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      Color pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      Farebnosť pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      int rozsah)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      int rozsah,
      Color pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      int rozsah,
      Farebnosť pozadie)
Rozmaže grafiku obrázka.
void
rozmaž(int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku obrázka.
void
rozmaž(int opakovanie,
      int rozsah,
      int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku obrázka.
Rozmer
rozmery()
Vráti rozmery obrázka v implementácii rozhrania Rozmer.
void
rozmery(Rozmer rozmer)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie obidvoch rozmerov obrázka.
double
rychlost()
 Alias pre rýchlosť.
double
rýchlosť()
Vráti aktuálnu rýchlosť prehrávania animácie (bez ohľadu na to,
 či je práve animácia spustená alebo nie).
void
rychlost(double nováRýchlosť)
 Alias pre rýchlosť.
void
rýchlosť(double nováRýchlosť)
Upraví rýchlosť prehrávania animácie (bez ohľadu na to, či je
 práve animácia spustená alebo nie).
double
rychlostAnimacie()
 Alias pre rýchlosťAnimácie.
double
rýchlosťAnimácie()
Vráti aktuálnu rýchlosť prehrávania animácie (bez ohľadu na to,
 či je práve animácia spustená alebo nie).
void
rychlostAnimacie(double nováRýchlosť)
 Alias pre rýchlosťAnimácie.
void
rýchlosťAnimácie(double nováRýchlosť)
Upraví rýchlosť prehrávania animácie (bez ohľadu na to, či je
 práve animácia spustená alebo nie).
double
sirka()
 Alias pre šírka.
void
sirka(double šírka)
 Alias pre šírka.
int
snimka()
 Alias pre snímka.
int
snímka()
Vráti index aktívnej snímky animácie.
void
snimka(int indexSnímky)
 Alias pre snímka.
void
snímka(int indexSnímky)
Aktivuje zadanú snímku animácie.
void
spusti()
Spustí animáciu s nekonečným počtom opakovaní v naposledy
 použitom smere prehrávania.
void
spusti(int početOpakovaní)
Spustí animáciu so zadaným počtom opakovaní v naposledy použitom
 smere prehrávania.
void
spustiAnimaciu()
 Alias pre spustiAnimáciu.
void
spustiAnimáciu()
Spustí animáciu s nekonečným počtom opakovaní v naposledy
 použitom smere prehrávania.
void
spustiAnimaciu(int početOpakovaní)
 Alias pre spustiAnimáciu.
void
spustiAnimáciu(int početOpakovaní)
Spustí animáciu so zadaným počtom opakovaní v naposledy použitom
 smere prehrávania.
void
spustiAnimaciuDopredu()
 Alias pre spustiAnimáciuDopredu.
void
spustiAnimáciuDopredu()
Spustí animáciu dopredu s nekonečným počtom opakovaní.
void
spustiAnimaciuDopredu(int početOpakovaní)
 Alias pre spustiAnimáciuDopredu.
void
spustiAnimáciuDopredu(int početOpakovaní)
Spustí animáciu dopredu so zadaným počtom opakovaní.
void
spustiAnimaciuPospiatku()
 Alias pre spustiAnimáciuPospiatku.
void
spustiAnimáciuPospiatku()
Spustí animáciu pospiatku s nekonečným počtom opakovaní.
void
spustiAnimaciuPospiatku(int početOpakovaní)
 Alias pre spustiAnimáciuPospiatku.
void
spustiAnimáciuPospiatku(int početOpakovaní)
Spustí animáciu pospiatku so zadaným počtom opakovaní.
void
spustiDopredu()
Spustí animáciu dopredu s nekonečným počtom opakovaní.
void
spustiDopredu(int početOpakovaní)
Spustí animáciu dopredu so zadaným počtom opakovaní.
void
spustiPospiatku()
Spustí animáciu pospiatku s nekonečným počtom opakovaní.
void
spustiPospiatku(int početOpakovaní)
Spustí animáciu pospiatku so zadaným počtom opakovaní.
void
svetlejsi()
 Alias pre bledší.
void
svetlejsi(double faktor)
 Alias pre bledší.
void
svetlejší()
 Alias pre bledší.
void
svetlejší(double faktor)
 Alias pre bledší.
void
svetlo(Obrázok osvetlenie)
Táto metóda použije na tento obrázok zadanú svetelnú masku.
void
svetlo(Obrázok grafika,
      Obrázok osvetlenie)
Táto metóda použije na obrázok zadaný v prvom parametri
 (grafika) svetelnú masku zadanú v druhom parametri
 (osvetlenie) a výsledok zlúči do tejto (this)
 inštancie obrázka.
double
šírka()
Vráti šírku obrázka.
void
šírka(double šírka)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie šírky obrázka.
void
tmavsi()
 Alias pre tmavší.
void
tmavsi(double faktor)
 Alias pre tmavší.
void
tmavší()
Zníži úroveň svetlosti tohto obrázka.
void
tmavší(double faktor)
Zníži úroveň svetlosti tohto obrázka.
double
trvanie()
Zistí hodnotu trvania zobrazenia aktívnej snímky.
void
trvanie(double trvanie)
Nastaví novú hodnotu trvania aktívnej snímky.
double
trvanie(int indexSnímky)
Zistí hodnotu trvania zobrazenia zadanej snímky.
void
trvanie(int indexSnímky,
       double trvanie)
Nastaví novú hodnotu trvania zadanej snímky.
double
trvanieZobrazeniaSnimky()
 Alias pre trvanieZobrazeniaSnímky.
double
trvanieZobrazeniaSnímky()
Zistí hodnotu trvania zobrazenia aktívnej snímky.
void
trvanieZobrazeniaSnimky(double trvanie)
 Alias pre trvanieZobrazeniaSnímky.
void
trvanieZobrazeniaSnímky(double trvanie)
Nastaví novú hodnotu trvania aktívnej snímky.
double
trvanieZobrazeniaSnimky(int indexSnímky)
 Alias pre trvanieZobrazeniaSnímky.
double
trvanieZobrazeniaSnímky(int indexSnímky)
Zistí hodnotu trvania zobrazenia zadanej snímky.
void
trvanieZobrazeniaSnimky(int indexSnímky,
                       double trvanie)
 Alias pre trvanieZobrazeniaSnímky.
void
trvanieZobrazeniaSnímky(int indexSnímky,
                       double trvanie)
Nastaví novú hodnotu trvania zadanej snímky.
void
uloz(String súbor)
 Alias pre ulož.
void
uloz(String súbor,
    boolean prepísať)
 Alias pre ulož.
void
ulož(String súbor)
Uloží obrázok do súboru.
void
ulož(String súbor,
    boolean prepísať)
Uloží obsah obrázka do súboru.
void
upravJasKontrast(double jas,
                double kontrast)
Upraví parametre jasu a kontrastu celého obrázka.
void
upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
void
upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti obráza.
Vlnenie
vlnenie()
Vráti inštanciu vlnenia pre tento obrázok,
 aby bolo možné s vlnením ďalej pracovať.
void
vlozSnimku(int indexSnímky)
 Alias pre vložSnímku.
void
vlozSnimku(int indexSnímky,
          Image obrázok)
 Alias pre vložSnímku.
void
vlozSnimku(int indexSnímky,
          Image obrázok,
          double trvanie)
 Alias pre vložSnímku.
void
vložSnímku(int indexSnímky)
Vloží novú snímku animácie na zadanú pozíciu s aktuálnou
 (naposledy použitou) hodnotou trvania
 zobrazenia a s aktuálnou grafikou obrázka.
void
vložSnímku(int indexSnímky,
          Image obrázok)
Vloží novú snímku animácie na zadanú pozíciu s aktuálnou
 (naposledy použitou) hodnotou trvania
 zobrazenia a so zadanou grafikou.
void
vložSnímku(int indexSnímky,
          Image obrázok,
          double trvanie)
Vloží novú snímku animácie na zadanú pozíciu so zadanou grafikou
 a so zadanou hodnotou trvania jej zobrazenia.
void
vylejFarbu(double x,
          double y,
          Color farba)
Vyleje do zadaného bodu do obrázka farbu, ktorá sa odtiaľ
 rozšíri po okraje tej časti kresby v obrázku, v ktorej sa zadaný
 bod nachádza.
void
vylejFarbu(double x,
          double y,
          Farebnosť objekt)
Vyleje do zadaného bodu do obrázka farbu (určenú objektom),
 ktorá sa odtiaľ rozšíri po okraje tej časti kresby v obrázku,
 v ktorej sa zadaný bod nachádza.
Farba
vylejFarbu(double x,
          double y,
          int r,
          int g,
          int b)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby.
Farba
vylejFarbu(double x,
          double y,
          int r,
          int g,
          int b,
          int a)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 z určeného bodu rozšíri k okrajom okolitej kresby.
void
vylejFarbu(GRobot ktorý)
Zadaný robot vyleje na svojej pozícii do obrázka svoju aktuálnu
 farbu, ktorá sa odtiaľ rozšíri po
 okraje okolitej kresby.
void
vylejFarbu(Poloha bod,
          Color farba)
Vyleje do zadaného bodu do obrázka farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby v obrázku, v ktorej sa zadaný bod
 nachádza.
void
vylejFarbu(Poloha bod,
          Farebnosť objekt)
Vyleje do zadaného bodu do obrázka farbu (určenú objektom), ktorá
 sa odtiaľ rozšíri po okraje tej časti kresby v obrázku, v ktorej
 sa zadaný bod nachádza.
Farba
vylejFarbu(Poloha bod,
          int r,
          int g,
          int b)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby.
Farba
vylejFarbu(Poloha bod,
          int r,
          int g,
          int b,
          int a)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 z určeného bodu rozšíri k okrajom okolitej kresby.
void
vymaz()
 Alias pre vymaž.
boolean
vymazKresbu(BufferedImage kresba)
 Alias pre vymažKresbu.
void
vymazSnimku()
 Alias pre vymažSnímku.
void
vymazSnimku(int indexSnímky)
 Alias pre vymažSnímku.
void
vymaž()
Vymaže obsah obrázka.
boolean
vymažKresbu(BufferedImage kresba)
Použije na tento obrázok filter vyrobený zo zložky jasu kresby
 zadaného/predloženého obrázka.
void
vymažSnímku()
Vymaže aktuálnu snímku animácie a aktivuje najbližšiu dostupnú
 snímku.
void
vymažSnímku(int indexSnímky)
Vymaže zadanú snímku animácie a ak to bola aktívna snímka,
 tak aktivuje najbližšiu dostupnú snímku.
void
vypln(Color farba)
 Alias pre vyplň.
void
vyplň(Color farba)
Vyplní celú plochu obrázka zadanou farbou.
void
vypln(Farebnosť objekt)
 Alias pre vyplň.
void
vyplň(Farebnosť objekt)
Vyplní celú plochu obrázka farbou zadaného objektu.
void
vypln(Image výplň)
 Alias pre vyplň.
void
vyplň(Image výplň)
Vyplní obrázok zadanou textúrou.
Farba
vypln(int r,
     int g,
     int b)
 Alias pre vyplň.
Farba
vyplň(int r,
     int g,
     int b)
Vyplní obrázok farbou zadanou prostredníctvom farebných
 zložiek.
Farba
vypln(int r,
     int g,
     int b,
     int a)
 Alias pre vyplň.
Farba
vyplň(int r,
     int g,
     int b,
     int a)
Vyplní obrázok farbou zadanou prostredníctvom farebných zložiek
 a úrovne (ne)priehľadnosti.
void
vypln(Shape tvar)
 Alias pre vyplň.
void
vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov do obrázka.
void
vypln(Shape tvar,
     GRobot kreslič)
 Alias pre vyplň.
void
vyplň(Shape tvar,
     GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov do obrázka.
void
vypln(Shape tvar,
     Image výplň)
 Alias pre vypln.
void
vyplň(Shape tvar,
     Image výplň)
Vyplní zadaný tvar textúrou určenou zadaným obrázkom a výsledok
 nakreslí do tohto obrázka.
void
vypln(Shape tvar,
     String súbor)
 Alias pre vypln.
void
vyplň(Shape tvar,
     String súbor)
Vyplní zadaný tvar textúrou prečítanou zo súboru s obrázkom
 a výsledok nakreslí do obrázka.
void
vypln(String súbor)
 Alias pre vyplň.
void
vyplň(String súbor)
Vyplní obrázok zadanou textúrou.
BufferedImage
vyrobMasku()
Vyrobí z tohto obrázka masku priehľadnosti.
boolean
vyrobMasku(BufferedImage nováMaska)
Vyrobí z tohto obrázka do zadaného obrázka masku priehľadnosti.
double
vyska()
 Alias pre výška.
void
vyska(double výška)
 Alias pre šírka.
double
výška()
Vráti šírku obrázka.
void
výška(double výška)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie výšky obrázka.
void
zastav()
Zastaví prehrávanie animácie tohto obrázka.
void
zastavAnimaciu()
 Alias pre zastav.
void
zastavAnimáciu()
 Alias pre zastav.
Obrazok
zmenVelkost(double mierka)
 Alias pre zmeňVeľkosť.
Obrázok
zmeňVeľkosť(double mierka)
Vyrobí nový novú verziu tohto obrázka, ktorej zmení veľkosť podľa
 zadanej mierky.
Obrazok
zmenVelkost(int nováŠírka,
           int nováVýška)
 Alias pre zmeňVeľkosť.
Obrázok
zmeňVeľkosť(int nováŠírka,
           int nováVýška)
Vyrobí nový novú verziu tohto obrázka, ktorej zmení veľkosť podľa
 zadaných rozmerov.
void
zrusKreslica()
 Alias pre zrušKresliča.
void
zrusPriehladnost()
 Alias pre zrušPriehľadnosť.
void
zrušKresliča()
Zruší kresliča obrázka.
void
zrušPriehľadnosť()
Zruší priehľadnosť všetkých bodov v obrázku.
Metódy zdedené z triedy java.awt.image.BufferedImage
addTileObserver, coerceData, copyData, createGraphics, getAlphaRaster, getColorModel, getData, getData, getGraphics, getHeight, getHeight, getMinTileX, getMinTileY, getMinX, getMinY, getNumXTiles, getNumYTiles, getProperty, getProperty, getPropertyNames, getRaster, getRGB, getRGB, getSampleModel, getSource, getSources, getSubimage, getTile, getTileGridXOffset, getTileGridYOffset, getTileHeight, getTileWidth, getTransparency, getType, getWidth, getWidth, getWritableTile, getWritableTileIndices, hasTileWriters, isAlphaPremultiplied, isTileWritable, releaseWritableTile, removeTileObserver, setData, setRGB, setRGB, toString
Metódy zdedené z triedy java.awt.Image
flush, getAccelerationPriority, getCapabilities, getScaledInstance, setAccelerationPriority
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
šírka
public final int šírka
Šírka obrázka. Konštanta má rovnakú hodnotu, akú vracia metóda
 šírka.
sirka
public final int sirka
Šírka obrázka. Konštanta má rovnakú hodnotu, akú vracia metóda
 šírka.
výška
public final int výška
Výška obrázka. Konštanta má rovnakú hodnotu, akú vracia metóda
 výška.
vyska
public final int vyska
Výška obrázka. Konštanta má rovnakú hodnotu, akú vracia metóda
 výška.
grafika
public final Graphics2D grafika
Grafika obrázka (pre potreby kreslenia do obrázka). Robot má
 dostatok nástrojov (metód) na kreslenie. Ak potrebujete priamy
 prístup ku grafickému objektu obrázka
 (a využívať jeho metódy – ide o triedu Graphics2D), použite na prístup k nemu túto konštantu alebo
 metódu grafika, ktorá vracia rovnaký objekt.
 Používajte tento objekt ojedinele, pretože inštancie triedy
 obrázok mierne prispôsobujú svoj súradnicový priestor, aby boli
 lepšie použiteľné v prostredí programovacieho rámca grafického
 robota.
 
 Poznámka: Súradnicový priestor obrázka
 je posunutý tak, aby počiatok súradnicovej sústavy grafického
 robota ležal v strede obrázka. Predpokladá sa, že všetky
 objekty smerujúce do obrázka budú generované robotom a ten
 generuje tvary tak, aby boli priamo použiteľné v súradnicovom
 priestore Javy, ibaže v prepočte vzhľadom k rozmerom plátien,
 preto má obrázok svoj priestor posunutý.
 O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.
Podrobnosti konštruktorov
Obrázok
public Obrázok()
Predvolený konštruktor. Vytvorí nový prázdny obrázok s rozmermi
 plátna.
Obrázok
public Obrázok(int šírka,
               int výška)
Konštruktor, ktorý vytvorí nový prázdny obrázok so zadanými
 rozmermi (v bodoch).
Parametre:
šírka – šírka nového obrázka
výška – výška nového obrázka
Obrázok
public Obrázok(Image obrázok)
Vytvorí nový obrázok podľa zadaného obrázka ako predlohy. Nový
 obrázok bude mať rozmery aj obsah predlohy. Konštruktor najskôr
 vytvorí prázdny obrázok s rozmermi predlohy a potom do neho
 prekreslí obsah predlohy.
 
 Ak potrebujete vytvoriť nový obrázok prečítaný zo súboru, použite
 metódu Obrázok.čítaj(názovSúboru).
Parametre:
obrázok – obrázoky predlohy
Podrobnosti metód
priečinokObrázkov
public static void priečinokObrázkov(String priečinok)
Ak sú všetky obrázky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
 Priečinok by sa mal nachádzať v hlavnom priečinku projektu alebo by
 k nemu mala viesť systémovo nezávislá relatívna cesta. Zadaním
 prázdneho reťazca alebo hodnoty null používanie
 priečinka zrušíme.
Parametre:
priečinok – názov priečinka, relatívna cesta, prípadne
     prázdny reťazec alebo null
Pozri tiež:
Svet.priečinokObrázkov()
priecinokObrazkov
public static void priecinokObrazkov(String priečinok)
 Alias pre priečinokObrázkov.
priečinokObrázkov
public static String priečinokObrázkov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú obrázky
 prečítané. Reťazec je obohatený o oddeľovací znak priečinkov java.io.File.separatorChar (/ alebo
 \ – záleží na type operačného systému), ktorý automaticky
 pridáva metóda priečinokObrázkov(priečinok). Rovnako všetky oddeľovacie znaky
 priečinkov v relatívnej ceste sú nahradené podľa typu operačného
 systému.
Návratová hodnota:
aktuálny priečinok, z ktorého sú obrázky prečítané
Pozri tiež:
Svet.priečinokObrázkov(String)
priecinokObrazkov
public static String priecinokObrazkov()
 Alias pre priečinokObrázkov.
čítaj
public static Obrázok čítaj(String súbor)
Prečíta do vnútornej pamäte sveta zadaný obrázok zo súboru
 a vytvorí z neho nový objekt typu Obrázok.
 
 Táto metóda uzatvára funkcionalitu metódy Svet.čítajObrázok(súbor), ibaže
 naviac z objektu typu Image (ktorý zostáva uložený
 vo vnútornej pamäti sveta) automaticky vytvára nový objekt Obrázok.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Táto metóda je schopná čítať aj animácie
 uložené vo formáte GIF (z dôvodu obmedzení tohto formátu ho
 neodporúčame používať na ukladanie nových animácií) a tiež sekvencie
 uložené v číslovaných obrázkových súboroch vo formáte PNG (čo je
 lepšia alternatíva na ukladanie plnofarebných animácií, na druhej
 strane má tú nevýhodu, že nevie automaticky uložiť informácie
 o trvaní zobrazenia jednotlivých snímok a predvolene pracuje
 s hodnotou 40 ms nastavenou pre každú snímku). Podrobnejšie
 informácie o PNG sekvenciách sú v opise metódy ulož(súbor, prepísať).
 
 Upozornenie: Pri čítaní animácie z PNG
 sekvencie sú do vnútorného zoznamu zdrojov sveta uložené všetky
 obrázky sekvencie. (Príklad s PNG sekvenciou je uvedený nižšie,
 pod príkladom s animovaným GIFom.)
 
 Príklad:
 
 Ako bolo povedané, programovací rámec dokáže čítať a pracovať
 s animovanými obrázkami vo formáte GIF. Je to historický formát
 s určitými (najmä farebnými) obmedzeniami, ale stále nachádza svoje
 použitie. Nasledujúci príklad ukazuje, ako takýto súbor prečítať
 a animovať s použitím programovacieho rámca GRobot.
 
  
srdce.gif – animovaný obrázok na
 prevzatie, ktorý potrebuje tento príklad na to, aby
 fungoval 
 
 
import knižnica.*;
public class AnimujGIF extends GRobot
{
    // Súkromná statická inštancia obrázka, ktorý budeme animovať. Statickosť
    // umožňuje jej použitie v hlavnej metóde, ktorá musí byť statická.
    private static Obrázok animovanýObrázok;
    // Hlavná metóda. (Obvykle ju umiestňujeme na koniec súboru. Je to taká
    // dohoda, zvyk medzi programátormi v Jave, ale z pohľadu samotného jazyka
    // je jedno, kde je jej definícia umiestnená. Teraz sme ju presunuli sem,
    // lebo na komentáre v nej logicky nadväzujú komentáre v konštruktore
    // tejto triedy.)
    public static void main(String... args)
    {
        // Skryjeme svet (čiže okno aplikácie).
        Svet.skry();
        // Vopred prečítame animovaný obrázok zo súboru, aby sme podľa jeho
        // rozmerov mohli upraviť rozmery sveta v konštruktore:
        animovanýObrázok = Obrázok.čítaj("srdce.gif");
        // Vytvorenie anonymnej inštancie tejto triedy (konštruktor triedy
        // odvodenej od robota vždy zabezpečí vytvorenie aplikácie):
        new AnimujGIF();
        // Spustenie animácie:
        animovanýObrázok.spusti();
        // Spustenie časovača:
        Svet.spustiČasovač(0.020);
        // Automatické nastavenie veľkosti a polohy okna sveta (t. j.
        // aplikácie) a jeho zobrazenie:
        Svet.zbaľ();
        Svet.vystreď();
        Svet.zobraz();
    }
    // Súkromný konštruktor.
    private AnimujGIF()
    {
        // Spustenie tej verzie nadradeného konštruktora, ktorá umožňuje
        // zmeniť rozmery plátien sveta:
        super(animovanýObrázok.šírka, animovanýObrázok.výška);
        // Skrytie robota:
        skry();
    }
    // Reakcia na časovač – pravidelne prekresľuje animovaný obrázok, ktorého
    // animácia je vykonávaná automaticky (vnútornými mechanizmami sveta).
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            obrázok(animovanýObrázok);
        }
    }
}
 
 Výsledok:
 
  Táto animácia
 bude zobrazená v okne aplikácie.
 
  
 
 Príklad:
 
 Tento príklad ukazuje ako prečítať PNG sekvenciu s použitím
 rovnakej šablóny názvu súborov, akú používa druhý príklad uvedený
 v opise metódy ulož(súbor,
 prepísať). Dotknutý príklad generuje súbory použiteľné s týmto
 príkladom, preto je vhodné sa zaoberať najskôr ním. (Generovanie
 môže trvať aj sedem minút, podľa výkonnosti hadvéru,
 a vygenerované súbory budú dohromady zaberať okolo 120 MB.)
 
 V súlade s informáciami uvedenými v opise metódy
 ulož(súbor, prepísať) platí, že ak
 táto metóda pri čítaní sekvencie nájde súbor s poradovým číslom
 nula, tak ho prečíta ako neanimovaný obrázok a už sa nepokúša
 hľadať ďalšie súbory vyhovujúce kritériám šablóny názvov súborov
 animovanej sekvencie. Inak postupuje pri čítaní systematicky
 a pridáva snímky do prečítanej animácie dovtedy, kým jestvujú
 súbory v neprerušenej sekvencii podľa určenej šablóny.
 
 Poznámka: Metóda ulož(súbor, prepísať) dokáže vygenerovať len PNG
 sekvenciu, ale táto metóda (čítaj(súbor)) je schopná
 prečítať aj sekvenciu vo formáte JPEG. JPEG je stratový formát
 a neumožňuje ukladanie (polo)priehľadných bodov. Je však vhodný na
 ukladanie fotografií, kde sa jeho kompresné artefakty vizuálne
 strácajú (opticky zanikajú v grafickej komplikovanosti obrazu),
 čím sa lepšie uplatňuje jeho kompresný benefit. JPEG sekvencie
 môžete použiť na simulovanie prehrávania videa, ak takú sekvenciu
 vyrobíte s použitím externého softvéru a zachováte pravidlá
 pomenovania šablón s rozdielom prípony – namiesto .png
 musí byť uvedená .jpg alebo .jpeg
 
 
import knižnica.*;
public class AnimujSekvenciuPNG extends GRobot
{
    // Inštancia obrázka, ktorý bude obsahovať a animovať prečítanú sekvenciu.
    private Obrázok animovanýObrázok;
    // Aktuálne „percento“ prečítaných snímok vypočítané v reakcii „sekvencia“
    // (v skutočnosti hodnota v rozsahu od 0.0 do 1.0, ktorá je použitá na
    // zobrazenie percent):
    private double percento = 0.0;
    // Nastavenie začiatočného stavu aplikácie (po prečítaní sekvencie sa
    // zmení na false):
    private boolean čítam = true;
    // Názov naposledy prečítaného súboru sekvencie:
    private String naposledyPrečítaný = "";
    // Súkromný konštruktor.
    private AnimujSekvenciuPNG()
    {
        // Spustenie tej verzie nadradeného konštruktora, ktorá umožňuje
        // zmeniť rozmery plátien sveta:
        super(Svet.šírkaObrázka("sekvencia/nahodne-ciary-001.png"),
            Svet.výškaObrázka("sekvencia/nahodne-ciary-001.png"));
        // Počas čítania pozastavíme automatické prekresľovanie (aby
        // kreslenie v reakcii sekvencia „neblikalo“):
        Svet.nekresli();
        // Automatické nastavenie veľkosti a polohy okna sveta
        // (t. j. aplikácie):
        Svet.zbaľ();
        Svet.vystreď();
        // Skrytie robota:
        skry();
        // Spustíme časomieru, pretože chceme vedieť ako dlho potrvá čítanie
        // PNG sekvencie a časovač, aby mohlo byť aktualizované zobrazovanie
        // priebehu čítania:
        Svet.spustiČasomieru();
        Svet.spustiČasovač(0.250);
        // Prečítanie PNG sekvencie:
        animovanýObrázok = Obrázok.čítaj("sekvencia/nahodne-ciary-***.png");
        // Zastavíme časomieru aj časovač a zobrazíme výsledok (na konzole):
        double čas = Svet.zastavČasomieru();
        Svet.zastavČasovač();
        System.out.println("Čítanie animácie trvalo: " +
            Math.round(čas / 60) + " min " + F(čas % 60, 2) + " s");
        // Prečítané – odteraz treba zobrazovať animáciu:
        čítam = false;
        // Nastavíme čiernu farbu pozadia:
        Svet.farbaPozadia(čierna);
        // A spustíme animáciu a časovač:
        animovanýObrázok.spusti();
        Svet.spustiČasovač(0.040);
        // Obnovíme automatické prekresľovanie, aby sme videli priebeh
        // animácie:
        Svet.kresli();
    }
    // Táto reakcia je automaticky spúšťaná počas čítania (alebo zápisu)
    // animovanej PNG sekvencie. Používame ju na aktualizovanie informácie
    // o stave čítania zobrazenej na obrazovke pre používateľa cez reakciu tik.
    @Override public void sekvencia(int kódSpracovania, String zdroj,
        String cieľ, long stav, long celkovo)
    {
        // Vypočítame percento prečítanej animácie a uložíme názov súboru:
        percento = (double)stav / (double)celkovo;
        naposledyPrečítaný = zdroj;
        // Žiadame prekreslenie, čo bude spracované v reakcii tik:
        Svet.žiadajPrekreslenie();
    }
    // Reakcia na časovač – pravidelne prekresľuje animovaný obrázok, ktorého
    // animácia je vykonávaná automaticky (vnútornými mechanizmami sveta).
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
        {
            // Reakcia slúži na zobrazovanie priebehu čítania aj na
            // zobrazovanie prečítanej animácie. V obidvoch prípadoch najprv
            // vymažeme grafiku podlahy:
            podlaha.vymažGrafiku();
            // Potom podľa stavu aplikácie zobrazíme priebeh alebo animovaný
            // obrázok:
            if (čítam)
            {
                // Nasledujúce príkazy kreslia jednoduchý ukazovateľ priebehu
                // obsahujúci informačný text o aktuálnom percente a naposledy
                // prečítanom súbore:
                skoč(percento * 200 &#45; 200, 0);
                farba(svetlošedá);
                vyplňObdĺžnik(percento * 200, 10);
                farba(čierna);
                skočNa(0, 0);
                kresliObdĺžnik(200, 10);
                text(F(percento * 100.0, 0) + " % (" +
                    naposledyPrečítaný + ")");
                // Prekreslíme obrazovku, aby bolo vidno aktuálny stav
                // priebehu:
                Svet.prekresli();
            }
            else
                obrázok(animovanýObrázok);
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        // Vytvorenie anonymnej inštancie tejto triedy (konštruktor triedy
        // odvodenej od robota vždy zabezpečí vytvorenie aplikácie):
        new AnimujSekvenciuPNG();
    }
}
 
 Opis priebehu a výsledku:
 
 Počas čítania bude na obrazovke premietaný stav priebehu čítania
 s názvom naposledy prečítaného súboru. Kód spracovania reakcie
 sekvencia
 sme v príklade nepoužili. V tomto prípade mal hodnotu konštanty
 ČÍTANIE_PNG_SEKVENCIE.
 (V prípade čítania animáce z formátu GIF je hodnota rovná
 hodnote konštanty ČÍTANIE_GIF_ANIMÁCIE.) Podľa nami nameraných hodnôt trvalo čítanie
 sekvencie od osem do dvanásť sekúnd.
 
 Výsledkom vykonania tohto príkladu bude spustenie animácie
 prečítanej zo sekvencie súborov vo formáte PNG (uloženej na
 disku). Grafické súbory potrebné na fungovanie tohto príkladu je
 schopný vytvoriť v poradí druhý príklad uvedený v opise metódy
 ulož(súbor, prepísať) (preto je
 vhodné sa zaoberať najskôr ním).
 
 
 
 
 Ukážky možného vzhľadu
 prečítanej animáce, ak bola sekvencia vygenerovaná príkladom
 z opisu metódy ulož(súbor, prepísať)
 (plátno ukážok je úmyselne
 zmenšené).
 
 Na 32-bitových operačných systémoch sa môže stať, že aplikácia
 nebude mať dostatok pamäte na vykonanie. V takom prípade skúste
 cez príkazový riadok operačného systému spustiť aplikáciu
 nasledujúcim príkazom potvrdeným v priečinku s preloženou
 aplikáciou:
 
 
java -Xmx1g AnimujSekvenciuPNG
 
 V prípade, že táto metóda nenájde dostatok miesta v pamäti na
 prečítanie celej sekvencie, tak uvoľní obrázok z pamäti a vráti
 hodnotu null. Tiež upozorní všetky inštancie sledujúce
 čítanie sekvencie reakciou sekvencia a/alebo aktívnu obsluhu udalostí
 s definovanou reakciou sekvencia poslaním informácií
 platných v čase zlyhania s kódom spracovania CHYBA_ČÍTANIA_PNG_SEKVENCIE.
 
  
Parametre:
súbor – názov súboru s obrázkom
Návratová hodnota:
obrázok v novom objekte typu Obrázok
     (prípadne null ak pokus o prečítanie sekvencie
     zlyhal z pamäťových dôvodov)
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
Svet.priečinokObrázkov(String)
citaj
public static Obrazok citaj(String súbor)
 Alias pre čítaj.
prečítaj
public static Obrázok prečítaj(String súbor)
 Alias pre čítaj.
precitaj
public static Obrazok precitaj(String súbor)
 Alias pre čítaj.
šírka
public double šírka()
Vráti šírku obrázka. Ide prakticky o rovnaký údaj, aký je
 uložený v konštante šírka, ibaže vo forme reálneho
 čísla, keďže inde zároveň o implementáciu metódy rozhrania
 Rozmer.
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
šírka obrázka
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
Vráti šírku obrázka. Ide prakticky o rovnaký údaj, aký je
 uložený v konštante výška, ibaže vo forme reálneho
 čísla, keďže inde zároveň o implementáciu metódy rozhrania
 Rozmer.
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
výška obrázka
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
šírka
public void šírka(double šírka)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie šírky obrázka. Keďže je však obrázok rozmerovo
 nemenný (angl. immutable), produkuje táto metóda vždy výnimku
 GRobotException s identifikátorom
 imageSizeImmutable.
Definované:
šírka v rozhraní Rozmer
Výnimky:
GRobotException – vždy – obrázok je rozmerovo nemenný
     (identifikátor imageSizeImmutable)
sirka
public void sirka(double šírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double výška)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie výšky obrázka. Keďže je však obrázok rozmerovo
 nemenný (angl. immutable), produkuje táto metóda vždy výnimku
 GRobotException s identifikátorom
 imageSizeImmutable.
Definované:
výška v rozhraní Rozmer
Výnimky:
GRobotException – vždy – obrázok je rozmerovo nemenný
     (identifikátor imageSizeImmutable)
vyska
public void vyska(double výška)
 Alias pre šírka.
Definované:
vyska v rozhraní Rozmer
rozmery
public Rozmer rozmery()
Vráti rozmery obrázka v implementácii rozhrania Rozmer. Konkrétne ide o inštanciu triedy Rozmery.
Definované:
rozmery v rozhraní Rozmer
Návratová hodnota:
inštancia rozmerov tohto obrázka
rozmery
public void rozmery(Rozmer rozmer)
Implementácia metódy rozhrania Rozmer určenej
 na nastavenie obidvoch rozmerov obrázka. Keďže je však obrázok
 rozmerovo nemenný (angl. immutable), produkuje táto metóda vždy
 výnimku GRobotException s identifikátorom
 imageSizeImmutable.
Definované:
rozmery v rozhraní Rozmer
Výnimky:
GRobotException – vždy – obrázok je rozmerovo nemenný
     (identifikátor imageSizeImmutable)
máŠírku
public boolean máŠírku(double šírka)
Overí zhodu šírky obrázka so zadanou hodnotou.
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – hodnota šírky na porovnanie
Návratová hodnota:
true ak sa šírka obrázka zhoduje so
     zadanou hodnotou, false v opačnom prípade
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Overí zhodu výšky obrázka so zadanou hodnotou.
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – hodnota výšky na porovnanie
Návratová hodnota:
true ak sa výška obrázka zhoduje so
     zadanou hodnotou, false v opačnom prípade
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí zhodu rozmerov obrázka so zadanými rozmermi.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – hodnota šírky na porovnanie
výška – hodnota výšky na porovnanie
Návratová hodnota:
true ak sa rozmery obrázka zhodujú so
     zadanými rozmermi, false v opačnom prípade
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí zhodu rozmerov obrázka s rozmermi zadaného objektu.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi obrázka
Návratová hodnota:
true ak sa rozmery obrázka zhodujú s rozmermi
     zadaného objektu, false v opačnom prípade
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
zmeňVeľkosť
public Obrázok zmeňVeľkosť(double mierka)
Vyrobí nový novú verziu tohto obrázka, ktorej zmení veľkosť podľa
 zadanej mierky.
 
 Príklad:
 
 
import knižnica.*;
public class TestZmenyVeľkosti extends GRobot
{
    private final Zoznam&lt;Obrázok&gt; obrázky = new Zoznam&lt;Obrázok&gt;();
    private TestZmenyVeľkosti()
    {
        // Najprv vyrobíme a nakreslíme obrázok:
        Obrázok obrázok = new Obrázok(100, 100);
        kresliNaObrázok(obrázok);
        farba(žltá);
        vyplň();
        hrúbkaČiary(1);
        farba(červená);
        kružnica(45);
        farba(zelená);
        štvorec(25);
        farba(tyrkysová);
        hrúbkaČiary(2);
        for (int i = 0; i &lt; 18; ++i)
        {
            skočNa(0, 0);
            vpravo(20);
            dopredu(47);
        }
        domov();
        farba(modrá);
        kruh(5);
        kresliNaPodlahu();
        // Potom postupne zmeníme jeho rozmer v rozmedzí mierok 0.33 – 3.0…
        for (double mierka = 0.33; mierka &lt;= 3.0; mierka += 0.025)
        {
            veľkosť(10 * mierka);   // nepovinné – veľkosť robota bude
                                    // indikovať fázu procesu
            obrázky.pridaj(obrázok.zmeňVeľkosť(mierka));
        }
        // …a späť. (Obrázky so zmenenou veľkosťou ukladáme do zoznamu.)
        for (double mierka = 3.0; mierka &gt;= 0.33; mierka -= 0.025)
        {
            veľkosť(10 * mierka);   // nepovinné – veľkosť robota bude
                                    // indikovať fázu procesu
            obrázky.pridaj(obrázok.zmeňVeľkosť(mierka));
        }
        // Konštantná uhlová rýchlosť zabezpečí rotáciu obrázka
        uhlováRýchlosť(0.5);
    }
    @Override public void aktivita()
    {
        // Zmena vlastného tvaru robota postupným výberom prvkov zoznamu
        // zabezpečí ukážku kontinuálnej zmeny obrázka v rozmedzí mierok,
        // ktoré sme použili v konštruktore.
        vlastnýTvar(obrázky.ďalší());
    }
    public static void main(String[] args)
    {
        new TestZmenyVeľkosti();
    }
}
 
 Výsledok:
 
 
 Ukážka výsledku – jedna z verzií
 zväčšeného obrázka vo fáze otáčania sa okolo svojej osi.
Parametre:
mierka – mierka 0.5 znamená, že výsledný obrázok
     bude polovičný; mierka 2.0 znamená, že výsledný
     obrázok bude dvojnásobný
Návratová hodnota:
nová verzia obrázka (v novom objekte typu
     Obrázok)
zmenVelkost
public Obrazok zmenVelkost(double mierka)
 Alias pre zmeňVeľkosť.
zmeňVeľkosť
public Obrázok zmeňVeľkosť(int nováŠírka,
                           int nováVýška)
Vyrobí nový novú verziu tohto obrázka, ktorej zmení veľkosť podľa
 zadaných rozmerov.
Parametre:
nováŠírka – šírka novej verzie obrázka
nováVýška – šírka novej verzie obrázka
Návratová hodnota:
nová verzia obrázka (v novom objekte typu
     Obrázok)
zmenVelkost
public Obrazok zmenVelkost(int nováŠírka,
                           int nováVýška)
 Alias pre zmeňVeľkosť.
grafika
public Graphics2D grafika()
Vráti objekt grafiky obrázka (pre potreby kreslenia do obrázka).
 Robot má dostatok nástrojov (metód) na kreslenie. Ak potrebujete
 priamy prístup ku grafickému objektu
 obrázka (a využívať jeho metódy – ide o triedu Graphics2D), použite na prístup k nemu túto metódu alebo
 konštantu grafika, ktorá obsahuje rovnaký
 objekt, aký vracia táto metóda. Používajte tento objekt
 ojedinele, pretože inštancie triedy obrázok mierne prispôsobujú
 svoj súradnicový priestor, aby boli lepšie použiteľné v prostredí
 programovacieho rámca grafického robota.
 
 (Na spresnenie: Súradnicový priestor obrázka je posunutý tak,
 aby počiatok súradnicovej sústavy programovacieho rámca GRobot
 ležal v strede obrázka. Predpokladá sa totiž, že všetky objekty
 tvarov určené na nakreslenie do obrázka budú generované robotom
 a ten generuje tvary tak, aby boli priamo použiteľné
 v súradnicovom priestore Javy, ibaže v prepočte vzhľadom
 k rozmerom plátien, preto má obrázok svoj priestor posunutý.
 Viac sa o súradnicových priestoroch píše napríklad v opisoch
 metód GRobot.cesta(),
 SVGpodpora.zapíš(…), SVGpodpora.čítaj(meno) a tiež priebežne v celej dokumentácii.)
Návratová hodnota:
objekt typu Graphics2D – grafika
     obrázka
kresliVšade
public void kresliVšade()
Zruší oblasť na obmedzenie kreslenia na tento obrázok.
Pozri tiež:
GRobot.kresliVšade(), 
kresliDo(Shape), 
nekresliDo(Shape)
kresliVsade
public void kresliVsade()
 Alias pre kresliVšade.
kresliDo
public void kresliDo(Shape tvar)
Obmedzí kreslenie na tento obrázok na plochu zadaného útvaru
 (Shape).
 
 Robot disponuje množinou metód na kreslenie tvarov (kružnica, elipsa, štvorec…), ktoré
 zároveň generujú tvary. Na ich použitie s touto metódou je dobré
 predtým kreslenie tvarov zakázať a neskôr opäť povoliť.
 Metóda text dokonca zákaz kreslenia
 tvarov požaduje, aby mohla vygenerovať tvar (bez zákazu má
 návratovú hodnotu null). Tvar je možné vytvoriť aj
 z cesty…
 
 Obmedzenie zužuje aktuálny priestor kreslenia, to znamená, že
 sa priebežne vytvára oblasť, ktorá je prienikom všetkých
 obmedzení. Ak chceme vytvoriť obmedzenie tvaru, ktorý je
 možné vytvoriť inou množinovou operáciou, môžeme na obmedzenie
 kreslenia použiť Oblasť (zadanú namiesto
 parametra tvar). Obmedzenia sú platné pre všetky
 roboty a zrušíme ich volaním metódy kresliVšade.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
GRobot.kresliDo(Shape), 
kresliVšade(), 
nekresliDo(Shape)
nekresliDo
public void nekresliDo(Shape tvar)
Vytvára obmedzenie kreslenia na tento obrázok.
 Funguje rovnako ako metóda kresliDo, ibaže obrátene – kreslenie je možné všade, okrem
 zadaného tvaru alebo oblasti.
 
 Rovnako ako pri metóde kresliDo, sa
 aj toto obmedzenie kombinuje s aktuálnymi obmedzeniami kreslenia
 a je platné pre všetky roboty. Všetky ombedzenia zrušíme
 volaním metódy kresliVšade.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
GRobot.nekresliDo(Shape), 
kresliDo(Shape), 
kresliVšade()
najmenšieX
public double najmenšieX()
 Zistí najmenšiu x-ovú súradnicu
 obrázka.
Návratová hodnota:
najmenšia x-ová súradnica obrázka
Pozri tiež:
najväčšieX(), 
najmenšieY(), 
najväčšieY()
najmensieX
public double najmensieX()
 Alias pre najmenšieX.
minimálneX
public double minimálneX()
 Alias pre najmenšieX.
minimalneX
public double minimalneX()
 Alias pre najmenšieX.
najmenšieY
public double najmenšieY()
 Zistí najmenšiu y-ovú súradnicu
 obrázka.
Návratová hodnota:
najmenšia y-ová súradnica obrázka
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najväčšieY()
najmensieY
public double najmensieY()
 Alias pre najmenšieY.
minimálneY
public double minimálneY()
 Alias pre najmenšieY.
minimalneY
public double minimalneY()
 Alias pre najmenšieY.
najväčšieX
public double najväčšieX()
 Zistí najväčšiu x-ovú súradnicu
 obrázka.
Návratová hodnota:
najväčšia x-ová súradnica obrázka
Pozri tiež:
najmenšieX(), 
najmenšieY(), 
najväčšieY()
najvacsieX
public double najvacsieX()
 Alias pre najväčšieX.
maximálneX
public double maximálneX()
 Alias pre najväčšieX.
maximalneX
public double maximalneX()
 Alias pre najväčšieX.
najväčšieY
public double najväčšieY()
 Zistí najväčšiu y-ovú súradnicu
 obrázka.
Návratová hodnota:
najväčšia y-ová súradnica obrázka
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najmenšieY()
najvacsieY
public double najvacsieY()
 Alias pre najväčšieY.
maximálneY
public double maximálneY()
 Alias pre najväčšieY.
maximalneY
public double maximalneY()
 Alias pre najväčšieY.
vymaž
public void vymaž()
Vymaže obsah obrázka. V podstate vyplní obrázok priehľadnou
 farbou.
vymaz
public void vymaz()
 Alias pre vymaž.
prepíšBod
public void prepíšBod(double x,
                      double y,
                      Color farba)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii zadanou farbou.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
farba – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(double x,
                      double y,
                      Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii farbou zadaného objektu.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
objekt – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(double x,
                      double y,
                      int farba)
Prepíše farebné zložky a zložku priehľadnosti bodu na zadanej
 pozícii zadanou kombináciou zložiek ARGB zakódovaných
 v celočíselnej hodnote.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
farba – celé číslo obsahujúce kombináciu farebných zložiek
     RGB a priehľadnosti
prepisBod
public void prepisBod(double x,
                      double y,
                      Color farba)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(double x,
                      double y,
                      Farebnosť objekt)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(double x,
                      double y,
                      int farba)
 Alias pre prepíšBod.
prepíšBod
public void prepíšBod(Poloha bod,
                      Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu zadanou farbou.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(Poloha bod,
                      Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu farbou zadaného objektu.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
objekt – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(Poloha bod,
                      int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii zadaného
 bodu zadanou kombináciou zložiek ARGB zakódovaných v celočíselnej
 hodnote.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – celé číslo obsahujúce kombináciu farebných zložiek
     RGB a priehľadnosti
prepisBod
public void prepisBod(Poloha bod,
                      Color farba)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(Poloha bod,
                      Farebnosť objekt)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(Poloha bod,
                      int farba)
 Alias pre prepíšBod.
kreslič
public GRobot kreslič()
 Vráti aktuálneho kresliča obrázka alebo
 null, ak nie je kreslič nastavený. Pre podrobnosti
 pozri informácie pri setteri vlastnosti
 kreslič.
Návratová hodnota:
grafický robot zvolený za kresliča alebo null,
     ak obrázok nemá nastaveného žiadneho konkrétneho kresliča
kreslic
public GRobot kreslic()
 Alias pre kreslič.
kreslič
public void kreslič(GRobot kreslič)
 Nastaví „kresliča“ obrázka – grafického
 robota, ktorý bude slúžiť na alternatívne kreslenie a vypĺňanie
 tvarov v rámci obrázka. Vlastnosť je určená na kombinované
 fungovanie s metódami kresli
 a vyplň. (Tie sú v súčasnosti považované
 za metódy, ktoré poskytujú alternatívny spôsob kreslenia
 a vypĺňania tvarov do obrázka. Podrobnosti nájdete v ich opisoch.)
 Novému zvolenému kresličovi bude automaticky vypnuté kreslenie tvarov, pričom jeho
 štandardné kresliace schopnosti (kreslenie pri pohybe dopredu, dozadu a podobne, pri položenom
 pere) zostávajú zachované. Prípadnému starému kresličovi bude
 kreslenie tvarov automaticky
 zapnuté.
 
 Táto vlastnosť je určená výhradne na použitie s metódami
 kresli a vyplň, ktoré
 očakávajú výstupy z metód robota na kreslenie tvarov (kruh, elipsa, štvorec a podobne). Nie je
 dobré túto vlastnosť kombinovať s úplným presmerovaním kreslenia robota do
 obrázka. Mohlo by dôjsť k neočakávaným výsledkom.
 
 Keď chceme kresliča zrušiť, pošleme do argumentu tejto metódy
 hodnotu null alebo použijeme metódu zrušKresliča.
Parametre:
kreslič – nový kreslič (grafický robot) alebo null
kreslic
public void kreslic(GRobot kreslič)
 Alias pre kreslič.
zrušKresliča
public void zrušKresliča()
Zruší kresliča obrázka. Pre podrobnosti pozri informácie pri
 setteri vlastnosti kreslič – volanie
 tejto metódy má rovnaký efekt ako spustenie metódy
 kreslič s hodnotou argumentu
 null.
zrusKreslica
public void zrusKreslica()
 Alias pre zrušKresliča.
kresli
public void kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru do obrázka.
 Ak má tento objekt obrázka nastaveného takzvaného
 kresliča, tak táto metóda použije na
 nakreslenie jeho farbu alebo náter a štýl čiary.
 V opačnom prípade použije hlavný
 robot.
 
 Zadaný tvar by mal byť vygenerovaný niektorým robotom (metódami
 na kreslenie tvarov), pretože obrázky majú súradnicový priestor
 prispôsobený prostrediu rámca – osi sú posunuté tak, aby robot
 v pozícii [0, 0] kreslil do stredu obrázka (toto posunutie závisí
 nielen od rozmerov obrázka, ale aj od aktuálnych rozmerov plátien)
 a y-ová súradnica je orientovaná podľa súradnicového systému Javy,
 to znamená, že je voči svetu robota zrkadlovo prevrátená.
 (O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
 
 Tip: V súvislosti s generovaním tvarov a ich
 použitím by robot, ktorého chceme použiť na generovanie tvarov,
 mal mať vypnuté kreslenie
 tvarov, aby vygenerovaný tvar nenakreslil do aktívneho plátna,
 prípadne do iného obrázka, do ktorého má presmerované kreslenie.
 Automatické vypnutie alebo zapnutie kreslenia tvarov zvoleného
 grafického robota vykoná metóda kreslič
 a to podľa toho, či je jej argumentom konkrétny robot – vtedy
 mu kreslenie tvarov vypne, alebo hodnota null – vtedy
 zapne kreslenie tvarov tomu robotu, ktorý bol aktuálnym
 kresličom konkrétneho obrázka. Metóda však nezaznamenáva počet
 spustení pre roboty, takže v prípade jej náhodného spúšťania
 s rôznymi hodnotami argumentov – robotov alebo hodnôt
 null, je výsledný stav kreslenia alebo nekreslenia
 tvarov pre konkrétny robot rovný tomu stavu, do ktorého ho
 preplo posledné spustenie dotknutej metódy. Treba si na to dať
 pozor v prípade, že chceme ten istý robot použiť ako kresliča
 viacerých obrázkov.
 
 Na kreslenie robotom do obrázka je jednoduchšie je použiť
 metódu GRobot.kresliNaObrázok(Obrázok) na presmerovanie
 kreslenia robota do obrázka a kresliť robotom rovnakým spôsobom
 ako pri klasickom kreslení na plátno
 (podlahu alebo strop).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou/náterom kresliča alebo hlavného robota
Pozri tiež:
vyplň(Shape), 
kresli(Shape, GRobot), 
vyplň(Shape, GRobot)
kresli
public void kresli(Shape tvar,
                   GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru do
 obrázka. Metóda potrebuje na svoje správne fungovanie zadanie
 robota „kresliča,“ ktorého farbu alebo náter a štýl čiary použije
 na kreslenie. Ak je do metódy namiesto konkrétneho kresliča zadaná
 hodnota null, tak je na získanie parametrov kreslenia
 použitý hlavný robot (ak ten
 nejestvuje, kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou/náterom zadaného
     robota („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
vyplň(Shape, GRobot), 
kresli(Shape), 
vyplň(Shape)
vyplň
public void vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov do obrázka.
 Ak má tento objekt obrázka nastaveného takzvaného
 kresliča, tak táto metóda použije na
 vyplnenie jeho farbu alebo náter. V opačnom
 prípade použije hlavný robot
 (ak ten nejestvuje, kreslenie nebude vykonané).
 
 Zadaný tvar by mal byť vygenerovaný niektorým robotom (metódami
 na kreslenie tvarov), pretože obrázky majú súradnicový priestor
 prispôsobený prostrediu rámca – osi sú posunuté tak, aby robot
 v pozícii [0, 0] kreslil do stredu obrázka (toto posunutie závisí
 nielen od rozmerov obrázka, ale aj od aktuálnych rozmerov plátien)
 a y-ová súradnica je orientovaná podľa súradnicového systému Javy,
 to znamená, že je voči svetu robota zrkadlovo prevrátená.
 (O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
 
 Tip: V súvislosti s generovaním tvarov a ich
 použitím by robot, ktorého chceme použiť na generovanie tvarov,
 mal mať vypnuté kreslenie
 tvarov, aby vygenerovaný tvar nenakreslil do aktívneho plátna,
 prípadne do iného obrázka, do ktorého má presmerované kreslenie.
 Automatické vypnutie alebo zapnutie kreslenia tvarov zvoleného
 grafického robota vykoná metóda kreslič
 a to podľa toho, či je jej argumentom konkrétny robot – vtedy
 mu kreslenie tvarov vypne, alebo hodnota null – vtedy
 zapne kreslenie tvarov tomu robotu, ktorý bol aktuálnym
 kresličom konkrétneho obrázka. Metóda však nezaznamenáva počet
 spustení pre roboty, takže v prípade jej náhodného spúšťania
 s rôznymi hodnotami argumentov – robotov alebo hodnôt
 null, je výsledný stav kreslenia alebo nekreslenia
 tvarov pre konkrétny robot rovný tomu stavu, do ktorého ho
 preplo posledné spustenie dotknutej metódy. Treba si na to dať
 pozor v prípade, že chceme ten istý robot použiť ako kresliča
 viacerých obrázkov.
 
 Na kreslenie robotom do obrázka je jednoduchšie je použiť
 metódu GRobot.kresliNaObrázok(Obrázok) na presmerovanie
 kreslenia robota do obrázka a kresliť robotom rovnakým spôsobom
 ako pri klasickom kreslení na plátno
 (podlahu alebo strop).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     aktuálnou farbou/náterom kresliča
     alebo hlavného robota
Pozri tiež:
kresli(Shape), 
vyplň(Shape, GRobot), 
kresli(Shape, GRobot)
vypln
public void vypln(Shape tvar)
 Alias pre vyplň.
vyplň
public void vyplň(Shape tvar,
                  GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov do obrázka.
 Metóda potrebuje na svoje správne fungovanie zadanie robota
 „kresliča,“ ktorého farbu alebo náter použije na vyplnenie
 zadaného tvaru. Ak je do metódy namiesto konkrétneho kresliča
 zadaná hodnota null, tak je na získanie parametrov
 kreslenia použitý hlavný robot
 (ak ten nejestvuje, kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     aktuálnou farbou/náterom zadaného robota („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
kresli(Shape, GRobot), 
vyplň(Shape), 
kresli(Shape)
vypln
public void vypln(Shape tvar,
                  GRobot kreslič)
 Alias pre vyplň.
vyplň
public void vyplň(Color farba)
Vyplní celú plochu obrázka zadanou farbou.
Parametre:
farba – objekt určujúci farbu na výplň plátna
Pozri tiež:
vymaž()
vypln
public void vypln(Color farba)
 Alias pre vyplň.
vyplň
public void vyplň(Farebnosť objekt)
Vyplní celú plochu obrázka farbou zadaného objektu.
Parametre:
objekt – objekt určujúci farbu na výplň plátna
Pozri tiež:
vymaž()
vypln
public void vypln(Farebnosť objekt)
 Alias pre vyplň.
vyplň
public Farba vyplň(int r,
                   int g,
                   int b)
Vyplní obrázok farbou zadanou prostredníctvom farebných
 zložiek.
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vyplň(Color)
vypln
public Farba vypln(int r,
                   int g,
                   int b)
 Alias pre vyplň.
vyplň
public Farba vyplň(int r,
                   int g,
                   int b,
                   int a)
Vyplní obrázok farbou zadanou prostredníctvom farebných zložiek
 a úrovne (ne)priehľadnosti.
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vyplň(Color)
vypln
public Farba vypln(int r,
                   int g,
                   int b,
                   int a)
 Alias pre vyplň.
vyplň
public void vyplň(Shape tvar,
                  String súbor)
Vyplní zadaný tvar textúrou prečítanou zo súboru s obrázkom
 a výsledok nakreslí do obrázka.
 
 Zadaný tvar by mal byť generovaný niektorým robotom (metódami
 na kreslenie tvarov), pretože obrázky majú súradnicový priestor
 prispôsobený prostrediu rámca. Zvolený grafický robot by mal mať
 vypnuté kreslenie tvarov, aby
 vygenerovaný tvar nenakreslil do aktívneho plátna (prípadne do
 obrázka, do ktorého bolo jeho kreslenie presmerované).
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     textúrou
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
Svet.priečinokObrázkov(String)
vypln
public void vypln(Shape tvar,
                  String súbor)
 Alias pre vypln.
vyplň
public void vyplň(Shape tvar,
                  Image výplň)
Vyplní zadaný tvar textúrou určenou zadaným obrázkom a výsledok
 nakreslí do tohto obrázka. Ako textúra by nemal byť použitý ten
 obrázok, do ktorého je vypĺňaný tvar kreslený.
 
 Zadaný tvar by mal byť generovaný niektorým robotom (metódami
 na kreslenie tvarov), pretože obrázky majú súradnicový priestor
 prispôsobený prostrediu rámca. Zvolený grafický robot by mal mať
 vypnuté kreslenie tvarov, aby
 vygenerovaný tvar nenakreslil do aktívneho plátna (prípadne do
 obrázka, do ktorého bolo jeho kreslenie presmerované).
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     textúrou
výplň – obrázok s textúrou
vypln
public void vypln(Shape tvar,
                  Image výplň)
 Alias pre vypln.
kresli
public void kresli(String súbor)
Nakreslí do stredu tohto obrázka obrázok zo zadaného súboru.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom
Pozri tiež:
Svet.priečinokObrázkov(String)
kresli
public void kresli(double x,
                   double y,
                   String súbor)
Nakreslí do tohto obrázka obrázok zo zadaného súboru, ktorý bude
 posunutý od stredu o zadané súradnice v horizontálnom
 a vertikálnom smere.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
x – posun od stredu v horizontálnom smere
y – posun od stredu vo vertikálnom smere
súbor – názov súboru s obrázkom
Pozri tiež:
Svet.priečinokObrázkov(String)
kresli
public void kresli(Poloha objekt,
                   String súbor)
Nakreslí do tohto obrázka obrázok zo zadaného súboru, obrázok
 bude posunutý o súradnice určené polohou zadaného objektu.
Parametre:
objekt – objekt, ktorého súradnice určia posunutie obrázka
súbor – názov súboru s obrázkom
Pozri tiež:
Svet.priečinokObrázkov(String)
kresli
public void kresli(Image obrázok)
Nakreslí do stredu tohto obrázka zadaný obrázok.
Parametre:
obrázok – obrázok, ktorý má byť nakreslený
kresli
public void kresli(double x,
                   double y,
                   Image obrázok)
Nakreslí do tohto obrázka zadaný obrázok, pričom ho posunie
 od stredu o zadané súradnice v horizontálnom a vertikálnom
 smere.
Parametre:
x – posun od stredu v horizontálnom smere
y – posun od stredu vo vertikálnom smere
obrázok – obrázok, ktorý má byť nakreslený
kresli
public void kresli(Poloha objekt,
                   Image obrázok)
Nakreslí do tohto obrázka zadaný obrázok, obrázok bude
 posunutý o súradnice určené polohou zadaného objektu.
Parametre:
objekt – objekt, ktorého súradnice určia posunutie obrázka
obrázok – obrázok, ktorý má byť nakreslený
vyplň
public void vyplň(String súbor)
Vyplní obrázok zadanou textúrou. Textúra je súbor s obrázkom,
 ktorý bude použitý na dlaždicové vyplnenie celej plochy tohto
 obrázka.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
vyplň(Color), 
Svet.priečinokObrázkov(String)
vypln
public void vypln(String súbor)
 Alias pre vyplň.
vyplň
public void vyplň(Image výplň)
Vyplní obrázok zadanou textúrou. Textúra je iný obrázok (objekt typu Image
 alebo odvodený), ktorý bude použitý na dlaždicové vyplnenie celej
 plochy tohto obrázka.
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
výplň – obrázok s textúrou
Pozri tiež:
vyplň(Color)
vypln
public void vypln(Image výplň)
 Alias pre vyplň.
vylejFarbu
public void vylejFarbu(double x,
                       double y,
                       Color farba)
Vyleje do zadaného bodu do obrázka farbu, ktorá sa odtiaľ
 rozšíri po okraje tej časti kresby v obrázku, v ktorej sa zadaný
 bod nachádza. Na ďalšie informácie pozri metódu Plátno.vylejFarbu(double, double, Color). Správanie
 tejto metódy je jej veľmi podobné.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
farba – objekt určujúci farbu výplne
vylejFarbu
public void vylejFarbu(double x,
                       double y,
                       Farebnosť objekt)
Vyleje do zadaného bodu do obrázka farbu (určenú objektom),
 ktorá sa odtiaľ rozšíri po okraje tej časti kresby v obrázku,
 v ktorej sa zadaný bod nachádza. Na ďalšie informácie pozri
 metódu Plátno.vylejFarbu(double, double, Color).
 Správanie tejto metódy je jej veľmi podobné.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
objekt – objekt určujúci farbu výplne
vylejFarbu
public Farba vylejFarbu(double x,
                        double y,
                        int r,
                        int g,
                        int b)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vylejFarbu(double, double, Color)
vylejFarbu
public Farba vylejFarbu(double x,
                        double y,
                        int r,
                        int g,
                        int b,
                        int a)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 z určeného bodu rozšíri k okrajom okolitej kresby. Na ďalšie
 informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vylejFarbu(double, double, Color)
vylejFarbu
public void vylejFarbu(Poloha bod,
                       Color farba)
Vyleje do zadaného bodu do obrázka farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby v obrázku, v ktorej sa zadaný bod
 nachádza. Na ďalšie informácie pozri metódu Plátno.vylejFarbu(double, double, Color). Správanie tejto
 metódy je jej veľmi podobné.
Parametre:
bod – súradnice počiatočného bodu
farba – objekt určujúci farbu výplne
vylejFarbu
public void vylejFarbu(Poloha bod,
                       Farebnosť objekt)
Vyleje do zadaného bodu do obrázka farbu (určenú objektom), ktorá
 sa odtiaľ rozšíri po okraje tej časti kresby v obrázku, v ktorej
 sa zadaný bod nachádza. Na ďalšie informácie pozri metódu Plátno.vylejFarbu(double, double, Color). Správanie tejto
 metódy je jej veľmi podobné.
Parametre:
bod – súradnice počiatočného bodu
objekt – objekt určujúci farbu výplne
vylejFarbu
public Farba vylejFarbu(Poloha bod,
                        int r,
                        int g,
                        int b)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vylejFarbu(Poloha, Color)
vylejFarbu
public Farba vylejFarbu(Poloha bod,
                        int r,
                        int g,
                        int b,
                        int a)
Vyleje do zadaného bodu do obrázka farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 z určeného bodu rozšíri k okrajom okolitej kresby. Na ďalšie
 informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vylejFarbu(Poloha, Color)
vylejFarbu
public void vylejFarbu(GRobot ktorý)
Zadaný robot vyleje na svojej pozícii do obrázka svoju aktuálnu
 farbu, ktorá sa odtiaľ rozšíri po
 okraje okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
ktorý – robot, ktorého poloha a farba sú použité na výplň
negatív
public void negatív()
Pretvorí tento obrázok na svoj farebný negatív.
negativ
public void negativ()
 Alias pre negatív.
bledší
public void bledší(double faktor)
Zvýši úroveň svetlosti tohto obrázka. Metóda používa rovnaký
 spôsob zosvetlenia ako metóda Farba.svetlejšia(double).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Parametre:
faktor – faktor zosvetlenia – hodnota v rozsahu 0.0 – 1.0,
     pričom krajné hodnoty (0.0 a 1.0) nie sú povolené; čím je
     hodnota faktora nižšia, tým je zmena svetlosti výraznejšia
Pozri tiež:
tmavší(double)
bledsi
public void bledsi(double faktor)
 Alias pre bledší.
svetlejší
public void svetlejší(double faktor)
 Alias pre bledší.
svetlejsi
public void svetlejsi(double faktor)
 Alias pre bledší.
tmavší
public void tmavší(double faktor)
Zníži úroveň svetlosti tohto obrázka. Metóda používa rovnaký
 spôsob stmavenia ako metóda Farba.tmavšia(double).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Parametre:
faktor – faktor stmavenia – hodnota v rozsahu 0.0 – 1.0,
     pričom krajné hodnoty (0.0 a 1.0) nie sú na použitie vhodné
     (0.0 by stmavila farbu do čiernej a 1.0 by nevykonala žiadnu
     zmenu svetlosti); čím je hodnota faktora nižšia, tým je
     úroveň stmavenia výraznejšia
Pozri tiež:
bledší(double)
tmavsi
public void tmavsi(double faktor)
 Alias pre tmavší.
bledší
public void bledší()
Zvýši úroveň svetlosti tohto obrázka. Metóda používa rovnaký
 spôsob zosvetlenia ako metóda Farba.svetlejšia().
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
 
 Poznámka: Metóda používa predvolenú
 hodnotu faktoru zosvetlenia 0.7. Pozri aj bledší(faktor).
Pozri tiež:
tmavší()
bledsi
public void bledsi()
 Alias pre bledší.
svetlejší
public void svetlejší()
 Alias pre bledší.
svetlejsi
public void svetlejsi()
 Alias pre bledší.
tmavší
public void tmavší()
Zníži úroveň svetlosti tohto obrázka. Metóda používa rovnaký
 spôsob stmavenia ako metóda Farba.tmavšia().
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
 
 Poznámka: Metóda používa predvolenú
 hodnotu faktoru stmavenia 0.7. Pozri aj tmavší(faktor).
Pozri tiež:
bledší()
tmavsi
public void tmavsi()
 Alias pre tmavší.
čiernobiely
public void čiernobiely()
Upraví tento obrázok do odtieňov šedej s použitím priemerovania
 farebných zložiek. Je to rýchla metóda, ale výsledné odtiene nie sú
 v súlade s modelom ľudského vnímania farieb. Pozri aj čiernobiely(vyvážiťZložky).
 
 Porovnanie rôznych metód prevodu do odtieňov šedej je v opise
 metódy čiernobiely(vyvážiťZložky).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Pozri tiež:
čiernobiely(boolean), 
čiernobiely(double, double, double), 
monochromatický(Color), 
farebnýFilter(Color), 
farebnéTienidlo(Color)
ciernobiely
public void ciernobiely()
 Alias pre čiernobiely.
odtieneŠedej
public void odtieneŠedej()
 Alias pre čiernobiely.
odtieneSedej
public void odtieneSedej()
 Alias pre čiernobiely.
čiernobiely
public void čiernobiely(boolean vyvážiťZložky)
Upraví tento obrázok do odtieňov šedej s možnosťou určenia
 predvoleného vyváženia farebných zložiek – podľa modelu ľudského
 vnímania farieb.
 
 Ak je parameter vyvážiťZložky rovný true,
 tak bude použité predvolené vyváženie zložiek, inak bude použité
 priemerovanie, rovnako ako pri metóde čiernobiely().
 
 Predvolené hodnoty vyváženia sú nasledujúce: 29,9 % červenej,
 58,7 % zelenej a 11,4 % modrej. Ak chcete použiť vlastné váhy,
 tak použite metódu čiernobiely(váhaČervenej, váhaZelenej, váhaModrej).
 
 
 Porovnanie rôznych metód
 prevodu do odtieňov šedej.
 
 Obrázok vyššie porovnáva rôzne metódy prevodu obrázka do
 odtieňov šedej. Vľavo hore je pôvodný farebný obrázok, vedľa neho
 je obrázok prevedený metódou čiernobiely()
 (priemerovanie zložiek), vľavo dole je verzia prevedená s pomocou
 tejto metódy s parametrom vyvážiťZložky rovným
 true a vpravo dole je použitá metóda čiernobiely(váhaČervenej,
 váhaZelenej, váhaModrej) s váhami nastavenými na hodnoty:
 0.0 (červená), 0.3 (zelená) a 0.5
 (modrá). To znamená, že pôvodná červená zložka je z odtieňov
 elimiovaná a súčet zostávajúcich dvoch nie
 je rovný 100 % (0,3 = 30 %; 0,5 = 50 %; čo je dohromady len 80 %).
 Z toho je jasné, že výsledok bude tmavší. Obrázok vpravo dole
 skutočne pôsobí akoby bol snímaný v odlišnom spektre
 elektromagnetického vlnenia (čo je, samozrejme, falošný dojem,
 pretože chýbajúcu informáciu nemôžeme od obrazu doplniť žiadnym
 prevodom, ale môžeme aspoň nasimulovať taký efekt).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
 
 Obrázok nižšie ukazuje porovnanie metódy priemerovania
 a automatického vyváženia zložiek na staršej verzii predvolenej
 palety preddefinovaných
 farieb.
 
 
 
 
 
 
 a) predvolená paleta
 b) použitie metódy
 priemerovania
 c) použitie metódy vyváženia
 zložiek
 Porovnanie rôznych metód
 prevodu do odtieňov šedej.
 
 Použitý zdroj:
 
 
Francis G. Loch: Image
 Processing Algorithms Part 3: Greyscale Conversion. Dreamland
 Fantasy Studios, 2008, 2010. Citované: 2018.
Parametre:
vyvážiťZložky – pravdivostná hodnota určujúca, či majú byť
     odtiene vypočítané algoritmom vyvažovania farebných zložiek
Pozri tiež:
čiernobiely(), 
čiernobiely(double, double, double), 
monochromatický(Color), 
farebnýFilter(Color), 
farebnéTienidlo(Color)
ciernobiely
public void ciernobiely(boolean vyvážiťZložky)
 Alias pre čiernobiely.
odtieneŠedej
public void odtieneŠedej(boolean vyvážiťZložky)
 Alias pre čiernobiely.
odtieneSedej
public void odtieneSedej(boolean vyvážiťZložky)
 Alias pre čiernobiely.
čiernobiely
public void čiernobiely(double váhaČervenej,
                        double váhaZelenej,
                        double váhaModrej)
Upraví tento obrázok do odtieňov šedej s možnosťou určenia
 vlastného vyváženia jednotlivých farebných zložiek. Táto metóda
 umožňuje úplne odfiltrovať alebo preexponovať niektorú farebnú
 zložku.
 
 Porovnanie rôznych metód prevodu do odtieňov šedej je v opise
 metódy čiernobiely(vyvážiťZložky).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Parametre:
váhaČervenej – hodnota určujúca mieru vyváženia červenej
     farebnej zložky
váhaZelenej – hodnota určujúca mieru vyváženia zelenej
     farebnej zložky
váhaModrej – hodnota určujúca mieru vyváženia modrej
     farebnej zložky
Pozri tiež:
čiernobiely(), 
čiernobiely(boolean), 
monochromatický(Color), 
farebnýFilter(Color), 
farebnéTienidlo(Color)
ciernobiely
public void ciernobiely(double váhaČervenej,
                        double váhaZelenej,
                        double váhaModrej)
 Alias pre čiernobiely.
odtieneŠedej
public void odtieneŠedej(double váhaČervenej,
                         double váhaZelenej,
                         double váhaModrej)
 Alias pre čiernobiely.
odtieneSedej
public void odtieneSedej(double váhaČervenej,
                         double váhaZelenej,
                         double váhaModrej)
 Alias pre čiernobiely.
monochromatický
public void monochromatický(Color farba)
Upraví tento obrázok do odtieňov zadanej farby. Monochromatická
 zložka, čiže zložka jasu (odtiene šedej), bude násobená farebnými
 zložkami zadanej farby. Výsledkom bude obrázok v odtieňoch zadanej
 farby. Ak zadáme čiernu farbu, získame čierny obrázok. Ak zadáme
 bielu, dostaneme čiernobiely obrázok. Ľubovoľná iná farba zafarbí
 obrázok do jej odtieňov.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 v opise metódy farebnéTienidlo(farba).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Parametre:
farba – farba, do odtieňov ktorej bude obrázok prevedený
Pozri tiež:
čiernobiely(), 
čiernobiely(boolean), 
čiernobiely(double, double, double), 
farebnýFilter(Color), 
farebnéTienidlo(Color)
monochromaticky
public void monochromaticky(Color farba)
 Alias pre monochromatický.
jednofarebný
public void jednofarebný(Color farba)
 Alias pre monochromatický.
jednofarebny
public void jednofarebny(Color farba)
 Alias pre monochromatický.
farebnýFilter
public void farebnýFilter(Color farba)
Použije na tento obrázok zadaný farebný filter. Obrázok
 nadobudne vzhľad, ako keby sme sa na neho pozerali cez filter
 prepúšťajúci len zadanú farbu.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 v opise metódy farebnéTienidlo(farba).
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
Parametre:
farba – farba filtra
Pozri tiež:
čiernobiely(), 
čiernobiely(boolean), 
čiernobiely(double, double, double), 
monochromatický(Color), 
farebnéTienidlo(Color)
farebnyFilter
public void farebnyFilter(Color farba)
 Alias pre farebnýFilter.
farebnéTienidlo
public void farebnéTienidlo(Color farba)
Použije na tento obrázok zadané farebné tienidlo. Obrázok
 nadobudne vzhľad, ako keby sme sa na neho pozerali cez tienidlo,
 ktoré má zadanú farbu. Všetky farby v obrázku (ich zložky) budú
 posunuté smerom k zadanej farbe.
 
 Poznámka: Metóda
 zachováva aj kanál priehľadnosti obrázka.
 
 Nasledujúci obrázok zhromažďuje a porovnáva rôzne efekty
 použité na tú istú predlohu:
 
  Porovnanie
 rôznych efekty aplikovaných na ten istý obrázok.
 
 V bloku A je pôvodný obrázok. Blok B obsahuje použitie efektu
 posterizácie s a bez algoritmu
 difúzie chyby (prvý
 riadok bloku je bez difúzie chyby, druhý s ňou). Stĺpce bloku sú
 posterizované postupne s použitím troch farieb (červenej, zelenej
 a modrej), šiestich farieb (pribudla tyrkysová, purpurová a žltá)
 a staršej verzie predvolenej palety preddefinovaných farieb.
 
 V bloku C sú pod sebou použité efekty monochromatickosti, farebného filtra a farebného tienidla s červenou farbou.
 Blok D obsahuje vedľa seba použitie tých istých efektov so zelenou
 farbou a blok E s modrou farbou.
Parametre:
farba – farba tienidla
Pozri tiež:
čiernobiely(), 
čiernobiely(boolean), 
čiernobiely(double, double, double), 
monochromatický(Color), 
farebnýFilter(Color)
farebneTienidlo
public void farebneTienidlo(Color farba)
 Alias pre farebnéTienidlo.
monochromatický
public void monochromatický(Farebnosť objekt)
Upraví tento obrázok do odtieňov farby zadaného objektu.
 Monochromatická zložka, čiže zložka jasu (odtiene šedej), bude
 násobená farebnými zložkami farby zadaného objektu. Výsledkom bude
 obrázok v odtieňoch jeho farby. Ak má objekt čiernu farbu, získame
 čierny obrázok. Ak má objekt bielu farbu, dostaneme čiernobiely
 obrázok. Ľubovoľná iná farba objektu zafarbí obrázok do jej
 odtieňov.
Parametre:
objekt – objekt, do odtieňov farby ktorého bude obrázok
     prevedený
monochromaticky
public void monochromaticky(Farebnosť objekt)
 Alias pre monochromatický.
jednofarebný
public void jednofarebný(Farebnosť objekt)
 Alias pre monochromatický.
jednofarebny
public void jednofarebny(Farebnosť objekt)
 Alias pre monochromatický.
farebnýFilter
public void farebnýFilter(Farebnosť objekt)
Použije na tento obrázok farebný filter podľa farby zadaného
 objektu. Obrázok nadobudne vzhľad, ako keby sme sa na neho
 pozerali cez sklo farby zadaného objektu.
Parametre:
objekt – objekt určujúci farbu filtra
farebnyFilter
public void farebnyFilter(Farebnosť objekt)
 Alias pre farebnýFilter.
zrušPriehľadnosť
public void zrušPriehľadnosť()
Zruší priehľadnosť všetkých bodov v obrázku.
 
 Pozor! Volanie tejto metódy neovplyvní
 celkovú priehľadnosť obrázka ovplyvňovanú metódami
 priehľadnosť(priehľadnosť),
 priehľadnosť(objekt)
 a upravPriehľadnosť(zmena).
 
 Poznámka: Princíp toho, ako funguje
 zrušenie priehľadnosti, je ukázaný v opise rovnomennej metódy
 triedy Plátno – zrušPriehľadnosť.
zrusPriehladnost
public void zrusPriehladnost()
 Alias pre zrušPriehľadnosť.
použiMasku
public boolean použiMasku(BufferedImage maska)
Použije na tento obrázok masku vyrobenú zo zadaného obrázka.
 Maska musí mať rovnaký rozmer ako obrázok, inak operácia zlyhá.
 Maska je vyrobená z kombinácie intenzity farieb a priehľadnosti
 jednotlivých bodov zadaného obrázka. Čím je bod masky tmavší, tým
 bude viditeľnejší, čím svetlejší, tým menej viditeľný. Jas je
 korigovaný aj zložkami priehľadnosti obidvoch bodov, teda ako
 pôvodného bodu na obrázku, tak aj bodu prevzatého z masky.
 Ak je súčin ich zložiek priehľadnosti rovný nule, tak bude
 výsledný bod neviditeľný. Viditeľnosť bodov v ostatných
 prípadoch záleží na výsledku výpočtov algoritmu. Napríklad
 úplne čierne úplne nepriehľadné body masky neovplyvnia
 priehľadnosť bodov na obrázku.
Parametre:
maska – obrázok, ktorý bude použitý ako maska
Návratová hodnota:
true ak bola operácia úspešná
pouziMasku
public boolean pouziMasku(BufferedImage maska)
 Alias pre použiMasku.
vymažKresbu
public boolean vymažKresbu(BufferedImage kresba)
Použije na tento obrázok filter vyrobený zo zložky jasu kresby
 zadaného/predloženého obrázka. Zložka priehľadnosti bodov na
 obrázku, ktorý poslúži ako predloha pre filter nie je braná do
 úvahy. Hodnoty farebných zložiek úplne priehľadných (neviditeľných)
 bodov sú nepredvídateľné, preto by mal byť obrázok predlohy filtra
 úplne pokrytý nepriehľadnou kresbou. Svetlé/biele body na obrázku
 predlohy spôsobia vymazanie bodov na tomto obrázku (nastavenie
 hodnôt všetkých ich farebných zložiek a priehľadnosti na nulu).
 Tmavé/čierne body na predloženom
 obrázku nespôsobia na tomto obrázku žiadnu zmenu priehľadnosti.
 (Ostatné odtiene šedej a farebné body vo filtri spôsobia nastavenie
 úrovne priehľadnosti bodov obrázka na hodnotu jasu vypočítanú
 z priemeru farebných zložiek bodov filtra.)
 Obrázok s predlohou musí mať rovnaký rozmer ako tento obrázok, inak
 operácia zlyhá.
Parametre:
kresba – obrázok, ktorý bude použitý ako predloha pre filter
Návratová hodnota:
true ak bola operácia úspešná
vymazKresbu
public boolean vymazKresbu(BufferedImage kresba)
 Alias pre vymažKresbu.
vyrobMasku
public boolean vyrobMasku(BufferedImage nováMaska)
Vyrobí z tohto obrázka do zadaného obrázka masku priehľadnosti.
 Zadaný obrázok musí mať rovnakú veľkosť ako tento obrázok, inak
 operácia zlyhá. Vyrobená maska bude obsahovať čierne body rôznej
 priehľadnosti podľa priehľadnosti bodov pôvodného obrázka. Pôvodný
 obsah zadaného obrázka (argumentu nováMaska) bude
 nahradený.
Parametre:
nováMaska – obrázok, do ktorého bude nová maska vyrobená
     (pôvodný obsah obrázka bude nahradený maskou)
Návratová hodnota:
true ak bola operácia úspešná
vyrobMasku
public BufferedImage vyrobMasku()
Vyrobí z tohto obrázka masku priehľadnosti. Metóda vytvorí masku
 do nového obrázka (typu BufferedImage),
 ktorý sama automaticky vytvorí a vráti ako svoj výsledok
 (návratovú hodnotu). Nová maska bude obsahovať čierne body rôznej
 priehľadnosti vychádzajúc z priehľadnosti bodov tohto obrázka.
Návratová hodnota:
nový obrázok obsahujúci vyrobenú masku
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   Color pozadie)
Rozmaže grafiku obrázka. Pre priehľadné (neviditeľné) body je
 pri procese rozmazania použitá zadaná farba pozadia. Opakovanie
 a rozsah majú z vizuálneho hľadiska podobný dopad na výsledný
 efekt rozmazania, ale matice lineárneho kruhového rozmazania sú
 vygenerované len do úrovne rozsahu 5 (vrátane). Pri zadaní vyššej
 hodnoty rozsahu získame rovnaký efekt ako keby sme zadali hodnotu
 5. Ak chceme dosiahnuť vyššiu mieru rozmazania, musíme zvýšiť
 počet opakovaní procesu rozmazania (argument opakovanie). Čím
 vyššie sú hodnoty opakovania a rozsahu, tým vyššie sú nároky
 metódy na výpočtový výkon.
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania; reálny efekt dosiahneme len
     v rozsahu hodnôt 1 – 5, vyššie čísla sú zaokrúhlené na 5,
     nižšie nespôsobia žiadne rozmazanie
pozadie – farba použitá pri procese rozmazania pre
     priehľadné body
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   Color pozadie)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, 1, pozadie);
Parametre:
opakovanie – počet opakovaní rozmazania
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(int opakovanie,
                   Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(Color pozadie)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(1, 1, pozadie);
Parametre:
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   Farebnosť pozadie)
Rozmaže grafiku obrázka. Pre priehľadné (neviditeľné) body je
 pri procese rozmazania použitá zadaná farba pozadia. Opakovanie
 a rozsah majú z vizuálneho hľadiska podobný dopad na výsledný
 efekt rozmazania, ale matice lineárneho kruhového rozmazania sú
 vygenerované len do úrovne rozsahu 5 (vrátane). Pri zadaní vyššej
 hodnoty rozsahu získame rovnaký efekt ako keby sme zadali hodnotu
 5. Ak chceme dosiahnuť vyššiu mieru rozmazania, musíme zvýšiť
 počet opakovaní procesu rozmazania (argument opakovanie). Čím
 vyššie sú hodnoty opakovania a rozsahu, tým vyššie sú nároky
 metódy na výpočtový výkon.
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania; reálny efekt dosiahneme len
     v rozsahu hodnôt 1 – 5, vyššie čísla sú zaokrúhlené na 5,
     nižšie nespôsobia žiadne rozmazanie
pozadie – farba použitá pri procese rozmazania pre
     priehľadné body
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   Farebnosť pozadie)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, 1, pozadie);
Parametre:
opakovanie – počet opakovaní rozmazania
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(int opakovanie,
                   Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(Farebnosť pozadie)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(1, 1, pozadie);
Parametre:
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, rozsah, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, 1, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
Parametre:
opakovanie – počet opakovaní rozmazania
rozmaz
public void rozmaz(int opakovanie)
 Alias pre rozmaž.
rozmaž
public void rozmaž()
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(1, 1, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
rozmaz
public void rozmaz()
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, rozsah, new Farba(bgr, bgg, bgb));
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(opakovanie, 1, new Farba(bgr, bgg, bgb));
Parametre:
opakovanie – počet opakovaní rozmazania
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int opakovanie,
                   int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku obrázka. Dosiahneme rovnaký efekt, ako keby sme
 volali metódu: rozmaž(1, 1, new Farba(bgr, bgg, bgb));
Parametre:
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
upravJasKontrast
public void upravJasKontrast(double jas,
                             double kontrast)
Upraví parametre jasu a kontrastu celého obrázka. Oba parametre
 môžu nadobúdať kladné aj záporné hodnoty. Na obrázkoch nižšie je
 vidno, ako sa zmení obrázok pri rôznych hodnotách týchto
 parametrov.
 
 
 Zdrojový obrázok na ukážku úpravy
 jasu a kontrastu(verzia v mierne vyššom rozlíšení
 je dostupná na prevzatie 
tu).
 
  
 
 
  
-240,0
-160,0
-80,0
0,0
80,0
160,0
240,0 
 
-240,0
rôzne úrovne
 kontrastu
 
-160,0
 
-80,0
 
0,0
 
80,0
 
160,0
 
240,0
  
rôzne úrovne jasu 
 
 
 Ukážka rôznych úrovní jasu a kontrastu.
 
  
 
 
 Zdrojový obrázok na ukážku úpravy jasu
 a kontrastu(verzia v mierne vyššom rozlíšení je
 dostupná na prevzatie 
tu).
 
  
 
 
  
-240,0
-160,0
-80,0
0,0
80,0
160,0
240,0 
 
-240,0
rôzne úrovne
 kontrastu
 
-160,0
 
-80,0
 
0,0
 
80,0
 
160,0
 
240,0
  rôzne
 úrovne jasu 
 
 
 Ukážka rôznych úrovní jasu a kontrastu.
 
  
 
 Poznámka: Úplne priehľadné (neviditeľné)
 body nie sú spracované. Tento efekt ukazuje nasledujúci obrázok,
 na ktorého vytvorenie bola použitá aj metóda zrušPriehľadnosť.
 
 
 
 
 
 a)
b)c)
 
 Ukážka vplyvu metódy upravJasKontrast na priehľadné
 časti obrázka:a) vygenerovaný obrázok s priehľadnými
 časťami,b) obrázok po volaní metód upravJasKontrast(-240, 160)
 a zrušPriehľadnosť(),c)
 zvýraznenie pôvodne priehľadných častí, na ktoré nemalo volanie
 metódy upravJasKontrast
 žiadny vplyv.
 
 Použité zdroje:
 
 
 
Francis G. Loch: Image
 Processing Algorithms Part 4: Brightness Adjustment.
 Dreamland Fantasy Studios, 2008, 2010. Citované: 2018.
 
Francis G. Loch: Image
 Processing Algorithms Part 4: Brightness Adjustment.
 Dreamland Fantasy Studios, 2008, 2010. Citované: 2018.
 
Parametre:
jas – reálnočíselná hodnota určujúca mieru zmeny jasu obrázka;
     relevantné sú hodnoty v rozmedzí od −255.0 do 255.0
kontrast – reálnočíselná hodnota určujúca mieru zmeny kontrastu
     obrázka; relevantné sú hodnoty v rozmedzí od −255.0 do 255.0
gamaKorekcia
public void gamaKorekcia(double γ)
Upraví intenzitu farieb obrázka na základe hodnoty parametra
 gama (γ). Gama vyjadruje vzťah medzi vstupnou a výstupnou hodnotou
 intenzity farby, ktorý je najlepšie viditeľný na nasledujúcom
 grafe:
 
 
 Graf vyjadrujúci
 zmenu vstupnej veličiny na výstupnú pri rôznych hodnotách
 faktora gama (γ).
 
  
 
 Poznámka: Algoritmus môže principiálne
 prijímať akúkoľvek hodnotu γ, okrem nuly, ale tento prípad je
 v metóde ošetrený zadaním paušálnej hodnoty korekcie 65 025,
 takže aj v tom prípade produkuje metóda relatívne korektný
 výsledok. Záporné hodnoty sú tiež mimo rozsahu korektných hodnôt,
 ale metóda ich nefiltruje, pretože zadaním zápornej hodnoty sa
 dá získať síce nesprávny, ale zaujímavý výsledok. Odporúčaný rozsah
 hodnôt sa nachádza v rozmedzí 0,01 – 7,99.
 
 Nasledujúci obrázok ukazuje vplyv rôznych úrovní gama korekcie
 na dvoch obrázkoch, ktoré sú k dispozícii na prevzatie v opise
 metódy upravJasKontrast.
 
 
 Úprava dvoch obrázkov gama
 korekciou s hodnotami (zľava): 0.01, 0.25,
 0.5, 1.0, 2.0, 4.0
 a 7.99.
 
  
 
 Poznámka: Úplne priehľadné (neviditeľné)
 body nie sú spracované. Nasledujúci príklad vygeneruje kresbu
 s bublinkami, na ktorej je táto vlastnosť ukázaná.
 
 Príklad:
 
 Tento príklad vygeneruje obrázok s bublinkami, ktoré sa
 vzájomne prekrývajú. Prekrývanie je riešené vymazaním
 (spriehľadnením) tej časti kresby, ktorú bude tvoriť nasledujúca
 nakreslená bublinka. Následne je na kresbu použitá gama korekcia
 a metóda zrušPriehľadnosť(), čím sa
 ukážu aj pôvodne spriehľadnené časti kresby, na ktoré nemala
 gama korekcia vplyv.
 
 
// Generovanie náhodných bubliniek.
Obrázok bublinky = new Obrázok(400, 400);
Obrázok guma = new Obrázok(400, 400);
hrúbkaČiary(5.5);
for (int i = 0; i &lt; 100; ++i)
{
    náhodnáPoloha();
    smer(90);
    long polomer = Svet.náhodnéCeléČíslo(30, 50);
    guma.vyplň(čierna);
    farba(biela);
    kresliDoObrázka(guma);
    kruh(polomer);
    bublinky.vymažKresbu(guma);
    switch (i % 3)
    {
    case 0: farba(svetlotyrkysová); break;
    case 1: farba(tyrkysová); break;
    case 2: farba(tmavotyrkysová);
    }
    kresliDoObrázka(bublinky);
    kružnica(polomer);
    preskočVľavo(polomer * 0.7);
    choďPoOblúku(90, polomer * 0.7);
}
// Úprava obrázka s použitím gama korekcie a zrušenie priehľadnosti
// bodov v obrázku.
bublinky.gamaKorekcia(0.1);
bublinky.zrušPriehľadnosť();
 
 Výsledok:
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 gama korekciou (γ = 0,1) s odhalením priehľadných častí kresby
 metódou zrušPriehľadnosť().
 
 Použitý zdroj:
 
 
Francis G. Loch: Image
 Processing Algorithms Part 6: Gamma Correction. Dreamland
 Fantasy Studios, 2008, 2010. Citované: 2018.
Parametre:
γ – hodnota, ktorá určí mieru korekcie intenzity farieb
     obrázka; vhodný rozsah hodnôt je zhruba v rozmedzí 0,01 – 7,99
posterizuj
public void posterizuj()
Posterizuje obrázok podľa predvolenej palety preddefinovaných farieb. Pod
 posterizáciou sa rozumie nastavenie všetkých farieb na najbližšiu
 farbu v palete.
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
Pozri tiež:
posterizuj(Color, Color...), 
posterizuj(Color[]), 
posterizuj(boolean), 
posterizuj(boolean, Color, Color...), 
posterizuj(boolean, Color[])
posterizuj
public void posterizuj(Color prváFarba,
                       Color... ostatnéFarby)
Posterizuje obrázok podľa palety zadanej vo forme zoznamu
 farieb, pričom povinné je zadanie aspoň jednej farby. Pod
 posterizáciou sa rozumie nastavenie všetkých farieb na najbližšiu
 farbu v palete. Ak je zadaná len jedna farba palety, tak ňou bude
 obrázok jednoducho vyplnený.
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou s parametrami: červená,
 zelená, modrá,
 čierna, biela,
 šedá, žltá, tyrkysová, purpurová.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
Parametre:
prváFarba – prvá farba palety na posterizáciu
ostatnéFarby – zoznam ostatných farieb palety na posterizáciu
Pozri tiež:
posterizuj(), 
posterizuj(Color[]), 
posterizuj(boolean), 
posterizuj(boolean, Color, Color...), 
posterizuj(boolean, Color[])
posterizuj
public void posterizuj(Color[] paleta)
Posterizuje obrázok podľa palety zadanej vo forme poľa farieb.
 Pod posterizáciou sa rozumie nastavenie všetkých farieb na
 najbližšiu farbu v palete. Ak paleta obsahuje len jednu farbu,
 tak ňou bude obrázok jednoducho vyplnený.
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou s parametrom:
 «inštancia».paleta(32).
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
 
 Použitý zdroj:
 
 
Francis G. Loch: Image
 Processing Algorithms Part 1: Finding The Nearest Colour.
 Dreamland Fantasy Studios, 2008, 2010. Citované: 2018.
Parametre:
paleta – paleta na posterizáciu
Pozri tiež:
posterizuj(), 
posterizuj(Color, Color...), 
posterizuj(boolean), 
posterizuj(boolean, Color, Color...), 
posterizuj(boolean, Color[]), 
početFarieb(), 
paleta(int)
posterizuj
public void posterizuj(boolean difúziaChyby)
Posterizuje obrázok podľa predvolenej palety preddefinovaných farieb a umožňuje
 zvoliť, či má byť pri tomto procese použitý algoritmus difúzie
 chyby. Pre posterizáciu platí to isté, čo je uvedené v opise
 metódy posterizuj(). Algoritmus difúzie chyby
 prenáša časť chyby zaokrúhlenia farieb na susedné pixely, čo vo
 výsledku vyvolá optický klam – dojem, že posterizovaný obrázok má
 v skutočnosti viac farieb, než obsahovala paleta použitá pri
 posterizácii (čo nie je pravda).
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou s parametrom: true.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
Parametre:
difúziaChyby – pravdivostná hodnota určujúca, či má byť pri
     posterizácii použitý algoritmus difúzie chyby
Pozri tiež:
posterizuj(), 
posterizuj(Color, Color...), 
posterizuj(Color[]), 
posterizuj(boolean, Color, Color...), 
posterizuj(boolean, Color[])
posterizuj
public void posterizuj(boolean difúziaChyby,
                       Color prváFarba,
                       Color... ostatnéFarby)
Posterizuje obrázok podľa palety zadanej vo forme zoznamu
 farieb, pričom povinné je zadanie aspoň jednej farby a umožňuje
 zvoliť, či má byť pri tomto procese použitý algoritmus difúzie
 chyby. Pre posterizáciu platí to isté, čo je uvedené v opise
 metódy posterizuj(prváFarba,
 ostatnéFarby). Algoritmus difúzie chyby prenáša časť chyby
 zaokrúhlenia farieb na susedné pixely, čo vo výsledku vyvolá
 optický klam – dojem, že posterizovaný obrázok má v skutočnosti
 viac farieb, než obsahovala zadaná paleta (čo nie je pravda).
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou s parametrami: true, červená, zelená,
 modrá, čierna,
 biela, šedá,
 žltá, tyrkysová, purpurová.
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
Parametre:
difúziaChyby – pravdivostná hodnota určujúca, či má byť pri
     posterizácii použitý algoritmus difúzie chyby
prváFarba – prvá farba palety na posterizáciu
ostatnéFarby – zoznam ostatných farieb palety na posterizáciu
Pozri tiež:
posterizuj(), 
posterizuj(Color, Color...), 
posterizuj(Color[]), 
posterizuj(boolean), 
posterizuj(boolean, Color[])
posterizuj
public void posterizuj(boolean difúziaChyby,
                       Color[] paleta)
Posterizuje obrázok podľa palety zadanej vo forme poľa farieb
 a umožňuje zvoliť, či má byť pri tomto procese použitý algoritmus
 difúzie chyby. Pre posterizáciu platí to isté, čo je uvedené v opise
 metódy posterizuj(paleta). Algoritmus
 difúzie chyby prenáša časť chyby zaokrúhlenia farieb na susedné
 pixely, čo vo výsledku vyvolá optický klam – dojem, že posterizovaný
 obrázok má v skutočnosti viac farieb, než obsahovala zadaná paleta
 (čo nie je pravda).
 
 Poznámka: Táto metóda zruší priehľadnosť
 bodov pôvodného obrázka. Ak ju chcete zachovať, musíte
 vytvoriť a použiť masku.
 
 
 
 
 
 Vľavo je verzia obrázka pred a vpravo po úprave
 touto metódou s parametrami: true,
 «inštancia».paleta(32).
 
 Porovnanie rôznych efektov použitých na rovnaký obrázok je
 aj v opise metódy farebnéTienidlo(farba).
 
 Použité zdroje:
 
 
 
Francis G. Loch: Image
 Processing Algorithms Part 1: Finding The Nearest Colour.
 Dreamland Fantasy Studios, 2008, 2010. Citované: 2018.
 
Francis G. Loch: Image
 Processing Algorithms Part 2: Error Diffusion. Dreamland
 Fantasy Studios, 2008, 2010. Citované: 2018.
 
Parametre:
difúziaChyby – pravdivostná hodnota určujúca, či má byť pri
     posterizácii použitý algoritmus difúzie chyby
paleta – paleta na posterizáciu
Pozri tiež:
posterizuj(), 
posterizuj(Color, Color...), 
posterizuj(Color[]), 
posterizuj(boolean), 
posterizuj(boolean, Color, Color...), 
početFarieb(), 
paleta(int)
početFarieb
public int početFarieb()
Zistí počet farieb použitých v aktuálnej snímke obrázka.
 Metóda neberie do úvahy priehľadnosť farebných bodov, počíta
 farby len na základe ich farebných zložiek.
Návratová hodnota:
počet farieb v obrázku (bez ohľadu na ich priehľadnosť)
Pozri tiež:
paleta(int), 
paleta(int, int), 
posterizuj(Color[]), 
posterizuj(boolean, Color[])
pocetFarieb
public int pocetFarieb()
 Alias pre početFarieb.
paleta
public Farba[] paleta(int početFarieb)
Vyrobí paletu najpoužívanejších farieb vyskytujúcich sa
 v aktuálnej snímke obrázka so zadaným maximálnym počtom farieb.
 Metóda funguje rovnako ako metóda paleta(početFarieb, hranicaZdravia) s predvolenou hranicou
 zdravia 256. (Ďalšie podrobnosti pozri v opise uvedenej
 metódy.)
Parametre:
početFarieb – maximálny počet farieb, ktoré smie paleta
     obsahovať
Návratová hodnota:
paleta farieb obsahujúca zadaný počet farieb
Pozri tiež:
paleta(int, int), 
početFarieb(), 
posterizuj(Color[]), 
posterizuj(boolean, Color[])
paleta
public Farba[] paleta(int početFarieb,
                      int hranicaZdravia)
Vyrobí paletu najpoužívanejších farieb vyskytujúcich sa
 v aktuálnej snímke obrázka so zadaným maximálnym počtom farieb
 a hranicou zdravia 256. Metóda zaraďuje farby do palety podľa
 frekvencie ich výskytu (od najpoužívanejších po najmenej
 používané). Keď počet farieb, ktoré boli zaradené do palety
 presiahne zadaný maximálny počet farieb, tak sa metóda pokúsi
 vypočítať novú farbu ako priemer najbližšej farby a nasledujúcej
 zadanej farby. Hranica zdravia určuje povolenú vzdialenosť medzi
 ďalšou pridávanou položkou a jestvujúcou položkou palety (0
 znamená, že do palety budú zaradené len prvé najpoužívanejšie
 položky). Metóda neberie do úvahy priehľadnosť farebných bodov,
 spracuje všetky body obrázka len na základe ich farebných zložiek
 a rovnako výsledná paleta bude zložená len z nepriehľadných
 farieb.
Parametre:
početFarieb – maximálny počet farieb, ktoré smie paleta
     obsahovať
hranicaZdravia – maximálny vzdialenosť dvoch farieb
     zaraďovaných do palety ako ich priemer
Návratová hodnota:
paleta farieb obsahujúca zadaný počet farieb
Pozri tiež:
paleta(int), 
početFarieb(), 
posterizuj(Color[]), 
posterizuj(boolean, Color[])
svetlo
public void svetlo(Obrázok osvetlenie)
Táto metóda použije na tento obrázok zadanú svetelnú masku.
 Táto operácia nahradí pôvodný obsah obrázka. Správanie tejto
 metódy je podobné ako správanie metódy svetlo(Obrázok,
 Obrázok) (pozrite si aj jej opis).
Parametre:
osvetlenie – iný obrázok, ktorého obsah bude použitý
     na svetelnú úpravu bodov tohto obrázka
Pozri tiež:
svetlo(Obrázok, Obrázok)
svetlo
public void svetlo(Obrázok grafika,
                   Obrázok osvetlenie)
Táto metóda použije na obrázok zadaný v prvom parametri
 (grafika) svetelnú masku zadanú v druhom parametri
 (osvetlenie) a výsledok zlúči do tejto (this)
 inštancie obrázka. Svetelný filter môže obsahovať ľubovoľné
 farby. Pravidlom je, že zložka s hodnotou 0x80 je
 neutrálna, hodnoty zložiek pod touto hranicou výsledný obrázok
 stmavujú a nad touto hranicou zase zosvetľujú.
 
 Príklad:
 
 Tento príklad prečíta obrázok fotografie, upraví parametre
 robota tak, aby mohol rýchlo a ľahko vytvárať svetelnú masku so
 zeleným kruhovým osvetlením (ktoré je premiestňované podľa polohy
 myši) a masku použije na fotografiu.
 
 
import knižnica.*;
public class SvetloObrázka extends GRobot
{
    // Čítanie obrázka a vytvorenie jeho kópií
    // (len z dôvodu rýchleho získania obrázkov rovnakých rozmerov)…
    private final static Obrázok zdroj = Obrázok.čítaj("vuje-01.jpeg");
    private final static Obrázok svetlo = new Obrázok(zdroj);
    private final static Obrázok výsledok = new Obrázok(zdroj);
    private SvetloObrázka()
    {
        // Úprava rozmerov a polohy okna (aj plátna):
        super(zdroj.šírka, zdroj.výška);
        Svet.zbaľ();
        Svet.vystreď();
        // Prispôsobenie vlastností robota:
        veľkosť(150);
        farba(new Farba(0x80FF80));
        cieľováFarba(new Farba(0x0080FF80, true));
        kresliDoObrázka(svetlo);
        použiKruhovýNáter();
        skry();
        // Prvé prekreslenie:
        pohybMyši();
    }
    // Keby sme chceli zachovať svetlosť zvyšku obrázka, museli by sme
    // použiť na výplň svetelnej masky túto farbu:
    // ## private final static Farba neutrálna = new Farba(0x808080);
    @Override public void pohybMyši()
    {
        // Vytvorenie svetelnej masky:
        svetlo.vyplň(tmavošedá);
        // ## svetlo.vyplň(neutrálna);
        skočNaMyš();
        kruh();
        // Použitie masky:
        výsledok.svetlo(zdroj, svetlo);
        // Nakreslenie výsledku:
        podlaha.obrázok(výsledok);
        // Keby sme chceli zobraziť len svetelnú masku:
        // ## podlaha.obrázok(svetlo);
    }
    public static void main(String[] args)
    {
        new SvetloObrázka();
    }
}
 
 Pôvodné obrázky na prevzatie: 
vuje-01.jpeg, 
vuje-02.jpeg
 
 Výsledok:
 
 
 
 
 
 
 Úprava obrázka 
vuje-01.jpeg – zľava doprava: pôvodný obrázok,
 svetelná maska, výsledok.
 
 
 
 
 
 
 Úprava obrázka 
vuje-02.jpeg – zľava doprava: pôvodný obrázok,
 svetelná maska, výsledok.
Parametre:
grafika – iný obrázok, ktorého obsah bude slúžiť ako predloha
     osvetleného výsledku uloženého do tohto (this)
     obrázka
osvetlenie – iný obrázok, ktorého obsah bude použitý
     na svetelnú úpravu bodov výsledku
Pozri tiež:
svetlo(Obrázok)
prevráťZvislo
public void prevráťZvislo()
Prevráti obrázok podľa vodorovnej osi – horná časť obrázka sa
 ocitne dole a naopak.
Pozri tiež:
prevráťVodorovne()
prevratZvislo
public void prevratZvislo()
 Alias pre prevráťZvislo.
prevráťVertikálne
public void prevráťVertikálne()
 Prevráti obrázok podľa vodorovnej osi –
 horná časť obrázka sa ocitne dole a naopak. Metóda je zároveň
 aliasom pre prevráťZvislo.
Pozri tiež:
prevráťHorizontálne()
prevratVertikalne
public void prevratVertikalne()
 Alias pre prevráťZvislo.
prevráťVodorovne
public void prevráťVodorovne()
Prevráti obrázok podľa zvislej osi – pravá časť obrázka
 sa ocitne vľavo a naopak.
Pozri tiež:
prevráťZvislo()
prevratVodorovne
public void prevratVodorovne()
 Alias pre prevráťVodorovne.
prevráťHorizontálne
public void prevráťHorizontálne()
 Prevráti obrázok podľa zvislej osi –
 pravá časť obrázka sa ocitne vľavo a naopak. Metóda je zároveň
 aliasom pre prevráťVodorovne.
Pozri tiež:
prevráťVertikálne()
prevratHorizontalne
public void prevratHorizontalne()
 Alias pre prevráťVodorovne.
roluj
public void roluj(double Δx,
                  double Δy)
Posunie obsah obrázka o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere. Tá časť obrázka, ktorá opustí jeho
  rozmery, bude stratená, pričom na protiľahlej strane vznikne
 prázdna oblasť. Metóda má využitie napríklad pri posune hracej
 plochy uloženej v obrázku, pričom musíme zabezpečiť, aby boli
 vzniknuté prázdne časti plochy dokreslené. Ak chceme pretočiť
 obrázok dookola (t. j. bez straty obsahu), musíme použiť metódu
 pretoč.
 
 Upozornenie:
 Je dôležité si uvedomiť, že pri pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
pretoč
public void pretoč(double Δx,
                   double Δy)
Pretočí obsah obrázka o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere. Tá časť obrázka, ktorá by mala pri
 pretočení opustiť jeho rozmery, sa objaví na protiľahlej strane.
 Pretáčaním obrázka v ľubovoľnom smere nikdy nestratíme obrazovú
 informáciu a spätným posunom dostaneme pôvodný obrázok. Ak
 z rôznych dôvodov potrebujeme, aby sa pri pretáčaní obrázka tie
 časti, ktoré opustia rozmery obrázka stratili a aby vzniknuté
 prázdne časti zostali skutočne prázdne (pripravené na ďalšie
 kreslenie), musíme použiť metódu roluj.
 
 Upozornenie:
 Je dôležité si uvedomiť, že pri pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
pretoc
public void pretoc(double Δx,
                   double Δy)
 Alias pre pretoč.
farbaBodu
public Farba farbaBodu(double x,
                       double y)
Zistí farbu bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca. Funguje podobne
 ako Plátno.farbaBodu(x,
 y).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na zadanej
     pozícii alebo inštancia žiadna, ak sú
     zadané súradnice mimo rozmerov obrázka
farbaBodu
public Farba farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) obrázka na súradniciach
 určených polohou objektu. Funguje podobne ako farbaBodu(x, y), ale namiesto
 jednotlivých súradníc sa spracuje poloha zadaného objekt.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice
     vyšetrovaného bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na pozícii
     objektu alebo inštancia žiadna, ak je
     objekt mimo rozmerov obrázka
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         Color farba)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje so zadanou
 farbou. Funguje podobne ako Plátno.farbaBodu(x, y, farba).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
farba – farba, ktorú chceme porovnať s farbou bodu na zadanej
     pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     obrázka a farba bodu na zadaných súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         Color farba)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu v súradnicovom priestore rámca zhoduje so zadanou
 farbou. Funguje podobne ako farbaBodu(x, y, farba), ale namiesto jednotlivých
 súradníc je zadaný objekt, ktorého poloha určuje vyšetrované
 súradnice.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
farba – farba, ktorú chceme porovnať s farbou bodu na pozícii
     objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     obrázka a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadaného objektu. Funguje podobne ako Plátno.farbaBodu(x, y, farba).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
objekt – objekt, ktorého farbu chceme porovnať s farbou bodu
     na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     obrázka a farba bodu na zadaných súradniciach sa zhoduje
     s farbou zadaného objektu (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 prvého zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou druhého zadaného objektu. Funguje podobne ako
 farbaBodu(x, y, farba), ale namiesto jednotlivých súradníc je
 spracovaná poloha objektu.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
farebnosť – objekt, ktorého farbu chceme porovnať s farbou bodu
     na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     obrázka a farba bodu na jeho súradniciach sa zhoduje s farbou
     zadaného objektu (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         int r,
                         int g,
                         int b)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 Funguje podobne ako Plátno.farbaBodu(x, y, farba), ale farba je
 určená prostredníctvom farebných zložiek.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     obrázka a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         int r,
                         int g,
                         int b,
                         int a)
Zistí, či sa farba bodu (jedného pixela) obrázka na zadaných
 súradniciach v súradnicovom priestore rámca zhoduje s farbou
 zadanou prostredníctvom farebných zložiek a úrovne priehľadnosti.
 Funguje podobne ako Plátno.farbaBodu(x, y, farba), ale farba je
 určená prostredníctvom farebných zložiek a úrovne priehľadnosti.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     obrázka a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         int r,
                         int g,
                         int b)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou zadanou prostredníctvom farebných zložiek a úrovne.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 Funguje podobne ako farbaBodu(x, y, farba), ale namiesto
 jednotlivých súradníc je spracovaná poloha objektu a farba je
 určená prostredníctvom farebných zložiek.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     obrázka a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         int r,
                         int g,
                         int b,
                         int a)
Zistí, či sa farba bodu (jedného pixela) obrázka na súradniciach
 zadaného objektu (v súradnicovom priestore rámca) zhoduje
 s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti. Funguje podobne ako farbaBodu(x, y, farba), ale namiesto
 jednotlivých súradníc je spracovaná poloha objektu a farba je
 určená prostredníctvom farebných zložiek a úrovne priehľadnosti.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     obrázka a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
priehľadnosť
public double priehľadnosť()
 Zistí aktuálnu úroveň priehľadnosti
 tohto obrázka.
Definované:
priehľadnosť v rozhraní Priehľadnosť
Návratová hodnota:
aktuálna úroveň priehľadnosti tohto obrázka
Pozri tiež:
priehľadnosť(double), 
upravPriehľadnosť(double)
priehladnost
public double priehladnost()
 Alias pre priehľadnosť.
Definované:
priehladnost v rozhraní Priehľadnosť
priehľadnosť
public void priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň (ne)priehľadnosti
 tohto obrázka, pričom jednotlivé body na obrázku môžu mať svoju
 vlastnú úroveň priehľadnosti. Úroveň 0.0 znamená, že obrázok
 nebude pri kreslení zobrazený. Úroveň 1.0 znamená, že jednotlivé
 body obrázka budú zobrazené s ich vlastnou úrovňou priehľadnosti –
 nepriehľadné body budú plne viditeľné. Úroveň priehľadnosti
 obrázka nemá vplyv na jeho uloženie
 do súboru, iba na jeho zobrazenie.
Parametre:
priehľadnosť – nová úroveň priehľadnosti (0.0 – 1.0)
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double)
priehladnost
public void priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
priehľadnosť
public void priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
Parametre:
objekt – objekt určujúci novú úroveň priehľadnosti
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double)
priehladnost
public void priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
upravPriehľadnosť
public void upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti obráza. Pre viac informácií
 o priehľadnosti pozri priehľadnosť.
Parametre:
zmena – hodnota, ktorou bude násobená aktuálna hodnota
     priehľadnosti; príklady: 0.5 – priehľadnosť bude znížená
     o polovicu, 2.0 – úroveň priehľadnosti bude zdvojnásobená
Pozri tiež:
priehľadnosť(double), 
priehľadnosť()
upravPriehladnost
public void upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
ulož
public void ulož(String súbor)
Uloží obrázok do súboru. Prípona súboru musí byť .gif,
 .png alebo .jpg (resp. .jpeg). Ak súbor
 jestvuje, tak vznikne výnimka oznamujúca, že súbor so zadaným
 menom už jestvuje. Ak chcete súbor prepísať, použite metódu
 ulož(String, boolean) s druhým parametrom rovným
 true. Odporúčame pozrieť si opis uvedenej metódy,
 pretože obsahuje užitočné príklady použitia a informácie v jej
 opise sú platné aj pre túto metódu.
Parametre:
súbor – názov súboru s požadovanou príponou
Výnimky:
GRobotException – ak súbor jestvuje alebo bol zadaný názov
     súboru s neplatnou príponou
uloz
public void uloz(String súbor)
 Alias pre ulož.
ulož
public void ulož(String súbor,
                 boolean prepísať)
Uloží obsah obrázka do súboru. Prípona súboru musí byť
 .gif, .png alebo .jpg
 (resp. .jpeg).
 
 Formát GIF je jedným z najstarších z pohľadu histórie
 grafických formátov, ale stal sa obľúbeným, pretože umožňuje
 tvoriť animované verzie obrázkov. Ak je inštancia obrázka
 animovaná, tak táto metóda automaticky vytvorí a uloží animovanú
 verziu GIFu. Implicitne pri tom použije niektoré jestvujúce
 vlastnosti/nastavenia/stavy programovacieho rámca, napríklad
 farba pozadia je zmiešaná
 so všetkými polopriehľadnými bodmi, pretože formát GIF
 nepodporuje čiastočnú priehľadnosť bodov a aktuálna hodnota
 počtu opakovaní animácie
 zároveň určí počet opakovaní uložený a používaný v tomto
 súborovom formáte, pričom pri ukladaní má hodnota 0
 rovnaký význam ako akákoľvek záporná hodnota, čiže nekonečný
 počet opakovaní (na rozdiel od významu použitého v programovacom
 rámci, kedy hodnota 0 znamená koniec animácie
 a záporné hodnoty znamenajú nekonečný počet opakovaní).
 
 Príklad:
 
 Formát GIF je historickým formátom s určitými (najmä farebnými)
 obmedzeniami, ale stále nachádza svoje použitie. Nasledujúci
 príklad ukazuje ako takýto súbor vytvoriť s použitím programovacieho
 rámca GRobot, ale na plnohodnotné (plnofarebné) uloženie
 snímok animovaného obrázka odporúčame použiť sekvenciu súborov vo
 formáte PNG, ktorú táto metóda vytvorí automaticky, ak nájde
 v názve súboru zástupný znak * – pozri ďalší
 príklad. (Znak * bol zvolený úmyselne, pretože na
 nami používaných operačných systémoch ide o neplatný znak v rámci
 názvov súborov.)
 
 
import knižnica.*;
public class VytvorAnimovanýGIF extends GRobot
{
    // Inštancia obrázka, do ktorej budú ukladané snímky animácie lopty
    // a ktorá výslednú animáciu uloží do formátu GIF.
    private Obrázok animovanýObrázok;
    // Zoznam modrých farieb použitých na tieňovanie lopty.
    private final Zoznam&lt;Farba&gt; farby = new Zoznam&lt;Farba&gt;(
        new Farba( 0,  0, 224), new Farba(16, 16, 232),
        new Farba(32, 32, 240), new Farba(48, 48, 248),
        new Farba(64, 64, 255));
    // Táto metóda je schopná nakresliť loptu vrátane jej prípadnej
    // deformácie.
    private void kresliLoptu(double sploštenieX, double sploštenieY)
    {
        // Vždy pred kreslením lopty sa aktuálny obsah animovaného obrázka
        // vymaže:
        animovanýObrázok.vymaž();
        // Najprv spracujeme tieňovanie lopty. Na to treba obmedziť oblasť
        // kreslenia do obrázka na požadovaný tvar, čo zariadia nasledujúce
        // tri príkazy:
        nekresliTvary();
        kresliDo(elipsa(40 + sploštenieX, 40 + sploštenieY));
        kresliTvary();
        // Nasledujúci blok kreslí tieňovanie lopty:
        // (Poznámka: Toto by sa dalo riešiť aj náterom.)
        double menej = 0;
        skoč(-12 + sploštenieX, 12 + sploštenieY);
        for (Farba farba : farby)
        {
            farba(farba);
            kruh(60 + menej);
            menej -= 12;
        }
        skoč(12 &#45; sploštenieX, -12 &#45; sploštenieY);
        // Rozmažeme kresbu a zrušíme obmedzenie kreslenia do oblasti:
        animovanýObrázok.rozmaž(12);
        kresliVšade();
        // Na záver prekreslíme obrysy lopty, aby sme trochu zamaskovali
        // nie celkom esteticky rozmazané okraje:
        farba(farby.prvý());
        elipsa(40 + sploštenieX, 40 + sploštenieY);
        farba(farby.daj(1));
        elipsa(40 + sploštenieX &#45; 1.5, 40 + sploštenieY &#45; 1.5);
        elipsa(40 + sploštenieX &#45; 3.0, 40 + sploštenieY &#45; 3.0);
    }
    // Odľahčená verzia metódy kresliaca nedeformovanú loptu.
    private void kresliLoptu()
    {
        kresliLoptu(0, 0);
    }
    // Súkromný konštruktor.
    private VytvorAnimovanýGIF()
    {
        // Rozmer plátna bude o málo väčší oproti rozmeru obrázka:
        super(140, 240);
        // Vypneme automatické prekresľovanie
        Svet.nekresli();
        // Vytvoríme nový obrázok, do ktorého bude ukladaná animácia;
        // určíme, že trvanie zobrazenia každej snímky bude 40 ms
        // a vykonáme nevyhnutné nastavenia robota, čo zahŕňa aj
        // presmerovanie jeho kreslenia do animovaného obrázka:
        animovanýObrázok = new Obrázok(120, 220);
        animovanýObrázok.trvanie(0.040);
        hrúbkaČiary(3);
        kresliDoObrázka(animovanýObrázok);
        zdvihniPero();
        skry();
        // Posunieme robot dozadu (nižšie na obrazovke) a začneme animáciu:
        dozadu(52);
        // Prvá (päťsnímková) fáza animácie deformuje loptu pri dopade:
        for (int i = 0; i &lt;= 4; ++i)
        {
            kresliLoptu(2.0 * i, -2.0 * i);
            dozadu(2.0);
            animovanýObrázok.pridajSnímku();
        }
        // Pri návrate deformovanej lopty do pôvodného tvaru jednu snímku
        // preskočíme…
        dopredu(2.0);
        // …a animujeme už len štyri fázy:
        for (int i = 3; i &gt;= 0; --i)
        {
            kresliLoptu(2.0 * i, -2.0 * i);
            dopredu(2.0);
            animovanýObrázok.pridajSnímku();
        }
        // Ďalšia fáza je výskok lopty do výšky:
        for (int i = 14; i &gt;= 0; --i)
        {
            kresliLoptu();
            dopredu(1.0 * i);
            animovanýObrázok.pridajSnímku();
        }
        // A posledná fáza je jej návrat na zem:
        for (int i = 0; i &lt;= 14; ++i)
        {
            kresliLoptu();
            dozadu(1.0 * i);
            animovanýObrázok.pridajSnímku();
        }
        // Vrátime robot domov, obnovíme mu kreslenie na plátno
        // a uložíme a spustíme animáciu:
        domov();
        kresliNaPodlahu();
        animovanýObrázok.ulož("lopta.gif", true);
        animovanýObrázok.spusti();
        // Spustíme časovač:
        Svet.spustiČasovač(0.020);
    }
    // Reakcia na časovač – pravidelne prekresľuje animovaný obrázok, ktorého
    // animácia je vykonávaná automaticky (vnútornými mechanizmami sveta).
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            obrázok(animovanýObrázok);
            Svet.prekresli();
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        // Skrytie sveta (okna aplikácie):
        Svet.skry();
        // Vytvorenie anonymnej inštancie tejto triedy (konštruktor triedy
        // odvodenej od robota vždy zabezpečí vytvorenie aplikácie):
        new VytvorAnimovanýGIF();
        // Automatické nastavenie veľkosti a polohy okna sveta
        // (t. j. aplikácie) a jeho zobrazenie:
        Svet.zbaľ();
        Svet.vystreď();
        Svet.zobraz();
    }
}
 
 Výsledok:
 
  Výsledný
 obrázok – 
lopta.gif.
 
 Príklad:
 
 Sekvenciu súborov vo formáte PNG vytvoríte, ak namiesto názvu
 súboru zadáte šablónu v nasledujúcom tvare (dôležitá je prítomnosť
 aspoň jednej hviezdičky – zvýraznené červenou):
 
     «prefix»*[
«ľubovoľné znaky»*]«postfix»
.png
 
 Príklady platných šablón a ukážky názvov prvých dvoch
 a niekoľkých ďalších náhodne zvolených súborov snímok v animovanej
 sekvencii (ak by animácia mala potrebný rozsah, čo najmä
 v poslednom prípade hraničí s reálnosťou):
 
     srdce*.png – srdce1.png,
 srdce2.png… srdce10.png…
 
     lopta-**.png – lopta-01.png,
 lopta-02.png… lopta-10.png…
 lopta-102.png…
 
     _algoritmus-****_.png –
 _algoritmus-0001_.png,
 _algoritmus-0002_.png…
 _algoritmus-0010_.png…
 _algoritmus-0102_.png…
 _algoritmus-1024_.png…
 _algoritmus-22800_.png…
 
     Sekvencia_*2345*.PNG –
 Sekvencia_000001.PNG,
 Sekvencia_000002.PNG…
 Sekvencia_000010.PNG…
 Sekvencia_000102.PNG…
 Sekvencia_001024.PNG…
 Sekvencia_022800.PNG…
 Sekvencia_10000000.PNG…
 
 Na príkladoch je vidieť, že v šablóne je podstatný výskyt
 prvého a posledného znaku *, pričom môže ísť aj
 o ten istý znak (ak je jediný). Prípadné znaky medzi nimi sú
 z pohľadu obsahu ignorované a do úvahy je vzatý len ich celkový
 počet, ktorý prispeje k určeniu počtu cifier číslovania v názvoch
 súborov snímok animácie.
 
 Pozor! Ak sa týmto spôsobom pokúsite
 uložiť obrázok, ktorý nemá definovanú ani jednu snímku animácie,
 tak táto metóda uloží jediný súbor s poradovým číslom nula a ak
 je tento súbor nájdený metódou čítaj(súbor)
 pri pokuse o čítanie sekvencie súborov so zhodnou šablónou, tak ho
 prečíta ako neanimovaný obrázok a už sa nepokúša hľadať ďalšie
 súbory vyhovujúce kritériám šablóny názvov súborov animovanej
 sekvencie.
 
 Podobne funguje komunikácia pri určovaní výsledného počtu snímok
 ak je druhý parameter tejto metódy (prepísať) rovný
 true a na pevnom disku jestvuje sekvencia s vyšším
 alebo nulovým počtom snímok, tak pri zápise táto metóda vymaže
 súbor s poradovým číslom nula a/alebo súbor s najbližším vyšším
 poradovým číslom po skončení aktuálnej sekvencie. Tým je zaručené,
 že metóda čítaj(súbor) prečíta rovnaký počet
 snímok aký má aktuálna sekvencia.
 
 
import knižnica.*;
public class VytvorSekvenciuPNG extends GRobot
{
    // Tieto konštanty určia rozmery indikátora stavu zobrazeného
    // a aktualizovaného na obrazovke počas tvorby a zápisu animácie do
    // sekvencie PNG súborov (v skutočnosti ide o polovičné hodnoty):
    private final static double výškaIndikátora = 20.0;
    private final static double šírkaIndikátora = 160.0;
    // Táto konštanta určuje požadovaný počet snímok animácie (ak nie je podiel
    // 360.0 / početSnímok celé číslo, tak sa môže skutočný počet zvýšiť
    // o jednu snímku):
    private final static int početSnímok = 250;
    // Inštancia obrázka, do ktorej budú ukladané snímky vytváranej animácie
    // a ktorá ju uloží do seknvencie PNG súborov:
    private Obrázok animovanýObrázok;
    
    // Kreslenie indikátora priebehu.
    private void kresliIndikátor(double hotovo)
    {
        // Prepočítame percentuálnu hodnotu na počet pixelov:
        hotovo *= šírkaIndikátora;
        // Nastavíme hrúbku čiary tvarov indikátora:
        hrúbkaČiary(3.0);
        // Nakreslenie šedej výplne tej časti indikátora, ktorá reprezentuje
        // nedokončenú časť úlohy:
        farba(šedá);
        vyplňObdĺžnik(šírkaIndikátora, výškaIndikátora);
        // Nakreslenie čierneho obrysu rovnakej časti indikátora:
        farba(čierna);
        kresliObdĺžnik(šírkaIndikátora, výškaIndikátora);
        // Presunutie robota na správne miesto tak, aby bola „dokončená časť“
        // indikátora kreslená presne od ľavého okraja celého indikátora:
        skoč(hotovo &#45; šírkaIndikátora, 0);
        // Nakreslenie zelenej výplne tej časti indikátora, ktorá reprezentuje
        // dokončenú časť úlohy:
        farba(zelená);
        vyplňObdĺžnik(hotovo, výškaIndikátora);
        // Nakreslenie čierneho obrysu rovnakej časti indikátora:
        farba(čierna);
        kresliObdĺžnik(hotovo, výškaIndikátora);
    }
    // Metóda slúžiaca na vytvorenie animácie. Prijíma počet bodov, cez ktoré
    // má prechádzať animovaná krivka a požadovaný počet snímok (na túto
    // hodnotu máme zároveň definovanú konštantu; do tejto metódy ju posielame,
    // aby bola univerzálnejšia – vystrihnuteľná a použiteľná v inej
    // aplikácii).
    private void vytvorAnimáciu(int početBodov, int početSnímok)
    {
        // Pole bodov, cez ktoré prechádza animovaná krivka:
        Bod[] čiara = new Bod[početBodov];
        // Uloženie prvého bodu do poľa (zámerne je umiestnený mimo plátna,
        // aby nebolo vidno začiatok krivky – pôsobilo by to rušivo):
        skočNa(0, -Svet.výška() &#45; 10);
        čiara[0] = poloha();
        // Pridanie požadovaného počtu náhodných bodov
        // (okrem prvého a posledného):
        for (int i = 1; i &lt; početBodov &#45; 1; ++i)
        {
            náhodnáPoloha();
            čiara[i] = poloha();
        }
        // Uloženie posledného bodu do poľa (tiež je umiestnený mimo plátna,
        // aby nebolo vidno koniec krivky):
        skočNa(0, Svet.výška() + 10);
        čiara[početBodov &#45; 1] = poloha();
        // Pole farieb použitých na nakreslenie krivky:
        Farba[] farby = new Farba[početBodov];
        // Stanovenie začiatočnej a koncovej farby krivky:
        Farba prvá = červená;
        Farba posledná = žltá;
        // Vypočítanie farebného prechodu medzi začiatočnou a koncovou farbou
        // s použitím lineárnej interpolácie na jednotlivé farebné zložky
        // (vznikne tým lineárny farebný gradient):
        for (int i = 0; i &lt; početBodov; ++i)
            farby[i] = new Farba(
                (int)Svet.lineárnaInterpolácia(
                    prvá.červená(), posledná.červená(),
                    (double)i / (double)početBodov),
                (int)Svet.lineárnaInterpolácia(
                    prvá.zelená(), posledná.zelená(),
                    (double)i / (double)početBodov),
                (int)Svet.lineárnaInterpolácia(
                    prvá.modrá(), posledná.modrá(),
                    (double)i / (double)početBodov));
        // Vypočítanie uhla, ktorý bude slúžiť ako prírastok riadiaceho uhla
        // animácie. Riadiaci uhol bude nadobúdať hodnoty medzi nulou
        // a tristošesťdesiat stupňami a tento meniaci sa uhol bude postupne
        // určovať počiatočné pootočenie robota kresliaceho krivku v rámci
        // jednotlivých snímok. Okrem tohto parametra sa na animovaných
        // snímkach nemení nič. Zvyšok algoritmu kreslenia krivky je úplne
        // rovnaký – prejsť všetkými bodmi, ktoré boli náhodne zvolené vyššie.
        double prírastok = 360.0 / početSnímok;
        // Výroba jednotlivých snímok animácie:
        for (double uhol = 0.0; uhol &lt; 360.0; uhol += prírastok)
        {
            // Vymazanie aktuálnej snímky:
            animovanýObrázok.vymaž();
            // Zahájenie niekoľkých cyklov kreslenia krivky, počas ktorých
            // bude rozmazávaná a opätovne prekresľovaná:
            for (int j = 0; j &lt; 10; ++j)
            {
                // Presmerujeme kreslenie robota do animovaného obrázka:
                kresliDoObrázka(animovanýObrázok);
                // Nastavíme hrúbku kreslenej čiary:
                hrúbkaČiary(5.0 / (double)(j + 1));
                // Skočíme na začiatok krivky:
                skočNa(čiara[0]);
                farba(farby[0]);
                smer(uhol);
                // Ak na snímke jestvuje kresba krivky (ak toto nie je prvá
                // snímka), tak ju rozmažeme:
                if (0 != j) animovanýObrázok.rozmaž(10, čierna);
                // Nakreslíme farebnú krivku (štruktúra try-catch je
                // potrebná, lebo metóda choďNaPoOblúku môže zlyhať; my však
                // jej prípadné zlyhanie ignorujeme):
                for (int i = 1; i &lt; početBodov; ++i)
                    try
                    {
                        farba(farby[i]);
                        choďNaPoOblúku(čiara[i]);
                    }
                    catch (Exception e)
                    {
                        // (Prípadné chyby ignorujeme…)
                    }
                // Vrátime robot domov, obnovíme mu kreslenie na plátno
                // podlahy:
                domov();
                kresliNaPodlahu();
                // Prekreslíme indikátor:
                kresliIndikátor((0.8 * (uhol +
                    ((prírastok * (double)(j + 1)) / 10.0))) / 360.0);
                // A tiež svet (aby sa zmena indikátora prejavila):
                Svet.prekresli();
            }
            // Tu prekreslíme snímku viac ráz cez seba. Keďže obsahuje mnoho
            // polopriehľadných bodov, má to význam. Výsledkom bude
            // zvýraznenie poloriehľadných bodov, ktoré vznikli pri rozmazaní.
            for (int i = 0; i &lt; 2; ++i)
                animovanýObrázok.kresli(animovanýObrázok);
            // Pridáme snímku do animovaného obrázka:
            animovanýObrázok.pridajSnímku();
        }
    }
    // Súkromný konštruktor.
    private VytvorSekvenciuPNG()
    {
        // Upravíme rozmer plátna (ktorý zároveň určí rozmer obrázka):
        super(640, 480);
        // Skryjeme robot:
        skry();
        // Vypneme automatické prekresľovanie:
        Svet.nekresli();
        // Automatické nastavenie veľkosti a polohy okna sveta
        // (t. j. aplikácie) a jeho zobrazenie:
        Svet.zbaľ();
        Svet.vystreď();
        // Vytvoríme nový obrázok, do ktorého bude ukladaná animácia:
        animovanýObrázok = new Obrázok(Svet.šírka(), Svet.výška());
        // Určíme, že trvanie zobrazenia každej snímky bude 40 ms:
        animovanýObrázok.trvanie(0.040);
        // Nakreslíme počiatočný stav indikátora (prázdny):
        kresliIndikátor(0.0);
        // Prekreslíme svet, aby sa indikátor zobrazil používateľovi:
        Svet.prekresli();
        // Spustíme časomieru, pretože sme zvedaví ako dlho bude trvať
        // generovanie animácie:
        Svet.spustiČasomieru();
        // Spustíme výrobu animácie:
        vytvorAnimáciu(50, početSnímok);
        // Zastavíme časomieru a necháme výsledok vypísať na konzolu
        // (výpis sa zobrazí v okne terminálu BlueJa):
        double čas = Svet.zastavČasomieru();
        System.out.println("Tvorba animácie trvala: " +
            Math.round(čas / 60) + " min " + F(čas % 60, 2) + " s");
        // Opäť spustíme časomieru, lebo sme zvedaví ako dlho bude trvať
        // ukladanie PNG sekvencie:
        Svet.spustiČasomieru();
        // Vytvoríme priečinok, do ktorého bude sekvencia ukladaná:
        Súbor.novýPriečinok("sekvencia");
        // Uložíme sekvenciu obrázkov podľa šablóny (šablóna obsahuje názov
        // podpriečinka „sekvencia“):
        animovanýObrázok.ulož("sekvencia/nahodne-ciary-***.png", true);
        // Opäť zastavíme časomieru a vypíšeme výsledok (tiež na konzolu):
        čas = Svet.zastavČasomieru();
        System.out.println("Vytváranie sekvencie súborov trvalo: " +
            Math.round(čas / 60) + " min " + F(čas % 60, 2) + " s");
        // Možno je to pre niekoho zbytočné, ale nakoniec nakreslíme
        // indikátor v úplne dokončenom stave (ak by náhodou zopár
        // nasledujúcich príkazov trvalo dlhšie):
        podlaha.vymažGrafiku();
        kresliIndikátor(1.0);
        Svet.prekresli();
        // Vrátime robot domov, aby bola animácia kreslená korektne:
        domov();
        // A spustíme animáciu aj časovač:
        animovanýObrázok.spusti();
        Svet.spustiČasovač(0.040);
        // Na záver nastavíme čiernu farbu pozadia:
        Svet.farbaPozadia(čierna);
    }
    // Táto reakcia je automaticky spúšťaná počas zápisu (alebo čítania)
    // animovanej PNG sekvencie. Používame ju na aktualizovanie informácie
    // o stave zápisu zobrazenej na obrazovke pre používateľa.
    @Override public void sekvencia(int kódSpracovania, String zdroj,
        String cieľ, long stav, long celkovo)
    {
        // Pred každým kreslení indikátora vymažeme grafiku podlahy
        // a vrátime robot domov:
        podlaha.vymažGrafiku();
        domov();
        // Vypočítame percento dokončenia s tým, že 80 % bolo vykonaných
        // pri tvorbe animácie, takže teraz zobrazujeme už len priebeh zvyšných
        // 20 %:
        kresliIndikátor(0.8 + ((0.2 * (double)stav) / (double)celkovo));
        // Prekreslíme obrazovku:
        Svet.prekresli();
    }
    // Reakcia na časovač – pravidelne prekresľuje animovaný obrázok, ktorého
    // animácia je vykonávaná automaticky (vnútornými mechanizmami sveta).
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            obrázok(animovanýObrázok);
            Svet.prekresli();
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        // Vytvorenie anonymnej inštancie tejto triedy (konštruktor triedy
        // odvodenej od robota vždy zabezpečí vytvorenie aplikácie):
        new VytvorSekvenciuPNG();
    }
}
 
 Opis priebehu a výsledku:
 
 Počas tvorby animácie bude v okne sveta aktualizovaný grafický
 ukazovateľ stavu činnosti:
 
 
 Grafický ukazovateľ stavu
 činnosti.
 
 Kód spracovania reakcie sekvencia sme v príklade nepoužili. V tomto
 prípade mal hodnotu konštanty ZÁPIS_PNG_SEKVENCIE. (V prípade ukladania animáce do formátu GIF
 je hodnota rovná hodnote konštanty
 ZÁPIS_GIF_ANIMÁCIE.)
 
 Podľa nami nameraných hodnôt trvalo vytváranie sekvencie od
 štyroch do šesť a pol minúty. Po skončení fázy generovania (80 %
 ukazovateľa) pokračuje aplikácia fázou ukladania sekvencie
 do súboru (zvyšných 20 % ukazovateľa). Podľa nami nameraných hodnôt
 trvalo ukladanie sekvencie asi minútu a štyridsať sekúnd
 (s rozptylom desať sekúnd).
 
 Výsledkom vykonania tohto príkladu bude sekvencia súborov vo
 formáte PNG vytvorená na disku v priečinku sekvencie.
 Prvý súbor bude mať názov nahodne-ciary-001.png
 a posledný nahodne-ciary-251.png.
 
 Po dokončení bude v okne aplikácie spustená vytvorená
 animácia.
 
 
 
 
 Ukážky možného vzhľadu
 vytvorenej animáce – výsledok každého generovania je unikátny
 (plátno ukážok je úmyselne
 zmenšené).
 
 Na 32-bitových operačných systémoch sa môže stať, že aplikácia
 nebude mať dostatok pamäte na vykonanie. V takom prípade skúste
 cez príkazový riadok operačného systému spustiť aplikáciu
 nasledujúcim príkazom potvrdeným v priečinku s preloženou
 aplikáciou:
 
 
java -Xmx1g VytvorSekvenciuPNG
 
  
Parametre:
súbor – názov súboru s požadovanou príponou
prepísať – ak je true, prípadný jestvujúci
     súbor bude prepísaný, inak sa správa rovnako ako metóda
     ulož(String)
Výnimky:
GRobotException – ak súbor jestvuje a parameter prepísať
     je false alebo ak bol zadaný názov súboru
     s neplatnou príponou
uloz
public void uloz(String súbor,
                 boolean prepísať)
 Alias pre ulož.
doSchránky
public boolean doSchránky()
Vloží obsah tohto obrázka do schránky.
 
 Upozornenie: Obrázok je uchovaný
 v schránke len počas činnosti aplikácie robota. Po zatvorení
 okna sveta, je obrázok zo schránky odstránený.
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.obrázok(Image)
doSchranky
public boolean doSchranky()
 Alias pre doSchránky.
porovnaj
public static boolean porovnaj(Image obrázok1,
                               Image obrázok2)
Porovná obsahy dvoch zadaných inštancií obrázkov. V prípade,
 že sú oba argumenty tejto metódy tým istým obrázkom, tak je bez
 ďalšej kontroly vrátená hodnota true. Ak ide o rôzne
 objekty obrázkov, tak bude overená zhoda ich obsahu. Najskôr sú
 porovnané rozmery obrázkov a ak sú zhodné, tak sú porovnané ich
 rastre. Potom je podľa toho, či sú obsahovo zhodné alebo nie,
 vrátená hodnota true alebo false.
Parametre:
obrázok1 – prvý porovnávaný obrázok
obrázok2 – druhý porovnávaný obrázok
Návratová hodnota:
ak sú obrázky zhodné, tak true, inak
     false
porovnaj
public boolean porovnaj(Image inýObrázok)
Porovná obsah tejto a zadanej inštancie obrázka. Najskôr sú
 overené rozmery obrázkov a ak sú zhodné, tak sú porovnané ich
 rastre a podľa toho, či sú obsahovo zhodné alebo nie, je vrátená
 hodnota true alebo false.
Parametre:
inýObrázok – obrázok, s ktorým je porovnávaný obsah tejto
     inštancie
Návratová hodnota:
ak je obsah tohto a iného obrázka zhodný, tak
     true, inak false
máVlnenie
public boolean máVlnenie()
Overí, či je definovaná inštancia vlnenia pre tento obrázok.
Návratová hodnota:
true ak je inštancia vlnenia definovaná;
     false v opačnom prípade
Pozri tiež:
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
maVlnenie
public boolean maVlnenie()
 Alias pre máVlnenie.
vlnenie
public Vlnenie vlnenie()
Vráti inštanciu vlnenia pre tento obrázok,
 aby bolo možné s vlnením ďalej pracovať. Ak vlnenie nie je pre
 tento obrázok definované, tak metóda definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. (Overiť
 to, či je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie.) Naopak, metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v takom prípade, že jestvuje. (V opačnom
 prípade vráti metóda jestvujúceVlnenie hodnotu null.)
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Upozornenie: Ak svet grafického robota
 nemá aktívny časovač, tak vlnenie
 nebude fungovať ani po jeho aktivácii. Táto metóda nespúšťa
 časovač (ani vlnenie) automaticky! Účelom automatického
 vytvorenia inštancie vlnenia touto metódou v prípade jej
 neprítomnosti je len zabránenie vzniku chýb. Táto metóda nemá
 nahradiť metódu pridajVlnenie.
Návratová hodnota:
metóda zaručuje vrátenie inštancie Vlnenie
     definovanej pre tento obrázok aj v takom prípade, že pred jej
     volaním nebola inštancia definovaná
Pozri tiež:
máVlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujúceVlnenie
public Vlnenie jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
 V opačnom prípade vráti hodnotu null, čo môže viesť
 ku vzniku výnimky, ak sa programátor pokúsi použiť vrátenú
 hodnotu bez overenia. Naopak, vrátenie inštancie
 vlnenia aj v prípade, že ešte nebolo
 definované zaručuje metóda vlnenie.
Návratová hodnota:
ak je definovaná inštancia vlnenia,
     tak ju metóda vráti; v opačnom prípade vráti hodnotu
     null
Pozri tiež:
máVlnenie(), 
vlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujuceVlnenie
public Vlnenie jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
existujúceVlnenie
public Vlnenie existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
existujuceVlnenie
public Vlnenie existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
definovanéVlnenie
public Vlnenie definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
definovaneVlnenie
public Vlnenie definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
pridajVlnenie
public void pridajVlnenie()
Pridá alebo zresetuje vlnenie tohto obrázka. Ak nie je definované
 alebo aktívne vlnenie pre tento obrázok, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia s predvolenou
 úrovňou útlmu 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public void pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto obrázka. Ak nie je definované
 alebo aktívne vlnenie pre tento obrázok, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia s predvolenou
 úrovňou útlmu 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public void pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie tohto obrázka. Ak nie je definované
 alebo aktívne vlnenie pre tento obrázok, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia so zadanou úrovňou
 útlmu (pozri aj Vlnenie.útlm(útlm)).
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int, boolean), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
pridajVlnenie
public void pridajVlnenie(int útlm,
                          boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto obrázka. Ak nie je definované
 alebo aktívne vlnenie pre tento obrázok, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia so zadanou úrovňou
 útlmu (pozri aj Vlnenie.útlm(útlm)).
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
odstráňVlnenie
public void odstráňVlnenie()
Ukončí vlnenie a úplne odstráni inštanciu vlnenia tohto obrázka
 z prostredia programovacieho rámca GRobot.
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean)
odstranVlnenie
public void odstranVlnenie()
 Alias pre odstráňVlnenie.
rýchlosť
public double rýchlosť()
Vráti aktuálnu rýchlosť prehrávania animácie (bez ohľadu na to,
 či je práve animácia spustená alebo nie). Rýchlosť je vyjadrená
 pomerne. Hodnota 1.0 znamená skutočnú rýchlosť určenú
 hodnotami trvania zobrazenia snímok
 animácie, 2.0 znamená dvojnásobnú rýchlosť a tak
 podobne. Záporná hodnota znamená, že animácia je prehrávaná
 pospiatku.
Návratová hodnota:
aktuálna rýchlosť prehrávania animácie
rychlost
public double rychlost()
 Alias pre rýchlosť.
rýchlosťAnimácie
public double rýchlosťAnimácie()
Vráti aktuálnu rýchlosť prehrávania animácie (bez ohľadu na to,
 či je práve animácia spustená alebo nie). Rýchlosť je vyjadrená
 pomerne. Hodnota 1.0 znamená skutočnú rýchlosť určenú
 hodnotami trvania zobrazenia snímok
 animácie, 2.0 znamená dvojnásobnú rýchlosť a tak
 podobne. Záporná hodnota znamená, že animácia je prehrávaná
 pospiatku.
Návratová hodnota:
aktuálna rýchlosť prehrávania animácie
rychlostAnimacie
public double rychlostAnimacie()
 Alias pre rýchlosťAnimácie.
rýchlosť
public void rýchlosť(double nováRýchlosť)
Upraví rýchlosť prehrávania animácie (bez ohľadu na to, či je
 práve animácia spustená alebo nie). Rýchlosť je vyjadrená pomerne.
 Hodnota 1.0 znamená skutočnú rýchlosť určenú hodnotami
 trvania zobrazenia snímok animácie,
 2.0 znamená dvojnásobnú rýchlosť a tak podobne. Záporná
 hodnota znamená, že animácia bude prehrávaná pospiatku a nula
 znamená, že animácia má byť zastavená (pričom pôvodná rýchlosť
 prehrávania nebude zmenená).
Parametre:
nováRýchlosť – nová rýchlosť animácie; záporná hodnota
     znamená smer prehrávania animácie pospiatku; nulová hodnota
     nezmení skutočnú rýchlosť prehrávania, ale len zastaví
     vykonávanie animácie (ak prebiehalo)
rychlost
public void rychlost(double nováRýchlosť)
 Alias pre rýchlosť.
rýchlosťAnimácie
public void rýchlosťAnimácie(double nováRýchlosť)
Upraví rýchlosť prehrávania animácie (bez ohľadu na to, či je
 práve animácia spustená alebo nie). Rýchlosť je vyjadrená pomerne.
 Hodnota 1.0 znamená skutočnú rýchlosť určenú hodnotami
 trvania zobrazenia snímok animácie,
 2.0 znamená dvojnásobnú rýchlosť a tak podobne. Záporná
 hodnota znamená, že animácia bude prehrávaná pospiatku a nula
 znamená, že animácia má byť zastavená (pričom pôvodná rýchlosť
 prehrávania nebude zmenená).
Parametre:
nováRýchlosť – nová rýchlosť animácie; záporná hodnota
     znamená smer prehrávania animácie pospiatku; nulová hodnota
     nezmení skutočnú rýchlosť prehrávania, ale len zastaví
     vykonávanie animácie (ak prebiehalo)
rychlostAnimacie
public void rychlostAnimacie(double nováRýchlosť)
 Alias pre rýchlosťAnimácie.
početSnímok
public int početSnímok()
Vráti aktuálny počet snímok animácie uloženej v tomto obrázku.
 Nula znamená, že tento obrázok nie je animovaný.
 
 Každá nová snímka je vnútorne reprezentovaná ako samostatná
 kópia grafickej informácie obrázka, ktorá môže byť prenesená
 z alebo do hlavnej grafiky obrázka. Tento proces prenosu môže byť
 jednostranný (počas animácie) alebo obojstranný (pri zmene snímky
 alebo pri ukladaní alebo čítaní obrázka zo súboru). To znamená, že
 ak nie je spustená animácia, tak sa medzi snímkami môžeme posúvať
 metódami prváSnímka, ďalšiaSnímka, predchádzajúcaSnímka,
 predchádzajúcaSnímka a snímka(ktorá) a vtedy je zaručené, že sa pri posune medzi snímkami
 zároveň stihnú aktualizovať grafické informácie, ktoré boli
 medzičasom vykonané v hlavnej grafike obrázka. Naopak, ak je
 animácia spustená, môže kedykoľvek nastať prepísanie hlavnej
 grafiky grafikou niektorej snímky a prípadné zmeny sa nemusia
 stihnúť uložiť. Počas procesu animácie (ktorý je automaticky
 vykonávaný na pozadí) sa totiž údaje z hlavnej grafiky
 z optimalizačných dôvodov neuchovávajú späť do snímok.
Návratová hodnota:
aktuálny počet snímok animácie uložených v tomto obrázku
pocetSnimok
public int pocetSnimok()
 Alias pre početSnímok.
pridajSnímku
public void pridajSnímku()
Pridá novú snímku na koniec animácie s aktuálnou (naposledy
 použitou) hodnotou trvania zobrazenia
 a s aktuálnou grafikou obrázka.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
pridajSnimku
public void pridajSnimku()
 Alias pre pridajSnímku.
pridajSnímku
public void pridajSnímku(Image obrázok)
Pridá novú snímku na koniec animácie s aktuálnou (naposledy
 použitou) hodnotou trvania zobrazenia
 a so zadanou grafikou.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
obrázok – grafika novej snímky
pridajSnimku
public void pridajSnimku(Image obrázok)
 Alias pre pridajSnímku.
pridajSnímku
public void pridajSnímku(Image obrázok,
                         double trvanie)
Pridá novú snímku na koniec animácie so zadanou grafikou a so
 zadanou hodnotou trvania jej zobrazenia.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
obrázok – grafika novej snímky
trvanie – čas zobrazenia snímky v sekundách s presnosťou
     na tisíciny
pridajSnimku
public void pridajSnimku(Image obrázok,
                         double trvanie)
 Alias pre pridajSnímku.
vložSnímku
public void vložSnímku(int indexSnímky)
Vloží novú snímku animácie na zadanú pozíciu s aktuálnou
 (naposledy použitou) hodnotou trvania
 zobrazenia a s aktuálnou grafikou obrázka.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
vlozSnimku
public void vlozSnimku(int indexSnímky)
 Alias pre vložSnímku.
vložSnímku
public void vložSnímku(int indexSnímky,
                       Image obrázok)
Vloží novú snímku animácie na zadanú pozíciu s aktuálnou
 (naposledy použitou) hodnotou trvania
 zobrazenia a so zadanou grafikou.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
obrázok – grafika novej snímky
vlozSnimku
public void vlozSnimku(int indexSnímky,
                       Image obrázok)
 Alias pre vložSnímku.
vložSnímku
public void vložSnímku(int indexSnímky,
                       Image obrázok,
                       double trvanie)
Vloží novú snímku animácie na zadanú pozíciu so zadanou grafikou
 a so zadanou hodnotou trvania jej zobrazenia.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
obrázok – grafika novej snímky
trvanie – čas zobrazenia snímky v sekundách s presnosťou
     na tisíciny
vlozSnimku
public void vlozSnimku(int indexSnímky,
                       Image obrázok,
                       double trvanie)
 Alias pre vložSnímku.
vymažSnímku
public void vymažSnímku()
Vymaže aktuálnu snímku animácie a aktivuje najbližšiu dostupnú
 snímku. Ak to bola posledná snímka v obrázku, tak zostane nastavená
 jej grafika a prípadná prebiehajúca animácia sa zastaví.
vymazSnimku
public void vymazSnimku()
 Alias pre vymažSnímku.
vymažSnímku
public void vymažSnímku(int indexSnímky)
Vymaže zadanú snímku animácie a ak to bola aktívna snímka,
 tak aktivuje najbližšiu dostupnú snímku. Ak to bola posledná
 zostávajúca snímka v tomto obrázku, tak zostane nastavená jej
 grafika a prípadná prebiehajúca animácia sa zastaví.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
vymazSnimku
public void vymazSnimku(int indexSnímky)
 Alias pre vymažSnímku.
ďalšiaSnímka
public void ďalšiaSnímka()
Aktivuje nasledujúcu snímku animácie.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
dalsiaSnimka
public void dalsiaSnimka()
 Alias pre ďalšiaSnímka.
predchádzajúcaSnímka
public void predchádzajúcaSnímka()
Aktivuje predchádzajúcu snímku animácie.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
predchadzajucaSnimka
public void predchadzajucaSnimka()
 Alias pre predchádzajúcaSnímka.
prváSnímka
public void prváSnímka()
Aktivuje prvú snímku animácie.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
prvaSnimka
public void prvaSnimka()
 Alias pre prváSnímka.
poslednáSnímka
public void poslednáSnímka()
Aktivuje poslednú snímku animácie.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
poslednaSnimka
public void poslednaSnimka()
 Alias pre poslednáSnímka.
snímka
public void snímka(int indexSnímky)
Aktivuje zadanú snímku animácie.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
snimka
public void snimka(int indexSnímky)
 Alias pre snímka.
snímka
public int snímka()
Vráti index aktívnej snímky animácie.
Návratová hodnota:
index aktívnej (aktuálne zvolenej) snímky animácie
snimka
public int snimka()
 Alias pre snímka.
trvanie
public double trvanie()
Zistí hodnotu trvania zobrazenia aktívnej snímky. (Prípadne
 aktuálnu naposledy použitú hodnotu trvania, ak animácia nemá
 žiadne snímky.)
Návratová hodnota:
trvanie zobrazenia aktívnej snímky počas animácie
     v sekundách s presnosťou na tisíciny (pri jednotkovej
     rýchlosti prehrávania)
trvanie
public double trvanie(int indexSnímky)
Zistí hodnotu trvania zobrazenia zadanej snímky. (Prípadne
 aktuálnu naposledy použitú hodnotu trvania, ak animácia nemá
 žiadne snímky.)
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
Návratová hodnota:
trvanie zobrazenia cieľovej snímky počas animácie
     v sekundách s presnosťou na tisíciny (pri jednotkovej
     rýchlosti prehrávania)
trvanieZobrazeniaSnímky
public double trvanieZobrazeniaSnímky()
Zistí hodnotu trvania zobrazenia aktívnej snímky. (Prípadne
 aktuálnu naposledy použitú hodnotu trvania, ak animácia nemá
 žiadne snímky.)
Návratová hodnota:
trvanie zobrazenia aktívnej snímky počas animácie
     v sekundách s presnosťou na tisíciny (pri jednotkovej
     rýchlosti prehrávania)
trvanieZobrazeniaSnimky
public double trvanieZobrazeniaSnimky()
 Alias pre trvanieZobrazeniaSnímky.
trvanieZobrazeniaSnímky
public double trvanieZobrazeniaSnímky(int indexSnímky)
Zistí hodnotu trvania zobrazenia zadanej snímky. (Prípadne
 aktuálnu naposledy použitú hodnotu trvania, ak animácia nemá
 žiadne snímky.)
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
Návratová hodnota:
trvanie zobrazenia cieľovej snímky počas animácie
     v sekundách s presnosťou na tisíciny (pri jednotkovej
     rýchlosti prehrávania)
trvanieZobrazeniaSnimky
public double trvanieZobrazeniaSnimky(int indexSnímky)
 Alias pre trvanieZobrazeniaSnímky.
trvanie
public void trvanie(double trvanie)
Nastaví novú hodnotu trvania aktívnej snímky.
Parametre:
trvanie – nový čas zobrazenia aktívnej snímky v sekundách
     s presnosťou na tisíciny
trvanie
public void trvanie(int indexSnímky,
                    double trvanie)
Nastaví novú hodnotu trvania zadanej snímky.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
trvanie – nový čas zobrazenia cieľovej snímky v sekundách
     s presnosťou na tisíciny
trvanieZobrazeniaSnímky
public void trvanieZobrazeniaSnímky(double trvanie)
Nastaví novú hodnotu trvania aktívnej snímky.
Parametre:
trvanie – nový čas zobrazenia aktívnej snímky v sekundách
     s presnosťou na tisíciny
trvanieZobrazeniaSnimky
public void trvanieZobrazeniaSnimky(double trvanie)
 Alias pre trvanieZobrazeniaSnímky.
trvanieZobrazeniaSnímky
public void trvanieZobrazeniaSnímky(int indexSnímky,
                                    double trvanie)
Nastaví novú hodnotu trvania zadanej snímky.
Parametre:
indexSnímky – index cieľovej snímky; ak je táto hodnota
     väčšia než je aktuálny počet snímok, tak bude prepočítaná
     tak, aby ukazovala na adekvátne vzdialenú snímku v rámci
     cyklickej animácie (čiže hodnota rovná počtu snímok bude
     presmerovaná na prvú snímku, hodnota o jedno vyššia na druhú
     a tak ďalej); záporné hodnoty budú prepočítané v opačnom
     smere (od konca animácie)
trvanie – nový čas zobrazenia cieľovej snímky v sekundách
     s presnosťou na tisíciny
trvanieZobrazeniaSnimky
public void trvanieZobrazeniaSnimky(int indexSnímky,
                                    double trvanie)
 Alias pre trvanieZobrazeniaSnímky.
animujeSa
public boolean animujeSa()
Zistí, či je práve spustená animácia obrázka.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Návratová hodnota:
true ak je práve spustená animácia obrázka,
     false v opačnom prípade
opakovaniaAnimácie
public int opakovaniaAnimácie()
Zistí, koľko opakovaní zostáva do ukončenia animácie. Hodnota
 -1 znamená, že animácia má byť prehrávaná
 donekonečna.
Návratová hodnota:
počet opakovaní zostávajúci do ukončenia animácie alebo
     -1 v prípade nekonečne sa opakujúcej animácie
opakovaniaAnimacie
public int opakovaniaAnimacie()
 Alias pre opakovaniaAnimácie.
početOpakovaní
public int početOpakovaní()
Zistí, koľko opakovaní zostáva do ukončenia animácie. Hodnota
 -1 znamená, že animácia má byť prehrávaná
 donekonečna.
Návratová hodnota:
počet opakovaní zostávajúci do ukončenia animácie alebo
     -1 v prípade nekonečne sa opakujúcej animácie
pocetOpakovani
public int pocetOpakovani()
 Alias pre početOpakovaní.
opakovaniaAnimácie
public void opakovaniaAnimácie(int početOpakovaní)
Ak má tento obrázok nenulový počet snímok animácie, tak táto
 metóda nastaví nový počet opakovaní animácie zostávajúci do
 ukončenia animácie a to bez ohľadu na to, či je animácia spustená
 alebo nie. Hodnota -1 znamená, že animácia má byť
 prehrávaná donekonečna. Ak je zadaná nula, tak prípadná spustená
 animácia bude zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
opakovaniaAnimacie
public void opakovaniaAnimacie(int početOpakovaní)
 Alias pre opakovaniaAnimácie.
početOpakovaní
public void početOpakovaní(int početOpakovaní)
Ak má tento obrázok nenulový počet snímok animácie, tak táto
 metóda nastaví nový počet opakovaní animácie zostávajúci do
 ukončenia animácie a to bez ohľadu na to, či je animácia spustená
 alebo nie. Hodnota -1 znamená, že animácia má byť
 prehrávaná donekonečna. Ak je zadaná nula, tak prípadná spustená
 animácia bude zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
pocetOpakovani
public void pocetOpakovani(int početOpakovaní)
 Alias pre početOpakovaní.
spusti
public void spusti()
Spustí animáciu s nekonečným počtom opakovaní v naposledy
 použitom smere prehrávania. Ak bola animácia už spustená, tak iba
 nastaví nekonečný počet opakovaní.
spustiAnimáciu
public void spustiAnimáciu()
Spustí animáciu s nekonečným počtom opakovaní v naposledy
 použitom smere prehrávania. Ak bola animácia už spustená, tak iba
 nastaví nekonečný počet opakovaní.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
spustiAnimaciu
public void spustiAnimaciu()
 Alias pre spustiAnimáciu.
spusti
public void spusti(int početOpakovaní)
Spustí animáciu so zadaným počtom opakovaní v naposledy použitom
 smere prehrávania. Ak bola animácia už spustená, tak iba nastaví
 zadaný počet opakovaní. Ak je zadaný počet opakovaní rovný nule,
 tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimáciu
public void spustiAnimáciu(int početOpakovaní)
Spustí animáciu so zadaným počtom opakovaní v naposledy použitom
 smere prehrávania. Ak bola animácia už spustená, tak iba nastaví
 zadaný počet opakovaní. Ak je zadaný počet opakovaní rovný nule,
 tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimaciu
public void spustiAnimaciu(int početOpakovaní)
 Alias pre spustiAnimáciu.
spustiDopredu
public void spustiDopredu()
Spustí animáciu dopredu s nekonečným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania a nastaví
 nekonečný počet opakovaní.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
spustiAnimáciuDopredu
public void spustiAnimáciuDopredu()
Spustí animáciu dopredu s nekonečným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania a nastaví
 nekonečný počet opakovaní.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
spustiAnimaciuDopredu
public void spustiAnimaciuDopredu()
 Alias pre spustiAnimáciuDopredu.
spustiDopredu
public void spustiDopredu(int početOpakovaní)
Spustí animáciu dopredu so zadaným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania a nastaví
 zadaný počet opakovaní. Ak je zadaný počet opakovaní rovný nule,
 tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimáciuDopredu
public void spustiAnimáciuDopredu(int početOpakovaní)
Spustí animáciu dopredu so zadaným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania a nastaví
 zadaný počet opakovaní. Ak je zadaný počet opakovaní rovný nule,
 tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimaciuDopredu
public void spustiAnimaciuDopredu(int početOpakovaní)
 Alias pre spustiAnimáciuDopredu.
spustiPospiatku
public void spustiPospiatku()
Spustí animáciu pospiatku s nekonečným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania (pospiatku)
 a nastaví nekonečný počet opakovaní.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
spustiAnimáciuPospiatku
public void spustiAnimáciuPospiatku()
Spustí animáciu pospiatku s nekonečným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania (pospiatku)
 a nastaví nekonečný počet opakovaní.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
spustiAnimaciuPospiatku
public void spustiAnimaciuPospiatku()
 Alias pre spustiAnimáciuPospiatku.
spustiPospiatku
public void spustiPospiatku(int početOpakovaní)
Spustí animáciu pospiatku so zadaným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania (pospiatku)
 a nastaví zadaný počet opakovaní. Ak je zadaný počet opakovaní
 rovný nule, tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimáciuPospiatku
public void spustiAnimáciuPospiatku(int početOpakovaní)
Spustí animáciu pospiatku so zadaným počtom opakovaní. Ak bola
 animácia už spustená, tak iba upraví smer prehrávania (pospiatku)
 a nastaví zadaný počet opakovaní. Ak je zadaný počet opakovaní
 rovný nule, tak je animácia zastavená.
 
 Upozornenie: Počítadlo opakovaní sa
 vzťahuje na momenty reštartovania animácie, to znamená, že hodnota
 počítadla je znížená po prejdení animácie z konca na začiatok alebo
 naopak, podľa smeru prehrávania animácie. To znamená, že ak nie je
 nastavená správna snímka (začiatočná alebo koncová podľa smeru
 prehrávania), tak sa môže animácia skončiť hneď po jej spustení
 (ak malo byť vykonané len jedno opakovanie) alebo sa nevykoná celá,
 podľa toho, ktorá snímka bola práve aktívna.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
Parametre:
početOpakovaní – počet opakovaní animácie, po ktorom sa
     animácia ukončí; hodnota -1 je rezervovaná pre
     nekonečný počet opakovaní (v skutočnosti akákoľvek zadaná
     záporná hodnota nastaví počet opakovaní na hodnotu
     -1); hodnota 0 spôsobí zastavenie
     animácie (ak náhodou prebieha)
spustiAnimaciuPospiatku
public void spustiAnimaciuPospiatku(int početOpakovaní)
 Alias pre spustiAnimáciuPospiatku.
zastav
public void zastav()
Zastaví prehrávanie animácie tohto obrázka.
 
 Poznámka: Pozri aj informácie o snímkach
 uvedené v opise metódy početSnímok (tieto
 informácie súvisia aj s vykonávaním animácie).
 
 Táto metóda je vo viacerých prípadoch spúšťaná automaticky.
 Napríklad po dokončení všetkých opakovaní animácie, nastavení počtu opakovaní alebo rýchlosti
 prehrávania animácie na nulu, vymazaní všetkých snímok animácie a podobne. Ak animácia
 prebiehala, tak vykonanie tejto metódy spustí prekryté reakcie
 robota zastavenieAnimácie a/alebo rovnomennú reakciu aktívnej obsluhy
 udalostí – zastavenieAnimácie.
zastavAnimáciu
public void zastavAnimáciu()
 Alias pre zastav.
zastavAnimaciu
public void zastavAnimaciu()
 Alias pre zastav.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":9,"i5":9,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda ObsluhaUdalostí
java.lang.Object
ObsluhaUdalostí
Známe priame odvodené triedy:
ObsluhaUdalosti
public class ObsluhaUdalostí
extends Object
Trieda obsluhy udalostí slúži na obsluhu rozmanitých udalostí. Napríklad:
 akcie myši, klávesnice, voľby položky ponuky, vymazania alebo
 prekreslenia sveta… Keď chcete, aby aplikácia vytvorená s podporou
 programovacieho rámca GRobot poskytovala funkcionalitu spojenú
 s klávesnicou, myšou a podobne, je potrebné nasledujúcim spôsobom
 vytvoriť inštanciu tejto triedy slúžiacej na obsluhu udalostí, pričom
 stačí uviesť tie metódy (reakcie), ktoré plánujete využiť:
 
 
new ObsluhaUdalostí()
{
    // Časovač
    @Override public void tik() {}
    // Klávesnica
    @Override public void stlačenieKlávesu() {}
    @Override public void uvoľnenieKlávesu() {}
    @Override public void zadanieZnaku() {}
    // Myš
    @Override public void klik() {}
    @Override public void stlačenieTlačidlaMyši() {}
    @Override public void uvoľnenieTlačidlaMyši() {}
    @Override public void pohybMyši() {}
    @Override public void ťahanieMyšou() {}
    @Override public void rolovanieKolieskomMyši() {}
    // Rozhranie (položky, tlačidlá, skratky…)
    @Override public void voľbaPoložkyPonuky() {}
    @Override public void voľbaKontextovejPoložky() {}
    @Override public void voľbaTlačidla() {}
    @Override public void voľbaSystémovejIkony() {}
    @Override public void voľbaSystémovejPoložky() {}
    @Override public void aktiváciaOdkazu() {}
    @Override public void klávesováSkratka() {}
    @Override public void zmenaPosunuLišty() {}
    @Override public void ťahanieSúborov() {}
    @Override public void pustenieSúboru(String súbor) {}
    // Prekresľovanie
    @Override public void prekreslenie() {}
    @Override public void vymazanie() {}
    @Override public void dokreslenie() {}
    // Sekvencia
    @Override public void sekvencia(int kódSpracovania,
        Object zdroj, Object cieľ, long stav, long celkovo) {}
    // Animácia
    @Override public void zastavenieAnimácie(Obrázok obrázok) {}
    // Okno
    @Override public void aktiváciaOkna() {}
    @Override public void deaktiváciaOkna() {}
    @Override public void maximalizovanie() {}
    @Override public void minimalizovanie() {}
    @Override public void obnovenie() {}
    @Override public void zobrazenieOkna() {}
    @Override public void skrytieOkna() {}
    @Override public void presunutieOkna() {}
    @Override public void zmenaVeľkostiOkna() {}
    @Override public void otvorenie() {}
    @Override public boolean zavretie() { return true; }
        // Alternatíva: zatvorenie()
    // Ukončenie aplikácie
    @Override public void ukončenie() {}
    // Konfigurácia
    @Override public boolean konfiguráciaZmenená() { return false; }
    @Override public void čítajKonfiguráciu(Súbor súbor) {}
    @Override public void zapíšKonfiguráciu(Súbor súbor) {}
    // Konzola (vizuálna vlastnosť textu konzoly)
    // vyžaduje import java.awt.Color;
    @Override public Color farbaAktívnehoSlova(String slovo) { return null; }
    // Vstupný riadok
    @Override public void potvrdenieÚdajov() {}
        // Alternatíva: potvrdenieVstupu()
    @Override public void zrušenieÚdajov() {}
        // Alternatíva: zrušenieVstupu()
    // Štandardný vstup
    @Override public void spracujRiadokVstupu(String riadokVstupu) {}
    @Override public void koniecVstupu() {}
    // Príkazový riadok
    @Override public void ukončenieProcesu(
        Svet.PríkazovýRiadok príkazovýRiadok, int návratovýKód) {}
    // Ladenie a interaktívny režim
    @Override public void spracovaniePríkazu() {}
    @Override public boolean ladenie(int riadok, String príkaz, int správa)
    { return super.ladenie(riadok, príkaz, správa); }
    // (Prípadne iné.)
};
 
 Musí byť presne dodržaná syntax metód, to jest vo väčšine prípadov:
 @Override public void «názov reakcie»() { … }, kde
 «názov reakcie» je jeden z názvov vyššie uvedených reakcií.
 (Klauzula Override slúži na kontrolu. Keby sme ju
 neuviedli a omylom urobili v názve metódy (reakcie) hoci nepatrný
 preklep, obsluha určenej udalosti by nefungovala (aplikácia by
 nereagovala).) Medzi zložené zátvorky sa {},
 samozrejme, vpisuje kód, ktorý bude spustený v prípade, že nastane
 (vznikne) prislúchajúca udalosť (napríklad používateľ stlačí kláves,
 tlačidlo myši a podobne…).
 
 Vytváranie obsluhy udalostí sa dá obísť tak, že prekryjete
 prislúchajúce metódy ľubovoľného robota, ktoré sú na tento účel pripravené:
 GRobot.tik(),
 GRobot.klik()…
 Rozhranie robotov však nemusí poskytnúť úplný zoznam metód obsluhy
 udalostí. Napríklad neposkytuje metódu ladenie. Pri tých metódach, ktoré má k dispozícii platí, že metódy
 obsluhy udalostí majú prednosť. Z toho dôvodu je možné, že ak nastane
 počas spracovania metódy obsluhy udalostí výnimka, ktorá nebude v jej
 tele zachytená, tak spracovanie udalosti robotmi nemusí nastať.
 
 Pre jeden svet je možné spravidla definovať len
 jednu inštanciu obsluhy udalostí. (Výnimku z tohto
 pravidla spomenieme neskôr.) Pri pokuse o vytvorenie
 viacerých inštancií vznikne výnimka oznamujúca, že obsluha udalostí
 už bola definovaná.
 
 Nasledujúci príklad demonštruje vytvorenie obsluhy udalostí na
 klik myšou. Robotu najskôr nastavuje
 rýchlosť, inak by sa
 nehýbal, a vzápätí je v obsluhe udalostí definované, aby sa robot po
 kliknutí myšou na plátno rozbehol smerom
 na pozíciu, kam bolo kliknuté.
 
 
rýchlosť(10, false);
new ObsluhaUdalostí()
{
    @Override public void klik()
    {
        cieľNaMyš();
    }
};
 
  
 
 Ďalšie udalosti
 Rozšírená konfigurácia
 
 
 Výsledok príkladu použitia
 aktivácie odkazu.
 
 Poznámka: V príklade je použité prekrytie
 reakcie aktiváciaOdkazu v triede
 odvodenej od triedy GRobot. Princíp je však rovnaký
 aj pri použití reakcie z triedy ObsluhaUdalostí.
Pozri tiež:
GRobot.aktiváciaOdkazu()
aktivaciaOdkazu
public void aktivaciaOdkazu()
 Alias pre aktiváciaOdkazu.
konfiguráciaZmenená
public boolean konfiguráciaZmenená()
Výsledok (návratová hodnota) tejto reakcie môže byť overená pred
 zápisom automatickej
 konfigurácie. Ak iné súčasti programovacieho rámca oznámia, že
 konfiguráciu je potrebné uložiť, tak táto reakcia vôbec nemusí byť
 spustená. V prípade, že je spustená, tak ak je jej návratová hodnota
 rovná true, tak bude spustená reakcia
 zapíšKonfiguráciu.
 (V opačnom prípade by bola uvedená reakcia spustená len
 vtedy, ak by bola zmenená niektorá z predvolených položiek
 automatickej
 konfigurácie – t. j. napríklad používateľ by presunul hlavné okno
 aplikácie, zmenil jeho veľkosť alebo by bol registrovaný niektorý
 robot na uloženie konfigurácie.)
 Príklad použitia je uvedený v hlavnej sekcii opisu triedy ObsluhaUdalostí.
 
 Upozornenie: Pri prekrývaní tejto reakcie
 majte na pamäti, že nie je garantované jej automatické vykonanie pri
 ukončovaní aplikácie (ak vyššia vrstva zistí, že konfigurácia bola
 zmenená, tak ďalej nevyšetruje, či ju treba, alebo netreba ukladať
 a automaticky pristúpi k procesu uloženia konfigurácie). Vložte do
 tela tejto reakcie len taký kód, ktorý rýchlo overí, či nastali nejaké
 zmeny v konfigurácii, ktoré treba uložiť a vráti túto informáciu
 vyššej vrstve.
Návratová hodnota:
signál dovoľujúci programovaciemu rámcu overiť, či bola zmenená
     aspoň jedna položka voliteľnej konfigurácie a či je potrebné
     zapísať konfiguráciu na disk; ak majú byť zmenené prvky
     konfigurácie korektne zapísané na disk, tak je nevyhnutné zariadiť,
     aby návratová hodnota prekrývajúcej verzie tejto metódy bola
     rovná true
Pozri tiež:
čítajKonfiguráciu(Súbor), 
zapíšKonfiguráciu(Súbor), 
GRobot.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu()
konfiguraciaZmenena
public boolean konfiguraciaZmenena()
 Alias pre konfiguráciaZmenená.
čítajKonfiguráciu
public void čítajKonfiguráciu(Súbor súbor)
                       throws IOException
Reakcia je vykonaná počas čítania automatickej konfigurácie. Je určená na
 prečítanie hodnôt vlastnej konfigurácie. Príklad použitia je
 uvedený v hlavnej sekcii opisu triedy ObsluhaUdalostí.
Parametre:
súbor – inštancia triedy Súbor reprezentujúca
     otvorený konfiguračný súbor pripravený na čítanie údajov
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
konfiguráciaZmenená(), 
zapíšKonfiguráciu(Súbor), 
GRobot.čítajKonfiguráciu(Súbor), 
Svet.použiKonfiguráciu()
citajKonfiguraciu
public void citajKonfiguraciu(Súbor subor)
                       throws IOException
 Alias pre čítajKonfiguráciu.
Výnimky:
IOException
zapíšKonfiguráciu
public void zapíšKonfiguráciu(Súbor súbor)
                       throws IOException
Reakcia je vykonaná počas zápisu automatickej konfigurácie. Je určená na
 zápis hodnôt vlastnej konfigurácie. Príklad použitia je uvedený
 v hlavnej sekcii opisu triedy ObsluhaUdalostí.
Parametre:
súbor – inštancia triedy Súbor reprezentujúca
     otvorený konfiguračný súbor pripravený na zápis údajov
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
konfiguráciaZmenená(), 
čítajKonfiguráciu(Súbor), 
GRobot.zapíšKonfiguráciu(Súbor), 
Svet.použiKonfiguráciu()
zapisKonfiguraciu
public void zapisKonfiguraciu(Súbor subor)
                       throws IOException
 Alias pre zapíšKonfiguráciu.
Výnimky:
IOException
sekvencia
public void sekvencia(int kódSpracovania,
                      Object zdroj,
                      Object cieľ,
                      long stav,
                      long celkovo)
Táto reakcia súvisí s časovo náročným spracovaním údajov počas
 práce s pevným diskom. Napríklad s čítaním a zápisom sekvencie
 PNG súborov (pozri triedu Obrázok a jej metódy
 čítaj(súbor)
 a ulož(súbor, prepísať))
 alebo kopírovaním
 súborov a podobne. Typ udalosti, ktorá spôsobila spustenie tejto
 reakcie je určený prvým parametrom – kódSpracovania.
 Ostatné parametre sú naplnené podľa ich relevantnosti.
Parametre:
kódSpracovania – obsahuje kód činnosti, ktorá spôsobila
     vznik tejto udalosti; aktuálne platné kódy sú:
     ČÍTANIE_PNG_SEKVENCIE,
     CHYBA_ČÍTANIA_PNG_SEKVENCIE, ZÁPIS_PNG_SEKVENCIE, ČÍTANIE_GIF_ANIMÁCIE, ZÁPIS_GIF_ANIMÁCIE, KOPÍROVANIE_SÚBOROV, PRIPÁJANIE_SÚBOROV, POROVNANIE_SÚBOROV, ODOVZDANIE_ÚDAJOV a PREVZATIE_ÚDAJOV
zdroj – objekt súvisiaci so zdrojom alebo null;
     napríklad v prípade kopírovania súborov je to reťazec s názvom zdrojového súboru, v prípade zápisu
     PNG sekvencie je to obrázkový
     objekt so zdrojovou snímkou animácie a podobne
cieľ – objekt súvisiaci s cieľom alebo null;
     napríklad pri kopírovaní súborov je to reťazec s názvom cieľového súboru; v prípade čítania PNG
     sekvencie je to obrázkový objekt
     s cieľovou snímkou animácie (čiže tou, do ktorej sú ukladané
     prečítané údaje) a podobne
stav – hodnota vyjadrujúca aktuálne spracovaný objem údajov
     alebo -1, ak táto hodnota nie je známa alebo je
     irelevantná; môže to byť počet spracovaných bajtov, poradové
     číslo snímky a podobne
celkovo – hodnota vyjadrujúca celkový objem údajov, ktorý má byť
     spracovaný alebo -1, ak táto hodnota nie je známa
     alebo je irelevantná; môže to byť veľkosť súboru, celkový počet
     snímok a podobne
zastavenieAnimácie
public void zastavenieAnimácie(Obrázok obrázok)
Táto reakcia je spustená pri zastavení prehrávania animácie
 obrázka. Reakcia prijíma inštanciu obrázka, ktorého prehrávanie bolo
 zastavené, pričom zastavenie prehrávania môže byť iniciované
 automaticky (pozri aj metódu obrázka zastav)
 alebo na podnet používateľa (programátora).
Parametre:
obrázok – inštancia obrázka, ktorého prehrávanie bolo zastavené
zastavenieAnimacie
public void zastavenieAnimacie(Obrázok obrázok)
 Alias pre zastavenieAnimácie.
ukončenieProcesu
public void ukončenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                             int návratovýKód)
Táto reakcia je spustená po ukončení externého procesu, ktorý
 spustila zadaná inštancia triedy PríkazovýRiadok. Číselný kód, ktorý prijíma táto reakcia v druhom
 parametri je návratový kód, ktorý vrátil proces pri svojom
 ukončení.
Parametre:
príkazovýRiadok – inštancia príkazového riadka, ktorá proces
     spustila (jej zdedenými metódami
     ExecuteShellCommand.getRunCommand,
     ExecuteShellCommand.getRunArguments,
     ExecuteShellCommand.getCommandArray
     a ExecuteShellCommand.getRunEnvironmentsa dajú
     získať doplnkové informácie o procese v čase jeho spúšťania)
návratovýKód – kód, ktorý vrátil externý proces pri ukončení
ukoncenieProcesu
public void ukoncenieProcesu(Svet.PríkazovýRiadok príkazovýRiadok,
                             int návratovýKód)
 Alias pre ukončenieProcesu.
ladenie
public boolean ladenie(int riadok,
                       String príkaz,
                       int správa)
Táto reakcia je vykonávaná v režime ladenia. Návratová hodnota
 reakcie je odpoveďou na otázku položenú režimom ladenia nadradenému procesu
 prostredníctvom parametra správa. Hodnota parametra
 správa môže byť jedna z nasledujúcich:
 
  
 
 
 VYPÍSAŤ_PREMENNÉ
–Má režim ladenia vypísať obsah všetkých premenných
 (pred začatím vykonávania skriptu)?
 VYPÍSAŤ_MENOVKY
–Má režim ladenia vypísať (pred začatím vykonávania
 skriptu) definície všetkých menoviek, ktoré našiel počas analýzy
 skriptu?
 VYPÍSAŤ_RIADOK–Má
 režim ladenia vypísať aktuálny riadok skriptu?
 ČAKAŤ–Má režim ladenia
 čakať pred vykonaním riadka skriptu? Ak je odpoveď „áno,“
 tak je táto správa posielaná opakovane (každých 350 ms).
 PRERUŠIŤ–Má režim
 prerušiť vykonávanie skriptu?
 ZABRÁNIŤ_VYKONANIU
–Má režim v poslednej chvíli zabrániť vykonaniu
 príkazu s konkrétnymi hodnotami argumentov?
 VYPÍSAŤ_PRÍKAZ–Má
 režim vypísať ozvenu potvrdeného príkazu interaktívneho režimu?
 VYKONAŤ_PRÍKAZ–Má
 režim vykonať potvrdený príkaz interaktívneho režimu?
 UKONČENIE_SKRIPTU
–Vykonávanie
 skriptu v samostatnom vlákne oznamuje, že jeho činnosť bola
 ukončená (bez chyby).
 UKONČENIE_CHYBOU
–Vykonávanie
 skriptu v samostatnom vlákne oznamuje, že jeho činnosť bola
 ukončená chybou. V parametri riadok je číslo riadka, na
 ktorom vznikla chyba a reťazec parametra príkaz obsahuje
 v tomto prípade jednoduchý text chybového hlásenia.
 VYPÍSAŤ_SKRIPT–Má
 režim ladenia vypísať úplné znenie aktuálne vykonávaného
 skriptu?
 
 ČÍSELNÁ_PREMENNÁ
 FAREBNÁ_PREMENNÁ
 POLOHOVÁ_PREMENNÁ
 REŤAZCOVÁ_PREMENNÁ
–Má režim vypísať obsah premennej prislúchajúceho
 údajového typu? Táto otázka vznikne vždy, keď sa zmení hodnota
 premennej.
 
 
  
 
 Ak je režim ladenia
 zapnutý počas interaktívneho režimu, tak pred vykonaním každého potvrdeného
 riadka vznikne otázka typu VYKONAŤ_PRÍKAZ.
 
 Príklad:
 
 
import knižnica.*;
public class RežimLadeniaInteraktívne extends GRobot
{
    private RežimLadeniaInteraktívne()
    {
        interaktívnyRežim(true);
        Svet.režimLadenia(true);
        Svet.vypíš(this);
        new ObsluhaUdalostí()
        {
            @Override public void potvrdenieÚdajov()
            {
                Farba záloha = Svet.farbaTextu();
                Svet.farbaTextu(červená);
                Svet.vypíšRiadok("Chyba");
                Svet.farbaTextu(záloha);
            }
            @Override public boolean ladenie(
                int riadok, String príkaz, int správa)
            {
                switch (správa)
                {
                case VYPÍSAŤ_PRÍKAZ:
                case VYKONAŤ_PRÍKAZ:
                    return true;
                }
                if (správa &lt; 0) return true;
                Farba záloha = Svet.farbaTextu();
                Svet.farbaTextu(purpurová);
                Svet.vypíšRiadok(" × ", príkaz);
                Svet.farbaTextu(záloha);
                return false;
            }
        };
        Svet.registrujRobot();
        Svet.čítajKonfiguráciuSveta();
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu();
        Svet.nekresli();
        new RežimLadeniaInteraktívne();
        Svet.kresli();
        Svet.aktivujVstupnýRiadok();
    }
}
 
 Poznámka: Komplexnejší príklad ladenia je
 v opise triedy Skript v sekcii Príklad ladenia
 skriptov.
Parametre:
riadok – poradové číslo riadka skriptu alebo hodnota −1
     (ktorá signalizuje, že číslo riadka nie je známe)
príkaz – príkaz skriptu, prípadne názov premennej
správa – typ správy, na ktorú sa režim pokúša získať odpoveď
     od nadradeného procesu (pozri vyššie)
Návratová hodnota:
návratová hodnota je odpoveďou na správu poslanú parametrom
     správa; true – kladná odpoveď na
     niektorú z vyššie položených otázok; false – záporná
     odpoveď na niektorú z vyššie položených otázok
Pozri tiež:
Svet.interaktívnyRežim(boolean), 
Svet.interaktívnaInštancia(String), 
Svet.režimLadenia(boolean), 
Svet.vykonajPríkaz(String), 
Svet.vykonajSkript(String[])
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":9,"i2":10,"i3":9,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":9,"i14":10,"i15":9,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":9,"i24":10,"i25":9,"i26":10,"i27":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Písmo
java.lang.Object
java.awt.Font
Písmo
Všetky implementované rozhrania:
Serializable
Známe priame odvodené triedy:
Pismo
public class Písmo
extends Font
Trieda obaľuje triedu Javy Font. Táto trieda kopíruje
 najdôležitejšie vlastnosti pôvodnej triedy. Veľa užitočných informácií
 o písmach nájdete pri podrobnostiach konštruktora
 Písmo(názov, štýl, veľkosť).
 
 Príklad:
 
 Výsledkom kreslenia tohto príkladu sú nápisy napísané rôznymi
 veľkosťami a rezmi písma z rodiny písiem Arial (pozri zoznam
 zmien: poďakovanie uvedené pri
 verzii 1.35):
 
 
skočNa(0, &#45;200);
for (int i = 0; i &lt; 10; ++i)
{
    int a = (int)Svet.náhodnéCeléČíslo(10, 55);
    if (a &lt;= 25)
        písmo(new Písmo("Arial", Písmo.OBYČAJNÉ, a));
    else if (a &lt;= 40)
        písmo(new Písmo("Arial", Písmo.TUČNÉ, a));
    else
        písmo(new Písmo("Arial", Písmo.TUČNÉ | Písmo.KURZÍVA, a));
    text("Zmena písma");
    skoč(0, 40);
}
 
 Výsledok:
 
  Jeden
 z možných výsledkov vykonávania tohto príkladu.
Pozri tiež:
Font, 
Serializovateľnosť
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
KURZIVA
 Alias pre KURZÍVA.
static int
KURZÍVA
Konštanta označujúca písmo kurzívy.
static int
NORMALNE
 Alias pre OBYČAJNÉ.
static int
NORMÁLNE
 Alias pre OBYČAJNÉ.
static int
OBYCAJNE
 Alias pre OBYČAJNÉ.
static int
OBYČAJNÉ
Konštanta označujúca obyčajné písmo.
static int
SIKME
 Alias pre KURZÍVA.
static int
SILNE
 Alias pre TUČNÉ.
static int
SILNÉ
 Alias pre TUČNÉ.
static int
ŠIKMÉ
 Alias pre KURZÍVA.
static int
TUCNE
 Alias pre TUČNÉ.
static int
TUČNÉ
Konštanta označujúca tučné písmo.
Atribúty zdedené z triedy java.awt.Font
BOLD, CENTER_BASELINE, DIALOG, DIALOG_INPUT, HANGING_BASELINE, ITALIC, LAYOUT_LEFT_TO_RIGHT, LAYOUT_NO_LIMIT_CONTEXT, LAYOUT_NO_START_CONTEXT, LAYOUT_RIGHT_TO_LEFT, MONOSPACED, name, PLAIN, pointSize, ROMAN_BASELINE, SANS_SERIF, SERIF, size, style, TRUETYPE_FONT, TYPE1_FONT
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Písmo(Font font)
Vytvorí nové písmo z jestvujúceho objektu typu Font.
Písmo(Map&lt;? extends AttributedCharacterIterator.Attribute,?&gt; attributes)
Vytvorí nové písmo s atribútmi určenými v parametri attributes.
Písmo(Object... atribúty)
Vytvorí nové písmo podľa zadaných atribútov určujúcich názov, štýl,
 veľkosť písma, horný/dolný index, prečiarknutie alebo podčiarknutie.
Písmo(String názov,
     int štýl,
     double veľkosť)
Vytvorí nové písmo s určeným názvom, štýlom a veľkosťou.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Pismo
citajZoSuboru(Súbor súbor)
 Alias pre čítajZoSúboru.
static Pismo
citajZoSuboru(Súbor súbor,
             Písmo písmo)
 Alias pre čítajZoSúboru.
Písmo
čítajZoSúboru(Súbor súbor)
Prečíta záznam o tomto písme zo zadaného konfiguračného súboru
 a vráti inštanciu písma, ktorá sa zhoduje so
 záznamom v súbore.
static Písmo
čítajZoSúboru(Súbor súbor,
             Písmo písmo)
Prečíta záznam o písme zo zadaného konfiguračného súboru a vráti
 inštanciu písma vytvorenú podľa záznamu v súbore.
boolean
kurziva()
 Alias pre kurzíva.
boolean
kurzíva()
Overí, či bolo písmo vytvorené so štýlom KURZÍVA
 alebo ŠIKMÉ.
String
nazov()
 Alias pre názov.
String
názov()
Vráti názov tohto písma.
boolean
normalne()
 Alias pre obyčajné.
boolean
normálne()
 Alias pre obyčajné.
boolean
obycajne()
 Alias pre obyčajné.
boolean
obyčajné()
Overí, či bolo písmo vytvorené so štýlom OBYČAJNÉ
 alebo NORMÁLNE.
Pismo
precitajZoSuboru(Súbor súbor)
 Alias pre čítajZoSúboru.
static Pismo
precitajZoSuboru(Súbor súbor,
                Písmo písmo)
 Alias pre čítajZoSúboru.
Písmo
prečítajZoSúboru(Súbor súbor)
 Alias pre čítajZoSúboru.
static Písmo
prečítajZoSúboru(Súbor súbor,
                Písmo písmo)
 Alias pre čítajZoSúboru.
boolean
sikme()
 Alias pre kurzíva.
boolean
silne()
 Alias pre tučné.
boolean
silné()
 Alias pre tučné.
boolean
šikmé()
 Alias pre kurzíva.
boolean
tucne()
 Alias pre tučné.
boolean
tučné()
Overí, či bolo písmo vytvorené so štýlom TUČNÉ
 alebo SILNÉ.
void
ulozDoSuboru(Súbor súbor)
 Alias pre uložDoSúboru.
static void
ulozDoSuboru(Súbor súbor,
            Písmo písmo)
 Alias pre uložDoSúboru.
void
uložDoSúboru(Súbor súbor)
Uloží záznam o tomto písme do zadaného konfiguračného súboru.
static void
uložDoSúboru(Súbor súbor,
            Písmo písmo)
Uloží záznam o zadanom písme do zadaného konfiguračného súboru.
float
velkost()
 Alias pre veľkosť.
float
veľkosť()
Vráti veľkosť písma v bodoch.
Metódy zdedené z triedy java.awt.Font
canDisplay, canDisplay, canDisplayUpTo, canDisplayUpTo, canDisplayUpTo, createFont, createFont, createGlyphVector, createGlyphVector, createGlyphVector, createGlyphVector, decode, deriveFont, deriveFont, deriveFont, deriveFont, deriveFont, deriveFont, equals, getAttributes, getAvailableAttributes, getBaselineFor, getFamily, getFamily, getFont, getFont, getFont, getFontName, getFontName, getItalicAngle, getLineMetrics, getLineMetrics, getLineMetrics, getLineMetrics, getMaxCharBounds, getMissingGlyphCode, getName, getNumGlyphs, getPeer, getPSName, getSize, getSize2D, getStringBounds, getStringBounds, getStringBounds, getStringBounds, getStyle, getTransform, hashCode, hasLayoutAttributes, hasUniformLineMetrics, isBold, isItalic, isPlain, isTransformed, layoutGlyphVector, toString
Metódy zdedené z triedy java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
OBYČAJNÉ
public static final int OBYČAJNÉ
Konštanta označujúca obyčajné písmo. Nachádza využitie
 v konštruktore prijímajúcom štýl: Písmo(názov, štýl,
 veľkosť).
Pozri tiež:
Hodnoty konštánt
OBYCAJNE
public static final int OBYCAJNE
 Alias pre OBYČAJNÉ.
Pozri tiež:
Hodnoty konštánt
NORMÁLNE
public static final int NORMÁLNE
 Alias pre OBYČAJNÉ.
Pozri tiež:
Hodnoty konštánt
NORMALNE
public static final int NORMALNE
 Alias pre OBYČAJNÉ.
Pozri tiež:
Hodnoty konštánt
TUČNÉ
public static final int TUČNÉ
Konštanta označujúca tučné písmo. Môže byť skombinovaná
 s kuzívou. Konštanta nachádza využitie
 v konštruktore prijímajúcom štýl: Písmo(názov, štýl,
 veľkosť).
Pozri tiež:
Hodnoty konštánt
TUCNE
public static final int TUCNE
 Alias pre TUČNÉ.
Pozri tiež:
Hodnoty konštánt
SILNÉ
public static final int SILNÉ
 Alias pre TUČNÉ.
Pozri tiež:
Hodnoty konštánt
SILNE
public static final int SILNE
 Alias pre TUČNÉ.
Pozri tiež:
Hodnoty konštánt
KURZÍVA
public static final int KURZÍVA
Konštanta označujúca písmo kurzívy. Môže byť skombinovaná
 s tučným písmom. Konštanta nachádza využitie
 v konštruktore prijímajúcom štýl: Písmo(názov, štýl,
 veľkosť).
Pozri tiež:
Hodnoty konštánt
KURZIVA
public static final int KURZIVA
 Alias pre KURZÍVA.
Pozri tiež:
Hodnoty konštánt
ŠIKMÉ
public static final int ŠIKMÉ
 Alias pre KURZÍVA.
Pozri tiež:
Hodnoty konštánt
SIKME
public static final int SIKME
 Alias pre KURZÍVA.
Pozri tiež:
Hodnoty konštánt
Podrobnosti konštruktorov
Písmo
public Písmo(Font font)
Vytvorí nové písmo z jestvujúceho objektu typu Font.
Parametre:
font – objekt Font, z ktorého má byť vytvorené
     nové písmo
Písmo
public Písmo(Map&lt;? extends AttributedCharacterIterator.Attribute,?&gt; attributes)
Vytvorí nové písmo s atribútmi určenými v parametri attributes. Ak je tento parameter rovný null, písmo
 bude vytvorené s predvolenými hodnotami.
Parametre:
attributes – atribúty, ktoré majú byť priradené novému písmu,
     alebo null
Písmo
public Písmo(String názov,
             int štýl,
             double veľkosť)
Vytvorí nové písmo s určeným názvom, štýlom a veľkosťou.
 
 Názov písma môže byť (z technického pohľadu) buď názov rodiny
 písiem (anlg. font family name; ten je vo svete robota z dôvodu
 zjednodušenia považovaný za názov písma),
 alebo názov rezu písma (ang. font face name), čo je užšia
 špecifikácia (príklad: Helvetica Bold, Arial Italic). Pri
 vytváraní písma je názov kombinovaný so štýlom, aby bolo nájdené
 vyhovujúce písmo. Ak napríklad zadáme názov písma ako "Arial Bold" (čo znamená tučné písmo z rodiny písiem Arial)
 a za štýl dosadíme Písmo.KURZÍVA (anglicky
 „italic“), systém spravujúci písma vyhľadá písmo v rodine Arial,
 ktoré bude aj tučné aj šikmé – "Arial Bold Italic".
 Názov je so štýlom zlučovaný, nie sčítavnaný, ani odčítavaný. Ak
 určíme názov písma "Arial Bold" a štýl Písmo.TUČNÉ, nezískame dvojnásobne tučné písmo, ale iba
 TUČNÉ, rovnako písmo nebude stenčené ak
 určíme názov "Arial Bold" a štýl Písmo.OBYČAJNÉ. Názov môže byť aj názov logického písma
 v angličtine: Dialog, DialogInput, Monospaced, Serif alebo
 SansSerif. Logické názvy[1] určujú všeobecný typ písma –
 písmo pre dialógy, vstupné dialógy, s pevnou šírkou znakov,
 serifové (pätkové) alebo bezserifové (bezpätkové).
 
 Ak nie je možné nájsť konkrétny rez písma, systém na správu
 písiem môže algoritmicky písmo vyrobiť. Ak napríklad požadujeme
 šikmé písmo, ale v stanovenej rodine taký rez
 nejestvuje, systém môže jednotlivé znaky obyčajného písma
 zošikmiť. Ak systém písmo nedokáže nájsť vôbec, vytvorí písmo
 typu Dialog (čiže vytvorí logické písmo).
 
 [1] – termín „logický“ je v počítačovej terminológii
 často používaný ako opak „fyzického“; logický môže znamenať
 všeobecný, nekonkrétny, patriaci do určitej množiny, vytvorený na
 určitý účel… naopak fyzický znamená kokrétny, pevný,
 stanovený…
Parametre:
názov – názov písma (názov rezu alebo rodiny písiem) alebo
     logického písma; ak zadáme null systém vytvorí
     písmo, ktorému priradí logický názov "Default"
štýl – konštanta štýlu písma – Písmo.OBYČAJNÉ, Písmo.TUČNÉ, Písmo.KURZÍVA alebo kombinácia Písmo.TUČNÉ | Písmo.KURZÍVA;
     pri nesprávne zadanom štýle je vytvorené obyčajné písmo
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená na
     typ float)
Písmo
public Písmo(Object... atribúty)
Vytvorí nové písmo podľa zadaných atribútov určujúcich názov, štýl,
 veľkosť písma, horný/dolný index, prečiarknutie alebo podčiarknutie.
 
 Tento konštruktor prijíma variabilný počet parametrov rôznych
 údajových typov. Niektoré parametre figurujú samostatne, iné vo
 dvojiciach. Konštruktor ich spracúva postupne:
 
 
 Ak nájde reťazec, zistí jeho význam a podľa potreby spracuje
 ďalší parameter.
 Ak nájde údajový typ Javy TextAttribute,
 tak vždy prevezme ďalší parameter, ktorý použije ako hodnotu.
 
 
 V druhom prípade musí mať ďalší parameter aj správny údajový
 typ, pričom konštruktor dokáže zabezpečiť konverziu reťazcov na
 čísla alebo logické hodnoty pre zvolené atribúty
 (TextAttribute). Konkrétne:
 WEIGHT,
 WIDTH,
 POSTURE,
 SIZE,
 JUSTIFICATION,
 TRACKING,
 
 SUPERSCRIPT,
 UNDERLINE,
 BIDI_EMBEDDING,
 INPUT_METHOD_UNDERLINE,
 KERNING,
 LIGATURES,
 
 STRIKETHROUGH,
 RUN_DIRECTION
 a SWAP_COLORS.
 (Úplný zoznam atribútov nájdete v opise triedy
 TextAttribute.)
 
 Nasledujúca tabuľka zhŕňa povolené významy reťazcov pre prvý
 prípad a očakávané tvary ďalšieho parametra (pričom reťazce
 v druhej časti nespracúvajú žiadny ďalší parameter, takže ak
 nasledujúci parameter jestvuje, tak pôsobí opäť samostatne):
 
 
 
 
 Tvar atribútuVýznam atribútuOčakávané
 hodnoty
 
 "Názov", "Rodina", "Name",
 "FamilyName", "FaceName"…Názov rodiny
 písiem s prípadným určením konkrétneho rezu.
 Napríklad: "Default", "Arial Bold",
 "Courier New"…
 
 "Štýl", "Rez", "Style",
 "TypeFace"…Spresnenie rodiny písiem a určenie
 prípadných ďalších znakov.
 Môže byť kombinácia slov (v jednom reťazci):
 prečiarknutý/&#8203;prečiarknutá/&#8203;prečiarknuté,
 podčiarknutý/&#8203;podčiarknutá/&#8203;podčiarknuté,
 tučný/&#8203;tučná/&#8203;tučné,
 silný/&#8203;silná/&#8203;silné,
 šikmý/&#8203;šikmá/&#8203;šikmé/&#8203;kurzíva,
 horný/&#8203;dolný (index) alebo ich
 anglických alternatív, príklady: "Tučná kurzíva",
 "Šikmý horný index", "Prečiarknuté tučné"…
 
 "Veľkosť", "Size"Určenie
 veľkosti písma v bodoch.
 Veľkosť písma v bodoch, napríklad: "14", 24, 12.5…
 
 Tvar atribútuVýznam
 atribútu
 
 "Prečiarknuté", "Strikethrough", "Strike"…Nastaví príznak
 prečiarknutého písma.
 
 "Podčiarknuté", "Underline"Nastaví príznak podčiarknutého
 písma.
 
 "Tučné", "Silné", "Bold", "Strong"Nastaví príznak tučného
 rezu písma.
 
 "Kurzíva", "Šikmé",
 "Italic", "Oblique"Nastaví príznak
 rezu kurzívy písma.
 
 "Horný index", "Horné",
 "Superscript", "Super"…Nastaví
 príznak horného indexu písma.
 
 "Dolný index", "Dolné",
 "Subscript", "Sub"…Nastaví príznak
 dolného indexu písma.
 
 
 
 Príklady použitia:
 
 
Písmo písmo = new Písmo("Názov", "Cambria", "Veľkosť", 22);
písmo(písmo);
text("Text písmom Cambria veľkého 22 bodov.");
 
  Výsledok vyššieho
 príkladu použitia; veľkosť bola spracovaná vo forme celého čísla.
 
  
 
 
písmo(new Písmo("Názov", "Times New Roman", "Veľkosť", "12", "Dolný index"));
text("Dolný index „Times New Roman,“ 12 bodov.");
 
  Výsledok vyššieho
 príkladu použitia; Veľkosť bola spracovaná vo forme reťazca
 a dolný index je uvedený ako samostatný atribút.
 
  
 
 
Svet.písmo(new Písmo("Názov", "Arial", "Štýl", "Podčiarknutá kurzíva", "Veľkosť", 22.5));
Svet.vypíšRiadok("Konzola podčiarknutou kurzívou Arial 22.5 boda.");
 
  Výsledok vyššieho
 príkladu použitia; Veľkosť bola spracovaná vo forme reálneho
 čísla a štýl bol určený hodnotou atribútu, ktorá smie obsahovať
 viac príznakov naraz.
 
  
 
 Upozornenie: Tento konštruktor je
 najliberálnejší. Je schopný prijať a spracovať prakticky akékoľvek
 údaje rozdelené na dostatočne malé jednovýznamové celky. Cenou za
 to je mierne zvýšenie jeho výpočtovej náročnosti. Odporúčame ho
 používať buď na jednorazové vytvorenie písma, alebo napríklad na
 spracovanie „surových“ údajov prijatých z nejakého externého
 zdroja…
Parametre:
atribúty – séria atribútov podľa opisu
Podrobnosti metód
veľkosť
public float veľkosť()
Vráti veľkosť písma v bodoch. Táto veľkosť zodpovedá približne
 1/72 palca.
Návratová hodnota:
veľkosť písma v bodoch
velkost
public float velkost()
 Alias pre veľkosť.
obyčajné
public boolean obyčajné()
Overí, či bolo písmo vytvorené so štýlom OBYČAJNÉ
 alebo NORMÁLNE.
Návratová hodnota:
vráti true ak bolo písmo vytvorené so štýlom
     OBYČAJNÉ alebo NORMÁLNE,
     inak vráti false
obycajne
public boolean obycajne()
 Alias pre obyčajné.
normálne
public boolean normálne()
 Alias pre obyčajné.
normalne
public boolean normalne()
 Alias pre obyčajné.
tučné
public boolean tučné()
Overí, či bolo písmo vytvorené so štýlom TUČNÉ
 alebo SILNÉ.
Návratová hodnota:
vráti true ak bolo písmo vytvorené so štýlom
     TUČNÉ alebo SILNÉ,
     inak vráti false
tucne
public boolean tucne()
 Alias pre tučné.
silné
public boolean silné()
 Alias pre tučné.
silne
public boolean silne()
 Alias pre tučné.
kurzíva
public boolean kurzíva()
Overí, či bolo písmo vytvorené so štýlom KURZÍVA
 alebo ŠIKMÉ.
Návratová hodnota:
vráti true ak bolo písmo vytvorené so štýlom
     KURZÍVA alebo ŠIKMÉ,
     inak vráti false
kurziva
public boolean kurziva()
 Alias pre kurzíva.
šikmé
public boolean šikmé()
 Alias pre kurzíva.
sikme
public boolean sikme()
 Alias pre kurzíva.
názov
public String názov()
Vráti názov tohto písma. Konkrétne ide o názov rodiny písiem (angl.
 font family name), čo môže byť napríklad Helvetica, Arial, Verdana
 a podobne.
 
 Poznámka: Ešte rozlišujeme názov rezu písma
 (angl. font face name), čo môže byť napríklad Arial Bold, Verdana
 Italic a podobne.
Návratová hodnota:
reťazec reprezentujúci názov písma (konkrétne rodiny
     písiem)
nazov
public String nazov()
 Alias pre názov.
čítajZoSúboru
public Písmo čítajZoSúboru(Súbor súbor)
                    throws IOException
Prečíta záznam o tomto písme zo zadaného konfiguračného súboru
 a vráti inštanciu písma, ktorá sa zhoduje so
 záznamom v súbore. Táto metóda použije aktuálnu inštanciu ako
 predvolenú hodnotu a v prípade potreby vytvorí novú inštanciu
 písma. Ak je záznam písma v súbore zhodný s týmto písmom, tak
 metóda novú inštanciu nevytvára. Namiesto toho vráti hodnotu
 tejto (to jest aktuálnej) inštancie (čiže samú seba –
 this). Súbor musí byť otvorený na čítanie.
 
 Metóda je používaná automatickou konfiguráciou sveta.
Parametre:
súbor – inštancia triedy súbor
     otvorená na čítanie
Návratová hodnota:
inštancia, ktorá sa zhoduje so záznamom v súbore
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.čítajKonfiguráciuSveta(), 
uložDoSúboru(Súbor)
citajZoSuboru
public Pismo citajZoSuboru(Súbor súbor)
                    throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
prečítajZoSúboru
public Písmo prečítajZoSúboru(Súbor súbor)
                       throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
precitajZoSuboru
public Pismo precitajZoSuboru(Súbor súbor)
                       throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
uložDoSúboru
public void uložDoSúboru(Súbor súbor)
                  throws IOException
Uloží záznam o tomto písme do zadaného konfiguračného súboru.
 Súbor musí byť otvorený na zápis. Metóda je používaná
 automatickou
 konfiguráciou sveta.
Parametre:
súbor – inštancia triedy súbor
     otvorená na zápis
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.čítajKonfiguráciuSveta(), 
čítajZoSúboru(Súbor)
ulozDoSuboru
public void ulozDoSuboru(Súbor súbor)
                  throws IOException
 Alias pre uložDoSúboru.
Výnimky:
IOException
čítajZoSúboru
public static Písmo čítajZoSúboru(Súbor súbor,
                                  Písmo písmo)
                           throws IOException
Prečíta záznam o písme zo zadaného konfiguračného súboru a vráti
 inštanciu písma vytvorenú podľa záznamu v súbore.
 Druhý argument určuje predvolenú hodnotu. V prípade, že je záznam
 v súbore zhodný s predvolenou hodnotou, tak táto metóda nevytvorí
 novú inštanciu, ale vráti inštanciu predvolenej hodnoty.
 Súbor musí byť otvorený na čítanie.
 
 Metóda je používaná automatickou konfiguráciou sveta.
Parametre:
súbor – inštancia triedy súbor
     otvorená na čítanie
Návratová hodnota:
inštancia písma vytvorená podľa záznamu v súbore alebo
     predvolená hodnota
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.čítajKonfiguráciuSveta(), 
uložDoSúboru(Súbor)
citajZoSuboru
public static Pismo citajZoSuboru(Súbor súbor,
                                  Písmo písmo)
                           throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
prečítajZoSúboru
public static Písmo prečítajZoSúboru(Súbor súbor,
                                     Písmo písmo)
                              throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
precitajZoSuboru
public static Pismo precitajZoSuboru(Súbor súbor,
                                     Písmo písmo)
                              throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
uložDoSúboru
public static void uložDoSúboru(Súbor súbor,
                                Písmo písmo)
                         throws IOException
Uloží záznam o zadanom písme do zadaného konfiguračného súboru.
 Súbor musí byť otvorený na zápis. Metóda je používaná
 automatickou
 konfiguráciou sveta.
Parametre:
súbor – inštancia triedy súbor
     otvorená na zápis
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
Svet.použiKonfiguráciu(), 
Svet.čítajKonfiguráciuSveta(), 
čítajZoSúboru(Súbor)
ulozDoSuboru
public static void ulozDoSuboru(Súbor súbor,
                                Písmo písmo)
                         throws IOException
 Alias pre uložDoSúboru.
Výnimky:
IOException
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":9,"i15":9,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":9,"i56":9,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":9,"i69":9,"i70":10,"i71":10,"i72":9,"i73":9,"i74":9,"i75":9,"i76":9,"i77":9,"i78":9,"i79":9,"i80":10,"i81":10,"i82":9,"i83":9,"i84":9,"i85":9,"i86":10,"i87":9,"i88":9,"i89":10,"i90":9,"i91":9,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":9,"i158":9,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10,"i183":10,"i184":10,"i185":10,"i186":10,"i187":10,"i188":10,"i189":10,"i190":10,"i191":10,"i192":10,"i193":10,"i194":10,"i195":10,"i196":10,"i197":10,"i198":10,"i199":10,"i200":10,"i201":10,"i202":10,"i203":10,"i204":10,"i205":10,"i206":10,"i207":10,"i208":10,"i209":10,"i210":10,"i211":10,"i212":10,"i213":10,"i214":10,"i215":10,"i216":10,"i217":10,"i218":10,"i219":10,"i220":10,"i221":10,"i222":10,"i223":10,"i224":10,"i225":10,"i226":10,"i227":10,"i228":10,"i229":10,"i230":10,"i231":10,"i232":10,"i233":10,"i234":10,"i235":10,"i236":10,"i237":10,"i238":10,"i239":10,"i240":10,"i241":10,"i242":10,"i243":10,"i244":10,"i245":10,"i246":10,"i247":9,"i248":10,"i249":10,"i250":9,"i251":9,"i252":9,"i253":10,"i254":10,"i255":10,"i256":10,"i257":10,"i258":10,"i259":10,"i260":10,"i261":10,"i262":10,"i263":10,"i264":10,"i265":10,"i266":10,"i267":10,"i268":10,"i269":10,"i270":10,"i271":10,"i272":10,"i273":10,"i274":10,"i275":10,"i276":10,"i277":9,"i278":9,"i279":9,"i280":9,"i281":10,"i282":10,"i283":10,"i284":10,"i285":10,"i286":10,"i287":10,"i288":9,"i289":9,"i290":10,"i291":10,"i292":10,"i293":10,"i294":10,"i295":10,"i296":10,"i297":10,"i298":10,"i299":10,"i300":10,"i301":10,"i302":10,"i303":10,"i304":10,"i305":10,"i306":10,"i307":10,"i308":10,"i309":10,"i310":10,"i311":10,"i312":10,"i313":10,"i314":10,"i315":10,"i316":10,"i317":10,"i318":10,"i319":10,"i320":10,"i321":10,"i322":10,"i323":10,"i324":10,"i325":10,"i326":10,"i327":10,"i328":10,"i329":10,"i330":10,"i331":10,"i332":10,"i333":10,"i334":10,"i335":10,"i336":10,"i337":10,"i338":10,"i339":10,"i340":10,"i341":10,"i342":10,"i343":10,"i344":10,"i345":10,"i346":10,"i347":10,"i348":10,"i349":10,"i350":10,"i351":10,"i352":10,"i353":10,"i354":10,"i355":10,"i356":10,"i357":10,"i358":10,"i359":9,"i360":10,"i361":9,"i362":10,"i363":10,"i364":10,"i365":10,"i366":10,"i367":10,"i368":10,"i369":10,"i370":10,"i371":10,"i372":10,"i373":10,"i374":10,"i375":10,"i376":10,"i377":10,"i378":10,"i379":10,"i380":10,"i381":10,"i382":10,"i383":10,"i384":10,"i385":10,"i386":10,"i387":10,"i388":10,"i389":10,"i390":10,"i391":10,"i392":10,"i393":10,"i394":10,"i395":10,"i396":10,"i397":10,"i398":10,"i399":10,"i400":10,"i401":10,"i402":10,"i403":10,"i404":10,"i405":10,"i406":10,"i407":10,"i408":10,"i409":10,"i410":10,"i411":10,"i412":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Plátno
java.lang.Object
Plátno
Všetky implementované rozhrania:
Priehľadnosť
Známe priame odvodené triedy:
Platno
public class Plátno
extends Object
implements Priehľadnosť
Trieda implementujúca rôzne akcie s podlahou a stropom.
 
 Kresliace roboty fungujú vo svete s dvomi kresliacimi plátnami,
 ktoré sa podľa ich polohy voči robotom nazývajú podlaha a strop. Plátna sú priehľadné plochy
 umiestnené jedna pod a druhá nad úrovňou robotov. Majú svoj rozmer
 a dovoľujú vykonávanie aj takých úkonov, ktoré nesúvisia so žiadnym
 konkrétnym grafickým robotom (napríklad rozmazanie, výplň, ukladanie svojho obsahu do súboru a podobne).
 V prípade, že sú obe plátna prázdne, je plocha sveta vyplnená farbou
 pozadia. Každý robot smie kresliť na podlahu alebo strop
 podľa výberu. Kresby, ktoré vytvoria sú potom vidno nad podkladom,
 pričom kresba na podlahe je zobrazená pod robotmi a kresba na strope
 nad robotmi.
 
 Kresba každého plátna je uložená mimo zobrazovaný priestor
 sveta, preto všetko, čo sa nachádza na plátne
 nakreslené, nemusí byť automaticky viditeľné. Pri pohybe robota však
 dochádza k automatickému prekresľovaniu, ktoré je v prípade potreby
 možné vypnúť. Môžeme tým významne zvýšiť
 grafický výkon aplikácie, najmä ak manipulujeme viacerými robotmi
 naraz alebo vykonávame naraz viacero kresliacich operácií, z ktorých
 potrebujeme vidieť iba výsledok, nie jednotlivé čiastkové kroky.
 
 Nasledujúci príklad naprogramuje grafický robot tak, aby
 reagoval na kurzorové šípky pohybom a aby kláves medzerník prepínal
 medzi kreslením na strop tyrkysovou farbou a kreslením na podlahu
 hnedou farbou:
 
 
hrúbkaPera(5.5);
farba(hnedá);
new ObsluhaUdalostí()
{
    @Override public void stlačenieKlávesu()
    {
        switch (ÚdajeUdalostí.kláves())
        {
            case Kláves.MEDZERNÍK:
                if (kreslímNaPodlahu())
                {
                    kresliNaStrop();
                    farba(tyrkysová);
                }
                else
                {
                    kresliNaPodlahu();
                    farba(hnedá);
                }
                break;
            case Kláves.HORE:   dopredu(10); break;
            case Kláves.VPRAVO: vpravo(10); break;
            case Kláves.VĽAVO:  vľavo(10); break;
            case Kláves.DOLE:   dozadu(10); break;
        }
    }
};
 
 Výsledok:
 
 
 Čiary nakreslené kurzorovými šípkami počas
 činnostiprogramu tohto príkladu; všimnite si, že hnedá
 čiaranie je nikdy nakreslená nad tyrkysovou; je to preto,
 žeje kreslená na podlahu a tyrkysová je kreslená na
 strop(veľkosť plátna na obrázku je
 zmenšená).
 
 Okrem grafickej časti si každé plátno dokáže uchovávať informácie
 o textoch, ktoré na neho boli vypísané prostredníctvom metód, ktorých
 prvotným cieľom bolo nahradiť funkčnosť textového režimu známu aj pod
 termínom konzola. Preto vznikla v plátne relatívne rozsiahla definícia
 skrytých objektov, ktorú nazývame vnútorná konzola.
 
 Na prácu s jej obsahom slúži niekoľko skupín metód vymenovaných
 a utriedených v kategóriách
 metód plátna. Úplne najstaršími a základnými je dvojica metód
 vypíš a vypíšRiadok, ktoré zastupujú funkčnosť procedúr write
 a writeln z jazyka Pascal alebo metód print
 a println statického atribútu (objektu prúdu) out
 triedy System jazyka Java. Zdôrazňujeme, že v rámci tejto
 programovacieho rámca ide o simuláciu konzoly, ktorá má svoje obmedzenia,
 ale prináša aj určité rozšírenia, ktoré sa dajú výhodne využiť. Viaceré
 z metód, no zďaleka nie všetky sú premietnuté aj do triedy Svet, v rámci ktorej kopírujú správanie vnútornej konzoly
 „horného“ plátna – stropu.
 
 Aby sme boli úplní, treba dodať, že doplnkom simulácie výstupu
 sú metódy slúžiace na čítanie údajov od používateľa. Tie sú
 definované len v triede Svet. Majú niekoľko variant
 a sú vymenované v kategórii sveta 
Vstupné
 dialógy. (V podstate ide o simuláciu štandardného vstupu,
 ktorý je napríklad v jazyku Pascal reprezentovaný procedúrami
 read a readln.)
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
boolean
rolujTexty
Príznak automatického rolovania textov vnútornej konzoly s pomocou
 kolieska myši.
Atribúty zdedené z rozhrania Priehľadnosť
NEPRIEHLADNA, NEPRIEHĽADNÁ, NEPRIEHLADNE, NEPRIEHĽADNÉ, NEPRIEHLADNY, NEPRIEHĽADNÝ, NEVIDITELNA, NEVIDITEĽNÁ, NEVIDITELNE, NEVIDITEĽNÉ, NEVIDITELNY, NEVIDITEĽNÝ
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
automatickeZobrazovanieList()
 Alias pre automatickéZobrazovanieLíšt.
void
automatickeZobrazovanieList(boolean zapnúť)
 Alias pre automatickéZobrazovanieLíšt.
boolean
automatickéZobrazovanieLíšt()
Zistí, či je zapnuté automatické zobrazovanie líšt vnútornej konzoly.
void
automatickéZobrazovanieLíšt(boolean zapnúť)
Zapne alebo vypne automatické zobrazovanie líšt vzťahujúcich sa
 k rolovaniu textov vnútornej konzoly.
String
bodVAktivnomSlove(double x,
                 double y)
 Alias pre bodVAktívnomSlove.
String
bodVAktívnomSlove(double x,
                 double y)
Overí, či sa bod identifikovaný zadanými súradnicami nachádza
 v oblasti niektorého z aktívnych slov.
String
bodVAktivnomSlove(Poloha poloha)
 Alias pre bodVAktívnomSlove.
String
bodVAktívnomSlove(Poloha poloha)
Funguje rovnako ako metóda bodVAktívnomSlove, ale namiesto súradníc bodu je zadaný
 objekt, ktorý je implementáciou rozhrania Poloha.
RolovaciaLišta[]
dajListyKonzoly()
 Alias pre dajLištyKonzoly.
RolovaciaLišta[]
dajLištyKonzoly()
Vráti pole, ktoré obsahuje buď inštancie rolovacích líšt konzoly
 (ak boli použité), alebo hodnoty null (pre tú lištu,
 ktorá nebola nikdy zobrazená).
Tlačidlo
dajRohListKonzoly()
 Alias pre dajRohLíštKonzoly.
Tlačidlo
dajRohLíštKonzoly()
Ak nastala situácia, že boli zobrazené obe lišty konzoly, tak
 táto metóda vráti inštanciu tlačidla, ktoré je vizuálne upravené
 tak, aby reprezentovalo roh medzi lištami konzoly (v čase, keď
 boli alebo sú zobrazené obe naraz).
Vlnenie
definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
static double
dolnyOkraj()
 Alias pre dolnýOkraj.
static double
dolnýOkraj()
 Alias pre spodnýOkraj.
Vlnenie
existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
Farba
farbaBodu(double x,
         double y)
Zistí farbu bodu (jedného pixela) na zadaných súradniciach.
boolean
farbaBodu(double x,
         double y,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje so zadanou farbou.
boolean
farbaBodu(double x,
         double y,
         Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu.
boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek.
boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
Farba
farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) plátna na pozícii zadaného
 objektu.
boolean
farbaBodu(Poloha objekt,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje so zadanou farbou.
boolean
farbaBodu(Poloha objekt,
         Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadaného objektu.
boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek.
boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
Farba
farbaNaMysi()
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(int r,
           int g,
           int b)
 Alias pre farbaNaMyši.
boolean
farbaNaMysi(int r,
           int g,
           int b,
           int a)
 Alias pre farbaNaMyši.
Farba
farbaNaMyši()
Zistí farbu bodu (jedného pixela) na súradniciach myši.
boolean
farbaNaMyši(Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou.
boolean
farbaNaMyši(Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadaného objektu.
boolean
farbaNaMyši(int r,
           int g,
           int b)
Zistí, či je farba bodu (jedného pixela) na súradniciach myši
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
boolean
farbaNaMyši(int r,
           int g,
           int b,
           int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
Farba
farbaPozadiaOznaceniaVypisu(int riadok,
                           int index)
 Alias pre farbaPozadiaOznačeniaVýpisu.
Farba
farbaPozadiaOznačeniaVýpisu(int riadok,
                           int index)
Vráti farbu pozadia označenia špecifikovaného výpisu bloku textu,
 ak je označený.
Farba
farbaPozadiaTextu()
 Zistí aktuálnu farbu pozadia výpisu
 nových textov vnútornej konzoly plátna (podlahy alebo stropu).
void
farbaPozadiaTextu(Color nováFarba)
 Nastav farbu pozadia textov plátna
 (podlahy alebo stropu).
void
farbaPozadiaTextu(Farebnosť objekt)
Nastav farbu pozadia textov plátna (podlahy alebo stropu) podľa
 farby zadaného objektu.
Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b)
Nastav farbu pozadia textov plátna (podlahy alebo stropu).
Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b,
                 int a)
Nastav farbu pozadia textov plátna (podlahy alebo stropu).
Farba
farbaTextu()
 Zistí aktuálnu farbu výpisu nových textov
 vnútornej konzoly plátna (podlahy alebo stropu).
void
farbaTextu(Color nováFarba)
 Nastav farbu textov vnútornej konzoly
 plátna (podlahy alebo stropu).
void
farbaTextu(Farebnosť objekt)
Nastav farbu textov plátna (podlahy alebo stropu) podľa farby
 zadaného objektu.
Farba
farbaTextu(int r,
          int g,
          int b)
Nastav farbu textov plátna (podlahy alebo stropu).
Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastav farbu textov plátna (podlahy alebo stropu).
Farba
farbaTextuOznaceniaVypisu(int riadok,
                         int index)
 Alias pre farbaTextuOznačeniaVýpisu.
Farba
farbaTextuOznačeniaVýpisu(int riadok,
                         int index)
Vráti farbu textu označenia špecifikovaného výpisu bloku textu,
 ak je označený a ak jestvuje nastavenie farby označeného textu.
Graphics2D
grafika()
Vráti objekt typu Graphics2D použiteľný na
 rozmanité kreslenie na plátno (napríklad v reakciách vymazanie alebo prekreslenie).
boolean
grafikaDoSchranky()
 Alias pre obrázokDoSchránky.
boolean
grafikaDoSchránky()
 Alias pre obrázokDoSchránky.
static double
hornyOkraj()
 Alias pre hornýOkraj.
static double
hornýOkraj()
 Alias pre vrchnýOkraj.
boolean
interaktivnyRezim()
 Alias pre interaktívnyRežim.
void
interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
boolean
interaktívnyRežim()
Zistí stav interaktívneho režimu pre toto plátno.
void
interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre toto plátno.
Vlnenie
jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
Vlnenie
jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
void
kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na plátno.
void
kresli(Shape tvar,
      GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na
 plátno.
void
kresliDo(Shape tvar)
Obmedzí kreslenie na toto plátno na plochu zadaného útvaru
 (Shape).
void
kresliVsade()
 Alias pre kresliVšade.
void
kresliVšade()
Zruší oblasť na obmedzenie kreslenia na toto plátno.
static double
lavyOkraj()
 Alias pre ľavýOkraj.
static double
ľavýOkraj()
 Zistí najmenšiu aktuálne viditeľnú x-ovú
 súradnicu na plátne (podlahe alebo strope).
boolean
maVlnenie()
 Alias pre máVlnenie.
boolean
máVlnenie()
Overí, či je definovaná inštancia vlnenia pre toto plátno.
static double
maximalneX()
 Alias pre najväčšieX.
static double
maximálneX()
 Alias pre najväčšieX.
static double
maximalneY()
 Alias pre najväčšieY.
static double
maximálneY()
 Alias pre najväčšieY.
static double
minimalneX()
 Alias pre najmenšieX.
static double
minimálneX()
 Alias pre najmenšieX.
static double
minimalneY()
 Alias pre najmenšieY.
static double
minimálneY()
 Alias pre najmenšieY.
String
mysVAktivnomSlove()
 Alias pre myšVAktívnomSlove.
String
myšVAktívnomSlove()
Overí, či sa súradnice kurzora myši nachádzajú v oblasti niektorého
 z aktívnych slov.
static double
najmensieX()
 Alias pre najmenšieX.
static double
najmensieY()
 Alias pre najmenšieY.
static double
najmenšieX()
 Zistí najmenšiu x-ovú súradnicu plátna.
static double
najmenšieY()
 Zistí najmenšiu y-ovú súradnicu plátna.
int
najvacsiaSirkaZnaku()
 Alias pre najväčšiaŠírkaZnaku.
static double
najvacsieX()
 Alias pre najväčšieX.
static double
najvacsieY()
 Alias pre najväčšieY.
int
najväčšiaŠírkaZnaku()
Zistí najväčšiu šírku znaku vnútornej konzoly pri použití
 aktuálneho typu písma.
static double
najväčšieX()
 Zistí najväčšiu x-ovú súradnicu plátna.
static double
najväčšieY()
 Zistí najväčšiu y-ovú súradnicu plátna.
void
nastavOkrajeKonzoly(int ľavýOkraj,
                   int hornýOkraj,
                   int pravýOkraj,
                   int dolnýOkraj)
Nastaví okraje konzoly, ktoré obmedzia výpisy vnútornej konzoly na
 nimi vymedzenú oblasť.
void
nekresliDo(Shape tvar)
Vytvára obmedzenie kreslenia na toto plátno.
void
nezalamujTexty()
Vypne zalamovanie textov vnútornej konzoly tohto plátna.
void
obnovGrafiku()
Obnoví kresbu plátna (podlahy alebo stropu), ktorá bol zálohovaná
 metódou zálohujGrafiku.
void
obnovGrafiku(Object záloha)
Obnoví kresbu plátna (podlahy alebo stropu), ktorá bola
 zálohovaná buď metódou zálohujGrafiku(),
 alebo metódou zálohujGrafiku(GRobot).
void
obnovTexty()
Táto metóda obnoví stav textového obsahu vnútornej konzoly, ktorý
 bol uložený metódou zálohujTexty.
void
obnovTexty(Object záloha)
Táto metóda obnoví stav textového obsahu vnútornej konzoly
 tohto plátna podľa objektu, ktorý bol vytvorený niektorou
 z metód zálohujTexty(),
 zálohujTexty(GRobot),
 zálohujChvost(int) alebo
 zálohujChvost(int, GRobot)
 (prípadne inou metódou, ktorá mohla byť do programovacieho
 rámca pridaná neskôr).
BufferedImage
obrazok()
 Alias pre obrázok.
BufferedImage
obrázok()
Vráti objekt typu BufferedImage obsahujúci
 aktuálny obrázok tohto plátna.
void
obrazok(double x,
       double y,
       Image obrázok)
 Alias pre obrázok.
void
obrázok(double x,
       double y,
       Image obrázok)
Nakreslí na zadaných súradniciach na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka.
void
obrazok(double x,
       double y,
       String súbor)
 Alias pre obrázok.
void
obrázok(double x,
       double y,
       String súbor)
Nakreslí na zadaných súradniciach na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka.
void
obrazok(Image obrázok)
 Alias pre obrázok.
void
obrázok(Image obrázok)
Nakreslí v strede plátna (podlahy alebo stropu) zadaný obrázok.
void
obrazok(Poloha objekt,
       Image obrázok)
 Alias pre obrázok.
void
obrázok(Poloha objekt,
       Image obrázok)
Nakreslí na súradniciach zadaného objektu na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka.
void
obrazok(Poloha objekt,
       String súbor)
 Alias pre obrázok.
void
obrázok(Poloha objekt,
       String súbor)
Nakreslí na súradniciach zadaného objektu na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka.
void
obrazok(String súbor)
 Alias pre obrázok.
void
obrázok(String súbor)
Nakreslí v strede plátna (podlahy alebo stropu) zadaný obrázok.
boolean
obrazokDoSchranky()
 Alias pre obrázokDoSchránky.
boolean
obrázokDoSchránky()
Vloží obrázok (grafiku) plátna do schránky.
Integer
odsadeniePrvehoRiadka()
 Alias pre odsadeniePrvéhoRiadka.
Integer
odsadeniePrvéhoRiadka()
 Zistí (dočasnú) hodnotu požiadavky na
 nastavenie odsadenia prvého riadka najbližšie vypísaného odseku
 konzolového textu plátna (podlahy alebo stropu).
void
odsadeniePrvehoRiadka(Integer novéOdsadenie)
 Alias pre odsadeniePrvéhoRiadka.
void
odsadeniePrvéhoRiadka(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia prvého riadka (v zmysle riadka odseku)
 konzolových textov plátna (podlahy alebo stropu).
void
odstranVlnenie()
 Alias pre odstráňVlnenie.
void
odstráňVlnenie()
Ukončí vlnenie a úplne odstráni inštanciu vlnenia tohto plátna
 z prostredia programovacieho rámca GRobot.
int
oznacRiadky(int prvýRiadok,
           int poslednýRiadok,
           Color... farby)
 Alias pre označRiadky.
int
oznacRiadok(int index,
           Color... farby)
 Alias pre označRiadok.
int
oznacVsetkyTexty(Color... farby)
 Alias pre označVšetkyTexty.
int
oznacVypis(int riadok,
          int index,
          Color... farby)
 Alias pre označVýpis.
int
oznacVypisy(int prvýRiadok,
           int prvýVýpis,
           int poslednýRiadok,
           int poslednýVýpis,
           Color... farby)
 Alias pre označVýpisy.
int
označRiadky(int prvýRiadok,
           int poslednýRiadok,
           Color... farby)
Označí všetky riadky medzi hodnotami parametrov prvýRiadok
 a poslednýRiadok, vrátane nich.
int
označRiadok(int index,
           Color... farby)
Označí zadaný riadok vnútornej konzoly plátna.
int
označVšetkyTexty(Color... farby)
Označí všetky texty vnútornej konzoly.
int
označVýpis(int riadok,
          int index,
          Color... farby)
Označí konkrétny blok výpisu na konkrétnom riadku vnútornej
 konzoly tohto plátna.
int
označVýpisy(int prvýRiadok,
           int prvýVýpis,
           int poslednýRiadok,
           int poslednýVýpis,
           Color... farby)
Označí výpisy v rozmedzí stanovenom hodnotami štyroch číselných
 parametrov.
Pismo
pismo()
 Alias pre písmo.
Písmo
písmo()
 Čítaj aktuálny typ písma textov vnútornej
 konzoly plátna (podlahy alebo stropu).
void
pismo(Font novéPísmo)
 Alias pre písmo.
void
písmo(Font novéPísmo)
 Nastav nový typ písma textov vnútornej
 konzoly plátna (podlahy alebo stropu).
Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
Písmo
písmo(String názov,
     double veľkosť)
Nastav nový typ písma textov vnútornej konzoly plátna (podlahy
 alebo stropu).
void
pisNa(double x,
     double y,
     Object... argumenty)
 Alias pre píšNa.
void
pisRiadokNa(double x,
           double y,
           Object... argumenty)
 Alias pre píšRiadokNa.
void
píšNa(double x,
     double y,
     Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu.
void
píšRiadokNa(double x,
           double y,
           Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu a presunie sa na ďalší riadok.
int
pocetRiadkov()
 Alias pre početRiadkov.
int
pocetVypisov(int riadok)
 Alias pre početVýpisov.
int
početRiadkov()
Zistí aktuálny počet riadkov vypísaných vo vnútornej konzole
 tohto plátna.
int
početVýpisov(int riadok)
Vráti počet výpisov (blokov, ktoré boli vypísané v rámci jedného
 volania metód vypíš/vypíšRiadok) na určenom riadku.
int
poslednaSirkaTextu()
 Alias pre poslednáŠírkaTextu.
int
poslednáŠírkaTextu()
Táto metóda zistí poslednú hodnotu maximálnej šírky textu
 (v bodoch) uloženého vo vnútornej konzole.
int
poslednaVyskaTextu()
 Alias pre poslednáVýškaTextu.
int
poslednáVýškaTextu()
Táto metóda zistí poslednú hodnotu celkovej výšky textu
 (v bodoch) uloženého vo vnútornej konzole.
Bod
posunutieTextov()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osí x a y.
void
posunutieTextov(int x,
               int y)
Nastaví posunutie textov vnútornej konzoly v smere osí x a y.
int
posunutieTextovX()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osi x.
void
posunutieTextovX(int nováHodnota)
Nastaví posunutie textov vnútornej konzoly v smere osi x.
int
posunutieTextovY()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osi y.
void
posunutieTextovY(int nováHodnota)
Nastaví posunutie textov vnútornej konzoly v smere osi y.
boolean
pouziMasku(BufferedImage maska)
 Alias pre použiMasku.
boolean
použiMasku(BufferedImage maska)
Použije na toto plátno masku vyrobenú zo zadaného obrázka.
static double
pravyOkraj()
 Alias pre pravýOkraj.
static double
pravýOkraj()
 Zistí najväčšiu aktuálne viditeľnú x-ovú súradnicu na
 plátne (podlahe alebo strope).
Farba
predvolenaFarbaPozadiaOznacenia()
 Alias pre predvolenáFarbaPozadiaOznačenia.
void
predvolenaFarbaPozadiaOznacenia(Color nováFarba)
 Alias pre predvolenáFarbaPozadiaOznačenia.
void
predvolenaFarbaPozadiaOznacenia(Farebnosť objekt)
 Alias pre predvolenáFarbaPozadiaOznačenia.
Farba
predvolenaFarbaPozadiaOznacenia(int r,
                               int g,
                               int b)
 Alias pre predvolenáFarbaPozadiaOznačenia.
Farba
predvolenaFarbaPozadiaOznacenia(int r,
                               int g,
                               int b,
                               int a)
 Alias pre predvolenáFarbaPozadiaOznačenia.
Farba
predvolenáFarbaPozadiaOznačenia()
 Zistí aktuálne predvolenú farbu pozadia
 označených textov vnútornej konzoly plátna (podlahy alebo stropu).
void
predvolenáFarbaPozadiaOznačenia(Color nováFarba)
 Nastav predvolenú farbu pozadia označenia
 textov vnútornej konzoly plátna (podlahy alebo stropu).
void
predvolenáFarbaPozadiaOznačenia(Farebnosť objekt)
Nastav predvolenú farbu pozadia označenia textov plátna (podlahy
 alebo stropu) podľa farby zadaného objektu.
Farba
predvolenáFarbaPozadiaOznačenia(int r,
                               int g,
                               int b)
Nastav predvolenú farbu pozadia označenia textov konzoly plátna
 (podlahy alebo stropu).
Farba
predvolenáFarbaPozadiaOznačenia(int r,
                               int g,
                               int b,
                               int a)
Nastav predvolenú farbu pozadia označenia textov konzoly plátna
 (podlahy alebo stropu).
void
predvolenaFarbaPozadiaTextu()
 Alias pre predvolenáFarbaPozadiaTextu.
void
predvolenáFarbaPozadiaTextu()
Zmení farbu pozadia textov vnútornej konzoly plátna (podlahy
 alebo stropu) na predvolenú.
void
predvolenaFarbaTextu()
 Alias pre predvolenáFarbaTextu.
void
predvolenáFarbaTextu()
Zmení farbu textov vnútornej konzoly plátna (podlahy alebo stropu)
 na predvolenú.
Farba
predvolenaFarbaTextuOznacenia()
 Alias pre predvolenáFarbaTextuOznačenia.
void
predvolenaFarbaTextuOznacenia(Color nováFarba)
 Alias pre predvolenáFarbaTextuOznačenia.
void
predvolenaFarbaTextuOznacenia(Farebnosť objekt)
 Alias pre predvolenáFarbaTextuOznačenia.
Farba
predvolenaFarbaTextuOznacenia(int r,
                             int g,
                             int b)
 Alias pre predvolenáFarbaTextuOznačenia.
Farba
predvolenaFarbaTextuOznacenia(int r,
                             int g,
                             int b,
                             int a)
 Alias pre predvolenáFarbaTextuOznačenia.
Farba
predvolenáFarbaTextuOznačenia()
 Zistí aktuálne predvolenú farbu písma
 označených textov konzoly plátna (podlahy alebo stropu).
void
predvolenáFarbaTextuOznačenia(Color nováFarba)
 Nastav predvolenú farbu písma označených
 textov konzoly plátna (podlahy alebo stropu).
void
predvolenáFarbaTextuOznačenia(Farebnosť objekt)
Nastav predvolenú farbu označenia textov plátna (podlahy alebo
 stropu) podľa farby zadaného objektu.
Farba
predvolenáFarbaTextuOznačenia(int r,
                             int g,
                             int b)
Nastav predvolenú farbu písma označených textov konzoly plátna
 (podlahy alebo stropu).
Farba
predvolenáFarbaTextuOznačenia(int r,
                             int g,
                             int b,
                             int a)
Nastav predvolenú farbu písma označených textov konzoly plátna
 (podlahy alebo stropu).
void
predvolenePismo()
 Alias pre predvolenéPísmo.
void
predvolenéPísmo()
Nastaví predvolený typ písma textov plátna (podlahy alebo stropu).
void
prepisBod(double x,
         double y,
         Color farba)
 Alias pre prepíšBod.
void
prepisBod(double x,
         double y,
         Farebnosť objekt)
 Alias pre prepíšBod.
void
prepisBod(double x,
         double y,
         int farba)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         Color farba)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         Farebnosť objekt)
 Alias pre prepíšBod.
void
prepisBod(Poloha bod,
         int farba)
 Alias pre prepíšBod.
void
prepisBodNaMysi(Color farba)
 Alias pre prepíšBodNaMyši.
void
prepisBodNaMysi(Farebnosť objekt)
 Alias pre prepíšBodNaMyši.
void
prepisBodNaMysi(int farba)
 Alias pre prepíšBodNaMyši.
void
prepíšBod(double x,
         double y,
         Color farba)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii zadanou farbou.
void
prepíšBod(double x,
         double y,
         Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii farbou zadaného objektu.
void
prepíšBod(double x,
         double y,
         int farba)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii zadanou kombináciou zložiek ARGB zakódovaných
 v celočíselnej hodnote.
void
prepíšBod(Poloha bod,
         Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou farbou.
void
prepíšBod(Poloha bod,
         Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu farbou zadaného objektu.
void
prepíšBod(Poloha bod,
         int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou kombináciou zložiek ARGB
 zakódovaných v celočíselnej hodnote.
void
prepíšBodNaMyši(Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou farbou.
void
prepíšBodNaMyši(Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu farbou zadaného objektu.
void
prepíšBodNaMyši(int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou kombináciou zložiek ARGB
 zakódovaných v celočíselnej hodnote.
void
pretoc(double Δx,
      double Δy)
 Alias pre pretoč.
void
pretoč(double Δx,
      double Δy)
Pretočí obsah plátna o zadaný počet bodov v horizontálnom a/alebo
 vertikálnom smere.
void
pridajGrafiku(GRobot ktorý)
Nakreslí obsah zadanej zálohy plátna vytvorenej metódou
 zálohujGrafiku(GRobot)) cez
 jestvujúcu kresbu na plátne (podlahe alebo strope).
void
pridajTexty(Object záloha)
Táto metóda pridá k aktuálnemu obsahu vnútornej konzoly
 tohto plátna obsah zo zadanej zálohy konzoly, ktorá bola
 vytvorená niektorou z metód zálohujTexty(), zálohujTexty(GRobot), zálohujChvost(int) alebo zálohujChvost(int, GRobot) (prípadne inou metódou,
 ktorá mohla byť do programovacieho rámca pridaná neskôr).
void
pridajVlnenie()
Pridá alebo zresetuje vlnenie tohto plátna.
void
pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto plátna.
void
pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie tohto plátna.
void
pridajVlnenie(int útlm,
             boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto plátna.
double
priehladnost()
 Alias pre priehľadnosť.
double
priehľadnosť()
 Zistí aktuálnu úroveň (ne)priehľadnosti
 tohto plátna.
void
priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
void
priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň (ne)priehľadnosti
 tohto plátna, pričom jednotlivé body plátna môžu mať svoju vlastnú
 úroveň priehľadnosti.
void
priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
void
priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
void
roluj(double Δx,
     double Δy)
Posunie obsah plátna o zadaný počet bodov v horizontálnom a/alebo
 vertikálnom smere.
void
rolujGrafiku(double Δx,
            double Δy)
 Alias pre roluj.
void
rolujTexty()
Posunie texty vnútornej konzoly podľa poslednej udalosti
 kolieska myši.
void
rolujTexty(int Δx,
          int Δy)
Posunie texty vnútornej konzoly o zadaný počet bodov v smere
 osí x a y.
void
rozmaz()
 Alias pre rozmaž.
void
rozmaz(Color pozadie)
 Alias pre rozmaž.
void
rozmaz(Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      Color pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      Color pozadie)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      Farebnosť pozadie)
 Alias pre rozmaž.
void
rozmaz(int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaz(int opakovanie,
      int rozsah,
      int bgr,
      int bgg,
      int bgb)
 Alias pre rozmaž.
void
rozmaž()
Rozmaže grafiku tohto plátna.
void
rozmaž(Color pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(Farebnosť pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      Color pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      Farebnosť pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      int rozsah)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      int rozsah,
      Color pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      int rozsah,
      Farebnosť pozadie)
Rozmaže grafiku tohto plátna.
void
rozmaž(int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku tohto plátna.
void
rozmaž(int opakovanie,
      int rozsah,
      int bgr,
      int bgg,
      int bgb)
Rozmaže grafiku tohto plátna.
int[]
rozsahOblastiOznacenia(int riadok,
                      int index)
 Alias pre rozsahOblastiOznačenia.
int[]
rozsahOblastiOznačenia(int riadok,
                      int index)
Zistí a vráti rozsah oblasti označenia, ktorá obsahuje zadaný
 výpis na zadanom riadku.
static int
sirka()
 Alias pre šírka.
int
sirkaMedzery()
 Alias pre šírkaMedzery.
int
sirkaRetazca(String reťazec)
 Alias pre šírkaReťazca.
static double
spodnyOkraj()
 Alias pre spodnýOkraj.
static double
spodnýOkraj()
 Zistí najmenšiu aktuálne viditeľnú y-ovú
 súradnicu na plátne (podlahe alebo strope).
static int
šírka()
Zistí šírku plátna (podlahy alebo stropu).
int
šírkaMedzery()
Zistí šírku medzery vnútornej konzoly pri použití aktuálneho typu
 písma.
int
šírkaReťazca(String reťazec)
Zistí šírku zadaného reťazca v bodoch pri použití aktuálneho
 typu písma vnútornej konzoly.
boolean
textDoSchranky()
 Alias pre textyDoSchránky.
boolean
textDoSchránky()
 Alias pre textyDoSchránky.
boolean
textDoSchranky(boolean lenOznačený)
 Alias pre textyDoSchránky.
boolean
textDoSchránky(boolean lenOznačený)
 Alias pre textyDoSchránky.
String
textKonzoly()
Vráti v reťazci všetky texty, ktoré sa nachádzajú aktuálne
 vypísané na vnútornej konzole tohto plátna.
String
textKonzoly(boolean lenOznačený)
Vráti v reťazci všetky texty alebo všetky označené texty,
 ktoré sa nachádzajú aktuálne vypísané na vnútornej konzole
 tohto plátna v závislosti od hodnoty parametra
 lenOznačený.
String
textRiadka(int index)
Vráti textový obsah určeného riadka vypísaného v textovej
 konzole tohto plátna.
String
textRiadka(int index,
          boolean lenOznačený)
Vráti textový obsah určeného riadka vnútornej konzoly tohto plátna
 alebo len jeho označených častí – podľa hodnoty parametra
 lenOznačený.
String
textVypisu(int riadok,
          int index)
 Alias pre textVýpisu.
String
textVýpisu(int riadok,
          int index)
Vráti text určeného výpisu (bloku, ktorý bol vypísaný v rámci jedného
 volania metód vypíš/vypíšRiadok) z určeného riadka.
String
textVypisu(int riadok,
          int index,
          boolean lenOznačený)
 Alias pre textVýpisu.
String
textVýpisu(int riadok,
          int index,
          boolean lenOznačený)
Vráti text určeného výpisu (bloku, ktorý bol vypísaný v rámci
 jedného volania metód vypíš/vypíšRiadok) z určeného
 riadka.
boolean
textyDoSchranky()
 Alias pre textyDoSchránky.
boolean
textyDoSchránky()
Vloží do schránky všetky texty vypísané do vnútornej konzoly
 tohto plátna.
boolean
textyDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
boolean
textyDoSchránky(boolean lenOznačené)
Vloží do schránky buď všetky texty vypísané do vnútornej konzoly
 tohto plátna, alebo len označené časti – v závislosti od hodnoty
 parametra lenOznačené.
void
ulozObrazok(String súbor)
 Alias pre uložObrázok.
void
ulozObrazok(String súbor,
           boolean prepísať)
 Alias pre uložObrázok.
void
uložObrázok(String súbor)
Uloží aktuálnu kresbu na plátne (podlahe alebo strope) do súboru
 s obrázkom.
void
uložObrázok(String súbor,
           boolean prepísať)
Uloží aktuálnu kresbu na plátne (podlahe alebo strope) do súboru
 s obrázkom.
void
upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
void
upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti plátna.
static int
viditelnaSirka()
 Alias pre viditeľnáŠírka.
static int
viditeľnáŠírka()
Zistí aktuálnu šírku tzv. klientskej oblasti okna.
static int
viditelnaVyska()
 Alias pre viditeľnáVýška.
static int
viditeľnáVýška()
Zistí viditeľnú výšku tzv. klientskej oblasti okna.
Integer
virtualnyTabulator()
 Alias pre virtuálnyTabulátor.
Integer
virtuálnyTabulátor()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) s pomocou virtuálneho tabulátora.
void
virtualnyTabulator(Integer odsadenie)
 Alias pre virtuálnyTabulátor.
void
virtuálnyTabulátor(Integer odsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 s pomocou virtuálneho tabulátora.
Vlnenie
vlnenie()
Vráti inštanciu vlnenia pre toto plátno,
 aby bolo možné s vlnením ďalej pracovať.
void
vlozRiadok(int index,
          Object... argumenty)
 Alias pre vložRiadok.
void
vložRiadok(int index,
          Object... argumenty)
Vloží riadok určený zoznamom argumenty na pozíciu
 špecifikovanú číselným indexom – hodnota 0 vloží riadok
 na prvú pozíciu.
static double
vrchnyOkraj()
 Alias pre vrchnýOkraj.
static double
vrchnýOkraj()
 Zistí najväčšiu aktuálne viditeľnú y-ovú súradnicu na
 plátne (podlahe alebo strope).
boolean
vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
boolean
vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
void
vylejFarbu(double x,
          double y,
          Color farba)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
void
vylejFarbu(double x,
          double y,
          Farebnosť objekt)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
Farba
vylejFarbu(double x,
          double y,
          int r,
          int g,
          int b)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby.
Farba
vylejFarbu(double x,
          double y,
          int r,
          int g,
          int b,
          int a)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 zo stanoveného bodu rozšíri k okrajom okolitej kresby.
void
vylejFarbu(GRobot ktorý)
Zadaný robot vyleje na svojej pozícii na plátno svoju aktuálnu
 farbu, ktorá sa odtiaľ rozšíri po
 okraje okolitej kresby.
void
vylejFarbu(Poloha bod,
          Color farba)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
void
vylejFarbu(Poloha bod,
          Farebnosť objekt)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
Farba
vylejFarbu(Poloha bod,
          int r,
          int g,
          int b)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby.
Farba
vylejFarbu(Poloha bod,
          int r,
          int g,
          int b,
          int a)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 zo stanoveného bodu rozšíri k okrajom okolitej kresby.
void
vymaz()
 Alias pre vymaž.
void
vymazGrafiku()
 Alias pre vymažGrafiku.
void
vymazChvost(int index)
 Alias pre vymažChvost.
boolean
vymazKresbu(Image kresba)
 Alias pre vymažKresbu.
int
vymazOznaceneTexty()
 Alias pre vymažOznačenéTexty.
void
vymazRiadok(int index)
 Alias pre vymažRiadok.
void
vymazTexty()
 Alias pre vymažTexty.
void
vymaž()
Vymaže obsah plátna (podlahy alebo stropu), aby bola viditeľná
 len farba pozadia sveta.
void
vymažGrafiku()
Vymaže grafický obsah plátna (podlahy alebo stropu).
void
vymažChvost(int index)
Vymaže obsah vnútornej konzoly tohto plátna od určeného indexu
 nižšie.
boolean
vymažKresbu(Image kresba)
Použije na plátno filter vyrobený zo zložky jasu kresby
 zadaného/predloženého obrázka.
int
vymažOznačenéTexty()
Vymaže všetky označené texty vnútornej konzoly.
void
vymažRiadok(int index)
Vymaže určený riadok z vnútornej konzoly tohto plátna.
void
vymažTexty()
Metóda vymaže všetky texty vnútornej konzoly podlahy alebo
 stropu.
void
vypis(Object... argumenty)
 Alias pre vypíš.
void
vypisAktivneSlova(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
void
vypisAktivneSlovo(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
boolean
vypisJeOznaceny(int riadok,
               int index)
 Alias pre výpisJeOznačený.
boolean
výpisJeOznačený(int riadok,
               int index)
Zistí, či je učený blok výpisu vnútornej konzoly plátna označený.
void
vypisNa(double x,
       double y,
       Object... argumenty)
 Alias pre vypíšNa.
int[]
vypisNaBode(double x,
           double y)
 Alias pre výpisNaBode.
int[]
výpisNaBode(double x,
           double y)
Zistí, či sa súradnice zadaného bodu nachádzajú v niektorom
 z blokov výpisov vnútornej konzoly tohto plátna.
int[]
vypisNaBode(Poloha bod)
 Alias pre výpisNaBode.
int[]
výpisNaBode(Poloha bod)
Zistí, či sa súradnice zadaného bodu nachádzajú v niektorom
 z blokov výpisov vnútornej konzoly tohto plátna.
int[]
vypisNaMysi()
 Alias pre výpisNaMyši.
int[]
výpisNaMyši()
Zistí, či sa súradnice myši nachádzajú v niektorom z blokov
 výpisov vnútornej konzoly tohto plátna.
int[]
vypisPriBode(double x,
            double y)
 Alias pre výpisPriBode.
int[]
výpisPriBode(double x,
            double y)
Nájde indexy najbližšieho bloku konzoly k zadaným súradniciam
 bodu.
int[]
vypisPriBode(Poloha bod)
 Alias pre výpisPriBode.
int[]
výpisPriBode(Poloha bod)
Nájde indexy najbližšieho bloku konzoly k súradniciam zadaného
 bodu.
int[]
vypisPriMysi()
 Alias pre výpisPriMyši.
int[]
výpisPriMyši()
Nájde indexy najbližšieho bloku konzoly k aktuálnym súradniciam
 myši.
void
vypisRiadok(Object... argumenty)
 Alias pre vypíšRiadok.
void
vypisRiadokNa(double x,
             double y,
             Object... argumenty)
 Alias pre vypíšRiadokNa.
void
vypíš(Object... argumenty)
Vypíše sériu argumentov v tvare textu na plátne (podlahe alebo
 strope).
void
vypíšAktívneSlová(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
void
vypíšAktívneSlovo(String identifikátor,
                 Object... argumenty)
Vypíše sériu argumentov v tvare textu na plátne (podlahe alebo
 strope) ako aktívne slová identifikované zadaným identifikátorom.
void
vypíšNa(double x,
       double y,
       Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu.
void
vypíšRiadok(Object... argumenty)
Vypíše sériu argumentov v tvare textu na podlahe alebo strope
 a presunie sa na ďalší riadok.
void
vypíšRiadokNa(double x,
             double y,
             Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu a presunie sa na ďalší riadok.
void
vypln(Color farba)
 Alias pre vyplň.
void
vyplň(Color farba)
Vyplní podlahu alebo strop zadanou farbou, ktorá prekryje aj
 farbu pozadia
 sveta.
void
vypln(Farebnosť objekt)
 Alias pre vyplň.
void
vyplň(Farebnosť objekt)
Vyplní podlahu alebo strop farbou zadaného objektu, ktorá
 prekryje aj farbu
 pozadia sveta.
void
vypln(Image výplň)
 Alias pre vyplň.
void
vyplň(Image výplň)
Vyplní podlahu alebo strop zadanou textúrou.
Farba
vypln(int r,
     int g,
     int b)
 Alias pre vyplň.
Farba
vyplň(int r,
     int g,
     int b)
Vyplní podlahu alebo strop farbou zadanou prostredníctvom
 farebných zložiek.
Farba
vypln(int r,
     int g,
     int b,
     int a)
 Alias pre vyplň.
Farba
vyplň(int r,
     int g,
     int b,
     int a)
Vyplní podlahu alebo strop farbou zadanou prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti.
void
vypln(Shape tvar)
 Alias pre vyplň.
void
vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov na plátno.
void
vypln(Shape tvar,
     GRobot kreslič)
 Alias pre vyplň.
void
vyplň(Shape tvar,
     GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov na plátno.
void
vypln(String súbor)
 Alias pre vyplň.
void
vyplň(String súbor)
Vyplní podlahu alebo strop zadanou textúrou.
BufferedImage
vyrobMasku()
Vyrobí z obsahu tohto plátna masku priehľadnosti.
boolean
vyrobMasku(BufferedImage nováMaska)
Vyrobí z obsahu tohto plátna do zadaného obrázka masku
 priehľadnosti.
static int
vyska()
 Alias pre šírka.
int
vyskaRiadka()
 Alias pre výškaRiadka.
static int
výška()
Zistí výšku plátna (podlahy alebo stropu).
int
výškaRiadka()
Zistí výšku riadka vnútornej konzoly pri použití aktuálneho
 typu písma.
boolean
zalamujeTexty()
 Zistí stav/hodnotu vlastnosti zalamovania
 textov vnútornej konzoly tohto plátna.
void
zalamujTexty()
Zapne zalamovanie textov vnútornej konzoly tohto plátna.
void
zalamujTexty(boolean zalamuj)
 Nastaví vlastnosť zalamovania textov
 vnútornej konzoly tohto plátna podľa zadanej hodnoty parametra.
Object
zalohujGrafiku()
 Alias pre zálohujGrafiku.
Object
zálohujGrafiku()
Zálohuje kresbu na plátne (podlahe alebo strope), aby mohla byť
 v prípade potreby obnovená metódou obnovGrafiku.
void
zalohujGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
void
zálohujGrafiku(GRobot ktorý)
Zálohuje kresbu plátna (podlahy alebo stropu) do pamäte zadaného
 robota.
void
zalohujChvost(int index)
 Alias pre zálohujChvost.
Object
zálohujChvost(int index)
Zálohuje textový obsah vnútornej konzoly tohto plátna od
 určeného indexu riadka vyššie (chvost).
void
zalohujChvost(int index,
             GRobot ktorý)
 Alias pre zálohujChvost.
void
zálohujChvost(int index,
             GRobot ktorý)
Zálohuje textový obsah vnútornej konzoly tohto plátna od
 určeného indexu riadka vyššie (chvost).
Object
zalohujTexty()
 Alias pre zálohujTexty.
Object
zálohujTexty()
Táto metóda vytvorí zálohu textového obsahu vnútornej konzoly tohto
 plátna, uloží si ju do vnútornej pamäte a zároveň vráti vo forme
 objektu.
void
zalohujTexty(GRobot ktorý)
 Alias pre zálohujTexty.
void
zálohujTexty(GRobot ktorý)
Táto metóda vytvorí zálohu textového obsahu vnútornej konzoly tohto
 plátna s použitím vnútornej pamäte zadaného robota.
boolean
zamrazOdsadenie()
 Zistí či bola zadaná požiadavka na
 nastavenie („zamrazenie“) ľavého odsadenia konzolových textov
 plátna (podlahy alebo stropu) na aktuálnej pozícii.
void
zamrazOdsadenie(boolean zamraziť)
 Nastaví špeciálnu požiadavku na
 nastavenie („zamrazenie“) ľavého odsadenia konzolových textov
 plátna (podlahy alebo stropu) na aktuálnej pozícii textu.
void
zapamatajGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
Object
zapamatajTexty()
 Alias pre zálohujTexty.
void
zapamatajTexty(GRobot ktorý)
 Alias pre zálohujTexty.
void
zapamätajGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
Object
zapamätajTexty()
 Alias pre zálohujTexty.
void
zapamätajTexty(GRobot ktorý)
 Alias pre zálohujTexty.
int[]
zistiOkrajeKonzoly()
Vráti okraje konzoly v poli celočíselných hodnôt.
boolean[]
zistiZobrazenieListKonzoly()
 Alias pre zistiZobrazenieLíštKonzoly.
boolean[]
zistiZobrazenieLíštKonzoly()
Overí viditeľnosť líšt konzoly a vráti údaje o ich viditeľnosti
 v poli booleovských hodnôt.
Integer
zmenOdsadenieSprava()
 Alias pre zmeňOdsadenieSprava.
Integer
zmeňOdsadenieSprava()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) sprava.
void
zmenOdsadenieSprava(Integer novéOdsadenie)
 Alias pre zmeňOdsadenieSprava.
void
zmeňOdsadenieSprava(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 sprava.
Integer
zmenOdsadenieZlava()
 Alias pre zmeňOdsadenieZľava.
Integer
zmeňOdsadenieZľava()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) zľava.
void
zmenOdsadenieZlava(Integer novéOdsadenie)
 Alias pre zmeňOdsadenieZľava.
void
zmeňOdsadenieZľava(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 zľava.
boolean
zmrazOdsadenie()
 Alias pre zamrazOdsadenie.
void
zmrazOdsadenie(boolean zamraziť)
 Alias pre zamrazOdsadenie.
void
zobrazListyKonzoly(boolean zvislá,
                  boolean vodorovná)
 Alias pre zobrazLištyKonzoly.
void
zobrazLištyKonzoly(boolean zvislá,
                  boolean vodorovná)
Jednotlivo zobrazí alebo skryje posuvné lišty previazané
 s výpismi vnútornej konzoly.
int
zrusOznacenieRiadka(int index)
 Alias pre zrušOznačenieRiadka.
int
zrusOznacenieRiadkov(int prvýRiadok,
                    int poslednýRiadok)
 Alias pre zrušOznačenieRiadkov.
int
zrusOznacenieTextov()
 Alias pre zrušOznačenieTextov.
int
zrusOznacenieVypisov(int prvýRiadok,
                    int prvýVýpis,
                    int poslednýRiadok,
                    int poslednýVýpis)
 Alias pre zrušOznačenieVýpisov.
int
zrusOznacenieVypisu(int riadok,
                   int index)
 Alias pre zrušOznačenieVýpisu.
void
zrusPriehladnost()
 Alias pre zrušPriehľadnosť.
int
zrušOznačenieRiadka(int index)
Zruší označenie zadaného riadka vnútornej konzoly plátna.
int
zrušOznačenieRiadkov(int prvýRiadok,
                    int poslednýRiadok)
Zruší označenie všetkých riadkov medzi hodnotami parametrov
 prvýRiadok a poslednýRiadok, vrátane nich.
int
zrušOznačenieTextov()
Zruší jestvujúce označenie všetkých textov vnútornej konzoly.
int
zrušOznačenieVýpisov(int prvýRiadok,
                    int prvýVýpis,
                    int poslednýRiadok,
                    int poslednýVýpis)
Zruší označenie výpisov v rozmedzí stanovenom hodnotami štyroch
 číselných parametrov.
int
zrušOznačenieVýpisu(int riadok,
                   int index)
Zruší označenie konkrétnemu bloku výpisu na konkrétnom riadku
 vnútornej konzoly plátna.
void
zrušPriehľadnosť()
Zruší priehľadnosť všetkých bodov na plátne.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
rolujTexty
public boolean rolujTexty
Príznak automatického rolovania textov vnútornej konzoly s pomocou
 kolieska myši. Predvolená hodnota tohto príznaku je true.
 Rovnomenná metóda (rolujTexty) slúži na
 okamžité vykonanie rolovania textov vnútornej konzoly podľa
 posledných hodnôt miery rolovania kolieskom myši a v prípade
 ponechania hodnoty true v tomto príznaku je uvedená
 metóda volaná automaticky.
Pozri tiež:
rolujTexty()
Podrobnosti metód
najmenšieX
public static double najmenšieX()
 Zistí najmenšiu x-ovú súradnicu plátna.
 Podlaha a strop majú určitú veľkosť, ktorá je o niečo väčšia ako
 predvolená veľkosť okna aplikácie.
Návratová hodnota:
najmenšia x-ová súradnica plátna
Pozri tiež:
najväčšieX(), 
najmenšieY(), 
najväčšieY()
najmensieX
public static double najmensieX()
 Alias pre najmenšieX.
minimálneX
public static double minimálneX()
 Alias pre najmenšieX.
minimalneX
public static double minimalneX()
 Alias pre najmenšieX.
najmenšieY
public static double najmenšieY()
 Zistí najmenšiu y-ovú súradnicu plátna.
 Podlaha a strop majú určitú veľkosť, ktorá je o niečo väčšia ako
 predvolená veľkosť okna aplikácie.
Návratová hodnota:
najmenšia y-ová súradnica plátna
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najväčšieY()
najmensieY
public static double najmensieY()
 Alias pre najmenšieY.
minimálneY
public static double minimálneY()
 Alias pre najmenšieY.
minimalneY
public static double minimalneY()
 Alias pre najmenšieY.
najväčšieX
public static double najväčšieX()
 Zistí najväčšiu x-ovú súradnicu plátna.
 Podlaha a strop majú určitú veľkosť, ktorá je o niečo väčšia ako
 predvolená veľkosť okna aplikácie.
Návratová hodnota:
najväčšia x-ová súradnica plátna
Pozri tiež:
najmenšieX(), 
najmenšieY(), 
najväčšieY()
najvacsieX
public static double najvacsieX()
 Alias pre najväčšieX.
maximálneX
public static double maximálneX()
 Alias pre najväčšieX.
maximalneX
public static double maximalneX()
 Alias pre najväčšieX.
najväčšieY
public static double najväčšieY()
 Zistí najväčšiu y-ovú súradnicu plátna.
 Podlaha a strop majú určitú veľkosť, ktorá je o niečo väčšia ako
 predvolená veľkosť okna aplikácie.
Návratová hodnota:
najväčšia y-ová súradnica plátna
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najmenšieY()
najvacsieY
public static double najvacsieY()
 Alias pre najväčšieY.
maximálneY
public static double maximálneY()
 Alias pre najväčšieY.
maximalneY
public static double maximalneY()
 Alias pre najväčšieY.
šírka
public static int šírka()
Zistí šírku plátna (podlahy alebo stropu).
Návratová hodnota:
šírka plátna (podlahy alebo stropu)
sirka
public static int sirka()
 Alias pre šírka.
výška
public static int výška()
Zistí výšku plátna (podlahy alebo stropu).
Návratová hodnota:
výška plátna (podlahy alebo stropu)
vyska
public static int vyska()
 Alias pre šírka.
viditeľnáŠírka
public static int viditeľnáŠírka()
Zistí aktuálnu šírku tzv. klientskej oblasti okna. Ide
 o viditeľnú časť komponentu okna zahŕňajúceho obvykle šedú plochu s predvolene bielou
 kresliacou oblasťou (plátnami) a prípadne ďalšími komponentmi
 (vstupným
 riadkom, tlačidlami…). Ak je okno užšie,
 než sú rozmery plátien, tak ide v podstate o viditeľnú šírku
 plátna (podlahy alebo stropu).
Návratová hodnota:
šírka klientskej oblasti okna (ak je okno užšie, než
     plátno, tak ide o viditeľnú časť podlahy alebo stropu)
viditelnaSirka
public static int viditelnaSirka()
 Alias pre viditeľnáŠírka.
viditeľnáVýška
public static int viditeľnáVýška()
Zistí viditeľnú výšku tzv. klientskej oblasti okna. Pozri aj
 opis metódy viditeľnáŠírka() – rovnaké
 informácie platia aj pre túto metódu
 (viditeľnáVýška).
Návratová hodnota:
výška klientskej oblasti okna (ak je okno menšie, než
     výška plátna, tak ide o viditeľnú časť podlahy alebo stropu)
viditelnaVyska
public static int viditelnaVyska()
 Alias pre viditeľnáVýška.
ľavýOkraj
public static double ľavýOkraj()
 Zistí najmenšiu aktuálne viditeľnú x-ovú
 súradnicu na plátne (podlahe alebo strope).
Návratová hodnota:
najmenšia viditeľná x-ová súradnica na plátne
Pozri tiež:
pravýOkraj(), 
spodnýOkraj(), 
vrchnýOkraj()
lavyOkraj
public static double lavyOkraj()
 Alias pre ľavýOkraj.
spodnýOkraj
public static double spodnýOkraj()
 Zistí najmenšiu aktuálne viditeľnú y-ovú
 súradnicu na plátne (podlahe alebo strope).
Návratová hodnota:
najmenšia viditeľná y-ová súradnica na plátne
Pozri tiež:
ľavýOkraj(), 
pravýOkraj(), 
vrchnýOkraj()
spodnyOkraj
public static double spodnyOkraj()
 Alias pre spodnýOkraj.
dolnýOkraj
public static double dolnýOkraj()
 Alias pre spodnýOkraj.
dolnyOkraj
public static double dolnyOkraj()
 Alias pre dolnýOkraj.
pravýOkraj
public static double pravýOkraj()
 Zistí najväčšiu aktuálne viditeľnú x-ovú súradnicu na
 plátne (podlahe alebo strope).
Návratová hodnota:
najväčšia viditeľná x-ová súradnica na plátne
Pozri tiež:
ľavýOkraj(), 
spodnýOkraj(), 
vrchnýOkraj()
pravyOkraj
public static double pravyOkraj()
 Alias pre pravýOkraj.
vrchnýOkraj
public static double vrchnýOkraj()
 Zistí najväčšiu aktuálne viditeľnú y-ovú súradnicu na
 plátne (podlahe alebo strope).
Návratová hodnota:
najväčšia viditeľná y-ová súradnica na plátne
Pozri tiež:
ľavýOkraj(), 
pravýOkraj(), 
spodnýOkraj()
vrchnyOkraj
public static double vrchnyOkraj()
 Alias pre vrchnýOkraj.
hornýOkraj
public static double hornýOkraj()
 Alias pre vrchnýOkraj.
hornyOkraj
public static double hornyOkraj()
 Alias pre hornýOkraj.
zálohujGrafiku
public Object zálohujGrafiku()
Zálohuje kresbu na plátne (podlahe alebo strope), aby mohla byť
 v prípade potreby obnovená metódou obnovGrafiku.
Návratová hodnota:
objekt obsahujúci zálohu kresby na plátne
Pozri tiež:
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujGrafiku
public Object zalohujGrafiku()
 Alias pre zálohujGrafiku.
zálohujGrafiku
public void zálohujGrafiku(GRobot ktorý)
Zálohuje kresbu plátna (podlahy alebo stropu) do pamäte zadaného
 robota. Obsah môže byť v prípade potreby obnovený metódou obnovGrafiku(Object) alebo pridaný
 k aktuálnemu obsahu kresby na plátne metódou pridajGrafiku(GRobot).
Parametre:
ktorý – ktorý robot si má zapamätať kresbu na plátne
Pozri tiež:
zálohujGrafiku(), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujGrafiku
public void zalohujGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
zapamätajGrafiku
public void zapamätajGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
zapamatajGrafiku
public void zapamatajGrafiku(GRobot ktorý)
 Alias pre zálohujGrafiku.
obnovGrafiku
public void obnovGrafiku()
Obnoví kresbu plátna (podlahy alebo stropu), ktorá bol zálohovaná
 metódou zálohujGrafiku. Ak kresba predtým
 nebola zálohovaná, volanie tejto metódy nebude mať žiadny efekt.
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
obnovGrafiku
public void obnovGrafiku(Object záloha)
Obnoví kresbu plátna (podlahy alebo stropu), ktorá bola
 zálohovaná buď metódou zálohujGrafiku(),
 alebo metódou zálohujGrafiku(GRobot).
 Ak zadaný objekt neobsahuje zálohu, tak volanie tejto metódy nebude
 mať žiadny efekt.
Parametre:
záloha – záloha plátna vytvorená buď metódou zálohujGrafiku(), alebo metódou zálohujGrafiku(GRobot) (čiže buď objekt,
     ktorý bol výstupom metódy zálohujGrafiku(), alebo robot, ktorý bol použitý na zálohovanie
     metódou zálohujGrafiku(GRobot))
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
pridajGrafiku
public void pridajGrafiku(GRobot ktorý)
Nakreslí obsah zadanej zálohy plátna vytvorenej metódou
 zálohujGrafiku(GRobot)) cez
 jestvujúcu kresbu na plátne (podlahe alebo strope). Táto metóda
 s využitím priehľadnosti dokreslí kresbu zo zálohy ku kresbe, ktorá
 sa na plátne práve nachádza.
 
 Testy ukázali, že proces dokreslenia je približne rovnako rýchly
 ako proces obnovenia zo zálohy.
 
 Poznámka: Pri použití metódy obnovGrafiku(Object) je kresba plátna úplne
 nahradená obsahom zálohy a na rozdiel od tejto metódy sú pri nej
 použiteľné aj objekty vytvárané metódou zálohujGrafiku(), ktorých štruktúra je jednoduchšia.
Parametre:
ktorý – robot, ktorý obsahuje zálohu plátna vytvorenú
     metódou zálohujGrafiku(GRobot)
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zálohujTexty
public Object zálohujTexty()
Táto metóda vytvorí zálohu textového obsahu vnútornej konzoly tohto
 plátna, uloží si ju do vnútornej pamäte a zároveň vráti vo forme
 objektu. Vrátený objekt je použiteľný s metódami
 obnovTexty
 a pridajTexty(Object).
Návratová hodnota:
záloha, ktorá je použiteľná s metódami
     obnovTexty
     a pridajTexty(Object)
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujTexty
public Object zalohujTexty()
 Alias pre zálohujTexty.
zapamätajTexty
public Object zapamätajTexty()
 Alias pre zálohujTexty.
zapamatajTexty
public Object zapamatajTexty()
 Alias pre zálohujTexty.
zálohujTexty
public void zálohujTexty(GRobot ktorý)
Táto metóda vytvorí zálohu textového obsahu vnútornej konzoly tohto
 plátna s použitím vnútornej pamäte zadaného robota. Obsah môže byť
 v prípade potreby obnovený metódou obnovTexty(Object) alebo pridaný k aktuálnym textom na plátne
 metódou pridajTexty(Object).
Parametre:
ktorý – robot, do ktorého bude uložená záloha textov
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujTexty
public void zalohujTexty(GRobot ktorý)
 Alias pre zálohujTexty.
zapamätajTexty
public void zapamätajTexty(GRobot ktorý)
 Alias pre zálohujTexty.
zapamatajTexty
public void zapamatajTexty(GRobot ktorý)
 Alias pre zálohujTexty.
obnovTexty
public void obnovTexty()
Táto metóda obnoví stav textového obsahu vnútornej konzoly, ktorý
 bol uložený metódou zálohujTexty. Ak záloha
 predtým nebola vytvorená, tak volanie tejto metódy nebude mať
 žiadny efekt.
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(Object), 
pridajTexty(Object)
obnovTexty
public void obnovTexty(Object záloha)
Táto metóda obnoví stav textového obsahu vnútornej konzoly
 tohto plátna podľa objektu, ktorý bol vytvorený niektorou
 z metód zálohujTexty(),
 zálohujTexty(GRobot),
 zálohujChvost(int) alebo
 zálohujChvost(int, GRobot)
 (prípadne inou metódou, ktorá mohla byť do programovacieho
 rámca pridaná neskôr).
Parametre:
záloha – objekt, ktorý obsahuje zálohu textov konzoly
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
pridajTexty(Object)
pridajTexty
public void pridajTexty(Object záloha)
Táto metóda pridá k aktuálnemu obsahu vnútornej konzoly
 tohto plátna obsah zo zadanej zálohy konzoly, ktorá bola
 vytvorená niektorou z metód zálohujTexty(), zálohujTexty(GRobot), zálohujChvost(int) alebo zálohujChvost(int, GRobot) (prípadne inou metódou,
 ktorá mohla byť do programovacieho rámca pridaná neskôr).
Parametre:
záloha – objekt, ktorý obsahuje zálohu textov konzoly
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object)
kresli
public void kresli(Shape tvar,
                   GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na
 plátno. Metóda potrebuje na svoje správne fungovanie robota
 „kresliča,“ ktorého farbu alebo náter a štýl čiary použije
 na kreslenie. Ak je do metódy namiesto konkrétneho kresliča
 zadaná hodnota null, tak je na získanie parametrov
 kreslenia použitý hlavný robot
 (ak ten nejestvuje, kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou zadaného robota
     („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
kresli(Shape), 
vyplň(Shape, GRobot), 
vyplň(Shape)
vyplň
public void vyplň(Shape tvar,
                  GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov na plátno.
 Metóda potrebuje na svoje správne fungovanie robota „kresliča,“
 ktorého farbu alebo náter použije na vyplnenie zadaného tvaru.
 Ak je do metódy namiesto konkrétneho kresliča zadaná hodnota
 null, tak je na získanie parametrov kreslenia použitý
 hlavný robot (ak ten nejestvuje,
 kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     aktuálnou farbou zadaného robota („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
kresli(Shape, GRobot), 
kresli(Shape), 
vyplň(Shape)
vypln
public void vypln(Shape tvar,
                  GRobot kreslič)
 Alias pre vyplň.
kresli
public void kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na plátno.
 Metóda používa na získanie parametrov kreslenia (štýlu a farby
 čiary alebo náteru) hlavného
 robota (ak nejestvuje, kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou hlavného robota
Pozri tiež:
kresli(Shape, GRobot), 
vyplň(Shape, GRobot), 
vyplň(Shape)
vyplň
public void vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov na plátno.
 Metóda používa na získanie parametrov kreslenia (farby výplne
 alebo náteru) hlavného robota
 (ak nejestvuje, kreslenie nebude vykonané).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     farbou hlavného robota
Pozri tiež:
kresli(Shape, GRobot), 
kresli(Shape), 
vyplň(Shape, GRobot)
vypln
public void vypln(Shape tvar)
 Alias pre vyplň.
prepíšBod
public void prepíšBod(double x,
                      double y,
                      Color farba)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii zadanou farbou.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
farba – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(double x,
                      double y,
                      Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii farbou zadaného objektu.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
objekt – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(double x,
                      double y,
                      int farba)
Prepíše farebné zložky a zložku priehľadnosti bodu plátna na
 zadanej pozícii zadanou kombináciou zložiek ARGB zakódovaných
 v celočíselnej hodnote.
Parametre:
x – x-ová súradnica bodu v súradnicovom priestore rámca
y – y-ová súradnica bodu v súradnicovom priestore rámca
farba – celé číslo obsahujúce kombináciu farebných zložiek
     RGB a priehľadnosti
prepisBod
public void prepisBod(double x,
                      double y,
                      Color farba)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(double x,
                      double y,
                      Farebnosť objekt)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(double x,
                      double y,
                      int farba)
 Alias pre prepíšBod.
prepíšBod
public void prepíšBod(Poloha bod,
                      Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou farbou.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(Poloha bod,
                      Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu farbou zadaného objektu.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
objekt – objekt určujúci novú farbu bodu
prepíšBod
public void prepíšBod(Poloha bod,
                      int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou kombináciou zložiek ARGB
 zakódovaných v celočíselnej hodnote.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – celé číslo obsahujúce kombináciu farebných zložiek
     RGB a priehľadnosti
prepisBod
public void prepisBod(Poloha bod,
                      Color farba)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(Poloha bod,
                      Farebnosť objekt)
 Alias pre prepíšBod.
prepisBod
public void prepisBod(Poloha bod,
                      int farba)
 Alias pre prepíšBod.
prepíšBodNaMyši
public void prepíšBodNaMyši(Color farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou farbou.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – objekt určujúci novú farbu bodu
prepíšBodNaMyši
public void prepíšBodNaMyši(Farebnosť objekt)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu farbou zadaného objektu.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
objekt – objekt určujúci novú farbu bodu
prepíšBodNaMyši
public void prepíšBodNaMyši(int farba)
Prepíše farebné zložky a zložku priehľadnosti na pozícii
 zadaného bodu na plátne zadanou kombináciou zložiek ARGB
 zakódovaných v celočíselnej hodnote.
Parametre:
bod – objekt reprezentujúci súradnice bodu (v súradnicovom
     priestore robota)
farba – celé číslo obsahujúce kombináciu farebných zložiek
     RGB a priehľadnosti
prepisBodNaMysi
public void prepisBodNaMysi(Color farba)
 Alias pre prepíšBodNaMyši.
prepisBodNaMysi
public void prepisBodNaMysi(Farebnosť objekt)
 Alias pre prepíšBodNaMyši.
prepisBodNaMysi
public void prepisBodNaMysi(int farba)
 Alias pre prepíšBodNaMyši.
farbaBodu
public Farba farbaBodu(double x,
                       double y)
Zistí farbu bodu (jedného pixela) na zadaných súradniciach.
 Ak sa zadané súradnice nachádzajú mimo plochy plátna, je vrátená
 inštancia farebnosti žiadna. So získanou
 farbou môžeme ďalej pracovať – napríklad ju upravovať alebo
 zisťovať jej vlastnosti (farebné zložky…). Testovať, či má bod
 konkrétnu farbu, môžeme napríklad s pomocou metódy
 farbaBodu(x, y, farba).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na zadanej
     pozícii alebo inštancia žiadna, ak sú
     zadané súradnice mimo rozmerov plátna
farbaBodu
public Farba farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) plátna na pozícii zadaného
 objektu. Ak sa objekt nachádza mimo plochy plátna, je vrátená
 inštancia farebnosti žiadna. So získanou
 farbou môžeme ďalej pracovať – napríklad ju upravovať alebo
 zisťovať jej vlastnosti (farebné zložky…). Testovať, či má bod
 konkrétnu farbu, môžeme napríklad s pomocou metódy
 farbaBodu(objekt, farba).
Parametre:
objekt – objekt, na ktorého pozícii má byť zistená farba bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na pozícii
     zadaného objektu alebo inštancia žiadna,
     ak sa zadaný objekt nachádza mimo rozmerov plátna
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         Color farba)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje so zadanou farbou. Ak sú zadané súradnice mimo plochy
 plátna, je vrátená hodnota false. Testovať farbu
 s pomocou tejto metódy môžeme napríklad takto:
 
 
if (farbaBodu(3.0, 5.0, modrá)) …
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
farba – farba, ktorú chceme porovnať s farbou bodu na
     zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     plátna a farba bodu na zadaných súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje so zadanou farbou. Ak sú zadané súradnice mimo plochy
 plátna, je vrátená hodnota false. Testovať farbu
 s pomocou tejto metódy môžeme napríklad takto:
 
 
if (farbaBodu(this, modrá)) …
Parametre:
objekt – objekt, na ktorého pozícii chceme overiť farbu bodu
farba – farba, ktorú chceme porovnať s farbou bodu na
     pozícii určeného objektu
Návratová hodnota:
true ak sa objekt nachádza v rámci rozmerov
     plátna a farba bodu na jeho mieste sa zhoduje so zadanou
     farbou (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu. Ak sú zadané súradnice mimo
 plochy plátna, je vrátená hodnota false.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
objekt – objekt, ktorého farbu chceme porovnať s farbou bodu
     na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     plátna a farba bodu na zadaných súradniciach sa zhoduje
     s farbou zadaného objektu farbou (musia sa zhodovať všetky
     farebné zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadaného objektu. Ak sú zadané súradnice
 mimo plochy plátna, je vrátená hodnota false.
Parametre:
objekt – objekt, na ktorého pozícii chceme overiť farbu bodu
farebnosť – objekt, ktorého farbu chceme porovnať s farbou
     bodu na pozícii určenej predchádzajúcim objektom
Návratová hodnota:
true ak sa objekt nachádza v rámci rozmerov
     plátna a farba bodu na jeho mieste sa zhoduje s farbou
     zadaného objektu farbou (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         int r,
                         int g,
                         int b)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     plátna a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(double x,
                         double y,
                         int r,
                         int g,
                         int b,
                         int a)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     plátna a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         int r,
                         int g,
                         int b)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     plátna a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public boolean farbaBodu(Poloha objekt,
                         int r,
                         int g,
                         int b,
                         int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     plátna a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaNaMyši
public Farba farbaNaMyši()
Zistí farbu bodu (jedného pixela) na súradniciach myši. So
 získanou farbou môžeme ďalej pracovať – napríklad ju upravovať
 alebo zisťovať jej vlastnosti (farebné zložky…). Testovať, či má
 bod konkrétnu farbu, môžeme napríklad s pomocou metódy farbaNaMyši(farba).
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy plátna, metóda by vrátila inštanciu farby žiadna.
Návratová hodnota:
farba bodu (objekt typu Farba) na pozícii
     myši
farbaNaMysi
public Farba farbaNaMysi()
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou. Testovať farbu s pomocou tejto
 metódy môžeme napríklad takto:
 
 
if (farbaNaMyši(modrá)) …
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy plátna, metóda by vrátila hodnotu false.
Parametre:
farba – farba, ktorú chceme porovnať s farbou bodu na
     súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadaného objektu.
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy plátna, metóda by vrátila hodnotu false.
Parametre:
objekt – objekt, ktorého farbu chceme porovnať s farbou bodu
     na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná s farbou zadaného objektu farbou (musia sa zhodovať
     všetky farebné zložky aj úroveň priehľadnosti),
     inak false
farbaNaMysi
public boolean farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(int r,
                           int g,
                           int b)
Zistí, či je farba bodu (jedného pixela) na súradniciach myši
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(int r,
                           int g,
                           int b)
 Alias pre farbaNaMyši.
farbaNaMyši
public boolean farbaNaMyši(int r,
                           int g,
                           int b,
                           int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy plátna, metóda by vrátila hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public boolean farbaNaMysi(int r,
                           int g,
                           int b,
                           int a)
 Alias pre farbaNaMyši.
farbaTextu
public Farba farbaTextu()
 Zistí aktuálnu farbu výpisu nových textov
 vnútornej konzoly plátna (podlahy alebo stropu).
Návratová hodnota:
aktuálna farba textov konzoly plátna (objekt typu
     Farba)
farbaTextu
public void farbaTextu(Color nováFarba)
 Nastav farbu textov vnútornej konzoly
 plátna (podlahy alebo stropu). Nastaví farbu a priehľadnosť textov
 konzoly podlahy alebo stropu podľa zadaného objektu.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou textov
     plátna; jestvuje paleta predvolených farieb (pozri napr.:
     biela, červená, čierna…)
farbaTextu
public void farbaTextu(Farebnosť objekt)
Nastav farbu textov plátna (podlahy alebo stropu) podľa farby
 zadaného objektu. Nastaví farbu a priehľadnosť textov podlahy alebo
 stropu podľa zadaného objektu.
Parametre:
objekt – objekt určujúci novú farbu textov plátna
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b)
Nastav farbu textov plátna (podlahy alebo stropu). Nastaví farbu
 textov vnútornej konzoly podlahy alebo stropu podľa zadaných
 farebných zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textov
Pozri tiež:
farbaTextu(Color)
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b,
                        int a)
Nastav farbu textov plátna (podlahy alebo stropu). Nastaví farbu
 a (ne)priehľadnosť textov vnútornej konzoly podlahy alebo stropu
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba textov
Pozri tiež:
farbaTextu(Color)
predvolenáFarbaTextu
public void predvolenáFarbaTextu()
Zmení farbu textov vnútornej konzoly plátna (podlahy alebo stropu)
 na predvolenú.
predvolenaFarbaTextu
public void predvolenaFarbaTextu()
 Alias pre predvolenáFarbaTextu.
farbaPozadiaTextu
public Farba farbaPozadiaTextu()
 Zistí aktuálnu farbu pozadia výpisu
 nových textov vnútornej konzoly plátna (podlahy alebo stropu).
Návratová hodnota:
aktuálna farba pozadia textov konzoly plátna
     (objekt typu Farba)
farbaPozadiaTextu
public void farbaPozadiaTextu(Color nováFarba)
 Nastav farbu pozadia textov plátna
 (podlahy alebo stropu). Nastaví farbu a priehľadnosť pozadia
 textov vnútornej konzoly podlahy alebo stropu podľa zadaného
 objektu. Ak je zadaná pretypovaná hodnota (Farba)null, tak je farba pozadia zrušená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou pozadia
     textov plátna; jestvuje paleta predvolených farieb (pozri
     napríklad: biela, červená,
     čierna…)
farbaPozadiaTextu
public void farbaPozadiaTextu(Farebnosť objekt)
Nastav farbu pozadia textov plátna (podlahy alebo stropu) podľa
 farby zadaného objektu. Nastaví farbu a priehľadnosť pozadia textov
 podlahy alebo stropu podľa zadaného objektu. Ak je zadaná
 pretypovaná hodnota (Farebnosť)null, tak je farba pozadia zrušená.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
objekt – objekt určujúci novú farbu pozadia textov plátna
farbaPozadiaTextu
public Farba farbaPozadiaTextu(int r,
                               int g,
                               int b)
Nastav farbu pozadia textov plátna (podlahy alebo stropu). Nastaví
 farbu pozadia textov vnútornej konzoly podlahy alebo stropu podľa
 zadaných farebných zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadiaTextu(Color)
farbaPozadiaTextu
public Farba farbaPozadiaTextu(int r,
                               int g,
                               int b,
                               int a)
Nastav farbu pozadia textov plátna (podlahy alebo stropu). Nastaví
 farbu a (ne)priehľadnosť pozadia textov vnútornej konzoly podlahy
 alebo stropu podľa zadaných farebných zložiek a úrovne priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadiaTextu(Color)
predvolenáFarbaPozadiaTextu
public void predvolenáFarbaPozadiaTextu()
Zmení farbu pozadia textov vnútornej konzoly plátna (podlahy
 alebo stropu) na predvolenú. Predvolenou farbou pozadia textov
 konzoly plátna je „prázdna“ farba, čiže žiadna farba. Je to objekt
 typu farba s hodnotou null.
predvolenaFarbaPozadiaTextu
public void predvolenaFarbaPozadiaTextu()
 Alias pre predvolenáFarbaPozadiaTextu.
predvolenáFarbaPozadiaOznačenia
public Farba predvolenáFarbaPozadiaOznačenia()
 Zistí aktuálne predvolenú farbu pozadia
 označených textov vnútornej konzoly plátna (podlahy alebo stropu).
Návratová hodnota:
aktuálna predvolená farba pozadia označených textov
     konzoly plátna (objekt typu Farba)
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaPozadiaOznacenia
public Farba predvolenaFarbaPozadiaOznacenia()
 Alias pre predvolenáFarbaPozadiaOznačenia.
predvolenáFarbaPozadiaOznačenia
public void predvolenáFarbaPozadiaOznačenia(Color nováFarba)
 Nastav predvolenú farbu pozadia označenia
 textov vnútornej konzoly plátna (podlahy alebo stropu). Nastaví
 predvolenú farbu a priehľadnosť pozadia označenia textov konzoly
 podlahy alebo stropu podľa zadaného objektu. Ak je zadaná
 pretypovaná hodnota (Farba)null, tak je farba pozadia označenia nastavená na predvolenú
 svetložltú.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou pozadia
     označenia textov konzoly plátna; jestvuje paleta predvolených
     farieb (pozri napríklad: biela, červená, čierna…)
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaPozadiaOznacenia
public void predvolenaFarbaPozadiaOznacenia(Color nováFarba)
 Alias pre predvolenáFarbaPozadiaOznačenia.
predvolenáFarbaPozadiaOznačenia
public void predvolenáFarbaPozadiaOznačenia(Farebnosť objekt)
Nastav predvolenú farbu pozadia označenia textov plátna (podlahy
 alebo stropu) podľa farby zadaného objektu. Nastaví predvolenú
 farbu a priehľadnosť pozadia označenia textov podlahy alebo
 stropu podľa zadaného objektu. Ak je zadaná pretypovaná hodnota
 (Farebnosť)null,
 tak je farba pozadia označenia nastavená na
 svetložltú, ktorá je predvolenou
 farbou pri štarte programovacieho rámca (angl. frameworku).
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
objekt – objekt určujúci novú farbu pozadia označenia
     textov plátna
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaPozadiaOznacenia
public void predvolenaFarbaPozadiaOznacenia(Farebnosť objekt)
 Alias pre predvolenáFarbaPozadiaOznačenia.
predvolenáFarbaPozadiaOznačenia
public Farba predvolenáFarbaPozadiaOznačenia(int r,
                                             int g,
                                             int b)
Nastav predvolenú farbu pozadia označenia textov konzoly plátna
 (podlahy alebo stropu). Nastaví predvolenú farbu pozadia označenia
 textov vnútornej konzoly podlahy alebo stropu podľa zadaných
 farebných zložiek.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia označenia
     vnútornej konzoly
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaPozadiaOznacenia
public Farba predvolenaFarbaPozadiaOznacenia(int r,
                                             int g,
                                             int b)
 Alias pre predvolenáFarbaPozadiaOznačenia.
predvolenáFarbaPozadiaOznačenia
public Farba predvolenáFarbaPozadiaOznačenia(int r,
                                             int g,
                                             int b,
                                             int a)
Nastav predvolenú farbu pozadia označenia textov konzoly plátna
 (podlahy alebo stropu). Nastaví predvolenú farbu a (ne)priehľadnosť
 pozadia označenia textov vnútornej konzoly podlahy alebo stropu
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia označenia
     vnútornej konzoly
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaPozadiaOznacenia
public Farba predvolenaFarbaPozadiaOznacenia(int r,
                                             int g,
                                             int b,
                                             int a)
 Alias pre predvolenáFarbaPozadiaOznačenia.
predvolenáFarbaTextuOznačenia
public Farba predvolenáFarbaTextuOznačenia()
 Zistí aktuálne predvolenú farbu písma
 označených textov konzoly plátna (podlahy alebo stropu). Ak je
 vrátená hodnota null, znamená to, že farba textov zostáva
 pri označovaní pôvodná (mení sa len pozadie).
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
Návratová hodnota:
aktuálna farba označených textov plátna (objekt typu
     Farba alebo null)
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaTextuOznacenia
public Farba predvolenaFarbaTextuOznacenia()
 Alias pre predvolenáFarbaTextuOznačenia.
predvolenáFarbaTextuOznačenia
public void predvolenáFarbaTextuOznačenia(Color nováFarba)
 Nastav predvolenú farbu písma označených
 textov konzoly plátna (podlahy alebo stropu). Nastaví predvolenú
 farbu a priehľadnosť písma označených textov vnútornej konzoly
 podlahy alebo stropu podľa zadaného objektu.
 
 Ak je zadaná pretypovaná hodnota (Farba)null, tak je predvolenú farba textu
 označenia zrušená – bude sa meniť iba pozadie.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou
     označených textov plátna; jestvuje paleta predvolených
     farieb (pozri napr.: biela, červená, čierna…)
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaTextuOznacenia
public void predvolenaFarbaTextuOznacenia(Color nováFarba)
 Alias pre predvolenáFarbaTextuOznačenia.
predvolenáFarbaTextuOznačenia
public void predvolenáFarbaTextuOznačenia(Farebnosť objekt)
Nastav predvolenú farbu označenia textov plátna (podlahy alebo
 stropu) podľa farby zadaného objektu. Nastaví predvolenú farbu
 a priehľadnosť označenia textov podlahy alebo stropu podľa
 zadaného objektu.
 
 Ak je zadaná pretypovaná hodnota (Farebnosť)null, tak je predvolenú farba textu
 označenia zrušená – bude sa meniť iba pozadie.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
 
 Poznámka: Hodnota null
 nemá žiadny údajový typ. Je akoby „spoločná pre všetky
 údajové typy.“ Táto hodnota vyjadruje neprítomnosť
 žiadneho objektu, neprítomnosť žiadnej inštancie.
 V skutočnosti nie je a nikdy nebude možné určiť jej typ.
 Pri volaní metódy musí byť pretypovanie prítomné preto,
 aby kompilátor dokázal určiť, ktorú verziu z preťažených
 metód má volať.
Parametre:
objekt – objekt určujúci novú farbu označenia textov plátna
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(int, int, int), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaTextuOznacenia
public void predvolenaFarbaTextuOznacenia(Farebnosť objekt)
 Alias pre predvolenáFarbaTextuOznačenia.
predvolenáFarbaTextuOznačenia
public Farba predvolenáFarbaTextuOznačenia(int r,
                                           int g,
                                           int b)
Nastav predvolenú farbu písma označených textov konzoly plátna
 (podlahy alebo stropu). Nastaví predvolenú farbu písma označených
 textov vnútornej konzoly podlahy alebo stropu podľa zadaných
 farebných zložiek.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba označenia textov
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int, int)
predvolenaFarbaTextuOznacenia
public Farba predvolenaFarbaTextuOznacenia(int r,
                                           int g,
                                           int b)
 Alias pre predvolenáFarbaTextuOznačenia.
predvolenáFarbaTextuOznačenia
public Farba predvolenáFarbaTextuOznačenia(int r,
                                           int g,
                                           int b,
                                           int a)
Nastav predvolenú farbu písma označených textov konzoly plátna
 (podlahy alebo stropu). Nastaví predvolenú farbu a (ne)priehľadnosť
 písma označených textov vnútornej konzoly podlahy alebo stropu
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Predvolenú farbu pozadia a textu,
 ktorý je označený je možné individuálne prekryť pre každý označený
 výpis. Pozri napríklad metódu označVýpis.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba označenia textov
Pozri tiež:
predvolenáFarbaPozadiaOznačenia(), 
predvolenáFarbaPozadiaOznačenia(Color), 
predvolenáFarbaPozadiaOznačenia(Farebnosť), 
predvolenáFarbaPozadiaOznačenia(int, int, int), 
predvolenáFarbaPozadiaOznačenia(int, int, int, int), 
predvolenáFarbaTextuOznačenia(), 
predvolenáFarbaTextuOznačenia(Color), 
predvolenáFarbaTextuOznačenia(Farebnosť), 
predvolenáFarbaTextuOznačenia(int, int, int)
predvolenaFarbaTextuOznacenia
public Farba predvolenaFarbaTextuOznacenia(int r,
                                           int g,
                                           int b,
                                           int a)
 Alias pre predvolenáFarbaTextuOznačenia.
farbaPozadiaOznačeniaVýpisu
public Farba farbaPozadiaOznačeniaVýpisu(int riadok,
                                         int index)
Vráti farbu pozadia označenia špecifikovaného výpisu bloku textu,
 ak je označený.
Parametre:
riadok – index vyšetrovaného riadka
index – index vyšetrovaného bloku výpisu
Návratová hodnota:
ak je blok výpisu nájdený a ak je označený, tak metóda
     jeho farbu pozadia označenia, inak vráti hodnotu null
farbaPozadiaOznaceniaVypisu
public Farba farbaPozadiaOznaceniaVypisu(int riadok,
                                         int index)
 Alias pre farbaPozadiaOznačeniaVýpisu.
farbaTextuOznačeniaVýpisu
public Farba farbaTextuOznačeniaVýpisu(int riadok,
                                       int index)
Vráti farbu textu označenia špecifikovaného výpisu bloku textu,
 ak je označený a ak jestvuje nastavenie farby označeného textu.
Parametre:
riadok – index vyšetrovaného riadka
index – index vyšetrovaného bloku výpisu
Návratová hodnota:
ak je blok výpisu nájdený, označený a ak jestvuje také
     nastavenie, ktoré určí farbu textu v prípade jeho označenia,
     tak metóda túto farbu vráti, inak vracia hodnotu null
farbaTextuOznaceniaVypisu
public Farba farbaTextuOznaceniaVypisu(int riadok,
                                       int index)
 Alias pre farbaTextuOznačeniaVýpisu.
písmo
public Písmo písmo()
 Čítaj aktuálny typ písma textov vnútornej
 konzoly plátna (podlahy alebo stropu). Na výpis textov na vnútornú
 konzolu slúžia metódy vypíš
 a vypíšRiadok.
Návratová hodnota:
objekt typu Písmo – aktuálne písmo
Pozri tiež:
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
predvolenéPísmo(), 
vymaž(), 
vymažTexty()
pismo
public Pismo pismo()
 Alias pre písmo.
písmo
public void písmo(Font novéPísmo)
 Nastav nový typ písma textov vnútornej
 konzoly plátna (podlahy alebo stropu). Na výpis textov na vnútornú
 konzolu slúžia metódy vypíš
 a vypíšRiadok.
Parametre:
novéPísmo – objekt typu Písmo alebo Font
     určujúci nový typ písma
Pozri tiež:
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
predvolenéPísmo(), 
vymaž(), 
vymažTexty()
pismo
public void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public Písmo písmo(String názov,
                   double veľkosť)
Nastav nový typ písma textov vnútornej konzoly plátna (podlahy
 alebo stropu). Na výpis textov na vnútornú konzolu slúžia metódy
 vypíš a vypíšRiadok.
Parametre:
názov – názov písma; môže byť všeobecný názov logického
     písma (Dialog, DialogInput, Monospaced, Serif, SansSerif…)
     alebo názov konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená
     na typ float)
Návratová hodnota:
objekt typu Písmo určujúci nový typ písma
Pozri tiež:
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
písmo(Font), 
predvolenéPísmo(), 
vymaž(), 
vymažTexty()
pismo
public Pismo pismo(String názov,
                   double veľkosť)
 Alias pre písmo.
predvolenéPísmo
public void predvolenéPísmo()
Nastaví predvolený typ písma textov plátna (podlahy alebo stropu).
 Tento typ písma používajú metódy vypíš
 a vypíšRiadok.
Pozri tiež:
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
písmo(Font), 
vymaž(), 
vymažTexty()
predvolenePismo
public void predvolenePismo()
 Alias pre predvolenéPísmo.
výpisJeOznačený
public boolean výpisJeOznačený(int riadok,
                               int index)
Zistí, či je učený blok výpisu vnútornej konzoly plátna označený.
 (Záporné hodnoty číselných parametrov určujú index od konca.)
Parametre:
riadok – index riadka, ktorého stav označenia má byť overený
index – index výpisu, ktorého stav označenia má byť overený
Návratová hodnota:
true alebo false podľa toho, či je
     alebo nie je určený blok označený
vypisJeOznaceny
public boolean vypisJeOznaceny(int riadok,
                               int index)
 Alias pre výpisJeOznačený.
označRiadok
public int označRiadok(int index,
                       Color... farby)
Označí zadaný riadok vnútornej konzoly plátna. Zadanie farieb je
 nepovinné a pre farby platia rovnaké informácie ako pre rovnomenný
 parameter v opise metódy označVýpis. Tiež platí, že záporná hodnota číselného parametra
 určuje index riadka od konca, čiže hodnota -1 označuje
 posledný riadok. Návratová hodnota určuje počet blokov, ktoré sa
 podarilo označiť (0 nemusí nevyhnutne znamenať chybu,
 riadok jednoducho nemusí obsahovať ani jeden blok textu; prípadný
 starý stav označenia blokov je volaním tejto metódy prekrytý).
Parametre:
index – index riadka, ktorý má byť označený
farby – nula až štyri farby – pozri informácie pri
     rovnomennom parametri v opise metódy označVýpis
Návratová hodnota:
počet blokov textu, ktoré sa podarilo označiť
označVýpis
public int označVýpis(int riadok,
                      int index,
                      Color... farby)
Označí konkrétny blok výpisu na konkrétnom riadku vnútornej
 konzoly tohto plátna. Zadanie farieb je nepovinné. Plátno má
 definovanú predvolenú
 farbu označenia. Tá môže byť prekrytá farbami určenými touto
 metódou, rovnako ako farba popredia (to jest textu) označenia.
 Dodatočné dva parametere farieb môžu určiť farebnosť označených
 aktívnych
 slov – pozri opis parametra farby.
 (Záporné hodnoty číselných parametrov určujú index od konca.)
Parametre:
riadok – index riadka, v ktorom má byť označený blok výpisu
index – index výpisu, ktorý má byť v určenom riadku označený
farby – toto je variabilný zoznam parametrov a akceptuje nula
     až štyri farby (prípadné ďalšie zadané farby sú ignorované);
     zadané farby budú použité takto: prvá na prekrytie farby
     pozadia označenia, druhá na prekrytie farby popredia (textu)
     označenia, tretia na prekrytie farby pozadia označenia
     aktívneho
     slova a štvrtá na prekrytie farby popredia (textu) označenia
     aktívneho
     slova; ak je namiesto niektorej z farieb zadaná hodnota
     null, bude použitá
     predvolená farba označenia
Návratová hodnota:
vráti počet označených blokov (v tomto prípade môže byť
     návratová hodnota len 0 alebo 1;
     0 znamená zlyhanie; prípadný starý stav označenia
     bloku je volaním tejto metódy prekrytý)
označRiadky
public int označRiadky(int prvýRiadok,
                       int poslednýRiadok,
                       Color... farby)
Označí všetky riadky medzi hodnotami parametrov prvýRiadok
 a poslednýRiadok, vrátane nich.
 
 Ak je hodnota niektorého z parametrov záporná, tak zmení význam
 na poradové číslo riadka od konca, pričom hodnota -1
 znamená posledný riadok.
 
 Ak je hodnota parametra prvýRiadok väčšia než hodnota
 parametra poslednýRiadok, tak budú tiež označené riadky
 nachádzajúce sa medzi nimi a vrátane nich, čiže metóda sa správa
 tak, ako keby boli hodnoty uvedené v správnom poradí.
 
 Zadanie farieb je nepovinné. Pre parameter farby v tejto
 metóde platia rovnaké informácie ako pre rovnomenný parameter
 v opise metódy označVýpis.
 
 Návratová hodnota metódy určuje počet blokov textu, ktoré sa
 v zadanom rozsahu riadkov podarilo označiť, pričom bloky
 v platnom rozsahu indexov sú označené bez ohľadu na ich
 predchádzajúci stav označenia. To znamená, že prípadná staršia
 farba označenia bude prekrytá podľa variabilného zoznamu
 parametrov farby. (Návratová hodnota 0
 nemusí nevyhnutne znamenať chybu. V rozmedzí riadkov sa nemusel
 nachádzať žiadny blok textu – riadky boli prázdne.)
Parametre:
prvýRiadok – prvý označovaný riadok
poslednýRiadok – posledný označovaný riadok
farby – nula až štyri farby – pozri informácie pri
     rovnomennom parametri v opise metódy označVýpis
Návratová hodnota:
počet blokov textu, ktoré sa podarilo označiť
     (hodnota nezodpovedá počtu riadkov, jeden riadok môže obsahovať
     ľubovoľný počet textových blokov, vrátane nuly)
označVýpisy
public int označVýpisy(int prvýRiadok,
                       int prvýVýpis,
                       int poslednýRiadok,
                       int poslednýVýpis,
                       Color... farby)
Označí výpisy v rozmedzí stanovenom hodnotami štyroch číselných
 parametrov. Platia rovnaké informácie ako pri metóde
 označRiadky, ibaže rozsahy
 sú spresnené o číselné indexy textových blokov na jednotlivých
 riadkoch. (Záporné hodnoty číselných parametrov určujú indexy od
 konca. Ak je niektorá začiatočná hodnota väčšia než koncová, tak
 je výsledok procesu rovnaký ako keby boli hodnoty vymenené. Farby
 sú nepovinné. Ich význam je rovnaký ako pri metóde označVýpis.)
 
 Príklad:
 
 Tento príklad vygeneruje niekoľko náhodných slov zoradených
 do viet a zoskupených do odsekov. Výpis je možné označovať
 ťahaním myši. Pri podržaní klávesu Ctrl a označovaní
 myšou sa dá vytvoriť viacnásobné označenie. Provizórne
 naprogramovaná reakcia klávesnice spracúva klávesovú kombináciu
 Ctrl + C (na všetkých platformách), na ktorú zareaguje
 skopírovaním označených textov do schránky.
 
 
import knižnica.*;
public class TestovanieOznačenia extends GRobot
{
    // Atribúty slúžiace na uchovanie indexov riadkov a blokov v priebehu
    // označovania:
    private int počiatočnýRiadok, koncovýRiadok, počiatočnýBlok, koncovýBlok;
    // Polia s používanými samohláskami a spoluhláskami v náhodne
    // generovaných slovách:
    private final char[] samohlásky = {'a', 'e', 'i', 'o', 'u'},
        spoluhlásky = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',
            'l', 'm', 'n', 'p', 'r', 's', 't', 'v', 'z'};
    
    // Konštruktor:
    private TestovanieOznačenia()
    {
        počiatočnýRiadok = koncovýRiadok = počiatočnýBlok = koncovýBlok = 0;
        Svet.písmo("Garamond", 18);
        StringBuffer text = new StringBuffer();
        int početOdsekov = (int)Svet.náhodnéCeléČíslo(9, 12);
        for (int i = 0; i &lt; početOdsekov; ++i)
        {
            int početViet = (int)Svet.náhodnéCeléČíslo(4, 7);
            for (int j = 0; j &lt; početViet; ++j)
            {
                int početSlov = (int)Svet.náhodnéCeléČíslo(1, 8);
                for (int k = 0; k &lt; početSlov; ++k)
                    generujĎalšieSlovo(text, 0 == k, početSlov &#45; 1 == k);
                if (j &lt; početViet &#45; 1) text.append(' ');
                Svet.vypíš(text);
                text.setLength(0);
            }
            Svet.vypíšRiadok();
        }
    }
    // Metóda na vygenerovanie ďalšieho slova:
    private void generujĎalšieSlovo(StringBuffer text,
        boolean prvé, boolean posledné)
    {
        int početSlabík = (int)Svet.náhodnéCeléČíslo(1, 4);
        if (0 == Svet.náhodnéCeléČíslo(0, 1))
        {
            for (int i = 0; i &lt; početSlabík; ++i)
            {
                text.append(samohlásky[(int)Svet.
                    náhodnéCeléČíslo(0, samohlásky.length &#45; 1)]);
                text.append(spoluhlásky[(int)Svet.
                    náhodnéCeléČíslo(0, spoluhlásky.length &#45; 1)]);
            }
        }
        else
        {
            for (int i = 0; i &lt; početSlabík; ++i)
            {
                text.append(spoluhlásky[(int)Svet.
                    náhodnéCeléČíslo(0, spoluhlásky.length &#45; 1)]);
                text.append(samohlásky[(int)Svet.
                    náhodnéCeléČíslo(0, samohlásky.length &#45; 1)]);
            }
        }
        if (prvé)
        {
            text.setCharAt(0, Character.toUpperCase(text.charAt(0)));
            if (posledné) text.append('.');
        }
        else if (posledné) text.append('.');
        else text.append(' ');
    }
    
    // ---------------- Obsluha udalostí ----------------
    @Override public void klik()
    {
        if (ÚdajeUdalostí.myš().isControlDown())
        {
            int[] výpis = strop.výpisPriMyši();
            if (null != výpis)
            {
                if (strop.výpisJeOznačený(výpis[0], výpis[1]))
                    strop.zrušOznačenieVýpisu(výpis[0], výpis[1]);
                else
                    strop.označVýpis(výpis[0], výpis[1]);
            }
        }
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        if (!ÚdajeUdalostí.myš().isControlDown())
            strop.zrušOznačenieTextov();
        int[] výpis = strop.výpisPriMyši();
        if (null != výpis)
        {
            počiatočnýRiadok = koncovýRiadok = výpis[0];
            počiatočnýBlok   = koncovýBlok   = výpis[1];
        }
    }
    @Override public void ťahanieMyšou()
    {
        int[] výpis = strop.výpisPriMyši();
        if (null != výpis)
        {
            strop.zrušOznačenieVýpisov(
                počiatočnýRiadok, počiatočnýBlok,
                koncovýRiadok, koncovýBlok);
            koncovýRiadok = výpis[0];
            koncovýBlok   = výpis[1];
            strop.označVýpisy(
                počiatočnýRiadok, počiatočnýBlok,
                koncovýRiadok, koncovýBlok);
        }
    }
    @Override public void stlačenieKlávesu()
    {
        if (ÚdajeUdalostí.kláves(Kláves.VK_C) &&
            ÚdajeUdalostí.klávesnica().isControlDown())
        {
            strop.textyDoSchránky(true);
            Svet.správa("Texty boli vložené do schránky.");
        }
    }
    
    // Hlavná metóda:
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("TestovanieOznačenia.cfg");
        new TestovanieOznačenia();
    }
}
 
 Výsledok:
 
 
 Ukážka procesu označovania textov.
Parametre:
prvýRiadok – riadok, na ktorom sa označovanie začne
prvýVýpis – začiatočný výpis na riadku s indexom prvýRiadok
poslednýRiadok – riadok, na ktorom sa označovanie skončí
poslednýVýpis – konečný výpis na riadku s indexom
     poslednýRiadok
farby – nula až štyri farby – pozri informácie pri
     rovnomennom parametri v opise metódy označVýpis
Návratová hodnota:
počet blokov textu (výpisov), ktoré sa podarilo označiť
označVšetkyTexty
public int označVšetkyTexty(Color... farby)
Označí všetky texty vnútornej konzoly. (Prekryje prípadné
 jestvujúce označenie.)
Parametre:
farby – toto je variabilný zoznam parametrov a akceptuje
     nula až štyri farby – pozri informácie pri rovnomennom
     parametri v opise metódy označVýpis
Návratová hodnota:
počet blokov textu, ktoré boli označené (bez ohľadu na
     ich predchádzajúci stav označenia, to znamená, že prípadná
     staršia farba označenia bude prekrytá podľa variabilného
     zoznamu parametrov farby)
rozsahOblastiOznačenia
public int[] rozsahOblastiOznačenia(int riadok,
                                    int index)
Zistí a vráti rozsah oblasti označenia, ktorá obsahuje zadaný
 výpis na zadanom riadku. Oblasťou označenia sa rozumie taká
 oblasť (množina výpisov), ktoré majú rovnaký stav označenia, čiže
 ak je špecifikovaný výpis označený, tak sa hľadá rozsah všetkých
 susediacich blokov, ktoré sú tiež označené a naopak.
Parametre:
riadok – index riadka, v ktorom sa má začať hľadanie oblasti
index – index výpisu, od ktorého sa obojsmerne začne hľadanie
     rozsahu oblasti
Návratová hodnota:
ak sa všetko vykonalo bez chýb, tak metóda vráti
     štvorprvkové pole, ktorého prvé dva prvky určujú prvý riadok
     a prvý výpis oblasti a ďalšie dva posledný riadok a posledný
     výpis celej oblasti; v prípade chyby vráti metóda hodnotu
     null
zrušOznačenieRiadka
public int zrušOznačenieRiadka(int index)
Zruší označenie zadaného riadka vnútornej konzoly plátna.
 Záporná hodnota číselného parametra určuje index riadka od
 konca. Návratová hodnota určuje počet blokov, ktorým bolo
 reálne odobraté označenie.
Parametre:
index – index riadka, ktorého blokom má byť odobraté označenie
Návratová hodnota:
počet blokov textu, ktorým bolo reálne odobraté označenie
zrušOznačenieVýpisu
public int zrušOznačenieVýpisu(int riadok,
                               int index)
Zruší označenie konkrétnemu bloku výpisu na konkrétnom riadku
 vnútornej konzoly plátna. Záporné hodnoty číselných parametrov
 určujú index od konca.
Parametre:
riadok – index riadka, v ktorom má byť zrušené označenie
     bloku výpisu
index – index výpisu, ktorému má byť odobraté označenie
Návratová hodnota:
vráti počet blokov, ktorým bolo reálne odobraté označenie
zrušOznačenieRiadkov
public int zrušOznačenieRiadkov(int prvýRiadok,
                                int poslednýRiadok)
Zruší označenie všetkých riadkov medzi hodnotami parametrov
 prvýRiadok a poslednýRiadok, vrátane nich.
 
 Ak je hodnota niektorého z parametrov záporná, tak zmení význam
 na poradové číslo riadka od konca, pričom hodnota -1
 znamená posledný riadok.
 
 Ak je hodnota parametra prvýRiadok väčšia než hodnota
 parametra poslednýRiadok, tak budú spracované riadky tak,
 ako keby boli hodnoty uvedené v obrátenom poradí.
 
 Návratová hodnota metódy určuje počet blokov textu, ktorým
 bolo reálne odobraté označenie.
Parametre:
prvýRiadok – prvý riadok, ktorého stav označenia má byť zrušený
poslednýRiadok – posledný, ktorého stav označenia má byť zrušený
Návratová hodnota:
počet blokov textu, ktorým bolo reálne odobraté označenie
     (hodnota nezodpovedá počtu riadkov, jeden riadok môže obsahovať
     ľubovoľný počet textových blokov, vrátane nuly)
zrušOznačenieVýpisov
public int zrušOznačenieVýpisov(int prvýRiadok,
                                int prvýVýpis,
                                int poslednýRiadok,
                                int poslednýVýpis)
Zruší označenie výpisov v rozmedzí stanovenom hodnotami štyroch
 číselných parametrov. Platia rovnaké informácie ako pri metóde
 zrušOznačenieRiadkov,
 ibaže rozsahy sú spresnené o číselné indexy textových blokov na
 jednotlivých riadkoch. (Záporné hodnoty číselných parametrov
 určujú indexy od konca. Ak je niektorá začiatočná hodnota väčšia
 než koncová, tak je výsledok procesu rovnaký ako keby boli hodnoty
 vymenené.)
Parametre:
prvýRiadok – riadok, na ktorom sa proces rušenia označovania
     začne
prvýVýpis – začiatočný výpis na riadku s indexom
     prvýRiadok
poslednýRiadok – riadok, na ktorom sa proces rušenia
     označovania skončí
poslednýVýpis – konečný výpis na riadku s indexom
     poslednýRiadok
Návratová hodnota:
počet blokov textu (výpisov), ktorým bolo reálne odobraté
     označenie
zrušOznačenieTextov
public int zrušOznačenieTextov()
Zruší jestvujúce označenie všetkých textov vnútornej konzoly.
Návratová hodnota:
počet blokov textu, ktorým bolo reálne zrušené označenie
oznacRiadok
public int oznacRiadok(int index,
                       Color... farby)
 Alias pre označRiadok.
oznacVypis
public int oznacVypis(int riadok,
                      int index,
                      Color... farby)
 Alias pre označVýpis.
oznacRiadky
public int oznacRiadky(int prvýRiadok,
                       int poslednýRiadok,
                       Color... farby)
 Alias pre označRiadky.
oznacVypisy
public int oznacVypisy(int prvýRiadok,
                       int prvýVýpis,
                       int poslednýRiadok,
                       int poslednýVýpis,
                       Color... farby)
 Alias pre označVýpisy.
oznacVsetkyTexty
public int oznacVsetkyTexty(Color... farby)
 Alias pre označVšetkyTexty.
rozsahOblastiOznacenia
public int[] rozsahOblastiOznacenia(int riadok,
                                    int index)
 Alias pre rozsahOblastiOznačenia.
zrusOznacenieRiadka
public int zrusOznacenieRiadka(int index)
 Alias pre zrušOznačenieRiadka.
zrusOznacenieVypisu
public int zrusOznacenieVypisu(int riadok,
                               int index)
 Alias pre zrušOznačenieVýpisu.
zrusOznacenieRiadkov
public int zrusOznacenieRiadkov(int prvýRiadok,
                                int poslednýRiadok)
 Alias pre zrušOznačenieRiadkov.
zrusOznacenieVypisov
public int zrusOznacenieVypisov(int prvýRiadok,
                                int prvýVýpis,
                                int poslednýRiadok,
                                int poslednýVýpis)
 Alias pre zrušOznačenieVýpisov.
zrusOznacenieTextov
public int zrusOznacenieTextov()
 Alias pre zrušOznačenieTextov.
odsadeniePrvéhoRiadka
public Integer odsadeniePrvéhoRiadka()
 Zistí (dočasnú) hodnotu požiadavky na
 nastavenie odsadenia prvého riadka najbližšie vypísaného odseku
 konzolového textu plátna (podlahy alebo stropu). Odsek je jeden
 dlhý zalamovaný riadok konzoly. Hodnota požiadavky na nastavenie
 odsadenia (prvého riadka) je platná vždy do najbližšieho použitia
 príkazov určených na vypísanie textu na vnútornú konzolu
 (napríklad vypíš alebo vypíšRiadok). V okamihu jej použitia sa
 hodnota aplikuje a spotrebuje. (Ďalší odsek už nebude mať odsadený
 prvý riadok. To je rozdiel pri porovnaní požiadaviek na zmenu
 odsadzovania celých odsekov zľava alebo sprava.) Ak nie
 je aktívna žiadna požiadavka na zmenu odsadenia, tak táto metóda
 vráti hodnotu null.
Návratová hodnota:
aktuálna hodnota požiadavky na zmenu odsadenia prvého
     riadka textov plátna zľava alebo null
Pozri tiež:
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
odsadeniePrvehoRiadka
public Integer odsadeniePrvehoRiadka()
 Alias pre odsadeniePrvéhoRiadka.
odsadeniePrvéhoRiadka
public void odsadeniePrvéhoRiadka(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia prvého riadka (v zmysle riadka odseku)
 konzolových textov plátna (podlahy alebo stropu). Platí to isté ako
 je uvedené v opise metódy
 odsadeniePrvéhoRiadka(). Ak je
 potrebné požiadavku zrušiť, stačí zadať do parametra
 novéOdsadenie hodnotu null.
Parametre:
novéOdsadenie – nová požiadavka na zmenu odsadenia
     textov konzoly zľava
Pozri tiež:
odsadeniePrvéhoRiadka(), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
odsadeniePrvehoRiadka
public void odsadeniePrvehoRiadka(Integer novéOdsadenie)
 Alias pre odsadeniePrvéhoRiadka.
zmeňOdsadenieZľava
public Integer zmeňOdsadenieZľava()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) zľava. Hodnota požiadavky na zmenu odsadenia je
 platná vždy do najbližšieho použitia príkazov určených na vypísanie
 textu na vnútornú konzolu (napríklad vypíš
 alebo vypíšRiadok). V okamihu jej
 použitia sa hodnota aplikuje a spotrebuje. To, že sa spotrebuje
 hodnota požiadavky na zmenu znamená, že už nebude
 zistiteľná (merateľná) touto metódou, samotné odsadenie však
 zostáva aktívne pre všetky ďalšie výpisy textov na konzolu. Ak
 nie je aktívna žiadna požiadavka na zmenu odsadenia, tak
 táto metóda vráti hodnotu null.
Návratová hodnota:
aktuálna hodnota požiadavky na zmenu odsadenia textov
     plátna zľava alebo null
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
zmenOdsadenieZlava
public Integer zmenOdsadenieZlava()
 Alias pre zmeňOdsadenieZľava.
zmeňOdsadenieZľava
public void zmeňOdsadenieZľava(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 zľava. Platí to isté ako je uvedené v opise metódy
 zmeňOdsadenieZľava(). Ak je
 potrebné požiadavku zrušiť, stačí zadať do parametra
 novéOdsadenie hodnotu null.
Parametre:
novéOdsadenie – nová požiadavka na zmenu odsadenia
     textov konzoly zľava
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
zmenOdsadenieZlava
public void zmenOdsadenieZlava(Integer novéOdsadenie)
 Alias pre zmeňOdsadenieZľava.
zmeňOdsadenieSprava
public Integer zmeňOdsadenieSprava()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) sprava. Hodnota požiadavky na zmenu odsadenia je
 platná vždy do najbližšieho použitia príkazov určených na vypísanie
 textu na vnútornú konzolu (napríklad vypíš
 alebo vypíšRiadok). V okamihu jej
 použitia sa hodnota aplikuje a spotrebuje. To, že sa spotrebuje
 hodnota požiadavky na zmenu znamená, že už nebude
 zistiteľná (merateľná) touto metódou, samotné odsadenie však
 zostáva aktívne pre všetky ďalšie výpisy textov na konzolu. Ak
 nie je aktívna žiadna požiadavka na zmenu odsadenia, tak
 táto metóda vráti hodnotu null.
Návratová hodnota:
aktuálna hodnota požiadavky na zmenu odsadenia textov
     plátna sprava alebo null
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
zmenOdsadenieSprava
public Integer zmenOdsadenieSprava()
 Alias pre zmeňOdsadenieSprava.
zmeňOdsadenieSprava
public void zmeňOdsadenieSprava(Integer novéOdsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 sprava. Platí to isté ako je uvedené v opise metódy
 zmeňOdsadenieSprava(). Ak je
 potrebné požiadavku zrušiť, stačí zadať do parametra
 novéOdsadenie hodnotu null.
Parametre:
novéOdsadenie – nová požiadavka na zmenu odsadenia
     textov konzoly sprava
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
zmenOdsadenieSprava
public void zmenOdsadenieSprava(Integer novéOdsadenie)
 Alias pre zmeňOdsadenieSprava.
virtuálnyTabulátor
public Integer virtuálnyTabulátor()
 Zistí (dočasnú) hodnotu požiadavky na
 zmenu odsadenia konzolových textov plátna (podlahy alebo
 stropu) s pomocou virtuálneho tabulátora. Ak nie je aktívna žiadna
 požiadavka na zmenu odsadenia, tak táto metóda vráti hodnotu
 null.
 
 Virtuálny tabulátor nie je v texte konzoly nijako reprezentovaný,
 preto ani nebude skopírovaný do schránky v prípade kopírovania
 textov konzoly do schránky. Ide o vnútorný príkaz, ktorý upraví
 pozíciu najbližšieho výpisu textu konzoly podľa požadovanej
 hodnoty.
 
 Hodnota požiadavky na zmenu odsadenia tabulátorom je
 platná vždy do najbližšieho použitia príkazov určených na vypísanie
 textu na vnútornú konzolu (napríklad vypíš
 alebo vypíšRiadok). V okamihu jej
 použitia sa hodnota aplikuje a spotrebuje. To, že sa spotrebuje
 hodnota požiadavky na zmenu znamená, že už nebude
 zistiteľná (merateľná) touto metódou, samotné odsadenie však
 bude použité na tomto mieste pri výpise textov konzoly.
Návratová hodnota:
aktuálna hodnota požiadavky na zmenu odsadenia textov
     plátna s pomocou virtuálneho tabulátora alebo null
Pozri tiež:
virtuálnyTabulátor(Integer), 
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
virtualnyTabulator
public Integer virtualnyTabulator()
 Alias pre virtuálnyTabulátor.
virtuálnyTabulátor
public void virtuálnyTabulátor(Integer odsadenie)
 Nastaví novú (dočasnú) hodnotu požiadavky
 na zmenu odsadenia konzolových textov plátna (podlahy alebo stropu)
 s pomocou virtuálneho tabulátora.
 
 Platí to isté ako je uvedené v opise metódy
 virtuálnyTabulátor(). Ak je
 potrebné požiadavku zrušiť, stačí zadať do parametra
 odsadenie hodnotu null.
Parametre:
odsadenie – nová požiadavka na zmenu odsadenia
     textov konzoly s pomocou virtuálneho tabulátora
Pozri tiež:
virtuálnyTabulátor(), 
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
zamrazOdsadenie(), 
zamrazOdsadenie(boolean)
virtualnyTabulator
public void virtualnyTabulator(Integer odsadenie)
 Alias pre virtuálnyTabulátor.
zamrazOdsadenie
public boolean zamrazOdsadenie()
 Zistí či bola zadaná požiadavka na
 nastavenie („zamrazenie“) ľavého odsadenia konzolových textov
 plátna (podlahy alebo stropu) na aktuálnej pozícii. Táto
 požiadavka sa pri najbližšom použití príkazov určených na
 vypísanie textu na vnútornú konzolu (napríklad
 vypíš alebo vypíšRiadok) zapamätá a zresetuje. Použije sa v čase
 vykresľovania textov nad plátnom. Nastavenie sa použije tak, ako
 keby sme v čase vykresľovania textov zavolali metódu
 zmeňOdsadenieZľava(Integer)
 s hodnotou aktuálnej horizontálnej pozície miesta výpisu na
 konzole (x-ovú súradnicu, pričom túto hodnotu vopred nie je možné
 zistiť, pretože je dynamicky sa meniaca a v čase vykreslenia
 textov môže byť prakticky ľubovoľná).
Návratová hodnota:
true ak je tento druh požiadavky aktívny, inak
     false
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie(boolean)
zmrazOdsadenie
public boolean zmrazOdsadenie()
 Alias pre zamrazOdsadenie.
zamrazOdsadenie
public void zamrazOdsadenie(boolean zamraziť)
 Nastaví špeciálnu požiadavku na
 nastavenie („zamrazenie“) ľavého odsadenia konzolových textov
 plátna (podlahy alebo stropu) na aktuálnej pozícii textu. Platí
 to isté ako je uvedené v opise metódy zamrazOdsadenie().
Parametre:
zamraziť – true ak má byť táto požiadavka
     aktivovaná, inak false
Pozri tiež:
odsadeniePrvéhoRiadka(), 
odsadeniePrvéhoRiadka(Integer), 
zmeňOdsadenieZľava(), 
zmeňOdsadenieZľava(Integer), 
zmeňOdsadenieSprava(), 
zmeňOdsadenieSprava(Integer), 
virtuálnyTabulátor(), 
virtuálnyTabulátor(Integer), 
zamrazOdsadenie()
zmrazOdsadenie
public void zmrazOdsadenie(boolean zamraziť)
 Alias pre zamrazOdsadenie.
nastavOkrajeKonzoly
public void nastavOkrajeKonzoly(int ľavýOkraj,
                                int hornýOkraj,
                                int pravýOkraj,
                                int dolnýOkraj)
Nastaví okraje konzoly, ktoré obmedzia výpisy vnútornej konzoly na
 nimi vymedzenú oblasť.
Parametre:
ľavýOkraj – hodnota ľavého okraja oblasti textov konzoly
hornýOkraj – hodnota horného okraja oblasti textov konzoly
pravýOkraj – hodnota praho okraja oblasti textov konzoly
dolnýOkraj – hodnota dolného okraja oblasti textov konzoly
Pozri tiež:
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
zistiOkrajeKonzoly
public int[] zistiOkrajeKonzoly()
Vráti okraje konzoly v poli celočíselných hodnôt. Prvý prvok poľa
 určuje ľavý okraj, druhý horný, tretí pravý a posledný dolný.
Návratová hodnota:
pole celočíselných hodnôt
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
automatickéZobrazovanieLíšt
public void automatickéZobrazovanieLíšt(boolean zapnúť)
Zapne alebo vypne automatické zobrazovanie líšt vzťahujúcich sa
 k rolovaniu textov vnútornej konzoly. Automatické zobrazovanie
 znamená, že zvislá alebo vodorovná lišta bude zobrazená v prípade,
 že objem textov vnútornej konzoly presiahne rozsah, ktorý môže byť
 zobrazený bez rolovania. Volanie metódy
 zobrazLištyKonzoly
 zruší automatické zobrazovanie líšt.
Parametre:
zapnúť – hodnota true zanamená, že automatické
     zobrazovanie líšt má byť zapnuté a hodnota false
     znamená opak
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
automatickeZobrazovanieList
public void automatickeZobrazovanieList(boolean zapnúť)
 Alias pre automatickéZobrazovanieLíšt.
automatickéZobrazovanieLíšt
public boolean automatickéZobrazovanieLíšt()
Zistí, či je zapnuté automatické zobrazovanie líšt vnútornej konzoly.
Návratová hodnota:
true ak je automatické zobrazovanie líšt zapnuté,
     inak false
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
automatickeZobrazovanieList
public boolean automatickeZobrazovanieList()
 Alias pre automatickéZobrazovanieLíšt.
zobrazLištyKonzoly
public void zobrazLištyKonzoly(boolean zvislá,
                               boolean vodorovná)
Jednotlivo zobrazí alebo skryje posuvné lišty previazané
 s výpismi vnútornej konzoly. Táto akcia zruší prípadné automatické
 zobrazovanie líšt. (Pozri metódu
 automatickéZobrazovanieLíšt.)
Parametre:
zvislá – určuje, či má byť zobrazená zvislá lišta
vodorovná – určuje, či má byť zobrazená vodorovná lišta
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
zobrazListyKonzoly
public void zobrazListyKonzoly(boolean zvislá,
                               boolean vodorovná)
 Alias pre zobrazLištyKonzoly.
zistiZobrazenieLíštKonzoly
public boolean[] zistiZobrazenieLíštKonzoly()
Overí viditeľnosť líšt konzoly a vráti údaje o ich viditeľnosti
 v poli booleovských hodnôt. Prvý prvok poľa sa vzťahuje na zvislú
 lištu a druhý na vodorovnú.
Návratová hodnota:
pole celočíselných hodnôt
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
dajLištyKonzoly(), 
dajRohLíštKonzoly()
zistiZobrazenieListKonzoly
public boolean[] zistiZobrazenieListKonzoly()
 Alias pre zistiZobrazenieLíštKonzoly.
dajLištyKonzoly
public RolovaciaLišta[] dajLištyKonzoly()
Vráti pole, ktoré obsahuje buď inštancie rolovacích líšt konzoly
 (ak boli použité), alebo hodnoty null (pre tú lištu,
 ktorá nebola nikdy zobrazená). Prvý prvok poľa sa vzťahuje na zvislú
 lištu a druhý na vodorovnú.
Návratová hodnota:
dvojprvkové pole, ktoré obsahuje buď inštancie typu
     RolovaciaLišta pre jednotlivé lišty,
     alebo hodnoty null
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajRohLíštKonzoly()
dajListyKonzoly
public RolovaciaLišta[] dajListyKonzoly()
 Alias pre dajLištyKonzoly.
dajRohLíštKonzoly
public Tlačidlo dajRohLíštKonzoly()
Ak nastala situácia, že boli zobrazené obe lišty konzoly, tak
 táto metóda vráti inštanciu tlačidla, ktoré je vizuálne upravené
 tak, aby reprezentovalo roh medzi lištami konzoly (v čase, keď
 boli alebo sú zobrazené obe naraz). Inak metóda vráti hodnotu
 null.
Návratová hodnota:
buď inštancia typu Tlačidlo alebo
     hodnota null
Pozri tiež:
nastavOkrajeKonzoly(int, int, int, int), 
zistiOkrajeKonzoly(), 
automatickéZobrazovanieLíšt(boolean), 
automatickéZobrazovanieLíšt(), 
zobrazLištyKonzoly(boolean, boolean), 
zistiZobrazenieLíštKonzoly(), 
dajLištyKonzoly()
dajRohListKonzoly
public Tlačidlo dajRohListKonzoly()
 Alias pre dajRohLíštKonzoly.
priehľadnosť
public double priehľadnosť()
 Zistí aktuálnu úroveň (ne)priehľadnosti
 tohto plátna.
Definované:
priehľadnosť v rozhraní Priehľadnosť
Návratová hodnota:
aktuálna úroveň priehľadnosti tohto plátna
Pozri tiež:
priehľadnosť(double), 
upravPriehľadnosť(double), 
Svet.priehľadnosť(double, double), 
Svet.upravPriehľadnosť(double, double)
priehladnost
public double priehladnost()
 Alias pre priehľadnosť.
Definované:
priehladnost v rozhraní Priehľadnosť
priehľadnosť
public void priehľadnosť(double priehľadnosť)
 Nastaví novú úroveň (ne)priehľadnosti
 tohto plátna, pričom jednotlivé body plátna môžu mať svoju vlastnú
 úroveň priehľadnosti. Úroveň 0.0 znamená, že obsah plátna nebude
 zobrazený. Úroveň 1.0 znamená, že jednotlivé body plátna budú
 zobrazené s ich vlastnou úrovňou priehľadnosti – nepriehľadné body
 budú plne viditeľné. Úroveň priehľadnosti plátna nemá vplyv na
 uloženie obsahu plátna, iba na
 jeho zobrazenie a uloženie
 obsahu sveta (grafického obsahu).
Parametre:
priehľadnosť – nová úroveň priehľadnosti (0.0 – 1.0)
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double), 
Svet.priehľadnosť(double, double), 
Svet.upravPriehľadnosť(double, double)
priehladnost
public void priehladnost(double priehľadnosť)
 Alias pre priehľadnosť.
priehľadnosť
public void priehľadnosť(Priehľadnosť objekt)
Skopíruje úroveň (ne)priehľadnosti zo zadaného objektu.
Parametre:
objekt – objekt určujúci novú úroveň priehľadnosti
Pozri tiež:
priehľadnosť(), 
upravPriehľadnosť(double), 
Svet.priehľadnosť(double, double), 
Svet.upravPriehľadnosť(double, double)
priehladnost
public void priehladnost(Priehľadnosť objekt)
 Alias pre priehľadnosť.
upravPriehľadnosť
public void upravPriehľadnosť(double zmena)
Upraví úroveň (ne)priehľadnosti plátna. Pre viac informácií
 o priehľadnosti pozri priehľadnosť.
Parametre:
zmena – hodnota, ktorou bude násobená aktuálna hodnota
     priehľadnosti; príklady: 0.5 – priehľadnosť bude znížená
     o polovicu, 2.0 – úroveň priehľadnosti bude zdvojnásobená
Pozri tiež:
priehľadnosť(double), 
priehľadnosť(), 
Svet.priehľadnosť(double, double), 
Svet.upravPriehľadnosť(double, double)
upravPriehladnost
public void upravPriehladnost(double zmena)
 Alias pre upravPriehľadnosť.
obrázok
public BufferedImage obrázok()
Vráti objekt typu BufferedImage obsahujúci
 aktuálny obrázok tohto plátna. Niekedy by mohlo byť potrebné
 pracovať priamo s obrázkom plátna. Na priamy prístup k nemu slúži
 táto metóda.
 Vrátený objekt typu BufferedImage nemá
 prispôsobený súradnicový priestor potrebám prostredia rámca – pracuje
 v rovnakom súradnicovom systéme ako všetky grafické objekty Javy –
 začiatok súradnicového systému sa nachádza vľavo hore a y-ové
 súradnice sú zrkadlovo prevrátené, to znamená, že y-ová súradnica
 stúpa smerom nadol.
 (O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
Návratová hodnota:
objekt typu BufferedImage – obrázok
     plátna
Pozri tiež:
grafika()
obrazok
public BufferedImage obrazok()
 Alias pre obrázok.
grafika
public Graphics2D grafika()
Vráti objekt typu Graphics2D použiteľný na
 rozmanité kreslenie na plátno (napríklad v reakciách vymazanie alebo prekreslenie). Robot má dostatok
 nástrojov (metód) na kreslenie. Ak potrebujete priamy prístup ku
 grafickému objektu plátna (napríklad ak by ste chceli využívať
 metódy triedy Graphics2D), použite na prístup
 k nemu túto metódu. Grafický objekt pracuje so súradnicovým
 priestorom Javy, podobne ako je to spomenuté pri obrázku plátna.
Návratová hodnota:
objekt typu Graphics2D – grafika plátna
Pozri tiež:
obrázok()
kresliVšade
public void kresliVšade()
Zruší oblasť na obmedzenie kreslenia na toto plátno.
Pozri tiež:
GRobot.kresliVšade(), 
kresliDo(Shape), 
nekresliDo(Shape)
kresliVsade
public void kresliVsade()
 Alias pre kresliVšade.
kresliDo
public void kresliDo(Shape tvar)
Obmedzí kreslenie na toto plátno na plochu zadaného útvaru
 (Shape).
 
 Robot disponuje množinou metód na kreslenie tvarov (kružnica, elipsa, štvorec…), ktoré
 zároveň generujú tvary. Na ich použitie s touto metódou je dobré
 predtým kreslenie tvarov zakázať a neskôr opäť povoliť.
 Metóda text dokonca zákaz kreslenia
 tvarov požaduje, aby mohla vygenerovať tvar (bez zákazu má
 návratovú hodnotu null). Tvar je možné vytvoriť aj
 z cesty…
 
 Obmedzenie zužuje aktuálny priestor kreslenia, to znamená, že
 sa priebežne vytvára oblasť, ktorá je prienikom všetkých
 obmedzení. Ak chceme vytvoriť obmedzenie tvaru, ktorý je
 možné vytvoriť inou množinovou operáciou, môžeme na obmedzenie
 kreslenia použiť Oblasť (zadanú namiesto
 parametra tvar). Obmedzenia sú platné pre všetky
 roboty a zrušíme ich volaním metódy kresliVšade.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
GRobot.kresliDo(Shape), 
kresliVšade(), 
nekresliDo(Shape)
nekresliDo
public void nekresliDo(Shape tvar)
Vytvára obmedzenie kreslenia na toto plátno.
 Funguje rovnako ako metóda kresliDo, ibaže obrátene – kreslenie je možné všade, okrem
 zadaného tvaru alebo oblasti.
 
 Rovnako ako pri metóde kresliDo, sa
 aj toto obmedzenie kombinuje s aktuálnymi obmedzeniami kreslenia
 a je platné pre všetky roboty. Všetky ombedzenia zrušíme
 volaním metódy kresliVšade.
 
 Poznámka: Pri takomto orezávaní nie
 je na všetkých platformách a/alebo implementáciách virtuálneho
 stroja Javy dostupná funkcia anti-aliasingu, čo zjednodušene
 povedané znamená, že okraje orezanej kresby budú „zúbkaté.“
 Ak sa chcete tejto nedokonalosti vyhnúť, použite radšej funkciu
 masky. Tá dovoľuje ovplyvňovať
 úroveň priehľadnosti s jemnosťou na jednotlivé body rastra.
Parametre:
tvar – tvar (Shape) alebo Oblasť
Pozri tiež:
GRobot.nekresliDo(Shape), 
kresliDo(Shape), 
kresliVšade()
zalamujeTexty
public boolean zalamujeTexty()
 Zistí stav/hodnotu vlastnosti zalamovania
 textov vnútornej konzoly tohto plátna. Vlastnosť ovplyvňuje
 správanie metód vypíš a vypíšRiadok. Predvolene je (aspoň
 v súvislosti s plátnom ako takým) táto vlastnosť vypnutá.
Návratová hodnota:
true ak sú texty presahujúce pravý okraj okna
     automaticky zalamované; false v opačnom prípade
zalamujTexty
public void zalamujTexty(boolean zalamuj)
 Nastaví vlastnosť zalamovania textov
 vnútornej konzoly tohto plátna podľa zadanej hodnoty parametra.
 Vlastnosť ovplyvňuje správanie metód vypíš
 a vypíšRiadok. Predvolene je (aspoň
 v súvislosti s plátnom ako takým) táto vlastnosť vypnutá.
Parametre:
zalamuj – true ak chceme, aby boli texty
     presahujúce pravý okraj okna automaticky zalomené; false v opačnom prípade
zalamujTexty
public void zalamujTexty()
Zapne zalamovanie textov vnútornej konzoly tohto plátna. Má
 rovnaký efekt ako keby sme volali metódu zalamujTexty(true).
nezalamujTexty
public void nezalamujTexty()
Vypne zalamovanie textov vnútornej konzoly tohto plátna. Má
 rovnaký efekt ako keby sme volali metódu zalamujTexty(false).
výškaRiadka
public int výškaRiadka()
Zistí výšku riadka vnútornej konzoly pri použití aktuálneho
 typu písma. Ak metóda z nejakého dôvodu nedokáže získať použiteľný
 kontext grafiky, tak vráti nulu – 0.
Návratová hodnota:
výška riadka pri použití aktuálneho písma
vyskaRiadka
public int vyskaRiadka()
 Alias pre výškaRiadka.
šírkaReťazca
public int šírkaReťazca(String reťazec)
Zistí šírku zadaného reťazca v bodoch pri použití aktuálneho
 typu písma vnútornej konzoly. Ak metóda z nejakého dôvodu nedokáže
 získať použiteľný kontext grafiky, tak vráti nulu – 0.
Parametre:
reťazec – reťazec, ktorého šírka má byť vrátená
Návratová hodnota:
šírka zadaného reťazca v bodoch pri použití aktuálneho
     písma konzoly
sirkaRetazca
public int sirkaRetazca(String reťazec)
 Alias pre šírkaReťazca.
šírkaMedzery
public int šírkaMedzery()
Zistí šírku medzery vnútornej konzoly pri použití aktuálneho typu
 písma. Ak metóda z nejakého dôvodu nedokáže získať použiteľný
 kontext grafiky, tak vráti nulu – 0.
Návratová hodnota:
šírka medzery pri použití aktuálneho písma
sirkaMedzery
public int sirkaMedzery()
 Alias pre šírkaMedzery.
najväčšiaŠírkaZnaku
public int najväčšiaŠírkaZnaku()
Zistí najväčšiu šírku znaku vnútornej konzoly pri použití
 aktuálneho typu písma. Ak metóda z nejakého dôvodu nedokáže získať
 použiteľný kontext grafiky, tak vráti nulu – 0.
Návratová hodnota:
najväčšia šírka znaku pri použití aktuálneho písma
najvacsiaSirkaZnaku
public int najvacsiaSirkaZnaku()
 Alias pre najväčšiaŠírkaZnaku.
vypíšAktívneSlovo
public void vypíšAktívneSlovo(String identifikátor,
                              Object... argumenty)
Vypíše sériu argumentov v tvare textu na plátne (podlahe alebo
 strope) ako aktívne slová identifikované zadaným identifikátorom.
 Ak je zoznam argumentov prázdny, vypíše sa namiesto nich zadaný
 identifikátor. (To znamená, že nie je povolené, ani odporúčané
 vypísať „prázdne aktívne slovo.“) V rôznych aspektoch výpisu textov
 na vnútornú konzolu funguje táto metóda podobne ako metóda
 vypíš – platia pre ňu v podstate rovnaké
 pravidlá. Rozdiel je v tom, že výpis vykonaný touto metódou bude
 považovaný za takzvané aktívne slovo (resp. slová). Farbu
 textu v oblasti aktívneho slova je možné ovplyvňovať prostrednícvom
 reakcie farbaAktívnehoSlova. To, či sa určitý bod nachádza v niektorej
 z oblastí aktívnych slov je možné overiť napríklad metódou
 bodVAktívnomSlove
 (s variantom na overenie polohy myši v niektorom slove: myšVAktívnomSlove).
 S pomocou aktívnych slov je možné naprogramovať podobné správanie
 aké majú hypertextové odkazy webových stránok.
 
 Príklad:
 
 Tento príklad ukazuje najjednoduchší spôsob vytvorenia webového
 odkazu priamo v rámci textov konzoly. (Je to len jedna z možností
 využitia aktívneho slova.) Prejdením myšou nad odkaz sa zmení jeho
 farba a kurzor myši. Kliknutím na odkaz sa otvorí zadaná webová
 adresa (pozri v rámci príkladu).
 
 
import knižnica.*;
public class OtvorWebovýOdkaz extends GRobot
{
    private OtvorWebovýOdkaz()
    {
        // Rozmer plátna = rozmer nultého zariadenia (obrazovky).
        super(Svet.šírkaZariadenia(), Svet.výškaZariadenia());
        // Skrytie hlavného robota:
        skry();
        // Vypnutie automatického prekresľovania:
        Svet.nekresli();
        // Aktivovanie rozširujúcich funkcií konzoly stropu (v tomto
        // príklade je to zbytočné, ale keby sme potrebovali vkladať
        // viac textov, zišlo by sa to).
        Svet.skratkyStropu(true);
        strop.automatickéZobrazovanieLíšt(true);
        // Vloženie textov konzoly (vrátane aktívneho „slova“ – to môže
        // byť aj viac slov, ktoré bude fungovať ako webový odkaz):
        Svet.farbaTextu(čierna);
        Svet.vypíš("Toto: ");
        Svet.farbaTextu(atramentová);
        Svet.vypíšAktívneSlovo("https://pdf.truni.sk/", "je webový odkaz.");
        Svet.farbaTextu(čierna);
        Svet.vypíšRiadok(" Kliknutím na neho otvoríte stránku " +
            "Pedagogickej fakulty TU.");
        // Spustenie časovača, v ktorom bude zabezpečené prekresľovanie
        // plátna podľa potreby:
        Svet.spustiČasovač();
    }
    
    // V reakcii na tik je prekresľované plátno v prípade potreby:
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    
    // Ďalšie reakcie, ktorými je oživené fungovanie odkazu:
    @Override public void pohybMyši()
    {
        String aktívneSlovo = Svet.myšVAktívnomSlove();
        if (null == aktívneSlovo)
            Svet.zmeňKurzorMyši("predvolený");
        else
            Svet.zmeňKurzorMyši("ruka");
        Svet.žiadajPrekreslenie();
    }
    @Override public void klik()
    {
        String aktívneSlovo = Svet.myšVAktívnomSlove();
        if (null != aktívneSlovo)
        {
            String URL = aktívneSlovo;
            // (prípadné spracovanie)
            Svet.otvorWebovýOdkaz(URL);
        }
    }
    @Override public java.awt.Color farbaAktívnehoSlova(String slovo)
    {
        String aktívneSlovo = Svet.myšVAktívnomSlove();
        if (slovo.equals(aktívneSlovo)) return tmavoakvamarínová;
        return null;
    }
    
    // (Hlavná metóda – vstupný bod programu.)
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("OtvorWebovýOdkaz.cfg");
        new OtvorWebovýOdkaz();
    }
}
 
 Výsledok:
 
 
 Ukážka výsledného okna.
Parametre:
identifikátor – identifikátor aktívneho slova, s pomocou
     ktorého bude toto slovo odlišované od ostatných aktívnych slov
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami (ako pri metóde vypíš)
Pozri tiež:
vypíš(Object...), 
bodVAktívnomSlove(double, double), 
myšVAktívnomSlove(), 
ObsluhaUdalostí.farbaAktívnehoSlova(String)
vypisAktivneSlovo
public void vypisAktivneSlovo(String identifikátor,
                              Object... argumenty)
 Alias pre vypíšAktívneSlovo.
vypíšAktívneSlová
public void vypíšAktívneSlová(String identifikátor,
                              Object... argumenty)
 Alias pre vypíšAktívneSlovo.
vypisAktivneSlova
public void vypisAktivneSlova(String identifikátor,
                              Object... argumenty)
 Alias pre vypíšAktívneSlovo.
bodVAktívnomSlove
public String bodVAktívnomSlove(double x,
                                double y)
Overí, či sa bod identifikovaný zadanými súradnicami nachádza
 v oblasti niektorého z aktívnych slov. (Pozri metódu vypíšAktívneSlovo.) Ak je
 na zadaných súradniciach nájdené aktívne slovo, tak je návratovou
 hodnotou tejto metódy jeho identifikátor, inak je vrátená
 hodnota null.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza bod
     so zadanými súradnicami alebo null
bodVAktivnomSlove
public String bodVAktivnomSlove(double x,
                                double y)
 Alias pre bodVAktívnomSlove.
bodVAktívnomSlove
public String bodVAktívnomSlove(Poloha poloha)
Funguje rovnako ako metóda bodVAktívnomSlove, ale namiesto súradníc bodu je zadaný
 objekt, ktorý je implementáciou rozhrania Poloha.
Parametre:
poloha – poloha vyšetrovaného bodu zadaná prostredníctvom
     objektu implementujúceho rozhranie Poloha.
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza bod
     so zadanými súradnicami alebo null
bodVAktivnomSlove
public String bodVAktivnomSlove(Poloha poloha)
 Alias pre bodVAktívnomSlove.
myšVAktívnomSlove
public String myšVAktívnomSlove()
Overí, či sa súradnice kurzora myši nachádzajú v oblasti niektorého
 z aktívnych slov. (Pozri metódu vypíšAktívneSlovo.) Ak je na súradniciach myši nájdené
 aktívne slovo, tak je návratovou hodnotou tejto metódy jeho
 identifikátor, inak je vrátená hodnota null.
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza
     kurzor myši alebo null
mysVAktivnomSlove
public String mysVAktivnomSlove()
 Alias pre myšVAktívnomSlove.
výpisNaBode
public int[] výpisNaBode(double x,
                         double y)
Zistí, či sa súradnice zadaného bodu nachádzajú v niektorom
 z blokov výpisov vnútornej konzoly tohto plátna. Ak áno, tak
 metóda vráti dvojprvkové celočíselné pole, ktorého prvý prvok
 bude určovať index riadka výpisu a druhý index bloku výpisu.
 Ak sa nenájde zhoda so žiadnym výpisom, tak metóda vráti
 hodnotu null.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
dvojprvkové pole s indexami výpisu alebo null
vypisNaBode
public int[] vypisNaBode(double x,
                         double y)
 Alias pre výpisNaBode.
výpisNaBode
public int[] výpisNaBode(Poloha bod)
Zistí, či sa súradnice zadaného bodu nachádzajú v niektorom
 z blokov výpisov vnútornej konzoly tohto plátna. Ak áno, tak
 metóda vráti dvojprvkové celočíselné pole, ktorého prvý prvok
 bude určovať index riadka výpisu a druhý index bloku výpisu.
 Ak sa nenájde zhoda so žiadnym výpisom, tak metóda vráti
 hodnotu null.
Parametre:
bod – poloha vyšetrovaného bodu
Návratová hodnota:
dvojprvkové pole s indexami výpisu alebo null
vypisNaBode
public int[] vypisNaBode(Poloha bod)
 Alias pre výpisNaBode.
výpisNaMyši
public int[] výpisNaMyši()
Zistí, či sa súradnice myši nachádzajú v niektorom z blokov
 výpisov vnútornej konzoly tohto plátna. Ak áno, tak metóda
 vráti dvojprvkové celočíselné pole, ktorého prvý prvok bude
 určovať index riadka výpisu a druhý index bloku výpisu.
 Ak sa nenájde zhoda so žiadnym výpisom, tak metóda vráti
 hodnotu null.
Návratová hodnota:
dvojprvkové pole s indexami výpisu alebo null
vypisNaMysi
public int[] vypisNaMysi()
 Alias pre výpisNaMyši.
výpisPriBode
public int[] výpisPriBode(double x,
                          double y)
Nájde indexy najbližšieho bloku konzoly k zadaným súradniciam
 bodu. Metóda vráti indexy vo forme dvojprvkového celočíselného
 poľa – prvý prvok bude určovať index riadka a druhý index bloku
 výpisu. V prípade zlyhania vráti metóda hodnotu null.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
dvojprvkové pole s indexami výpisu (prípadne
     null)
vypisPriBode
public int[] vypisPriBode(double x,
                          double y)
 Alias pre výpisPriBode.
výpisPriBode
public int[] výpisPriBode(Poloha bod)
Nájde indexy najbližšieho bloku konzoly k súradniciam zadaného
 bodu. Metóda vráti indexy vo forme dvojprvkového celočíselného
 poľa – prvý prvok bude určovať index riadka a druhý index bloku
 výpisu. V prípade zlyhania vráti metóda hodnotu null.
Parametre:
bod – poloha vyšetrovaného bodu
Návratová hodnota:
dvojprvkové pole s indexami výpisu
     (prípadne null)
vypisPriBode
public int[] vypisPriBode(Poloha bod)
 Alias pre výpisPriBode.
výpisPriMyši
public int[] výpisPriMyši()
Nájde indexy najbližšieho bloku konzoly k aktuálnym súradniciam
 myši. Metóda vráti indexy vo forme dvojprvkového celočíselného
 poľa – prvý prvok bude určovať index riadka a druhý index bloku
 výpisu. V prípade zlyhania vráti metóda hodnotu null.
Návratová hodnota:
dvojprvkové pole s indexami výpisu (prípadne null)
vypisPriMysi
public int[] vypisPriMysi()
 Alias pre výpisPriMyši.
vypíš
public void vypíš(Object... argumenty)
Vypíše sériu argumentov v tvare textu na plátne (podlahe alebo
 strope). Texty sú vypísané aktuálnou farbou textov plátna (predvolene
 tmavomodrá) a aktuálnym písmom
 plátna. Ak je nastavená farba pozadia textov, tak je
 podklad písma zafarbený na túto farbu. Predvolene nie je nastavená
 žiadna farba pozadia textov. Texty plátna (ako takého) nie sú
 automaticky zalamované, to znamená, že ak je text na riadku príliš
 dlhý, presiahne pravý okraj plátna. Toto správanie je možné zmeniť
 metódou zalamujTexty. Avšak počas
 inicializácie hlavného robota je
 automaticky zapnuté zalamovanie textov stropu, takže pri bežnom
 používaní programovacieho rámca GRobot (čiže ak nie je používaná
 konzola podlahy, ale len stropu) netreba s uvedenou vlastnosťou
 manipulovať.
 
 Ak oddeľujeme sériu argumentov čiarkami, metóda automaticky
 dopĺňa medzi jednotlivé argumenty medzery podľa zaužívaných
 pravidiel typografie. To znamená, že metóda rešpektuje znaky pred
 ktoré sa medzera nepridáva (ako ,  
 :   ?   .   )
 a podobne) a za ktoré sa nepridáva (znaky ako (  
 „   " a podobne). Toto správanie
 platí len v rámci jedného volania metódy (argumenty musia byť
 oddelené čiarkami). Dve (alebo viaceré) samostatné volania metódy
 idúce za sebou:
 
 
podlaha.vypíš("Tu, za dvojbodkou:");
podlaha.vypíš("sa medzera neobjaví…");
 žiadne automatické medzery nepridávajú.
 
 Výstup:
 
 Tu, za dvojbodkou:sa medzera neobjaví…
 
 Nasledujúce výpisy sú (takmer) ekvivalentné:
 
 
int a = 10;  // pre potreby ukážky
podlaha.vypíš("Hodnota:", a, riadok);
podlaha.vypíšRiadok("Hodnota:", a);
podlaha.vypíšRiadok("Hodnota: " + a);
 
 Výstup:
 
 
Hodnota: 10
Hodnota: 10
Hodnota: 10
 
 V prípade, že chceme úplne zabrániť automatickému pridávaniu
 medzier (neodporúčame), použijeme namiesto oddeľovania argumentov
 čiarkami operátor zlučovania reťazcov + (posledný riadok
 vo vyššie uvedenom príklade). Avšak použitie tohto operátora
 spôsobí, že číselné hodnoty budú formátované s použitím systémových
 pravidiel. Zmeniť to je možné formátovaním číselnej hodnoty
 inštanciou Svet.formát:
 Svet.formát.format(10.3) + …
 
 Ak sú číselné hodnoty zadávané ako samostatné argumenty (t. j.
 sú oddelené čiarkami), tak sú naformátované automaticky. Znak
 použitý na oddelenie desatinných miest naformátovaných čísiel je
 možné zmeniť volaním metódy oddeľovačDesatinnejČasti.
 Použitie znaku na oddelenie tisícov je možné upraviť (vypnúť,
 zmeniť) volaním metódy oddeľovačTisícov. Ak je argumentom tejto metódy (vypíš)
 jednorozmerné pole číselného (alebo logického) údajového typu, tak
 metóda vypíše jeho obsah, pričom na oddelenie prvkov použije
 oddeľovač, ktorý je možné upraviť volaním metódy oddeľovačPrvkovPoľa.
 
 Poznámka:
 Prvý výpis (prvé spustenie ľubovoľného príkazu výpisu na konzolu)
 vždy automaticky skryje hlavný
 robot. Dôvodom je úsilie o automatické odlíšenie konzolovo
 orientovaných úloh od graficky orientovaných úloh. (Je malá šanca,
 že bude úloha orientovaná tak, aby vyžadovala ponechanie
 zobrazeného hlavného robota
 a zároveň pracovala s konzolovými výpismi.) Toto správanie je
 v prípade potreby možné zmeniť – automatickému skrytiu
 hlavného robota sa dá zamedziť
 jeho „poslatím“ do úplne prvého výpisu vnútornej konzoly –
 napríklad podlaha.vypíš(Svet.Svet.hlavnýRobot()); (samozrejme, že
 v konštruktore hlavného robota
 môžeme namiesto príkazu Svet.hlavnýRobot
 s výhodou použiť hodnotu this).
 
 Konzola spracúva aj znaky spätného vymazania znaku (angl.
 backspace, ASCII 8, úniková (escape) sekvencia "\b"). Funkciou tohto riadiaceho znaku je vymazanie
 predchádzajúceho znaku. Vo vnútornej konzole je tento riadiaci
 kód spracúvaný najviac v rámci šírky jedného riadka konzoly.
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
vypíšAktívneSlovo(String, Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
predvolenáFarbaTextu(), 
farbaPozadiaTextu(Color), 
predvolenáFarbaPozadiaTextu(), 
písmo(Font), 
predvolenéPísmo(), 
vymaž(), 
vymažTexty(), 
GRobot.text(String), 
Svet.formát, 
Svet.F(double, int), 
Svet.oddeľovačDesatinnejČasti(char), 
Svet.oddeľovačTisícov(Character), 
Svet.oddeľovačPrvkovPoľa(String)
vypis
public void vypis(Object... argumenty)
 Alias pre vypíš.
vypíšRiadok
public void vypíšRiadok(Object... argumenty)
Vypíše sériu argumentov v tvare textu na podlahe alebo strope
 a presunie sa na ďalší riadok. Ďalšie informácie pozri v opise
 metódy vypíš(Object...), ktorej správanie
 je, okrem prechodu na nový riadok, zhodné.
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
vypíš(Object...), 
farbaTextu(Color), 
predvolenáFarbaTextu(), 
farbaPozadiaTextu(Color), 
predvolenáFarbaPozadiaTextu(), 
písmo(Font), 
predvolenéPísmo(), 
vymaž(), 
vymažTexty(), 
GRobot.text(String), 
Svet.formát
vypisRiadok
public void vypisRiadok(Object... argumenty)
 Alias pre vypíšRiadok.
vypíšNa
public void vypíšNa(double x,
                    double y,
                    Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu. Funguje podobne ako metóda vypíš, ibaže pred výpisom nastaví súradnice
 polohy výpisu.
 
 Poznámka:
 Po použití tejto metódy nie je (až do najbližšieho
 vymazania) možné vykonávať
 rolovanie textov konzoly.
Parametre:
x – x-ová súradnica polohy výpisu
y – y-ová súradnica polohy výpisu
argumenty – zoznam argumentov rôzneho údajového typu oddelený
     čiarkami
vypisNa
public void vypisNa(double x,
                    double y,
                    Object... argumenty)
 Alias pre vypíšNa.
vypíšRiadokNa
public void vypíšRiadokNa(double x,
                          double y,
                          Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu a presunie sa na ďalší riadok. Funguje podobne
 ako metóda vypíšRiadok, ibaže pred
 výpisom nastaví súradnice polohy výpisu.
 
 Poznámka:
 Po použití tejto metódy nie je (až do najbližšieho
 vymazania) možné vykonávať
 rolovanie textov konzoly.
Parametre:
x – x-ová súradnica polohy výpisu
y – y-ová súradnica polohy výpisu
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
vypisRiadokNa
public void vypisRiadokNa(double x,
                          double y,
                          Object... argumenty)
 Alias pre vypíšRiadokNa.
píšNa
public void píšNa(double x,
                  double y,
                  Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu. Funguje podobne ako metóda vypíš, ibaže pred výpisom nastaví súradnice
 polohy výpisu.
 
 Poznámka:
 Po použití tejto metódy nie je (až do najbližšieho
 vymazania) možné vykonávať
 rolovanie textov konzoly.
Parametre:
x – x-ová súradnica polohy výpisu
y – y-ová súradnica polohy výpisu
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
pisNa
public void pisNa(double x,
                  double y,
                  Object... argumenty)
 Alias pre píšNa.
píšRiadokNa
public void píšRiadokNa(double x,
                        double y,
                        Object... argumenty)
Vypíše sériu argumentov v tvare textu na zadaných súradniciach
 podlahy alebo stropu a presunie sa na ďalší riadok. Funguje podobne
 ako metóda vypíšRiadok, ibaže pred
 výpisom nastaví súradnice polohy výpisu.
 
 Poznámka:
 Po použití tejto metódy nie je (až do najbližšieho
 vymazania) možné vykonávať
 rolovanie textov konzoly.
Parametre:
x – x-ová súradnica polohy výpisu
y – y-ová súradnica polohy výpisu
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
pisRiadokNa
public void pisRiadokNa(double x,
                        double y,
                        Object... argumenty)
 Alias pre píšRiadokNa.
textKonzoly
public String textKonzoly()
Vráti v reťazci všetky texty, ktoré sa nachádzajú aktuálne
 vypísané na vnútornej konzole tohto plátna.
Návratová hodnota:
textový obsah celej konzoly
textKonzoly
public String textKonzoly(boolean lenOznačený)
Vráti v reťazci všetky texty alebo všetky označené texty,
 ktoré sa nachádzajú aktuálne vypísané na vnútornej konzole
 tohto plátna v závislosti od hodnoty parametra
 lenOznačený.
Parametre:
lenOznačený – ak je hodnota tohto parametra true,
     tak metóda vráti len označené texty konzoly, inak sa správa
     rovnako ako metóda textKonzoly()
Návratová hodnota:
textový obsah celej konzoly alebo len jej označených častí
početRiadkov
public int početRiadkov()
Zistí aktuálny počet riadkov vypísaných vo vnútornej konzole
 tohto plátna.
Návratová hodnota:
počet riadkov konzoly
pocetRiadkov
public int pocetRiadkov()
 Alias pre početRiadkov.
textRiadka
public String textRiadka(int index)
Vráti textový obsah určeného riadka vypísaného v textovej
 konzole tohto plátna. Záporné hodnoty parametra určujú index
 od konca. Ak je index riadka mimo rozsahu, tak
 metóda vráti hodnotu null.
 
 Poznámka: Táto metóda (a jej podobné)
 sú vhodné na prevzatie jedného konkrétneho bloku textu. Na
 prevzatie série textov je vhodnejšie použiť označenie a prevziať
 označený text. (Pozrite príklad vo vnorenej triede Svet.PríkazovýRiadok.)
Parametre:
index – index riadka, ktorého obsah má byť prevzatý
Návratová hodnota:
obsah určeného riadka alebo null
textRiadka
public String textRiadka(int index,
                         boolean lenOznačený)
Vráti textový obsah určeného riadka vnútornej konzoly tohto plátna
 alebo len jeho označených častí – podľa hodnoty parametra
 lenOznačený. (Ak je hodnota uvedeného parametra rovná
 true, tak táto metóda vráti len označené časti riadka.)
 Ak je index riadka mimo rozsahu, tak metóda vráti hodnotu
 null. (Záporné hodnoty určujú index od konca.)
Parametre:
index – index riadka, ktorého obsah má byť prevzatý
lenOznačený – ak je hodnota tohto parametra true,
     tak metóda vráti len označené časti riadka, inak sa správa
     rovnako ako metóda textRiadka(index).
Návratová hodnota:
obsah určeného riadka alebo len jeho označených častí,
     podľa hodnoty parametra lenOznačený, prípadne hodnota
     null
vymažRiadok
public void vymažRiadok(int index)
Vymaže určený riadok z vnútornej konzoly tohto plátna.
 (Záporné hodnoty určujú index od konca.)
Parametre:
index – index riadka, ktorý má byť vymazaný
vymazRiadok
public void vymazRiadok(int index)
 Alias pre vymažRiadok.
vložRiadok
public void vložRiadok(int index,
                       Object... argumenty)
Vloží riadok určený zoznamom argumenty na pozíciu
 špecifikovanú číselným indexom – hodnota 0 vloží riadok
 na prvú pozíciu. Záporné hodnoty určujú index od konca.
 
 Upozornenie: Použitie tejto metódy
 nemusí v niektorých prípadoch priniesť očákávaný výsledok. Metóda
 neresetuje odsadenie takým spôsobom ako sa to deje pri štandardnom
 kontinuálnom vypisovaní textov a nenastavuje automaticky farebnosť
 textov konzoly, takže texty výpisu predvolene prevezmú farebnosť
 od textov umiestnených pred nimi, podobne môžu byť od
 predchádzajúcich textov prevzaté ďalšie vlastnosti výpisov.
Parametre:
index – pozícia, na ktorú má byť vložený zadaný výpis
argumenty – výpis, ktorý môže byť rozdelený do viacerých argumentov
vlozRiadok
public void vlozRiadok(int index,
                       Object... argumenty)
 Alias pre vložRiadok.
zálohujChvost
public Object zálohujChvost(int index)
Zálohuje textový obsah vnútornej konzoly tohto plátna od
 určeného indexu riadka vyššie (chvost). Zálohu uloží do
 vnútornej pamäte konzoly a zároveň ju vráti vo forme objektu.
 Vrátený objekt je použiteľný napríklad s metódou obnovTexty alebo pridajTexty(Object). (Záporné hodnoty
 určujú index riadka od konca. Podobne, ako to je pri ostatných
 metódach prijímajúcich index riadka.)
Parametre:
index – index, od ktorého má byť vykonaná záloha textov
Návratová hodnota:
záloha chvosta, ktorá je použiteľná s metódami
     obnovTexty,
     pridajTexty
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int, GRobot), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujChvost
public void zalohujChvost(int index)
 Alias pre zálohujChvost.
zálohujChvost
public void zálohujChvost(int index,
                          GRobot ktorý)
Zálohuje textový obsah vnútornej konzoly tohto plátna od
 určeného indexu riadka vyššie (chvost). Zálohu uloží do
 vnútornej pamäte zadaného robota, ktorý je po tejto akcii
 použiteľný s metódami obnovTexty
 a pridajTexty(Object). (Záporné
 hodnoty určujú index riadka od konca. Podobne, ako to je pri
 ostatných metódach prijímajúcich index riadka.)
Parametre:
index – index, od ktorého má byť vykonaná záloha textov
ktorý – inštancia robota, do ktorej sa záloha uloží; inštancia
     bude potom použiteľná s metódami
     obnovTexty,
     pridajTexty
Pozri tiež:
zálohujGrafiku(), 
zálohujGrafiku(GRobot), 
obnovGrafiku(), 
obnovGrafiku(Object), 
pridajGrafiku(GRobot), 
zálohujTexty(), 
zálohujTexty(GRobot), 
zálohujChvost(int), 
obnovTexty(), 
obnovTexty(Object), 
pridajTexty(Object)
zalohujChvost
public void zalohujChvost(int index,
                          GRobot ktorý)
 Alias pre zálohujChvost.
vymažChvost
public void vymažChvost(int index)
Vymaže obsah vnútornej konzoly tohto plátna od určeného indexu
 nižšie. (Záporné hodnoty určujú index od konca.)
Parametre:
index – index, od ktorého má byť obsah konzoly vymazaný
vymazChvost
public void vymazChvost(int index)
 Alias pre vymažChvost.
početVýpisov
public int početVýpisov(int riadok)
Vráti počet výpisov (blokov, ktoré boli vypísané v rámci jedného
 volania metód vypíš/vypíšRiadok) na určenom riadku.
 (Záporná hodnota parametra riadok určuje index riadka od
 konca – hodnota -1 určuje posledný riadok.)
Parametre:
riadok – index riadka, ktorého počet výpisov chceme zistiť
Návratová hodnota:
počet výpisov uložených v určneom riadku
pocetVypisov
public int pocetVypisov(int riadok)
 Alias pre početVýpisov.
textVýpisu
public String textVýpisu(int riadok,
                         int index)
Vráti text určeného výpisu (bloku, ktorý bol vypísaný v rámci jedného
 volania metód vypíš/vypíšRiadok) z určeného riadka.
 (Záporné hodnoty číselných parametrov určujú indexy od konca.)
 Ak zadané indexy nie sú platné, tak metóda vráti hodnotu
 null.
 
 Poznámka: Táto metóda (a jej podobné)
 sú vhodné na prevzatie jedného konkrétneho bloku textu. Na
 prevzatie série textov je vhodnejšie použiť označenie a prevziať
 označený text. (Pozrite príklad vo vnorenej triede Svet.PríkazovýRiadok.)
Parametre:
riadok – index riadka, z ktorého má byť prevzatý text
index – index výpisu v rámci riadka, ktorý má byť prevzatý
Návratová hodnota:
text určeného výpisu z určeného riadka alebo null
textVypisu
public String textVypisu(int riadok,
                         int index)
 Alias pre textVýpisu.
textVýpisu
public String textVýpisu(int riadok,
                         int index,
                         boolean lenOznačený)
Vráti text určeného výpisu (bloku, ktorý bol vypísaný v rámci
 jedného volania metód vypíš/vypíšRiadok) z určeného
 riadka. Ak je hodnota parametra lenOznačený rovná
 true, tak metóda vráti obsah výpisu len ak je označený
 a v prípade žiadosti o text neoznačeného výpisu vráti prázdny
 reťazec. Záporné hodnoty číselných parametrov určujú polohu
 riadka alebo výpisu od konca. Ak zadané indexy nie sú platné,
 tak metóda vráti hodnotu null.
Parametre:
riadok – index riadka, z ktorého má byť prevzatý text
index – index výpisu v rámci riadka, ktorý má byť prevzatý
lenOznačený – ak je hodnota tohto parametra true,
     tak metóda vráti obsah výpisu len ak je označený, v opačnom
     prípade vráti prázdny reťazec (""); ak je hodnota
     tohto parametra false, tak sa táto metóda správa
     rovnako ako metóda textVýpisu(riadok, index)
Návratová hodnota:
text určeného výpisu, prázdny reťazec ("")
     alebo hodnota null
textVypisu
public String textVypisu(int riadok,
                         int index,
                         boolean lenOznačený)
 Alias pre textVýpisu.
obrázok
public void obrázok(String súbor)
Nakreslí v strede plátna (podlahy alebo stropu) zadaný obrázok.
 
 Príklad:
 
 
podlaha.obrázok("parkety.png");
strop.obrázok("vzor.png");
 
 Zdroje:
 
 
  
parkety.png –
 obrázok parkiet na prevzatie.
  
vzor.png –
 obrázok vzoru na prevzatie.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je súbor poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(String súbor)
 Alias pre obrázok.
obrázok
public void obrázok(double x,
                    double y,
                    String súbor)
Nakreslí na zadaných súradniciach na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka. Táto metóda slúži na nakreslenie obrázka
 s čo najmenšou vnútornou komplikovanosťou (v súvislosti so
 spôsobom kreslenia). Napríklad kreslenie obrázkov so stredom na
 zadanej pozícii by vyžadovalo dodatočný výpočet. Ak chcete
 kresliť obrázky vystredené na zadanej pozícii, tak použite na
 nakreslenie niektorý robot. (To je najjednoduchší spôsob.)
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
x – x-ová súradnica polohy obrázka
y – y-ová súradnica polohy obrázka
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je súbor poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(double x,
                    double y,
                    String súbor)
 Alias pre obrázok.
obrázok
public void obrázok(Poloha objekt,
                    String súbor)
Nakreslí na súradniciach zadaného objektu na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka. Táto metóda slúži na nakreslenie obrázka
 s čo najmenšou vnútornou komplikovanosťou (v súvislosti so
 spôsobom kreslenia). Napríklad kreslenie obrázkov so stredom na
 zadanej pozícii by vyžadovalo dodatočný výpočet. Ak chcete
 kresliť obrázky vystredené na zadanej pozícii, tak použite na
 nakreslenie niektorý robot. (To je najjednoduchší spôsob.)
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
objekt – objekt určujúci polohu kreslenia obrázka
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je súbor poškodený alebo nebol
     nájdený
Pozri tiež:
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(Poloha objekt,
                    String súbor)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok)
Nakreslí v strede plátna (podlahy alebo stropu) zadaný obrázok.
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený
obrazok
public void obrazok(Image obrázok)
 Alias pre obrázok.
obrázok
public void obrázok(double x,
                    double y,
                    Image obrázok)
Nakreslí na zadaných súradniciach na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka. Táto metóda slúži na nakreslenie obrázka
 s čo najmenšou vnútornou komplikovanosťou (v súvislosti so
 spôsobom kreslenia). Napríklad kreslenie obrázkov so stredom na
 zadanej pozícii by vyžadovalo dodatočný výpočet. Ak chcete
 kresliť obrázky vystredené na zadanej pozícii, tak použite na
 nakreslenie niektorý robot. (To je najjednoduchší spôsob.)
Parametre:
x – x-ová súradnica polohy obrázka
y – y-ová súradnica polohy obrázka
obrázok – obrázok, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený
obrazok
public void obrazok(double x,
                    double y,
                    Image obrázok)
 Alias pre obrázok.
obrázok
public void obrázok(Poloha objekt,
                    Image obrázok)
Nakreslí na súradniciach zadaného objektu na plátne (podlahe alebo
 strope) obrázok, pričom na zadaných súradniciach sa bude nachádzať
 ľavý horný roh obrázka. Táto metóda slúži na nakreslenie obrázka
 s čo najmenšou vnútornou komplikovanosťou (v súvislosti so
 spôsobom kreslenia). Napríklad kreslenie obrázkov so stredom na
 zadanej pozícii by vyžadovalo dodatočný výpočet. Ak chcete
 kresliť obrázky vystredené na zadanej pozícii, tak použite na
 nakreslenie niektorý robot. (To je najjednoduchší spôsob.)
Parametre:
objekt – objekt určujúci polohu kreslenia obrázka
obrázok – obrázok, ktorý má byť vykreslený
Výnimky:
GRobotException – ak je obrázok poškodený
obrazok
public void obrazok(Poloha objekt,
                    Image obrázok)
 Alias pre obrázok.
uložObrázok
public void uložObrázok(String súbor)
Uloží aktuálnu kresbu na plátne (podlahe alebo strope) do súboru
 s obrázkom. Prípona súboru musí byť .gif, .png
 alebo .jpg (resp. .jpeg). Ak súbor jestvuje, tak
 vznikne výnimka oznamujúca, že súbor so zadaným menom už jestvuje.
 Ak chcete súbor prepísať, použite metódu uložObrázok(String, boolean) s druhým parametrom rovným true.
Parametre:
súbor – názov súboru s požadovanou príponou
Výnimky:
GRobotException – ak súbor jestvuje alebo bol zadaný
     názov súboru s neplatnou príponou
ulozObrazok
public void ulozObrazok(String súbor)
 Alias pre uložObrázok.
uložObrázok
public void uložObrázok(String súbor,
                        boolean prepísať)
Uloží aktuálnu kresbu na plátne (podlahe alebo strope) do súboru
 s obrázkom. Prípona súboru musí byť .gif, .png
 alebo .jpg (resp. .jpeg).
Parametre:
súbor – názov súboru s požadovanou príponou
prepísať – ak je true, prípadný jestvujúci
     súbor bude prepísaný, inak sa správa rovnako ako metóda
     uložObrázok(String)
Výnimky:
GRobotException – ak súbor jestvuje a parameter prepísať
     je false alebo ak bol zadaný názov súboru
     s neplatnou príponou
ulozObrazok
public void ulozObrazok(String súbor,
                        boolean prepísať)
 Alias pre uložObrázok.
vymaž
public void vymaž()
Vymaže obsah plátna (podlahy alebo stropu), aby bola viditeľná
 len farba pozadia sveta. Metóda zároveň vymaže všetky texty
 vnútornej konzoly podlahy, resp. stropu (napísané napríklad
 prostredníctvom metód vypíš,
 vypíšRiadok). Vymazanie grafiky
 má za následok vznik udalosti vymazanie, v rámci ktorej je možné získať práve vymazané plátno
 metódou ÚdajeUdalostí.vymazanéPlátno().
 
 Poznámka: Metóda berie do úvahy použitie
 metód nekresli a kresli. Čiže ak je automatické prekresľovanie vypnuté, treba po
 tejto metóde zavolať metódu prekresli,
 aby sa efekt reálne prejavil.
Pozri tiež:
GRobot.farba(Color), 
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
písmo(Font), 
predvolenéPísmo(), 
vymažTexty(), 
vymažGrafiku()
vymaz
public void vymaz()
 Alias pre vymaž.
vymažTexty
public void vymažTexty()
Metóda vymaže všetky texty vnútornej konzoly podlahy alebo
 stropu.
 
 Poznámka: Pripomíname, že texty konzoly môžu
 byť vypisované napríklad prostredníctvom metód vypíš, vypíšRiadok. Pre úplnosť
 dodávame, že texty konzoly majú iné vlastnosti v porovnaní
 s pečiatkovými textami, ktoré môžu grafické roboty „nakresliť“
 napríklad metódou text. Pečiatkové texty sú
 grafické a v tomto prípade zostanú zachované.
 
 Táto metóda nevyvolá vznik udalosti vymazania plátna,
 takže reakcia vymazanie nie
 je spustená. (Uvedená udalosť sa dotýka výhradne mazania grafiky…)
 
 Poznámka: Metóda berie do úvahy použitie
 metód nekresli a kresli. Čiže ak je automatické prekresľovanie vypnuté, treba po
 tejto metóde zavolať metódu prekresli,
 aby sa efekt vizuálne prejavil.
Pozri tiež:
vymaž(), 
vymažGrafiku(), 
vypíš(Object...), 
vypíšRiadok(Object...), 
farbaTextu(Color), 
farbaPozadiaTextu(Color), 
písmo(Font), 
predvolenéPísmo()
vymazTexty
public void vymazTexty()
 Alias pre vymažTexty.
vymažOznačenéTexty
public int vymažOznačenéTexty()
Vymaže všetky označené texty vnútornej konzoly. Metóda postupne
 prechádza všetky bloky výpisov vnútornej konzoly a odstraňuje tie,
 ktoré sú označené (pozri napríklad metódu označVýpis).
Návratová hodnota:
súčet počtu vymazaných blokov textu a počtu vymazaných
     riadkov (označovanie koncov riadkov je riešené vnútorne
     v niektorých metódach slúžiacich na označovanie blokov)
vymazOznaceneTexty
public int vymazOznaceneTexty()
 Alias pre vymažOznačenéTexty.
vymažGrafiku
public void vymažGrafiku()
Vymaže grafický obsah plátna (podlahy alebo stropu). Po tejto akcii
 zostane plátno priehľadné. Ak sú vymazané obe plátna, tak bude
 viditeľná farba pozadia sveta. Texty vnútornej konzoly[1],
 ktoré mohli byť vypísané napríklad prostredníctvom metód
 vypíš a vypíšRiadok zostávajú v tomto prípade zachované. Vymazanie grafiky má
 za následok vznik udalosti vymazanie, v rámci ktorej je možné získať práve vymazané plátno
 metódou ÚdajeUdalostí.vymazanéPlátno().
 
 [1] – Vnútorná konzola obsahuje predovšetkým textové
 informácie. Tieto texty nie sú (na rozdiel od textov
 „nakreslených“ robotmi) vnímané ako
 grafické.
 
 Poznámka: Metóda berie do úvahy použitie
 metód nekresli a kresli. Čiže ak je automatické prekresľovanie vypnuté, treba po
 tejto metóde zavolať metódu prekresli,
 aby sa efekt prejavil.
 
 Keď je obsah plátien úplne vymazaný, tak obsah „miestnosti“ –
 sveta grafických robotov – vyplnený farbou pozadia.
Pozri tiež:
vymaž(), 
vymažTexty(), 
GRobot.farba(Color)
vymazGrafiku
public void vymazGrafiku()
 Alias pre vymažGrafiku.
vyplň
public void vyplň(Color farba)
Vyplní podlahu alebo strop zadanou farbou, ktorá prekryje aj
 farbu pozadia
 sveta.
 
 Poznámka: Metóda berie do úvahy použitie
 metód nekresli a kresli. Čiže ak je automatické prekresľovanie vypnuté, treba po
 tejto metóde zavolať metódu prekresli,
 aby sa efekt prejavil.
 
 Výplň plátna prekrýva farbu pozadia. Keď je obsah plátien
 vymazaný, obsah „miestnosti“ – sveta
 grafických robotov – je vyplnený farbou pozadia.
Parametre:
farba – objekt určujúci farbu na výplň plátna
Pozri tiež:
vymaž()
vypln
public void vypln(Color farba)
 Alias pre vyplň.
vyplň
public void vyplň(Farebnosť objekt)
Vyplní podlahu alebo strop farbou zadaného objektu, ktorá
 prekryje aj farbu
 pozadia sveta.
 
 Poznámka: Metóda berie do úvahy použitie
 metód nekresli a kresli. Čiže ak je automatické prekresľovanie vypnuté, treba po
 tejto metóde zavolať metódu prekresli,
 aby sa efekt prejavil.
 
 Výplň plátna prekrýva farbu pozadia. Keď je obsah plátien
 vymazaný, obsah „miestnosti“ – sveta
 grafických robotov – je vyplnený farbou pozadia.
Parametre:
objekt – objekt určujúci farbu na výplň plátna
Pozri tiež:
vymaž()
vypln
public void vypln(Farebnosť objekt)
 Alias pre vyplň.
vyplň
public Farba vyplň(int r,
                   int g,
                   int b)
Vyplní podlahu alebo strop farbou zadanou prostredníctvom
 farebných zložiek. Na ďalšie informácie pozri metódu vyplň(Color). Správanie tejto metódy je odvodené od
 nej.
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vyplň(Color)
vypln
public Farba vypln(int r,
                   int g,
                   int b)
 Alias pre vyplň.
vyplň
public Farba vyplň(int r,
                   int g,
                   int b,
                   int a)
Vyplní podlahu alebo strop farbou zadanou prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti. Na ďalšie informácie
 pozri metódu vyplň(Color). Správanie tejto metódy
 je odvodené od nej.
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vyplň(Color)
vypln
public Farba vypln(int r,
                   int g,
                   int b,
                   int a)
 Alias pre vyplň.
vyplň
public void vyplň(String súbor)
Vyplní podlahu alebo strop zadanou textúrou. Textúra je súbor
 s obrázkom, ktorý bude použitý na dlaždicové vyplnenie plochy
 plátna (podlahy alebo stropu).
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
vyplň(Color), 
obrázok(String)
vypln
public void vypln(String súbor)
 Alias pre vyplň.
vyplň
public void vyplň(Image výplň)
Vyplní podlahu alebo strop zadanou textúrou. Textúra je
 obrázok (objekt typu Image alebo odvodený), ktorý bude použitý na dlaždicové
 vyplnenie plochy plátna (podlahy alebo stropu).
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
výplň – obrázok s textúrou
Pozri tiež:
vyplň(Color)
vypln
public void vypln(Image výplň)
 Alias pre vyplň.
vylejFarbu
public void vylejFarbu(double x,
                       double y,
                       Color farba)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
 
 Toto je doplnková metóda umožňujúca vypĺňanie prázdnych častí
 kresieb na plátne. Jej efekt nemusí byť dokonalý. Farba sa
 napríklad nemusí dostať do úzkych častí kresby. Naopak,
 v niektorých situáciách môže farba mierne presiaknuť popod tenký
 okraj vypĺňanej časti kresby. Ak sa pokúsime vyplniť už vyplnenú
 časť kresby, farba dobre nezatečie k jej okrajom. Najlepšie
 výsledky sa dajú dosiahnuť pri vyplnení prázdnych častí kresby
 s dostatočne hrubým okrajom, ktorá neobsahuje žiadne úzke ťažko
 priechodné miesta.
 
 Poznámka: Pripomíname, že aj táto metóda
 (ako všetky ostatné) berie do úvahy použitie metód
 nekresli a kresli.
 Čiže ak je automatické prekresľovanie vypnuté, treba po tejto metóde
 zavolať metódu prekresli, aby sa efekt
 prejavil.
 
 Tip: Pozrite si aj opis metódy
 GRobot.vylejFarbu().
 Je v ňom pripojený aj príklad jej použitia.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
farba – objekt určujúci farbu výplne
vylejFarbu
public void vylejFarbu(double x,
                       double y,
                       Farebnosť objekt)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza.
 
 Toto je doplnková metóda umožňujúca vypĺňanie prázdnych častí
 kresieb na plátne. Jej efekt nemusí byť dokonalý. Farba sa
 napríklad nemusí dostať do úzkych častí kresby. Naopak,
 v niektorých situáciách môže farba mierne presiaknuť popod tenký
 okraj vypĺňanej časti kresby. Ak sa pokúsime vyplniť už vyplnenú
 časť kresby, farba dobre nezatečie k jej okrajom. Najlepšie
 výsledky sa dajú dosiahnuť pri vyplnení prázdnych častí kresby
 s dostatočne hrubým okrajom, ktorá neobsahuje žiadne úzke ťažko
 priechodné miesta.
 
 Poznámka: Pripomíname, že aj táto metóda
 (ako všetky ostatné) berie do úvahy použitie metód nekresli a kresli. Čiže ak
 je automatické prekresľovanie vypnuté, treba po tejto metóde
 zavolať metódu prekresli, aby sa efekt
 prejavil.
 
 Tip: Pozrite si aj opis metódy
 GRobot.vylejFarbu().
 Je v ňom pripojený aj príklad jej použitia.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
objekt – objekt určujúci farbu výplne
vylejFarbu
public Farba vylejFarbu(double x,
                        double y,
                        int r,
                        int g,
                        int b)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vylejFarbu(double, double, Color)
vylejFarbu
public Farba vylejFarbu(double x,
                        double y,
                        int r,
                        int g,
                        int b,
                        int a)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 zo stanoveného bodu rozšíri k okrajom okolitej kresby. Na ďalšie
 informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
x – x-ová súradnica počiatočného bodu
y – y-ová súradnica počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vylejFarbu(double, double, Color)
vylejFarbu
public void vylejFarbu(Poloha bod,
                       Color farba)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza. Na
 ďalšie informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
farba – objekt určujúci farbu výplne
vylejFarbu
public void vylejFarbu(Poloha bod,
                       Farebnosť objekt)
Vyleje do zadaného bodu na plátno farbu, ktorá sa odtiaľ rozšíri
 po okraje tej časti kresby, v ktorej sa zadaný bod nachádza. Na
 ďalšie informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
objekt – objekt určujúci farbu výplne
vylejFarbu
public Farba vylejFarbu(Poloha bod,
                        int r,
                        int g,
                        int b)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek, ktorá sa určeného bodu rozšíri po okraje
 okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vylejFarbu(Poloha, Color)
vylejFarbu
public Farba vylejFarbu(Poloha bod,
                        int r,
                        int g,
                        int b,
                        int a)
Vyleje do zadaného bodu na plátno farbu zadanú prostredníctvom
 farebných zložiek a úrovne (ne)priehľadnosti, pričom farba sa
 zo stanoveného bodu rozšíri k okrajom okolitej kresby. Na ďalšie
 informácie pozri metódu vylejFarbu(double, double,
 Color). Správanie tejto metódy je odvodené od nej.
Parametre:
bod – súradnice počiatočného bodu
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vylejFarbu(Poloha, Color)
vylejFarbu
public void vylejFarbu(GRobot ktorý)
Zadaný robot vyleje na svojej pozícii na plátno svoju aktuálnu
 farbu, ktorá sa odtiaľ rozšíri po
 okraje okolitej kresby. Na ďalšie informácie pozri metódu vylejFarbu(double, double, Color). Správanie tejto
 metódy je odvodené od nej.
Parametre:
ktorý – robot, ktorého poloha a farba sú použité na výplň
zrušPriehľadnosť
public void zrušPriehľadnosť()
Zruší priehľadnosť všetkých bodov na plátne. Predvolene sú
 všetky body plátna priehľadné. Aj priehľadné body však môžu mať
 svoje hodnoty farebnosti. Ukazuje to príklad nižšie. Keby sme
 použili túto metódu na plátno v predvolenom stave, zostalo by
 celé čierne.
 
 Pozor! Volanie tejto metódy neovplyvní
 celkovú priehľadnosť plátna ovplyvňovanú metódami
 priehľadnosť(priehľadnosť),
 priehľadnosť(objekt)
 a upravPriehľadnosť(zmena).
 
 Príklad:
 
 Nasledujúci fragment kódu (určený priamo na vloženie do
 konštruktora triedy odvodenej od robota) ukazuje ako funguje
 zrušenie priehľadnosti:
 
 
super(200, 200);
// Vypnutie automatického prekresľovania:
Svet.nekresli();
// Kreslenie šumu:
for (double y = Svet.najmenšieY(); y &lt;= Svet.najväčšieY(); ++y)
    for (double x = Svet.najmenšieX(); x &lt;= Svet.najväčšieX(); ++x)
    {
        skočNa(x, y);
        kresliNaStrop();
        náhodnáFarba();
        bod();
        kresliNaPodlahu();
        náhodnáFarba();
        bod();
    }
// Rozmazanie šumu na podlahe (na lepšie rozlíšenie):
podlaha.rozmaž(1, 5);
// Vymazanie kruhovej oblasti zo stropu (vo vytvorenej diere sa
// bude zobrazovať rozmazaný šum podlahy):
final Obrázok vymaž = new Obrázok();
kresliDoObrázka(vymaž);
skočNa(stred);
farba(biela);
kruh(80);
strop.vymažKresbu(vymaž);
    // (Poznámka: Vymazanie je v skutočnosti skôr nastavenie
    // priehľadnosti bodov. Hodnoty farebných zložiek zostávajú
    // nezmenené, čo sa prejaví po obnovení nepriehľadnosti stropu.)
// Dokončenie (skrytie robota a obnovenie automatického prekresľovania):
skry();
Svet.kresli();
// Čakanie na stlačenie klávesu:
Svet.čakajNaKláves();
Svet.pípni();
// Zrušenie priehľadnosti (spôsobí zmiznutie rozmazanej oblasti
// šumu podlahy, pretože sa obnoví nepriehľadnosť diery v strope,
// namiesto ktorej sa ukáže pôvodný šum nakreslený na strope pred
// „vymazaním“):
strop.zrušPriehľadnosť();
 
 Výsledok:
 
  Ukážka vzhľadu
 príkladu (animácia strieda vzhľad tesne po spustení a po stlačení
 klávesu).
zrusPriehladnost
public void zrusPriehladnost()
 Alias pre zrušPriehľadnosť.
použiMasku
public boolean použiMasku(BufferedImage maska)
Použije na toto plátno masku vyrobenú zo zadaného obrázka.
 Obrázok masky musí mať rovnaké rozmery ako plátno, inak operácia
 zlyhá. Maska je vyrobená z kombinácie intenzity farieb
 a priehľadnosti jednotlivých bodov zadaného obrázka. Čím je bod
 masky tmavší, tým bude viditeľnejší, čím svetlejší, tým menej
 viditeľný. Jas je korigovaný aj zložkami priehľadnosti obidvoch
 bodov, teda bodu, ktorý bol pôvodne na plátne aj bodu na obrázku
 masky. Ak je súčin zložiek priehľadnosti rovný nule, tak bude
 výsledný bod neviditeľný. Viditeľnosť bodov v ostatných prípadoch
 záleží na výsledku výpočtov algoritmu. Napríklad úplne čierne
 úplne nepriehľadné body masky neovplyvnia priehľadnosť bodov
 na plátne.
Parametre:
maska – obrázok, ktorý bude použitý ako maska
Návratová hodnota:
true ak bola operácia úspešná
pouziMasku
public boolean pouziMasku(BufferedImage maska)
 Alias pre použiMasku.
vyrobMasku
public boolean vyrobMasku(BufferedImage nováMaska)
Vyrobí z obsahu tohto plátna do zadaného obrázka masku
 priehľadnosti. Zadaný obrázok musí mať rovnaké rozmery ako plátno,
 inak operácia zlyhá. Vyrobená maska bude obsahovať čierne body
 s rôznou úrovňou priehľadnosti podľa priehľadnosti bodov na plátne.
 Pôvodný obsah zadaného obrázka (argumentu nováMaska) bude
 nahradený.
Parametre:
nováMaska – obrázok, do ktorého bude nová maska vyrobená
     (pôvodný obsah obrázka bude nahradený maskou)
Návratová hodnota:
true ak bola operácia úspešná
vyrobMasku
public BufferedImage vyrobMasku()
Vyrobí z obsahu tohto plátna masku priehľadnosti. Metóda vytvorí
 masku do nového obrázka (typu BufferedImage),
 ktorý sama automaticky vytvorí a vráti ho ako svoju návratovú
 hodnotu. Nová maska bude obsahovať čierne body s rôznou úrovňou
 priehľadnosti vychádzajúc z priehľadnosti bodov na plátne.
Návratová hodnota:
nový obrázok obsahujúci vyrobenú masku
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   Color pozadie)
Rozmaže grafiku tohto plátna. Pre priehľadné (neviditeľné) body je
 pri procese rozmazania použitá zadaná farba pozadia. Opakovanie
 a rozsah majú z vizuálneho hľadiska podobný dopad na výsledný efekt
 rozmazania, ale matice lineárneho kruhového rozmazania sú
 vygenerované len do úrovne rozsahu 5 (vrátane). Pri zadaní vyššej
 hodnoty rozsahu získame rovnaký efekt ako keby sme zadali hodnotu
 5. Ak chceme dosiahnuť vyššiu mieru rozmazania, musíme zvýšiť počet
 opakovaní procesu rozmazania (argument opakovanie). Čím vyššie sú
 hodnoty opakovania a rozsahu, tým vyššie sú nároky metódy na
 výpočtový výkon.
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania; reálny efekt dosiahneme len
     v rámci hodnôt 1 – 5, vyššie čísla sú zaokrúhlené na 5, nižšie
     nespôsobia žiadne rozmazanie
pozadie – farba použitá pri procese rozmazania pre priehľadné
     body
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   Color pozadie)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, 1, pozadie);
Parametre:
opakovanie – počet opakovaní rozmazania
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(int opakovanie,
                   Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(Color pozadie)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(1, 1, pozadie);
Parametre:
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(Color pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   Farebnosť pozadie)
Rozmaže grafiku tohto plátna. Pre priehľadné (neviditeľné) body je
 pri procese rozmazania použitá zadaná farba pozadia. Opakovanie
 a rozsah majú z vizuálneho hľadiska podobný dopad na výsledný efekt
 rozmazania, ale matice lineárneho kruhového rozmazania sú
 vygenerované len do úrovne rozsahu 5 (vrátane). Pri zadaní vyššej
 hodnoty rozsahu získame rovnaký efekt ako keby sme zadali hodnotu
 5. Ak chceme dosiahnuť vyššiu mieru rozmazania, musíme zvýšiť počet
 opakovaní procesu rozmazania (argument opakovanie). Čím vyššie sú
 hodnoty opakovania a rozsahu, tým vyššie sú nároky metódy na
 výpočtový výkon.
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania; reálny efekt dosiahneme len
     v rámci hodnôt 1 – 5, vyššie čísla sú zaokrúhlené na 5, nižšie
     nespôsobia žiadne rozmazanie
pozadie – farba použitá pri procese rozmazania pre priehľadné
     body
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   Farebnosť pozadie)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, 1, pozadie);
Parametre:
opakovanie – počet opakovaní rozmazania
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(int opakovanie,
                   Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(Farebnosť pozadie)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(1, 1, pozadie);
Parametre:
pozadie – farba použitá pre neviditeľné body
rozmaz
public void rozmaz(Farebnosť pozadie)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, rozsah, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
 
 Príklad:
 
 V tomto príklade použijeme rozmazanie na napodobnenie obláčikov
 na oblohe (pozri zoznam zmien: 
poďakovanie uvedené pri verzii
 1.35):
 
 
// Nakreslíme niekoľko skupín čiastočne priehľadných bielych
// elíps na tyrkysovom pozadí:
Svet.farbaPozadia(tyrkysová);
farba(250, 250, 250, 150);
zdvihniPero();
skry();
for (int j = 0; j &lt; 16; ++j)
{
    skočNa(Svet.náhodnéReálneČíslo(
            Svet.ľavýOkraj(), Svet.pravýOkraj()),
        Svet.náhodnéReálneČíslo(
            Svet.dolnýOkraj(), Svet.hornýOkraj()));
    for (int i = 0; i &lt; 32; ++i)
    {
        smer(90);
        vyplňElipsu(10, 5);
        náhodnýSmer();
        dopredu(12);
    }
}
// Rozmazaním dosiahneme zaujímavý efekt…
podlaha.rozmaž(12, 3);
 
 Výsledok:
 
 
 
 
 
 
 
 
 
 
 
 Niekoľko ukážok výstupu
 príkladu – výsledok každého spustenia je unikátny (plátno
 ukážok je úmyselne zmenšené).
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, 1, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
Parametre:
opakovanie – počet opakovaní rozmazania
rozmaz
public void rozmaz(int opakovanie)
 Alias pre rozmaž.
rozmaž
public void rozmaž()
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(1, 1, Svet.farbaPozadia());
 
 To znamená, že pre priehľadné (neviditeľné) body je pri procese
 rozmazania použitá aktuálna farba pozadia sveta (pozri: Svet.farbaPozadia(farba)).
rozmaz
public void rozmaz()
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int rozsah,
                   int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, rozsah, new Farba(bgr, bgg, bgb));
Parametre:
opakovanie – počet opakovaní rozmazania
rozsah – rozsah rozmazania
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int opakovanie,
                   int rozsah,
                   int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int opakovanie,
                   int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(opakovanie, 1, new Farba(bgr, bgg, bgb));
Parametre:
opakovanie – počet opakovaní rozmazania
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int opakovanie,
                   int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
rozmaž
public void rozmaž(int bgr,
                   int bgg,
                   int bgb)
Rozmaže grafiku tohto plátna. Dosiahneme rovnaký efekt, ako keby
 sme volali metódu: rozmaž(1, 1, new Farba(bgr, bgg,
 bgb));
Parametre:
bgr – červený komponent pozadia
bgg – zelený komponent pozadia
bgb – modrý komponent pozadia
rozmaz
public void rozmaz(int bgr,
                   int bgg,
                   int bgb)
 Alias pre rozmaž.
vymažKresbu
public boolean vymažKresbu(Image kresba)
Použije na plátno filter vyrobený zo zložky jasu kresby
 zadaného/predloženého obrázka. Zložka priehľadnosti bodov na
 obrázku, ktorý poslúži ako predloha pre filter nie je braná do
 úvahy. Hodnoty farebných zložiek úplne priehľadných (neviditeľných)
 bodov sú nepredvídateľné, preto by mal byť obrázok predlohy filtra
 úplne pokrytý nepriehľadnou kresbou. Svetlé/biele body na obrázku
 predlohy spôsobia „vymazanie“ bodov na plátne (nastavenie hodnôt
 ich priehľadnosti na nulu). Tmavé/čierne body na predloženom
 obrázku nespôsobia na plátne žiadnu zmenu priehľadnosti.
 (Ostatné odtiene šedej a farebné body vo filtri spôsobia nastavenie
 úrovne priehľadnosti bodov plátna na hodnotu jasu vypočítanú
 z priemeru farebných zložiek bodov filtra.)
 Obrázok s predlohou musí mať rovnaký rozmer ako plátno, inak
 operácia zlyhá.
Parametre:
kresba – obrázok, ktorý bude použitý ako predloha na filter
Návratová hodnota:
true ak bola operácia úspešná
vymazKresbu
public boolean vymazKresbu(Image kresba)
 Alias pre vymažKresbu.
roluj
public void roluj(double Δx,
                  double Δy)
Posunie obsah plátna o zadaný počet bodov v horizontálnom a/alebo
 vertikálnom smere. Tá časť plátna, ktorá opustí jeho rozmery, bude
 stratená, pričom na protiľahlej strane vznikne prázdna oblasť.
 Metóda má využitie napríklad pri posune hracej plochy, pričom
 musíme zabezpečiť, aby boli vzniknuté prázdne časti plochy
 dokreslené. Ak chceme obsah plátna pretočiť dookola (t. j. bez
 straty obsahu), musíme použiť metódu pretoč.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
rolujGrafiku
public void rolujGrafiku(double Δx,
                         double Δy)
 Alias pre roluj.
pretoč
public void pretoč(double Δx,
                   double Δy)
Pretočí obsah plátna o zadaný počet bodov v horizontálnom a/alebo
 vertikálnom smere. Tá časť plátna, ktorá by mala pri pretočení
 opustiť jeho rozmery, sa objaví na protiľahlej strane. Pretáčaním
 plátna v ľubovoľnom smere nikdy nestratíme grafickú informáciu
 a spätným posunom dostaneme pôvodný stav. Ak z rôznych dôvodov
 potrebujeme, aby sa pri pretáčaní tie časti, ktoré opustia
 rozmery plátna stratili a aby vzniknuté prázdne časti zostali
 skutočne prázdne (pripravené na ďalšie kreslenie), musíme použiť
 metódu roluj.
 
 Príklad:
 
 
import knižnica.*;
public class PretočeniePlátna extends GRobot
{
    // Konštruktor.
    private PretočeniePlátna()
    {
        super(300, 300);
        // Krátky inicializačný kód na nakreslenie pečiatkového farebného
        // vzoru na plátno. (Aby bolo čo pretáčať.)
        skoč(10);
        vpravo(30);
        hrúbkaČiary(3);
        for (int i = 150, f = -5; i &gt;= 25; i -= 25)
        {
            veľkosť(i);
            vypĺňajTvary();
            farba(preddefinovanéFarby[f += 7]);
            pečiatka();
            nevypĺňajTvary();
            farba(čierna);
            pečiatka();
            odskoč(13);
        }
        skry();
    }
    // Počiatočná poloha myši používaná na vypočítanie rozdielu určujúceho
    // mieru pretáčania plátna.
    private Bod poloha1 = null;
    @Override public void stlačenieTlačidlaMyši()
    {
        // Uloženie počiatočnej polohy.
        poloha1 = ÚdajeUdalostí.polohaMyši();
    }
    @Override public void ťahanieMyšou()
    {
        // Ak je počiatočná poloha neprázdna, […]
        if (null != poloha1)
        {
            // […] tak prevezmeme aktuálnu polohu (pre nás koncovú), […]
            Bod poloha2 = ÚdajeUdalostí.polohaMyši();
            // […] vypočítame z oboch polôh rozdiel, o ktorý sa plátno
            // pretočí […]
            podlaha.pretoč(
                poloha2.polohaX() – poloha1.polohaX(),
                poloha2.polohaY() – poloha1.polohaY());
            // […] a uložíme aktuálnu polohu ako novú počiatočnú polohu.
            poloha1 = poloha2;
        }
    }
    @Override public void uvoľnenieTlačidlaMyši()
    {
        // Vyprázdnenie počiatočnej polohy.
        poloha1 = null;
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("PretočeniePlátna.cfg");
        new PretočeniePlátna();
    }
}
 
 Výsledok:
 
 
 
 
 Ukážka obsahu plátna
 tesne po spustení a po chvíli pretáčania.
 
 
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
pretoc
public void pretoc(double Δx,
                   double Δy)
 Alias pre pretoč.
rolujTexty
public void rolujTexty(int Δx,
                       int Δy)
Posunie texty vnútornej konzoly o zadaný počet bodov v smere
 osí x a y. Použitie metódy má alebo naopak nemá za určitých
 okolností zmysel. Okolnosti sú zhrnuté v nasledujúcich bodoch:
 
 
 Ak objem textu vnútornej konzoly rozmerovo prekročí rozmery
 zobrazenej časti plátna, stáva sa rolovateľným.
 Po použití polohovania textu (napríklad metódou píšNa(x, y, …)) je rolovanie
 až do najbližšieho vymazania textov
 konzoly vypnuté.
 Rolovanie v smere osi x je možné len v prípade, že je vypnuté
 zalamovanie textov konzoly.
 Automatické rolovanie kolieskom myši je možné vypnúť
 nastavením hodnoty false (rovnomenného) príznaku
 rolujTexty.
 Aktuálna úroveň posunutia textov je automaticky korigovaná až
 počas aktualizácie (zobrazenia) textov na obrazovke tak, aby sa
 texty príliš neposunuli voči okrajom plátna smerom dovnútra.
 
 
 Všetky relevantné z uvedených informácií sú platné aj pre
 ostatné metódy pracujúce s posunom textov vnútornej konzoly…
Parametre:
Δx – zmena posutia v smere x; kladná hodnota posúva texty
     smerom doľava (smerom od pravého okraja odkrývajúc text
     vpravo), záporná naopak (výsledná hodnota posunutia textov môže
     byť prispôsobená počas prekresľovania)
Δy – zmena posutia v smere y; kladná hodnota posúva texty
     smerom dole (smerom od horného okraja nadol odkrývajúc text
     napísaný vyššie), záporná naopak (výsledná hodnota posunutia
     textov môže byť prispôsobená počas prekresľovania)
Pozri tiež:
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov(int, int), 
posunutieTextov()
rolujTexty
public void rolujTexty()
Posunie texty vnútornej konzoly podľa poslednej udalosti
 kolieska myši. Použitie
 metódy má alebo naopak nemá za určitých okolností zmysel –
 podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
 
 Ak je hodnota rovnomenného príznaku
 rolujTexty rovná true (čo je
 predvolená hodnota tohto príznaku), tak je táto metóda automaticky
 spustenná pri vzniku udalostí rolovania kolieskom myši.
 
 Aby bolo rolovanie svižnejšie, je jeden krok rolovania
 násobený osemnásobkom objemu rolovania (stanoveného systémom;
 zistiteľného volaním: kolieskoMyši().getScrollAmount()).
Pozri tiež:
ObsluhaUdalostí.rolovanieKolieskomMyši(), 
rolujTexty(int, int), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov(int, int), 
posunutieTextov(), 
rolujTexty
posunutieTextovX
public void posunutieTextovX(int nováHodnota)
Nastaví posunutie textov vnútornej konzoly v smere osi x.
 Použitie metódy má alebo naopak nemá za určitých okolností zmysel –
 podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Parametre:
nováHodnota – nová hodnota posunutia textov v smere x
     (pozri aj informácie pri parametroch metódy rolujTexty(Δx, Δy))
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov(int, int), 
posunutieTextov()
posunutieTextovY
public void posunutieTextovY(int nováHodnota)
Nastaví posunutie textov vnútornej konzoly v smere osi y.
 Použitie metódy má alebo naopak nemá za určitých okolností zmysel –
 podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Parametre:
nováHodnota – nová hodnota posunutia textov v smere y
     (pozri aj informácie pri parametroch metódy rolujTexty(Δx, Δy))
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov(int, int), 
posunutieTextov()
posunutieTextovX
public int posunutieTextovX()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osi x. Použitie metódy má alebo naopak nemá za určitých okolností
 zmysel – podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Návratová hodnota:
aktuálna hodnota posunutia textov v smere x
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovY(), 
posunutieTextov(int, int), 
posunutieTextov()
posunutieTextovY
public int posunutieTextovY()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osi y. Použitie metódy má alebo naopak nemá za určitých okolností
 zmysel – podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Návratová hodnota:
aktuálna hodnota posunutia textov v smere y
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextov(int, int), 
posunutieTextov()
posunutieTextov
public void posunutieTextov(int x,
                            int y)
Nastaví posunutie textov vnútornej konzoly v smere osí x a y.
 Použitie metódy má alebo naopak nemá za určitých okolností zmysel –
 podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Parametre:
x – nová hodnota posunutia textov v smere x
     (pozri aj informácie pri parametroch metódy rolujTexty(Δx, Δy))
y – nová hodnota posunutia textov v smere y
     (pozri aj informácie pri parametroch metódy rolujTexty(Δx, Δy))
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov()
posunutieTextov
public Bod posunutieTextov()
Vráti aktuálnu hodnotu posunutia textov vnútornej konzoly v smere
 osí x a y. Použitie metódy má alebo naopak nemá za určitých
 okolností zmysel – podrobnosti sú uvedené v opise metódy
 rolujTexty(Δx, Δy).
Návratová hodnota:
objekt typu Bod obsahujúci aktuálne
     hodnoty posunutia textov v smere x a y
Pozri tiež:
rolujTexty(int, int), 
rolujTexty(), 
posunutieTextovX(int), 
posunutieTextovY(int), 
posunutieTextovX(), 
posunutieTextovY(), 
posunutieTextov(int, int)
poslednáVýškaTextu
public int poslednáVýškaTextu()
Táto metóda zistí poslednú hodnotu celkovej výšky textu
 (v bodoch) uloženého vo vnútornej konzole. (To jest,
 aký grafický priestor meraný v bodoch zaberá výpis všetkých
 textov vnútornej konzoly na výšku.) Z uvedeného
 vyplýva, že na túto hodnotu má vplyv viacero faktorov:
 veľkosť písma vnútornej konzoly, zalamovanie riadkov
 a samotný objem textu uložený vo vnútornej konzole. Hodnota
 nemusí byť aktuálna, ale môže byť prinajmenšom rámcovo
 použitá pri určení toho, či má byť používateľovi poskytnutá
 možnosť rolovania v smere osi y.
Návratová hodnota:
posledná výška textu vnútornej konzoly v bodoch
poslednaVyskaTextu
public int poslednaVyskaTextu()
 Alias pre poslednáVýškaTextu.
poslednáŠírkaTextu
public int poslednáŠírkaTextu()
Táto metóda zistí poslednú hodnotu maximálnej šírky textu
 (v bodoch) uloženého vo vnútornej konzole. (To jest,
 aký grafický priestor meraný v bodoch zaberá výpis všetkých
 textov vnútornej konzoly na šírku.) Situácia je podobná
 ako pri historicky staršej metóde poslednáVýškaTextu, podobne aj na túto hodnotu má vplyv
 viacero faktorov: veľkosť písma, zalamovanie riadkov… a táto
 hodnota môže byť rovnako použitá pri určení toho, či má byť
 používateľovi poskytnutá možnosť rolovania v smere osi x.
Návratová hodnota:
posledná šírka textu vnútornej konzoly v bodoch
poslednaSirkaTextu
public int poslednaSirkaTextu()
 Alias pre poslednáŠírkaTextu.
textyDoSchránky
public boolean textyDoSchránky()
Vloží do schránky všetky texty vypísané do vnútornej konzoly
 tohto plátna.
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.text(String)
textyDoSchranky
public boolean textyDoSchranky()
 Alias pre textyDoSchránky.
textDoSchránky
public boolean textDoSchránky()
 Alias pre textyDoSchránky.
textDoSchranky
public boolean textDoSchranky()
 Alias pre textyDoSchránky.
textyDoSchránky
public boolean textyDoSchránky(boolean lenOznačené)
Vloží do schránky buď všetky texty vypísané do vnútornej konzoly
 tohto plátna, alebo len označené časti – v závislosti od hodnoty
 parametra lenOznačené.
Parametre:
lenOznačené – ak je hodnota tohto parametra rovná
     true, tak metóda skopíruje do schránky len
     označené texty konzoly, inak sa správa rovnako ako metóda
     textyDoSchránky()
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.text(String)
textyDoSchranky
public boolean textyDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
textDoSchránky
public boolean textDoSchránky(boolean lenOznačený)
 Alias pre textyDoSchránky.
textDoSchranky
public boolean textDoSchranky(boolean lenOznačený)
 Alias pre textyDoSchránky.
obrázokDoSchránky
public boolean obrázokDoSchránky()
Vloží obrázok (grafiku) plátna do schránky.
 
 Upozornenie: Obrázok je uchovaný
 v schránke len počas činnosti aplikácie robota. Po zatvorení
 okna sveta, je obrázok zo schránky odstránený.
 
 Poznámka: Zvlnenú verziu obrázka
 plátna je možné vložiť do schránky s pomocou metódy
 Schránka.obrázok(obrázok)
 a inštancie zvlneného obrázka, ktorá sa dá získať volaním metódy
 Vlnenie.zvlnenýRaster().
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.obrázok(Image)
obrazokDoSchranky
public boolean obrazokDoSchranky()
 Alias pre obrázokDoSchránky.
grafikaDoSchránky
public boolean grafikaDoSchránky()
 Alias pre obrázokDoSchránky.
grafikaDoSchranky
public boolean grafikaDoSchranky()
 Alias pre obrázokDoSchránky.
vykonajPríkaz
public boolean vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
Parametre:
príkaz – príkazový riadok spĺňajúci pravidlá uvedené
     v opise metódy interaktívnyRežim
Návratová hodnota:
true ak bol príkaz nájdený a podarilo
     sa ho vykonať
Výnimky:
GRobotException – ak bolo vykonávanie príkazu zrušené
IllegalAccessException – ak metóda, s ktorou súvisí
     vykonávanie príkazu nie je dostupná (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súvisí vykonávanie príkazu nie je
     požadovaného typu, ani ho na neho nie je možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súvisí vykonávanie príkazu vznikla výnimka
Pozri tiež:
GRobot.vykonajPríkaz(String), 
Svet.vykonajPríkaz(String), 
GRobot.interaktívnyRežim(boolean), 
Svet.interaktívnyRežim(boolean), 
interaktívnyRežim(boolean), 
Svet.režimLadenia(boolean)
vykonajPrikaz
public boolean vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
interaktívnyRežim
public void interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre toto plátno.
 Pozri: Svet.interaktívnyRežim(zapni).
Parametre:
zapni – ak je true, režim bude pre toto plátno
     zapnutý, inak bude vypnutý
Pozri tiež:
GRobot.interaktívnyRežim(boolean), 
Svet.interaktívnyRežim(boolean), 
Svet.režimLadenia(boolean), 
ObsluhaUdalostí.ladenie(int, String, int)
interaktivnyRezim
public void interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
interaktívnyRežim
public boolean interaktívnyRežim()
Zistí stav interaktívneho režimu pre toto plátno.
 Pozri: Svet.interaktívnyRežim(zapni).
Návratová hodnota:
stav režimu pre tohto robota
interaktivnyRezim
public boolean interaktivnyRezim()
 Alias pre interaktívnyRežim.
máVlnenie
public boolean máVlnenie()
Overí, či je definovaná inštancia vlnenia pre toto plátno.
Návratová hodnota:
true ak je inštancia vlnenia definovaná;
     false v opačnom prípade
Pozri tiež:
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
maVlnenie
public boolean maVlnenie()
 Alias pre máVlnenie.
vlnenie
public Vlnenie vlnenie()
Vráti inštanciu vlnenia pre toto plátno,
 aby bolo možné s vlnením ďalej pracovať. Ak vlnenie nie je pre
 toto plátno definované, tak metóda definuje nové neaktívne vlnenie
 s predvolenou úrovňou útlmu 26. (Overiť to,
 či je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie.) Naopak, metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v takom prípade, že jestvuje. (V opačnom
 prípade vráti metóda jestvujúceVlnenie hodnotu null.)
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Upozornenie: Ak svet grafického robota
 nemá aktívny časovač, tak vlnenie
 nebude fungovať ani po jeho aktivácii. Táto metóda nespúšťa
 časovač (ani vlnenie) automaticky! Účelom automatického
 vytvorenia inštancie vlnenia touto metódou v prípade jej
 neprítomnosti je len zabránenie vzniku chýb. Táto metóda nemá
 nahradiť metódu pridajVlnenie.
Návratová hodnota:
metóda zaručuje vrátenie inštancie Vlnenie
     definovanej pre toto plátno aj v takom prípade, že pred jej
     volaním nebola inštancia definovaná
Pozri tiež:
máVlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujúceVlnenie
public Vlnenie jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
 V opačnom prípade vráti hodnotu null, čo môže viesť
 ku vzniku výnimky, ak sa programátor pokúsi použiť vrátenú
 hodnotu bez overenia. Naopak, vrátenie inštancie
 vlnenia aj v prípade, že ešte nebolo
 definované zaručuje metóda vlnenie.
Návratová hodnota:
ak je definovaná inštancia vlnenia,
     tak ju metóda vráti; v opačnom prípade vráti hodnotu
     null
Pozri tiež:
máVlnenie(), 
vlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujuceVlnenie
public Vlnenie jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
existujúceVlnenie
public Vlnenie existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
existujuceVlnenie
public Vlnenie existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
definovanéVlnenie
public Vlnenie definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
definovaneVlnenie
public Vlnenie definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
pridajVlnenie
public void pridajVlnenie()
Pridá alebo zresetuje vlnenie tohto plátna. Ak nie je definované
 alebo aktívne vlnenie pre toto plátno, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia s predvolenou
 úrovňou útlmu 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public void pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto plátna. Ak nie je definované
 alebo aktívne vlnenie pre toto plátno, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia s predvolenou
 úrovňou útlmu 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public void pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie tohto plátna. Ak nie je definované
 alebo aktívne vlnenie pre toto plátno, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia so zadanou úrovňou
 útlmu (pozri aj Vlnenie.útlm(útlm)).
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int, boolean), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
pridajVlnenie
public void pridajVlnenie(int útlm,
                          boolean ajČasovač)
Pridá alebo zresetuje vlnenie tohto plátna. Ak nie je definované
 alebo aktívne vlnenie pre toto plátno, tak volanie tejto metódy
 vytvorí a/alebo aktivuje novú inštanciu vlnenia so zadanou úrovňou
 útlmu (pozri aj Vlnenie.útlm(útlm))
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje vo svete grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
odstráňVlnenie
public void odstráňVlnenie()
Ukončí vlnenie a úplne odstráni inštanciu vlnenia tohto plátna
 z prostredia programovacieho rámca GRobot.
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean)
odstranVlnenie
public void odstranVlnenie()
 Alias pre odstráňVlnenie.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Plazma
java.lang.Object
Plazma
public class Plazma
extends Object
Táto trieda generuje pixelovú simuláciu horiacej plazmy v zadanom
 obrázku. Obrázok, ktorý je povinným parametrom konštruktora bude
 aktivitou tejto triedy celoplošne prepisovaný, preto sa v podstate stáva
 nepoužiteľným na iné účely. (Teoreticky je možné upraviť obsah obrázka
 po každej aktivite generátora plazmy, prakticky však býva zväčša efektívne
 iné riešenie.)
 
 Táto trieda v skutočnosti implementuje dej. Mala by sa teda skôr volať
 „Plazmovanie“ (podobne ako trieda Vlnenie), avšak také
 sloveso slovenčina nerozoznáva, tak je pomenovaná podľa skupenstva, ktoré
 je dynamické a neustále sa meniace. Primárnym účelom bolo simulovať oheň,
 ale rôznymi úpravami parametrov simulácie sa dajú docieliť aj také efekty,
 ktoré oheň nepripomínajú, preto trieda nesie ten názov, ktorý má.
 
 Táto pixelová simulácia neustále prepočítava všetky pixely
 podľa hodnôt svojich susedov. Cieľom je napodobniť spotrebúvanie
 určitej „energie,“ ktoré je vizualizované prostredníctvom palety farieb v pridruženom obrázku. Dej sa dá ovplyvniť nasledujúcimi parametrami:
 
 
 ťah – čo je štvorica
 koeficientov určujúca, ktorým smerom sa má mať plazma tendencia pohybovať
 viac (simulácia je pixelová, takže vždy ide o jeden pixel),
 dohorenie – čo je parameter, ktorým sa
 dá spomaliť proces horenia
 a útlm – čím sa rozumie celoplošné tlmenie
 plameňov, čiže vyššie hodnoty simuláciu urýchlia.
 
 
 Okrem toho výsledok značne ovplyvňuje paleta, ktorej počet farieb je určený
 rozsahom hodnôt simulácie, ktorý sa dá sa určiť jednorazovo a to výhradne
 jedným z konštruktorov plazmového
 generátora.
 
 Generátor je tiež programovateľný asynchrónne a to s pomocou takzvaných
 zdrojov a deja, ktorými sa dajú docieliť rôzne
 dynamické efekty. Každý zdroj je časovo obmedzený a statický, ale dá sa buď
 naraz definovať séria vzájomne časovo posunutých zdrojov, alebo umiestniť
 pravidelné pridávanie nových zdrojov do deja
 (čo je v podstate „spätne volaná funkcia/metóda“ – angl. callback). Tým sa
 dá simulovať plazma s pohyblivým „zápalným zdrojom.“
 
 Upozornenie:
 Je dôležité si uvedomiť, že po pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
 
 Upozornenie:
 Každá inštancia pixelového generátora plazmy je predvolene aktívna,
 ale žiadna z nich nikdy automaticky nespúšťa časovač sveta, od ktorého je automatizovaná
 činnosť generátorov plazmy závislá.
 
 (Keď hovoríme o automatizovanej činnosti, tak jednotlivé generátory môžu
 fungovať aj nezávisle od časovača sveta,
 ak sa o ich činnosť postará programátor – spúšťaním metódy
 pracuj.)
 
 Upozornenie:
 Trieda Plazma vykonáva pixelovú simuláciu horenia
 plazmy. Na to treba brať zreteľ najmä pri posudzovaní vplyvu jednotlivých
 parametrov horenia na výsledok simulácie. Najmä v súvislosti s veličinou
 ťahu. Akokoľvek veľká hodnota
 ťahu nedokáže vynútiť zmenu pohybu plazmy špecifickým smerom viac než
 o jeden pixel. Ďalšie podrobnosti nájdete v opise metódy váhyŤahu(ťahDoľava, ťahHore, ťahDoprava,
 ťahDole).
 
  
 
 
 Príklad:
 
 Tento príklad ukazuje generovanie plazmy s predvolenými parametrami.
 Každé kliknutie striedavo pridá alebo odoberie dej simulátora (ktorý je principiálne tzv. „callback“ funkciou/metódou).
 Dej je definovaný veľmi jednoducho – generuje zdroj s polomerom 100 bodov
 v strede plátna.
 
 
import knižnica.*;
public class ZákladnáPlazma extends GRobot
{
    // Obrázok rozmermi totožný s veľkosťou plátna.
    private Obrázok obrázok = new Obrázok(250, 250);
    // Inštancia generátora plazmy prepojená na obrázok.
    private Plazma  plazma  = new Plazma(obrázok);
    // Inštancia deja generujúca v strede obrázka plazmovú guľu
    // s polomerom 100 bodov.
    private Runnable dej = () -&gt; plazma.pridajZdroj(stred, 100);
    
    // Konštruktor.
    private ZákladnáPlazma()
    {
        super(250, 250);
        skry();
        Svet.spustiČasovač();
    }
    
    // Reakcia na kliknutie myšou.
    @Override public void klik()
    {
        // Prepínač: Ak nie je definovaný dej plazmy, použije
        // sa naša inštancia deja, inak sa zruší…
        if (null == plazma.dej())
            plazma.dej(dej);
        else
            plazma.dej(null);
    }
    // Reakcia na časovač.
    @Override public void tik()
    {
        // Ak nie je svet prekreslený, tak sa prekreslí – v tomto
        // príklade pozostáva prekreslenie len z vymazania grafiky
        // podlahy a nakreslenia nášho obrázka spárovaného
        // s generátorom plazmy na podlahu.
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            podlaha.obrázok(obrázok);
            Svet.prekresli();
        }
    }
    
    // Hlavná metóda (vstupný bod programu).
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("ZákladnáPlazma.cfg");
        new ZákladnáPlazma();
    }
}
 
 Výsledok:
 
  Ukážka
 zapnutia a vypnutia deja generujúceho základnú plazmu.
 
 Príklad:
 
 Tento príklad upravuje viacero parametrov simulácie. Dej je tiež
 definovaný komplikovanejšie – generuje zdroje sledujúce polohu kurzora
 myši.
 
 
import knižnica.*;
public class Plamienok extends GRobot
{
    // Obrázok rozmermi totožný s veľkosťou plátna.
    private Obrázok obrázok = new Obrázok(250, 250);
    // Inštancia generátora plazmy prepojená na obrázok.
    private Plazma  plazma  = new Plazma(obrázok);
    // Generátory pílových číselných radov na jemnú úpravu polohy plamienka.
    private Rad radX = new Rad(-5, 5, 2);
    private Rad radY = new Rad(-1, 1);
    // Inštancia deja generujúca plamienok podľa aktuálnej polohy myši.
    private Runnable dej = () -&gt;
    {
        Bod myš = ÚdajeUdalostí.polohaMyši();
        for (int i = 0; i &lt; 1; ++i)
        {
            int y = radY.daj();
            for (int j = 0; j &lt; 16; ++j)
            {
                int x = radX.daj();
                // Pridanie ďalšieho zdroja:
                plazma.pridajZdroj(
                    // Poloha:
                    myš.polohaX() + x,
                    myš.polohaY() + y + j * 3,
                    (10 – (j / 2)) * 2, // rozsah
                    8, 24,              // hranice
                    4, i * 8 + j);      // trvanie a oneskorenie
            }
        }
    };
    
    // Konštruktor.
    private Plamienok()
    {
        super(250, 250);
        // Nastavenie vlastnej palety generátora plazmy:
        plazma.nastavPaletu(new Farba[] {
            // Svetložltá, oranžová, červená a čierna
            // (s postupne klesajúcou priehľadnosťou):
            new Farba(255, 255, 128),
            new Farba(255, 128, 0, 192),
            new Farba(255, 0, 0, 32),
            new Farba(0, 0, 0, 0)});
        // Úprava predvoleného kroku deja:
        plazma.krok(8);
        skry();
        Svet.spustiČasovač();
    }
    
    // Reakcia na kliknutie myšou.
    @Override public void klik()
    {
        // Prepínač: Ak nie je definovaný dej plazmy, použije
        // sa naša inštancia deja, inak sa zruší…
        if (null == plazma.dej())
            plazma.dej(dej);
        else
            plazma.dej(null);
    }
    // Reakcia na ťahanie myšou.
    @Override public void ťahanieMyšou()
    {
        // Ak je dej aktívny, tak sa vykoná pri každej zmene polohy kurzora
        // myši (počas držania stlačeného tlačidla myši, t. j. počas ťahania
        // myšou). Spôsobí to rozohnenie mohutnejších plameňov.
        if (null != plazma.dej()) dej.run();
    }
    // Reakcia na časovač.
    @Override public void tik()
    {
        // Ak nie je svet prekreslený, tak sa prekreslí – v tomto
        // príklade pozostáva prekreslenie len z vymazania grafiky
        // podlahy a nakreslenia nášho obrázka spárovaného
        // s generátorom plazmy na podlahu.
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            podlaha.obrázok(obrázok);
            Svet.prekresli();
        }
    }
    
    // Hlavná metóda (vstupný bod programu).
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("Plamienok.cfg");
        new Plamienok();
    }
}
 
 Výsledok:
 
  Ukážka horiaceho plamienka
 pri nemeniacej sa polohe kurzora myši.
 
  
 
 Ďalšie zdroje:
 
 Môžeme povedať, že algoritmus použitý v triede Plazma je
 zovšeobecnením optimalizovanej verzie generátora ohňa dostupného tu:
 
 
 smartyP: Old School Fire Algorithm in Modern Day
 WPF – SmartyPantsCoding.com. 2008. Dostupné na:
 
http://www.smartypantscoding.com/content/old-school-fire-algorithm-modern-day-wpf
 Citované: 27. 11. 2019.
 
 
 To znamená, že ide o základnú neoptimalizovanú verziu vhodnú na
 samoštúdium (pretože veci príliš nekomplikuje). Verzia algoritmu použitá
 v tejto triede ňou bola inšpirovaná, ale výsledná implementácia je
 odlišná.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Plazma(Obrázok obrázok)
Konštruktor plazmy prijímajúci obrázok, do ktorého bude
 prekresľovaný výsledok tohto generátora plazmy.
Plazma(Obrázok obrázok,
      int rozsah)
Alternatívny konštruktor umožňujúci nastavenie rozsahu hodnôt
 tejto inštancie simulátora.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
aktivita()
Táto metóda je predvolene prázdna.
boolean
aktivny()
 Alias pre aktívny.
boolean
aktívny()
Overí, či je tento generátor aktívny.
void
aktivuj()
Aktivuje tento pixelový generátor plazmy.
Zoznam&lt;Farba&gt;
dajPaletu()
Vráti aktuálny zoznam farieb palety používanej na kreslenie plazmy
 tejto inštancie simulátora.
void
deaktivuj()
Deaktivuje tento pixelový generátor plazmy.
Runnable
dej()
 Vráti aktuálna inštanciu príkazov deja
 (Runnable).
void
dej(Runnable vykonať)
 Nastaví novú inštanciu príkazov deja
 (Runnable) so zachovaním aktuálneho kroku deja.
void
dej(Runnable vykonať,
   int krok)
 Nastaví novú inštanciu príkazov deja
 (Runnable) a nový krok deja.
int
dohorenie()
 Zistí aktuálnu hodnotu dohorenia plazmy.
void
dohorenie(int dohorenie)
 Nastaví novú hodnotu dohorenia plazmy.
int
krok()
 Vráti aktuálnu hodnotu kroku deja.
void
krok(int krok)
 Nastaví novú hodnotu kroku deja.
void
nastavPaletu(Color[] farby)
Vygeneruje novú paletu farieb pre jednotlivé úrovne intenzít
 plazmy podľa skupiny zadaných (kľúčových) farieb s rovnomerným
 rozmiestnením.
void
nastavPaletu(Color[] farby,
            int[] zarážky)
Vygeneruje novú paletu farieb pre jednotlivé úrovne intenzít
 plazmy podľa skupiny zadaných (kľúčových) farieb s možnosťou
 ovplyvnenia ich umiestnenia vo výslednej palete zarážkami.
boolean
neaktivny()
 Alias pre neaktívny.
boolean
neaktívny()
Overí, či je tento generátor neaktívny.
void
pasivita()
Táto metóda je predvolene prázdna.
boolean
pasivny()
 Alias pre neaktívny.
boolean
pasívny()
 Alias pre neaktívny.
void
pracuj()
Táto metóda je vykonávaná automaticky pri každom tiku
 časovača sveta.
void
pretoc(double Δx,
      double Δy)
 Alias pre pretoč.
void
pretoč(double Δx,
      double Δy)
Pretočí mapu plazmy o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere.
void
pridajZdroj(double x,
           double y,
           double polomer)
Pridá nový zdroj plazmy.
void
pridajZdroj(double x,
           double y,
           double polomer,
           int rozsah)
Pridá nový zdroj plazmy.
void
pridajZdroj(double x,
           double y,
           double polomer,
           int dolnáHranica,
           int hornáHranica)
Pridá nový zdroj plazmy.
void
pridajZdroj(double x,
           double y,
           double polomer,
           int dolnáHranica,
           int hornáHranica,
           int trvanie)
Pridá nový zdroj plazmy.
void
pridajZdroj(double x,
           double y,
           double polomer,
           int dolnáHranica,
           int hornáHranica,
           int trvanie,
           int oneskorenie)
Pridá nový zdroj plazmy.
void
pridajZdroj(Poloha poloha,
           double polomer)
Pridá nový zdroj plazmy.
void
pridajZdroj(Poloha poloha,
           double polomer,
           int rozsah)
Pridá nový zdroj plazmy.
void
pridajZdroj(Poloha poloha,
           double polomer,
           int dolnáHranica,
           int hornáHranica)
Pridá nový zdroj plazmy.
void
pridajZdroj(Poloha poloha,
           double polomer,
           int dolnáHranica,
           int hornáHranica,
           int trvanie)
Pridá nový zdroj plazmy.
void
pridajZdroj(Poloha poloha,
           double polomer,
           int dolnáHranica,
           int hornáHranica,
           int trvanie,
           int oneskorenie)
Pridá nový zdroj plazmy.
void
roluj(double Δx,
     double Δy)
Posunie mapu plazmy o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere.
int
utlm()
 Alias pre útlm.
int
útlm()
 Zistí aktuálnu hodnotu útlmu plazmy.
void
utlm(int útlm)
 Alias pre útlm.
void
útlm(int útlm)
 Nastaví novú hodnotu útlmu plazmy.
int[]
vahyTahu()
 Alias pre váhyŤahu.
int[]
váhyŤahu()
Vráti štvoricu koeficientov váh ťahu, ktoré sú ústrednou súčasťou
 vzorca na výpočet plazmy.
void
vahyTahu(double x,
        double y)
 Alias pre váhyŤahu.
void
váhyŤahu(double x,
        double y)
Alternatívny spôsob nastavenia smerových váh ťahu plazmy.
void
vahyTahu(int[] váhy)
 Alias pre váhyŤahu.
void
váhyŤahu(int[] váhy)
Nastaví štvoricu koeficientov váh ťahu.
void
vahyTahu(int ťahDoľava,
        int ťahHore,
        int ťahDoprava,
        int ťahDole)
 Alias pre váhyŤahu.
void
váhyŤahu(int ťahDoľava,
        int ťahHore,
        int ťahDoprava,
        int ťahDole)
Nastaví nové váhy smerových koeficientov ťahu v pixelovej simulácii
 plazmy.
void
vahyTahu(Poloha bod)
 Alias pre váhyŤahu.
void
váhyŤahu(Poloha bod)
Alternatívny spôsob nastavenia smerových váh ťahu plazmy.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Plazma
public Plazma(Obrázok obrázok)
Konštruktor plazmy prijímajúci obrázok, do ktorého bude
 prekresľovaný výsledok tohto generátora plazmy. Obrázok je
 povinným parametrom konštruktora. Po priradení k tomuto generátoru
 bude obsah obrázka aktivitou tejto triedy celoplošne prepisovaný,
 preto sa jeho inštancia stáva v podstate nepoužiteľnou na iné
 účely.
 
 Upozornenie:
 Je dôležité si uvedomiť, že pri pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
 
 Poznámka:
 Generátor je predvolene aktívny, ale žiadna inštancia plazmy nikdy
 automaticky nespúšťa časovač sveta,
 od ktorého je automatizovaná činnosť generátora plazmy závislá.
 (Hovoríme o automatizovanej činnosti. Generátor môže fungovať aj
 nezávisle od toho, ak sa o jeho činnosť postará programátor.)
Parametre:
obrázok – inštancia obrázka, ktorá bude spárovaná s týmto
     pixelovým generátorom plazmy
Pozri tiež:
Plazma(Obrázok, int)
Plazma
public Plazma(Obrázok obrázok,
              int rozsah)
Alternatívny konštruktor umožňujúci nastavenie rozsahu hodnôt
 tejto inštancie simulátora. Parameter rozsah umožňuje určiť
 počet dovolených hodnôt používaných v simulátore na vyjadrenie
 intenzity plazmy. Predvolená hodnota je 256 hodnôt, čo zodpovedá
 číselnému rozsahu ⟨0; 255⟩. Počet hodnôt zároveň určuje počet farieb
 palety (pozri metódu nastavPaletu), pričom pri veľkých rozsahoch môžu byť viaceré položky
 palety (farby) idúce v rade za sebou identické. (Čiže rozsah neslúži
 na určenie výsledného počtu farieb, ale na ovplyvnenie výpočtu/činnosti
 simulátora.)
 
 Ďalšie informácie o konštrukcii simulátora nájdete v opise
 konštruktora Plazma(obrázok).
Parametre:
obrázok – inštancia obrázka, ktorá bude spárovaná s týmto
     pixelovým generátorom plazmy
rozsah – rozsah hodnôt intenzity plazmy v pixelovej simulácii
Pozri tiež:
Plazma(Obrázok)
Podrobnosti metód
nastavPaletu
public void nastavPaletu(Color[] farby,
                         int[] zarážky)
Vygeneruje novú paletu farieb pre jednotlivé úrovne intenzít
 plazmy podľa skupiny zadaných (kľúčových) farieb s možnosťou
 ovplyvnenia ich umiestnenia vo výslednej palete zarážkami. Prvý prvok
 poľa určuje farbu zodpovedajúcu najvyššej intenzite plazmy.
 
 Ak je pole farieb prázdne, tak metóda použije predvolené kľúčové
 farby (a vypočíta lineárny farebný prechod medzi nimi): sýtočervenú
 úplne nepriehľadnú a úplne priehľadnú čiernu. Ak pole obsahuje iba
 jeden prvok, tak ten sa stane prvou kľúčovou farbou (zodpovedajúcou
 najvyššej intenzite plazmy) a druhá kľúčová farba bude (podobne ako
 v predchádzajúcom prípade) úplne čierna priehľadná farba. Pri inom
 počte farieb bude paleta vygenerovaná podľa nich. Je vysoko
 odporúčané, aby posledná farba bola úplne transparentná
 (priehľadná).
 
 Ak nie sú zadané žiadne zarážky, farby budú vo výslednej palete
 rozmiestnené rovnomerne (a priestor medzi nimi bude vyplnený
 lineárne interpolovanými farbami). Zadanie zarážok ovplyvní polohu
 kľúčových farieb ležiacich medzi prvou a poslednou farbou. Z toho
 vyplýva, že počet využiteľných zarážok je o dve menší, než počet
 zadaných farieb. Poloha chýbajúcich zarážok je určená (vypočítaná)
 automaticky. Nadbytočné zarážky sú ignorované.
 
 Nasledujúci obrázok ukazuje predvolenú paletu farieb nakreslenú na
 bielom pozadí. Predvolená paleta prechádza z úplne nepriehľadnej
 červenej farby do úplne priehľadnej čiernej farby.
 
 
 Predvolená paleta plazmy (pričom biela farba vľavo
 vznikla nakreslením úplne priehľadnej čiernej farby na biele
 pozadie).
 
 Na ďalšom obrázku je zobrazená paleta vygenerovaná z týchto
 kľúčových farieb: 
     červená, 
     oranžová, 
 style="background-color: #ffee00; border: 1px solid
     žltá, 
     zelená, 
 style="background-color: #3783ff; border: 1px solid
     bledomodrá, 
     tmavomodrá a 
 style="background-color: #ffffff; border: 1px solid
     biela, pričom ich priehľadnosť postupne klesá.
 Toto je úplný príkaz:
 
 
// (Predpokladáme, že inštancia plazmy bola vytvorená skôr.)
plazma.nastavPaletu(new Farba[] {
    // Dúha.
    new Farba(0xC0_f60000, true),
    new Farba(0xA0_ffbc00, true),
    new Farba(0x80_ffee00, true),
    new Farba(0x60_4de94c, true),
    new Farba(0x40_3783ff, true),
    new Farba(0x20_4815aa, true),
    new Farba(0x00_ffffff, true)
});
 
 
 Dúhová paleta plazmy (pričom priehľadnosť farieb
 klesá smerom sprava doľava).
Parametre:
farby – pole farieb, ktoré majú byť použité vo výslednej palete
zarážky – nepovinné pole zarážok, ktorými sa dá ovplyvniť poloha
     zadaných (kľúčových) farieb vo výslednej palete
Pozri tiež:
nastavPaletu(Color[]), 
dajPaletu()
nastavPaletu
public void nastavPaletu(Color[] farby)
Vygeneruje novú paletu farieb pre jednotlivé úrovne intenzít
 plazmy podľa skupiny zadaných (kľúčových) farieb s rovnomerným
 rozmiestnením. (Prvý prvok poľa určuje farbu zodpovedajúcu najvyššej
 intenzite plazmy. Pozri aj metódu nastavPaletu(farby, zarážky).)
Parametre:
farby – pole farieb, ktoré majú byť použité vo výslednej palete
Pozri tiež:
nastavPaletu(Color[], int[]), 
dajPaletu()
dajPaletu
public Zoznam&lt;Farba&gt; dajPaletu()
Vráti aktuálny zoznam farieb palety používanej na kreslenie plazmy
 tejto inštancie simulátora. Akoukoľvek úpravou vráteného zoznamu nie
 je možné ovplyvniť skutočnú (vnútornú) paletu tohto simulátora.
Návratová hodnota:
zoznam farieb aktuálnej palety
Pozri tiež:
nastavPaletu(Color[], int[]), 
nastavPaletu(Color[])
váhyŤahu
public int[] váhyŤahu()
Vráti štvoricu koeficientov váh ťahu, ktoré sú ústrednou súčasťou
 vzorca na výpočet plazmy. Vrátené pole obsahuje štvoricu koeficientov
 smerových ťahov v tomto poradí: doľava, hore, doprava a dole. Viac
 podrobností o váhach ťahu je uvedených v opise metódy váhyŤahu(ťahDoľava, ťahHore,
 ťahDoprava, ťahDole) (dôležité je najmä upozornenie, ktoré sa
 nachádza v opise uvedenej metódy).
Návratová hodnota:
pole so štvoricou koeficientov smerových ťahov v tomto
     poradí: doľava, hore, doprava, dole
Pozri tiež:
váhyŤahu(int, int, int, int), 
váhyŤahu(double, double), 
váhyŤahu(Poloha), 
váhyŤahu(int[])
vahyTahu
public int[] vahyTahu()
 Alias pre váhyŤahu.
váhyŤahu
public void váhyŤahu(int ťahDoľava,
                     int ťahHore,
                     int ťahDoprava,
                     int ťahDole)
Nastaví nové váhy smerových koeficientov ťahu v pixelovej simulácii
 plazmy.
 
 Upozornenie:
 Trieda Plazma vykonáva pixelovú simuláciu
 a ľubovoľne veľká hodnota ťahu nedokáže vynútiť zmenu pohybu plazmy
 viac než o jeden pixel. Koeficienty ťahu sú len váhy, ktoré ovplvňujú
 to, ktorým smerom počas simulovania sa bude mať plazma tendenciu viac
 pohybovať. Rýchlejší pohyb plazmy sa dá docieliť len pohyblivým
 zdrojom plazmy. (Pozri napríklad opis metódy pridajZdroj
 alebo príklady v hlavnom opise tejto triedy.)
 
 Tieto váhové koeficienty sú vo vzorci simulácie použité na
 ovplyvnenie intenzít plazmy v jednotlivých bodoch simulácie podľa
 hodnôt ich susediacich bodov. Podľa toho, ktorá váha má vyššiu
 hodnotu sa plazma má tendenciu pohybovať jej smerom.
 
 Poznámka:
 Štvorica koeficientov ťahu je len jednou veličinou ovplyvňujúcou
 výsledok simulácie. Ďalšími dvomi sú dohorenie a útlm.
 
 Príklad:
 
 
import knižnica.*;
public class SmerováPlazma extends GRobot
{
    // Obrázok rozmermi totožný s veľkosťou plátna.
    private Obrázok obrázok = new Obrázok(250, 250);
    // Inštancia generátora plazmy prepojená na obrázok.
    private Plazma  plazma  = new Plazma(obrázok);
    // Inštancia deja generujúca v strede obrázka plazmovú guľôčku
    // s polomerom 10 bodov.
    private Runnable dej = () -&gt; plazma.pridajZdroj(stred, 10);
    
    // Konštruktor.
    private SmerováPlazma()
    {
        super(250, 250);
        skry();
        Svet.spustiČasovač();
    }
    
    // Reakcia na kliknutie myšou.
    @Override public void klik()
    {
        // Prepínač: Ak nie je definovaný dej plazmy, použije
        // sa naša inštancia deja, inak sa zruší…
        if (null == plazma.dej())
            plazma.dej(dej);
        else
            plazma.dej(null);
    }
    // Reakcia na ťahanie myšou.
    @Override public void ťahanieMyšou()
    {
        // Ťah sa nastaví podľa polohy myši (ktorá je teraz zároveň
        // smerovým vektorom, keďže zdroj plazmy je umiestnený
        // v strede plátna).
        if (null != plazma.dej())
            plazma.váhyŤahu(ÚdajeUdalostí.polohaMyši());
    }
    // Reakcia na časovač.
    @Override public void tik()
    {
        // Ak nie je svet prekreslený, tak sa prekreslí – v tomto
        // príklade pozostáva prekreslenie len z vymazania grafiky
        // podlahy a nakreslenia nášho obrázka spárovaného
        // s generátorom plazmy na podlahu.
        if (Svet.neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            podlaha.obrázok(obrázok);
            // Výpis aktuálneho nastavenia váh vo vrchnej časti plátna:
            skočNa(0, 100);
            int ťah[] = plazma.váhyŤahu();
            text(ťah[0] + ", " + ťah[1] + ", " + ťah[2] + ", " + ťah[3]);
            Svet.prekresli();
        }
    }
    
    // Hlavná metóda (vstupný bod programu).
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("SmerováPlazma.cfg");
        new SmerováPlazma();
    }
}
 
 Výsledok:
 
  Ukážka
 zmeny smerovania horenia plazmy pri pohybe kurzora myši približne po
 kruhovej dráhe okolo stredu.(Krížik znázorňujúci kurzor
 myši je dokreslený.)
Parametre:
ťahDoľava – hodnota koeficientu váhy ťahu smerom doľava
ťahHore – hodnota koeficientu váhy ťahu smerom hore
ťahDoprava – hodnota koeficientu váhy ťahu smerom doprava
ťahDole – hodnota koeficientu váhy ťahu smerom dole
Pozri tiež:
váhyŤahu(), 
váhyŤahu(double, double), 
váhyŤahu(Poloha), 
váhyŤahu(int[])
vahyTahu
public void vahyTahu(int ťahDoľava,
                     int ťahHore,
                     int ťahDoprava,
                     int ťahDole)
 Alias pre váhyŤahu.
váhyŤahu
public void váhyŤahu(double x,
                     double y)
Alternatívny spôsob nastavenia smerových váh ťahu plazmy. Zadané
 súradnice sú považované za súradnice kvázi smerového vektora, ktorý
 bude použitý na nastavenie váh takto:
 
 
 Ak je súradnica (x alebo y) kladná, tak jej stonásobok
 zaokrúhlený na celé číslo bude vložený do kladného smeru (doprava
 alebo hore) a jej pôvodná hodnota zaokrúhlená na celé číslo do
 záporného smeru (doľava alebo dole).
 Ak je súradnica (x alebo y) záporná, tak stonásobok jej
 absolútnej hodnoty zaokrúhlený na celé číslo bude vložený do
 záporného smeru (doľava alebo dole) a jej absolútna hodnota
 zaokrúhlená na celé číslo do kladného smeru (doprava alebo hore).
 Nulová hodnota súradnice spôsobí nastavenie dvojice k nej
 prislúchajúcich váh na hodnoty 10.
 
 
  Viac podrobností o váhach ťahu je uvedených v opise metódy
 váhyŤahu(ťahDoľava, ťahHore,
 ťahDoprava, ťahDole) (dôležité je najmä upozornenie, ktoré sa
 nachádza v opise uvedenej metódy).
Parametre:
x – x-ová súradnica kvázi smerového vektora určujúceho nové
     nastavenie váh ťahu (kvázi kosínus smeru)
y – y-ová súradnica kvázi smerového vektora určujúceho nové
     nastavenie váh ťahu (kvázi sínus smeru)
Pozri tiež:
váhyŤahu(), 
váhyŤahu(int, int, int, int), 
váhyŤahu(Poloha), 
váhyŤahu(int[])
vahyTahu
public void vahyTahu(double x,
                     double y)
 Alias pre váhyŤahu.
váhyŤahu
public void váhyŤahu(Poloha bod)
Alternatívny spôsob nastavenia smerových váh ťahu plazmy. Zadaný
 bod je spracovaný rovnako ako súradnice kvázi smerového vektora
 zadávané v parametroch metódy váhyŤahu(x, y) (podrobnosti pozri v jej opise).
Parametre:
bod – kvázi smerový vektor určujúci nové nastavenie váh ťahu
     (pozri aj opis metódy váhyŤahu(x, y))
Pozri tiež:
váhyŤahu(), 
váhyŤahu(int, int, int, int), 
váhyŤahu(double, double), 
váhyŤahu(int[])
vahyTahu
public void vahyTahu(Poloha bod)
 Alias pre váhyŤahu.
váhyŤahu
public void váhyŤahu(int[] váhy)
Nastaví štvoricu koeficientov váh ťahu. Metóda očakáva v zadanom
 poli štvoricu smerových koeficientov ťahov v nasledujúcom poradí:
 doľava, hore, doprava a dole. Prípadné chýbajúce hodnoty (napr. pri
 nedostatočnej dĺžke poľa) nie sú nastavené. Viac podrobností o váhach
 ťahu je uvedených v opise metódy váhyŤahu(ťahDoľava, ťahHore, ťahDoprava, ťahDole) (dôležité je najmä
 upozornenie, ktoré sa nachádza v opise uvedenej metódy).
Parametre:
váhy – pole so štvoricou smerových koeficientov ťahov v poradí:
     doľava, hore, doprava, dole
Pozri tiež:
váhyŤahu(), 
váhyŤahu(int, int, int, int), 
váhyŤahu(double, double), 
váhyŤahu(Poloha)
vahyTahu
public void vahyTahu(int[] váhy)
 Alias pre váhyŤahu.
dohorenie
public int dohorenie()
 Zistí aktuálnu hodnotu dohorenia plazmy.
 Podrobnosti o tejto vlastnosti sú uvedené v opise metódy dohorenie.
Návratová hodnota:
aktuálna hodnota dohorenia
Pozri tiež:
dohorenie(int), 
útlm()
dohorenie
public void dohorenie(int dohorenie)
 Nastaví novú hodnotu dohorenia plazmy.
 Táto vlastnosť určuje zmiernenie (spomalenie) horenia plazmy
 v pomere k váham. (Pozri váhyŤahu(ťahDoľava, ťahHore, ťahDoprava, ťahDole).) Čím sú hodnoty
 váh vyššie, tým menší vplyv má jednotkové dohorenie na výslednú
 rýchlosť horenia.
 
 (Algoritmicky je táto vlastnosť umiestnená do deliteľa/menovateľa
 vzorca používaného na výpočet simulácie horenia plazmy.)
 
 Poznámka:
 Dohorenie je len jednou z hlavných veličín ovplyvňujúcich výsledok
 simulácie. Ďalšími dvomi sú ťah a útlm
Parametre:
dohorenie – nová hodnota dohorenia
Pozri tiež:
dohorenie(), 
útlm(int)
útlm
public int útlm()
 Zistí aktuálnu hodnotu útlmu plazmy.
 Podrobnosti o tejto vlastnosti sú uvedené v opise metódy útlm.
Návratová hodnota:
aktuálna hodnota útlmu
Pozri tiež:
útlm(int), 
dohorenie()
utlm
public int utlm()
 Alias pre útlm.
útlm
public void útlm(int útlm)
 Nastaví novú hodnotu útlmu plazmy.
 Táto vlastnosť paušálne (celoplošne) tlmí intenzitu plameňov plazmy
 počas simulácie horenia, čím proces horenia urýchľuje.
 
 (Algoritmicky je táto vlastnosť realizovaná ako odčítanec intenzity
 vo vzorci používanom pri výpočte simulácie horenia plazmy.)
 
 Poznámka:
 Útlm je len jednou z hlavných veličín ovplyvňujúcich výsledok
 simulácie. Ďalšími dvomi sú ťah a dohorenie
Parametre:
útlm – nová hodnota útlmu
Pozri tiež:
útlm(), 
dohorenie(int)
utlm
public void utlm(int útlm)
 Alias pre útlm.
aktívny
public boolean aktívny()
Overí, či je tento generátor aktívny. Vracia presne opačnú
 informáciu ako metóda neaktívny (resp. metóda
 pasívny). Generátor je predvolene aktívny, ale
 žiadna inštancia plazmy nikdy automaticky nespúšťa časovač sveta, od ktorého je automatizovaná
 činnosť generátora plazmy závislá.
 
 Ak je generátor aktívny, tak metóda pracuj
 automaticky spúšťa reakciu aktivita.
 V opačnom prípade spúšťa reakciu pasivita.
 
 Poznámka:
 Podrobnosti o aktivite sú v opisoch metód: aktivita()/pasivita() a pracuj().
Návratová hodnota:
true ak je generátor aktívny, inak false
Pozri tiež:
aktívny(), 
neaktívny(), 
pasívny(), 
aktivuj(), 
deaktivuj(), 
aktivita(), 
pasivita(), 
pracuj(), 
krok(), 
dej()
aktivny
public boolean aktivny()
 Alias pre aktívny.
neaktívny
public boolean neaktívny()
Overí, či je tento generátor neaktívny. Vracia presne opačnú
 informáciu ako metóda aktívny. Generátor je
 predvolene aktívny, ale žiadna inštancia plazmy nikdy automaticky
 nespúšťa časovač sveta, od ktorého
 je automatizovaná činnosť generátora plazmy závislá.
 
 Ak je generátor aktívny, tak metóda pracuj
 automaticky spúšťa reakciu aktivita.
 V opačnom prípade spúšťa reakciu pasivita.
 
 Poznámka:
 Podrobnosti o aktivite sú v opisoch metód: aktivita()/pasivita() a pracuj().
Návratová hodnota:
true ak nie je generátor aktívny, inak
     false
Pozri tiež:
aktívny(), 
neaktívny(), 
pasívny(), 
aktivuj(), 
deaktivuj(), 
aktivita(), 
pasivita(), 
pracuj(), 
krok(), 
dej()
neaktivny
public boolean neaktivny()
 Alias pre neaktívny.
pasívny
public boolean pasívny()
 Alias pre neaktívny.
pasivny
public boolean pasivny()
 Alias pre neaktívny.
aktivuj
public void aktivuj()
Aktivuje tento pixelový generátor plazmy.
 
 Poznámka:
 Podrobnosti o aktivite sú v opisoch metód: aktivita()/pasivita() a pracuj().
Pozri tiež:
deaktivuj(), 
aktívny(), 
neaktívny(), 
pasívny(), 
aktivita(), 
pasivita(), 
pracuj(), 
krok(), 
dej()
deaktivuj
public void deaktivuj()
Deaktivuje tento pixelový generátor plazmy.
 
 Poznámka:
 Podrobnosti o aktivite sú v opisoch metód: aktivita()/pasivita() a pracuj().
Pozri tiež:
aktivuj(), 
aktívny(), 
neaktívny(), 
pasívny(), 
aktivita(), 
pasivita(), 
pracuj(), 
krok(), 
dej()
dej
public Runnable dej()
 Vráti aktuálna inštanciu príkazov deja
 (Runnable). Ďalšie podrobnosti o deji sú v opise
 metódy dej(vykonať).
Návratová hodnota:
vráti aktuálna inštanciu príkazov Runnable
Pozri tiež:
dej(Runnable), 
dej(Runnable, int), 
krok(), 
pracuj(), 
aktivita(), 
pasivita()
dej
public void dej(Runnable vykonať)
 Nastaví novú inštanciu príkazov deja
 (Runnable) so zachovaním aktuálneho kroku deja.
 Príkazy sú spúšťané len v stave aktívneho
 generátora. Ak je krok deja menší, než 1, príkazy deja
 nebudú vykonávané. Rovnako hodnota null inštancie
 príkazov v parametri vykonať spôsobí zastavenie
 vykonávania príkazov deja.
 
 Inou možnosťou ovplyvňovania správania sa generátora plazmy je
 odvodenie novej triedy od tejto triedy a prekrytie metódy aktivita, prípadne aj pasivita.
 Tie sú potom automaticky spúšťané podľa toho, či je generátor
 aktívny alebo pasívny.
 Je to podobný princíp ako je implementovaný v triede GRobot – GRobot.aktivita().
 
 Poznámka:
 Príkazy deja sú vykonávané tesne pred
 prepočtom údajov generátora plazmy a príkazy aktivity sú vykonané tesne po prepočte a prekreslení obsahu obrázka
 spárovaného s plazmou).
Parametre:
vykonať – inštancia Runnable s príkazmi deja
Pozri tiež:
dej(), 
dej(Runnable, int), 
krok(), 
pracuj(), 
aktivita(), 
pasivita()
dej
public void dej(Runnable vykonať,
                int krok)
 Nastaví novú inštanciu príkazov deja
 (Runnable) a nový krok deja. Podrobnosti o deji
 sú v opise metódy dej(vykonať).
Parametre:
vykonať – nová inštancia príkazov deja (pozri dej)
krok – nová hodnota kroku deja (pozri krok)
Pozri tiež:
dej(), 
dej(Runnable), 
krok(), 
pracuj(), 
aktivita(), 
pasivita()
krok
public int krok()
 Vráti aktuálnu hodnotu kroku deja. Ide
 o počet prepočtov simulátora plazmy, po ktorom sa majú vykonať
 príkazy deja (ak sú definované).
Návratová hodnota:
aktuálna hodnota kroku deja
Pozri tiež:
krok(int), 
dej(), 
pracuj(), 
aktivita(), 
pasivita()
krok
public void krok(int krok)
 Nastaví novú hodnotu kroku deja. Krok je
 počet prepočtov (pozri aj metódu pracuj) simulátora
 plazmy, po ktorom sa majú vykonať príkazy deja (ak sú definované a ak
 je generátor plazmy v aktívnom stave). Ak je
 krok deja menší, než 1, príkazy deja nebudú vykonávané.
 
 (Rovnako hodnota null inštancie príkazov v parametri
 vykonať niektorej z metód na nastavenie deja (napr.
 dej(vykonať)) spôsobí zastavenie vykonávania
 príkazov deja.)
 
 Poznámka:
 Príkazy deja sú vykonávané tesne pred
 prepočtom údajov generátora plazmy a príkazy aktivity sú vykonané tesne po prepočte a prekreslení obsahu obrázka
 spárovaného s plazmou).
Parametre:
krok – nová hodnota kroku deja
Pozri tiež:
krok(), 
dej(), 
pracuj(), 
aktivita(), 
pasivita()
pridajZdroj
public void pridajZdroj(double x,
                        double y,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica,
                        int trvanie,
                        int oneskorenie)
Pridá nový zdroj plazmy. Zdroj plazmy zvyšuje intenzitu plazmy
 v kruhovej oblasti so stredom na zadaných súradniciach a so zadaným
 polomerom. Výsledný nárast intenzity v jednotlivých bodoch zdroja
 závisí od dvoch veličín: vzdialenosť bodu od stredu zdroja a rozsah
 hraníc (parametre dolnáHranica a hornáHranica), ktorý
 je vstupom generátora pseudonáhodných čísiel. Trvanie generovania je
 určené v počte tikov, rovnako ako prípadné oneskorenie začatia
 generovania.
 
 Ďalšie verzie tejto metódy majú vynechaný jeden alebo viacero
 z nasledujúcich parametrov a na ich miesto sú dosadené nasledujúce
 hodnoty (uvedené v tom poradí, ktoré platí pre túto verziu metódy):
 
 
 dolnáHranica: 0, pričom parameter
 hornáHranica môže byť stále prítomný, ale v tom prípade je
 premenovaný na rozsah.
 hornáHranica (musí absentovať aj parameter dolnáHranica): maximálna dovolená hodnota intenzity plazmy určená
 rozsahom pri konštrukcii (predvolene je maximum rovné hodnote 255) –
 pozri konštruktor Plazma(obrázok,
 rozsah).
 trvanie: 1.
 oneskorenie: 0.
 
 
 
 
 Užitočné príklady použitia sú napríklad v hlavnom opise tejto triedy.
Parametre:
x – x-ová súradnica stredu oblasti zdroja
y – y-ová súradnica stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
trvanie – dĺžka aktivity zdroja v tikoch
oneskorenie – odloženie začiatku aktivity zdroja v tikoch
Pozri tiež:
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(double x,
                        double y,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica,
                        int trvanie)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie).
Parametre:
x – x-ová súradnica stredu oblasti zdroja
y – y-ová súradnica stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
trvanie – dĺžka aktivity zdroja v tikoch
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(double x,
                        double y,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie).
Parametre:
x – x-ová súradnica stredu oblasti zdroja
y – y-ová súradnica stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(double x,
                        double y,
                        double polomer,
                        int rozsah)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie).
Parametre:
x – x-ová súradnica stredu oblasti zdroja
y – y-ová súradnica stredu oblasti zdroja
polomer – polomer oblasti zdroja
rozsah – horná hranica generovania náhodných hodnôt intenzity
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(double x,
                        double y,
                        double polomer)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie).
Parametre:
x – x-ová súradnica stredu oblasti zdroja
y – y-ová súradnica stredu oblasti zdroja
polomer – polomer oblasti zdroja
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(Poloha poloha,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica,
                        int trvanie,
                        int oneskorenie)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie), pričom pri tejto verzii metódy sú súradnice
 polohy x a y nahradené inštanciou polohy poloha.
Parametre:
poloha – poloha stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
trvanie – dĺžka aktivity zdroja v tikoch
oneskorenie – odloženie začiatku aktivity zdroja v tikoch
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(Poloha poloha,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica,
                        int trvanie)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie), pričom pri tejto verzii metódy sú súradnice
 polohy x a y nahradené inštanciou polohy poloha.
Parametre:
poloha – poloha stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
trvanie – dĺžka aktivity zdroja v tikoch
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(Poloha poloha,
                        double polomer,
                        int dolnáHranica,
                        int hornáHranica)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie), pričom pri tejto verzii metódy sú súradnice
 polohy x a y nahradené inštanciou polohy poloha.
Parametre:
poloha – poloha stredu oblasti zdroja
polomer – polomer oblasti zdroja
dolnáHranica – dolná hranica generovania náhodných hodnôt
     intenzity
hornáHranica – horná hranica generovania náhodných hodnôt
     intenzity
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(Poloha poloha,
                        double polomer,
                        int rozsah)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie), pričom pri tejto verzii metódy sú súradnice
 polohy x a y nahradené inštanciou polohy poloha.
Parametre:
poloha – poloha stredu oblasti zdroja
polomer – polomer oblasti zdroja
rozsah – horná hranica generovania náhodných hodnôt intenzity
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double)
pridajZdroj
public void pridajZdroj(Poloha poloha,
                        double polomer)
Pridá nový zdroj plazmy. Informácie o zdrojoch sú centralizované
 v opise metódy pridajZdroj(x, y, polomer, dolnáHranica, hornáHranica,
 trvanie, oneskorenie), pričom pri tejto verzii metódy sú súradnice
 polohy x a y nahradené inštanciou polohy poloha.
Parametre:
poloha – poloha stredu oblasti zdroja
polomer – polomer oblasti zdroja
Pozri tiež:
pridajZdroj(double, double, double, int, int, int, int), 
pridajZdroj(double, double, double, int, int, int), 
pridajZdroj(double, double, double, int, int), 
pridajZdroj(double, double, double, int), 
pridajZdroj(double, double, double), 
pridajZdroj(Poloha, double, int, int, int, int), 
pridajZdroj(Poloha, double, int, int, int), 
pridajZdroj(Poloha, double, int, int), 
pridajZdroj(Poloha, double, int)
aktivita
public void aktivita()
Táto metóda je predvolene prázdna. Je automaticky spúšťaná
 metódou pracuj ak je tento generátor plazmy
 aktívny. Jej prekrytím sa dá upraviť
 správanie generátora v aktívnom stave. Inou možnosťou na
 ovplyvňovanie správania sa generátora plazmy je definícia
 deja.
 
 Poznámka:
 Príkazy deja sú vykonávané tesne pred
 prepočtom údajov generátora plazmy a príkazy aktivity sú vykonané tesne po prepočte a prekreslení obsahu obrázka
 spárovaného s plazmou).
Pozri tiež:
pasivita(), 
dej(Runnable), 
pracuj(), 
aktívny(), 
neaktívny(), 
pasívny(), 
aktivuj(), 
deaktivuj()
pasivita
public void pasivita()
Táto metóda je predvolene prázdna. Je automaticky spúšťaná
 metódou pracuj ak je generátor plazmy
 pasívny. Jej prekrytím sa dá upraviť
 správanie generátora v pasívnom stave.
Pozri tiež:
aktivita(), 
pracuj(), 
aktívny(), 
neaktívny(), 
pasívny(), 
aktivuj(), 
deaktivuj()
pracuj
public void pracuj()
Táto metóda je vykonávaná automaticky pri každom tiku
 časovača sveta. Ak je inštancia
 generátora plazmy aktívna, tak sú vykonané
 príkazy deja (ak sú definované a ak je
 krok kladný), hneď potom sú prepočítané údaje plazmy a prekreslený
 obsah obrázka, s ktorým je inštancia tohto generátora plazmy
 prepojená a nakoniec je vykonaná metóda aktivita
 (čo má výzman pri inštanciách prekrytých tried). Ak je generátor
 neaktívny, tak je len vykonaná metóda
 pasivita (pričom opäť – má to výzman len pri
 inštanciách prekrytých tried).
 
 Rôzne ďalšie informácie môžete nájsť v opisoch súvisiacich
 metód (v zozname nižšie).
Pozri tiež:
aktivita(), 
pasivita(), 
krok(), 
dej(), 
aktívny(), 
neaktívny(), 
pasívny(), 
aktivuj(), 
deaktivuj()
roluj
public void roluj(double Δx,
                  double Δy)
Posunie mapu plazmy o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere. Tá časť údajov plazmy, ktorá opustí
 rozmery mapy, bude navždy stratená, pričom na protiľahlej strane
 vznikne prázdna oblasť (oblasť s nulovým horením). Metóda má
 využitie napríklad pri posune hracej plochy s horením uloženým
 v obrázku, pričom musíme zabezpečiť, aby boli vzniknuté prázdne
 časti mapy horenia korektne dogenerované. Ak je potrebné pretočiť
 údaje plazmy dookola (t. j. bez straty obsahu), tak treba použiť
 metódu pretoč.
 
 Poznámka:
 Pri použití tejto metódy sa zároveň posunú všetky zdroje plazmy
 (pozri metódu pridajZdroj). Aj zdroje plazmy, ktoré sa nachádzajú za
 hranicami obrázka ešte môžu mať vplyv na obsah generátora, ak majú
 dostatočný rozsah.
 
 Upozornenie:
 Je dôležité si uvedomiť, že pri pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
pretoč
public void pretoč(double Δx,
                   double Δy)
Pretočí mapu plazmy o zadaný počet bodov v horizontálnom
 a/alebo vertikálnom smere. Tá časť údajov plazmy, ktorá by mala
 pri pretočení opustiť rozmery mapy, sa premietne do protiľahlej
 strany mapy. Pretáčaním údajov plazmy v ľubovoľnom smere sa nikdy
 nestratia jej údaje a spätným posunom sa dá získať pôvodný stav
 (ak medzitým nebol vykonaný ďalší prepočet). Ak je z rôznych
 dôvodov potrebné, aby sa pri pretáčaní údajov plazmy tie časti,
 ktoré opúšťajú rozmery mapy stratili a aby vzniknuté prázdne časti
 zostali skutočne prázdne (pripravené na nové generovanie horenia),
 treba použiť metódu roluj.
 
 Poznámka:
 Pri použití tejto metódy sa zároveň posunú (s pretočením) všetky
 zdroje plazmy (pozri metódu pridajZdroj). Pretočenie zdroja nastane
 ak jeho súradnice opustia hranice obrázka priradeného k tomuto
 generátoru plazmy.
 
 Upozornenie:
 Je dôležité si uvedomiť, že pri pripojení plazmy k obrázku nemá
 rolovanie alebo pretáčanie samotného obrázka zmysel, pretože jeho
 obsah je vždy úplne nahradený generátorom plazmy. Na pretáčanie
 obsahu takého obrázka má zmysel použiť iba metódy plazmy.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
pretoc
public void pretoc(double Δx,
                   double Δy)
 Alias pre pretoč.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Poloha
Všetky známe implementujúce triedy:
Bod, Castica, Častica, GRobot, Oblast, Oblasť, PoznamkovyBlok, PoznámkovýBlok, RolovaciaLista, RolovaciaLišta, Tlacidlo, Tlačidlo
public interface Poloha
Rozhranie slúži na implementáciu metód slúžiacich na zistenie polohy
 objektu. Rozhranie vhodne dopĺňa jeho implementácia Bod.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static Bod
stred
Preddefinovaná inštancia stredu súradnicovej sústavy.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
boolean
jeNa(double x,
    double y)
Prototyp metódy na porovnanie zhody obidvoch zadaných súradníc.
boolean
jeNa(Poloha poloha)
Prototyp metódy na porovnanie zhody obidvoch súradníc objektu.
Bod
poloha()
Prototyp metódy na zistenie obidvoch súradníc objektu.
double
polohaX()
Prototyp metódy na zistenie súradnice objektu.
double
polohaY()
Prototyp metódy na zistenie súradnice objektu.
double
suradnicaX()
Prototyp metódy na zistenie súradnice objektu.
double
súradnicaX()
Prototyp metódy na zistenie súradnice objektu.
double
suradnicaY()
Prototyp metódy na zistenie súradnice objektu.
double
súradnicaY()
Prototyp metódy na zistenie súradnice objektu.
Podrobnosti atribútov
stred
static final Bod stred
Preddefinovaná inštancia stredu súradnicovej sústavy. Ide o polohu
 so súradnicami 0, 0. Hodnotu tohto bodu nie je možné zmeniť!
Podrobnosti metód
polohaX
double polohaX()
Prototyp metódy na zistenie súradnice objektu.
polohaY
double polohaY()
Prototyp metódy na zistenie súradnice objektu.
súradnicaX
double súradnicaX()
Prototyp metódy na zistenie súradnice objektu.
suradnicaX
double suradnicaX()
Prototyp metódy na zistenie súradnice objektu.
súradnicaY
double súradnicaY()
Prototyp metódy na zistenie súradnice objektu.
suradnicaY
double suradnicaY()
Prototyp metódy na zistenie súradnice objektu.
poloha
Bod poloha()
Prototyp metódy na zistenie obidvoch súradníc objektu.
jeNa
boolean jeNa(double x,
             double y)
Prototyp metódy na porovnanie zhody obidvoch zadaných súradníc.
jeNa
boolean jeNa(Poloha poloha)
Prototyp metódy na porovnanie zhody obidvoch súradníc objektu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda PoložkaPonuky
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.AbstractButton
javax.swing.JMenuItem
PoložkaPonuky
Všetky implementované rozhrania:
ImageObserver, ItemSelectable, MenuContainer, Serializable, Accessible, MenuElement, SwingConstants
Známe priame odvodené triedy:
PolozkaPonuky
public class PoložkaPonuky
extends JMenuItem
Táto trieda umožňuje vo svete grafického robota používať položky
 ponuky aplikácie. Každá nová položka ponuky je automaticky zaradená do
 ponuky aplikáce (hlavnej ponuky) na určitú pozíciu. Hlavná ponuka
 obsahuje vo východiskovom stave jednu rolovaciu ponuku s prevolenou
 položkou „Koniec.“ Prvá položka je vložená pred ňu a je automaticky
 oddelená oddeľovačom, ďalšie položky sú umiestňované systematicky za
 ňou (každá za naposledy definovanou položkou, prípadne oddeľovačom).
 Položky môžeme pridávať buď vytváraním nových inštancií tejto triedy,
 alebo použitím niektorej z metód pridajPoložkuPonuky.
 Oba spôsoby ukazuje nasledujúci príklad:
 
 
final PoložkaPonuky položkaPípni = new PoložkaPonuky("Pípni");
final PoložkaPonuky položkaVypíš = Svet.pridajPoložkuPonuky("Vypíš „Ahoj!“");
new ObsluhaUdalostí()
{
    @Override public void voľbaPoložkyPonuky()
    {
        if (položkaPípni.aktivovaná())
        {
            Svet.pípni();
        }
        // Alternatívny spôsob overenia zvolenia položky
        if (položkaVypíš == ÚdajeUdalostí.položkaPonuky())
        // Namiesto: if (položkaVypíš.aktivovaná())
        {
            Svet.vypíšRiadok("Ahoj!");
        }
    }
};
 
 Výsledok:
 
 
  
 
 Ukážka ponuky dotvorenej
 príkladoma zobrazenej v OS Windows.
 Ukážka ponuky dotvorenej
 príkladoma zobrazenej v macOS (predtým OS X
 a Mac OS).
 
 Na príklade vidno rozšírenie funkcionality triedy položiek ponuky
 oproti štandardnej triedy Javy (JMenuItem). Naša
 trieda poskytuje mechanizmus kontroly aktivácie položky ponuky, ktorý je previazaný s vnútornými reakciami
 triedy GRobot. Konštruktory sú oproti originálnej
 triede zjednodušené, ikonu môžeme k položke pridať po jej vytvorení
 metódou ikona, ktorá prijíma názov súboru
 s obrázkom, ako je to zaužívané v rámci sveta grafického robota:
 
 
final PoložkaPonuky položkaVoľba = new PoložkaPonuky("Voľba");
položkaVoľba.ikona("začiarknuté.png");
 
 Hlavná ponuka môže byť rozšírená o ďalšie rolovacie ponuky metódou
 pridajPoložkuHlavnejPonuky a oddeľovače medzi skupinami položiek
 ponuky môžeme pridávať metódou pridajOddeľovačPonuky.
Pozri tiež:
JMenuItem, 
Svet.vymažPonuku(), 
Svet.pridajPoložkuHlavnejPonuky(String), 
Svet.pridajPoložkuHlavnejPonuky(String, int), 
Svet.pridajPoložkuPonuky(String), 
Svet.pridajPoložkuPonuky(String, int), 
Svet.pridajPoložkuPonuky(String, int, int), 
Svet.pridajOddeľovačPonuky(), 
Svet.pridajPoložkuPonukyVymazať(), 
Svet.pridajPoložkuPonukyPrekresliť(), 
Svet.pridajPoložkuPonukyKoniec(), 
ÚdajeUdalostí.položkaPonuky(), 
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JMenuItem
JMenuItem.AccessibleJMenuItem
Vnorené triedy/rozhrania odvodené od triedy javax.swing.AbstractButton
AbstractButton.AccessibleAbstractButton, AbstractButton.ButtonChangeListener
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JComponent
JComponent.AccessibleJComponent
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty zdedené z triedy javax.swing.AbstractButton
actionListener, BORDER_PAINTED_CHANGED_PROPERTY, CONTENT_AREA_FILLED_CHANGED_PROPERTY, DISABLED_ICON_CHANGED_PROPERTY, DISABLED_SELECTED_ICON_CHANGED_PROPERTY, FOCUS_PAINTED_CHANGED_PROPERTY, HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY, HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY, changeEvent, changeListener, ICON_CHANGED_PROPERTY, itemListener, MARGIN_CHANGED_PROPERTY, MNEMONIC_CHANGED_PROPERTY, model, MODEL_CHANGED_PROPERTY, PRESSED_ICON_CHANGED_PROPERTY, ROLLOVER_ENABLED_CHANGED_PROPERTY, ROLLOVER_ICON_CHANGED_PROPERTY, ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY, SELECTED_ICON_CHANGED_PROPERTY, TEXT_CHANGED_PROPERTY, VERTICAL_ALIGNMENT_CHANGED_PROPERTY, VERTICAL_TEXT_POSITION_CHANGED_PROPERTY
Atribúty zdedené z triedy javax.swing.JComponent
listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
Atribúty zdedené z triedy java.awt.Component
accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania javax.swing.SwingConstants
BOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
PoložkaPonuky(String text)
Konštruktor, ktorý vytvorí položku so zadaným textom a pridá
 ju do hlavnej ponuky sveta.
PoložkaPonuky(String text,
             int mnemonickáSkratka)
Konštruktor, ktorý vytvorí položku so zadaným textom,
 mnemonickou skratkou a pridá ju do hlavnej ponuky sveta.
PoložkaPonuky(String text,
             int mnemonickáSkratka,
             int klávesováSkratka)
Konštruktor, ktorý vytvorí položku so zadaným textom,
 mnemonickou a klávesovou skratkou a pridá ju do hlavnej
 ponuky sveta.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
aktivna()
 Alias pre aktívna.
boolean
aktívna()
Overí, či je položka aktívna.
boolean
aktivovana()
 Alias pre aktivovaná.
boolean
aktivovaná()
Overí, či bola táto položka ponuky naposledy aktivovaná
 (zvolená).
void
aktivuj()
Aktivuje položku.
void
deaktivuj()
Deaktivuje položku.
Farba
farbaPozadia()
 Číta farbu pozadia položky.
void
farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia položky
 podľa zadanej farebnej inštancie.
void
farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia položky podľa zadaného
 objektu.
Farba
farbaPozadia(int r,
            int g,
            int b)
Nastaví farbu pozadia položky podľa zadaných farebných zložiek.
Farba
farbaPozadia(int r,
            int g,
            int b,
            int a)
Nastaví farbu a (ne)priehľadnosť pozadia položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
Farba
farbaTextu()
 Zistí aktuálnu farbu textu položky.
void
farbaTextu(Color nováFarba)
 Nastav farbu textu položky.
void
farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu položky podľa zadaného objektu.
Farba
farbaTextu(int r,
          int g,
          int b)
Nastaví farbu textu položky podľa zadaných farebných zložiek.
Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastaví farbu a (ne)priehľadnosť textu položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
Obrázok
ikona()
 Vráti základnú ikonu položky alebo
 null ak položka nemá priradenú ikonu, ktorá bola
 vytvorená z inštancie typu Obrázok.
void
ikona(Image obrázok)
 Nastaví alebo odstráni ikonu položky
 určenú obrázkom.
void
ikona(String súbor)
Nastaví alebo odstráni ikonu položky uloženú v súbore s obrázkom.
void
klavesovaSkratka(int kódKlávesu)
 Alias pre klávesováSkratka.
void
klávesováSkratka(int kódKlávesu)
Zmení klávesovú skratku tejto položky ponuky.
void
klavesovaSkratka(int kódKlávesu,
                int modifikátor)
 Alias pre klávesováSkratka.
void
klávesováSkratka(int kódKlávesu,
                int modifikátor)
Zmení klávesovú skratku tejto položky ponuky.
int
medzeraMedziIkonouATextom()
 Zistí aktuálu veľkosť medzery medzi ikonou
 a textom tejto položky.
void
medzeraMedziIkonouATextom(int medzera)
 Ak má toto položka nastavenú ikonu aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
void
mnemonickaSkratka(int kódSkratky)
 Alias pre mnemonickáSkratka.
void
mnemonickáSkratka(int kódSkratky)
Zmení mnemonickú skratku tejto položky ponuky.
Obrazok
obrazok()
 Alias pre ikona.
void
obrazok(Image obrázok)
 Alias pre ikona.
void
obrazok(String súbor)
 Alias pre ikona.
void
odznac()
 Alias pre odznač.
void
odznač()
Zruší označenie položky.
void
oznac()
 Alias pre označ.
boolean
oznacena()
 Alias pre označená.
void
označ()
Označí položku.
boolean
označená()
Overí, či je položka označená.
Pismo
pismo()
 Alias pre písmo.
Písmo
písmo()
 Číta aktuálny typ písma textu položky.
void
pismo(Font novéPísmo)
 Alias pre písmo.
void
písmo(Font novéPísmo)
 Nastaví nový typ písma textu položky.
Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
Písmo
písmo(String názov,
     double veľkosť)
Nastaví nový typ písma textu položky.
void
prikaz(String príkaz)
 Alias pre príkaz.
void
príkaz(String príkaz)
Prepojí túto položku ponuky s príkazom priradeným ku
 klávesovej skratke.
String[]
riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tejto položke priradený
 v textovej forme.
Skript
skript()
Vráti skript priradený k tejto položke alebo null,
 ak k položke nebol priradený žiadny skript.
void
skript(Skript skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skript(String skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skript(String[] riadky)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení.
void
skry()
Skryje položku.
String
text()
 Prečíta aktuálny text položky.
void
text(String text)
 Nastaví nový text položky.
boolean
viditelna()
 Alias pre viditeľná.
boolean
viditeľná()
Zistí, či je položka viditeľná (zobrazená) alebo nie.
void
zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
void
zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia položky.
void
zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
void
zdedenáFarbaTextu()
Nastaví zdedenú farbu textu položky.
void
zobraz()
Zobrazí položku.
boolean
zobrazena()
 Alias pre zobrazená.
boolean
zobrazená()
Zistí, či je položka zobrazená (viditeľná) alebo nie.
void
zrusOznacenie()
 Alias pre zrušOznačenie.
void
zrušOznačenie()
Zruší označenie položky.
boolean
zvolena()
 Alias pre aktivovaná.
boolean
zvolená()
 Alias pre aktivovaná.
Metódy zdedené z triedy javax.swing.JMenuItem
actionPropertyChanged, addMenuDragMouseListener, addMenuKeyListener, configurePropertiesFromAction, fireMenuDragMouseDragged, fireMenuDragMouseEntered, fireMenuDragMouseExited, fireMenuDragMouseReleased, fireMenuKeyPressed, fireMenuKeyReleased, fireMenuKeyTyped, getAccelerator, getAccessibleContext, getComponent, getMenuDragMouseListeners, getMenuKeyListeners, getSubElements, getUIClassID, init, isArmed, menuSelectionChanged, paramString, processKeyEvent, processMenuDragMouseEvent, processMenuKeyEvent, processMouseEvent, removeMenuDragMouseListener, removeMenuKeyListener, setAccelerator, setArmed, setEnabled, setModel, setUI, updateUI
Metódy zdedené z triedy javax.swing.AbstractButton
addActionListener, addChangeListener, addImpl, addItemListener, createActionListener, createActionPropertyChangeListener, createChangeListener, createItemListener, doClick, doClick, fireActionPerformed, fireItemStateChanged, fireStateChanged, getAction, getActionCommand, getActionListeners, getDisabledIcon, getDisabledSelectedIcon, getDisplayedMnemonicIndex, getHideActionText, getHorizontalAlignment, getHorizontalTextPosition, getChangeListeners, getIcon, getIconTextGap, getItemListeners, getLabel, getMargin, getMnemonic, getModel, getMultiClickThreshhold, getPressedIcon, getRolloverIcon, getRolloverSelectedIcon, getSelectedIcon, getSelectedObjects, getText, getUI, getVerticalAlignment, getVerticalTextPosition, checkHorizontalKey, checkVerticalKey, imageUpdate, isBorderPainted, isContentAreaFilled, isFocusPainted, isRolloverEnabled, isSelected, paintBorder, removeActionListener, removeChangeListener, removeItemListener, removeNotify, setAction, setActionCommand, setBorderPainted, setContentAreaFilled, setDisabledIcon, setDisabledSelectedIcon, setDisplayedMnemonicIndex, setFocusPainted, setHideActionText, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabel, setLayout, setMargin, setMnemonic, setMnemonic, setMultiClickThreshhold, setPressedIcon, setRolloverEnabled, setRolloverIcon, setRolloverSelectedIcon, setSelected, setSelectedIcon, setText, setUI, setVerticalAlignment, setVerticalTextPosition
Metódy zdedené z triedy javax.swing.JComponent
addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getĎalšieFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintComponent, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printComponent, printChildren, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setĎalšieFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, setVisible, unregisterKeyboardAction, update
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, checkImage, checkImage, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
PoložkaPonuky
public PoložkaPonuky(String text)
Konštruktor, ktorý vytvorí položku so zadaným textom a pridá
 ju do hlavnej ponuky sveta.
Parametre:
text – reťazec textu pridávanej položky ponuky
Pozri tiež:
Svet.pridajPoložkuPonuky(String)
PoložkaPonuky
public PoložkaPonuky(String text,
                     int mnemonickáSkratka)
Konštruktor, ktorý vytvorí položku so zadaným textom,
 mnemonickou skratkou a pridá ju do hlavnej ponuky sveta.
Parametre:
text – reťazec textu pridávanej položky ponuky
mnemonickáSkratka – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
Pozri tiež:
Svet.pridajPoložkuPonuky(String, int)
PoložkaPonuky
public PoložkaPonuky(String text,
                     int mnemonickáSkratka,
                     int klávesováSkratka)
Konštruktor, ktorý vytvorí položku so zadaným textom,
 mnemonickou a klávesovou skratkou a pridá ju do hlavnej
 ponuky sveta. Klávesová skratka je definovaná s predvoleným
 modifikátorom používaným pre klávesové skratky položiek
 ponuky. Ten je závislý od operačného systému, napríklad vo Windows
 je to kláves Ctrl, v macOS (predtým OS X a Mac OS) je to
 kláves ⌘ (Command).
 
 Tip: Ak chcete definovať klávesovú skratku
 bez modifikátora, použite metódu klávesováSkratka(kódKlávesu, modifikátor) s hodnotou modifikátora
 0.
Parametre:
text – reťazec textu pridávanej položky ponuky
mnemonickáSkratka – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
klávesováSkratka – kód klávesovej skratky (príklad: Kláves.VK_B)
Pozri tiež:
Svet.pridajPoložkuPonuky(String, int, int)
Podrobnosti metód
aktivovaná
public boolean aktivovaná()
Overí, či bola táto položka ponuky naposledy aktivovaná
 (zvolená). Metóda je použiteľná v reakcii voľbaPoložkyPonuky.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true ak bola pri poslednom vyvolaní ponuky
     aktivovaná práve táto položka, v opačnom prípade false
aktivovana
public boolean aktivovana()
 Alias pre aktivovaná.
zvolená
public boolean zvolená()
 Alias pre aktivovaná.
zvolena
public boolean zvolena()
 Alias pre aktivovaná.
aktívna
public boolean aktívna()
Overí, či je položka aktívna. Aktívna položka znamená, že je
 použiteľná používateľom. S deaktivovanými položkami používateľ
 nemôže manipulovať.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true – je aktívna;
     false – nie je aktívna
Pozri tiež:
aktivuj(), 
deaktivuj()
aktivna
public boolean aktivna()
 Alias pre aktívna.
aktivuj
public void aktivuj()
Aktivuje položku. Predvolene je položka aktívna. Ak ju deaktivujeme (pozri nižšie), tak po vykonaní tohto
 príkazu položky (aktivuj), bude opäť použiteľná a bude
 reagovať na klikanie myšou aj voľbu klávesnicou.
Pozri tiež:
aktívna(), 
aktivuj(), 
deaktivuj()
deaktivuj
public void deaktivuj()
Deaktivuje položku. Položka prestane byť použiteľná, prestane
 reagovať na myš a klávesnicu.
Pozri tiež:
aktívna(), 
aktivuj(), 
deaktivuj()
označená
public boolean označená()
Overí, či je položka označená. Označená položka zmení svoj vzhľad,
 spôsob zmeny je závislý od operačného systému a interpretácia tohto
 stavu závisí od programátora…
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívna – aktivovaná a označená – zvolená!
 Metóda aktivovaná a jej alias zvolená zisťujú, či bola stanovená položka naposledy
 aktivovaná (zvolená). Metóda aktívna overuje,
 či je stanovená položka použiteľná a metóda označená zisťuje, či bola položka takzvane označená (čo môže mať subjektívny význam).
Návratová hodnota:
true – je označená;
     false – nie je označená
Pozri tiež:
označ(), 
odznač(), 
zrušOznačenie()
oznacena
public boolean oznacena()
 Alias pre označená.
označ
public void označ()
Označí položku. (Pre viac informácií pozri opis metódy označená.)
Pozri tiež:
aktívna(), 
odznač(), 
zrušOznačenie()
oznac
public void oznac()
 Alias pre označ.
odznač
public void odznač()
Zruší označenie položky. (Pre viac informácií pozri opis metódy
 označená.)
Pozri tiež:
aktívna(), 
označ(), 
zrušOznačenie()
odznac
public void odznac()
 Alias pre odznač.
zrušOznačenie
public void zrušOznačenie()
Zruší označenie položky. (Pre viac informácií pozri opis metódy
 označená.)
Pozri tiež:
aktívna(), 
označ(), 
odznač()
zrusOznacenie
public void zrusOznacenie()
 Alias pre zrušOznačenie.
viditeľná
public boolean viditeľná()
Zistí, či je položka viditeľná (zobrazená) alebo nie. Po
 vytvorení je položka predvolene viditeľná, môžeme ju skrývať
 a zobrazovať metódami skry a zobraz. (Položky ponúk však namiesto skrývania a zobrazovania
 odporúčame aktivovať alebo deaktivovať.) Alternatívou tejto metódy je metóda
 zobrazená.
Pozri tiež:
zobrazená(), 
zobraz(), 
skry()
viditelna
public boolean viditelna()
 Alias pre viditeľná.
zobrazená
public boolean zobrazená()
Zistí, či je položka zobrazená (viditeľná) alebo nie. Po
 vytvorení je položka predvolene viditeľná, môžeme ju skrývať
 a zobrazovať metódami skry a zobraz. (Položky ponúk však namiesto skrývania a zobrazovania
 odporúčame aktivovať alebo deaktivovať.) Alternatívou tejto metódy je metóda
 viditeľná.
Pozri tiež:
viditeľná(), 
zobraz(), 
skry()
zobrazena
public boolean zobrazena()
 Alias pre zobrazená.
zobraz
public void zobraz()
Zobrazí položku. (Pre viac informácií pozri opis metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
skry()
skry
public void skry()
Skryje položku. (Pre viac informácií pozri opis metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
zobraz()
farbaTextu
public Farba farbaTextu()
 Zistí aktuálnu farbu textu položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba textu položky (objekt typu Farba)
farbaTextu
public void farbaTextu(Color nováFarba)
 Nastav farbu textu položky. Nastaví farbu
 a priehľadnosť textu položky podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou textu
     položky; jestvuje paleta predvolených farieb (pozri napr.:
     biela, červená, čierna…)
farbaTextu
public void farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu položky podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu textu položky
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b)
Nastaví farbu textu položky podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b,
                        int a)
Nastaví farbu a (ne)priehľadnosť textu položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
zdedenáFarbaTextu
public void zdedenáFarbaTextu()
Nastaví zdedenú farbu textu položky. Farba textu položky bude
 zdedená od nadradeného komponentu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaTextu
public void zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
farbaPozadia
public Farba farbaPozadia()
 Číta farbu pozadia položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba pozadia položky (objekt typu Farba)
farbaPozadia
public void farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia položky
 podľa zadanej farebnej inštancie.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaPozadia
public void farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia položky podľa zadaného
 objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu pozadia
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b)
Nastaví farbu pozadia položky podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b,
                          int a)
Nastaví farbu a (ne)priehľadnosť pozadia položky podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
zdedenáFarbaPozadia
public void zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia položky.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaPozadia
public void zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
písmo
public Písmo písmo()
 Číta aktuálny typ písma textu položky.
Návratová hodnota:
objekt typu Písmo – aktuálne písmo
Pozri tiež:
písmo(Font), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo()
 Alias pre písmo.
písmo
public void písmo(Font novéPísmo)
 Nastaví nový typ písma textu položky.
Parametre:
novéPísmo – objekt typu Písmo alebo Font
     určujúci nový typ písma
Pozri tiež:
písmo(), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public Písmo písmo(String názov,
                   double veľkosť)
Nastaví nový typ písma textu položky. (Nová inštancia triedy
 Písmo je touto metódou vrátená na prípadné ďalšie
 použitie.)
Parametre:
názov – názov písma; môže byť všeobecný názov logického
     písma (Dialog, DialogInput, Monospaced, Serif, SansSerif…)
     alebo názov konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená
     na typ float)
Návratová hodnota:
nový objekt typu Písmo
Pozri tiež:
písmo(), 
písmo(Font), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo(String názov,
                   double veľkosť)
 Alias pre písmo.
text
public String text()
 Prečíta aktuálny text položky.
Návratová hodnota:
aktuálny text položky
Pozri tiež:
text(String)
text
public void text(String text)
 Nastaví nový text položky.
Parametre:
text – nový text položky
Pozri tiež:
text()
ikona
public void ikona(String súbor)
Nastaví alebo odstráni ikonu položky uloženú v súbore s obrázkom.
 Táto metóda nastavuje základnú ikonu položky. (Bez nej nemá význam
 priraďovať položke ostatné druhy ikon…)
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
 
 Poznámka: Z dôvodu konzistencie je k tejto
 metóde definovaný alias obrazok(súbor)
 (s názvom bez diakritiky), ktorý má korešpondovať s aliasom metódy
 ikona().
Parametre:
súbor – názov súboru s obrázkom, ktorý bude použitý na
     vytvorenie ikony položky alebo (String)null
     ak chceme ikonu položky odstrániť
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
ikona(Image), 
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(String súbor)
 Alias pre ikona.
ikona
public void ikona(Image obrázok)
 Nastaví alebo odstráni ikonu položky
 určenú obrázkom. Táto metóda nastavuje základnú ikonu položky.
 (Bez nej nemá význam priraďovať položke ostatné druhy ikon…)
 
 Poznámka: Z dôvodu konzistencie je k tejto
 metóde definovaný alias obrazok(obrázok)
 (s názvom bez diakritiky), ktorý má korešpondovať s aliasom metódy
 ikona() (určeným na čítanie ikony).
Parametre:
obrázok – obrázok určujúci novú ikonu položky alebo
     (Image)null ak chceme ikonu položky
     odstrániť
Pozri tiež:
ikona(String)
obrazok
public void obrazok(Image obrázok)
 Alias pre ikona.
ikona
public Obrázok ikona()
 Vráti základnú ikonu položky alebo
 null ak položka nemá priradenú ikonu, ktorá bola
 vytvorená z inštancie typu Obrázok.
 
 Poznámka: Názov tejto metódy neobsahuje
 žiadnu diakritiku, preto nemohol byť definovaný prislúchajúci alias,
 ktorý by vracal objekt typu Obrazok (t. j.
 triedy aliasu, ktorej názov tiež neobsahuje diakritiku).
 Z toho dôvodu je alias nahradený metódou obrazok (bez diakritiky).
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
ikona(String), 
ikona(Image)
obrazok
public Obrazok obrazok()
 Alias pre ikona.
medzeraMedziIkonouATextom
public int medzeraMedziIkonouATextom()
 Zistí aktuálu veľkosť medzery medzi ikonou
 a textom tejto položky.
 
 Poznámka: Táto metóda zrkadlí definíciu
 z triedy AbstractButton (čiže položka je
 z pohľadu objektového modelu chápaná ako tlačidlo). V niektorých
 definíciách vzhľadu (L&F) však nemusia byť položky chápané ako
 typické tlačidlá, ich vzhľad sa môže odlišovať a pokus o prácu
 s medzerou medzi ikonou a textom nemusí mať očakávaný efekt.
Návratová hodnota:
celé číslo vyjadrujúce počet pixelov medzi ikonou
     a textom tejto položky
medzeraMedziIkonouATextom
public void medzeraMedziIkonouATextom(int medzera)
 Ak má toto položka nastavenú ikonu aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
 Predvolená hodnota je štyri pixely.
 
 Poznámka: Táto metóda zrkadlí definíciu
 z triedy AbstractButton (čiže položka je
 z pohľadu objektového modelu chápaná ako tlačidlo). V niektorých
 definíciách vzhľadu (L&F) však nemusia byť položky chápané ako
 typické tlačidlá, ich vzhľad sa môže odlišovať a pokus o prácu
 s medzerou medzi ikonou a textom nemusí mať očakávaný efekt.
Parametre:
medzera – celé číslo určujúce počet pixelov medzi ikonou
     a textom
príkaz
public void príkaz(String príkaz)
Prepojí túto položku ponuky s príkazom priradeným ku
 klávesovej skratke.
 Odteraz odpoveďou na zvolenie tejto položky nebude spustenie reakcie
 voľbaPoložkyPonuky,
 ale reakcie
 klávesováSkratka.
 Ak chcete priradenie príkazu k položke zrušiť, zadajte hodnotu
 null.
 
 Upozornenie: Predtým, než
 odoberiete klávesovú
 skratku zo sveta, zrušte aj priadenie príkazu k tejto položke
 (zadaním hodnoty null), inak by mohlo vzniknúť neočakávané
 správanie programu.
 
 Poznámka: Spustenie tejto metódy spôsobí
 aktualizáciu údajov vzhľadu súvisiacich s klávesovou skratkou
 zadaného príkazu podľa vzhľadu tejto položky. Každé ďalšie spustenie
 tejto metódy pre niektorú položku ponuky alebo kontextovej ponuky
 spôsobí novú aktualizáciu údajov vzhľadu a spätne aktualizáciu
 vzhľadu všetkých položiek, ktoré boli predtým s týmto príkazom
 previazané. Preto je vhodné vyvarovať sa previazaniu konkrétneho
 príkazu s viacerými položkami ponuky alebo kontextovej ponuky (ak
 to nie je vyslovene vyžadované).
Parametre:
príkaz – príkaz na priradenie alebo null
Pozri tiež:
Svet.pridajKlávesovúSkratku(String, int), 
Svet.pridajKlávesovúSkratku(String, int, int)
prikaz
public void prikaz(String príkaz)
 Alias pre príkaz.
mnemonickáSkratka
public void mnemonickáSkratka(int kódSkratky)
Zmení mnemonickú skratku tejto položky ponuky.
Parametre:
kódSkratky – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
mnemonickaSkratka
public void mnemonickaSkratka(int kódSkratky)
 Alias pre mnemonickáSkratka.
klávesováSkratka
public void klávesováSkratka(int kódKlávesu)
Zmení klávesovú skratku tejto položky ponuky.
 
 Klávesová skratka je definovaná s predvoleným modifikátorom
 používaným pre klávesové skratky položiek ponuky. Ten je závislý
 od operačného systému, napríklad vo Windows je to kláves
 Ctrl, v macOS (predtým OS X a Mac OS) je to kláves
 ⌘ (Command). Ak chcete definovať klávesovú
 skratku bez modifikátora, použite metódu
 klávesováSkratka(kódKlávesu,
 modifikátor) s hodnotou modifikátora 0.
Parametre:
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka (v kombinácii s modifikátorom pre ponuky); môže to byť
     ľubovoľný kód klávesu z triedy Kláves
     (Kláves.HORE, Kláves.VK_X…)
Pozri tiež:
klávesováSkratka(int, int)
klavesovaSkratka
public void klavesovaSkratka(int kódKlávesu)
 Alias pre klávesováSkratka.
klávesováSkratka
public void klávesováSkratka(int kódKlávesu,
                             int modifikátor)
Zmení klávesovú skratku tejto položky ponuky.
Parametre:
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka; môže to byť ľubovoľný kód klávesu z triedy
     Kláves (Kláves.HORE,
     Kláves.VK_X…)
modifikátor – klávesový modifikátor tejto skratky (napríklad
     kláves Ctrl – Kláves.CTRL_MASK,
     Shift – Kláves.SHIFT_MASK,
     Alt – Kláves.ALT_MASK…); klávesový modifikátor ponúk, ktorý je
     závislý od operačného systému definuje rezervovaný
     identifikátor Kláves.SKRATKA_PONUKY; klávesovú skratku bez modifikátora je
     možné definovať zadaním hodnoty 0
Pozri tiež:
klávesováSkratka(int)
klavesovaSkratka
public void klavesovaSkratka(int kódKlávesu,
                             int modifikátor)
 Alias pre klávesováSkratka.
skript
public Skript skript()
Vráti skript priradený k tejto položke alebo null,
 ak k položke nebol priradený žiadny skript.
Návratová hodnota:
skript priradený k tejto položke alebo null
Pozri tiež:
riadkySkriptu(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
riadkySkriptu
public String[] riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tejto položke priradený
 v textovej forme. V opačnom prípade vráti null, pričom
 položka môže mať definovaný skript – pozri aj metódu skript.
Návratová hodnota:
skript priradený k tejto položke alebo null
Pozri tiež:
skript(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String[] riadky)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
riadky – skript vo forme poľa reťazcov (riadkov skriptu)
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
skript – skript vo forme reťazca oddeľovaného znakmi
     nového riadka
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(Skript skript)
Priradí k tejto položke skript, ktorý bude automaticky vykonaný
 po jej zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 položky vymazať, zadajte hodnotu null.
Parametre:
skript – inštanicia triedy Skript
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(String), 
Svet.vykonajSkript(String[]), 
Skript
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10,"i183":10,"i184":10,"i185":10,"i186":10,"i187":10,"i188":10,"i189":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda PoznámkovýBlok
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.text.JTextComponent
javax.swing.JEditorPane
javax.swing.JTextPane
PoznámkovýBlok
Všetky implementované rozhrania:
ImageObserver, MenuContainer, Serializable, Accessible, Scrollable, Poloha, Rozmer
Známe priame odvodené triedy:
PoznamkovyBlok
public class PoznámkovýBlok
extends JTextPane
implements Poloha, Rozmer
Trieda PoznámkovýBlok dovoľuje vytvárať v aplikácii
 používajúcej robot textové bloky, ktoré sú zobrazované nad plátnom
 (t. j. nie sú jeho súčasťou) a dovoľujú zobraziť alebo upraviť väčšie
 množstvo textu. Každý nový poznámkový blok je automaticky umiestnený
 na súradnice stredu plátna s predvolenými rozmermi 400 × 300 bodov
 (šírka × výška). Táto trieda uzatvára a rozširuje funkcie triedy
 Javy JTextPane (umiestnenej v komponente JScrollPane). Polohovanie, prilepovanie
 a automatické rozťahovanie poznámkových blokov je podobné ako pri
 triede RolovaciaLišta, to znamená, že
 komponenty poznámkových blokov majú i možnosť zapnutia automatickej
 zmeny veľkosti podľa práve zobrazenej časti plátna.
 
 Poznámka: Poznámkové bloky používajú
 súradnicový priestor rámca a používajú na jeho realizáciu vlastný
 zabudovaný mechanizmus, preto používajte na manipuláciu s polohou
 a rozmermi blokov metódy definované v tejto triede, ako:
 polohaX,
 polohaY,
 šírka,
 výška…, a nie zdedené metódy
 ako setLocation,
 setSize…
 
 Na obsluhu udalostí poznámkových blokov
        TODO
 je určená metóda ObsluhaUdalostí.{ @ link ObsluhaUdalostí # voľbaXXX()
 voľbaXXX}. Jej využitie ukazuje nasledujúci príklad:
 
 
 
 Výsledok:
 
  Ukážka … TODO.
Pozri tiež:
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JEditorPane
JEditorPane.AccessibleJEditorPane, JEditorPane.AccessibleJEditorPaneHTML, JEditorPane.JEditorPaneAccessibleHypertextSupport
Vnorené triedy/rozhrania odvodené od triedy javax.swing.text.JTextComponent
JTextComponent.AccessibleJTextComponent, JTextComponent.DropLocation, JTextComponent.KeyBinding
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JComponent
JComponent.AccessibleJComponent
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
ZAROVNAT_DOLAVA
Alias pre ZAROVNAŤ_DOĽAVA.
static int
ZAROVNAŤ_DOĽAVA
Hodnota konštanty zarovnania odseku doľava.
static int
ZAROVNAT_DOPRAVA
Alias pre ZAROVNAŤ_DOPRAVA.
static int
ZAROVNAŤ_DOPRAVA
Hodnota konštanty zarovnania odseku doprava.
static int
ZAROVNAT_NA_STRED
Alias pre ZAROVNAŤ_NA_STRED.
static int
ZAROVNAŤ_NA_STRED
Hodnota konštanty zarovnania odseku na stred.
static int
ZAROVNAT_PODLA_OKRAJOV
Alias pre ZAROVNAŤ_PODĽA_OKRAJOV.
static int
ZAROVNAŤ_PODĽA_OKRAJOV
Hodnota konštanty zarovnania odseku podľa okrajov.
Atribúty zdedené z triedy javax.swing.JEditorPane
HONOR_DISPLAY_PROPERTIES, W3C_LENGTH_UNITS
Atribúty zdedené z triedy javax.swing.text.JTextComponent
DEFAULT_KEYMAP, FOCUS_ACCELERATOR_KEY
Atribúty zdedené z triedy javax.swing.JComponent
listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
Atribúty zdedené z triedy java.awt.Component
accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania Poloha
stred
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
PoznámkovýBlok()
Základný konštruktor poznámkového bloku.
PoznámkovýBlok(String text)
Konštruktor poznámkového bloku s predvoleným textom.
PoznámkovýBlok(String text,
              boolean úpravy)
Konštruktor poznámkového bloku s predvoleným textom a stavom
 povolenia úprav.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
aktivny()
 Alias pre aktívny.
boolean
aktívny()
Overí, či je poznámkový blok aktívny.
void
aktivuj()
Aktivuje poznámkový blok.
void
deaktivuj()
Deaktivuje poznámkový blok.
Farba
farbaKurzora()
 Číta farbu kurzora poznámkového bloku.
void
farbaKurzora(Color nováFarba)
 Nastaví farbu a priehľadnosť kurzora
 poznámkového bloku podľa zadanej farebnej inštancie.
void
farbaKurzora(Farebnosť objekt)
Nastaví farbu a priehľadnosť kurzora poznámkového bloku podľa
 zadaného objektu.
Farba
farbaKurzora(int r,
            int g,
            int b)
Nastaví farbu kurzora poznámkového bloku podľa zadaných
 farebných zložiek.
Farba
farbaKurzora(int r,
            int g,
            int b,
            int a)
Nastaví farbu a (ne)priehľadnosť kurzora poznámkového bloku
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
Farba
farbaNeaktivnehoTextu()
 Alias pre farbaNeaktívnehoTextu.
Farba
farbaNeaktívnehoTextu()
 Číta farbu neaktívneho textu poznámkového
 bloku.
void
farbaNeaktivnehoTextu(Color nováFarba)
 Alias pre farbaNeaktívnehoTextu.
void
farbaNeaktívnehoTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť neaktívneho
 textu poznámkového bloku podľa zadanej farebnej inštancie.
void
farbaNeaktivnehoTextu(Farebnosť objekt)
 Alias pre farbaNeaktívnehoTextu.
void
farbaNeaktívnehoTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť neaktívneho textu poznámkového
 bloku podľa zadaného objektu.
Farba
farbaNeaktivnehoTextu(int r,
                     int g,
                     int b)
 Alias pre farbaNeaktívnehoTextu.
Farba
farbaNeaktívnehoTextu(int r,
                     int g,
                     int b)
Nastaví farbu neaktívneho textu poznámkového bloku podľa
 zadaných farebných zložiek.
Farba
farbaNeaktivnehoTextu(int r,
                     int g,
                     int b,
                     int a)
 Alias pre farbaNeaktívnehoTextu.
Farba
farbaNeaktívnehoTextu(int r,
                     int g,
                     int b,
                     int a)
Nastaví farbu a (ne)priehľadnosť neaktívneho textu poznámkového
 bloku podľa zadaných farebných zložiek a úrovne priehľadnosti.
Farba
farbaPozadia()
 Číta farbu pozadia poznámkového bloku.
void
farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 poznámkového bloku podľa zadanej farebnej inštancie.
void
farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia poznámkového bloku podľa
 zadaného objektu.
Farba
farbaPozadia(int r,
            int g,
            int b)
Nastaví farbu pozadia poznámkového bloku podľa zadaných
 farebných zložiek.
Farba
farbaPozadia(int r,
            int g,
            int b,
            int a)
Nastaví farbu a (ne)priehľadnosť pozadia poznámkového bloku
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
Farba
farbaPozadiaOznacenia()
 Alias pre farbaPozadiaOznačenia.
void
farbaPozadiaOznacenia(Color nováFarba)
 Alias pre farbaPozadiaOznačenia.
void
farbaPozadiaOznacenia(Farebnosť objekt)
 Alias pre farbaPozadiaOznačenia.
Farba
farbaPozadiaOznacenia(int r,
                     int g,
                     int b)
 Alias pre farbaPozadiaOznačenia.
Farba
farbaPozadiaOznacenia(int r,
                     int g,
                     int b,
                     int a)
 Alias pre farbaPozadiaOznačenia.
Farba
farbaPozadiaOznačenia()
 Číta farbu pozadia označenia (označeného
 textu) poznámkového bloku.
void
farbaPozadiaOznačenia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 označenia (označeného textu) poznámkového bloku podľa zadanej
 farebnej inštancie.
void
farbaPozadiaOznačenia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia označenia (označeného textu)
 poznámkového bloku podľa zadaného objektu.
Farba
farbaPozadiaOznačenia(int r,
                     int g,
                     int b)
Nastaví farbu pozadia označenia (označeného textu) poznámkového
 bloku podľa zadaných farebných zložiek.
Farba
farbaPozadiaOznačenia(int r,
                     int g,
                     int b,
                     int a)
Nastaví farbu a (ne)priehľadnosť pozadia označenia (označeného
 textu) poznámkového bloku podľa zadaných farebných zložiek a úrovne
 priehľadnosti.
Farba
farbaPozadiaTextu()
 Zistí aktuálnu farbu pozadia textu
 poznámkového bloku.
void
farbaPozadiaTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 textu poznámkového bloku podľa zadaného objektu.
void
farbaPozadiaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia textu poznámkového bloku
 podľa zadaného objektu.
Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b)
Nastaví farbu pozadia textu poznámkového bloku podľa zadaných
 farebných zložiek.
Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b,
                 int a)
Nastaví farbu a (ne)priehľadnosť pozadia textu poznámkového
 bloku podľa zadaných farebných zložiek a úrovne priehľadnosti.
Farba
farbaTextu()
 Zistí aktuálnu farbu textu poznámkového
 bloku.
void
farbaTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť textu
 poznámkového bloku podľa zadaného objektu.
void
farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu poznámkového bloku podľa
 zadaného objektu.
Farba
farbaTextu(int r,
          int g,
          int b)
Nastaví farbu textu poznámkového bloku podľa zadaných farebných
 zložiek.
Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastaví farbu a (ne)priehľadnosť textu poznámkového bloku podľa
 zadaných farebných zložiek a úrovne priehľadnosti.
Farba
farbaTextuOznacenia()
 Alias pre farbaTextuOznačenia.
void
farbaTextuOznacenia(Color nováFarba)
 Alias pre farbaTextuOznačenia.
void
farbaTextuOznacenia(Farebnosť objekt)
 Alias pre farbaTextuOznačenia.
Farba
farbaTextuOznacenia(int r,
                   int g,
                   int b)
 Alias pre farbaTextuOznačenia.
Farba
farbaTextuOznacenia(int r,
                   int g,
                   int b,
                   int a)
 Alias pre farbaTextuOznačenia.
Farba
farbaTextuOznačenia()
 Číta farbu označenia (označeného textu)
 poznámkového bloku.
void
farbaTextuOznačenia(Color nováFarba)
 Nastaví farbu a priehľadnosť bloku
 označenia poznámkového bloku podľa zadanej farebnej inštancie.
void
farbaTextuOznačenia(Farebnosť objekt)
Nastaví podľa zadaného objektu farbu a priehľadnosť bloku
 označenia poznámkového bloku.
Farba
farbaTextuOznačenia(int r,
                   int g,
                   int b)
Nastaví podľa zadaných farebných zložiek farbu bloku
 označenia poznámkového bloku.
Farba
farbaTextuOznačenia(int r,
                   int g,
                   int b,
                   int a)
Nastaví podľa zadaných farebných zložiek a úrovne priehľadnosti
 farbu a (ne)priehľadnosť bloku označenia poznámkového bloku.
String
html()
 Ak je typ dokumentu text/html,
 tak vráti aktuálny HTML obsah poznámkového bloku (vo forme čistého
 textu obsahujúceho HTML syntax), inak vráti hodnotu null.
void
html(String html)
 Nastaví nový HTML obsah poznámkového
 bloku.
boolean
jeDekorZruseny()
 Alias pre jeDekorZrušený.
boolean
jeDekorZrušený()
Zistí, či má poznámkový blok zrušený dekor.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tohto poznámkového bloku dokonale zhoduje so
 zadanými súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tohto poznámkového bloku a poloha zadaného
 objektu dokonale zhodujú.
boolean
kurziva()
 Alias pre kurzíva.
boolean
kurzíva()
 Zistí či je písmo na aktuálnej
 pozícii kurzora v poznámkovom bloku písané kurzívou.
void
kurziva(boolean kurzíva)
 Alias pre kurzíva.
void
kurzíva(boolean kurzíva)
 Nastaví kurzívu písmu označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
boolean
maDekor()
 Alias pre máDekor.
boolean
máDekor()
Zistí, či má poznámkový blok dekor.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí, či sa rozmery poznámkového bloku dokonale zhodujú so zadanými
 rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí, či sa rozmery poznámkového bloku a rozmery zadaného objektu
 dokonale zhodujú.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
máŠírku(double šírka)
Zistí, či má poznámkový blok zadanú šírku.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Zistí, či má poznámkový blok zadanú výšku.
void
moveCaretPosition(int nováPozícia)
Prekrytie originálnej metódy, aby boli filtrované nekorektné
 hodnoty pozície kurzora a aby metóda nevrhala výnimky.
void
nahradOznacenie(String obsah)
 Alias pre nahraďOznačenie.
void
nahradOznacenie(String obsah,
               boolean ponechajOznačenie)
 Alias pre nahraďOznačenie.
void
nahraďOznačenie(String obsah)
Nahradí aktuálne označený obsah zadaným obsahom (reťazcom).
void
nahraďOznačenie(String obsah,
               boolean ponechajOznačenie)
Nahradí aktuálne označený obsah zadaným obsahom (reťazcom).
String
nazovPisma()
 Alias pre názovPísma.
String
názovPísma()
 Zistí názov písma textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
void
nazovPisma(String názovPísma)
 Alias pre názovPísma.
void
názovPísma(String názovPísma)
 Nastaví názov písma označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
void
neroztahuj()
 Alias pre nerozťahuj.
void
nerozťahuj()
Zruší roztiahnutie poznámkového bloku v oboch smeroch.
void
neupravuj()
Zakáže úpravu textu poznámkového bloku.
void
odlep()
Odlepí poznámkový blok od všetkých okrajov.
String
oznacenyText()
 Alias pre označenýText.
String
označenýText()
Vráti označený text dokumentu.
Bod
poloha()
Vráti aktuálnu polohu poznámkového bloku.
void
poloha(double x,
      double y)
Presunie poznámkový blok na zadané súradnice x,
 y.
void
poloha(Poloha objekt)
Presunie poznámkový blok na súradnice zadaného objektu.
int
polohaKurzora()
Zistí a vráti aktuálnu polohu textového kurzora (angl.
void
polohaKurzora(int nováPozícia)
Nastaví novú polohu kurzora (angl. caret).
double
polohaX()
 Zistí aktuálnu x-ovú súradnicu polohy
 poznámkového bloku.
void
polohaX(double novéX)
 Presunie poznámkový blok na zadanú súradnicu
 v smere x.
double
polohaY()
 Zistí aktuálnu y-ovú súradnicu polohy
 poznámkového bloku.
void
polohaY(double novéY)
 Presunie poznámkový blok na zadanú súradnicu
 v smere y.
void
presunKurzor(int nováPozícia)
 Alias pre presuňKurzor.
void
presuňKurzor(int nováPozícia)
Presunie kurzor (angl. caret) na novú pozíciu a vytvorí pri
 tom označenie.
void
prilepDole()
Prilepí poznámkový blok k dolnému okraju.
void
prilepHore()
Prilepí poznámkový blok k hornému okraju.
void
prilepVlavo()
 Alias pre prilepVľavo.
void
prilepVľavo()
Prilepí poznámkový blok k ľavému okraju.
void
prilepVpravo()
Prilepí poznámkový blok k pravému okraju.
Boolean
rezimZobrazeniaHorizontalnejListy()
 Alias pre režimZobrazeniaHorizontálnejLišty.
void
rezimZobrazeniaRolovacichList(Boolean horizontálna,
                             Boolean vertikálna)
 Alias pre režimZobrazeniaRolovacíchLíšt.
Boolean
rezimZobrazeniaVertikalnejListy()
 Alias pre režimZobrazeniaVertikálnejLišty.
Boolean
režimZobrazeniaHorizontálnejLišty()
Zistí režim zobrazenia horizontálnej rolovacej lišty poznámkového
 bloku.
void
režimZobrazeniaRolovacíchLíšt(Boolean horizontálna,
                             Boolean vertikálna)
Nastaví režim zobrazenia rolovacích líšt poznámkového bloku.
Boolean
režimZobrazeniaVertikálnejLišty()
Zistí režim zobrazenia vertikálnej rolovacej lišty poznámkového
 bloku.
JScrollPane
rolovanie()
Poskytne komponent rolovania JScrollPane
 poznámkového bloku.
Rozmer
rozmery()
Zistí aktuálne rozmery poznámkového bloku.
void
rozmery(double nováŠírka,
       double nováVýška)
Nastaví nové rozmery poznámkového bloku.
void
rozmery(Rozmer rozmer)
Nastaví nové rozmery poznámkového bloku podľa zadanej implementácie
 rozmeru.
void
roztiahniHorizontalne()
 Alias pre roztiahniNaŠírku.
void
roztiahniHorizontálne()
 Alias pre roztiahniNaŠírku.
void
roztiahniNaSirku()
 Alias pre roztiahniNaŠírku.
void
roztiahniNaŠírku()
Roztiahne poznámkový blok na celú šírku zobrazovanej plochy tak,
 aby bol celý viditeľný, čoho dôsledkom je aj to, že najväčšia
 možná šírka bloku je rovná šírke plátien sveta.
void
roztiahniNaVysku()
 Alias pre roztiahniNaVýšku.
void
roztiahniNaVýšku()
Roztiahne poznámkový blok na celú výšku zobrazovanej plochy tak,
 aby bol celý viditeľný, čoho dôsledkom je aj to, že najväčšia
 možná výška bloku je rovná výške plátien sveta.
void
roztiahniVertikalne()
 Alias pre roztiahniNaVýšku.
void
roztiahniVertikálne()
 Alias pre roztiahniNaVýšku.
void
roztiahniVodorovne()
 Alias pre roztiahniNaŠírku.
void
roztiahniZvislo()
 Alias pre roztiahniNaVýšku.
void
setCaretPosition(int nováPozícia)
Prekrytie originálnej metódy, aby boli filtrované nekorektné
 hodnoty pozície kurzora a aby metóda nevrhala výnimky.
void
setVisible(boolean visible)
Prekrytie originálnej metódy.
boolean
sikme()
 Alias pre kurzíva.
void
sikme(boolean kurzíva)
 Alias pre kurzíva.
boolean
silne()
 Alias pre tučné.
boolean
silné()
 Alias pre tučné.
void
silne(boolean tučné)
 Alias pre tučné.
void
silné(boolean tučné)
 Alias pre tučné.
double
sirka()
 Alias pre šírka.
void
sirka(double nováŠírka)
 Alias pre šírka.
void
skoc(double Δx,
    double Δy)
 Alias pre skoč.
void
skocNa(double x,
      double y)
 Alias pre poloha.
void
skocNa(Poloha objekt)
 Alias pre poloha.
void
skoč(double Δx,
    double Δy)
Presunie poznámkový blok o zadaný počet bodov
 v horizontálnom a vertikálnom smere.
void
skočNa(double x,
      double y)
 Alias pre poloha.
void
skočNa(Poloha objekt)
 Alias pre poloha.
void
skry()
Skryje poznámkový blok.
double
suradnicaX()
 Alias pre polohaX.
double
súradnicaX()
 Alias pre polohaX.
void
suradnicaX(double novéX)
 Alias pre polohaX.
void
súradnicaX(double novéX)
 Alias pre polohaX.
double
suradnicaY()
 Alias pre polohaY.
double
súradnicaY()
 Alias pre polohaY.
void
suradnicaY(double novéY)
 Alias pre polohaY.
void
súradnicaY(double novéY)
 Alias pre polohaY.
boolean
šikmé()
 Alias pre kurzíva.
void
šikmé(boolean kurzíva)
 Alias pre kurzíva.
double
šírka()
 Zistí aktuálnu šírku poznámkového bloku.
void
šírka(double nováŠírka)
 Zmení šírku poznámkového bloku.
String
text()
 Vráti text dokumentu vo forme čistého
 textu.
void
text(String text)
 Nastaví nový čistý text poznámkového
 bloku.
boolean
tucne()
 Alias pre tučné.
void
tucne(boolean tučné)
 Alias pre tučné.
boolean
tučné()
 Zistí či je písmo na aktuálnej
 pozícii kurzora tučné.
void
tučné(boolean tučné)
 Nastaví tučné písmo označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
boolean
upravitelny()
 Alias pre upraviteľný.
boolean
upraviteľný()
Overí, či má poznámkový blok povolenú úpravu textu.
void
upravuj()
Povolí úpravu textu v poznámkovom bloku.
int
velkostPisma()
 Alias pre veľkosťPísma.
int
veľkosťPísma()
 Zistí veľkosť písma textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
void
velkostPisma(int veľkosťPísma)
 Alias pre veľkosťPísma.
void
veľkosťPísma(int veľkosťPísma)
 Nastaví veľkosť písma označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
boolean
viditelny()
 Alias pre viditeľný.
boolean
viditeľný()
Zistí, či je poznámkový blok viditeľný (zobrazený) alebo nie.
double
vyska()
 Alias pre výška.
void
vyska(double nováVýška)
 Alias pre výška.
double
výška()
 Zistí aktuálnu výšku poznámkového bloku.
void
výška(double nováVýška)
 Zmení výšku poznámkového bloku.
boolean
zakazEnter()
 Alias pre zakážEnter.
void
zakazEnter(boolean zakážEnter)
 Alias pre zakážEnter.
boolean
zakazTabulator()
 Alias pre zakážTabulátor.
void
zakazTabulator(boolean zakážTabulátor)
 Alias pre zakážTabulátor.
boolean
zakážEnter()
 Zistí, či je zakázaná predvolená funkcia
 klávesu Enter a vkladania znakov nových riadkov pre tento
 poznámkový blok.
void
zakážEnter(boolean zakážEnter)
 Zakáže alebo povolí predvolenú funkciu
 klávesu Enter a vkladania znakov nového riadka pre tento
 poznámkový blok.
boolean
zakážTabulátor()
 Zistí, či je zakázaná predvolená funkcia
 tabulátora a vkladanie znaku tabulátora pre tento poznámkový blok.
void
zakážTabulátor(boolean zakážTabulátor)
 Zakáže alebo povolí predvolenú funkciu
 klávesu tabulátora a vkladania znakov tabulátora pre tento poznámkový
 blok.
int
zarovnat()
 Alias pre zarovnať.
int
zarovnať()
 Zistí, aké je zarovnanie textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
void
zarovnat(int zarovnať)
 Alias pre zarovnať.
void
zarovnať(int zarovnať)
 Nastaví zarovnanie označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
void
zobraz()
Zobrazí poznámkový blok.
boolean
zobrazeny()
 Alias pre zobrazený.
boolean
zobrazený()
Zistí, či je poznámkový blok zobrazený (viditeľný) alebo nie.
void
zrusDekor(boolean zrušiť)
 Alias pre zrušDekor.
void
zrušDekor(boolean zrušiť)
Obnoví pôvodný alebo zruší aktuálny dekor poznámkového bloku.
Metódy zdedené z triedy javax.swing.JTextPane
addStyle, createDefaultEditorKit, getCharacterAttributes, getInputAttributes, getLogicalStyle, getParagraphAttributes, getStyle, getStyledDocument, getStyledEditorKit, getUIClassID, insertComponent, insertIcon, paramString, removeStyle, replaceSelection, setDocument, setEditorKit, setCharacterAttributes, setLogicalStyle, setParagraphAttributes, setStyledDocument
Metódy zdedené z triedy javax.swing.JEditorPane
addHyperlinkListener, createEditorKitForContentType, fireHyperlinkUpdate, getAccessibleContext, getContentType, getEditorKit, getEditorKitTriedaNameForContentType, getEditorKitForContentType, getHyperlinkListeners, getPage, getPreferredSize, getScrollableTracksViewportHeight, getScrollableTracksViewportWidth, getStream, getText, read, registerEditorKitForContentType, registerEditorKitForContentType, removeHyperlinkListener, scrollToReference, setContentType, setEditorKitForContentType, setPage, setPage, setText
Metódy zdedené z triedy javax.swing.text.JTextComponent
addCaretListener, addInputMethodListener, addKeymap, copy, cut, fireCaretUpdate, getActions, getCaret, getCaretColor, getCaretListeners, getCaretPosition, getDisabledTextColor, getDocument, getDragEnabled, getDropLocation, getDropMode, getFocusAccelerator, getHighlighter, getInputMethodRequests, getKeymap, getKeymap, getMargin, getNavigationFilter, getPreferredScrollableViewportSize, getPrintable, getScrollableBlockIncrement, getScrollableUnitIncrement, getSelectedText, getSelectedTextColor, getSelectionColor, getSelectionEnd, getSelectionStart, getText, getToolTipText, getUI, isEditable, loadKeymap, modelToView, paste, print, print, print, processInputMethodEvent, read, removeCaretListener, removeKeymap, removeNotify, restoreComposedText, saveComposedText, select, selectAll, setCaret, setCaretColor, setComponentOrientation, setDisabledTextColor, setDragEnabled, setDropMode, setEditable, setFocusAccelerator, setHighlighter, setKeymap, setMargin, setNavigationFilter, setSelectedTextColor, setSelectionColor, setSelectionEnd, setSelectionStart, setUI, updateUI, viewToModel, write
Metódy zdedené z triedy javax.swing.JComponent
addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getĎalšieFocusableComponent, getPopupLocation, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintBorder, paintComponent, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printComponent, printChildren, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setEnabled, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setĎalšieFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, unregisterKeyboardAction, update
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, addImpl, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setLayout, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, checkImage, checkImage, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
ZAROVNAŤ_NA_STRED
public static final int ZAROVNAŤ_NA_STRED
Hodnota konštanty zarovnania odseku na stred. Pozri metódu
 zarovnať.
Pozri tiež:
Hodnoty konštánt
ZAROVNAŤ_PODĽA_OKRAJOV
public static final int ZAROVNAŤ_PODĽA_OKRAJOV
Hodnota konštanty zarovnania odseku podľa okrajov. Pozri metódu
 zarovnať.
Pozri tiež:
Hodnoty konštánt
ZAROVNAŤ_DOĽAVA
public static final int ZAROVNAŤ_DOĽAVA
Hodnota konštanty zarovnania odseku doľava. Pozri metódu
 zarovnať.
Pozri tiež:
Hodnoty konštánt
ZAROVNAŤ_DOPRAVA
public static final int ZAROVNAŤ_DOPRAVA
Hodnota konštanty zarovnania odseku doprava. Pozri metódu
 zarovnať.
Pozri tiež:
Hodnoty konštánt
ZAROVNAT_NA_STRED
public static final int ZAROVNAT_NA_STRED
Alias pre ZAROVNAŤ_NA_STRED.
Pozri tiež:
Hodnoty konštánt
ZAROVNAT_PODLA_OKRAJOV
public static final int ZAROVNAT_PODLA_OKRAJOV
Alias pre ZAROVNAŤ_PODĽA_OKRAJOV.
Pozri tiež:
Hodnoty konštánt
ZAROVNAT_DOLAVA
public static final int ZAROVNAT_DOLAVA
Alias pre ZAROVNAŤ_DOĽAVA.
Pozri tiež:
Hodnoty konštánt
ZAROVNAT_DOPRAVA
public static final int ZAROVNAT_DOPRAVA
Alias pre ZAROVNAŤ_DOPRAVA.
Pozri tiež:
Hodnoty konštánt
Podrobnosti konštruktorov
PoznámkovýBlok
public PoznámkovýBlok()
Základný konštruktor poznámkového bloku.
 
 Vytvorí poznámkový blok umiestnený v strede plátna
 s predvolenými rozmermi 400 × 300 bodov.
Pozri tiež:
PoznámkovýBlok(String), 
PoznámkovýBlok(String, boolean)
PoznámkovýBlok
public PoznámkovýBlok(String text)
Konštruktor poznámkového bloku s predvoleným textom.
 
 Vytvorí poznámkový blok umiestnený v strede plátna
 s predvolenými rozmermi 400 × 300 bodov a zadaným textom
 poznámkového bloku.
 
 Ak sa zadnaný text začína značkou &lt;html&gt;
 (malými písmenami), tak je typ dokumentu poznámkového bloku
 nastavený na text/html, inak na
 text/plain.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Parametre:
text – predvolený text poznámkového bloku
Pozri tiež:
PoznámkovýBlok(), 
PoznámkovýBlok(String, boolean), 
text(String)
PoznámkovýBlok
public PoznámkovýBlok(String text,
                      boolean úpravy)
Konštruktor poznámkového bloku s predvoleným textom a stavom
 povolenia úprav.
 
 Vytvorí poznámkový blok umiestnený v strede plátna
 s predvolenými rozmermi 400 × 300 bodov a zadaným textom
 poznámkového bloku, pričom pri inicializácii nastaví stav
 povolenia úprav textu podľa zadanej logickej hodnoty.
 
 Ak sa zadnaný text začína značkou &lt;html&gt;
 (malými písmenami), tak je typ dokumentu poznámkového bloku
 nastavený na text/html, inak na
 text/plain.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Parametre:
text – predvolený text poznámkového bloku
úpravy – parameter určujúci, či bude blok určený aj na
     úpravy – true alebo len na čítanie –
     false
Pozri tiež:
PoznámkovýBlok(), 
PoznámkovýBlok(String), 
text(String), 
neupravuj(), 
upravuj()
Podrobnosti metód
polohaX
public double polohaX()
 Zistí aktuálnu x-ovú súradnicu polohy
 poznámkového bloku.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica polohy poznámkového bloku
Pozri tiež:
polohaX(double)
polohaY
public double polohaY()
 Zistí aktuálnu y-ovú súradnicu polohy
 poznámkového bloku.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica polohy poznámkového bloku
Pozri tiež:
polohaY(double)
polohaX
public void polohaX(double novéX)
 Presunie poznámkový blok na zadanú súradnicu
 v smere x.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor poznámkového bloku.
Parametre:
novéX – nová x-ová súradnica polohy poznámkového bloku
Pozri tiež:
polohaX(), 
poloha(double, double)
polohaY
public void polohaY(double novéY)
 Presunie poznámkový blok na zadanú súradnicu
 v smere y.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor poznámkového bloku.
Parametre:
novéY – nová y-ová súradnica polohy poznámkového bloku
Pozri tiež:
polohaY(), 
poloha(double, double), 
poloha(Poloha)
súradnicaX
public void súradnicaX(double novéX)
 Alias pre polohaX.
suradnicaX
public void suradnicaX(double novéX)
 Alias pre polohaX.
súradnicaY
public void súradnicaY(double novéY)
 Alias pre polohaY.
suradnicaY
public void suradnicaY(double novéY)
 Alias pre polohaY.
súradnicaX
public double súradnicaX()
 Alias pre polohaX.
Definované:
súradnicaX v rozhraní Poloha
súradnicaY
public double súradnicaY()
 Alias pre polohaY.
Definované:
súradnicaY v rozhraní Poloha
suradnicaX
public double suradnicaX()
 Alias pre polohaX.
Definované:
suradnicaX v rozhraní Poloha
suradnicaY
public double suradnicaY()
 Alias pre polohaY.
Definované:
suradnicaY v rozhraní Poloha
poloha
public void poloha(double x,
                   double y)
Presunie poznámkový blok na zadané súradnice x,
 y.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor poznámkového bloku.
Parametre:
x – nová x-ová súradnica polohy poznámkového bloku
y – nová y-ová súradnica polohy poznámkového bloku
Pozri tiež:
polohaX(double), 
polohaY(double), 
poloha(Poloha)
poloha
public void poloha(Poloha objekt)
Presunie poznámkový blok na súradnice zadaného objektu.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor poznámkového bloku.
Parametre:
objekt – objekt, na ktorého súradnice bude poznámkový blok
     presunutý
Pozri tiež:
polohaX(double), 
polohaY(double), 
poloha(double, double)
poloha
public Bod poloha()
Vráti aktuálnu polohu poznámkového bloku.
Definované:
poloha v rozhraní Poloha
Návratová hodnota:
aktuálna poloha poznámkového bloku
Pozri tiež:
polohaX(), 
polohaY()
skočNa
public void skočNa(double x,
                   double y)
 Alias pre poloha.
skocNa
public void skocNa(double x,
                   double y)
 Alias pre poloha.
skočNa
public void skočNa(Poloha objekt)
 Alias pre poloha.
skocNa
public void skocNa(Poloha objekt)
 Alias pre poloha.
skoč
public void skoč(double Δx,
                 double Δy)
Presunie poznámkový blok o zadaný počet bodov
 v horizontálnom a vertikálnom smere.
 
 Táto metóda presúva poznámkový blok nad plátnom. Upozorňujeme
 na to, že zadané hodnoty sú automaticky zaokrúhlené na celé čísla,
 čiže ani viacnásobné posunutie poznámkového bloku o hodnotu
 z otvoreného intervalu (−1; 1) nebude mať za následok posunutie
 poznámkového bloku…
Parametre:
Δx – počet bodov v smere x
Δy – počet bodov v smere y
skoc
public void skoc(double Δx,
                 double Δy)
 Alias pre skoč.
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tohto poznámkového bloku dokonale zhoduje so
 zadanými súradnicami. Ak je zistená zhoda, tak metóda vráti hodnotu
 true, v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha tohto
     poznámkového bloku
y – y-ová súradnica, s ktorou má byť porovnaná poloha tohto
     poznámkového bloku
Návratová hodnota:
true ak sa poloha tohto poznámkového bloku zhoduje
     so zadanými súradnicami, false v opačnom prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tohto poznámkového bloku a poloha zadaného
 objektu dokonale zhodujú. Ak je zistená zhoda, tak metóda vráti
 hodnotu true, v opačnom prípade hodnotu
 false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná s polohou tohto
     poznámkového bloku
Návratová hodnota:
true ak sa poloha tohto poznámkového bloku zhoduje
     s polohou zadaného objektu, false v opačnom prípade
prilepVľavo
public void prilepVľavo()
Prilepí poznámkový blok k ľavému okraju. Táto akcia zruší
 prípadné predchádzajúce prilepenie k pravému okraju. Každé
 prilepenie upravuje súradnicový systém poznámkového bloku
 presunutím čo najbližšie k prilepovanému okraju. To znamená,
 že keď napríklad po prilepení k ľavému okraju posunieme
 poznámkový blok na súradnice [10, 0], tak ho v skutočnosti posunieme
 na pozíciu desať bodov od ľavého okraja.
Pozri tiež:
prilepVpravo(), 
prilepHore(), 
prilepDole(), 
odlep()
prilepVlavo
public void prilepVlavo()
 Alias pre prilepVľavo.
prilepVpravo
public void prilepVpravo()
Prilepí poznámkový blok k pravému okraju. Táto akcia zruší
 prípadné predchádzajúce prilepenie k ľavému okraju. Každé
 prilepenie upravuje súradnicový systém poznámkového bloku
 presunutím čo najbližšie k prilepovanému okraju. To znamená,
 že keď napríklad po prilepení k pravému okraju posunieme
 poznámkový blok na súradnice [-10, 0], tak ho v skutočnosti posunieme
 na pozíciu desať bodov od pravého okraja.
Pozri tiež:
prilepVľavo(), 
prilepHore(), 
prilepDole(), 
odlep()
prilepHore
public void prilepHore()
Prilepí poznámkový blok k hornému okraju. Táto akcia zruší
 prípadné predchádzajúce prilepenie k dolnému okraju. Každé
 prilepenie upravuje súradnicový systém poznámkového bloku
 presunutím čo najbližšie k prilepovanému okraju. To znamená,
 že keď napríklad po prilepení k hornému okraju posunieme
 poznámkový blok na súradnice [0, -10], tak ho v skutočnosti posunieme
 na pozíciu desať bodov od horného okraja.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepDole(), 
odlep()
prilepDole
public void prilepDole()
Prilepí poznámkový blok k dolnému okraju. Táto akcia zruší
 prípadné predchádzajúce prilepenie k hornému okraju. Každé
 prilepenie upravuje súradnicový systém poznámkového bloku
 presunutím čo najbližšie k prilepovanému okraju. To znamená,
 že keď napríklad po prilepení k dolnému okraju posunieme
 poznámkový blok na súradnice [0, 10], tak ho v skutočnosti posunieme
 na pozíciu desať bodov od dolného okraja.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepHore(), 
odlep()
odlep
public void odlep()
Odlepí poznámkový blok od všetkých okrajov.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepHore(), 
prilepDole()
roztiahniNaVýšku
public void roztiahniNaVýšku()
Roztiahne poznámkový blok na celú výšku zobrazovanej plochy tak,
 aby bol celý viditeľný, čoho dôsledkom je aj to, že najväčšia
 možná výška bloku je rovná výške plátien sveta.
Pozri tiež:
roztiahniNaŠírku(), 
nerozťahuj()
roztiahniNaVysku
public void roztiahniNaVysku()
 Alias pre roztiahniNaVýšku.
roztiahniVertikálne
public void roztiahniVertikálne()
 Alias pre roztiahniNaVýšku.
roztiahniVertikalne
public void roztiahniVertikalne()
 Alias pre roztiahniNaVýšku.
roztiahniZvislo
public void roztiahniZvislo()
 Alias pre roztiahniNaVýšku.
roztiahniNaŠírku
public void roztiahniNaŠírku()
Roztiahne poznámkový blok na celú šírku zobrazovanej plochy tak,
 aby bol celý viditeľný, čoho dôsledkom je aj to, že najväčšia
 možná šírka bloku je rovná šírke plátien sveta.
Pozri tiež:
roztiahniNaVýšku(), 
nerozťahuj()
roztiahniNaSirku
public void roztiahniNaSirku()
 Alias pre roztiahniNaŠírku.
roztiahniHorizontálne
public void roztiahniHorizontálne()
 Alias pre roztiahniNaŠírku.
roztiahniHorizontalne
public void roztiahniHorizontalne()
 Alias pre roztiahniNaŠírku.
roztiahniVodorovne
public void roztiahniVodorovne()
 Alias pre roztiahniNaŠírku.
nerozťahuj
public void nerozťahuj()
Zruší roztiahnutie poznámkového bloku v oboch smeroch.
Pozri tiež:
roztiahniNaVýšku(), 
roztiahniNaŠírku()
neroztahuj
public void neroztahuj()
 Alias pre nerozťahuj.
šírka
public double šírka()
 Zistí aktuálnu šírku poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
aktuálna šírka poznámkového bloku
Pozri tiež:
šírka(double), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
 Zistí aktuálnu výšku poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
aktuálna výška poznámkového bloku
Pozri tiež:
výška(double), 
šírka(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
šírka
public void šírka(double nováŠírka)
 Zmení šírku poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
šírka v rozhraní Rozmer
Parametre:
nováŠírka – nová šírka poznámkového bloku
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
sirka
public void sirka(double nováŠírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double nováVýška)
 Zmení výšku poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
výška v rozhraní Rozmer
Parametre:
nováVýška – nová výška poznámkového bloku
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
vyska
public void vyska(double nováVýška)
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmery
public Rozmer rozmery()
Zistí aktuálne rozmery poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
rozmery v rozhraní Rozmer
Návratová hodnota:
objekt vytvorený podľa aktuálnych rozmerov poznámkového bloku
Pozri tiež:
šírka(), 
výška(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
rozmery
public void rozmery(double nováŠírka,
                    double nováVýška)
Nastaví nové rozmery poznámkového bloku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Parametre:
nováŠírka – nová šírka poznámkového bloku
nováVýška – nová výška poznámkového bloku
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
rozmery
public void rozmery(Rozmer rozmer)
Nastaví nové rozmery poznámkového bloku podľa zadanej implementácie
 rozmeru.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
rozmery v rozhraní Rozmer
Parametre:
rozmer – inštancia obsahujúca nové rozmery poznámkového bloku
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
máŠírku
public boolean máŠírku(double šírka)
Zistí, či má poznámkový blok zadanú šírku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – šírka, ktorá má byť porovnaná so šírkou poznámkového bloku
Návratová hodnota:
true ak sa šírka poznámkového bloku zhoduje so
     zadanou šírkou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Zistí, či má poznámkový blok zadanú výšku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – výška, ktorá má byť porovnaná s výškou poznámkového bloku
Návratová hodnota:
true ak sa výška poznámkového bloku zhoduje so
     zadanou výškou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí, či sa rozmery poznámkového bloku dokonale zhodujú so zadanými
 rozmermi. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – šírka porovnávaná so šírkou poznámkového bloku
výška – výška porovnávaná s výškou poznámkového bloku
Návratová hodnota:
true ak sa rozmery poznámkového bloku zhodujú so
     zadanými rozmermi, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer)
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí, či sa rozmery poznámkového bloku a rozmery zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom poznámkového bloku s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery bloku vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru bloku neceločíselnú hodnotu,
 spätne z neho prečítate celočíselnú hodnotu získanú zanedbaním
 neceločíselnej časti.)
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi poznámkového bloku
Návratová hodnota:
true ak sa rozmery poznámkového bloku zhodujú
     s rozmermi zadaného objektu, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(double, double)
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
aktívny
public boolean aktívny()
Overí, či je poznámkový blok aktívny. Aktívny poznámkový blok
 je použiteľný na úpravy alebo kopírovanie obsahu. S deaktivovaným
 poznámkovým blokom nemôže používateľ manipulovať.
Návratová hodnota:
true – je aktívny;
     false – nie je aktívny
Pozri tiež:
aktivuj(), 
deaktivuj()
aktivny
public boolean aktivny()
 Alias pre aktívny.
aktivuj
public void aktivuj()
Aktivuje poznámkový blok. Predvolene je poznámkový blok aktívny.
 Ak ho deaktivujeme (pozri nižšie), tak po
 vykonaní tohto príkazu (aktivuj) poznámkového bloku,
 bude opäť použiteľný a bude reagovať na klikanie myšou aj voľbu
 klávesnicou.
Pozri tiež:
aktívny(), 
aktivuj(), 
deaktivuj()
deaktivuj
public void deaktivuj()
Deaktivuje poznámkový blok. Poznámkový blok prestane byť schopný
 reagovať na ovládanie myšou alebo klávesnicou.
Pozri tiež:
aktívny(), 
aktivuj(), 
deaktivuj()
upraviteľný
public boolean upraviteľný()
Overí, či má poznámkový blok povolenú úpravu textu. Každý
 poznámkový blok môže mať povolené alebo
 zakázané upravovanie textu. Ak sú
 úpravy zakázané, poznámkový blok slúži len na zobrazenie textu,
 ktorý z neho môže byť prípadne skopírovaný.
Návratová hodnota:
true – úprava textu je povolená;
     false – úprava textu je zakázaná
Pozri tiež:
upravuj(), 
neupravuj()
upravitelny
public boolean upravitelny()
 Alias pre upraviteľný.
upravuj
public void upravuj()
Povolí úpravu textu v poznámkovom bloku. Poznámkový blok má
 predvolene povolenú úpravu textu. Môžeme ju však zakázať a neskôr týmto príkazom opätovne povoliť.
Pozri tiež:
upraviteľný(), 
upravuj(), 
neupravuj()
neupravuj
public void neupravuj()
Zakáže úpravu textu poznámkového bloku. Po vykonaní tohto
 príkazu prestane byť poznámkový blok použiteľný na úpravu textu,
 ktorý obsahuje.
Pozri tiež:
upraviteľný(), 
upravuj(), 
neupravuj()
viditeľný
public boolean viditeľný()
Zistí, či je poznámkový blok viditeľný (zobrazený) alebo nie. Po
 vytvorení je poznámkový blok predvolene viditeľný, môžeme ho skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda zobrazený.
Pozri tiež:
zobrazený(), 
zobraz(), 
skry()
viditelny
public boolean viditelny()
 Alias pre viditeľný.
zobrazený
public boolean zobrazený()
Zistí, či je poznámkový blok zobrazený (viditeľný) alebo nie. Po
 vytvorení je poznámkový blok predvolene zobrazený, môžeme ho skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda viditeľný.
Pozri tiež:
viditeľný(), 
zobraz(), 
skry()
zobrazeny
public boolean zobrazeny()
 Alias pre zobrazený.
zobraz
public void zobraz()
Zobrazí poznámkový blok. (Viac informácií nájdete v opise metódy
 zobrazený.)
Pozri tiež:
viditeľný(), 
zobrazený(), 
skry()
skry
public void skry()
Skryje poznámkový blok. (Viac informácií nájdete v opise metódy
 zobrazený.)
Pozri tiež:
viditeľný(), 
zobrazený(), 
zobraz()
setVisible
public void setVisible(boolean visible)
Prekrytie originálnej metódy. (Na zabezpečenie postúpenia vstupu
 klávesnice (fokusu) hlavnému panelu (pri skrytí poznámkového
 bloku) a tiež na synchronizované zobrazenie/skrytie všetkých súčastí
 poznámkového bloku – JComponent.setVisible(boolean),
 JComponent.setVisible(boolean).)
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JComponent.setVisible(boolean). 
 
 
Prekrývanie:
táto metóda prekrýva originálnu metódu setVisible v triede JComponent
Parametre:
visible – true alebo false podľa toho, či
     má byť poznámkový blok zobrazený alebo skrytý
Pozri tiež:
JComponent.setVisible(boolean)
zakážTabulátor
public void zakážTabulátor(boolean zakážTabulátor)
 Zakáže alebo povolí predvolenú funkciu
 klávesu tabulátora a vkladania znakov tabulátora pre tento poznámkový
 blok.
 Predvolene je hodnota tejto vlastnosti nastavená na false
 a kláves tabulátora vkladá znak tabulátora do textu poznámkového bloku.
 Ak túto funkciu zakážeme, tak kláves tabulátora bude plniť funkciu
 prechodu na ďalší (prípadne so Shiftom predchádzajúci) komponent
 sveta a vkladanie tabulátorov bude zakázané aj inými mechanizmami.
 
 Poznámka: Nastavenie tejto vlastnosti
 neznamená, že tabulátor nemôže byť vložený do poznámkového bloku
 iným spôsobom.
Parametre:
zakážTabulátor – true ak má byť predvolená funkčnosť
     klávesu a vkladanie znaku tabulátora zakázané; false
     v opačnom prípade
Pozri tiež:
zakážTabulátor()
zakážTabulátor
public boolean zakážTabulátor()
 Zistí, či je zakázaná predvolená funkcia
 tabulátora a vkladanie znaku tabulátora pre tento poznámkový blok.
Návratová hodnota:
true ak je predvolená funkčnosť klávesu a vkladanie
     znaku tabulátora zakázané; false v opačnom prípade
Pozri tiež:
zakážTabulátor(boolean)
zakazTabulator
public void zakazTabulator(boolean zakážTabulátor)
 Alias pre zakážTabulátor.
zakazTabulator
public boolean zakazTabulator()
 Alias pre zakážTabulátor.
zakážEnter
public void zakážEnter(boolean zakážEnter)
 Zakáže alebo povolí predvolenú funkciu
 klávesu Enter a vkladania znakov nového riadka pre tento
 poznámkový blok.
 Predvolene je hodnota tejto vlastnosti nastavená na false,
 kláves Enter vkladá nový riadok do textu poznámkového bloku
 a vkladanie nových riadkov je povolené aj inými mechanizmami. Ak túto
 vlastnosť nastavíme na true, tak Enter prestane
 túto funkciu plniť a do poznámkového bloku bude zakázané vkladanie
 znakov nových riadkov.
 Ak v takom prípade pre kláves Enter definovaná klávesová skratka sveta,
 tak je vykonaný príkaz prislúchajúci tejto skratke.
 
 Poznámka: Nastavenie tejto vlastnosti
 neznamená, že nový riadok nemôže byť vložený do poznámkového bloku
 iným spôsobom.
Parametre:
zakážEnter – true ak má byť predvolená funkčnosť
     klávesu a vkladanie znakov nového riadka zakázané;
     false v opačnom prípade
Pozri tiež:
zakážEnter()
zakážEnter
public boolean zakážEnter()
 Zistí, či je zakázaná predvolená funkcia
 klávesu Enter a vkladania znakov nových riadkov pre tento
 poznámkový blok.
Návratová hodnota:
true ak je predvolená funkčnosť klávesu a vkladanie
     znakov nových riadkov zakázané; false v opačnom prípade
Pozri tiež:
zakážEnter(boolean)
zakazEnter
public void zakazEnter(boolean zakážEnter)
 Alias pre zakážEnter.
zakazEnter
public boolean zakazEnter()
 Alias pre zakážEnter.
farbaTextu
public Farba farbaTextu()
 Zistí aktuálnu farbu textu poznámkového
 bloku.
Návratová hodnota:
aktuálna farba textu poznámkového bloku (objekt typu
     Farba)
farbaTextu
public void farbaTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť textu
 poznámkového bloku podľa zadaného objektu.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou textu
     poznámkového bloku; jestvuje paleta predvolených farieb
     (pozri napr.: biela, červená,
     čierna…)
farbaTextu
public void farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu poznámkového bloku podľa
 zadaného objektu.
Parametre:
objekt – objekt určujúci novú farbu textu poznámkového bloku
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b)
Nastaví farbu textu poznámkového bloku podľa zadaných farebných
 zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b,
                        int a)
Nastaví farbu a (ne)priehľadnosť textu poznámkového bloku podľa
 zadaných farebných zložiek a úrovne priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
farbaPozadiaTextu
public Farba farbaPozadiaTextu()
 Zistí aktuálnu farbu pozadia textu
 poznámkového bloku.
Návratová hodnota:
aktuálna farba pozadia textu poznámkového bloku (objekt typu
     Farba)
farbaPozadiaTextu
public void farbaPozadiaTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 textu poznámkového bloku podľa zadaného objektu.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou pozadia
     textu poznámkového bloku; jestvuje paleta predvolených farieb
     (pozri napr.: biela, červená,
     čierna…)
farbaPozadiaTextu
public void farbaPozadiaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia textu poznámkového bloku
 podľa zadaného objektu.
Parametre:
objekt – objekt určujúci novú farbu pozadia textu poznámkového
     bloku
farbaPozadiaTextu
public Farba farbaPozadiaTextu(int r,
                               int g,
                               int b)
Nastaví farbu pozadia textu poznámkového bloku podľa zadaných
 farebných zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia textu
Pozri tiež:
farbaPozadiaTextu(Color)
farbaPozadiaTextu
public Farba farbaPozadiaTextu(int r,
                               int g,
                               int b,
                               int a)
Nastaví farbu a (ne)priehľadnosť pozadia textu poznámkového
 bloku podľa zadaných farebných zložiek a úrovne priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia textu
Pozri tiež:
farbaPozadiaTextu(Color)
farbaTextuOznačenia
public Farba farbaTextuOznačenia()
 Číta farbu označenia (označeného textu)
 poznámkového bloku.
Návratová hodnota:
aktuálna farba textu označenia poznámkového bloku (objekt
     typu Farba)
farbaTextuOznačenia
public void farbaTextuOznačenia(Color nováFarba)
 Nastaví farbu a priehľadnosť bloku
 označenia poznámkového bloku podľa zadanej farebnej inštancie.
Parametre:
nováFarba – objekt určujúci novú farbu textu označenia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaTextuOznačenia
public void farbaTextuOznačenia(Farebnosť objekt)
Nastaví podľa zadaného objektu farbu a priehľadnosť bloku
 označenia poznámkového bloku.
Parametre:
objekt – objekt určujúci novú farbu textu označenia
farbaTextuOznačenia
public Farba farbaTextuOznačenia(int r,
                                 int g,
                                 int b)
Nastaví podľa zadaných farebných zložiek farbu bloku
 označenia poznámkového bloku.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textu označenia
Pozri tiež:
farbaTextuOznačenia(Color)
farbaTextuOznačenia
public Farba farbaTextuOznačenia(int r,
                                 int g,
                                 int b,
                                 int a)
Nastaví podľa zadaných farebných zložiek a úrovne priehľadnosti
 farbu a (ne)priehľadnosť bloku označenia poznámkového bloku.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba textu označenia
Pozri tiež:
farbaTextuOznačenia(Color)
farbaTextuOznacenia
public Farba farbaTextuOznacenia()
 Alias pre farbaTextuOznačenia.
farbaTextuOznacenia
public void farbaTextuOznacenia(Color nováFarba)
 Alias pre farbaTextuOznačenia.
farbaTextuOznacenia
public void farbaTextuOznacenia(Farebnosť objekt)
 Alias pre farbaTextuOznačenia.
farbaTextuOznacenia
public Farba farbaTextuOznacenia(int r,
                                 int g,
                                 int b)
 Alias pre farbaTextuOznačenia.
farbaTextuOznacenia
public Farba farbaTextuOznacenia(int r,
                                 int g,
                                 int b,
                                 int a)
 Alias pre farbaTextuOznačenia.
farbaPozadiaOznačenia
public Farba farbaPozadiaOznačenia()
 Číta farbu pozadia označenia (označeného
 textu) poznámkového bloku.
Návratová hodnota:
aktuálna farba pozadia označenia poznámkového bloku (objekt
     typu Farba)
farbaPozadiaOznačenia
public void farbaPozadiaOznačenia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 označenia (označeného textu) poznámkového bloku podľa zadanej
 farebnej inštancie.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia označenia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaPozadiaOznačenia
public void farbaPozadiaOznačenia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia označenia (označeného textu)
 poznámkového bloku podľa zadaného objektu.
Parametre:
objekt – objekt určujúci novú farbu pozadia označenia
farbaPozadiaOznačenia
public Farba farbaPozadiaOznačenia(int r,
                                   int g,
                                   int b)
Nastaví farbu pozadia označenia (označeného textu) poznámkového
 bloku podľa zadaných farebných zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
     označenia
Pozri tiež:
farbaPozadiaOznačenia(Color)
farbaPozadiaOznačenia
public Farba farbaPozadiaOznačenia(int r,
                                   int g,
                                   int b,
                                   int a)
Nastaví farbu a (ne)priehľadnosť pozadia označenia (označeného
 textu) poznámkového bloku podľa zadaných farebných zložiek a úrovne
 priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
     označenia
Pozri tiež:
farbaPozadiaOznačenia(Color)
farbaPozadiaOznacenia
public Farba farbaPozadiaOznacenia()
 Alias pre farbaPozadiaOznačenia.
farbaPozadiaOznacenia
public void farbaPozadiaOznacenia(Color nováFarba)
 Alias pre farbaPozadiaOznačenia.
farbaPozadiaOznacenia
public void farbaPozadiaOznacenia(Farebnosť objekt)
 Alias pre farbaPozadiaOznačenia.
farbaPozadiaOznacenia
public Farba farbaPozadiaOznacenia(int r,
                                   int g,
                                   int b)
 Alias pre farbaPozadiaOznačenia.
farbaPozadiaOznacenia
public Farba farbaPozadiaOznacenia(int r,
                                   int g,
                                   int b,
                                   int a)
 Alias pre farbaPozadiaOznačenia.
farbaPozadia
public Farba farbaPozadia()
 Číta farbu pozadia poznámkového bloku.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba pozadia poznámkového bloku (objekt typu
     Farba)
farbaPozadia
public void farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 poznámkového bloku podľa zadanej farebnej inštancie.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaPozadia
public void farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia poznámkového bloku podľa
 zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu pozadia
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b)
Nastaví farbu pozadia poznámkového bloku podľa zadaných
 farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b,
                          int a)
Nastaví farbu a (ne)priehľadnosť pozadia poznámkového bloku
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaKurzora
public Farba farbaKurzora()
 Číta farbu kurzora poznámkového bloku.
Návratová hodnota:
aktuálna farba kurzora poznámkového bloku (objekt typu
     Farba)
farbaKurzora
public void farbaKurzora(Color nováFarba)
 Nastaví farbu a priehľadnosť kurzora
 poznámkového bloku podľa zadanej farebnej inštancie.
Parametre:
nováFarba – objekt určujúci novú farbu kurzora;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaKurzora
public void farbaKurzora(Farebnosť objekt)
Nastaví farbu a priehľadnosť kurzora poznámkového bloku podľa
 zadaného objektu.
Parametre:
objekt – objekt určujúci novú farbu kurzora
farbaKurzora
public Farba farbaKurzora(int r,
                          int g,
                          int b)
Nastaví farbu kurzora poznámkového bloku podľa zadaných
 farebných zložiek.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba kurzora
Pozri tiež:
farbaKurzora(Color)
farbaKurzora
public Farba farbaKurzora(int r,
                          int g,
                          int b,
                          int a)
Nastaví farbu a (ne)priehľadnosť kurzora poznámkového bloku
 podľa zadaných farebných zložiek a úrovne priehľadnosti.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba kurzora
Pozri tiež:
farbaKurzora(Color)
farbaNeaktívnehoTextu
public Farba farbaNeaktívnehoTextu()
 Číta farbu neaktívneho textu poznámkového
 bloku. Neaktívny text je všetok text deaktivovaného poznámkového bloku.
Návratová hodnota:
aktuálna farba neaktívneho textu poznámkového bloku (objekt
     typu Farba)
farbaNeaktívnehoTextu
public void farbaNeaktívnehoTextu(Color nováFarba)
 Nastaví farbu a priehľadnosť neaktívneho
 textu poznámkového bloku podľa zadanej farebnej inštancie.
 (Neaktívny text je všetok text deaktivovaného poznámkového bloku.)
Parametre:
nováFarba – objekt určujúci novú farbu neaktívneho textu;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaNeaktívnehoTextu
public void farbaNeaktívnehoTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť neaktívneho textu poznámkového
 bloku podľa zadaného objektu.
 (Neaktívny text je všetok text deaktivovaného poznámkového bloku.)
Parametre:
objekt – objekt určujúci novú farbu neaktívneho textu
farbaNeaktívnehoTextu
public Farba farbaNeaktívnehoTextu(int r,
                                   int g,
                                   int b)
Nastaví farbu neaktívneho textu poznámkového bloku podľa
 zadaných farebných zložiek.
 (Neaktívny text je všetok text deaktivovaného poznámkového bloku.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba neaktívneho
     textu
Pozri tiež:
farbaNeaktívnehoTextu(Color)
farbaNeaktívnehoTextu
public Farba farbaNeaktívnehoTextu(int r,
                                   int g,
                                   int b,
                                   int a)
Nastaví farbu a (ne)priehľadnosť neaktívneho textu poznámkového
 bloku podľa zadaných farebných zložiek a úrovne priehľadnosti.
 (Neaktívny text je všetok text deaktivovaného poznámkového bloku.)
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba neaktívneho
     textu
Pozri tiež:
farbaNeaktívnehoTextu(Color)
farbaNeaktivnehoTextu
public Farba farbaNeaktivnehoTextu()
 Alias pre farbaNeaktívnehoTextu.
farbaNeaktivnehoTextu
public void farbaNeaktivnehoTextu(Color nováFarba)
 Alias pre farbaNeaktívnehoTextu.
farbaNeaktivnehoTextu
public void farbaNeaktivnehoTextu(Farebnosť objekt)
 Alias pre farbaNeaktívnehoTextu.
farbaNeaktivnehoTextu
public Farba farbaNeaktivnehoTextu(int r,
                                   int g,
                                   int b)
 Alias pre farbaNeaktívnehoTextu.
farbaNeaktivnehoTextu
public Farba farbaNeaktivnehoTextu(int r,
                                   int g,
                                   int b,
                                   int a)
 Alias pre farbaNeaktívnehoTextu.
názovPísma
public String názovPísma()
 Zistí názov písma textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
Návratová hodnota:
aktuálny názov písma textu poznámkového bloku
nazovPisma
public String nazovPisma()
 Alias pre názovPísma.
názovPísma
public void názovPísma(String názovPísma)
 Nastaví názov písma označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
Parametre:
názovPísma – reťazec s novým názvom písma
nazovPisma
public void nazovPisma(String názovPísma)
 Alias pre názovPísma.
veľkosťPísma
public int veľkosťPísma()
 Zistí veľkosť písma textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
Návratová hodnota:
veľkosť písma
velkostPisma
public int velkostPisma()
 Alias pre veľkosťPísma.
veľkosťPísma
public void veľkosťPísma(int veľkosťPísma)
 Nastaví veľkosť písma označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
Parametre:
veľkosťPísma – nová veľkosť písma
velkostPisma
public void velkostPisma(int veľkosťPísma)
 Alias pre veľkosťPísma.
tučné
public boolean tučné()
 Zistí či je písmo na aktuálnej
 pozícii kurzora tučné.
Návratová hodnota:
príznak tučného písma
tucne
public boolean tucne()
 Alias pre tučné.
silné
public boolean silné()
 Alias pre tučné.
silne
public boolean silne()
 Alias pre tučné.
tučné
public void tučné(boolean tučné)
 Nastaví tučné písmo označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
Parametre:
tučné – príznak tučného písma
tucne
public void tucne(boolean tučné)
 Alias pre tučné.
silné
public void silné(boolean tučné)
 Alias pre tučné.
silne
public void silne(boolean tučné)
 Alias pre tučné.
kurzíva
public boolean kurzíva()
 Zistí či je písmo na aktuálnej
 pozícii kurzora v poznámkovom bloku písané kurzívou.
Návratová hodnota:
stav kurzívy
kurziva
public boolean kurziva()
 Alias pre kurzíva.
šikmé
public boolean šikmé()
 Alias pre kurzíva.
sikme
public boolean sikme()
 Alias pre kurzíva.
kurzíva
public void kurzíva(boolean kurzíva)
 Nastaví kurzívu písmu označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
Parametre:
kurzíva – stav kurzívy
kurziva
public void kurziva(boolean kurzíva)
 Alias pre kurzíva.
šikmé
public void šikmé(boolean kurzíva)
 Alias pre kurzíva.
sikme
public void sikme(boolean kurzíva)
 Alias pre kurzíva.
zarovnať
public int zarovnať()
 Zistí, aké je zarovnanie textu na aktuálnej
 pozícii kurzora v poznámkovom bloku.
Návratová hodnota:
stav zarovnania; na porovnanie môžete použiť konštanty
     ZAROVNAŤ_NA_STRED,
     ZAROVNAŤ_PODĽA_OKRAJOV,
     ZAROVNAŤ_DOĽAVA
     a ZAROVNAŤ_DOPRAVA
zarovnat
public int zarovnat()
 Alias pre zarovnať.
zarovnať
public void zarovnať(int zarovnať)
 Nastaví zarovnanie označeného textu
 alebo textu, ktorý má byť vkladaný na aktuálnu pozíciu
 poznámkového bloku.
Parametre:
zarovnať – stav zarovnania; môžete použiť konštanty
     ZAROVNAŤ_NA_STRED,
     ZAROVNAŤ_PODĽA_OKRAJOV,
     ZAROVNAŤ_DOĽAVA
     a ZAROVNAŤ_DOPRAVA
zarovnat
public void zarovnat(int zarovnať)
 Alias pre zarovnať.
text
public String text()
 Vráti text dokumentu vo forme čistého
 textu. Ak je typ dokumentu text/plain alebo
 text/html, tak vráti aktuálny obsah poznámkového
 bloku ako čistý text, inak vráti hodnotu null.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Návratová hodnota:
čistý text poznámkového bloku alebo null
Pozri tiež:
text(String), 
označenýText(), 
polohaKurzora(int)
text
public void text(String text)
 Nastaví nový čistý text poznámkového
 bloku. Táto metóda nastaví typ obsahu na text/plain,
 čo je predvolený typ obsahu.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Parametre:
text – nový čistý text poznámkového bloku
Pozri tiež:
PoznámkovýBlok(String), 
PoznámkovýBlok(String, boolean), 
text()
html
public String html()
 Ak je typ dokumentu text/html,
 tak vráti aktuálny HTML obsah poznámkového bloku (vo forme čistého
 textu obsahujúceho HTML syntax), inak vráti hodnotu null.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Návratová hodnota:
HTML text poznámkového bloku alebo null
Pozri tiež:
html(String)
html
public void html(String html)
 Nastaví nový HTML obsah poznámkového
 bloku. Metóda očakáva obsah vo forme čistého textu, ktorý obsahuje
 HTML syntax, ale prijatý obsah nijako neoveruje, ani nemodifikuje.
 Táto metóda nastaví typ obsahu na text/html,
 ktorý je automaticky nastavený konštruktorom v prípade, že sa
 ním nastavovaný text začína značkou &lt;html&gt;.
 
 Poznámka: Typ dokumentu je možné overiť
 zdedenou metódou getContentType(),
 ktorá vráti typ v reťazcovej podobe. Príklady: "text/plain", "text/html".
Parametre:
text – nový HTML obsah poznámkového bloku
Pozri tiež:
PoznámkovýBlok(String), 
PoznámkovýBlok(String, boolean), 
html()
polohaKurzora
public int polohaKurzora()
Zistí a vráti aktuálnu polohu textového kurzora (angl.
 caret).
Návratová hodnota:
aktuálna poloha textového kurzora
Pozri tiež:
polohaKurzora(), 
polohaKurzora(int), 
presuňKurzor(int), 
označenýText()
setCaretPosition
public void setCaretPosition(int nováPozícia)
Prekrytie originálnej metódy, aby boli filtrované nekorektné
 hodnoty pozície kurzora a aby metóda nevrhala výnimky. Slovenská
 verzia tejto metódy sa volá polohaKurzora.
 
 Nastaví novú polohu kurzora (angl. caret). Majte na pamäti,
 že aktuálnu polohu kurzora ovplyvňujú aj zmeny v dokumente,
 takže sa môže zmeniť, ak sa mení objem textu pred kurzorom.
 Ak je hodnota parametra nováPozícia záporná tak, táto
 prekrytá verzia metódy z nej vypočíta platnú pozíciu od konca
 textu, pričom hodnota −1 ukazuje na koniec textu. Tiež, ak
 hodnota parametra nováPozícia prekračuje objem textu,
 tak je automaticky zaokrúhlená tak, aby ukazovala na koniec
 textu. Vďaka týmto opatreniam by metóda nemala vrhať výnimky.
 Ak je dokument poznámkového bloku prázdny (null),
 tak sa nestane nič.
 
 Na presunutie kurzora na novú pozíciu a súčasné vytvorenie
 označenia slúži metóda moveCaretPosition.
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JTextComponent.setCaretPosition(int). 
 
 
Prekrývanie:
táto metóda prekrýva originálnu metódu setCaretPosition v triede JTextComponent
Parametre:
nováPozícia – nová pozícia textového kurzora
Pozri tiež:
moveCaretPosition(int), 
polohaKurzora(), 
polohaKurzora(int), 
presuňKurzor(int), 
označenýText()
polohaKurzora
public void polohaKurzora(int nováPozícia)
Nastaví novú polohu kurzora (angl. caret). Táto metóda
 využíva prekrytú metódu setCaretPosition, takže pre ňu platia tie isté informácie,
 ktoré sú uvedené v opise prekrytej metódy.
Parametre:
nováPozícia – nová pozícia textového kurzora
Pozri tiež:
polohaKurzora(), 
presuňKurzor(int), 
setCaretPosition(int), 
označenýText()
moveCaretPosition
public void moveCaretPosition(int nováPozícia)
Prekrytie originálnej metódy, aby boli filtrované nekorektné
 hodnoty pozície kurzora a aby metóda nevrhala výnimky. Slovenská
 verzia tejto metódy sa volá presuňKurzor.
 
 Presunie kurzor (angl. caret) na novú pozíciu a vytvorí pri
 tom označenie. Ak je hodnota parametra nováPozícia
 záporná, tak táto prekrytá verzia metódy z nej vypočíta platnú
 pozíciu od konca textu, pričom hodnota −1 ukazuje na koniec
 textu. Tiež, ak hodnota parametra nováPozícia prekračuje
 objem textu, tak je automaticky zaokrúhlená tak, aby ukazovala
 na koniec textu. Vďaka týmto opatreniam by metóda nemala vrhať
 výnimky. Ak je dokument poznámkového bloku prázdny
 (null), tak sa nestane nič.
 
 Na nastavenie novej polohy kurzora a zrušenie označenia
 slúži metóda setCaretPosition.
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JTextComponent.moveCaretPosition(int). 
Prekrývanie:
táto metóda prekrýva originálnu metódu moveCaretPosition v triede JTextComponent
Parametre:
nováPozícia – nová pozícia textového kurzora
Pozri tiež:
setCaretPosition(int), 
polohaKurzora(), 
polohaKurzora(int), 
presuňKurzor(int), 
označenýText()
presuňKurzor
public void presuňKurzor(int nováPozícia)
Presunie kurzor (angl. caret) na novú pozíciu a vytvorí pri
 tom označenie. Táto metóda využíva prekrytú metódu
 moveCaretPosition, takže pre
 ňu platia tie isté informácie, ktoré sú uvedené v opise
 prekrytej metódy.
Parametre:
nováPozícia – nová pozícia textového kurzora
Pozri tiež:
polohaKurzora(), 
polohaKurzora(int), 
moveCaretPosition(int), 
označenýText()
presunKurzor
public void presunKurzor(int nováPozícia)
 Alias pre presuňKurzor.
označenýText
public String označenýText()
Vráti označený text dokumentu. Metóda vracia čistý text.
 
 Poznámka: Na rozdiel od zdedenej metódy
 getSelectedText() nevracia táto metóda
 (v prípade neúspechu alebo neočakávaného stavu)
 hodnotu null, ale prázdny reťazec "".
Návratová hodnota:
čistý text označenej časti dokumentu poznámkového bloku
Pozri tiež:
text(), 
text(String), 
nahraďOznačenie(String), 
nahraďOznačenie(String, boolean), 
polohaKurzora(int)
oznacenyText
public String oznacenyText()
 Alias pre označenýText.
nahraďOznačenie
public void nahraďOznačenie(String obsah)
Nahradí aktuálne označený obsah zadaným obsahom (reťazcom).
 Táto metóda sa správa rovnako, ako keby sme volali metódu:
 nahraďOznačenie(obsah, false);.
 (Ďalšie podrobnosti nájdete v jej opise.)
Parametre:
obsah – obsah, ktorým má byť nahradené aktuálne označenie
Pozri tiež:
označenýText(), 
nahraďOznačenie(String, boolean), 
polohaKurzora(int)
nahradOznacenie
public void nahradOznacenie(String obsah)
 Alias pre nahraďOznačenie.
nahraďOznačenie
public void nahraďOznačenie(String obsah,
                            boolean ponechajOznačenie)
Nahradí aktuálne označený obsah zadaným obsahom (reťazcom).
 Ak nie je označený žiadny text, zadaný reťazec bude vložený
 na aktuálnu pozíciu v poznámkovom bloku. Ak je zadaný reťazec
 prázdny, tak text aktuálneho označenia (ak jestvuje) bude vymazaný.
 Vkladaný text bude mať také atribúty textu, ktoré sú platné
 v mieste vkladania. Ak dokument nie je upraviteľný, metóda prehrá zvuk pípnutia a skončí.
 
 Parameter ponechajOznačenie dovoľuje určiť, či má
 byť po vykonaní nahradenia pôvodné označenie zrušené, alebo
 má zostať v pôvodnom stave (ak to objem textu, ktorý zostane
 v dokumente po nahradení dovolí). Ak je hodnota tohto parametra
 true, tak označenie zostane nedotknuté – v pôvodnom
 rozsahu, pričom nahradený text sa môže, ale nemusí (čiastočne
 alebo úplne) nachádzať v ňom. Ak je hodnota parametra
 false, tak bude označenie po vykonaní nahradenia
 zrušené.
Parametre:
obsah – obsah, ktorým má byť nahradené aktuálne označenie
ponechajOznačenie – ak je true, tak napriek
     nahradeniu zostane v bloku aktívne aktuálne označenie
     (pričom nahradený text sa môže, a nemusí celý
     alebo čiastočne nachádzať v ňom)
Pozri tiež:
označenýText(), 
nahraďOznačenie(String), 
polohaKurzora(int)
nahradOznacenie
public void nahradOznacenie(String obsah,
                            boolean ponechajOznačenie)
 Alias pre nahraďOznačenie.
jeDekorZrušený
public boolean jeDekorZrušený()
Zistí, či má poznámkový blok zrušený dekor. Toto je predvolený stav
 a programovo sa dá dosiahnuť volaním metódy zrušDekor s parametrom true, čím sa pôvodný dekor odstráni zo
 všetkých súčastí poznámkového bloku.
Návratová hodnota:
true ak bol dekor odstránený (predvolenou konštrukciou
     alebo metódou zrušDekor), false
     v opačnom prípade
Pozri tiež:
máDekor(), 
zrušDekor(boolean)
jeDekorZruseny
public boolean jeDekorZruseny()
 Alias pre jeDekorZrušený.
máDekor
public boolean máDekor()
Zistí, či má poznámkový blok dekor. Táto metóda vracia opačnú
 logickú hodnotu ako metóda jeDekorZrušený
 (pozr jej opis) a je jej doplnkom.
 
 (Zrušenie dekoru sa programovo dá dosiahnuť volaním metódy
 zrušDekor s parametrom true.)
Návratová hodnota:
true ak nebol dekor odstránený (predvolenou
     konštrukciou alebo metódou zrušDekor),
     false v opačnom prípade
Pozri tiež:
jeDekorZrušený(), 
zrušDekor(boolean)
maDekor
public boolean maDekor()
 Alias pre máDekor.
zrušDekor
public void zrušDekor(boolean zrušiť)
Obnoví pôvodný alebo zruší aktuálny dekor poznámkového bloku. Ak je
 hodnota parametra zrušiť rovná true, tak je aktuálny
 dekor (orámovanie, pozadie a stav nepriehľadnosti) vymazaný (to je
 predvolený stav poznámkových blokov tohto rámca, pričom pôvodný dekor
 je uložený do vnútorných stavov blokov, aby mohol byť touto metódou
 obnovený). V opačnom prípade (čiže keď je parameter zrušiť
 rovný false) je obnovený ten dekor, ktorý bol aktívny v čase
 vytvárania komponentov (súčastí) poznámkového bloku.
 
 Poznámka: Pozor na priame nastavovanie
 orámovania, farby pozadia a nepriehľadnosti tohto poznámkového bloku
 a jeho súčastí. Tento mechanizus ich ruší.
Parametre:
zrušiť – pravdivostná hodnota true/false,
     ktorá má určiť, či má byť tento komponent dekorovaný, alebo nie
Pozri tiež:
jeDekorZrušený(), 
máDekor()
zrusDekor
public void zrusDekor(boolean zrušiť)
 Alias pre zrušDekor.
režimZobrazeniaRolovacíchLíšt
public void režimZobrazeniaRolovacíchLíšt(Boolean horizontálna,
                                          Boolean vertikálna)
Nastaví režim zobrazenia rolovacích líšt poznámkového bloku. Ak je
 parameter pre prislúchajúcu lištu (horizontálna alebo
 vertikálna) rovný hodnote true, tak bude lišta stále
 viditeľná, ak je rovný false, tak bude stále skrytá a ak je
 rovný null, tak bude lišta fungovať v automatickom režime
 a bude sa zobrazovať alebo skrývať podľa potreby (toto je predvolený
 režim zobrazenia líšt).
Parametre:
horizontálna – režim zobrazenia horizontálnej (vodorovnej) lišty
vertikálna – režim zobrazenia vertikálnej (zvislej) lišty
Pozri tiež:
režimZobrazeniaHorizontálnejLišty(), 
režimZobrazeniaVertikálnejLišty()
rezimZobrazeniaRolovacichList
public void rezimZobrazeniaRolovacichList(Boolean horizontálna,
                                          Boolean vertikálna)
 Alias pre režimZobrazeniaRolovacíchLíšt.
režimZobrazeniaHorizontálnejLišty
public Boolean režimZobrazeniaHorizontálnejLišty()
Zistí režim zobrazenia horizontálnej rolovacej lišty poznámkového
 bloku. Hodnota true znamená, že lišta je stále viditeľná.
 Hodnota false znamená, že lišta je stále skrytá. Hodnota
 null znamená, že lišta funguje v automatickom režime –
 zobrazuje alebo skrýva sa podľa potreby (toto je predvolený režim
 zobrazenia líšt). (Hodnota null je vrátená aj v prípade
 chybného nastavenia režimu tejto lišty, ale tento prípad by nemal
 nastať.)
Návratová hodnota:
režim zobrazenia horizontálnej rolovacej lišty (true,
     false, null)
Pozri tiež:
režimZobrazeniaRolovacíchLíšt(Boolean, Boolean), 
režimZobrazeniaVertikálnejLišty()
rezimZobrazeniaHorizontalnejListy
public Boolean rezimZobrazeniaHorizontalnejListy()
 Alias pre režimZobrazeniaHorizontálnejLišty.
režimZobrazeniaVertikálnejLišty
public Boolean režimZobrazeniaVertikálnejLišty()
Zistí režim zobrazenia vertikálnej rolovacej lišty poznámkového
 bloku. Hodnota true znamená, že lišta je stále viditeľná.
 Hodnota false znamená, že lišta je stále skrytá. Hodnota
 null znamená, že lišta funguje v automatickom režime –
 zobrazuje alebo skrýva sa podľa potreby (toto je predvolený režim
 zobrazenia líšt). (Hodnota null je vrátená aj v prípade
 chybného nastavenia režimu tejto lišty, ale tento prípad by nemal
 nastať.)
Návratová hodnota:
režim zobrazenia vertikálnej rolovacej lišty (true,
     false, null)
Pozri tiež:
režimZobrazeniaRolovacíchLíšt(Boolean, Boolean), 
režimZobrazeniaHorizontálnejLišty()
rezimZobrazeniaVertikalnejListy
public Boolean rezimZobrazeniaVertikalnejListy()
 Alias pre režimZobrazeniaVertikálnejLišty.
rolovanie
public JScrollPane rolovanie()
Poskytne komponent rolovania JScrollPane
 poznámkového bloku.
Návratová hodnota:
komponent rolovania JScrollPane
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Priehľadnosť
Všetky známe odvodené rozhrania:
Priehladnost
Všetky známe implementujúce triedy:
GRobot, Obrazok, Obrázok, Platno, Plátno
public interface Priehľadnosť
Rozhranie slúži na implementáciu metódy slúžiacej na zistenie aktuálnej
 úrovne priehľadnosti a na definíciu konštánt priehľadnosti.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static float
NEPRIEHLADNA
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEPRIEHĽADNÁ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEPRIEHLADNE
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEPRIEHĽADNÉ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEPRIEHLADNY
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEPRIEHĽADNÝ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
static float
NEVIDITELNA
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
static float
NEVIDITEĽNÁ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
static float
NEVIDITELNE
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
static float
NEVIDITEĽNÉ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
static float
NEVIDITELNY
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
static float
NEVIDITEĽNÝ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
double
priehladnost()
Prototyp metódy na zistenie aktuálnej úrovne priehľadnosti objektu.
double
priehľadnosť()
Prototyp metódy na zistenie aktuálnej úrovne priehľadnosti objektu.
Podrobnosti atribútov
NEPRIEHĽADNÝ
static final float NEPRIEHĽADNÝ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEPRIEHLADNY
static final float NEPRIEHLADNY
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEPRIEHĽADNÁ
static final float NEPRIEHĽADNÁ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEPRIEHLADNA
static final float NEPRIEHLADNA
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEPRIEHĽADNÉ
static final float NEPRIEHĽADNÉ
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEPRIEHLADNE
static final float NEPRIEHLADNE
Hodnota priehľadnosti zodpovedajúca úplne nepriehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITEĽNÝ
static final float NEVIDITEĽNÝ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITELNY
static final float NEVIDITELNY
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITEĽNÁ
static final float NEVIDITEĽNÁ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITELNA
static final float NEVIDITELNA
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITEĽNÉ
static final float NEVIDITEĽNÉ
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
NEVIDITELNE
static final float NEVIDITELNE
Hodnota priehľadnosti zodpovedajúca úplne priehľadnému objektu.
Pozri tiež:
Hodnoty konštánt
Podrobnosti metód
priehľadnosť
double priehľadnosť()
Prototyp metódy na zistenie aktuálnej úrovne priehľadnosti objektu.
priehladnost
double priehladnost()
Prototyp metódy na zistenie aktuálnej úrovne priehľadnosti objektu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Rad
java.lang.Object
Rad
public class Rad
extends Object
Trieda Rad umožňuje vytvárať inštancie generujúce pílové
 číselné postupnosti. To znamená, že každá inštancia tejto triedy generuje
 periodický stúpajúco-klesajúci číselný rad podľa zadaných hraníc
 a kroku.
 
 
 Ukážky pílových
 číselných postupností.
 
 Metóda daj generuje rad algoritmicky (s pomocou
 niekoľkých súkromných stavových premenných). Zjednodušene (s jednotkovým
 krokom a bez korekcií hodnôt) je postup generovania takýto:
 
 Ak je smer vzostupný, tak
     zvýš hodnotu;
     ak hodnota dosiahne vrchnú hranicu, tak
         obráť smer;
 inak
     zníž hodnotu;
     ak hodnota dosiahne spodnú hranicu, tak
         obráť smer.
 
 Naproti tomu, metóda dajHodnotu, ktorá
 vyžaduje zadanie číselného parametra počíta členy radu aritmeticky.
 Aritmetické riešenie generovania číselného radu (na zjednodušenie
 s jednotkovým krokom) vyzerá takto:
 
 Výpočet ľubovoľného člena radu podľa parametra pa:
 
 vh − |(pa mod (2 × (vh − sh))) − (vh − sh)|
 
 Kde:
 
 sh – spodná hranica,
 vh – vrchná hranica,
 pa – parameter („fáza“ výpočtu radu),
 
 mod – operátor zvyšku po delení (v Jave symbol %),
 |…| – absolútna hodnota.
 
 Po zjednodušení s použitím pomocných premenných:
 
 vh − |(pa mod de) − rh|
 
 Kde:
 
 rh – rozdiel hraníc: vh − sh,
 de – deliteľ: 2 × rh.
 
 Príklad:
 
 Tento jednoduchý príklad používa dva rady na plynulé nastavovanie
 horizontálnej a vertikálnej rýchlosti robota.
 
 
import knižnica.*;
public class PríkladPoužitiaRadu extends GRobot
{
    private Rad x = new Rad(&#45;2000, 1000, 20);
    private Rad y = new Rad(&#45;1000, 2000, 30);
    private PríkladPoužitiaRadu()
    {
        super(400, 400);
        ohranič();
        aktivuj();
    }
    @Override public void aktivita()
    {
        rýchlosťPosunu(x.daj() / 1000.0);
        rýchlosť(y.daj() / 1000.0);
    }
    public static void main(String[] args)
    {
        new PríkladPoužitiaRadu();
        Svet.zbaľ();
    }
}
 
 
 Ukážka niekoľkých prvých sekúnd kreslenia príkladu použitia
 radu.
 
 Úpravou parametrov konštruktorov radov x a y:
 
 
private Rad x = new Rad(-1800, 800, 20);
private Rad y = new Rad(-1100, 1400, 30);
 
 a prípadne aj deliteľov rýchlostí robota:
 
 
rýchlosťPosunu(x.daj() / 800.0);
rýchlosť(y.daj() / 800.0);
 
 môžeme dosiahnuť zaujímavé výsledky:
 
 
 Ukážka kreslenia príkladu použitia radu
 po úpravách.
 
 Samozrejme, že tu sa možnosti použitia generátora radu nekončia.
 Použiť sa dá všade, kde je výhodné využívať cyklickú postupnosť,
 napríklad na priame určovanie polohy pendlujúceho nepriateľa
 a podobne.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Rad()
Predvolený konštruktor.
Rad(int spodnáHranica,
   int vrchnáHranica)
Konštruktor nastavujúci generátoru radu nové predvolené hranice.
Rad(int spodnáHranica,
   int vrchnáHranica,
   int krok)
Konštruktor nastavujúci generátoru radu predvolené hranice a krok.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
int
daj()
Aktívne čítanie hodnôt radu.
int
dajHodnotu(int parameter)
Výpočet hodnoty radu podľa zadaného parametra, ktorý sa dá chápať
 aj ako „poradové číslo“ (alebo skôr index) hodnoty radu.
int
dolnaHranica()
 Alias pre spodnáHranica.
int
dolnáHranica()
Vráti aktuálnu hodnotu spodnej hranice radu.
void
dolnaHranica(int dolnáHranica)
 Alias pre spodnáHranica.
void
dolnáHranica(int dolnáHranica)
Upraví spodnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
int
hodnota()
Pasívne prečítanie aktuálnej hodnoty radu.
void
hodnota(int hodnota)
Nastavenie novej aktuálnej hodnoty tejto inštancie.
int
hornaHranica()
 Alias pre vrchnáHranica.
int
hornáHranica()
Vráti aktuálnu hodnotu vrchnej hranice radu.
void
hornaHranica(int hornáHranica)
 Alias pre vrchnáHranica.
void
hornáHranica(int hornáHranica)
Upraví vrchnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
int
krok()
Vráti aktuálny krok radu (mieru prírastku resp. úbytku hodnôt).
void
krok(int krok)
Nastaví novú hodnotu kroku radu (čiže mieru prírastku resp. úbytku
 hodnôt radu počas ich aktívneho čítania).
void
naopak()
Prevráti smer zmeny hodnôt radu na opačný k aktuálnemu.
int
parameter(int parameter)
Nastavenie a prečítanie novej aktuálnej hodnoty tejto inštancie
 výpočtom z parametra.
int
spodnaHranica()
 Alias pre spodnáHranica.
int
spodnáHranica()
Vráti aktuálnu hodnotu spodnej hranice radu.
void
spodnaHranica(int dolnáHranica)
 Alias pre spodnáHranica.
void
spodnáHranica(int spodnáHranica)
Upraví spodnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
int
vrchnaHranica()
 Alias pre vrchnáHranica.
int
vrchnáHranica()
Vráti aktuálnu hodnotu vrchnej hranice radu.
void
vrchnaHranica(int hornáHranica)
 Alias pre vrchnáHranica.
void
vrchnáHranica(int vrchnáHranica)
Upraví vrchnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
boolean
vzostupne()
Overí, či je aktuálny smer zmeny hodnôt radu vzostupný
 (stúpajúci).
void
vzostupne(boolean vzostupne)
Nastaví smer zmeny hodnôt radu podľa zadaného parametera.
void
zamiesaj()
 Alias pre zamiešaj.
void
zamiešaj()
Zamieša tento rad.
boolean
zostupne()
Overí, či je aktuálny smer zmeny hodnôt radu zostupný
 (klesajúci).
void
zostupne(boolean zostupne)
Nastaví smer zmeny hodnôt radu podľa zadaného parametera.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Rad
public Rad()
Predvolený konštruktor. Ponechá všetky predvolené nastavenia
 inštancie, čo znamená: spodnú hranicu na hodnote 0, vrchnú na 9,
 krok (mieru zmeny pohybu) na 1, počiatočnú hodnotu na 0 a smer
 (zmeny hodnôt) na vzostupný.
Rad
public Rad(int spodnáHranica,
           int vrchnáHranica)
Konštruktor nastavujúci generátoru radu nové predvolené hranice.
 Na to, aby generátor fungoval správne, musí byť medzi hranicami vždy
 minimálne jednotkový rozdiel, preto ak zú zadané hodnoty hraníc
 rovnaké, tak je vrchná hranica zväčšená o jednotku. Ak je zadaná
 spodná hranica väčšia, než vrchná, tak sú hranice vymenené
 a predvolene je nastavený zostupný smer zmeny hodnôt. Počiatočná
 hodnota inštancie je potom nastavená na výslednú hodnotu spodnej
 hranice.
Parametre:
spodnáHranica – požadovaná spodná hranica radu (ak je väčšia od
     vrchnej hranice, tak sa stáva vrchnou hranicou)
vrchnáHranica – požadovaná vrchná hranica radu (ak je menšia od
     spodnej hranice, tak sa stáva spodnou hranicou)
Rad
public Rad(int spodnáHranica,
           int vrchnáHranica,
           int krok)
Konštruktor nastavujúci generátoru radu predvolené hranice a krok.
 Ak sú zadané rovnaké hodnoty hraníc, horná hranica je zväčšená
 o absolútnu hodnotu kroku, pričom ak je krok záporný, tak je nastavený
 zostupný predvolený smer zmeny hodnôt (čo je vzhľadom na rozdiel hraníc
 rovný kroku irelevantné, ale môže to mať vplyv pri včasnej zmene
 parametrov inštancie inými metódami).
 
 V opačnom prípade (v prípade rozdielnych hodnôt hraníc) môže byť,
 naopak, hodnota kroku prispôsobená rozdielu hraníc (pozri aj metódu
 krok). Postup je v tomto prípade taký, že najprv sa
 porovnajú hodnoty hraníc. Ak je spodná hranica väčšia, než vrchná, tak
 sú hranice vymenené a predvolene je nastavený zostupný smer zmeny
 hodnôt (ktorý môže byť ešte raz zvrátený zápornou hodnotou kroku).
 Potom je nastavená hodnota kroku presne podľa pravidiel stanovených
 metódou krok.
 
 Vo všetkých prípadoch je nakoniec nastavená počiatočná hodnota
 generátora a to na výslednú hodnotu spodnej hranice.
Parametre:
spodnáHranica – požadovaná spodná hranica radu (ak je väčšia od
     vrchnej hranice, tak sa stáva vrchnou hranicou)
vrchnáHranica – požadovaná vrchná hranica radu (ak je menšia od
     spodnej hranice, tak sa stáva spodnou hranicou)
krok – požadovaný krok radu (miera prírastku resp. úbytku hodnôt;
     môže byť upravený podľa hodnôt hraníc – pozri aj metódu
     krok)
Podrobnosti metód
spodnáHranica
public int spodnáHranica()
Vráti aktuálnu hodnotu spodnej hranice radu.
 
 Táto metóda je alternatívou metódy dolnáHranica().
 Ich implementácia je nezávislá (pri prípadnom prekrytí jednej metódy
 zostáva funkčnosť druhej nezmenená).
Návratová hodnota:
aktuálna spodná hranica radu
spodnaHranica
public int spodnaHranica()
 Alias pre spodnáHranica.
spodnáHranica
public void spodnáHranica(int spodnáHranica)
Upraví spodnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice. To znamená, že ak je zadaná spodná
 hranica rovná vrchnej, tak je vrchná hranica zvýšená o jedna a ak je
 zadaná spodná hranica vyššia od vrchnej, tak sú ich hodnoty vymenené.
 Metóda zároveň zabezpečí, aby aktuálna hodnota kroku nebola väčšia,
 než je výsledný rozdiel hraníc.
Parametre:
spodnáHranica – požadovaná spodná hranica radu
spodnaHranica
public void spodnaHranica(int dolnáHranica)
 Alias pre spodnáHranica.
vrchnáHranica
public int vrchnáHranica()
Vráti aktuálnu hodnotu vrchnej hranice radu.
 
 Táto metóda je alternatívou metódy hornáHranica().
 Ich implementácia je nezávislá (pri prípadnom prekrytí jednej metódy
 zostáva funkčnosť druhej nezmenená).
Návratová hodnota:
aktuálna vrchná hranica radu
vrchnaHranica
public int vrchnaHranica()
 Alias pre vrchnáHranica.
vrchnáHranica
public void vrchnáHranica(int vrchnáHranica)
Upraví vrchnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice. To znamená, že ak je zadaná vrchná
 hranica rovná spodnej, tak je spodná hranica znížená o jedna a ak je
 zadaná vrchná hranica nižšia od spodnej, tak sú ich hodnoty vymenené.
 Metóda zároveň zabezpečí, aby aktuálna hodnota kroku nebola väčšia,
 než je výsledný rozdiel hraníc.
Parametre:
vrchnáHranica – požadovaná vrchná hranica radu
vrchnaHranica
public void vrchnaHranica(int hornáHranica)
 Alias pre vrchnáHranica.
krok
public int krok()
Vráti aktuálny krok radu (mieru prírastku resp. úbytku hodnôt).
Návratová hodnota:
aktuálny krok radu (miera prírastku resp. úbytku hodnôt)
krok
public void krok(int krok)
Nastaví novú hodnotu kroku radu (čiže mieru prírastku resp. úbytku
 hodnôt radu počas ich aktívneho čítania).
 
 Veľkosť kroku nesmie byť nulová (vo vzorcoch na výpočet hodnôt
 radu podľa parametra by vznikalo delenie nulou). Ak je zadaná nulová
 hodnota kroku, tak bude krok nastavený na jednotku.
 
 Hodnota kroku nesmie byť záporná (vzorce na výpočet hodnôt radu
 podľa parametra boli zostavené tak, že predpokladajú len kladné
 hodnoty kroku; pri záporných hodnotách kroku by poskytovali úplne
 nesprávne výsledky). Ak je zadaná záporná hodnota kroku, tak
 inštancia vnútorne prepne aktuálny smer zmeny hodnôt radu (zo
 vzostupného na zostupný alebo naopak) a zmení znamienko kroku zo
 záporného na kladné.
 
 Veľkosť kroku (v absolútnej hodnote) nesmie presiahnuť rozdiel
 hraníc radu (vrchná hranica mínus spodná hranica). Ak je zadaná
 hodnota s väčším rozpätím, tak je orezaná presne na hodnotu rozdielu
 hraníc radu.
Parametre:
krok – nový krok (miera prírastku resp. úbytku hodnôt) radu
vzostupne
public boolean vzostupne()
Overí, či je aktuálny smer zmeny hodnôt radu vzostupný
 (stúpajúci).
 
 Táto metóda je opakom metódy zostupne().
Návratová hodnota:
ak je aktuálny smer zmeny hodnôt radu vzostupný (stúpajúci),
     tak vráti hodnotu true, inak false
vzostupne
public void vzostupne(boolean vzostupne)
Nastaví smer zmeny hodnôt radu podľa zadaného parametera. Ak má byť
 aktuálny smer vzostupný (stúpajúci), tak treba zadať hodnotu parametra
 true, v opačnom prípade false.
 
 Ak je aktuálna hodnota radu najväčšia povolená, tak sa smer pri
 najbližšom aktívnom čítaní hodnoty i tak zmení na zostupný
 
 Táto metóda je opakom metódy zostupne(boolean).
Parametre:
vzostupne – ak má byť aktuálny smer zmeny hodnôt radu
     vzostupný (stúpajúci), tak treba zadať hodnotu true,
     v opačnom prípade false
dolnáHranica
public int dolnáHranica()
Vráti aktuálnu hodnotu spodnej hranice radu.
 
 Táto metóda je alternatívou metódy spodnáHranica().
 Ich implementácia je nezávislá (pri prípadnom prekrytí jednej metódy
 zostáva funkčnosť druhej nezmenená).
Návratová hodnota:
aktuálna spodná hranica radu
dolnaHranica
public int dolnaHranica()
 Alias pre spodnáHranica.
dolnáHranica
public void dolnáHranica(int dolnáHranica)
Upraví spodnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
 
 Táto metóda je aliasom metódy spodnáHranica(int),
 to znamená, že táto metóda vnútorne volá uvedenú metódu (preto
 funguje rovnako ako ona).
Parametre:
dolnáHranica – požadovaná spodná hranica radu
dolnaHranica
public void dolnaHranica(int dolnáHranica)
 Alias pre spodnáHranica.
hornáHranica
public int hornáHranica()
Vráti aktuálnu hodnotu vrchnej hranice radu.
 
 Táto metóda je alternatívou metódy vrchnáHranica().
 Ich implementácia je nezávislá (pri prípadnom prekrytí jednej metódy
 zostáva funkčnosť druhej nezmenená).
Návratová hodnota:
aktuálna vrchná hranica radu
hornaHranica
public int hornaHranica()
 Alias pre vrchnáHranica.
hornáHranica
public void hornáHranica(int hornáHranica)
Upraví vrchnú hranicu tohto generátora pri zachovaní najmenej
 jednotkového rozdielu medzi hranicami a zabezpečení hodnoty spodnej
 hranice nižšej od vrchnej hranice.
 
 Táto metóda je aliasom k metóde vrchnáHranica(int),
 to znamená, že táto metóda vnútorne volá uvedenú metódu (preto
 funguje rovnako ako ona).
Parametre:
hornáHranica – požadovaná vrchná hranica radu
hornaHranica
public void hornaHranica(int hornáHranica)
 Alias pre vrchnáHranica.
zostupne
public boolean zostupne()
Overí, či je aktuálny smer zmeny hodnôt radu zostupný
 (klesajúci).
 
 Táto metóda je opakom metódy vzostupne().
Návratová hodnota:
ak je aktuálny smer zmeny hodnôt radu zostupný (klesajúci),
     tak vráti hodnotu true, inak false
zostupne
public void zostupne(boolean zostupne)
Nastaví smer zmeny hodnôt radu podľa zadaného parametera. Ak má byť
 aktuálny smer zostupný (klesajúci), tak treba zadať hodnotu parametra
 true, v opačnom prípade false.
 
 Ak je aktuálna hodnota radu najnižšia povolená, tak sa smer pri
 najbližšom aktívnom čítaní hodnoty i tak zmení na vzostupný.
 
 Táto metóda je opakom metódy vzostupne(boolean).
Parametre:
zostupne – ak má byť aktuálny smer zmeny hodnôt radu
     zostupný (klesajúci), tak treba zadať hodnotu true,
     v opačnom prípade false
naopak
public void naopak()
Prevráti smer zmeny hodnôt radu na opačný k aktuálnemu. Ak je
 aktuálna hodnota radu najnižšia povolená a smer sa zmení na zostupný
 alebo naopak, ak je aktuálna hodnota radu najväčšia povolená a smer
 sa zmení na vzostupný, tak sa pri najbližšom aktívnom čítaní hodnoty
 smer spätne prevráti.
daj
public int daj()
Aktívne čítanie hodnôt radu. Pri aktívnom čítaní sa vnútorná
 (aktuálna) hodnota radu po prečítaní vždy posunie na nasledujúcu podľa
 konfigurácie radu. Ak je pri vzostupnom smere zmien hodnôt prekročená
 horná hranica, tak je hodnota upravená späť do rozmedzia hraníc a smer
 zmien hodnôt je prevrátený. Podobne to je pri klesajúcom smere
 a prekročení spodnej hranice.
Návratová hodnota:
aktuálna hodnota radu s posunom na nasledujúcu (čiže každé
     ďalšie volanie tejto metódy vráti ďalšiu hodnotu radu)
hodnota
public int hodnota()
Pasívne prečítanie aktuálnej hodnoty radu. Pri pasívnom čítaní
 sa okrem vrátenia hodnoty nedejú žiadne iné akcie. Pozri meódu
 daj, ktorá vykonáva aktívne čítanie hodnôt radu.
Návratová hodnota:
aktuálna hodnota radu
hodnota
public void hodnota(int hodnota)
Nastavenie novej aktuálnej hodnoty tejto inštancie. Požadovaná
 hodnota musí vyhovovať konfigurácii radu, inak bude upravená.
 Konkrétne: ak je zadaná hodnota nižšia od spodnej hranice, tak je
 výsledná hodnota nastavená na spodnú hranicu, ak je vyššia od hornej,
 tak je nastavená na najbližší vyhovujúci násobok kroku, pričom to
 isté platí aj v prípade, že požadovaná hodnota nie je násobkom
 kroku so začiatkom v spodnej hranici radu.
Parametre:
hodnota – požadovaná hodnota tohto radu (ak nevyhovie
     konfiugrácii tejto inštancie, tak bude upravená)
parameter
public int parameter(int parameter)
Nastavenie a prečítanie novej aktuálnej hodnoty tejto inštancie
 výpočtom z parametra. Parameter sa dá chápať ako „poradové číslo“
 (resp. index) hodnoty radu vygenerovanej podľa konfigurácie tejto
 inštancie. Parameter môže byť ľubovoľné celé číslo. Príklad: Hodnota
 radu s parametrom 0 je rovná spodnej hranici radu, parameter
 1 vygeneruje ďalšiu hodnotu radu (to jest hodnotu zvýšenú o krok),
 ďalšie parametre v poradí vygenerujú presne také hodnoty
 trojuholníkovej postupnosti, aké by boli vygenerované pri sekvenčnom
 volaní metódy na aktívne čítanie hodnôt radu – daj.
 
 Na zistenie hodnoty radu podľa parametra bez jej nastavenia ako
 aktuálnej novej hodnoty slúži metóda dajHodnotu.
 
 Poznámka: Metóda na čítanie hodnoty
 parametra nie je definovaná, pretože výpočet hodnoty parametra má
 nekonečne veľa riešení.
Parametre:
parameter – hodnota parametra, podľa ktorej bude nastavená
     (a vrátená) aktuálna hodnota radu
Návratová hodnota:
aktuálna hodnota radu nastavená podľa zadaného parametra
dajHodnotu
public int dajHodnotu(int parameter)
Výpočet hodnoty radu podľa zadaného parametra, ktorý sa dá chápať
 aj ako „poradové číslo“ (alebo skôr index) hodnoty radu. Viac detailov
 nájdete v opise metódy parameter.
 
 Na súčasné zistenie hodnoty radu podľa parametra a jej nastavenie
 ako novej aktuálnej hodnoty slúži metóda parameter.
Parametre:
parameter – hodnota parametra, z ktorej bude vypočítaná a vrátená
     hodnota radu (podľa jeho nastavení; aktuále vlastnosti radu,
     hodnota, smer a podobne, zostanú nezmenené)
Návratová hodnota:
hodnota radu vypočítaná zo zadaného parametra
zamiešaj
public void zamiešaj()
Zamieša tento rad. Metóda nastaví aktuálnu hodnotu radu na náhodné
 číslo v rámci jeho hraníc, s ohľadom na hodnotu kroku a náhodne zmení
 aktuálny smer radu.
zamiesaj
public void zamiesaj()
 Alias pre zamiešaj.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Roj.Bod
java.lang.Object
Roj.Bod
Všetky implementované rozhrania:
Comparable&lt;Roj.Bod&gt;
Nadradená trieda:
Roj
public class Roj.Bod
extends Object
implements Comparable&lt;Roj.Bod&gt;
Trieda uchovávajúca údaje o jednom bode roja. Kreslenie, aktivitu
 a potrebné prepočty zabezpečuje programátor s pomocou vstavaných metód
 alebo na základe údajov o bode.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
double
alfa
Uhly pootočenia bodu okolo stredu otáčania.
double
beta
Uhly pootočenia bodu okolo stredu otáčania.
TreeMap&lt;Integer,Integer&gt;
celociselneParametre
 Alias pre celočíselnéParametre.
TreeMap&lt;Integer,Integer&gt;
celočíselnéParametre
Mapa umožňujúca spravovanie zákazníckeho zoznamu celočíselných
 parametrov bodu.
double
dh
Tento atribút určuje zmenu hrúbky čiary robota vykonanú pred
 kreslením spoja smerujúceho do tohto bodu.
double
dho
Tento atribút určuje zmenu hrúbky čiary robota vykonanú pred
 kreslením objektu na polohe tohto bodu.
double
dx
Posunutie originálnej súradnice polohy bodu.
double
dy
Posunutie originálnej súradnice polohy bodu.
double
dz
Posunutie originálnej súradnice polohy bodu.
double
faktor
Faktor (deliteľ) rozmeru a zobrazovanej polohy objektu na bode,
 ktorý je (automaticky) prepočítavaný podľa konečných (globálne
 transformovaných) súradníc bodu ([x2, y2,
 z2]) a aktuálnej vzdialenosti kamery od roja.
Farba
farba
Tento atribút určuje zmenu farby robota vykonanú pred kreslením
 objektu na polohe tohto bodu.
Farba
farbaSpoja
Tento atribút určuje zmenu farby robota vykonanú pred
 kreslením spoja smerujúceho do tohto bodu.
double
gama
Uhly pootočenia bodu okolo stredu otáčania.
KreslenieTvaru
kreslenie
Toto kreslenie umožňuje upraviť tvar objektu nakresleného na
 súradniciach tohto bodu roja.
Object
objekt
Ľubovoľná inštancia s dodatočnými informáciami súvisiacimi
 s týmto bodom.
TreeMap&lt;Integer,Double&gt;
realneParametre
 Alias pre reálneParametre.
TreeMap&lt;Integer,Double&gt;
reálneParametre
Mapa umožňujúca spravovanie zákazníckeho zoznamu reálnych
 parametrov bodu.
double
rozmer
Parameter rozmeru objektu kresleného na polohe bodu.
int
skupina
Tento atribút umožňuje rozlíšiť body patriace do zákaznícky
 definovateľných skupín.
double
smer
Toto je atribút, do ktorého sa priebežne (automaticky) ukladá
 posledná orientácia grafického robota počas kreslenia tohto bodu.
boolean
spoj
Tento atribút určuje, či bude medzi polohou predchádzajúceho
 a tohto bodu roja kreslená spojovacia čiara.
KreslenieTvaru
svgKreslenie
Toto kreslenie umožňuje definovať komplexnejší spôsob exportu
 objektu na súradiciach tohto bodu roja do formátu SVG.
Shape
svgTvar
Tento atribút umožňuje definovať jednoduchý tvar, ktorý
 bude exportovaný ako objekt umiestnený na súradniciach tohto
 bodu roja do formátu SVG.
boolean
transformuj
Tento príznak určuje, že súradnice x1,
 y1 a z1 musia byť prepočítané.
double
x0
Originálna súradnica polohy bodu.
double
x1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
double
x2
Konečná (globálne transformovaná) súradnica polohy bodu.
double
x3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode.
double
xs
Súradnica stredu otáčania bodu.
double
y0
Originálna súradnica polohy bodu.
double
y1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
double
y2
Konečná (globálne transformovaná) súradnica polohy bodu.
double
y3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode.
double
ys
Súradnica stredu otáčania bodu.
double
z0
Originálna súradnica polohy bodu.
double
z1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
double
z2
Konečná (globálne transformovaná) súradnica polohy bodu.
double
z3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode.
boolean
zobraz
Tento atribút určuje, či bude objekt na polohe tohto bodu
 zobrazený.
double
zs
Súradnica stredu otáčania bodu.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Bod() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
bodV(double súradnicaX,
    double súradnicaY)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu
 s veľkosťou polomeru úmernému vzdialenosti inštancie tohto bodu
 od kamery (aktuálnej projekcie) a stredom na aktuálnej pozícii
 jeho projekcie.
boolean
bodV(double súradnicaX,
    double súradnicaY,
    double polomer)
Overí, či sa zadané súradnice nachádzajú v kruhu so zadaným
 polomerom a stredom na aktuálnej pozícii projekcie bodu.
boolean
bodV(Poloha objekt)
Funguje rovnako ako metóda bodV(x, y), len namiesto súradníc bodu je použitá poloha
 zadaného objektu…
boolean
bodV(Poloha objekt,
    double polomer)
Funguje rovnako ako metóda bodV(x, y, polomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
void
citajZoSuboru(Súbor súbor,
             String identifikátor)
 Alias pre čítajZoSúboru.
int
compareTo(Roj.Bod iný)
Porovná polohu tohto bodu s polohou zadaného bodu a vráti
 hodnotu 0.0, ak sú vzdialenosti oboch bodov od kamery
 zhodné, kladnú hodnotu, ak je vzdialenosť druhého bodu od kamery
 väčšia a zápornú hodnotu v opačnom prípade.
void
čítajZoSúboru(Súbor súbor,
             String identifikátor)
Prečíta údaje o inštancii tohto bodu z konfiguračného súboru
 otvoreného na čítanie.
double
dajParameter(int index,
            double predvolenáHodnota)
Umožňuje prevziať hodnotu zákaznícky definovaného reálneho
 parametra bodu.
int
dajParameter(int index,
            int predvolenáHodnota)
Umožňuje prevziať hodnotu zákaznícky definovaného celočíselného
 parametra bodu.
void
kresliSpoj()
Táto metóda využije kresliaci robot roja na nakreslenie spoja
 (čiary) smerujúceho z aktuálnej polohy robota do tohto bodu.
void
kresliTeleso()
Táto metóda využije kresliaci robot roja na nakreslenie
 objektu umiestneného na polohe tohto bodu (ak je viditeľný – pozri
 atribút zobraz).
boolean
mysV()
 Alias pre myšV.
boolean
mysV(double polomer)
 Alias pre myšV.
boolean
myšV()
Zistí, či sa súradnice myši nachádzajú v kruhu s veľkosťou
 polomeru úmernému vzdialenosti inštancie tohto bodu od kamery
 (aktuálnej projekcie) a stredom na aktuálnej pozícii jeho
 projekcie.
boolean
myšV(double polomer)
Overí, či sa súradnice myši nachádzajú v kruhu so zadaným
 polomerom a stredom na aktuálnej pozícii projekcie bodu.
void
nastavParameter(int index,
               double hodnota)
Umožňuje nastaviť hodnotu zákaznícky definovaného reálneho
 parametra bodu.
void
nastavParameter(int index,
               int hodnota)
Umožňuje nastaviť hodnotu zákaznícky definovaného celočíselného
 parametra bodu.
void
precitajZoSuboru(Súbor súbor,
                String identifikátor)
 Alias pre čítajZoSúboru.
void
prečítajZoSúboru(Súbor súbor,
                String identifikátor)
 Alias pre čítajZoSúboru.
void
spojDoSVG(SVGPodpora svgPodpora)
Táto metóda umožňuje exportovať spoj definovaný k tomuto bodu
 do zadanej inštancie SVG podpory.
void
telesoDoSVG(SVGPodpora svgPodpora)
Táto metóda umožňuje exportovať objekt definovaný pre tento
 bod do zadanej inštancie SVG podpory.
void
transformuj()
Ak je hodnota atribútu transformuj rovná
 true, tak táto metóda prepočíta (vypočíta nové) hodnoty
 transformovaných súradníc x1, y1
 a z1.
void
ulozDoSuboru(Súbor súbor,
            String identifikátor)
 Alias pre uložDoSúboru.
void
uložDoSúboru(Súbor súbor,
            String identifikátor)
Zapíše údaje o inštancii tohto bodu do konfiguračného súboru
 otvoreného na zápis.
void
upevni()
Táto metóda fyzicky presunie bod na jeho transformovanú polohu
 a zruší transformácie (inak dočasného) posunutia a pootočenia
 bodu.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
x0
public double x0
Originálna súradnica polohy bodu. Atribúty x0,
 y0 a z0 určujú pôvodnú netransformovanú polohu
 bodu v priestore.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
y0
public double y0
Originálna súradnica polohy bodu. Atribúty x0,
 y0 a z0 určujú pôvodnú netransformovanú polohu
 bodu v priestore.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
z0
public double z0
Originálna súradnica polohy bodu. Atribúty x0,
 y0 a z0 určujú pôvodnú netransformovanú polohu
 bodu v priestore.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
dx
public double dx
Posunutie originálnej súradnice polohy bodu. Atribúty
 dx, dy a dz určujú voliteľné posunutie
 (transfromovanie posunutím) originálnej polohy bodu (pozri
 x0, y0 alebo z0) v priestore.
 Takto sa dá bod ľubovoľne posúvať v priestore bez toho, aby sme
 stratili originálne hodnoty súradníc jeho polohy.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
dy
public double dy
Posunutie originálnej súradnice polohy bodu. Atribúty
 dx, dy a dz určujú voliteľné posunutie
 (transfromovanie posunutím) originálnej polohy bodu (pozri
 x0, y0 alebo z0) v priestore.
 Takto sa dá bod ľubovoľne posúvať v priestore bez toho, aby sme
 stratili originálne hodnoty súradníc jeho polohy.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
dz
public double dz
Posunutie originálnej súradnice polohy bodu. Atribúty
 dx, dy a dz určujú voliteľné posunutie
 (transfromovanie posunutím) originálnej polohy bodu (pozri
 x0, y0 alebo z0) v priestore.
 Takto sa dá bod ľubovoľne posúvať v priestore bez toho, aby sme
 stratili originálne hodnoty súradníc jeho polohy.
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
xs
public double xs
Súradnica stredu otáčania bodu. Atribúty xs, ys,
 zs určujú polohu stredu otáčania bodu v priestore.
 (Pozri aj alfa, beta alebo
 gama.)
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
ys
public double ys
Súradnica stredu otáčania bodu. Atribúty xs, ys,
 zs určujú polohu stredu otáčania bodu v priestore.
 (Pozri aj alfa, beta alebo
 gama.)
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
zs
public double zs
Súradnica stredu otáčania bodu. Atribúty xs, ys,
 zs určujú polohu stredu otáčania bodu v priestore.
 (Pozri aj alfa, beta alebo
 gama.)
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
alfa
public double alfa
Uhly pootočenia bodu okolo stredu otáčania. Atribúty
 alfa, beta a gama určujú uhly pootočenia
 (transformovania otáčaním) bodu v priestore okolo stredu otáčania
 [xs, ys, zs].
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
beta
public double beta
Uhly pootočenia bodu okolo stredu otáčania. Atribúty
 alfa, beta a gama určujú uhly pootočenia
 (transformovania otáčaním) bodu v priestore okolo stredu otáčania
 [xs, ys, zs].
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
gama
public double gama
Uhly pootočenia bodu okolo stredu otáčania. Atribúty
 alfa, beta a gama určujú uhly pootočenia
 (transformovania otáčaním) bodu v priestore okolo stredu otáčania
 [xs, ys, zs].
 
 Upozornenie: Po zmene hodnoty tohto
 atribútu je nevyhnutné nastaviť príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
rozmer
public double rozmer
Parameter rozmeru objektu kresleného na polohe bodu. (Pozri aj
 faktor.)
transformuj
public boolean transformuj
Tento príznak určuje, že súradnice x1,
 y1 a z1 musia byť prepočítané.
x1
public double x1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
 Atribúty x1, y1 a z1 určujú lokálne
 transformovanú polohu bodu v priestore. Sú vypočítané z atribútov
 originálnych súradníc bodu [x0, y0,
 z0], hodnôt posunutia bodu v priestore
 [dx, dy, dz] (transformácia
 posunutím) a hodnôt pootočenia bodu v priestore (uhly alfa, beta a gama) okolo stredu
 otáčania [xs, ys, zs]
 (transformovania otáčaním).
 
 Upozornenie: Z uvedeného vyplýva, že ak
 sa hodnota ktoréhokoľvek z vyššie spomenutých atribútov zmení, tak
 súradnice x1, y1 a z1 musia byť opätovne
 prepočítané. To znamená, že súčasne so zmenou hociktorého
 z atribútov spomenutých v opise vyššie je nevyhnutné nastaviť
 príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
y1
public double y1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
 Atribúty x1, y1 a z1 určujú lokálne
 transformovanú polohu bodu v priestore. Sú vypočítané z atribútov
 originálnych súradníc bodu [x0, y0,
 z0], hodnôt posunutia bodu v priestore
 [dx, dy, dz] (transformácia
 posunutím) a hodnôt pootočenia bodu v priestore (uhly alfa, beta a gama) okolo stredu
 otáčania [xs, ys, zs]
 (transformovania otáčaním).
 
 Upozornenie: Z uvedeného vyplýva, že ak
 sa hodnota ktoréhokoľvek z vyššie spomenutých atribútov zmení, tak
 súradnice x1, y1 a z1 musia byť opätovne
 prepočítané. To znamená, že súčasne so zmenou hociktorého
 z atribútov spomenutých v opise vyššie je nevyhnutné nastaviť
 príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
z1
public double z1
Prepočítaná (lokálne transformovaná) súradnica polohy bodu.
 Atribúty x1, y1 a z1 určujú lokálne
 transformovanú polohu bodu v priestore. Sú vypočítané z atribútov
 originálnych súradníc bodu [x0, y0,
 z0], hodnôt posunutia bodu v priestore
 [dx, dy, dz] (transformácia
 posunutím) a hodnôt pootočenia bodu v priestore (uhly alfa, beta a gama) okolo stredu
 otáčania [xs, ys, zs]
 (transformovania otáčaním).
 
 Upozornenie: Z uvedeného vyplýva, že ak
 sa hodnota ktoréhokoľvek z vyššie spomenutých atribútov zmení, tak
 súradnice x1, y1 a z1 musia byť opätovne
 prepočítané. To znamená, že súčasne so zmenou hociktorého
 z atribútov spomenutých v opise vyššie je nevyhnutné nastaviť
 príznak transformuj na true.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
zobraz
public boolean zobraz
Tento atribút určuje, či bude objekt na polohe tohto bodu
 zobrazený. V každom bode roja môže alebo nemusí byť kreslený
 nejaký objekt – 2D objekt (prípadne určitým vlastným spôsobom
 generovaný 3D objekt – autor takéhoto kódu by musel doriešiť
 zistenie orientácie objektu). Tento atribút určuje, či má byť
 spustené jeho kreslenie.
farba
public Farba farba
Tento atribút určuje zmenu farby robota vykonanú pred kreslením
 objektu na polohe tohto bodu.
dho
public double dho
Tento atribút určuje zmenu hrúbky čiary robota vykonanú pred
 kreslením objektu na polohe tohto bodu.
x2
public double x2
Konečná (globálne transformovaná) súradnica polohy bodu.
 Atribúty x2, y2 a z2 určujú konečnú
 polohu bodu v priestore, ktorá je vypočítaná z hodnôt
 x1, y1 a z1 a z atribútov
 transformácie roja (pootočenia a polohy kamery, mierky…; preto
 ich môžeme označiť aj ako globálne transformované).
y2
public double y2
Konečná (globálne transformovaná) súradnica polohy bodu.
 Atribúty x2, y2 a z2 určujú konečnú
 polohu bodu v priestore, ktorá je vypočítaná z hodnôt
 x1, y1 a z1 a z atribútov
 transformácie roja (pootočenia a polohy kamery, mierky…; preto
 ich môžeme označiť aj ako globálne transformované).
z2
public double z2
Konečná (globálne transformovaná) súradnica polohy bodu.
 Atribúty x2, y2 a z2 určujú konečnú
 polohu bodu v priestore, ktorá je vypočítaná z hodnôt
 x1, y1 a z1 a z atribútov
 transformácie roja (pootočenia a polohy kamery, mierky…; preto
 ich môžeme označiť aj ako globálne transformované).
spoj
public boolean spoj
Tento atribút určuje, či bude medzi polohou predchádzajúceho
 a tohto bodu roja kreslená spojovacia čiara. (Pri kreslení roja
 ako celku je táto hodnota pre prvý bod roja irelevantná.)
Pozri tiež:
farbaSpoja, 
dh
farbaSpoja
public Farba farbaSpoja
Tento atribút určuje zmenu farby robota vykonanú pred
 kreslením spoja smerujúceho do tohto bodu. (Pri kreslení roja
 ako celku je táto hodnota pre prvý bod roja irelevantná.)
Pozri tiež:
spoj, 
dh
dh
public double dh
Tento atribút určuje zmenu hrúbky čiary robota vykonanú pred
 kreslením spoja smerujúceho do tohto bodu. (Pri kreslení roja
 ako celku je táto hodnota pre prvý bod roja irelevantná.)
Pozri tiež:
spoj, 
farbaSpoja
x3
public double x3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode. Atribúty x3 a y3 určujú zobrazovanú
 (premietanú) polohu objektu (kresleného na polohe tohto bodu) na
 plátno sveta. Atribút z3 určuje prepočítaný rozmer objektu.
 Hodnoty týchto atribútov sú vypočítané len v prípade, že je faktor
 rozmeru a zobrazovanej polohy (atribút faktor)
 kladný. Počítajú sa z hodnôt súradníc konečnej (globálne
 transformovanej) polohy bodu [x2, y2,
 z2], rozmeru objektu kresleného na bode –
 rozmer, faktora (deliteľa) rozmeru a zobrazovanej
 polohy objektu na bode – faktor a z atribútov
 pohľadu na roj.
y3
public double y3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode. Atribúty x3 a y3 určujú zobrazovanú
 (premietanú) polohu objektu (kresleného na polohe tohto bodu) na
 plátno sveta. Atribút z3 určuje prepočítaný rozmer objektu.
 Hodnoty týchto atribútov sú vypočítané len v prípade, že je faktor
 rozmeru a zobrazovanej polohy (atribút faktor)
 kladný. Počítajú sa z hodnôt súradníc konečnej (globálne
 transformovanej) polohy bodu [x2, y2,
 z2], rozmeru objektu kresleného na bode –
 rozmer, faktora (deliteľa) rozmeru a zobrazovanej
 polohy objektu na bode – faktor a z atribútov
 pohľadu na roj.
z3
public double z3
Atribút cieľovej (zobrazovanej) polohy a veľkosti objektu na
 bode. Atribúty x3 a y3 určujú zobrazovanú
 (premietanú) polohu objektu (kresleného na polohe tohto bodu) na
 plátno sveta. Atribút z3 určuje prepočítaný rozmer objektu.
 Hodnoty týchto atribútov sú vypočítané len v prípade, že je faktor
 rozmeru a zobrazovanej polohy (atribút faktor)
 kladný. Počítajú sa z hodnôt súradníc konečnej (globálne
 transformovanej) polohy bodu [x2, y2,
 z2], rozmeru objektu kresleného na bode –
 rozmer, faktora (deliteľa) rozmeru a zobrazovanej
 polohy objektu na bode – faktor a z atribútov
 pohľadu na roj.
faktor
public double faktor
Faktor (deliteľ) rozmeru a zobrazovanej polohy objektu na bode,
 ktorý je (automaticky) prepočítavaný podľa konečných (globálne
 transformovaných) súradníc bodu ([x2, y2,
 z2]) a aktuálnej vzdialenosti kamery od roja.
 
 Ak je faktor menší alebo rovný nule, tak je objekt
 nepozorovateľný – nachádza sa za pozorovateľom alebo na jeho
 úrovni. Ak je faktor kladný, stáva sa deliteľom zobrazovanej
 polohy a rozmeru objektu, ktoré sú uložené v atribútoch x3, y3 a z3.
skupina
public int skupina
Tento atribút umožňuje rozlíšiť body patriace do zákaznícky
 definovateľných skupín. Atribút je dostupný na voľné použitie.
 Nemá žiadne vnútorné využitie v rámci tried roja.
objekt
public Object objekt
Ľubovoľná inštancia s dodatočnými informáciami súvisiacimi
 s týmto bodom. Do tohto atribútu sa dá uložiť ľubovoľný
 zákaznícky objekt, ktorý môže niesť ďalšie informácie súvisiace
 s týmto bodom.
 
 
celočíselnéParametre
public final TreeMap&lt;Integer,Integer&gt; celočíselnéParametre
Mapa umožňujúca spravovanie zákazníckeho zoznamu celočíselných
 parametrov bodu. Význam parametrov určuje programátor podľa
 svojich potrieb.
Pozri tiež:
dajParameter(int, int), 
nastavParameter(int, int), 
dajParameter(int, double), 
nastavParameter(int, double), 
reálneParametre
celociselneParametre
public final TreeMap&lt;Integer,Integer&gt; celociselneParametre
 Alias pre celočíselnéParametre.
reálneParametre
public final TreeMap&lt;Integer,Double&gt; reálneParametre
Mapa umožňujúca spravovanie zákazníckeho zoznamu reálnych
 parametrov bodu. Význam parametrov určuje programátor podľa
 svojich potrieb.
Pozri tiež:
dajParameter(int, int), 
nastavParameter(int, int), 
dajParameter(int, double), 
nastavParameter(int, double), 
celočíselnéParametre
realneParametre
public final TreeMap&lt;Integer,Double&gt; realneParametre
 Alias pre reálneParametre.
smer
public double smer
Toto je atribút, do ktorého sa priebežne (automaticky) ukladá
 posledná orientácia grafického robota počas kreslenia tohto bodu.
 Dá sa to využiť na rôzne účely, napríklad nakreslenie šípky ako
 objektu v tomto bode podľa poslednej orientácie v čase kreslenia
 spoja, pričom samotný spoj môže byť skrytý.
kreslenie
public KreslenieTvaru kreslenie
Toto kreslenie umožňuje upraviť tvar objektu nakresleného na
 súradniciach tohto bodu roja.
 
 Poznámka: Vo vlastnom kreslení sa na
 prístup k aktuálne kreslenému bodu dá s výhodou využiť atribút
 bod roja.
Pozri tiež:
kresliTeleso(), 
Roj.kresli()
svgKreslenie
public KreslenieTvaru svgKreslenie
Toto kreslenie umožňuje definovať komplexnejší spôsob exportu
 objektu na súradiciach tohto bodu roja do formátu SVG. Toto
 kreslenie má prioritu pred atribútom svgTvar,
 ktorý poskytuje veľmi primitívnu možnosť exportu tvarov roja
 (resp. priemetov jeho bodov a objektov na nich) do formátu SVG.
 
 Pozor! Aj keď je tu použité rozhranie
 KreslenieTvaru, náplňou jeho činnosti nemá
 byť v tomto prípade kreslenie zadaným robotom, ale export tvarov
 do inštancie triedy SVGPodpora (buď do
 predvolenej, alebo do inak určenej)
 s pomocou zadaného robota a s prípadným využitím inštancie
 bod roja.
 
 
Pozri tiež:
telesoDoSVG(SVGPodpora), 
Roj.pridajDoSVG(SVGPodpora)
svgTvar
public Shape svgTvar
Tento atribút umožňuje definovať jednoduchý tvar, ktorý
 bude exportovaný ako objekt umiestnený na súradniciach tohto
 bodu roja do formátu SVG. Prioritu pred týmto atribútom má
 kreslenie, ktoré môže byť uložené v atribúte svgKreslenie.
Podrobnosti konštruktorov
Bod
public Bod()
Podrobnosti metód
compareTo
public int compareTo(Roj.Bod iný)
Porovná polohu tohto bodu s polohou zadaného bodu a vráti
 hodnotu 0.0, ak sú vzdialenosti oboch bodov od kamery
 zhodné, kladnú hodnotu, ak je vzdialenosť druhého bodu od kamery
 väčšia a zápornú hodnotu v opačnom prípade.
 
 Poznámka: Rozhranie Comparable
 bolo implementované z dôvodu zaručenia správneho poradia kreslenia
 bodov roja.
 
 
Definované:
compareTo v rozhraní Comparable&lt;Roj.Bod&gt;
Parametre:
iný – bod, s ktorým má byť tento bod porovnaný
Návratová hodnota:
celé číslo vyjadrujúce rozdiel vzdialeností porovnávaných
     bodov od kamery
transformuj
public void transformuj()
Ak je hodnota atribútu transformuj rovná
 true, tak táto metóda prepočíta (vypočíta nové) hodnoty
 transformovaných súradníc x1, y1
 a z1. Potom automaticky nastaví atribútu transformuj hodnotu false.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
upevni
public void upevni()
Táto metóda fyzicky presunie bod na jeho transformovanú polohu
 a zruší transformácie (inak dočasného) posunutia a pootočenia
 bodu. Inak povedané – lokálne transformované súradnice sa stanú
 originálnymi súradnicami a všetky relevantné atribúty lokálnych
 transformácií budú zrušené:
 
 To znamená, že transformované súradnice [x1,
 y1, z1] budú skopírované do originálnych
 súradníc [x0, y0, z0]
 a hodnoty transformácií posunutia (dx, dy,
 dz) a pootočenia (uhly alfa, beta a gama) bodu v priestore budú vynulované.
 
 Hodnoty súradníc stredu otáčania [xs, ys,
 zs] ponecháva táto metóda v pôvodnom stave. Ak je
 príznak transformuj rovný true,
 tak je pred upevnením automaticky spustená metóda transformuj().
kresliSpoj
public void kresliSpoj()
Táto metóda využije kresliaci robot roja na nakreslenie spoja
 (čiary) smerujúceho z aktuálnej polohy robota do tohto bodu.
 (Ak má robot položené pero!) Predpokladá
 sa, že aktuálna poloha robota je polohou predchádzajúceho bodu
 roja.
 
 Táto metóda využije atribút farby
 spoja, ak je nastavený (to jest, ak nemá hodnotu null)
 a atribút zmeny hrúbky čiary spoja (tiež, ak je
 nenulový).
 
 Poznámka: Pred kreslením celého roja sú
 zálohované dve vlastnosti kresliaceho robota – farba a hrúbka čiary. Ich hodnoty sú však obnovené až po nakreslení
 všetkých prvkov roja (spojov, telies/objektov) – pozri aj
 kreslenie telesa.
kresliTeleso
public void kresliTeleso()
Táto metóda využije kresliaci robot roja na nakreslenie
 objektu umiestneného na polohe tohto bodu (ak je viditeľný – pozri
 atribút zobraz). Ak je definované vlastné
 kreslenie, tak je touto metódou využité, inak
 je tvarom objektu pečiatka robota (čo môže byť ľubovoľný tvar,
 pretože robot môže mať definované vlastné kreslenie). Kreslenie
 využije atribút farby bodu (resp. objektu
 kresleného na pozícii bodu), ak je nastavený (to jest, ak nemá
 hodnotu null) a atribút zmeny hrúbky
 čiary objektu (tiež, ak je nenulový).
 
 Poznámka: Pred kreslením celého roja sú
 zálohované dve vlastnosti kresliaceho robota – farba a hrúbka čiary. Ich hodnoty sú však obnovené až po nakreslení
 všetkých prvkov roja (spojov a objektov), čiže ak toto kreslenie
 objektu/telesa tieto vlastnosti počas kreslenia zmení a neobnoví
 (čo sa nevzťahuje na vlastnosti vlastnej farby
 bodu a zmeny hrúbky čiary (kreslenia objektu),
 ktorých použitie je manažované automaticky – pred a po kreslení
 objektu bodu), tak sa zmeny prenesú do kreslenia ďalších prvkov
 roja, čo môže byť nežiaduce, preto odporúčame po skončení
 kreslenia telea „všetko (to jest nielen hrúbku čiary
 a farbu) vrátiť do pôvodného stavu.“
 
 Poznámka: Vo vlastnom kreslení sa na
 prístup k aktuálne kreslenému bodu dá s výhodou využiť atribút
 bod roja.
bodV
public boolean bodV(double súradnicaX,
                    double súradnicaY,
                    double polomer)
Overí, či sa zadané súradnice nachádzajú v kruhu so zadaným
 polomerom a stredom na aktuálnej pozícii projekcie bodu.
Parametre:
súradnicaX – x-ová súradnica bodu
súradnicaY – y-ová súradnica bodu
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true – áno; false – nie
bodV
public boolean bodV(Poloha objekt,
                    double polomer)
Funguje rovnako ako metóda bodV(x, y, polomer), len namiesto súradníc bodu
 je použitá poloha zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true/&#8203;false
bodV
public boolean bodV(double súradnicaX,
                    double súradnicaY)
Zistí, či sa súradnice zadaného bodu nachádzajú v kruhu
 s veľkosťou polomeru úmernému vzdialenosti inštancie tohto bodu
 od kamery (aktuálnej projekcie) a stredom na aktuálnej pozícii
 jeho projekcie.
Parametre:
súradnicaX – x-ová súradnica bodu
súradnicaY – y-ová súradnica bodu
Návratová hodnota:
true – áno; false – nie
bodV
public boolean bodV(Poloha objekt)
Funguje rovnako ako metóda bodV(x, y), len namiesto súradníc bodu je použitá poloha
 zadaného objektu…
Parametre:
objekt – objekt, ktorého poloha je použitá namiesto
     súradníc bodu
Návratová hodnota:
true/&#8203;false
myšV
public boolean myšV(double polomer)
Overí, či sa súradnice myši nachádzajú v kruhu so zadaným
 polomerom a stredom na aktuálnej pozícii projekcie bodu.
Parametre:
polomer – polomer vyšetrovaného kruhu
Návratová hodnota:
true – áno; false – nie
mysV
public boolean mysV(double polomer)
 Alias pre myšV.
myšV
public boolean myšV()
Zistí, či sa súradnice myši nachádzajú v kruhu s veľkosťou
 polomeru úmernému vzdialenosti inštancie tohto bodu od kamery
 (aktuálnej projekcie) a stredom na aktuálnej pozícii jeho
 projekcie.
Návratová hodnota:
true – áno; false – nie
mysV
public boolean mysV()
 Alias pre myšV.
dajParameter
public int dajParameter(int index,
                        int predvolenáHodnota)
Umožňuje prevziať hodnotu zákaznícky definovaného celočíselného
 parametra bodu. Metóda používa zoznam celočíselnéParametre.
Parametre:
index – index parametra
predvolenáHodnota – hodnota, ktorá bude vrátená v prípade,
     že parameter s určeným indexom nie je definovaný
Návratová hodnota:
hodnota parametra alebo predvolená hodnota
Pozri tiež:
nastavParameter(int, int), 
dajParameter(int, double), 
nastavParameter(int, double), 
celočíselnéParametre, 
reálneParametre
nastavParameter
public void nastavParameter(int index,
                            int hodnota)
Umožňuje nastaviť hodnotu zákaznícky definovaného celočíselného
 parametra bodu. Metóda používa zoznam celočíselnéParametre.
Parametre:
index – index parametra
hodnota – nová hodnota parametra
Pozri tiež:
dajParameter(int, int), 
dajParameter(int, double), 
nastavParameter(int, double), 
celočíselnéParametre, 
reálneParametre
dajParameter
public double dajParameter(int index,
                           double predvolenáHodnota)
Umožňuje prevziať hodnotu zákaznícky definovaného reálneho
 parametra bodu. Metóda používa zoznam reálneParametre.
 
 
Parametre:
index – index parametra
predvolenáHodnota – hodnota, ktorá bude vrátená v prípade,
     že parameter s určeným indexom nie je definovaný
Návratová hodnota:
hodnota parametra alebo predvolená hodnota
Pozri tiež:
dajParameter(int, int), 
nastavParameter(int, int), 
nastavParameter(int, double), 
celočíselnéParametre, 
reálneParametre
nastavParameter
public void nastavParameter(int index,
                            double hodnota)
Umožňuje nastaviť hodnotu zákaznícky definovaného reálneho
 parametra bodu. Metóda používa zoznam reálneParametre.
Parametre:
index – index parametra
hodnota – nová hodnota parametra
Pozri tiež:
dajParameter(int, int), 
nastavParameter(int, int), 
dajParameter(int, double), 
celočíselnéParametre, 
reálneParametre
spojDoSVG
public void spojDoSVG(SVGPodpora svgPodpora)
Táto metóda umožňuje exportovať spoj definovaný k tomuto bodu
 do zadanej inštancie SVG podpory. Ide
 o metódu, ktorá je v prípade exportu do formátu SVG pomyselným
 obrazom metódy kresliSpoj. Táto metóda je
 automaticky volaná metódou roja pridajDoSVG.
Parametre:
svgPodpora – inštancia SVG podpory,
     do ktorej bude exportovaný tvar Javy
     (čiary) reprezentujúci viditeľný spoj medzi prechádzajúcim
     a týmto bodom roja
Pozri tiež:
Roj.pridajDoSVG(SVGPodpora)
telesoDoSVG
public void telesoDoSVG(SVGPodpora svgPodpora)
Táto metóda umožňuje exportovať objekt definovaný pre tento
 bod do zadanej inštancie SVG podpory.
 Ide o metódu, ktorá je v prípade exportu do formátu SVG
 pomyselným obrazom metódy kresliTeleso.
 Metóda využíva hodnoty atribútov svgKreslenie a svgTvar, ak sú neprázdne.
 (Pozri aj ich opisy.) Táto metóda je automaticky volaná metódou
 roja pridajDoSVG.
 
 Poznámka: Pri exporte sa na prístup
 k aktuálne exportovanému bodu dá s výhodou využiť atribút
 bod roja.
Parametre:
svgPodpora – inštancia SVG podpory,
     do ktorej budú exportované tvary Javy
     reprezentujúce teleso umiestnené v tomto bode roja
čítajZoSúboru
public void čítajZoSúboru(Súbor súbor,
                          String identifikátor)
                   throws IOException
Prečíta údaje o inštancii tohto bodu z konfiguračného súboru
 otvoreného na čítanie. Metóda vyžaduje identifikátor menného
 priestoru, ktorý bol vyhradený pre tento bod. (Roj priraďuje
 automaticky ku každému bodu identifikátor v tvare bod[«index»].)
 
 (Pozri aj informácie uvedené v opise metódy uložDoSúboru.)
Parametre:
súbor – inštancia triedy Súbor otvorená
     na čítanie
identifikátor – vnorený menný priestor, z ktorého budú
     prevzaté údaje o bode
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
citajZoSuboru
public void citajZoSuboru(Súbor súbor,
                          String identifikátor)
                   throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
prečítajZoSúboru
public void prečítajZoSúboru(Súbor súbor,
                             String identifikátor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
precitajZoSuboru
public void precitajZoSuboru(Súbor súbor,
                             String identifikátor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
uložDoSúboru
public void uložDoSúboru(Súbor súbor,
                         String identifikátor)
                  throws IOException
Zapíše údaje o inštancii tohto bodu do konfiguračného súboru
 otvoreného na zápis. Metóda vyžaduje identifikátor menného
 priestoru, ktorý bude použitý na bezpečné uloženie množiny
 údajov o bode. Roj priraďuje automaticky ku každému bodu
 identifikátor v tvare bod[«index»]. Ak
 je namiesto identifikátora zadaná hodnota null, tak
 bude použitý aktuálny menný priestor a ak by to bol hlavný menný
 priestor, tak jestvuje vysoké riziko toho, že údaje budú
 kolidovať s inými vlastnosťami zapísanými v súbore.
 (V skutočnosti by zápis a následné čítanie bez
 identifikátora menného podpriestoru fungoval len pre jediný bod
 roja, čo nie je príliš užitočné.)
Parametre:
súbor – inštancia triedy Súbor otvorená
     na zápis
identifikátor – vnorený menný priestor, do ktorého budú
     vložené údaje o bode
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
ulozDoSuboru
public void ulozDoSuboru(Súbor súbor,
                         String identifikátor)
                  throws IOException
 Alias pre uložDoSúboru.
Výnimky:
IOException
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Roj.Smerník
java.lang.Object
Roj.Smerník
Známe priame odvodené triedy:
Roj.Smernik
Nadradená trieda:
Roj
public class Roj.Smerník
extends Object
Pomocná trieda na riadené vkladanie bodov do roja. Smerník je
 jednoduchá neviditeľná pomôcka na generovanie (pridávanie) bodov
 roja. Smerník je orientovaný kurzor umožňujúci pridávanie bodov
 na svojej pozícii. Dá sa presúvať, otáčať, orientovať smerom na
 zadaný bod, uchovávať (zálohovať) a obnovovať svoju polohu
 a orientáciu s použitím vnútorných zásobníkov a podobne.
 
 
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
boolean
vkladajObjekty
Príznak toho, či nové vkladané body majú mať viditeľné
 objekty – či majú byť objekty definované na ich polohe kreslené.
boolean
vkladajSpoje
Príznak toho, či nové vkladané body majú mať viditeľné
 (definované) spoje.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Smerník() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
double[]
dajPolohu()
Vráti vrchol zásobníka polôh smerníka vo forme trojprvkového
 poľa [x, y, z].
double[]
dajSmer()
Vráti vrchol zásobníka smerov smerníka vo forme trojprvkového
 poľa [Δx, Δy, Δz].
double[]
dajStav()
Vráti vrchol zásobníka stavov smerníka vo forme šesťprvkového
 poľa [x, y, z, Δx, Δy, Δz].
boolean
obnov()
Vyberie (obnoví) z vnútorného zásobníka stavu smerníka
 poslednú uloženú polohu aj smer.
boolean
obnovPolohu()
Vyberie (obnoví) z vnútorného zásobníka polôh smerníka poslednú
 uloženú polohu.
boolean
obnovSmer()
Vyberie (obnoví) z vnútorného zásobníka smerov smerníka posledný
 uložený smer.
void
otoc(double uhol)
 Alias pre otoč.
void
otoc(double[] uhly)
 Alias pre otoč.
void
otoc(double Δα,
    double Δβ,
    double Δγ)
 Alias pre otoč.
void
otoc(double u,
    double v,
    double w,
    double Θ)
 Alias pre otoč.
void
otocOkolo(double uhol)
 Alias pre otoč.
void
otocOkolo(double a,
         double b,
         double c,
         double u,
         double v,
         double w,
         double Θ,
         boolean î)
 Alias pre otoč.
void
otoč(double uhol)
Pootočí smerník (zmení jeho orientáciu) o zadaný uhol okolo
 osi prechádzajúcej stredom súradnicovej sústavy a smerujúcej
 k poslednému uloženému smeru smerníka.
void
otoč(double[] uhly)
Pootočí smerník o uhly v smere osí x, y a z zadané vo forme
 poľa.
void
otoč(double Δα,
    double Δβ,
    double Δγ)
Pootočí smerník (zmení orientáciu) o zadané uhly v smere osí x,
 y a z.
void
otoč(double u,
    double v,
    double w,
    double Θ)
Pootočí smerník (zmení jeho orientáciu) o uhol Θ okolo osi
 prechádzajúcej stredom súradnicovej sústavy (pretože ide
 o zmenu smerového vektora a zjednodušene môžeme povedať, že
 tento je lokalizovaný v strede súradnicovej sústavy)
 a orientovanej podľa smerového vektora ⟨u, v, w⟩.
void
otočOkolo(double uhol)
Zmení polohu smerníka (orientácia zostane zachovaná) jeho
 pootočením o zadaný uhol okolo osi určenej posledným uloženým stavom smerníka (pri ukladaní stavu
 je uchovaná poloha aj smer smerníka, takže na jednoznačné určenie
 osi rotácie je k dispozícii dostatočné množstvo údajov).
void
otočOkolo(double a,
         double b,
         double c,
         double u,
         double v,
         double w,
         double Θ,
         boolean î)
Zmení polohu smerníka (orientácia zostane zachovaná) jeho
 pootočením o uhol Θ okolo osi prechádzajúcej bodom [a, b, c]
 a smerujúcej buď k bodu [u, v, w] (ak je parameter î
 rovný false), alebo orientovanej v smere jednotkového
 vektora ⟨u, v, w⟩ (ak je parameter î rovný true).
double[]
poloha()
Vráti aktuálnu polohu smerníka vo forme trojprvkového
 poľa [x, y, z].
void
poloha(double[] bod)
Presunie smerník na súradnice zadané vo forme trojprvkového
 poľa.
void
poloha(double x,
      double y,
      double z)
Presunie smerník na zadané súradnice.
void
posun(double dĺžka)
 Alias pre posuň.
void
posuň(double dĺžka)
Posunie smerník o zadanú dĺžku v aktuálnom smere (jeho
 orientácie).
void
posun(double[] bod)
 Alias pre posuň.
void
posuň(double[] bod)
Posunie smerník o zadaný rozdiel súradníc zadaný vo forme
 trojprvkového poľa.
void
posun(double Δx,
     double Δy,
     double Δz)
 Alias pre posuň.
void
posuň(double Δx,
     double Δy,
     double Δz)
Posunie smerník o zadaný rozdiel súradníc.
Roj.Bod
pridajBod()
Vloží do roja bod na aktuálnej polohe smerníka s nastavenými
 príznakmi kreslenia spoja a objektu na základe hodnôt príznakov
 smerníka vkladajSpoje a vkladajObjekty.
double[]
smer()
Vráti aktuálny „smer“ (jednotkový vektor pohybu) smerníka vo
 forme trojprvkového poľa [Δx, Δy, Δz].
void
smer(double[] vektor)
Nastaví „smer“ (jednotkový vektor pohybu) smerníka podľa
 zadaných súradníc smerového vektora.
void
smer(double x,
    double y,
    double z)
Nastaví „smer“ (jednotkový vektor pohybu) smerníka podľa zadaných
 súradníc smerového vektora.
void
smerNa(double x,
      double y,
      double z)
Nastaví orientáciu smerníka tak, aby smeroval k zadanému
 bodu.
int
vymaz()
 Alias pre vymaž.
int
vymaz(int koľko)
 Alias pre vymaž.
int
vymazPolohu()
 Alias pre vymažPolohu.
int
vymazPolohy(int koľko)
 Alias pre vymažPolohy.
int
vymazSmer()
 Alias pre vymažSmer.
int
vymazSmery(int koľko)
 Alias pre vymažSmery.
int
vymaž()
Odstráni posledný záznam zo zásobníka stavov smerníka.
int
vymaž(int koľko)
Odstráni z vnútorného zásobníka stavov smerníka zadaný počet
 posledných záznamov.
int
vymažPolohu()
Odstráni posledný záznam zo zásobníka polôh smerníka.
int
vymažPolohy(int koľko)
Odstráni z vnútorného zásobníka polôh smerníka zadaný počet
 posledných záznamov.
int
vymažSmer()
Odstráni posledný záznam zo zásobníka smerov smerníka.
int
vymažSmery(int koľko)
Odstráni z vnútorného zásobníka smerov smerníka zadaný počet
 posledných záznamov.
int
vyprazdni()
 Alias pre vyprázdni.
int
vyprázdni()
Vyprázdni vnútorný zásobník stavov smerníka.
int
vyprazdniPolohy()
 Alias pre vyprázdniPolohy.
int
vyprázdniPolohy()
Vyprázdni vnútorný zásobník polôh smerníka.
int
vyprazdniSmery()
 Alias pre vyprázdniSmery.
int
vyprázdniSmery()
Vyprázdni vnútorný zásobník smerov smerníka.
int[]
vyprazdniVsetko()
 Alias pre vyprázdniVšetko.
int[]
vyprázdniVšetko()
Vyprázdni všetky vnútorné zásobníky smerníka.
boolean
zalohuj()
 Alias pre zálohuj.
boolean
zálohuj()
Vloží do vnútorného zásobníka stavu smerníka jeho aktuálnu
 polohu aj smer.
boolean
zalohujPolohu()
 Alias pre zálohujPolohu.
boolean
zálohujPolohu()
Vloží do vnútorného zásobníka polôh smerníka jeho aktuálnu
 polohu.
boolean
zalohujSmer()
 Alias pre zálohujSmer.
boolean
zálohujSmer()
Vloží do vnútorného zásobníka smerov smerníka jeho aktuálny smer.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
vkladajSpoje
public boolean vkladajSpoje
Príznak toho, či nové vkladané body majú mať viditeľné
 (definované) spoje.
vkladajObjekty
public boolean vkladajObjekty
Príznak toho, či nové vkladané body majú mať viditeľné
 objekty – či majú byť objekty definované na ich polohe kreslené.
Podrobnosti konštruktorov
Smerník
public Smerník()
Podrobnosti metód
poloha
public double[] poloha()
Vráti aktuálnu polohu smerníka vo forme trojprvkového
 poľa [x, y, z].
Návratová hodnota:
trojprvkové pole súradníc
poloha
public void poloha(double x,
                   double y,
                   double z)
Presunie smerník na zadané súradnice.
Parametre:
x – x-ová súradnica novej polohy
y – y-ová súradnica novej polohy
z – z-ová súradnica novej polohy
poloha
public void poloha(double[] bod)
Presunie smerník na súradnice zadané vo forme trojprvkového
 poľa. (Ak má pole menší počet prvkov, poloha nebude nastavená.
 Pri väčšom počte prvkov sú brané do úvahy len prvé tri.)
Parametre:
bod – najmenej trojprvkové pole súradníc novej polohy
posuň
public void posuň(double Δx,
                  double Δy,
                  double Δz)
Posunie smerník o zadaný rozdiel súradníc.
Parametre:
Δx – prírastok x-ovej súradnice
Δy – prírastok y-ovej súradnice
Δz – prírastok z-ovej súradnice
posun
public void posun(double Δx,
                  double Δy,
                  double Δz)
 Alias pre posuň.
posuň
public void posuň(double[] bod)
Posunie smerník o zadaný rozdiel súradníc zadaný vo forme
 trojprvkového poľa. (Ak má pole menší počet prvkov, poloha nebude
 upravená. Pri väčšom počte prvkov sú brané do úvahy len prvé
 tri.)
Parametre:
bod – najmenej trojprvkové pole prírastkov súradníc polohy
posun
public void posun(double[] bod)
 Alias pre posuň.
posuň
public void posuň(double dĺžka)
Posunie smerník o zadanú dĺžku v aktuálnom smere (jeho
 orientácie).
Parametre:
dĺžka – dĺžka, o ktorú sa má smerník posunúť v aktuálnom
     smere jednotkového vektora
posun
public void posun(double dĺžka)
 Alias pre posuň.
smer
public double[] smer()
Vráti aktuálny „smer“ (jednotkový vektor pohybu) smerníka vo
 forme trojprvkového poľa [Δx, Δy, Δz].
Návratová hodnota:
trojprvkové pole súradníc
smer
public void smer(double x,
                 double y,
                 double z)
Nastaví „smer“ (jednotkový vektor pohybu) smerníka podľa zadaných
 súradníc smerového vektora. Súradnice nemusia byť normalizované,
 metóda ich normalizuje.
Parametre:
x – x-ová súradnica smerového vektora
y – y-ová súradnica smerového vektora
z – z-ová súradnica smerového vektora
smer
public void smer(double[] vektor)
Nastaví „smer“ (jednotkový vektor pohybu) smerníka podľa
 zadaných súradníc smerového vektora. Súradnice nemusia byť
 normalizované, metóda ich normalizuje.
Parametre:
vektor – najmenej trojprvkové pole súradníc smerového vektora
otoč
public void otoč(double Δα,
                 double Δβ,
                 double Δγ)
Pootočí smerník (zmení orientáciu) o zadané uhly v smere osí x,
 y a z. Ide o pootočenie jednotkového vektora pohybu, takže aj keď
 je výpočtovo stred otáčania v strede súradnicovej sústavy, výsledný
 praktický efekt pootočenia vektora je zmena orientácie smerníka,
 ktorý sa od tohto momentu bude pohybovať zmeneným smerom.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
Δα – hodnota zmeny uhla v smere osi x
Δβ – hodnota zmeny uhla v smere osi y
Δγ – hodnota zmeny uhla v smere osi z
otoc
public void otoc(double Δα,
                 double Δβ,
                 double Δγ)
 Alias pre otoč.
otoč
public void otoč(double[] uhly)
Pootočí smerník o uhly v smere osí x, y a z zadané vo forme
 poľa. Ak pole obsahuje aspoň tri prvky, tak sa metóda správa
 rovnako ako metóda otoč(Δα, Δβ,
 Δγ), ktorej boli poslané tri uhly z prvých troch prvkov poľa. Ak
 pole obsahuje len dva prvky, tak je to ekvivalentné volaniu metódy
 otoč(Δα, Δβ, 0.0), kde sú do
 prvých dvoch parametrov vložené dva prvky poľa a podobne pri
 jednoprvkovom poli ide o volanie ekvivalentné vykonaniu otoč(Δα, 0.0, 0.0).
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
uhly – najmenej trojprvkové pole uhlov rotácie okolo osí
     x, y a z
otoc
public void otoc(double[] uhly)
 Alias pre otoč.
otoč
public void otoč(double u,
                 double v,
                 double w,
                 double Θ)
Pootočí smerník (zmení jeho orientáciu) o uhol Θ okolo osi
 prechádzajúcej stredom súradnicovej sústavy (pretože ide
 o zmenu smerového vektora a zjednodušene môžeme povedať, že
 tento je lokalizovaný v strede súradnicovej sústavy)
 a orientovanej podľa smerového vektora ⟨u, v, w⟩.
Parametre:
u – x-ová súradnica smerového vektora určujúceho os rotácie
v – y-ová súradnica smerového vektora určujúceho os rotácie
w – z-ová súradnica smerového vektora určujúceho os rotácie
Θ – uhol rotácie smerníka
Pozri tiež:
otoč(double)
otoc
public void otoc(double u,
                 double v,
                 double w,
                 double Θ)
 Alias pre otoč.
otoč
public void otoč(double uhol)
Pootočí smerník (zmení jeho orientáciu) o zadaný uhol okolo
 osi prechádzajúcej stredom súradnicovej sústavy a smerujúcej
 k poslednému uloženému smeru smerníka.
 Ak je zásobník smerov prázdny, tak metóda nevykoná nič.
 
 (Pozri aj informácie v metóde otoč(u, v, w, Θ).)
Parametre:
uhol – uhol pootočenia smerníka okolo osi prechádzajúcej
     stredom súradnicovej sústavy a smerujúcej podľa orientácie
     prevzatej z vrchola zásobníka smerov
Pozri tiež:
otoč(double, double, double, double)
otoc
public void otoc(double uhol)
 Alias pre otoč.
otočOkolo
public void otočOkolo(double a,
                      double b,
                      double c,
                      double u,
                      double v,
                      double w,
                      double Θ,
                      boolean î)
Zmení polohu smerníka (orientácia zostane zachovaná) jeho
 pootočením o uhol Θ okolo osi prechádzajúcej bodom [a, b, c]
 a smerujúcej buď k bodu [u, v, w] (ak je parameter î
 rovný false), alebo orientovanej v smere jednotkového
 vektora ⟨u, v, w⟩ (ak je parameter î rovný true).
 
 Pozor! Ak je parameter î
 rovný true, tak hodnoty parametrov u, v a w
 musia(!) obsahovať normalizované
 súradnice (súradnice jednotkového vektora), inak bude výsledok
 nesprávny!
Parametre:
a – x-ová súradnica bodu, ktorým prechádza os rotácie
b – y-ová súradnica bodu, ktorým prechádza os rotácie
c – z-ová súradnica bodu, ktorým prechádza os rotácie
u – x-ová súradnica bodu alebo vektora určujúceho smer
     osi rotácie
v – y-ová súradnica bodu alebo vektora určujúceho smer
     osi rotácie
w – z-ová súradnica bodu alebo vektora určujúceho smer
     osi rotácie
Θ – uhol rotácie smerníka
î – rozlišovací parameter toho, či parametre u, v a w určuje
     bod, do ktorého má os rotácie smerovať (hodnota false), alebo jednotkový vektor (hodnota true)
Pozri tiež:
otočOkolo(double)
otocOkolo
public void otocOkolo(double a,
                      double b,
                      double c,
                      double u,
                      double v,
                      double w,
                      double Θ,
                      boolean î)
 Alias pre otoč.
otočOkolo
public void otočOkolo(double uhol)
Zmení polohu smerníka (orientácia zostane zachovaná) jeho
 pootočením o zadaný uhol okolo osi určenej posledným uloženým stavom smerníka (pri ukladaní stavu
 je uchovaná poloha aj smer smerníka, takže na jednoznačné určenie
 osi rotácie je k dispozícii dostatočné množstvo údajov).
 Ak je zásobník stavov prázdny, tak metóda nevykoná nič.
 
 (Pozri aj informácie v metóde otočOkolo(a, b, c, u, v, w, Θ, î).)
Parametre:
uhol – uhol pootočenia smerníka okolo osi prevzatej
     z vrchola zásobníka stavov
Pozri tiež:
otočOkolo(double, double, double, double, double,
     double, double, boolean)
otocOkolo
public void otocOkolo(double uhol)
 Alias pre otoč.
smerNa
public void smerNa(double x,
                   double y,
                   double z)
Nastaví orientáciu smerníka tak, aby smeroval k zadanému
 bodu.
Parametre:
x – x-ová súradnica cieľového bodu
y – y-ová súradnica cieľového bodu
z – z-ová súradnica cieľového bodu
zálohuj
public boolean zálohuj()
Vloží do vnútorného zásobníka stavu smerníka jeho aktuálnu
 polohu aj smer. (Ak metóda uspeje, tak vráti true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
zalohuj
public boolean zalohuj()
 Alias pre zálohuj.
obnov
public boolean obnov()
Vyberie (obnoví) z vnútorného zásobníka stavu smerníka
 poslednú uloženú polohu aj smer. (Ak metóda uspeje, tak vráti
 true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
dajStav
public double[] dajStav()
Vráti vrchol zásobníka stavov smerníka vo forme šesťprvkového
 poľa [x, y, z, Δx, Δy, Δz]. Ak je zásobník prázdny alebo nastane
 iné zlyhanie, tak metóda vráti hodnotu null. Zásobník
 zostane nezmenený.
Návratová hodnota:
šesťprvkové pole stavu (x, y, z, Δx, Δy, Δz) z vrchola
     zásobníka stavov alebo null, ak je zásobník prázdny
vyprázdni
public int vyprázdni()
Vyprázdni vnútorný zásobník stavov smerníka. Metóda vráti počet
 záznamov odstránených zo zásobníka. Ak vznikne iné zlyhanie,
 tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vyprazdni
public int vyprazdni()
 Alias pre vyprázdni.
vymaž
public int vymaž()
Odstráni posledný záznam zo zásobníka stavov smerníka.
 (Porovnaj s metódou vyprázdni.) Metóda
 vráti počet záznamov odstránených zo zásobníka. Ak vznikne iné
 zlyhanie, tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymaz
public int vymaz()
 Alias pre vymaž.
vymaž
public int vymaž(int koľko)
Odstráni z vnútorného zásobníka stavov smerníka zadaný počet
 posledných záznamov. Metóda vráti počet záznamov odstránených
 zo zásobníka. Ak vznikne iné zlyhanie, tak metóda vráti −1.
Parametre:
koľko – požadovaný počet záznamov, ktoré majú byť odstránené
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymaz
public int vymaz(int koľko)
 Alias pre vymaž.
zálohujPolohu
public boolean zálohujPolohu()
Vloží do vnútorného zásobníka polôh smerníka jeho aktuálnu
 polohu. (Ak metóda uspeje, tak vráti true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
zalohujPolohu
public boolean zalohujPolohu()
 Alias pre zálohujPolohu.
obnovPolohu
public boolean obnovPolohu()
Vyberie (obnoví) z vnútorného zásobníka polôh smerníka poslednú
 uloženú polohu. (Ak metóda uspeje, tak vráti true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
dajPolohu
public double[] dajPolohu()
Vráti vrchol zásobníka polôh smerníka vo forme trojprvkového
 poľa [x, y, z]. Ak je zásobník prázdny alebo nastane iné zlyhanie,
 tak metóda vráti hodnotu null. Zásobník zostane
 nezmenený.
Návratová hodnota:
trojprvkové pole súradníc
vyprázdniPolohy
public int vyprázdniPolohy()
Vyprázdni vnútorný zásobník polôh smerníka. Metóda vráti počet
 záznamov odstránených zo zásobníka. Ak vznikne iné zlyhanie,
 tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vyprazdniPolohy
public int vyprazdniPolohy()
 Alias pre vyprázdniPolohy.
vymažPolohu
public int vymažPolohu()
Odstráni posledný záznam zo zásobníka polôh smerníka. (Porovnaj
 s metódou vyprázdniPolohy.) Metóda
 vráti počet záznamov odstránených zo zásobníka. Ak vznikne iné
 zlyhanie, tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymazPolohu
public int vymazPolohu()
 Alias pre vymažPolohu.
vymažPolohy
public int vymažPolohy(int koľko)
Odstráni z vnútorného zásobníka polôh smerníka zadaný počet
 posledných záznamov. Metóda vráti počet záznamov odstránených
 zo zásobníka. Ak vznikne iné zlyhanie, tak metóda vráti −1.
Parametre:
koľko – požadovaný počet záznamov, ktoré majú byť odstránené
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymazPolohy
public int vymazPolohy(int koľko)
 Alias pre vymažPolohy.
zálohujSmer
public boolean zálohujSmer()
Vloží do vnútorného zásobníka smerov smerníka jeho aktuálny smer.
 (Ak metóda uspeje, tak vráti true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
zalohujSmer
public boolean zalohujSmer()
 Alias pre zálohujSmer.
obnovSmer
public boolean obnovSmer()
Vyberie (obnoví) z vnútorného zásobníka smerov smerníka posledný
 uložený smer. (Ak metóda uspeje, tak vráti true.)
Návratová hodnota:
true pri úspechu; false v opačnom
     prípade
dajSmer
public double[] dajSmer()
Vráti vrchol zásobníka smerov smerníka vo forme trojprvkového
 poľa [Δx, Δy, Δz]. Ak je zásobník prázdny alebo nastane iné
 zlyhanie, tak metóda vráti hodnotu null. Zásobník
 zostane nezmenený.
Návratová hodnota:
trojprvkové pole súradníc
vyprázdniSmery
public int vyprázdniSmery()
Vyprázdni vnútorný zásobník smerov smerníka. Metóda vráti počet
 záznamov odstránených zo zásobníka. Ak vznikne iné zlyhanie,
 tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vyprazdniSmery
public int vyprazdniSmery()
 Alias pre vyprázdniSmery.
vymažSmer
public int vymažSmer()
Odstráni posledný záznam zo zásobníka smerov smerníka. (Porovnaj
 s metódou vyprázdniSmery.) Metóda
 vráti počet záznamov odstránených zo zásobníka. Ak vznikne iné
 zlyhanie, tak metóda vráti −1.
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymazSmer
public int vymazSmer()
 Alias pre vymažSmer.
vymažSmery
public int vymažSmery(int koľko)
Odstráni z vnútorného zásobníka smerov smerníka zadaný počet
 posledných záznamov. Metóda vráti počet záznamov odstránených
 zo zásobníka. Ak vznikne iné zlyhanie, tak metóda vráti −1.
Parametre:
koľko – požadovaný počet záznamov, ktoré majú byť odstránené
Návratová hodnota:
počet skutočne odstránených záznamov zo zásobníka alebo
     −1 v prípade, že nastala chyba
vymazSmery
public int vymazSmery(int koľko)
 Alias pre vymažSmery.
vyprázdniVšetko
public int[] vyprázdniVšetko()
Vyprázdni všetky vnútorné zásobníky smerníka. Metóda vráti
 trojprvkové pole, ktoré bude obsahovať, koľko záznamov bolo
 odstránených zo zásobníka stavov, polôh a smerov. Hodnota
 −1 niektorého z prvkov znamená, že vyprázdňovanie konkrétneho
 zásobníka zlyhalo.
Návratová hodnota:
trojprvkové pole počtov skutočne odstránených záznamov
     v poradí: stavy, polohy a smery; hodnota −1 prvka značí chybu
vyprazdniVsetko
public int[] vyprazdniVsetko()
 Alias pre vyprázdniVšetko.
pridajBod
public Roj.Bod pridajBod()
Vloží do roja bod na aktuálnej polohe smerníka s nastavenými
 príznakmi kreslenia spoja a objektu na základe hodnôt príznakov
 smerníka vkladajSpoje a vkladajObjekty. Nový bod je návratovou
 hodnotou tejto metódy.
Návratová hodnota:
inštancia bodu, ktorý bol práve pridaný do roja
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":9,"i30":9,"i31":9,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":9,"i73":9,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Roj
java.lang.Object
Roj
public class Roj
extends Object
Táto trieda umožňuje definovať a pracovať so sériou bodov (zvaných roj)
 umiestnených v trojrozmernom priestore. Na zobrazenie scény roja je
 použitá bodová projekcia. Body môžu byť prepojené spojmi, čím môžu byť vytvárané drôtené modely a v každom bode môže byť
 definovaný objekt na nakreslenie, čím sa dajú
 vytvárať jednoduché 3D scény zložené z 2D kulís (pozri príklad kolotoča
 nižšie).
 
 Súradnicový systém roja je orientovaný ľavotočivo, čiže keď sa pozrieme
 na plochu xy zvrchu tak, že y-ová os smeruje doprava (rastom kladných
 hodnôt), tak x-ová os smeruje hore (pozri obrázok nižšie). Alebo keď sa
 pozeráme na počiatok súradnicovej sústavy z oktetu všetkých troch kladných
 súradníc tak, že z-ová súradnica smeruje hore, tak x-ovú os máme po pravej
 ruke a y-ovú po ľavej (pozri obrázok nižšie).
 
 
 
 Každý bod roja má definované množstvo atribútov, ktoré
 majú poskytovať čo najväčšiu flexibilitu. Väčšina z nich slúži na
 umiestnenie bodu do priestoru. Základná trojica atribútov sú pôvodné
 súradnice bodu v priestore [x0, y0, z0]. Z nich sú s pomocou atribútov posunutia
 [dx, dy, dz],
 stredu rotácie [xs, ys,
 zs] a uhlov rotácie (alfa,
 beta, gama) vypočítané
 takzvané lokálne transformované súradnice v priestore [x1, y1, z1]. Ďalším krokom je
 výpočet takzvaných konečných súradníc [x2,
 y2, z2], čo sú globálne
 transformované súradnice, to jest riadia sa hodnotou aktuálnej
 transformačnej matice roja, ktorá je prepočítavaná z polohy a orientácie
 kamery (pozri napríklad: nastavUhly, nastavStredOtáčania, nastavKameru), mierky, prípadne ďalších
 (automaticky zisťovaných) hodnôt. Posledným krokom je výpočet polohy bodu
 premietnutej na plátno [x3, y3]
 a korešpondujúceho faktora rozmeru objektu kresleného v konkrétnom bode
 z3.
 
 
 
 Ľavotočivý súradnicový systém pri pohľade
 „zvrchu.“ 
 
 Ľavotočivý súradnicový systém pri
 pohľade „spredu.“
 
 
 V tomto balíčku
 (7z) je dostupný na prevzatie miniprojekt obsahujúci ovládač roja
 a od neho odvodenú jednoduchú triedu testu roja s niekoľkými príkladmi
 použitia roja.
 
  Ukážka
 možného výstupu príkladu testu roja s implementáciou ovládača roja.
 
 Na jeho základe je postavený nasledujúci príklad s kolotočom.
 
 Príklad:
 
 Tento príklad implementuje trojrozmernú kolotočovú ponuku zloženú
 z čiarových ikon vo formáte SVG.
 
 
import knižnica.*;
import java.awt.Shape;
// SVG ikonky boli vyrobené (s pomocou vektorového grafického editora
// Inkscape) z bitmapovej verzie ikon voľne dostupných na webovej stránke:
// https://icon-library.net/icon/menu-icon-png-3-lines-20.
// 
// Ďalšie odporúčané zdroje:
// 
// • Výborný SVG tester: https://codepen.io/AmeliaBR/pen/JoYNEZ?editors=1000
// • Coyier, Chris. 2018. The SVG ‘path’ Syntax : An Illustrated Guide.
//   ⟨https://css-tricks.com/svg-path-syntax-illustrated-guide/⟩.
// • https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths
// • https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d
public class Kolotoč extends GRobot
{
    // Roj a príznak potreby jeho prekreslenia (po zmene parametrov):
    private Roj roj = new Roj(this);
    private boolean prekresliRoj = true;
    // Uhol jednotkového pootočenia kolotoča a aktuálne želaný uhol:
    private double Δu, želanýUhol = 90.0;
    // Zoznam SVG súborov obsahujúcich SVG tvary ikoniek:
    private String[] mená = new String[]
    {
        "ramcek.svg", "spendlik.svg", "hudba.svg", "kompas.svg", "film.svg",
        "obrazok.svg", "kalkulacka.svg", "kava.svg", "papiere.svg",
        "zakladac.svg", "mobilna-siet.svg", "smernik.svg", "kvapka.svg",
        "sluchadlo.svg", // …
    };
    // Statická trieda zoskupujúca funkcionalitu prevodu čiarovej ikonky
    // vo formáte SVG do tvarov Javy.
    public static class Ikonka implements KreslenieTvaru
    {
        // Atribút na prepínanie zobrazenia ladiacich informácií:
        private static boolean info = false;
        // Vnútorné atribúty kreslenia ikonky:
        private String meno;
        private Shape[] tvary;
        private Farba[] výplne;
        private Farba[] čiary;
        // Konštruktor ikonky.
        public Ikonka(String meno)
        {
            this.meno = meno;
            SVGnaTvary(meno);
        }
        
        // Metóda prevádzajúca tvary zo zadaného SVG súboru na tvary Javy.
        private void SVGnaTvary(String meno)
        {
            try
            {
                // Vyčistenie inštancie svgPodpora od predchádzajúceho
                // čítania:
                svgPodpora.vymaž();
                // Overenie, či bol súbor korektne prečítaný:
                if (-1 == svgPodpora.čítaj(meno))
                {
                    // Predvolený tvar kružnice v prípade zlyhania čítania
                    // súboru:
                    tvary = new Shape[] {new java.awt.geom.Ellipse2D.Double(
                        Svet.prepočítajX(-10), Svet.prepočítajY(10), 20, 20)};
                    výplne = new Farba[] {biela.priehľadnejšia(0.6)};
                    čiary = new Farba[] {ružová};
                }
                else
                {
                    // Získanie súradnice stredu:
                    Bod stred = svgPodpora.stredKresby();
                    // Výroba transformácie posunutia v súradnicovom
                    // priestore Javy (tá sa nižšie použije na posunutie
                    // všetkých tvarov):
                    SVGPodpora.Transformácia posunTam =
                        new SVGPodpora.Transformácia(
                            SVGPodpora.Transformácia.POSUN,
                            -stred.polohaX(), stred.polohaY());
                    // Uloženie počtu tvarov kresby do pomocnej premennej:
                    int počet = svgPodpora.počet();
                    // Vytvorenie polí s prislúchajúcimi počtami prvkov:
                    tvary = new Shape[počet];
                    výplne = new Farba[počet];
                    čiary = new Farba[počet];
                    // Pridanie transformácie ku každému tvaru a zároveň
                    // overenie toho, či má byť tento tvar vypĺňaný, kreslený
                    // (alebo oboje):
                    for (int i = 0; i &lt; počet; ++i)
                    {
                        svgPodpora.pridajTransformácie(i, posunTam);
                        tvary[i] = svgPodpora.dajVýsledný(i);
                        výplne[i] = svgPodpora.farbaVýplne(i);
                        čiary[i] = svgPodpora.farbaČiary(i);
                    }
                }
            }
            catch (Exception e)
            {
                // (Toto nastane len výnimočne. Aj neprítomný alebo chybný
                // SVG súbor je signalizovaný inak: návratovou hodnotou
                // metódy čítaj.)
                e.printStackTrace();
            }
        }
        // Kreslenie ikonky.
        public void kresli(GRobot r)
        {
            // Všetky ikonky budú kreslené zvislo s hrúbkou čiary určenou
            // aktuálnou mierkou robota:
            r.uhol(90);
            r.hrúbkaČiary(r.mierka());
            
            // Poznámka: Prispôsobenie (zmena) niektorých programátorom
            //  vybraných farieb počas kreslenia ikoniek kolotoča je vhodné
            //  potvrdiť práve na tomto mieste tak, že si farbu (alebo farby)
            //  vopred zapamätáme do premennej a potom ňou (nimi) nahradíme
            //  zvolenú kľúčovú farba (resp. farby) v kresbe. V tejto ukážke
            //  (iba na ukážku) nahrádzame ružovú farbu robotom vopred
            //  vygenerovanou náhodnou farbou. V dodaných SVG súboroch je
            //  táto farba (opäť len na ukážku) použitá iba raz – v „bodke“
            //  na obrázku mobilna-siet.svg. Môže však ísť o nahradenie
            //  ľubovoľnej farby ľubovoľnou farbou. Môžu byť tiež využité
            //  verejné atribúty farba a farbaSpoja aktuálne kresleného bodu
            //  roja (pozri atribút Roj.bod). (Spoje i tak v tomto príklade
            //  nevyužívame, tak môžeme využiť atribút rezervovaný na ich
            //  zafarbovanie na vlastné účely.)
            r.náhodnáFarba();
            Farba f = r.farba();
            
            int i = 0;
            for (Shape tvar : tvary)
            {
                if (null != výplne[i])
                {
                    if (ružová.equals(výplne[i]))
                        r.farba(f);
                    else
                        r.farba(výplne[i]);
                    r.vyplňTvar(tvar, true);
                }
                if (null != čiary[i])
                {
                    if (ružová.equals(čiary[i]))
                        r.farba(f);
                    else
                        r.farba(čiary[i]);
                    r.kresliTvar(tvar, true);
                }
                ++i;
            }
            // Ladiace informácie ikoniek (meno súboru nad ňou a mierka
            // pod ňou):
            if (info)
            {
                r.skoč(r.veľkosť() * 1.5);
                r.text(meno);
                r.odskoč(r.veľkosť() * 2.75);
                r.text(r.F(r.mierka(), 2));
            }
        }
    }
    
    // Konštruktor celého kolotoča.
    private Kolotoč()
    {
        // Keby sme chceli mať predvolene zobrazené osi súradnicovej
        // sústavy (ktoré sú dobrou pomôckou pri ladení), volali by sme
        // na tomto mieste tento príkaz: osi();
        // Nastavenie predvolených vlastností roja (pri každom počte
        // bodov je potrebné tieto parametre „doladiť“ – najmä mierku):
        resetujRoj();
            // Poznámka: Rôzne hodnoty od predvolených majú len:
            //  roj.mierka(500);
            //  roj.nastavKameru(0, 50, 30);
        // Výpočet pomocných parametrov, s pomocou ktorých vložíme
        // niekoľko bodov do roja:
        int n = mená.length; // počet bodov
        double r = 15;       // polomer kružnice, na ktorej budú umestnené
        Δu = 360.0 / n;      // uhol otáčania smerníka (*)
        double d = (2 * Math.PI * r) / n; // dĺžka posunu smerníka (*)
        // (*) Smerník slúži na zjednodušenie vkladania bodov do roja.
        // Vypneme predvolené vkladanie spojov smerníkom:
        roj.smerník.vkladajSpoje = false;
        // Uloženie jedného smeru (vektora osi otáčania) do zásobníka, aby
        // sa dal použiť jednoduchší tvar volania metódy „otoč“ smerníka
        // (je to jednotkový vektor v smere osi z):
        roj.smerník.smerNa(0, 0, 1);
        roj.smerník.zálohujSmer();
        // Počiatočné nastavenie smerníka (smer je súhlasný so smerom
        // osi y a smerník je vysunutý o polomer otáčania v smere osi x):
        roj.smerník.smerNa(0, 1, 0);
        roj.smerník.posuň(-r, 0, 0);
        // Prvé pootočenie smerníka o polovicu uhla (voláme zjednodušený tvar
        // metódy „otoč,“ pretože smer osi otáčania určuje vektor uložený
        // v zásobníku; vyššie):
        roj.smerník.otoč(Δu / 2.0);
            // Inak by bolo treba používať tento tvar volania metódy:
            //  roj.smerník.otoč(0, 0, 1, -Δu / 2.0);
        // Cyklus vkladania bodov:
        for (int i = 0; i &lt; n; ++i)
        {
            // Pred každým vložením bodu potočíme smerník:
            roj.smerník.otoč(-Δu);
                // Alternatívne (bez vektora v zásobníku spomínaného vyššie)
                // by bolo treba použiť tento tvar príkazu:
                //  roj.smerník.otoč(0, 0, 1, Δu);
            // Vložíme bod do roja a posunieme smerník:
            Roj.Bod bod = roj.smerník.pridajBod();
            bod.kreslenie = new Ikonka(mená[i]);
            roj.smerník.posuň(d);
        }
        skry(); // (Skrytie hlavného robota.)
        // Keby bolo predvolene zapnuté zobrazenie ladiacich informácií
        // o roji (čo v tomto príklade nie je), tak by sme tu museli vykonať
        // prvé volanie (inak by boli po štarte skryté a zobrazili by sa až
        // po ľubovoľnej zmene zobrazenia roja): infoORoji();
        // Vypnutie automatického prekresľovania a zapnutie časovača:
        Svet.nekresli();
        Svet.spustiČasovač();
    }
    
    // Pomocné nástroje na definíciu a kreslenie (resp. skrývanie
    // a zobrazovanie) osí.
    // &#123;&#123;&#123;
        // Koncové body osí:
        private Roj.Bod osX = null;
        private Roj.Bod osY = null;
        private Roj.Bod osZ = null;
        // Vlastný tvar na kreslenie šípky na konci osi.
        public KreslenieTvaru šípka = r -&gt;
        {
            r.vpravo(18);
            r.vzad(14);
            r.zdvihniPero();
            r.vpred(14);
            r.vľavo(36);
            r.položPero();
            r.vzad(14);
        };
        // Definovanie alebo úprava dĺžky osi x.
        public void osX(double dĺžka)
        {
            if (null == osX)
            {
                Roj.Bod bod = roj.pridajBod();
                bod.zobraz = bod.spoj = false;
                bod.x0 = -2;
                bod.skupina = 1;
                osX = roj.pridajBod();
                osX.farba = osX.farbaSpoja = červená;
                osX.x0 = dĺžka;
                osX.skupina = 1;
                osX.kreslenie = šípka;
            }
            else osX.x0 = dĺžka;
            prekresliRoj = true;
        }
        // Zobrazenie/skrytie osi x.
        public void osX(boolean zobraz)
        {
            if (null == osX)
            {
                if (zobraz) osX(30);
                else return;
            }
            osX.zobraz = osX.spoj = zobraz;
            prekresliRoj = true;
        }
        // Overenie, či je os x zobrazená.
        public boolean osX()
        {
            if (null == osX) return false;
            return osX.spoj;
        }
        // Definovanie alebo úprava dĺžky osi y.
        public void osY(double dĺžka)
        {
            if (null == osZ)
            {
                Roj.Bod bod = roj.pridajBod();
                bod.zobraz = bod.spoj = false;
                bod.y0 = -2;
                bod.skupina = 2;
                osY = roj.pridajBod();
                osY.farba = osY.farbaSpoja = zelená;
                osY.y0 = dĺžka;
                osY.skupina = 2;
                osY.kreslenie = šípka;
            }
            else osY.y0 = dĺžka;
            prekresliRoj = true;
        }
        // Zobrazenie/skrytie osi y.
        public void osY(boolean zobraz)
        {
            if (null == osY)
            {
                if (zobraz) osY(30);
                else return;
            }
            osY.zobraz = osY.spoj = zobraz;
            prekresliRoj = true;
        }
        // Overenie, či je os y zobrazená.
        public boolean osY()
        {
            if (null == osY) return false;
            return osY.spoj;
        }
        // Definovanie alebo úprava dĺžky osi z.
        public void osZ(double dĺžka)
        {
            if (null == osZ)
            {
                Roj.Bod bod = roj.pridajBod();
                bod.zobraz = bod.spoj = false;
                bod.z0 = -2;
                bod.skupina = 3;
                osZ = roj.pridajBod();
                osZ.farba = osZ.farbaSpoja = modrá;
                osZ.z0 = dĺžka;
                osZ.skupina = 3;
                osZ.kreslenie = šípka;
            }
            else osZ.z0 = dĺžka;
            prekresliRoj = true;
        }
        // Zobrazenie/skrytie osi z.
        public void osZ(boolean zobraz)
        {
            if (null == osZ)
            {
                if (zobraz) osZ(10);
                else return;
            }
            osZ.zobraz = osZ.spoj = zobraz;
            prekresliRoj = true;
        }
        // Overenie, či je os z zobrazená.
        public boolean osZ()
        {
            if (null == osZ) return false;
            return osZ.spoj;
        }
        // Definovanie alebo úprava dĺžky všetkých troch osí naraz.
        public void osi(double dĺžkaX, double dĺžkaY, double dĺžkaZ)
        {
            osX(dĺžkaX);
            osY(dĺžkaY);
            osZ(dĺžkaZ);
        }
        // Zobrazenie/skrytie troch osí naraz.
        public void osi(boolean zobraz)
        {
            osX(zobraz);
            osY(zobraz);
            osZ(zobraz);
        }
        // Zobrazenie (definovanie) všetkých troch osí s predvolenými
        // hodnotami dĺžok.
        public void osi() { osi(30, 30, 10); }
    // &#125;&#125;&#125;
    
    // Hromadné úpravy roja a jeho bodov. (Reset a hromadné transformácie
    // používajúce vnútorné atribúty bodov, ktoré sú rezervované na tieto
    // účely. Niektoré z týchto metód sú určené len pre pomocné režimy
    // ladenia 5 a 6 tejto ukážky.)
    // &#123;&#123;&#123;
        // Táto metóda slúži na rýchle nastavenie predvolených vlastností roja.
        // (Táto metóda je pravdepodobne jediná, ktorej obsahom sa treba
        // zaoberať pri redukcii príkladu – t. j. pri odstraňovaní kreslenia
        // osí a iných ladiacich informácií.)
        public void resetujRoj()
        {
            // Toto sú síce predvolené vlastnosti roja, ale pri každom resete
            // ich potrebujeme vrátiť späť:
            roj.nastavUhly(-110, -360, 45);
            roj.nastavStredOtáčania(0, 0, 0);
            // Nasledujúce dve vlastnosti upravujeme z predvolených hodnôt
            // (ktoré by boli: mierka = 1000; kamera = [0, -125, 200]) na také,
            // aké potrebujeme v našej ukážke:
            roj.mierka(500);
            roj.nastavKameru(0, 50, 30);
            // Nastavenie príznaku potrebnosti prekreslenia roja:
            prekresliRoj = true;
            // Predvolená hodnota želaného uhla:
            želanýUhol = 270.0;
        }
        // Reset vnútorných individuálnych vlastností posunutia (dx až dz)
        // a pootočenia (alfa až gama) jednotlivých bodov roja.
        public void resetujBody()
        {
            for (Roj.Bod bod : roj.body())
                if (1 &gt; bod.skupina || 3 &lt; bod.skupina)
                {
                    bod.dx = bod.dy = bod.dz =
                        // bod.xs = bod.ys = bod.zs =
                        bod.alfa = bod.beta = bod.gama = 0.0;
                    bod.transformuj = true;
                }
            roj.transformovať();
            prekresliRoj = true;
        }
        // Posunutie s pomocou vnútorných vlastností dx až dz bodov roja.
        public void posuňBody(double Δx, double Δy, double Δz)
        {
            for (Roj.Bod bod : roj.body())
                if (1 &gt; bod.skupina || 3 &lt; bod.skupina)
                {
                    bod.dx += Δx;
                    bod.dy += Δy;
                    bod.dz += Δz;
                    bod.transformuj = true;
                }
            roj.transformovať();
            prekresliRoj = true;
        }
        // Pootočenie s pomocou vnútorných vlastností alfa až gama bodov roja.
        public void pootočBody(double Δα, double Δβ, double Δγ)
        {
            for (Roj.Bod bod : roj.body())
                if (1 &gt; bod.skupina || 3 &lt; bod.skupina)
                {
                    bod.alfa += Δα;
                    bod.beta += Δβ;
                    bod.gama += Δγ;
                    bod.transformuj = true;
                }
            roj.transformovať();
            prekresliRoj = true;
        }
    // &#125;&#125;&#125;
    
    // Ovládanie – režim ladenia.
    // &#123;&#123;&#123;
        // Atribúty súvisiace s režimom ladenia.
        private int režim = 3;
        private static boolean infoORoji = false;
        private double myšX = 0;
        private double myšY = 0;
        // Výpis ladiacich informácií.
        public void infoORoji()
        {
            Svet.vymažTexty();
            if (0 != režim && infoORoji)
            {
                Svet.vypíšRiadok("K[x, y, z]: ", F(roj.kameraX(), 2), "; ",
                    F(roj.kameraY(), 2), "; ", F(roj.kameraZ(), 2));
                Svet.vypíšRiadok("SO[x, y, z]: ", F(roj.stredOtáčaniaX(), 2),
                    "; ", F(roj.stredOtáčaniaY(), 2), "; ",
                    F(roj.stredOtáčaniaZ(), 2));
                Svet.vypíšRiadok("α, β, γ: ", F(roj.uholAlfa(), 2) + "°; ",
                    F(roj.uholBeta(), 2) + "°; ", F(roj.uholGama(), 2) + "°");
                Svet.vypíšRiadok("M: ", F(roj.mierka(), 2));
                Svet.vypíš("Režim myši: ");
                switch (režim)
                {
                case 1: Svet.vypíšRiadok("kamera"); break;
                case 2: Svet.vypíšRiadok("stred otáčania"); break;
                case 3: Svet.vypíšRiadok("uhly rotácie"); break;
                case 4: Svet.vypíšRiadok("mierka"); break;
                case 5: Svet.vypíšRiadok("posunutie bodov"); break;
                case 6: Svet.vypíšRiadok("pootočenie bodov"); break;
                }
                Svet.vypíšRiadok(riadok, "Želaný uhol: ", želanýUhol);
                Svet.vypíšRiadok("Uhol pootočenia: ", Δu);
                int položka = čísloPoložky();
                if (položka &lt; 0 || položka &gt;= mená.length)
                    Svet.vypíšRiadok("Neznáme číslo položky: ", položka);
                else
                    Svet.vypíšRiadok("Zvolená položka ", položka,
                        ": ", mená[položka]);
            }
        }
        // Rozšírenie ovládania klávesnicou pre režim ladenia.
        public void priUvoľneníKlávesu()
        {
            switch (ÚdajeUdalostí.kláves())
            {
            case Kláves.VK_0: režim = 0; break;
            case Kláves.VK_1: režim = 1; break;
            case Kláves.VK_2: režim = 2; break;
            case Kláves.VK_3: režim = 3; break;
            case Kláves.VK_4: režim = 4; break;
            case Kláves.VK_5: režim = 5; break;
            case Kláves.VK_6: režim = 6; break;
            case Kláves.VK_I: infoORoji = !infoORoji; break;
            case Kláves.VK_O: Ikonka.info = !Ikonka.info;
                prekresliRoj = true; break;
            case Kláves.VK_S: osi(!osX()); break;
            case Kláves.MEDZERA: resetujRoj(); resetujBody(); break;
            }
            infoORoji();
        }
        // Ovládanie myšou v režime ladenia – akcia vykonaná pri stlačení
        // ľubovoľného tlačidla myši.
        @Override public void stlačenieTlačidlaMyši()
        {
            // if (tlačidloMyši(ĽAVÉ)) {} else {}
            myšX = ÚdajeUdalostí.polohaMyšiX();
            myšY = ÚdajeUdalostí.polohaMyšiY();
        }
        // Ovládanie myšou v režime ladenia – akcia vykonaná pri ťahaní
        // myšou (t. j. pohybe myšou počas držania ľubovoľného tlačidla).
        @Override public void ťahanieMyšou()
        {
            // (Rozlišuje sa akcia stlačenia ľavého a „iného“ tlačidla…)
            if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
            {
                switch (režim)
                {
                case 1:
                    roj.posuňKameru(
                        ÚdajeUdalostí.polohaMyšiX() &#45; myšX,
                        ÚdajeUdalostí.polohaMyšiY() &#45; myšY, 0.0);
                    break;
                case 2:
                    roj.posuňStredOtáčania(
                        ÚdajeUdalostí.polohaMyšiX() &#45; myšX,
                        ÚdajeUdalostí.polohaMyšiY() &#45; myšY, 0.0);
                    break;
                case 3:
                    if (ÚdajeUdalostí.myš().isControlDown())
                    {
                        if (ÚdajeUdalostí.myš().isShiftDown())
                            roj.pootoč(0.0, (
                                ÚdajeUdalostí.polohaMyšiX() &#45; myšX +
                                ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0,
                                0.0);
                        else
                            roj.pootoč((
                                ÚdajeUdalostí.polohaMyšiX() &#45; myšX +
                                ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0,
                                0.0, 0.0);
                    }
                    else
                        roj.pootoč(
                            (ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0,
                            (ÚdajeUdalostí.polohaMyšiX() &#45; myšX) / 10.0, 0.0);
                    break;
                case 4:
                    roj.zmeňMierku(
                        (myšX &#45; ÚdajeUdalostí.polohaMyšiX()) / 10.0 +
                        (myšY &#45; ÚdajeUdalostí.polohaMyšiY()) / 1.0);
                    break;
                case 5:
                    posuňBody(
                        (ÚdajeUdalostí.polohaMyšiX() &#45; myšX) / 10.0,
                        (myšY &#45; ÚdajeUdalostí.polohaMyšiY()) / 10.0, 0);
                    break;
                case 6:
                    pootočBody(
                        (ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0,
                        (ÚdajeUdalostí.polohaMyšiX() &#45; myšX) / 10.0, 0);
                    break;
                }
            }
            else
            {
                switch (režim)
                {
                case 1:
                    roj.posuňKameru(0.0, 0.0,
                        ((myšX &#45; ÚdajeUdalostí.polohaMyšiX()) / 100.0) +
                        ((myšY &#45; ÚdajeUdalostí.polohaMyšiY()) / 10.0));
                    break;
                case 2:
                    roj.posuňStredOtáčania(0.0, 0.0,
                        myšY &#45; ÚdajeUdalostí.polohaMyšiY());
                    break;
                case 3:
                    roj.pootoč(0.0, 0.0, (
                        ÚdajeUdalostí.polohaMyšiX() &#45; myšX +
                        ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0);
                    break;
                case 4:
                    roj.zmeňMierku(
                        (myšX &#45; ÚdajeUdalostí.polohaMyšiX()) / 1000.0 +
                        (myšY &#45; ÚdajeUdalostí.polohaMyšiY()) / 100.0);
                    break;
                case 5:
                    posuňBody(0, 0,
                        (ÚdajeUdalostí.polohaMyšiX() &#45; myšX) / 100.0 +
                        (ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0);
                    break;
                case 6:
                    pootočBody(0, 0,(
                        ÚdajeUdalostí.polohaMyšiX() &#45; myšX +
                        ÚdajeUdalostí.polohaMyšiY() &#45; myšY) / 10.0);
                    break;
                }
            }
            myšX = ÚdajeUdalostí.polohaMyšiX();
            myšY = ÚdajeUdalostí.polohaMyšiY();
            prekresliRoj = true;
            infoORoji();
            Svet.prekresli();
        }
        // Kreslenie vlastného tvaru robota (ktoré by bolo predvoleným tvarom
        // tých bodov roja, ktoré by nemali definovaný žiadny vlastný tvar).
        // V tomto príklade je to zariadené tak, že volanie tejto metódy by
        // nemalo nikdy nastať. Je definovaná v podstate len „pre istotu.“
        @Override public void kresliTvar()
        {
            krúžok();
        }
        
        // V tomto komentári sa nachádza krátka sekcia vytvorená na ladiace
        // účely, ktorá pri pohybe kurzorom myši (výhradne pri pohybe kurzorom
        // myši) overí prítomnosť kurzora nad niektorým bodom roja a v prípade
        // nájdenia takéhoto bodu nad ním nachvíľu zobrazí červenú kružnicu
        // (realizovanú prostredníctvom jednoúčelového robota uloženého
        // v inštancii zvýrazniť).
        // 
        // private GRobot zvýrazniť = null;
        // @Override public void pohybMyši()
        // &#123;
        //     Roj.Bod bod = null == roj ? null : roj.dajBodNaMyši();
        //     if (null == bod)
        //     &#123;
        //         if (null != zvýrazniť) zvýrazniť.skry();
        //     &#125;
        //     else
        //     &#123;
        //         if (null == zvýrazniť)
        //         &#123;
        //             zvýrazniť = new GRobot()
        //             &#123;
        //                 @Override public void deaktivácia() &#123; skry(); &#125;
        //                 @Override public void aktivácia() &#123; zobraz(); &#125;
        //             &#125;;
        // 
        //             zvýrazniť.vlastnýTvar(r -&gt; r.krúžok());
        //             zvýrazniť.farba(červená);
        //             zvýrazniť.hrúbkaČiary(3);
        //             zvýrazniť.vrstva(1);
        //         &#125;
        // 
        //         zvýrazniť.skočNa(bod.x3, bod.y3);
        //         zvýrazniť.veľkosť(bod.z3);
        //         zvýrazniť.aktivuj(10);
        //     &#125;
        // &#125;
    // &#125;&#125;&#125;
    
    // Pomocná metóda zisťujúca, ktorá ikonka je v popredí (podľa želaného
    // uhla pootočenia roja podľa osi z, ktorý je uložený v prislúchajúcom
    // atribúte tejto triedy).
    private int čísloPoložky()
    {
        double uhol = (želanýUhol + 90 + Δu / 2) % 360.0;
        if (uhol &lt; 0) uhol += 360.0;
        return (int)(uhol / Δu);
    }
    // Pomocná metóda určená na rozšírenie a na vykonanie prislúchajúcej
    // akcie podľa „aktuálneho“ čísla položky (zisteného metódou vyššie).
    private void potvrdeniePoložky()
    {
        int položka = čísloPoložky();
        if (položka &lt; 0 || položka &gt;= mená.length)
            Svet.chyba("Neznáme číslo položky: " + položka);
        else
            Svet.správa("Zvolená položka " + položka + ": " + mená[položka]);
    }
    // Ovládanie kolotoča klávesnicou.
    @Override public void uvoľnenieKlávesu()
    {
        switch (ÚdajeUdalostí.kláves())
        {
        case Kláves.VPRAVO: želanýUhol += Δu; break;
        case Kláves.VĽAVO:  želanýUhol -= Δu; break;
        case Kláves.ENTER:  potvrdeniePoložky(); break;
        default: priUvoľneníKlávesu();
        }
    }
    // Alternatívny spôsob aktivovania položky – klikom myši.
    @Override public void klik()
    {
        // Prevzatie bodu na myši.
        Roj.Bod bod = null == roj ? null : roj.dajBodNaMyši();
        if (null != bod && null != bod.kreslenie &&
            bod.kreslenie instanceof Ikonka)
        {
            // Získanie „mena“ bodu (resp. názvu SVG súboru).
            String meno = ((Ikonka)bod.kreslenie).meno;
            // Zistenie indexu položky kolotoča podľa jej „mena.“
            int indexOf = -1;
            for (int i = 0; i &lt; mená.length; ++i)
                if (mená[i].equals(meno))
                {
                    indexOf = i;
                    break;
                }
            if (-1 != indexOf)
            {
                // „Aktivácia“ položky rolovaním na ňu.
                if (ÚdajeUdalostí.polohaMyšiX() &gt;= 0)
                    for (int i = 0; čísloPoložky() != indexOf &&
                        i &lt; mená.length; ++i) želanýUhol += Δu;
                else
                    for (int i = 0; čísloPoložky() != indexOf &&
                        i &lt; mená.length; ++i) želanýUhol -= Δu;
                // Potvrdenie položky (rovnakým spôsobom ako pri klávesnici).
                if (čísloPoložky() == indexOf) potvrdeniePoložky();
            }
        }
    }
    // Animácia kolotoča v časovači.
    @Override public void tik()
    {
        double Δγ = želanýUhol &#45; roj.uholGama();
        if (Math.abs(Δγ) &gt;= 1.0)
        {
            roj.pootoč(0.0, 0.0, Δγ / 10.0);
            prekresliRoj = true;
            infoORoji();
        }
        if (prekresliRoj)
        {
            prekresliRoj = false;
            Svet.vymažGrafiku();
            roj.kresli();
        }
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    
    // Hlavná metóda.
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("Kolotoč.cfg");
        new Kolotoč();
    }
}
 
 Balíček SVG ikoniek na prevzatie: 
kolotoc-ikonky.7z
 
 Výsledok:
 
  Ukážka
 fungovania kolotoča so zapnutými ladiacimi informáciami a pootočením
 roviny otáčania.
 
  
 
 Informačné zdroje, ktoré môžu pomôcť pri riešení matematických
 problémov súvisiacich s touto kapitolou (triedou):
 
 Poznámka: Zdroje môžu obsahovať chyby (v čase
 ich citovania ich obsahovali), preto je vhodné informácie z nich
 konfrontovať s inou (napríklad tlačenou) literatúrou. Autor pri tvorbe
 tejto triedy použil uvedené zdroje najmä na pripomenutie si informácií
 o 3D grafike a súvisiacich operáciách s maticami (ktoré naposledy
 používal asi 12 až 15 rokov pred začatím písania tejto triedy).
 
 
 Liekens, Anthony: Computers » Rendering
 Tutorial. anthony.liekens.net, 2000–2013. Dostupné na:
 
http://anthony.liekens.net/index.php/Computers/RenderingTutorial.
 Citované: 15. 10. 2017.
 Matrix multiplication – Wikipedia. Dostupné na:
 
https://en.wikipedia.org/wiki/Matrix_multiplication.
 Citované: 15. 10. 2017.
 Rotation matrix – Wikipedia. Dostupné na:
 
https://en.wikipedia.org/wiki/Rotation_matrix.
 Citované: 15. 10. 2017.
 
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
class 
Roj.Bod
Trieda uchovávajúca údaje o jednom bode roja.
class 
Roj.Smernik
 Alias pre Smerník.
class 
Roj.Smerník
Pomocná trieda na riadené vkladanie bodov do roja.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
ALFA
Konštanta slúžiaca na určenie čítania uhla alfa metódou
 uhol(ktorý) alebo nastavenia uhla alfa metódou
 uhol(ktorý, hodnota).
static int
BETA
Konštanta slúžiaca na určenie čítania uhla beta metódou
 uhol(ktorý) alebo nastavenia uhla beta metódou
 uhol(ktorý, hodnota).
Roj.Bod
bod
Inštancia aktuálne spracúvaného bodu.
static int
GAMA
Konštanta slúžiaca na určenie čítania uhla gama metódou
 uhol(ktorý) alebo nastavenia uhla gama metódou
 uhol(ktorý, hodnota).
GRobot
kresli
Toto je kresliaci robot roja.
Roj.Smernik
smernik
 Alias pre smerník.
Roj.Smernik
smerník
Inštancia smerníka.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Roj(GRobot kreslič)
Konštruktor roja.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Zoznam&lt;Roj.Bod&gt;
body()
Vráti kópiu aktuálneho zoznamu bodov roja.
void
citajZoSuboru(Súbor súbor,
             String identifikátor)
 Alias pre čítajZoSúboru.
void
čítajZoSúboru(Súbor súbor,
             String identifikátor)
Prečíta údaje o roji z konfiguračného súboru otvoreného na čítanie.
Roj.Bod
dajBodNa(double súradnicaX,
        double súradnicaY)
Zistí, či sa projekcia niektorého bodu roja nachádza na zadaných
 súradniciach.
Roj.Bod
dajBodNa(double súradnicaX,
        double súradnicaY,
        double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na zadaných
 súradniciach.
Roj.Bod
dajBodNa(Poloha objekt)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach zadaného objektu.
Roj.Bod
dajBodNa(Poloha objekt,
        double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach zadaného objektu.
Roj.Bod
dajBodNaMysi()
 Alias pre dajBodNaMyši.
Roj.Bod
dajBodNaMysi(double polomer)
 Alias pre dajBodNaMyši.
Roj.Bod
dajBodNaMyši()
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach myši.
Roj.Bod
dajBodNaMyši(double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach myši.
double[]
kamera()
Vráti aktuálnu polohu kamery vo forme trojprvkového poľa [kx, ky, kz].
double
kameraX()
Vráti aktuálnu x-ovú súradnicu polohy kamery.
void
kameraX(double hodnota)
Nastaví novú x-ovú súradnicu polohy kamery.
double
kameraY()
Vráti aktuálnu y-ovú súradnicu polohy kamery.
void
kameraY(double hodnota)
Nastaví novú y-ovú súradnicu polohy kamery.
double
kameraZ()
Vráti aktuálnu z-ovú súradnicu polohy kamery.
void
kameraZ(double hodnota)
Nastaví novú z-ovú súradnicu polohy kamery.
void
kresli()
Prekreslí roj s použitím kresliaceho robota
 roja.
double
mierka()
Vráti aktuálnu hodnotu mierky roja.
void
mierka(double hodnota)
Nastaví novú hodnotu mierky roja.
void
nastavKameru(double[] bod)
Nastaví polohu kamery roja na základe hodnôt zadaného poľa.
void
nastavKameru(double nkx,
            double nky,
            double nkz)
Nastaví novú polohu kamery.
void
nastavStredOtacania(double[] bod)
 Alias pre nastavStredOtáčania.
void
nastavStredOtacania(double nxs,
                   double nys,
                   double nzs)
 Alias pre nastavStredOtáčania.
void
nastavStredOtáčania(double[] bod)
Nastaví stred otáčania roja na základe hodnôt zadaného poľa.
void
nastavStredOtáčania(double nxs,
                   double nys,
                   double nzs)
Nastaví nové súradnice stredu otáčania.
void
nastavUhly(double[] pole)
Nastaví hodnoty uhlov roja na základe hodnôt zadaného poľa.
void
nastavUhly(double nα,
          double nβ,
          double nγ)
Nastaví hodnoty všetkých troch uhlov alfa,
 beta a gama.
static double[]
normala(double x1,
       double y1,
       double z1,
       double x2,
       double y2,
       double z2,
       double x3,
       double y3,
       double z3)
 Alias pre normála.
static double[]
normála(double x1,
       double y1,
       double z1,
       double x2,
       double y2,
       double z2,
       double x3,
       double y3,
       double z3)
Vypočíta zo zadaných súradníc troch bodov určujúcich plochu
 v priestore súradnice normálového vektora k tejto ploche a vráti
 jeho nenormalizované súradnice.
static double[]
normalizuj(double[] vektor)
Normalizuje vektor zadaných súradníc.
void
pootoc(double[] pole)
 Alias pre pootoč.
void
pootoc(double Δα,
      double Δβ,
      double Δγ)
 Alias pre pootoč.
void
pootoč(double[] pole)
Pozmení hodnoty uhlov roja na základe hodnôt zadaného poľa.
void
pootoč(double Δα,
      double Δβ,
      double Δγ)
Pozmení hodnoty všetkých troch uhlov alfa,
 beta a gama.
Zoznam&lt;Roj.Bod&gt;
poradieKreslenia()
Vráti kópiu aktuálneho zoznamu bodov roja zoradeného podľa
 poradia kreslenia.
void
posunKameru(double[] bod)
 Alias pre posuňKameru.
void
posuňKameru(double[] bod)
Posunie polohu kamery roja na základe hodnôt zadaného poľa.
void
posunKameru(double Δkx,
           double Δky,
           double Δkz)
 Alias pre posuňKameru.
void
posuňKameru(double Δkx,
           double Δky,
           double Δkz)
Posunie polohu kamery.
void
posunStredOtacania(double[] bod)
 Alias pre posuňStredOtáčania.
void
posunStredOtacania(double Δxs,
                  double Δys,
                  double Δzs)
 Alias pre posuňStredOtáčania.
void
posuňStredOtáčania(double[] bod)
Posunie stred otáčania roja na základe hodnôt zadaného poľa.
void
posuňStredOtáčania(double Δxs,
                  double Δys,
                  double Δzs)
Posunie súradnice stredu otáčania.
void
precitajZoSuboru(Súbor súbor,
                String identifikátor)
 Alias pre čítajZoSúboru.
void
prečítajZoSúboru(Súbor súbor,
                String identifikátor)
 Alias pre čítajZoSúboru.
void
prepocitaj()
 Alias pre prepočítaj.
void
prepocitat()
 Alias pre prepočítať.
void
prepočítaj()
Táto metóda prepočíta pre všetky body roja atribúty cieľovej
 (premietanej) polohy na plátne a veľkosti objektu kresleného na
 polohe bodu – hodnoty atribútov x3,
 y3 a z3.
void
prepočítať()
Táto metóda vynúti prepočet premietaných súradníc (x3, y3) a veľkostí kreslených objektov
 (z3) všetkých bodov roja pri najbližšom kreslení
 alebo pri volaní metódy prepočítaj.
Roj.Bod
pridajBod()
Pridá nový bod do roja.
void
pridajDoSVG(SVGPodpora svgPodpora)
Táto metóda slúži na export grafiky roja do zadanej inštancie
 SVG podpory.
double[]
stredOtacania()
 Alias pre stredOtáčania.
double
stredOtacaniaX()
 Alias pre stredOtáčaniaX.
void
stredOtacaniaX(double hodnota)
 Alias pre stredOtáčaniaX.
double
stredOtacaniaY()
 Alias pre stredOtáčaniaY.
void
stredOtacaniaY(double hodnota)
 Alias pre stredOtáčaniaY.
double
stredOtacaniaZ()
 Alias pre stredOtáčaniaZ.
void
stredOtacaniaZ(double hodnota)
 Alias pre stredOtáčaniaZ.
double[]
stredOtáčania()
Vráti aktuálny stred otáčania vo forme trojprvkového poľa [xs, ys, zs].
double
stredOtáčaniaX()
Vráti x-ovú súradnicu stredu otáčania.
void
stredOtáčaniaX(double hodnota)
Nastaví novú hodnotu x-ovej súradnice stredu otáčania.
double
stredOtáčaniaY()
Vráti y-ovú súradnicu stredu otáčania.
void
stredOtáčaniaY(double hodnota)
Nastaví novú hodnotu y-ovej súradnice stredu otáčania.
double
stredOtáčaniaZ()
Vráti z-ovú súradnicu stredu otáčania.
void
stredOtáčaniaZ(double hodnota)
Nastaví novú hodnotu z-ovej súradnice stredu otáčania.
void
transformovat()
 Alias pre transformovať.
void
transformovať()
Táto metóda vynúti prepočet konečných (globálne transformovaných)
 súradníc x2, y2, z2 všetkých bodov roja pri
 najbližšom kreslení alebo pri volaní metódy transformuj.
void
transformuj()
Táto metóda prepočíta hodnoty konečných (globálne transformovaných)
 súradníc x2, y2, z2 všetkých bodov roja.
void
transformuj(Roj.Bod bod)
Toto je metóda, ktorá prepočíta hodnoty konečných (globálne
 transformovaných) súradníc x2, y2, z2 zadaného bodu roja.
double[]
uhly()
Vráti aktuálne hodnoty uhlov alfa (α), beta (β) a gama (γ) roja
 vo forme trojprvkového poľa [α, β, γ].
static double[]
uhlyK(double[] vektor)
Vráti uhly potrebné na pootočenie jednotkového vektora paralelného
 s osou z okolo osí x (prvý prvok poľa v návratovej hodnote označovaný
 v tejto dokomentácii aj ako uhol α) a y (druhý prvok poľa v návratovej
 hodnote označovaný v tejto dokomentácii aj ako uhol β) tak, aby
 výsledný vektor smeroval k zadanému polohovému vektoru.
static double[]
uhlyK(double x,
     double y,
     double z)
Vráti uhly potrebné na pootočenie jednotkového vektora paralelného
 s osou z okolo osí x (prvý prvok poľa v návratovej hodnote označovaný
 v tejto dokomentácii aj ako uhol α) a y (druhý prvok poľa v návratovej
 hodnote označovaný v tejto dokomentácii aj ako uhol β) tak, aby
 výsledný vektor smeroval k zadanému polohovému vektoru.
double
uhol(int ktorý)
Vráti hodnotu zadaného uhla, pričom ak zadaná konštanta obsahuje
 kombináciu príznakov viacerých uhlov, tak prioritne vracia uhol
 ALFA, potom BETA a nakoniec
 GAMA.
void
uhol(int ktorý,
    double hodnota)
Nastaví jeden alebo viacero uhlov na stanovenú hodnotu.
double
uholAlfa()
Vráti aktuálnu hodnotu uhla alfa (vnútorne značeného
 α).
void
uholAlfa(double hodnota)
Nastaví novú hodnotu uhlu alfa (vnútorne značeného α).
double
uholBeta()
Vráti aktuálnu hodnotu uhla beta (vnútorne značeného
 β).
void
uholBeta(double hodnota)
Nastaví novú hodnotu uhlu beta (vnútorne značeného β).
double
uholGama()
Vráti aktuálnu hodnotu uhla gama (vnútorne značeného
 γ).
void
uholGama(double hodnota)
Nastaví novú hodnotu uhlu gama (vnútorne značeného γ).
void
ulozDoSuboru(Súbor súbor,
            String identifikátor)
 Alias pre uložDoSúboru.
void
uložDoSúboru(Súbor súbor,
            String identifikátor)
Zapíše údaje o roji do konfiguračného súboru otvoreného na zápis.
void
vymaz()
 Alias pre vymaž.
void
vymazBod(Roj.Bod bod)
 Alias pre vymažBod.
void
vymaž()
Odstráni všetky body z roja.
void
vymažBod(Roj.Bod bod)
Odstráni bod z roja.
void
zmenMierku(double Δmierka)
 Alias pre zmeňMierku.
void
zmeňMierku(double Δmierka)
Upraví hodnotu mierky roja.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
smerník
public final Roj.Smernik smerník
Inštancia smerníka. Podrobnosti v dokumentácii triedy
 Smerník.
smernik
public final Roj.Smernik smernik
 Alias pre smerník.
ALFA
public static final int ALFA
Konštanta slúžiaca na určenie čítania uhla alfa metódou
 uhol(ktorý) alebo nastavenia uhla alfa metódou
 uhol(ktorý, hodnota).
Pozri tiež:
Hodnoty konštánt
BETA
public static final int BETA
Konštanta slúžiaca na určenie čítania uhla beta metódou
 uhol(ktorý) alebo nastavenia uhla beta metódou
 uhol(ktorý, hodnota).
Pozri tiež:
Hodnoty konštánt
GAMA
public static final int GAMA
Konštanta slúžiaca na určenie čítania uhla gama metódou
 uhol(ktorý) alebo nastavenia uhla gama metódou
 uhol(ktorý, hodnota).
Pozri tiež:
Hodnoty konštánt
kresli
public GRobot kresli
Toto je kresliaci robot roja. Ak nie je nastavený, tak roj nemôže
 byť kreslený a pri individuálnom pokuse o nakreslenie bodu roja nastane
 chyba. Tvar tohto robota určuje predvolený tvar objektov na polohách
 bodov roja. Vlastnosti pera ovplyvňujú kreslenie spojov medzi bodmi
 roja – hrúbka určuje predvolenú hrúbku a poloha (poloha v zmysle stavu
 zdvihnutia/ploženia pera) to, či budú všetky spoje paušálne nakreslené
 alebo nie.
bod
public Roj.Bod bod
Inštancia aktuálne spracúvaného bodu. Počas kreslenia spojníc
 a objektov alebo počas exportu do SVG formátu je do tohto atribútu
 ukladaná inštancia aktuálne spracúvaného bodu.
Podrobnosti konštruktorov
Roj
public Roj(GRobot kreslič)
Konštruktor roja. Prijíma inštanciu grafického robota, ktorý bude
 kresličom roja. Bez kresliča roj nemôže byť nakreslený.
Parametre:
kreslič – kreslič roja
Podrobnosti metód
pridajBod
public Roj.Bod pridajBod()
Pridá nový bod do roja. Bod bude mať hodnoty všetkých atribútov
 nastavené na predvolené. Návratová hodnota tejto metódy je inštancia
 nového bodu, ktorá môže byť použitá na nastavenie všetkých vlastností
 bodu.
vymažBod
public void vymažBod(Roj.Bod bod)
Odstráni bod z roja.
Parametre:
bod – inštancia bodu, ktorý má byť z roja odstránený
vymazBod
public void vymazBod(Roj.Bod bod)
 Alias pre vymažBod.
vymaž
public void vymaž()
Odstráni všetky body z roja.
vymaz
public void vymaz()
 Alias pre vymaž.
body
public Zoznam&lt;Roj.Bod&gt; body()
Vráti kópiu aktuálneho zoznamu bodov roja. Zoznam je určený
 (predovšetkým) na prechádzanie a úpravu vlastností jednotlivých
 bodov. Vymazaním bodu z tohto zoznamu sa bod z roja nevymaže. Na
 vymazanie bodu slúži metóda roja vymažBod.
poradieKreslenia
public Zoznam&lt;Roj.Bod&gt; poradieKreslenia()
Vráti kópiu aktuálneho zoznamu bodov roja zoradeného podľa
 poradia kreslenia. Zoznam je určený (predovšetkým) na prechádzanie
 v súvislosti s prekresľovaním objektov. (Napríklad vymazaním bodu
 z tohto zoznamu sa bod nevymaže. Na vymazanie bodu z roja slúži
 metóda vymažBod.)
uhly
public double[] uhly()
Vráti aktuálne hodnoty uhlov alfa (α), beta (β) a gama (γ) roja
 vo forme trojprvkového poľa [α, β, γ].
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Návratová hodnota:
aktuálne hodnoty uhlov roja v trojprvkovom poli
Pozri tiež:
nastavUhly(double[])
uholAlfa
public double uholAlfa()
Vráti aktuálnu hodnotu uhla alfa (vnútorne značeného
 α). Tento uhol je spätý s rotáciou okolo osi x, pričom
 sa do úvahy berie aj aktuálny stred otáčania.
 Rotácia zmenou uhlov alfa (α), beta (β) a gama (γ) je v podstate
 rotáciou kamery roja.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Návratová hodnota:
aktuálna hodnota uhla alfa
Pozri tiež:
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uholBeta
public double uholBeta()
Vráti aktuálnu hodnotu uhla beta (vnútorne značeného
 β). Tento uhol je spätý s rotáciou okolo osi y, pričom
 sa do úvahy berie aj aktuálny stred otáčania.
 Rotácia zmenou uhlov alfa (α), beta (β) a gama (γ) je v podstate
 rotáciou kamery roja.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Návratová hodnota:
aktuálna hodnota uhla beta
Pozri tiež:
uholAlfa(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uholGama
public double uholGama()
Vráti aktuálnu hodnotu uhla gama (vnútorne značeného
 γ). Tento uhol je spätý s rotáciou okolo osi z, pričom
 sa do úvahy berie aj aktuálny stred otáčania.
 Rotácia zmenou uhlov alfa (α), beta (β) a gama (γ) je v podstate
 rotáciou kamery roja.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Návratová hodnota:
aktuálna hodnota uhla gama
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uholAlfa
public void uholAlfa(double hodnota)
Nastaví novú hodnotu uhlu alfa (vnútorne značeného α).
 Pozri aj opis metódy uholAlfa().
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
hodnota – nová hodnota uhla alfa
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uholBeta
public void uholBeta(double hodnota)
Nastaví novú hodnotu uhlu beta (vnútorne značeného β).
 Pozri aj opis metódy uholBeta().
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
hodnota – nová hodnota uhla beta
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uholGama
public void uholGama(double hodnota)
Nastaví novú hodnotu uhlu gama (vnútorne značeného γ).
 Pozri aj opis metódy uholGama().
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
hodnota – nová hodnota uhla gama
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uhol
public double uhol(int ktorý)
Vráti hodnotu zadaného uhla, pričom ak zadaná konštanta obsahuje
 kombináciu príznakov viacerých uhlov, tak prioritne vracia uhol
 ALFA, potom BETA a nakoniec
 GAMA.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
ktorý – konštanta určujúca, ktorý uhol má byť vrátený
     (ALFA, BETA, GAMA)
Návratová hodnota:
hodnota uhla určeného parametrom ktorý
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int, double), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
uhol
public void uhol(int ktorý,
                 double hodnota)
Nastaví jeden alebo viacero uhlov na stanovenú hodnotu.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
ktorý – konštanta určujúca, ktorý uhol alebo uhly majú byť
     nastavené; parameter môže byť kombináciou konštánt ALFA, BETA a GAMA)
hodnota – nová hodnota uhla alebo uhlov určených parametrom
     ktorý
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
nastavUhly(double, double, double), 
pootoč(double, double, double)
nastavUhly
public void nastavUhly(double nα,
                       double nβ,
                       double nγ)
Nastaví hodnoty všetkých troch uhlov alfa,
 beta a gama. (Pozri
 aj stred
 otáčania.)
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
nα – nová hodnota uhla alfa
nβ – nová hodnota uhla beta
nγ – nová hodnota uhla gama
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
pootoč(double, double, double)
nastavUhly
public void nastavUhly(double[] pole)
Nastaví hodnoty uhlov roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť nastavenie orientácie roja (napríklad
 v súvislosti zo zálohou a obnovou stavu roja; pozri aj uhly). Ak je zadané pole aspoň šesťprvkové,
 tak metóda pracuje s druhou trojicou prvkov poľa. Ak je pole
 aspoň trojprvkové, tak metóda berie do úvahy jeho prvé tri
 prvky. (Ak má pole menší počet prvkov, tak metóda nevykoná
 nič.)
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
pole – pole na základe ktorého budú nastavené uhly roja
Pozri tiež:
uhly(), 
nastavUhly(double, double, double)
pootoč
public void pootoč(double Δα,
                   double Δβ,
                   double Δγ)
Pozmení hodnoty všetkých troch uhlov alfa,
 beta a gama.
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
Δα – miera zmeny hodnoty uhla alfa
Δβ – miera zmeny hodnoty uhla beta
Δγ – miera zmeny hodnoty uhla gama
Pozri tiež:
uholAlfa(), 
uholBeta(), 
uholGama(), 
uholAlfa(double), 
uholBeta(double), 
uholGama(double), 
uhol(int), 
uhol(int, double), 
nastavUhly(double, double, double)
pootoc
public void pootoc(double Δα,
                   double Δβ,
                   double Δγ)
 Alias pre pootoč.
pootoč
public void pootoč(double[] pole)
Pozmení hodnoty uhlov roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť zmenu orientácie roja. Ak je zadané pole
 aspoň šesťprvkové, tak metóda pracuje s druhou trojicou prvkov
 poľa. Ak je pole aspoň trojprvkové, tak metóda berie do úvahy
 jeho prvé tri prvky. (Ak má pole menší počet prvkov, tak metóda
 nevykoná nič.)
 
 Poznámka: Transformácia pootočenia je
 zložená z troch samostatných transformácií rotácie okolo
 jednotlivých osí súradnicovej sústavy. Skladanie transformácií
 nie je komutatívne, takže výsledok rotácie nie je intuitívny
 a môže sa líšiť od (intuitívne) predpokladaného stavu.
Parametre:
pole – pole na základe ktorého budú pozmenené uhly roja
Pozri tiež:
nastavUhly(double[]), 
pootoč(double, double, double)
pootoc
public void pootoc(double[] pole)
 Alias pre pootoč.
stredOtáčania
public double[] stredOtáčania()
Vráti aktuálny stred otáčania vo forme trojprvkového poľa [xs, ys, zs].
Návratová hodnota:
aktuálny stred otáčania
Pozri tiež:
nastavStredOtáčania(double[])
stredOtacania
public double[] stredOtacania()
 Alias pre stredOtáčania.
stredOtáčaniaX
public double stredOtáčaniaX()
Vráti x-ovú súradnicu stredu otáčania.
Návratová hodnota:
aktuálna hodnota x-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaX
public double stredOtacaniaX()
 Alias pre stredOtáčaniaX.
stredOtáčaniaY
public double stredOtáčaniaY()
Vráti y-ovú súradnicu stredu otáčania.
Návratová hodnota:
aktuálna hodnota y-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaY
public double stredOtacaniaY()
 Alias pre stredOtáčaniaY.
stredOtáčaniaZ
public double stredOtáčaniaZ()
Vráti z-ovú súradnicu stredu otáčania.
Návratová hodnota:
aktuálna hodnota z-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaZ
public double stredOtacaniaZ()
 Alias pre stredOtáčaniaZ.
stredOtáčaniaX
public void stredOtáčaniaX(double hodnota)
Nastaví novú hodnotu x-ovej súradnice stredu otáčania.
Parametre:
hodnota – nová hodnota x-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaX
public void stredOtacaniaX(double hodnota)
 Alias pre stredOtáčaniaX.
stredOtáčaniaY
public void stredOtáčaniaY(double hodnota)
Nastaví novú hodnotu y-ovej súradnice stredu otáčania.
Parametre:
hodnota – nová hodnota y-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaY
public void stredOtacaniaY(double hodnota)
 Alias pre stredOtáčaniaY.
stredOtáčaniaZ
public void stredOtáčaniaZ(double hodnota)
Nastaví novú hodnotu z-ovej súradnice stredu otáčania.
Parametre:
hodnota – nová hodnota z-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
nastavStredOtáčania(double, double, double), 
posuňStredOtáčania(double, double, double)
stredOtacaniaZ
public void stredOtacaniaZ(double hodnota)
 Alias pre stredOtáčaniaZ.
nastavStredOtáčania
public void nastavStredOtáčania(double nxs,
                                double nys,
                                double nzs)
Nastaví nové súradnice stredu otáčania. (Pozri aj uhly alfa, beta a gama.)
Parametre:
nxs – nová hodnota x-ovej súradnice stredu otáčania
nys – nová hodnota y-ovej súradnice stredu otáčania
nzs – nová hodnota z-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
posuňStredOtáčania(double, double, double)
nastavStredOtacania
public void nastavStredOtacania(double nxs,
                                double nys,
                                double nzs)
 Alias pre nastavStredOtáčania.
nastavStredOtáčania
public void nastavStredOtáčania(double[] bod)
Nastaví stred otáčania roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť nastavenie polohy stredu otáčania roja berúc
 do úvahy spôsob práce smerníka. Ak je zadané
 pole aspoň trojprvkové, tak metóda berie do úvahy prvé tri jeho
 prvky. (Ak má pole menší počet prvkov, tak metóda nevykoná nič.)
Parametre:
bod – súradnice bodu určujúce novú polohu stredu otáčania roja
Pozri tiež:
stredOtáčania(), 
nastavStredOtáčania(double, double, double)
nastavStredOtacania
public void nastavStredOtacania(double[] bod)
 Alias pre nastavStredOtáčania.
posuňStredOtáčania
public void posuňStredOtáčania(double Δxs,
                               double Δys,
                               double Δzs)
Posunie súradnice stredu otáčania. (Pozri aj uhly alfa, beta a gama.)
Parametre:
Δxs – miera zmeny x-ovej súradnice stredu otáčania
Δys – miera zmeny y-ovej súradnice stredu otáčania
Δzs – miera zmeny z-ovej súradnice stredu otáčania
Pozri tiež:
stredOtáčaniaX(), 
stredOtáčaniaY(), 
stredOtáčaniaZ(), 
stredOtáčaniaX(double), 
stredOtáčaniaY(double), 
stredOtáčaniaZ(double), 
nastavStredOtáčania(double, double, double)
posunStredOtacania
public void posunStredOtacania(double Δxs,
                               double Δys,
                               double Δzs)
 Alias pre posuňStredOtáčania.
posuňStredOtáčania
public void posuňStredOtáčania(double[] bod)
Posunie stred otáčania roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť zmenu polohy stredu otáčania roja berúc
 do úvahy spôsob práce smerníka. Ak je zadané
 pole aspoň trojprvkové, tak metóda berie do úvahy prvé tri jeho
 prvky. (Ak má pole menší počet prvkov, tak metóda nevykoná nič.)
Parametre:
bod – trojica polohových súradníc, o ktoré bude posunutá
     poloha stredu otáčania roja
Pozri tiež:
nastavStredOtáčania(double[]), 
posuňStredOtáčania(double, double, double)
posunStredOtacania
public void posunStredOtacania(double[] bod)
 Alias pre posuňStredOtáčania.
kamera
public double[] kamera()
Vráti aktuálnu polohu kamery vo forme trojprvkového poľa [kx, ky, kz].
Návratová hodnota:
aktuálna poloha kamery
Pozri tiež:
nastavKameru(double[])
kameraX
public double kameraX()
Vráti aktuálnu x-ovú súradnicu polohy kamery.
Návratová hodnota:
aktuálna hodnota x-ovej súradnice polohy kamery
Pozri tiež:
kameraY(), 
kameraZ(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
kameraY
public double kameraY()
Vráti aktuálnu y-ovú súradnicu polohy kamery.
Návratová hodnota:
aktuálna hodnota y-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraZ(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
kameraZ
public double kameraZ()
Vráti aktuálnu z-ovú súradnicu polohy kamery.
Návratová hodnota:
aktuálna hodnota z-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
kameraX
public void kameraX(double hodnota)
Nastaví novú x-ovú súradnicu polohy kamery.
Parametre:
hodnota – nová hodnota x-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraZ(), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
kameraY
public void kameraY(double hodnota)
Nastaví novú y-ovú súradnicu polohy kamery.
Parametre:
hodnota – nová hodnota y-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraZ(), 
kameraX(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
kameraZ
public void kameraZ(double hodnota)
Nastaví novú z-ovú súradnicu polohy kamery.
Parametre:
hodnota – nová hodnota z-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraZ(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double), 
posuňKameru(double, double, double)
nastavKameru
public void nastavKameru(double nkx,
                         double nky,
                         double nkz)
Nastaví novú polohu kamery.
Parametre:
nkx – nová hodnota x-ovej súradnice polohy kamery
nky – nová hodnota y-ovej súradnice polohy kamery
nkz – nová hodnota z-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraZ(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
posuňKameru(double, double, double)
nastavKameru
public void nastavKameru(double[] bod)
Nastaví polohu kamery roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť nastavenie polohy kamery roja berúc do úvahy
 spôsob práce smerníka. Ak je zadané pole
 aspoň trojprvkové, tak metóda berie do úvahy prvé tri jeho prvky.
 (Ak má pole menší počet prvkov, tak metóda nevykoná nič.)
Parametre:
bod – súradnice bodu, na ktoré bude nastavená poloha kamery
Pozri tiež:
kamera(), 
nastavKameru(double, double, double)
posuňKameru
public void posuňKameru(double Δkx,
                        double Δky,
                        double Δkz)
Posunie polohu kamery.
Parametre:
Δkx – miera zmeny hodnoty x-ovej súradnice polohy kamery
Δky – miera zmeny hodnoty y-ovej súradnice polohy kamery
Δkz – miera zmeny hodnoty z-ovej súradnice polohy kamery
Pozri tiež:
kameraX(), 
kameraY(), 
kameraZ(), 
kameraX(double), 
kameraY(double), 
kameraZ(double), 
nastavKameru(double, double, double)
posunKameru
public void posunKameru(double Δkx,
                        double Δky,
                        double Δkz)
 Alias pre posuňKameru.
posuňKameru
public void posuňKameru(double[] bod)
Posunie polohu kamery roja na základe hodnôt zadaného poľa.
 Metóda má zjednodušiť zmenu polohy kamery roja berúc do úvahy
 spôsob práce smerníka. Ak je zadané pole
 aspoň trojprvkové, metóda berie do úvahy prvé tri jeho prvky.
 (Ak má pole menší počet prvkov, tak metóda nevykoná nič.)
Parametre:
bod – súradnice bodu, o ktoré bude posunutá poloha kamery
Pozri tiež:
nastavKameru(double[]), 
posuňKameru(double, double, double)
posunKameru
public void posunKameru(double[] bod)
 Alias pre posuňKameru.
mierka
public double mierka()
Vráti aktuálnu hodnotu mierky roja. Mierka vo veľkej miere
 ovplyvňuje zobrazenie roja. Ak je nesprávne nastavená, výsledok
 je skreslený. Dá sa prirovnať k ohniskovej vzdialenosti objektívu.
Návratová hodnota:
aktuálna hodnota mierky zobrazenia roja
Pozri tiež:
mierka(double), 
zmeňMierku(double)
mierka
public void mierka(double hodnota)
Nastaví novú hodnotu mierky roja. Pozri aj opis metódy mierka().
Parametre:
hodnota – nová hodnota mierky zobrazenia roja
Pozri tiež:
mierka(), 
zmeňMierku(double)
zmeňMierku
public void zmeňMierku(double Δmierka)
Upraví hodnotu mierky roja. Pozri aj opis metódy mierka().
Parametre:
Δmierka – miera zmeny hodnoty mierky zobrazenia roja
Pozri tiež:
mierka(), 
mierka(double)
zmenMierku
public void zmenMierku(double Δmierka)
 Alias pre zmeňMierku.
transformovať
public void transformovať()
Táto metóda vynúti prepočet konečných (globálne transformovaných)
 súradníc x2, y2, z2 všetkých bodov roja pri
 najbližšom kreslení alebo pri volaní metódy transformuj. Volanie tejto metódy zároveň nastaví príznak
 prepočítania atribútov použitých pri kreslení (premietaní) bodov
 roja. (Pozri metódu: prepočítať.)
Pozri tiež:
prepočítať(), 
transformuj()
transformovat
public void transformovat()
 Alias pre transformovať.
transformuj
public void transformuj()
Táto metóda prepočíta hodnoty konečných (globálne transformovaných)
 súradníc x2, y2, z2 všetkých bodov roja. Metóda používa vnútorný príznak
 na overenie toho, či je prepočítanie potrebné. Ak chcete prepočítanie
 vynútiť, musíte pred volaním tejto metódy zavolať metódu transformovať.
Pozri tiež:
transformovať(), 
prepočítaj(), 
transformuj(Roj.Bod)
transformuj
public void transformuj(Roj.Bod bod)
Toto je metóda, ktorá prepočíta hodnoty konečných (globálne
 transformovaných) súradníc x2, y2, z2 zadaného bodu roja.
Parametre:
bod – inštancia bodu roja, ktorého atribúty majú byť prepočítané
Pozri tiež:
transformuj()
prepočítať
public void prepočítať()
Táto metóda vynúti prepočet premietaných súradníc (x3, y3) a veľkostí kreslených objektov
 (z3) všetkých bodov roja pri najbližšom kreslení
 alebo pri volaní metódy prepočítaj.
Pozri tiež:
transformovať(), 
prepočítaj()
prepocitat
public void prepocitat()
 Alias pre prepočítať.
prepočítaj
public void prepočítaj()
Táto metóda prepočíta pre všetky body roja atribúty cieľovej
 (premietanej) polohy na plátne a veľkosti objektu kresleného na
 polohe bodu – hodnoty atribútov x3,
 y3 a z3. Metóda používa
 vnútorný príznak na overenie toho, či je prepočítanie potrebné.
 Ak chcete prepočítanie vynútiť, musíte pred volaním tejto metódy
 zavolať metódu prepočítať.
Pozri tiež:
prepočítať(), 
transformuj()
prepocitaj
public void prepocitaj()
 Alias pre prepočítaj.
kresli
public void kresli()
Prekreslí roj s použitím kresliaceho robota
 roja.
 
 Poznámka: Pred kreslením roja sú zálohované
 iba dve vlastnosti: farba
 a hrúbka čiary robota. Ich
 hodnoty sú obnovené až po nakreslení všetkých prvkov roja, čiže ak
 zákaznícke kreslenie objektu (telesa) v niektorom z bodov roja tieto
 vlastnosti zmenilo (a neobnovilo), tak sa zmeny prenesú do kreslenia
 ďalších prvkov roja…
 
 Poznámka: Počas kreslenia je aktualizovaná
 inštancia roja bod, ktorá sa dá využiť pri zákaznícky
 definovanom kreslení bodov roja (pozri kreslenie).
pridajDoSVG
public void pridajDoSVG(SVGPodpora svgPodpora)
Táto metóda slúži na export grafiky roja do zadanej inštancie
 SVG podpory. Táto metóda automaticky spúšťa
 metódy spojDoSVG
 a telesoDoSVG pre
 jednotlivé body roja.
 
 Poznámka: Počas exportu je aktualizovaná
 inštancia roja bod, ktorá sa dá využiť pri zákaznícky
 definovanom exporte bodov roja (pozri svgKreslenie).
Parametre:
svgPodpora – inštancia SVG podpory,
     do ktorej budú exportované tvary Javy
     reprezentujúce všetky viditeľné spoje medzi bodmi roja a telesá
     umiestnené v bodoch roja
Pozri tiež:
Roj.Bod.spojDoSVG(SVGPodpora), 
Roj.Bod.telesoDoSVG(SVGPodpora)
normála
public static double[] normála(double x1,
                               double y1,
                               double z1,
                               double x2,
                               double y2,
                               double z2,
                               double x3,
                               double y3,
                               double z3)
Vypočíta zo zadaných súradníc troch bodov určujúcich plochu
 v priestore súradnice normálového vektora k tejto ploche a vráti
 jeho nenormalizované súradnice.
 
 Inak povedané, metóda vypočíta súradnice smerového vektora kolmice
 k ploche, tento vektor však neprepočíta na jednotkový,
 ale ho vráti v (kvázi) „surovom“ stave. (Na väčšinu účelov by mal
 postačovať aj nenormalizovaný vektor. V prípade potreby použite metódu
 normalizuj.)
Parametre:
x1 – x-ová súradnica prvého bodu
y1 – y-ová súradnica prvého bodu
z1 – z-ová súradnica prvého bodu
x2 – x-ová súradnica druhého bodu
y2 – y-ová súradnica druhého bodu
z2 – z-ová súradnica druhého bodu
x3 – x-ová súradnica tretieho bodu
y3 – y-ová súradnica tretieho bodu
z3 – z-ová súradnica tretieho bodu
Návratová hodnota:
trojprvkové pole so súradnicami normálového vektora plochy
     (určenej tromi bodmi v parametroch)
normala
public static double[] normala(double x1,
                               double y1,
                               double z1,
                               double x2,
                               double y2,
                               double z2,
                               double x3,
                               double y3,
                               double z3)
 Alias pre normála.
normalizuj
public static double[] normalizuj(double[] vektor)
Normalizuje vektor zadaných súradníc. Táto metóda pracuje
 s ľubovoľne veľkým vektorom a normalizuje všetky súradnice podľa
 dĺžky vektora. To znamená, že ak má vektor šesť súradníc
 (pozri smerník.dajStav()), tak metóda
 vzájomne normalizuje všetkých šesť súradníc dohromady (akoby išlo
 napríklad o šesťrozmerný bod)! Návratovou hodnotou je rovnaké
 pole, ktoré bolo zadané vo vstupnom parametri vektor, len
 s prepočítanými súradnicami. (To znamená, že všetky zmeny sa
 rovnako prejavia aj vo vstupnom poli – ide o rovnakú inštanciu
 poľa.)
Parametre:
vektor – vektor súradníc určených na normalizáciu
Návratová hodnota:
vektor s normalizovanými súradnicami
uhlyK
public static double[] uhlyK(double x,
                             double y,
                             double z)
Vráti uhly potrebné na pootočenie jednotkového vektora paralelného
 s osou z okolo osí x (prvý prvok poľa v návratovej hodnote označovaný
 v tejto dokomentácii aj ako uhol α) a y (druhý prvok poľa v návratovej
 hodnote označovaný v tejto dokomentácii aj ako uhol β) tak, aby
 výsledný vektor smeroval k zadanému polohovému vektoru.
Parametre:
x – x-ová súradnica polohového vektora
y – y-ová súradnica polohového vektora
z – z-ová súradnica polohového vektora
Návratová hodnota:
dvojprvkové pole s požadovanými uhlami
uhlyK
public static double[] uhlyK(double[] vektor)
Vráti uhly potrebné na pootočenie jednotkového vektora paralelného
 s osou z okolo osí x (prvý prvok poľa v návratovej hodnote označovaný
 v tejto dokomentácii aj ako uhol α) a y (druhý prvok poľa v návratovej
 hodnote označovaný v tejto dokomentácii aj ako uhol β) tak, aby
 výsledný vektor smeroval k zadanému polohovému vektoru. Ak zadaný
 vektor neobsahuje aspoň tri prvky, tak metóda vráti hodnotu null.
Parametre:
vektor – polohový vektor súradníc
Návratová hodnota:
dvojprvkové pole s požadovanými uhlami alebo null
dajBodNa
public Roj.Bod dajBodNa(double súradnicaX,
                        double súradnicaY,
                        double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na zadaných
 súradniciach. Metóda využíva metódu bodu roja:
 bodV. Bod, ktorý vyhovie
 podmienke je vrátený. Ak nie je nájdený žiadny bod, tak metóda vráti
 hodnotu null.
Parametre:
súradnicaX – x-ová súradnica bodu
súradnicaY – y-ová súradnica bodu
polomer – polomer vyšetrovaného kruhu (pozri bodV)
Návratová hodnota:
nájdený bod alebo null
dajBodNa
public Roj.Bod dajBodNa(Poloha objekt,
                        double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach zadaného objektu. Metóda využíva metódu bodu roja:
 bodV. Bod, ktorý vyhovie
 podmienke je vrátený. Ak nie je nájdený žiadny bod, tak metóda vráti
 hodnotu null.
Parametre:
objekt – objekt, ktorého poloha je použitá na overenie bodov
polomer – polomer vyšetrovaného kruhu (pozri bodV)
Návratová hodnota:
nájdený bod alebo null
dajBodNa
public Roj.Bod dajBodNa(double súradnicaX,
                        double súradnicaY)
Zistí, či sa projekcia niektorého bodu roja nachádza na zadaných
 súradniciach. Metóda využíva metódu bodu roja: bodV. Bod, ktorý vyhovie podmienke je vrátený. Ak nie je
 nájdený žiadny bod, tak metóda vráti hodnotu null.
Parametre:
súradnicaX – x-ová súradnica bodu
súradnicaY – y-ová súradnica bodu
Návratová hodnota:
nájdený bod alebo null
dajBodNa
public Roj.Bod dajBodNa(Poloha objekt)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach zadaného objektu. Metóda využíva metódu bodu roja:
 bodV. Bod, ktorý vyhovie
 podmienke je vrátený. Ak nie je nájdený žiadny bod, tak metóda vráti
 hodnotu null.
Parametre:
objekt – objekt, ktorého poloha je použitá na overenie bodov
Návratová hodnota:
nájdený bod alebo null
dajBodNaMyši
public Roj.Bod dajBodNaMyši(double polomer)
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach myši. Metóda využíva metódu bodu roja: myšV. Bod, ktorý vyhovie podmienke je vrátený.
 Ak nie je nájdený žiadny bod, tak metóda vráti hodnotu
 null.
Parametre:
polomer – polomer vyšetrovaného kruhu (pozri myšV)
Návratová hodnota:
nájdený bod alebo null
dajBodNaMysi
public Roj.Bod dajBodNaMysi(double polomer)
 Alias pre dajBodNaMyši.
dajBodNaMyši
public Roj.Bod dajBodNaMyši()
Zistí, či sa projekcia niektorého bodu roja nachádza na
 súradniciach myši. Metóda využíva metódu bodu roja: myšV. Bod, ktorý vyhovie podmienke je vrátený. Ak nie je nájdený
 žiadny bod, tak metóda vráti hodnotu null.
Návratová hodnota:
nájdený bod alebo null
dajBodNaMysi
public Roj.Bod dajBodNaMysi()
 Alias pre dajBodNaMyši.
čítajZoSúboru
public void čítajZoSúboru(Súbor súbor,
                          String identifikátor)
                   throws IOException
Prečíta údaje o roji z konfiguračného súboru otvoreného na čítanie.
 Metóda prijíma identifikátor menného priestoru. Identifikátor smie mať
 hodnotu null. V takom prípade sú údaje čítané z aktuálneho
 menného priestoru zadaného konfiguračného súboru.
Parametre:
súbor – inštancia triedy Súbor otvorená
     na čítanie
identifikátor – vnorený menný priestor, z ktorého budú
     prevzaté údaje o roji
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
citajZoSuboru
public void citajZoSuboru(Súbor súbor,
                          String identifikátor)
                   throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
prečítajZoSúboru
public void prečítajZoSúboru(Súbor súbor,
                             String identifikátor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
precitajZoSuboru
public void precitajZoSuboru(Súbor súbor,
                             String identifikátor)
                      throws IOException
 Alias pre čítajZoSúboru.
Výnimky:
IOException
uložDoSúboru
public void uložDoSúboru(Súbor súbor,
                         String identifikátor)
                  throws IOException
Zapíše údaje o roji do konfiguračného súboru otvoreného na zápis.
 Metóda prijíma identifikátor menného priestoru. Identifikátor smie mať
 hodnotu null. V takom prípade sú údaje ukladané do
 aktuálneho menného priestoru zadaného konfiguračného súboru.
Parametre:
súbor – inštancia triedy Súbor otvorená
     na zápis
identifikátor – vnorený menný priestor, do ktorého budú
     vložené údaje o roji
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
ulozDoSuboru
public void ulozDoSuboru(Súbor súbor,
                         String identifikátor)
                  throws IOException
 Alias pre uložDoSúboru.
Výnimky:
IOException
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda RolovaciaLišta
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.JScrollBar
RolovaciaLišta
Všetky implementované rozhrania:
Adjustable, ImageObserver, MenuContainer, Serializable, Accessible, Poloha
Známe priame odvodené triedy:
RolovaciaLista
public class RolovaciaLišta
extends JScrollBar
implements Poloha
Trieda RolovaciaLišta uzatvára a rozširuje funkciu triedy
 Javy JScrollBar. Polohovanie a prilepovanie líšt
 je rovnaké ako pri triede Tlačidlo, ale komponenty
 lišty majú navyše možnosť zapnutia automatickej zmeny veľkosti podľa
 práve zobrazenej časti plátna.
 
 Poznámka: Pri podrobnom testovaní funkčnosti
 rolovacej lišty sa ukázalo, že predvolená implementácia triedy
 JScrollBar nie je príliš dokonalá. Rolovacie
 lišty fungujú dokonale v súčinnosti s rolovacím panelom
 JScrollPane, ktorý v rámci programovacieho
 rámca nie je použiteľný z dôvodu jej komplexnosti a samostatné použitie
 líšt je menej funkčné. S najväčšou pravdepodobnosťou je príčinou
 predvolene používaný model ohraničeného rozsahu, ktorý nerozlišuje
 medzi rôznymi typmi udalostí. Implementácia nedokáže rozlíšiť, či
 bola hodnota posunu lišty zmenená v dôsledku externej žiadosti alebo
 v dôsledku vnútorného posunu prostredníctvom tlačidiel so šípkami,
 v dôsledku čoho nie sú v rámci tejto programovacieho rámca tlačidlá šípok
 na lište použiteľné. Rôzne pokusy o obídenie tohto problému situáciu len
 zhoršovali. Dokedy nevznikne iná implementácia, treba sa zmieriť
 s tým, že tlačidlá líšt jednoducho nefungujú. Zdrojové kódy
 niektorých implementácií, ktoré by mohli poslúžiť ako vzory
 do budúcna, sú dostupné tu: 
grepcode.com, 
 href="http://developer.classpath.org/doc/javax/swing/JScrollBar-source.html"
developer.classpath.org, 
 href="https://book2s.com/java/src/package/javax/swing/jscrollbar.html"
book2s.com. Zálohy zdrojových kódov
 z 28. 10. 2017 sú dostupné v 
tomto balíčku (7z).
 
 Príklad:
 
 V tomto príklade je poloha grafického robota ovládaná lištami
 a kolieskom myši. Obidva spôsoby ovládania sú prepojené
 aktualizáciou polôh líšt pri každej zmene polohy robota kolieskom.
 Všimnite si, že zmena hodnoty rolovacej lišty smie vyvolať akciu
 (zmenu polohy robota) len v prípade, že je ťahaná. Inak by vznikala
 neželaná spätná väzba a mechanizmus by nefungoval tak, ako má.
 
 
import knižnica.*;
import static knižnica.Svet.*;
import static knižnica.ÚdajeUdalostí.*;
public class TestRolovacíchLíšt extends GRobot
{
    private RolovaciaLišta zvislá, vodorovná;
    // Konštruktor…
    private TestRolovacíchLíšt()
    {
        // Vytvorenie obrázka pre tlačidlo
        Obrázok obrázok = new Obrázok(20, 20);
        obrázok.vyplň(šedá.svetlejšia());
        // Vytvorenie tlačidla, ktoré umiestnime do rohu medzi lišty
        Tlačidlo tlačidlo = new Tlačidlo(obrázok);
        tlačidlo.deaktivuj();
        tlačidlo.obrázokDeaktivovaného(obrázok);
        tlačidlo.prilepVpravo();
        tlačidlo.prilepDole();
        // Vytvorenie zvislej rolovacej lišty
        zvislá = new RolovaciaLišta(ZVISLÁ);
        zvislá.skoč(0, 20);
        zvislá.prilepVpravo();
        zvislá.roztiahniNaVýšku();
Lištu môžeme skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda
 zobrazená.
Návratová hodnota:
true znamená, že lišta je zobrazená,
     false znamená opak
Pozri tiež:
zobrazená(), 
zobraz(), 
skry()
viditelna
public boolean viditelna()
 Alias pre viditeľná.
zobrazená
public boolean zobrazená()
Zistí, či je rolovacia lišta viditeľná (zobrazená) alebo nie.
 skrytá.
Lištu môžeme skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda
 viditeľná.
Návratová hodnota:
true znamená, že lišta je zobrazená,
     false znamená opak
Pozri tiež:
viditeľná(), 
zobraz(), 
skry()
zobrazena
public boolean zobrazena()
 Alias pre zobrazená.
zobraz
public void zobraz()
Zobrazí rolovaciu lištu. (Viac informácií nájdete v opise metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
skry()
skry
public void skry()
Skryje rolovaciu lištu. (Viac informácií nájdete v opise metódy
 zobrazená.)
Pozri tiež:
viditeľná(), 
zobrazená(), 
zobraz()
setVisible
public void setVisible(boolean zobraz)
Zobrazí alebo skryhe rolovaciu lištu podľa parametra zobraz.
 Táto metóda prekrýva originálnu metódu z dôvodu implementácie
 mechanizmu zabezpečujúceho správne zobrazenie lišty po inicializácii
 aplikácie.
 
 (Viac informácií nájdete v opise metódy zobrazená.)
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JComponent.setVisible(boolean). 
 
 
Prekrývanie:
táto metóda prekrýva originálnu metódu setVisible v triede JComponent
Parametre:
zobraz – true znamená, že lišta má byť zobrazená,
     false znamená opak
isVisible
public boolean isVisible()
Zistí, či je rolovacia lišta viditeľná (zobrazená) alebo nie.
 Táto metóda prekrýva originálnu metódu z dôvodu implementácie
 mechanizmu zabezpečujúceho správne zobrazenie lišty po inicializácii
 aplikácie.
 (Viac informácií nájdete v opise metódy zobrazená.)
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu Component.isVisible(). 
Prekrývanie:
táto metóda prekrýva originálnu metódu isVisible v triede Component
Návratová hodnota:
true znamená, že lišta je zobrazená,
     false znamená opak
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Rozmer
Všetky známe implementujúce triedy:
Castica, Častica, GRobot, Obrazok, Obrázok, PoznamkovyBlok, PoznámkovýBlok, Rozmery, Tlacidlo, Tlačidlo
public interface Rozmer
Rozhranie slúži na implementáciu metód slúžiacich na zistenie
 a nastavenie rozmeru (šírky a výšky) objektu. Implementujú ho viaceré
 triedy programovacieho rámca.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
boolean
maRozmer(double šírka,
        double výška)
Prototyp metódy na porovnanie zhody obidvoch zadaných rozmerov.
boolean
máRozmer(double šírka,
        double výška)
Prototyp metódy na porovnanie zhody obidvoch zadaných rozmerov.
boolean
maRozmer(Rozmer rozmer)
Prototyp metódy na porovnanie zhody obidvoch rozmerov objektu.
boolean
máRozmer(Rozmer rozmer)
Prototyp metódy na porovnanie zhody obidvoch rozmerov objektu.
boolean
maSirku(double šírka)
Prototyp metódy na porovnanie zhody šírky so zadanou hodnotou.
boolean
máŠírku(double šírka)
Prototyp metódy na porovnanie zhody šírky so zadanou hodnotou.
boolean
maVysku(double výška)
Prototyp metódy na porovnanie zhody výšky so zadanou hodnotou.
boolean
máVýšku(double výška)
Prototyp metódy na porovnanie zhody výšky so zadanou hodnotou.
Rozmer
rozmery()
Prototyp metódy na zistenie obidvoch rozmerov objektu.
void
rozmery(Rozmer rozmer)
Prototyp metódy na nastavenie obidvoch rozmerov objektu.
double
sirka()
Prototyp metódy na zistenie šírky objektu.
void
sirka(double šírka)
Prototyp metódy na nastavenie šírky objektu.
double
šírka()
Prototyp metódy na zistenie šírky objektu.
void
šírka(double šírka)
Prototyp metódy na nastavenie šírky objektu.
double
vyska()
Prototyp metódy na zistenie výšky objektu.
void
vyska(double výška)
Prototyp metódy na nastavenie výšky objektu.
double
výška()
Prototyp metódy na zistenie výšky objektu.
void
výška(double výška)
Prototyp metódy na nastavenie výšky objektu.
Podrobnosti metód
šírka
double šírka()
Prototyp metódy na zistenie šírky objektu.
výška
double výška()
Prototyp metódy na zistenie výšky objektu.
sirka
double sirka()
Prototyp metódy na zistenie šírky objektu.
vyska
double vyska()
Prototyp metódy na zistenie výšky objektu.
šírka
void šírka(double šírka)
Prototyp metódy na nastavenie šírky objektu.
výška
void výška(double výška)
Prototyp metódy na nastavenie výšky objektu.
sirka
void sirka(double šírka)
Prototyp metódy na nastavenie šírky objektu.
vyska
void vyska(double výška)
Prototyp metódy na nastavenie výšky objektu.
rozmery
Rozmer rozmery()
Prototyp metódy na zistenie obidvoch rozmerov objektu.
rozmery
void rozmery(Rozmer rozmer)
Prototyp metódy na nastavenie obidvoch rozmerov objektu.
máŠírku
boolean máŠírku(double šírka)
Prototyp metódy na porovnanie zhody šírky so zadanou hodnotou.
maSirku
boolean maSirku(double šírka)
Prototyp metódy na porovnanie zhody šírky so zadanou hodnotou.
máVýšku
boolean máVýšku(double výška)
Prototyp metódy na porovnanie zhody výšky so zadanou hodnotou.
maVysku
boolean maVysku(double výška)
Prototyp metódy na porovnanie zhody výšky so zadanou hodnotou.
máRozmer
boolean máRozmer(double šírka,
                 double výška)
Prototyp metódy na porovnanie zhody obidvoch zadaných rozmerov.
maRozmer
boolean maRozmer(double šírka,
                 double výška)
Prototyp metódy na porovnanie zhody obidvoch zadaných rozmerov.
máRozmer
boolean máRozmer(Rozmer rozmer)
Prototyp metódy na porovnanie zhody obidvoch rozmerov objektu.
maRozmer
boolean maRozmer(Rozmer rozmer)
Prototyp metódy na porovnanie zhody obidvoch rozmerov objektu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":10,"i20":10,"i21":10,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":10,"i28":10,"i29":10,"i30":9,"i31":9,"i32":9,"i33":9,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Rozmery
java.lang.Object
java.awt.geom.Dimension2D
Rozmery
Všetky implementované rozhrania:
Cloneable, Rozmer
public class Rozmery
extends Dimension2D
implements Rozmer
Táto trieda uchováva rozmery (šírku a výšku) objektu, pričom súčasne
 reprezentuje inštanciu rozmeru Javy Dimension2D
 a implementuje rozhranie Rozmer programovacieho rámca
 GRobot. Účelom tejto triedy je zlepšenie vnútornej kompatibility
 v programovacom rámci GRobot. Niektoré metódy s návratovou hodnotou
 Rozmer v skutočnosti vracajú objekt typu
 Rozmery.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Rozmery()
Predvolený konštruktor – nastaví rozmery tejto inštancie na hodnotu
 [0, 0].
Rozmery(Dimension2D rozmery)
Konštruktor – prijíma objekt určujúci rozmery.
Rozmery(double šírka,
       double výška)
Konštruktor – prijíma rozmery šírky a výšky jednotlivo.
Rozmery(Rozmer rozmer)
Konštruktor – prijíma implementáciu rozmeru iného objektu, ktorá
 určí rozmery uložené v tejto inštancii.
Rozmery(Rozmery rozmery)
Kopírovací konštruktor.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static String
dimension2DNaRetazec(Dimension2D rozmery)
 Alias pre dimension2DNaReťazec.
static String
dimension2DNaReťazec(Dimension2D rozmery)
Prevedie hodnoty rozmerov inštancie triedy Dimension2D („rozmery Javy“) do textovej podoby.
static String
dimension2DNaRetazec(double šírka,
                    double výška)
 Alias pre dimension2DNaReťazec.
static String
dimension2DNaReťazec(double šírka,
                    double výška)
Prevedie zadané rozmery (šírku a výšku) do textovej podoby.
double
getHeight()
 Vráti aktuálnu výšku tejto inštancie.
double
getWidth()
 Vráti aktuálnu šírku tejto inštancie.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí, či sa rozmery tejto inštancie dokonale zhodujú so zadanými
 rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí, či sa rozmery tejto inštancie a rozmery zadaného objektu
 dokonale zhodujú.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
máŠírku(double šírka)
Porovná, či sa zadaná šírka zhoduje s hodnotou šírky uloženou
 v tejto inštancii.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Porovná, či sa zadaná výška zhoduje s hodnotou výšky uloženou
 v tejto inštancii.
static Dimension
retazecNaDimension2D(String text)
 Alias pre reťazecNaDimension2D.
static Dimension
reťazecNaDimension2D(String text)
Prevedie zadaný reťazec reprezentujúci rozmery určitého objektu
 na inštanciu triedy Dimension.
static Rozmer
retazecNaRozmer(String text)
 Alias pre reťazecNaRozmery.
static Rozmery
reťazecNaRozmery(String text)
Prevedie zadaný reťazec reprezentujúci rozmery nejakého objektu
 na implementáciu rozhrania Rozmer (triedu Rozmery).
static Rozmery
rozdiel(Rozmery rozmery1,
       Rozmery rozmery2)
Vytvorí nový rozmery s rozmermi tvorenými rozdielom súradníc
 zadaných rozmeryov.
Rozmery
rozmery()
 V tomto prípade vráti samého seba.
void
rozmery(double šírka,
       double výška)
 Nastaví nové rozmery tejto inštancie.
void
rozmery(Rozmer rozmer)
 Nastaví nové rozmery tejto inštancie podľa
 zadanej implementácie rozmeru.
static String
rozmeryNaRetazec(double šírka,
                double výška)
 Alias pre rozmeryNaReťazec.
static String
rozmeryNaReťazec(double šírka,
                double výška)
Prevedie zadané rozmery (šírku a výšku) do textovej podoby.
static String
rozmeryNaRetazec(Rozmer rozmer)
 Alias pre rozmeryNaReťazec.
static String
rozmeryNaReťazec(Rozmer rozmer)
Prevedie zadanú implementáciu rozhrania Rozmer
 (čiže nielen inštancií typu Rozmery – vstupom
 môže byť napríklad robot, oblasť,
 tlačidlo, častica…) do textovej
 podoby, ktorá bude rozmery (šírku a výšku) reprezentovať.
static Rozmery
rozmeryTvaru(Shape tvar)
Táto statická metóda prevedie rozmery zadaného tvaru
 z implementácie rozmerov Javy do implementácie rozmerov
 programovacieho rámca GRobot.
void
setSize(double šírka,
       double výška)
 Nastaví nové rozmery tejto inštancie.
double
sirka()
 Alias pre šírka.
void
sirka(double šírka)
 Alias pre šírka.
static boolean
spravnyFormat(String text)
 Alias pre správnyFormát.
static boolean
správnyFormát(String text)
Zistí, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom rozmery určitého objektu.
static Rozmery
sucet(Rozmery rozmery1,
     Rozmery rozmery2)
 Alias pre súčet.
static Rozmery
súčet(Rozmery rozmery1,
     Rozmery rozmery2)
Vytvorí nový rozmery vytvorený zo súčtu rozmerov zadaných
 inštancií.
double
šírka()
 Vráti aktuálnu šírku tejto inštancie.
void
šírka(double šírka)
 Nastaví novú šírku tejto inštancie.
String
toString()
Reťazcová reprezentácia tejto inštancie vhodná na účely ladenia
 a obsahujúca informáciu o jednotlivých rozmeroch tejto inštancie.
double
vyska()
 Alias pre výška.
void
vyska(double výška)
 Alias pre výška.
double
výška()
 Vráti aktuálnu výšku tejto inštancie.
void
výška(double výška)
 Nastaví novú výšku tejto inštancie.
Metódy zdedené z triedy java.awt.geom.Dimension2D
clone, setSize
Metódy zdedené z triedy java.lang.Object
equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
Rozmery
public Rozmery()
Predvolený konštruktor – nastaví rozmery tejto inštancie na hodnotu
 [0, 0].
Rozmery
public Rozmery(double šírka,
               double výška)
Konštruktor – prijíma rozmery šírky a výšky jednotlivo.
Parametre:
šírka – šírka tejto inštancie
výška – výška tejto inštancie
Rozmery
public Rozmery(Dimension2D rozmery)
Konštruktor – prijíma objekt určujúci rozmery.
Parametre:
rozmery – objekt, z ktorého sa prevezmú rozmery do tejto inštancie
Rozmery
public Rozmery(Rozmer rozmer)
Konštruktor – prijíma implementáciu rozmeru iného objektu, ktorá
 určí rozmery uložené v tejto inštancii.
Parametre:
rozmery – implementácia rozmeru iného objektu určujúca
     hodnoty (šírku a výšku) tejto inštancie rozmeru
Rozmery
public Rozmery(Rozmery rozmery)
Kopírovací konštruktor.
Parametre:
rozmery – iná inštancia rozmeru, ktorá bude skopírovaná
Podrobnosti metód
getWidth
public double getWidth()
 Vráti aktuálnu šírku tejto inštancie.
Definované:
getWidth v triede Dimension2D
Návratová hodnota:
aktuálna šírka tejto inštancie
getHeight
public double getHeight()
 Vráti aktuálnu výšku tejto inštancie.
Definované:
getHeight v triede Dimension2D
Návratová hodnota:
aktuálna výška tejto inštancie
setSize
public void setSize(double šírka,
                    double výška)
 Nastaví nové rozmery tejto inštancie.
Definované:
setSize v triede Dimension2D
Parametre:
šírka – nová šírka tejto inštancie
výška – nová výška tejto inštancie
šírka
public double šírka()
 Vráti aktuálnu šírku tejto inštancie.
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
aktuálna šírka tejto inštancie
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
 Vráti aktuálnu výšku tejto inštancie.
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
aktuálna výška tejto inštancie
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmery
public Rozmery rozmery()
 V tomto prípade vráti samého seba. Táto
 metóda je súčasťou úplnej implementácie rozhrania Rozmer. Metóda je používaná inštanciami ostatných tried
 programovacieho rámca GRobot.
Definované:
rozmery v rozhraní Rozmer
šírka
public void šírka(double šírka)
 Nastaví novú šírku tejto inštancie.
Definované:
šírka v rozhraní Rozmer
Parametre:
šírka – nová šírka tejto inštancie
sirka
public void sirka(double šírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double výška)
 Nastaví novú výšku tejto inštancie.
Definované:
výška v rozhraní Rozmer
Parametre:
výška – nová výška tejto inštancie
vyska
public void vyska(double výška)
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmery
public void rozmery(double šírka,
                    double výška)
 Nastaví nové rozmery tejto inštancie.
Parametre:
šírka – nová šírka tejto inštancie
výška – nová výška tejto inštancie
rozmery
public void rozmery(Rozmer rozmer)
 Nastaví nové rozmery tejto inštancie podľa
 zadanej implementácie rozmeru.
Definované:
rozmery v rozhraní Rozmer
Parametre:
rozmer – iná inštancia, podľa ktorej sú nastavené nové rozmery
     tejto inštancie
máŠírku
public boolean máŠírku(double šírka)
Porovná, či sa zadaná šírka zhoduje s hodnotou šírky uloženou
 v tejto inštancii.
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – šírka, ktorá má byť porovnaná so šírkou uloženou
     v tejto inštancii
Návratová hodnota:
true ak sa šírka tejto inštancie zhoduje so
     zadanou šírkou, false v opačnom prípade
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Porovná, či sa zadaná výška zhoduje s hodnotou výšky uloženou
 v tejto inštancii.
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – výška, ktorá má byť porovnaná s výškou uloženou
     v tejto inštancii
Návratová hodnota:
true ak sa výška tejto inštancie zhoduje so
     zadanou výškou, false v opačnom prípade
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí, či sa rozmery tejto inštancie a rozmery zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak metóda vráti hodnotu
 true, v opačnom prípade hodnotu false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi tejto inštancie
Návratová hodnota:
true ak sa rozmery tejto inštancie zhodujú s rozmermi
     zadaného objektu, false v opačnom prípade
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí, či sa rozmery tejto inštancie dokonale zhodujú so zadanými
 rozmermi. Ak je zistená zhoda, tak metóda vráti hodnotu
 true, v opačnom prípade hodnotu false.
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – šírka porovnávaná s korešpondujúcou hodnotou tejto
     inštancie
výška – výška porovnávaná s korešpondujúcou hodnotou tejto
     inštancie
Návratová hodnota:
true ak sa rozmery tejto inštancie zhodujú so
     zadanými rozmermi, false v opačnom prípade
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
rozmeryTvaru
public static Rozmery rozmeryTvaru(Shape tvar)
Táto statická metóda prevedie rozmery zadaného tvaru
 z implementácie rozmerov Javy do implementácie rozmerov
 programovacieho rámca GRobot. (Vykoná to s pomocou tzv. ohraničujúceho
 obdĺžnika – bounding box – metódou getBounds2D() tvarov Javy. Takže technicky ide o prevod rozmerov
 získaných z inštancie Rectangle2D na objekt
 typu Rozmery.)
Parametre:
tvar – tvar, ktorého rozmery chceme zistiť
Návratová hodnota:
objekt typu Rozmery
toString
public String toString()
Reťazcová reprezentácia tejto inštancie vhodná na účely ladenia
 a obsahujúca informáciu o jednotlivých rozmeroch tejto inštancie.
 
 Pozri aj metódy: rozmeryNaReťazec,
 reťazecNaRozmery,
 dimension2DNaReťazec
 a reťazecNaDimension2D.
Prekrývanie:
táto metóda prekrýva originálnu metódu toString v triede Object
Návratová hodnota:
reťazcová reprezentácia tejto inštancie vhodná na účely ladenia
     a obsahujúca informácie o rozmeroch
rozmeryNaReťazec
public static String rozmeryNaReťazec(Rozmer rozmer)
Prevedie zadanú implementáciu rozhrania Rozmer
 (čiže nielen inštancií typu Rozmery – vstupom
 môže byť napríklad robot, oblasť,
 tlačidlo, častica…) do textovej
 podoby, ktorá bude rozmery (šírku a výšku) reprezentovať.
 (Vhodné napríklad pri ukladaní údajov do konfiguračného súboru.)
Parametre:
rozmery – implementácia rozmerov, ktoré majú byť prevedené do
     reťazcovej podoby
Návratová hodnota:
rozmery prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaRozmery(String), 
správnyFormát(String)
rozmeryNaRetazec
public static String rozmeryNaRetazec(Rozmer rozmer)
 Alias pre rozmeryNaReťazec.
dimension2DNaReťazec
public static String dimension2DNaReťazec(Dimension2D rozmery)
Prevedie hodnoty rozmerov inštancie triedy Dimension2D („rozmery Javy“) do textovej podoby.
Parametre:
rozmery – inštancia Dimension2D, ktorej má
     údaje majú byť prevedené do reťazcovej podoby
Návratová hodnota:
údaje o šírke a výške prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaDimension2D(String), 
správnyFormát(String)
dimension2DNaRetazec
public static String dimension2DNaRetazec(Dimension2D rozmery)
 Alias pre dimension2DNaReťazec.
rozmeryNaReťazec
public static String rozmeryNaReťazec(double šírka,
                                      double výška)
Prevedie zadané rozmery (šírku a výšku) do textovej podoby.
 Funguje rovnako ako metóda dimension2DNaReťazec(šírka, výška), rozdiel je len vo
 výslednej textovej reprezentácii:
 
 
 rozmeryNaReťazec(šírka,
 výška)dim(šírka,
 výška)
 dimension2DNaReťazec(šírka, výška): [šírka,
 výška],
 
 
 Výsledný text v každom prípade reprezentuje rozmery (šírku a výšku)
 nejakého objektu a v obidvoch prípadoch je rozpoznateľný metódami
 reťazecNaRozmery
 a reťazecNaDimension2D.
 Využitie týchto metód je vhodné napríklad pri ukladaní údajov do
 textového konfiguračného súboru.
Parametre:
šírka – šírka určitého objektu, ktorá má byť prevedená do
     reťazcovej podoby spolu s párujúcou výškou
výška – výška určitého objektu, ktorá má byť prevedená do
     reťazcovej podoby spolu s párujúcou šírkou
Návratová hodnota:
rozmery prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaRozmery(String), 
správnyFormát(String)
rozmeryNaRetazec
public static String rozmeryNaRetazec(double šírka,
                                      double výška)
 Alias pre rozmeryNaReťazec.
dimension2DNaReťazec
public static String dimension2DNaReťazec(double šírka,
                                          double výška)
Prevedie zadané rozmery (šírku a výšku) do textovej podoby.
 Funguje rovnako ako metóda rozmeryNaReťazec(šírka, výška), rozdiel je len vo
 výslednej textovej reprezentácii:
 
 
 rozmeryNaReťazec(šírka,
 výška)dim(šírka,
 výška)
 dimension2DNaReťazec(šírka, výška): [šírka,
 výška],
 
 
 Výsledný text v každom prípade reprezentuje rozmery (šírku a výšku)
 nejakého objektu a v obidvoch prípadoch je rozpoznateľný metódami
 reťazecNaRozmery
 a reťazecNaDimension2D.
 Využitie týchto metód je vhodné napríklad pri ukladaní údajov do
 textového konfiguračného súboru.
Parametre:
šírka – šírka určitého objektu, ktorý má byť prevedený do
     reťazcovej podoby
výška – výška určitého objektu, ktorý má byť prevedený do
     reťazcovej podoby
Návratová hodnota:
rozmery objektu prevedené do reťazcovej podoby
Pozri tiež:
reťazecNaDimension2D(String), 
správnyFormát(String)
dimension2DNaRetazec
public static String dimension2DNaRetazec(double šírka,
                                          double výška)
 Alias pre dimension2DNaReťazec.
reťazecNaRozmery
public static Rozmery reťazecNaRozmery(String text)
Prevedie zadaný reťazec reprezentujúci rozmery nejakého objektu
 na implementáciu rozhrania Rozmer (triedu Rozmery). Metóda rozpoznáva reťazce v tvare:
 
 
 dim(šírka,
 výška)
 alebo [šírka,
 výška],
 
 
 kde šírka a výška sú číselne vyjadrené
 rozmery určitého objektu.
 
 Metóda je vhodná ako doplnok k metóde rozmeryNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený
Návratová hodnota:
implementácia rozhrania Rozmer (konkrétne trieda
     Rozmery) obsahujúca rozmery získané
     z reťazcovej podoby
Pozri tiež:
rozmeryNaReťazec(Rozmer), 
správnyFormát(String)
retazecNaRozmer
public static Rozmer retazecNaRozmer(String text)
 Alias pre reťazecNaRozmery.
reťazecNaDimension2D
public static Dimension reťazecNaDimension2D(String text)
Prevedie zadaný reťazec reprezentujúci rozmery určitého objektu
 na inštanciu triedy Dimension.
 Metóda rozpoznáva reťazce v tvare:
 
 
 dim(šírka,
 výška)
 alebo [šírka,
 výška],
 
 
 kde šírka a výška sú číselne vyjadrené
 rozmery určitého objektu.
 
 Poznámka: Táto metóda vnútorne používa
 metódu reťazecNaRozmery, ktorej
 výstup prevedie na „rozmery Javy“ – inštanciu triedy Dimension, ktorá ukladá celočíselné hodnoty, takže
 z hľadiska presnosti aj výkonu je výhodnejšie použitie metódy
 reťazecNaRozmery.
 
 Metóda je vhodná ako doplnok k metóde dimension2DNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený
Návratová hodnota:
inštancia triedy Dimension
     s celočíselnými rozmermi získanými z reťazcovej podoby
Pozri tiež:
dimension2DNaReťazec(Dimension2D), 
správnyFormát(String)
retazecNaDimension2D
public static Dimension retazecNaDimension2D(String text)
 Alias pre reťazecNaDimension2D.
správnyFormát
public static boolean správnyFormát(String text)
Zistí, či je zadaný reťazec v rozpoznateľnom formáte
 reprezentujúcom rozmery určitého objektu.
 Metóda uzná za správne reťazce v tvare:
 
 
 dim(šírka,
 výška)
 alebo [šírka,
 výška],
 
 
 kde šírka a výška sú číselne vyjadrené
 rozmery určitého objektu.
 
 Metóda je vhodná ako doplnok k metódam rozmeryNaReťazec a reťazecNaRozmery.
Parametre:
text – reťazec, ktorý má byť posúdený
Návratová hodnota:
true ak je zadaný teťazec v rozpoznateľnom
     formáte
Pozri tiež:
rozmeryNaReťazec(double, double), 
rozmeryNaReťazec(Rozmer), 
rozmeryNaReťazec(double, double), 
dimension2DNaReťazec(Dimension2D), 
reťazecNaRozmery(String), 
reťazecNaDimension2D(String), 
správnyFormát(String)
spravnyFormat
public static boolean spravnyFormat(String text)
 Alias pre správnyFormát.
súčet
public static Rozmery súčet(Rozmery rozmery1,
                            Rozmery rozmery2)
Vytvorí nový rozmery vytvorený zo súčtu rozmerov zadaných
 inštancií.
Parametre:
rozmery1 – prvý rozmery súčtu
rozmery2 – druhý rozmery súčtu
Návratová hodnota:
výsledný rozmery súčtu
sucet
public static Rozmery sucet(Rozmery rozmery1,
                            Rozmery rozmery2)
 Alias pre súčet.
rozdiel
public static Rozmery rozdiel(Rozmery rozmery1,
                              Rozmery rozmery2)
Vytvorí nový rozmery s rozmermi tvorenými rozdielom súradníc
 zadaných rozmeryov.
Parametre:
rozmery1 – prvý rozmery rozdielu
rozmery2 – druhý rozmery rozdielu
Návratová hodnota:
výsledný rozmery rozdielu
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda SVGPodpora.Transformácia
java.lang.Object
SVGPodpora.Transformácia
Známe priame odvodené triedy:
SVGPodpora.Transformacia
Nadradená trieda:
SVGPodpora
public static class SVGPodpora.Transformácia
extends Object
Táto trieda slúži na uchovanie pôvodných informácií
 o transformáciách rozpoznávaných z textovej podoby podľa
 špecifikácie SVG. Je to v podstate medzistupeň prevodu medzi
 textovou reprezentáciou (v súlade so špecifikáciou SVG)
 a výslednou afinnou transformáciou (prevedenou do prislúchajúcej
 inštancie triedy AffineTransform jazyka
 Java).
 
 Po prevedení do tvaru afinnej transformácie sa totiž môžu
 niektoré informácie stratiť (napríklad údaje o pôvodnom uhle
 rotácie v kombinácii so súradnicami stredu rotácie, ale hlavne
 údaje o jednotlivých zložkách konečnej zloženej transformácie
 tvaru) a je pritom vhodné, aby programátor mal k rozpoznaným
 informáciám prístup pred ich záverečným prevedením do tvaru
 výslednej zloženej transformácie.
 
 Táto trieda slúži len na uchovanie 2D transformácií
 špecifikácie SVG, pretože triedy SVGPodpora
 programovacieho rámca a AffineTransform
 Javy pracujú len s týmto typom transformácií.
 
 Táto trieda rozpoznáva aj transformácie, ktoré nie sú
 podporované štandardom SVG 1.1, ale odvoláva sa na nich (cez
 
definíciu CSS) 
 href="https://svgwg.org/svg2-draft/coords.html#TransformProperty"
draft štandardu SVG 2. (Pri každom takomto
 type transformácie sa nachádza upozornenie.)
 Tento typ transformácie je pri prevádzaní transformácií na
 reťazec predvolene prevedený na iný (kompatibilný a štandardom 1.1
 podporovaný) typ transformácie. Na zmenu tohto správania je
 potrebné zmeniť predvolenú hodnotu false statického
 príznaku SVG2 na hodnotu true.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
double[]
hodnota
Uchováva informácie o hodnotách konkrétnych parametrov
 podľa typu transformácie.
static int
MATICA
Preklad anglického identifikátora MATRIX
 do slovenského jazyka.
static int
MATRIX
Určuje všeobecnú 2D transformáciu v tvare matice so šiestimi
 hodnotami (označme ich a – f ), ktoré sú počas
 výpočtov dosadené do matice afinnej 2D transformácie takto:
 
 
static int
MIERKA
Preklad anglického identifikátora SCALE
 do slovenského jazyka.
static int
MIERKA_X
Preklad anglického identifikátora SCALE_X
 do slovenského jazyka.
static int
MIERKA_Y
Preklad anglického identifikátora SCALE_Y
 do slovenského jazyka.
static int
OTOC
 Alias pre OTOČ.
static int
OTOCENIE
 Alias pre OTOČ.
static int
OTOČ
Preklad anglického identifikátora ROTATE
 do slovenského jazyka.
static int
OTOČENIE
 Alias pre OTOČ.
static int
POSUN
Preklad anglického identifikátora TRANSLATE
 do slovenského jazyka.
static int
POSUŇ
 Alias pre POSUN.
static int
POSUN_X
Preklad anglického identifikátora TRANSLATE_X do slovenského jazyka.
static int
POSUŇ_X
 Alias pre POSUN_X.
static int
POSUN_Y
Preklad anglického identifikátora TRANSLATE_Y do slovenského jazyka.
static int
POSUŇ_Y
 Alias pre POSUN_Y.
static int
POSUNUTIE
 Alias pre POSUN.
static int
POSUNUTIE_X
 Alias pre POSUN_X.
static int
POSUNUTIE_Y
 Alias pre POSUN_Y.
static int
ROTATE
Určuje 2D rotáciu (pootočenie) o stanovený uhol okolo určeného
 bodu ako stredu otáčania.
static int
SCALE
Určuje 2D zmenu mierky v smere osí x a y.
static int
SCALE_X
Určuje 2D zmenu mierky v smere osi x.
static int
SCALE_Y
Určuje 2D zmenu mierky v smere osi y.
static int
SKEW
Určuje zošikmenie/sklonenie (čo nie je to isté ako skosenie –
 angl. shear) o zadaný uhol v smere osí x a y.
static int
SKEW_X
Určuje sklonenie o zadaný uhol v smere osi x.
static int
SKEW_Y
Určuje sklonenie o zadaný uhol v smere osi y.
static int
SKLON
Preklad anglického identifikátora SKEW
 do slovenského jazyka.
static int
SKLOŇ
 Alias pre SKLON.
static int
SKLON_X
Preklad anglického identifikátora SKEW_X
 do slovenského jazyka.
static int
SKLOŇ_X
 Alias pre SKLON_X.
static int
SKLON_Y
Preklad anglického identifikátora SKEW_Y
 do slovenského jazyka.
static int
SKLOŇ_Y
 Alias pre SKLON_Y.
static int
SKOLONENIE
 Alias pre SKLON.
static int
SKOLONENIE_X
 Alias pre SKLON_X.
static int
SKOLONENIE_Y
 Alias pre SKLON_Y.
static boolean
SVG2
Niektoré transformácie nie sú podporované štandardom SVG 1.1,
 preto je ich prevádzanie na reťazce predvolene nastavené tak,
 aby boli prevedené na iný kompatibilný typ transformácie.
static int
TRANSLATE
Určuje 2D posunutie v smere osí x a y.
static int
TRANSLATE_X
Určuje 2D posunutie v smere osi x.
static int
TRANSLATE_Y
Určuje 2D posunutie v smere osi y.
int
typ
Uchováva informáciu o type trasformácie uloženej v tejto
 inštancii.
static int
ZMEN_MIERKU
 Alias pre MIERKA.
static int
ZMEŇ_MIERKU
 Alias pre MIERKA.
static int
ZMEN_MIERKU_X
 Alias pre MIERKA_X.
static int
ZMEŇ_MIERKU_X
 Alias pre MIERKA_X.
static int
ZMEN_MIERKU_Y
 Alias pre MIERKA_Y.
static int
ZMEŇ_MIERKU_Y
 Alias pre MIERKA_Y.
static int
ZMENA_MIERKY
 Alias pre MIERKA.
static int
ZMENA_MIERKY_X
 Alias pre MIERKA_X.
static int
ZMENA_MIERKY_Y
 Alias pre MIERKA_Y.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Transformácia(int typ,
             Double... hodnoty)
Konštruktor zabezpečujúci bezchybnú inicializáciu inštancie.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
AffineTransform
daj()
Vráti objekt typu AffineTransform
 vyrobený podľa údajov o 2D SVG transformácii uložených v tejto
 inštancii.
String
toString()
Prevedie túto inštanciu na reťazec – do textovej podoby
 v súlade so špecifikáciou SVG.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
SVG2
public static boolean SVG2
Niektoré transformácie nie sú podporované štandardom SVG 1.1,
 preto je ich prevádzanie na reťazce predvolene nastavené tak,
 aby boli prevedené na iný kompatibilný typ transformácie. (Aby
 neboli prenášané do výstupného súboru.) Tento príznak slúži
 na zapnutie doslovného prevádzania týchto typov transformácií –
 zmenou predvolenej hodnoty false na true.
MATRIX
public static final int MATRIX
Určuje všeobecnú 2D transformáciu v tvare matice so šiestimi
 hodnotami (označme ich a – f ), ktoré sú počas
 výpočtov dosadené do matice afinnej 2D transformácie takto:
 
 
 ⎡a c
  e⎤
 ⎢b d
  f⎥
 ⎣0 0
  1⎦
 
 
 
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 MATICA.
Pozri tiež:
Hodnoty konštánt
MATICA
public static final int MATICA
Preklad anglického identifikátora MATRIX
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
TRANSLATE
public static final int TRANSLATE
Určuje 2D posunutie v smere osí x a y.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 POSUN.
Pozri tiež:
Hodnoty konštánt
POSUN
public static final int POSUN
Preklad anglického identifikátora TRANSLATE
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
POSUŇ
public static final int POSUŇ
 Alias pre POSUN.
Pozri tiež:
Hodnoty konštánt
POSUNUTIE
public static final int POSUNUTIE
 Alias pre POSUN.
Pozri tiež:
Hodnoty konštánt
TRANSLATE_X
public static final int TRANSLATE_X
Určuje 2D posunutie v smere osi x.
 
 Upozornenie: Táto transformácia
 nie je podporovaná štandardom SVG 1.1. Predvolená hodnota
 príznaku SVG2 false zabezpečuje,
 aby bola táto transformácia pri prevode na reťazec prevedená
 na kompatibilnú transformáciu.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 POSUN_X.
Pozri tiež:
Hodnoty konštánt
POSUN_X
public static final int POSUN_X
Preklad anglického identifikátora TRANSLATE_X do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
POSUŇ_X
public static final int POSUŇ_X
 Alias pre POSUN_X.
Pozri tiež:
Hodnoty konštánt
POSUNUTIE_X
public static final int POSUNUTIE_X
 Alias pre POSUN_X.
Pozri tiež:
Hodnoty konštánt
TRANSLATE_Y
public static final int TRANSLATE_Y
Určuje 2D posunutie v smere osi y.
 
 Upozornenie: Táto transformácia
 nie je podporovaná štandardom SVG 1.1. Predvolená hodnota
 príznaku SVG2 false zabezpečuje,
 aby bola táto transformácia pri prevode na reťazec prevedená
 na kompatibilnú transformáciu.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 POSUN_Y.
Pozri tiež:
Hodnoty konštánt
POSUN_Y
public static final int POSUN_Y
Preklad anglického identifikátora TRANSLATE_Y do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
POSUŇ_Y
public static final int POSUŇ_Y
 Alias pre POSUN_Y.
Pozri tiež:
Hodnoty konštánt
POSUNUTIE_Y
public static final int POSUNUTIE_Y
 Alias pre POSUN_Y.
Pozri tiež:
Hodnoty konštánt
SCALE
public static final int SCALE
Určuje 2D zmenu mierky v smere osí x a y.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 MIERKA.
Pozri tiež:
Hodnoty konštánt
MIERKA
public static final int MIERKA
Preklad anglického identifikátora SCALE
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
ZMENA_MIERKY
public static final int ZMENA_MIERKY
 Alias pre MIERKA.
Pozri tiež:
Hodnoty konštánt
ZMEŇ_MIERKU
public static final int ZMEŇ_MIERKU
 Alias pre MIERKA.
Pozri tiež:
Hodnoty konštánt
ZMEN_MIERKU
public static final int ZMEN_MIERKU
 Alias pre MIERKA.
Pozri tiež:
Hodnoty konštánt
SCALE_X
public static final int SCALE_X
Určuje 2D zmenu mierky v smere osi x.
 
 Upozornenie: Táto transformácia
 nie je podporovaná štandardom SVG 1.1. Predvolená hodnota
 príznaku SVG2 false zabezpečuje,
 aby bola táto transformácia pri prevode na reťazec prevedená
 na kompatibilnú transformáciu.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 MIERKA_X.
Pozri tiež:
Hodnoty konštánt
MIERKA_X
public static final int MIERKA_X
Preklad anglického identifikátora SCALE_X
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
ZMENA_MIERKY_X
public static final int ZMENA_MIERKY_X
 Alias pre MIERKA_X.
Pozri tiež:
Hodnoty konštánt
ZMEŇ_MIERKU_X
public static final int ZMEŇ_MIERKU_X
 Alias pre MIERKA_X.
Pozri tiež:
Hodnoty konštánt
ZMEN_MIERKU_X
public static final int ZMEN_MIERKU_X
 Alias pre MIERKA_X.
Pozri tiež:
Hodnoty konštánt
SCALE_Y
public static final int SCALE_Y
Určuje 2D zmenu mierky v smere osi y.
 
 Upozornenie: Táto transformácia
 nie je podporovaná štandardom SVG 1.1. Predvolená hodnota
 príznaku SVG2 false zabezpečuje,
 aby bola táto transformácia pri prevode na reťazec prevedená
 na kompatibilnú transformáciu.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 MIERKA_Y.
Pozri tiež:
Hodnoty konštánt
MIERKA_Y
public static final int MIERKA_Y
Preklad anglického identifikátora SCALE_Y
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
ZMENA_MIERKY_Y
public static final int ZMENA_MIERKY_Y
 Alias pre MIERKA_Y.
Pozri tiež:
Hodnoty konštánt
ZMEŇ_MIERKU_Y
public static final int ZMEŇ_MIERKU_Y
 Alias pre MIERKA_Y.
Pozri tiež:
Hodnoty konštánt
ZMEN_MIERKU_Y
public static final int ZMEN_MIERKU_Y
 Alias pre MIERKA_Y.
Pozri tiež:
Hodnoty konštánt
ROTATE
public static final int ROTATE
Určuje 2D rotáciu (pootočenie) o stanovený uhol okolo určeného
 bodu ako stredu otáčania.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 OTOČ.
Pozri tiež:
Hodnoty konštánt
OTOČ
public static final int OTOČ
Preklad anglického identifikátora ROTATE
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
OTOC
public static final int OTOC
 Alias pre OTOČ.
Pozri tiež:
Hodnoty konštánt
OTOČENIE
public static final int OTOČENIE
 Alias pre OTOČ.
Pozri tiež:
Hodnoty konštánt
OTOCENIE
public static final int OTOCENIE
 Alias pre OTOČ.
Pozri tiež:
Hodnoty konštánt
SKEW
public static final int SKEW
Určuje zošikmenie/sklonenie (čo nie je to isté ako skosenie –
 angl. shear) o zadaný uhol v smere osí x a y.
 
 Upozornenie: Táto transformácia
 nie je podporovaná štandardom SVG 1.1. Predvolená hodnota
 príznaku SVG2 false zabezpečuje,
 aby bola táto transformácia pri prevode na reťazec prevedená
 na kompatibilnú transformáciu.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 SKLON.
Pozri tiež:
Hodnoty konštánt
SKLON
public static final int SKLON
Preklad anglického identifikátora SKEW
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
SKLOŇ
public static final int SKLOŇ
 Alias pre SKLON.
Pozri tiež:
Hodnoty konštánt
SKOLONENIE
public static final int SKOLONENIE
 Alias pre SKLON.
Pozri tiež:
Hodnoty konštánt
SKEW_X
public static final int SKEW_X
Určuje sklonenie o zadaný uhol v smere osi x.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 SKLON_X.
Pozri tiež:
Hodnoty konštánt
SKLON_X
public static final int SKLON_X
Preklad anglického identifikátora SKEW_X
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
SKLOŇ_X
public static final int SKLOŇ_X
 Alias pre SKLON_X.
Pozri tiež:
Hodnoty konštánt
SKOLONENIE_X
public static final int SKOLONENIE_X
 Alias pre SKLON_X.
Pozri tiež:
Hodnoty konštánt
SKEW_Y
public static final int SKEW_Y
Určuje sklonenie o zadaný uhol v smere osi y.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Slovenským prekladom tohto identifikátora je
 SKLON_Y.
Pozri tiež:
Hodnoty konštánt
SKLON_Y
public static final int SKLON_Y
Preklad anglického identifikátora SKEW_Y
 do slovenského jazyka.
 
 Poznámka: Všetky identifikátory
 transformácií boli preložené do slovenského jazyka a zároveň
 ponechané v anglickom jazyku, aby vzniklo terminologické
 prepojenie s definíciami štandardu SVG, ktorý je prirodzene
 anglický. Vysvetlenie významu jednotlivých transformácií je vždy
 uvedené pri anglickej verzii jej identifikátora.
Pozri tiež:
Hodnoty konštánt
SKLOŇ_Y
public static final int SKLOŇ_Y
 Alias pre SKLON_Y.
Pozri tiež:
Hodnoty konštánt
SKOLONENIE_Y
public static final int SKOLONENIE_Y
 Alias pre SKLON_Y.
Pozri tiež:
Hodnoty konštánt
typ
public final int typ
Uchováva informáciu o type trasformácie uloženej v tejto
 inštancii. Pozri: MATRIX, TRANSLATE, TRANSLATE_X, TRANSLATE_Y, SCALE, SCALE_X, SCALE_Y, ROTATE, SKEW, SKEW_X,
 SKEW_Y.
hodnota
public final double[] hodnota
Uchováva informácie o hodnotách konkrétnych parametrov
 podľa typu transformácie. Konkrétne transformácie majú
 stanovený určitý počet parametrov. Pozri: MATRIX, TRANSLATE, TRANSLATE_X, TRANSLATE_Y, SCALE, SCALE_X, SCALE_Y,
 ROTATE, SKEW, SKEW_X, SKEW_Y.
Podrobnosti konštruktorov
Transformácia
public Transformácia(int typ,
                     Double... hodnoty)
Konštruktor zabezpečujúci bezchybnú inicializáciu inštancie.
 Ak je typ mimo rozsahu povolených hodnôt, tak je automaticky
 nastavený na hodnotu MATRIX. Ak vo vstupných
 údajoch (v sérii parametrov hodnoty) niektorý
 parameter trasformácie chýba, je jeho hodnota automaticky
 nastavená podľa typu transformácie na predvolenú hodnotu
 podľa nasledujúcich pravidiel:
 
 
 ak je transformácia typu SCALE a chýba
 druhý parameter, tak je jeho hodnota nastavená podľa prvého
 parametra,
 ak je transformácia typu SCALE a chýba aj
 prvý parameter, tak je jeho hodnota nastavená na 1.0
 (a tá je následne skopírovaná do druhého parametra),
 ak je transformácia typu SCALE_X alebo
 SCALE_Y, tak je chýbajúcemu parametru
 (transformácia vyžaduje len jeden) nastavená hodnota
 1.0,
 vo všetkých ostatných prípadoch je namiesto každého
 chýbajúceho parametra doplnená hodnota 0.0.
 
Parametre:
typ – určuje typ rovinnej transformácie; ak zadaná hodnota
     nie je v množine povolených hodnôt: MATRIX,
     TRANSLATE, TRANSLATE_X, TRANSLATE_Y, SCALE, SCALE_X, SCALE_Y, ROTATE, SKEW,
     SKEW_X, SKEW_Y, tak je
     automaticky doplnená hodnota MATRIX
hodnoty – séria argumentov určujúcich hodnoty parametrov
     konkrétnej transformácie
Podrobnosti metód
daj
public AffineTransform daj()
Vráti objekt typu AffineTransform
 vyrobený podľa údajov o 2D SVG transformácii uložených v tejto
 inštancii.
Návratová hodnota:
nová inštancia triedy AffineTransform
toString
public String toString()
Prevedie túto inštanciu na reťazec – do textovej podoby
 v súlade so špecifikáciou SVG. Metóda sa pokúša nájsť
 najkratšiu reťazcovú reprezentáciu podľa údajov uložených
 v tejto inštancii.
Prekrývanie:
táto metóda prekrýva originálnu metódu toString v triede Object
Návratová hodnota:
prevedený reťazec obsahujúci text definície 2D SVG
     transformácie
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":9,"i32":9,"i33":9,"i34":9,"i35":10,"i36":10,"i37":10,"i38":10,"i39":9,"i40":9,"i41":9,"i42":9,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":9,"i50":9,"i51":9,"i52":9,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":9,"i84":9,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":9,"i109":9,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":9,"i133":9,"i134":9,"i135":9,"i136":9,"i137":9,"i138":9,"i139":9,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda SVGPodpora
java.lang.Object
SVGPodpora
public class SVGPodpora
extends Object
Táto trieda slúži na komunikáciu programovacieho rámca s okolím
 prostredníctvom základov štandardu SVG. Cieľom pri implementácii bolo
 najmä poskytnutie možnosti importu a exportu tvarov programovacieho rámca
 GRobot vo formáte SVG 1.1, resp. SVG 2.0. Aj keď v čase implementácie
 prvej verzie tejto triedy nebol návrh SVG 2.0 úplný, programovací rámec
 s jeho použitím od začiatku počíta a návrh SVG 2.0 bol implementovaný do
 procesu importu tvarov.
 
 Poznámka: Pri exporte nie sú využité
 vlastnosti SVG 2.0 (najmä takzvaný „bearing“ – aktuálne pootočenie,
 ktorý má v budúcnosti slúžiť na implementáciu korytnačej grafiky
 v rámci štandardu SVG), pretože súčasný softvér tento štandard nie
 je schopný spracovať, takže takto exportované údaje by neboli
 použiteľné.
 
 Spracovanie úplnej implementácie štandardu SVG by bolo príliš
 náročné. Rámec sa zameriava na úplné základy – import a export
 reprezentácie tvarov (úsečka, obdĺžnik, kružnica, elipsa, lomená
 čiara, polygón a cesta), import a export základnej reprezentácie
 farieb výplní a čiar a tiež hrúbok čiar a použitie geometrických
 transformácií tvarov. Rámec nepodporuje žiadne zložitejšie výplne,
 štýly/druhy čiar a nadpojenia čiar, posunutie počiatku transformácií,
 ani štýlovanie prostredníctvom kaskádových štýlov (CSS) a podobne.
 Trieda tieto vlastnosti ani nezachováva.
 (Jedinou drobnou výnimkou je automatický prevod vybraných CSS
 definícií uvedených v atribúte style="…" na hodnoty
 konkrétnych XML atribútov. Príklad: &lt;rect …
 style="fill:blue" /&gt; bude spracované tak, ako keby bolo uvedené
 v tvare &lt;rect … fill="blue" /&gt;. Avšak okrem vybraných CSS
 definícií ako fill, stroke, fill-opacity,
 stroke-opacity, stroke-width
 (a príbuzných ako: stroke-dasharray, stroke-linecap,
 stroke-miterlimit…)
 a transform sú
 všetky ostatné CSS definície ignorované. Tiež nie je analyzovaný
 obsah značky &lt;style&gt; … &lt;/style&gt;, z čoho vyplýva, že
 aj obsah atribútu class je ignorovaný.)
 Z toho dôvodu nie je vhodné použiť prorgamovací rámec na úpravu
 SVG súborov, ktoré boli vytvorené inými softvérmi (napríklad 
Inkscape). Stratilo
 by sa príliš veľa informácií. Ukážky vhodného použitia tejto triedy
 ukazujú nasledujúce príklady…
 
 Príklad:
 
 Tento príklad ukazuje spôsob vykreslenia importovaných SVG údajov
 v rámci podporovaných možností programovacieho rámca. Príklad potrebuje
 na svoje fungovanie ukážkový SVG súbor "Panak.svg", ktorý je
 k dispozícii na prevzatie pod zdrojovým kódom príkladu. Nakreslený
 obrázok je možné presúvať klikaním a ťahaním myšou.
 
 
import knižnica.Farba;
import knižnica.GRobot;
import knižnica.Svet;
import knižnica.ÚdajeUdalostí;
public class SVGZobraz extends GRobot
{
    // Konštruktor.
    private SVGZobraz()
    {
        // Nastavenie rozmerov plátien volaním nadradeného konštruktora:
        super(1200, 650);
        // Vypnutie predvoleného spôsobu automatického prekresľovania:
        Svet.nekresli();
        // Zabezpečenie toho, aby robot nebol skrytý po prvom konzolovom výpise:
        Svet.vypíš(this);
        // Prečítanie tvarov z SVG súboru:
        int prečítané = svgPodpora.čítaj("Panak.svg");
        // Overenie toho, či sa čítanie podarilo:
        if (-1 == prečítané)
        {
            // V prípade neúspechu je informácia vypísaná červenou farbou:
            Svet.farbaTextu(červená);
            Svet.vypíšRiadok("Čítanie súboru sa nepodarilo.");
        }
        else
        {
            // V prípade úspechu je vypísaný počet prečítaných tvarov:
            Svet.vypíšRiadok("Počet prečítaných tvarov: ", prečítané);
            vykresli();
        }
        // Spustenie časovača zapne kontrolu potreby prekreslenia sveta
        // v pravidelných časových inervaloch (pozri reakciu tik nižšie;
        // samozrejme, že ak sa zistí, že je prekreslenie sveta potrebné,
        // tak bude zároveň vykonané):
        Svet.spustiČasovač();
    }
    // V obsluhe udalosti časovača (tik) je zabezpečované prekresľovanie
    // sveta v pravidelných časových intervaloch (v prípade potreby).
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    // Po kliknutí (alebo ťahaní myšou – pozri nižšie) bude SVG obrázok
    // prekreslený na novej pozícii.
    @Override public void klik()
    {
        podlaha.vymažGrafiku();
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
            skočNaMyš(); else otočNaMyš();
        vykresli();
    }
    // Reakcia na ťahanie myšou je rovnaká ako na klik.
    @Override public void ťahanieMyšou()
    {
        klik();
    }
    // Vlastný tvar robota bude kružnica so „zárezom.“
    @Override public void kresliTvar()
    {
        kružnica();
        dopredu();
    }
    // Táto metóda slúži na nakreslenie prečítaného jednoduchého SVG obrázka.
    // (Jednoduchého v zmysle využitia základných možností formátu SVG,
    // s ktorými dovoľuje pracovať trieda SVGPodpora.)
    public void vykresli()
    {
        // Deklarácia a definícia premenných. Farbu bude treba na overenie
        // toho, či má kreslený tvar definovanú farbu výplne alebo čiary.
        // Počet uložený v premennej by mal mierne zvýšiť efektívnosť
        // vykonávania cyklu.
        Farba farba;
        int počet = svgPodpora.počet();
        // Cyklus – nakreslenie čiar a/alebo výplní všetkých tvarov.
        for (int i = 0; i &lt; počet; ++i)
        {
            // Kreslenie výplne:
            farba = svgPodpora.farbaVýplne(i);
            if (null != farba)
            {
                farba(farba);
                vyplňTvar(svgPodpora.dajVýsledný(i), true);
            }
            // Kreslenie čiary:
            farba = svgPodpora.farbaČiary(i);
            if (null != farba)
            {
                double hrúbkaČiary = svgPodpora.hrúbkaČiary(i) * mierka();
                if (Double.isFinite(hrúbkaČiary))
                    hrúbkaČiary(hrúbkaČiary);
                else
                    hrúbkaČiary(1);
                farba(farba);
                kresliTvar(svgPodpora.dajVýsledný(i), true);
            }
        }
        // Po dokončení každého kreslenia (prvé je vykonané pri spustení
        // aplikácie a ďalšie pri kliknutí alebo ťahaní myšou) je opätovne
        // nastavená hrúbka a farba čiary robota na 0.5 boda a červenú. To
        // ovplyvní nakreslenie vlastného tvaru robota – kružnice so „zárezom.“
        hrúbkaČiary(.5);
        farba(červená);
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("SVGZobraz.cfg");
        new SVGZobraz();
    }
}
 
  Panak.svg –
 SVG obrázok na prevzatie. 
 
 Výsledok:
 
 
 Vzhľad časti plochy sveta po spustení príkladu a miernom
 posunutí panáka myšou smerom nadol(plátno ukážky je orezané
 a zmenšené; veľkosť okna je po prvom spustení menšia, než veľkosť
 plochy).
 
  
 
 Príklad:
 
 Nasledujúca séria príkazov ukazuje import tvaru z SVG súboru a jeho
 použitie na kreslenie vlastného vyplneného tvaru robota. Príkazy
 vyžadujú na svoje fungovanie SVG súbor "SVGTvaryRobota.svg",
 ktorý je k dispozícii na prevzatie nižšie. (Pod ním nájdete rozšírenú
 verziu tohto príkladu.)
 
 
try
{
    svgPodpora.čítaj("SVGTvaryRobota.svg");
    Shape tvar = svgPodpora.dajVýsledný(0);
    final Oblasť tvarVOblasti = new Oblasť(
        SVGPodpora.presuňDoStredu(tvar));
 r.vyplňOblasť(tvarVOblasti));
}
catch (Exception e)
{
    e.printStackTrace();
}
 
  
SVGTvaryRobota.svg – SVG súbor (s tvarmi robota) na
 prevzatie 
 
 Nasledujúce rozšírenie príkladu pracuje so zapnutým interaktívnym režimom robota
 a sveta a používa tiež
 štandardú konfiguráciu sveta aj
 robota. Definuje aj dve tzv.
 zákaznícke vlastnosti. To sú také vlastnosti, ktoré sú definované nad
 rámec štandardnej konfigurácie (podrobnosti sú v komentároch). Zmenu
 tvaru docieli používateľ po spustení aplikácie zadaním a potvrdením
 príkazu „nastav tvar «číslo»“ vo vstupnom riadku, pričom pri
 použití súboru 
SVGTvaryRobota.svg sú použiteľné číselné hodnoty 1 – 3 na zmenu
 tvarov prečítaných zo súboru a nula, ktorá znamená predvolený tvar.
 
 
import knižnica.*;
import knižnica.SVGPodpora.Transformácia;
import java.awt.Shape;
public class SVGTvarRobota extends GRobot
{
    // Do tohto atribútu bude ukladaný tvar prevedený z SVG údajov na
    // oblasť (tento proces nazývame zjednodušene v komentároch nižšie aj
    // generovaním oblasti):
    private Oblasť tvarVOblasti = null;
    // Tento atribút slúži na detekciu zmeny veľkosti robota, aby mohol byť
    // tvar uložený v oblasti (definovanej vyššie) pregenerovaný (to znamená,
    // že pri každej zmene veľkosti robota sa oblasť znovu vygeneruje – tento
    // prístup nepočíta s príliš častými zmenami veľkosti robota):
    private double poslednáVeľkosť = 10.0;
    // V tomto atribúte je uložené poradové číslo naposledy prevedeného tvaru
    // z SVG údajov (ide o jednu z dvoch tzv. zákazníckych vlastností v tomto
    // príklade):
    private int poslednýNastavenýTvar = 1;
    // Toto je záložná hodnota predchádzajúceho atribútu – je to hodnota,
    // ktorá bola prečítaná z konfigurácie (ak jestvovala) a slúži na detekciu
    // zmien (aby bola naplnená litera zapísaná v príklade TestKonfigurácie
    // uvedenom v opise triedy ObsluhaUdalostí):
    private int prečítanýNastavenýTvar = 1;
    // V tomto atribúte je názov naposledy čítaného SVG súboru, ktorého
    // údaje majú slúžiť ako zdroj tvarov (ide o jednu z dvoch tzv.
    // zákazníckych vlastností v tomto príklade):
    private String poslednýČítanýSúbor = null;
    // Toto je záložná hodnota predchádzajúceho atribútu a je medzi nimi
    // rovnaký vzťah ako medzi dvomi celočíselnými atribútmi vyššie:
    private String menoSúboruZKonfigurácie = null;
    
    // Konštruktor.
    private SVGTvarRobota()
    {
        // Úprava rozmerov plátien volaním nadradeného konštruktora.
        super(800, 600);
        // Vypnutie automatického prekresľovania, pretože tento príklad
        // používa prekresľovanie v pravidelných časových intevaloch na
        // požiadanie (rovnako ako príklady uvedené v opise metódy
        // Svet.nebolPrekreslený() a triedy Obrázok).
        Svet.nekresli();
        // Tento príkaz zabezpečí, aby sa pri ďalších výpisoch metódami
        // sveta hlavný robot automaticky neskryl (vysvetlenie je uvedené
        // v poznámke v opise metódy Plátno.vypíš(…)):
        Svet.vypíš(this);
        // Definovanie obsluhy udalostí – obsluhujeme časovač, neúspešné
        // zadanie príkazu a konfiguráciu.
        new ObsluhaUdalostí()
        {
            // Toto je reakcia na udalosti časovača.
            @Override public void tik()
            {
                // Vždy, keď má vnútorný indikátor potreby prekreslenia
                // pravdivú logickú hodnotu (true), zariadime spustenie
                // prekreslenia sveta:
                if (Svet.neboloPrekreslené()) Svet.prekresli();
            }
            // Reakcia na potvrdenie vstupu je v interaktívnom režime
            // spustená vtedy, keď potvrdený príkaz nebol rozpoznaný,
            // čiže v prípade chybného príkazu.
            @Override public void potvrdenieVstupu()
            {
                // Vyššie opísanú situáciu vyriešime tak, že potvrdený
                // reťazec vrátime späť do príkazového riadka, aby ho
                // mohol používateľ opraviť a znova potvrdiť.
                Svet.textVstupnéhoRiadka(Svet.prevezmiReťazec());
            }
            
            // Táto reakcia je spustená, keď si svet potrebuje overiť,
            // či má zmysel zapisovať konfiguráciu, či sa zmenila hodnota
            // niektorej zákazníckej vlastnosti. (Svet túto reakciu vôbec
            // nemusí spustiť.)
            @Override public boolean konfiguráciaZmenená()
            {
                // Nasledujúce riadky obsahujú kontroly zmien hodnôt
                // zákazníckych vlastností:
                if (poslednýNastavenýTvar != prečítanýNastavenýTvar)
                    return true;
                if (poslednýČítanýSúbor != menoSúboruZKonfigurácie)
                    return true;
                // (Tu by nasledovali ďalšie kontroly zmien hodnôt.)
                return false;
            }
            // Táto reakcia dovoľuje zapísať zákaznícke vlastnosti do
            // konfiguračného súboru.
            @Override public void zapíšKonfiguráciu(Súbor súbor)
                throws java.io.IOException
            {
                // Zapisujeme hodnoty vlastností:
                súbor.zapíšVlastnosť("nastavenýTvar", poslednýNastavenýTvar);
                súbor.zapíšVlastnosť("čítanýSúbor", poslednýČítanýSúbor);
                // (Tu by nasledovali ďalšie zápisy hodnôt.)
            }
            // Táto reakcia umožňuje prečítanie hodnôt zákazníckych
            // vlastností z konfiguračného súboru.
            @Override public void čítajKonfiguráciu(Súbor súbor)
                throws java.io.IOException
            {
                // Čítanie hodnôt vlastností.
                // 
                // Pri čítaní zmeníme pri každej čítanej vlastnosti naraz
                // hodnotu skutočnej vlastnosti aj hodnotu premennej
                // slúžiacej na uchovanie prečítanej hodnoty (tá slúži ako
                // detektor zmien a je vyhodnocovaná v reakcii
                // konfiguráciaZmenená.
                poslednýNastavenýTvar = prečítanýNastavenýTvar =
                    súbor.čítajVlastnosť("nastavenýTvar",
                        (long)poslednýNastavenýTvar).intValue();
                poslednýČítanýSúbor = menoSúboruZKonfigurácie =
                    súbor.čítajVlastnosť("čítanýSúbor", poslednýČítanýSúbor);
                // (Tu by nasledovali ďalšie čítania hodnôt.)
            }
        };
        // Zapnutie interaktívneho (príkazového) režimu a registrácia robota
        // v rámci konfigurácie:
        Svet.interaktívnyRežim(true);
        interaktívnyRežim(true);
        Svet.registrujRobot(this);
        // Čítanie naposledy čítaného súboru (počiatočná hodnota null má
        // špeciálny význam – vtedy sa metóda pokúsi čítať súbor
        // s predvoleným názvom – pozri definíciu metódy čítaj nižšie).
        // Keďže úspešné vykonanie tejto metódy mení (resetuje) hodnotu
        // poradového čísla naposledy nastavovaného tvaru (čo je žiaduce
        // pri vykonaní z príkazového riadka), je pred týmto volaním hodnota
        // tohto číselného atribútu zálohovaná a po ňom spätne obnovená:
        int zálohaHodnotyTvaru = poslednýNastavenýTvar;
        čítaj(poslednýČítanýSúbor);
        poslednýNastavenýTvar = zálohaHodnotyTvaru;
        // Nastavenie tvaru podľa atribútu, ktorého hodnotu sme práve
        // zálohovali a obnovili (pozri komentár a kód vyššie):
        nastavTvar(poslednýNastavenýTvar);
        // Spustenie časovača (inak by nefungovalo prekresľovanie spomínané
        // pri príkaze Svet.nekresli(); v úvode tohto konštruktora):
        Svet.spustiČasovač();
    }
    
    /////////////////////////////////////////////////////////////////
    // ##   Výhodou interaktívneho režimu je, že všetky nové    ## //
    // ##   definované verejné metódy (spĺňajúce kritériá       ## //
    // ##   opísané pri metóde Svet.interaktívnyRežim(zapni))   ## //
    // ##   sa automaticky stávajú príkazmi použiteľnými        ## //
    // ##   v tomto režime…                                     ## //
    /////////////////////////////////////////////////////////////////
    
    // Vypíše aktuálny počet útvarov uložených vo vnútornom zásobníku
    // inštancie svgPodpora. To je zároveň horná hranica číselného rozsahu
    // použiteľného s metódou nastavTvar (nižšie).
    public void vypíšPočet()
    {
        Svet.vypíšRiadok("Počet tvarov v zásobníku: ", svgPodpora.počet());
    }
    // | Tento alias je definovaný len preto, aby bola v príkazovom riadku
    // | interaktívneho režimu použiteľná aj verzia tohto príkazu bez
    // | diakritiky.
    public void vypisPocet() { vypíšPočet(); }
    
    // Táto metóda slúži na prečítanie SVG súboru so zadaným menom. Tvary,
    // ktoré sa podaria nájsť inštancii svgPodpora budú použiteľné na
    // nastavenie vlastného tvaru robota.
    public void čítaj(String meno)
    {
        // Ak je namiesto názvu súboru zadaná hodnota null, tak je použitý
        // preddefinovaný názov súboru „SVGTvaryRobota.svg“:
        if (null == meno) meno = "SVGTvaryRobota.svg";
        Svet.vypíšRiadok("Čítam súbor: ", meno);
        // Pri každom novom čítaní sú z vnútorného zásobníka tvarov
        // inštancie svgPodpora vymazané všetky tvary:
        svgPodpora.vymaž();
        // Do premennej výsledok najprv vložíme hodnotu -1, ktorá signalizuje
        // chybu:
        int výsledok = -1;
        // V nasledujúcom bloku na zachytávanie výnimiek sa pokúsime
        // prečítať súbor so zadaným menom:
        try
        {
            // Ak sa čítanie podarí, tak v premennej výsledok bude počet
            // prečítaných tvarov (aj táto metóda môže vrátiť hodnotu -1
            // bez vzniku výnimky, takže pôvodná mínus jednotka môže byť
            // bez nášho vedomia prepísaná novou, ale to vôbec neprekáža,
            // lebo výsledná informácia je totožná):
            výsledok = svgPodpora.čítaj(meno);
        }
        catch (Exception e)
        {
            // V prípade vzniknutia výnimky je na štandardnom chybovo výstupe
            // vypísaná krátka správa o pôvode („stope v zásobníku“) chyby:
            e.printStackTrace();
        }
        // Podľa hodnoty premennej výsledok je vypísané hlásenie a prípadne
        // vykonané ďalšie kroky…
        if (-1 == výsledok)
            Svet.vypíšRiadok("Čítanie súboru zlyhalo!");
        else
        {
            // V prípade úspechu je okrem vypísania správy nastavený
            // predvolený tvar robota a vymazaná oblasť obsahujúca
            // vlastný tvar:
            Svet.vypíšRiadok("Počet prečítaných tvarov: ", výsledok);
            poslednýČítanýSúbor = meno;
            poslednýNastavenýTvar = 0;
            tvarVOblasti = null;
        }
        vypíšPočet();
    }
    // | Tento alias je definovaný len preto, aby bola v príkazovom riadku
    // | interaktívneho režimu použiteľná aj verzia tohto príkazu bez
    // | diakritiky.
    public void citaj(String meno) { čítaj(meno); }
    // Táto verzia metódy dovoľuje použitie tohto príkazu bez zadania
    // parametra (namiesto ktorého je dosadená predvolená hodnota null).
    public void čítaj() { čítaj(null); }
    // | Tento alias je definovaný len preto, aby bola v príkazovom riadku
    // | interaktívneho režimu použiteľná aj verzia tohto príkazu bez
    // | diakritiky.
    public void citaj() { čítaj(); }
    
    // Táto metóda vygeneruje taký tvar oblasti, ktorý bude použiteľný ako
    // vlastný tvar robota. Oblasť musí byť umiestnená v strede plátna, inak
    // by bol vlastný tvar posunutý oproti skutočnej polohe robota. Tvar
    // oblasti je vygenerovaný z SVG tvaru, ktorý je uložený vo vnútornom
    // zásobníku inštancie svgPodpora pod poradovým číslom určeným parametrom
    // „ktorý.“ Metóda tiež zariadi, aby bola veľkosť tvaru oblasi prispôsobená
    // podľa aktuálnej veľkosti a mierky robota.
    public void nastavTvar(int ktorý)
    {
        // Hodnota nula znamená predvolený tvar robota.
        if (0 == ktorý)
        {
            poslednýNastavenýTvar = 0;
            tvarVOblasti = null;
            Svet.vypíšRiadok("Nastavený predvolený tvar.");
        }
        else
        {
            // Všetky ostatné hodnoty znamenajú poradové číslo tvaru vo
            // vnútornom zásobníku inštancie svgPodpora, pričom metódy
            // dávajúce tvary smú prijímať aj záporné čísla – v tom prípade
            // to znamená n-tý tvar od konca zásobníka. Kladné hodnoty
            // musia byť odlíšené, pretože metóda funguje rovnako ako
            // všetko v jazyku Java – nula je index prvého tvaru. Index
            // vypočítame zo zadaného poradového čísla jednoducho, je to
            // hodnota: ktorý − 1.
            Shape tvar = svgPodpora.dajVýsledný(ktorý &lt; 0 ? ktorý : ktorý &#45; 1);
            if (null == tvar)
            {
                // Ak metóda dajVýsledný vráti null, znamená to, že
                // tvar nebol nájdený (lebo požadovaný index je mimo
                // rozsahu).
                Svet.pípni();
                Svet.vypíšRiadok("Tvar s poradovým číslom ",
                    ktorý, " nebol nájdený.");
            }
            else
            {
                // V prípade úspešne nájdeného tvaru najprv upravíme
                // jeho veľkosť podľa aktuálnej veľkosti a mierky robota,
                // pričom ak sú veľkosť robota v súčine s mierkou rovné
                // hodnote desať, tak to značí, že veľkosť tvaru nemá
                // byť zmenená.
                // Atribút poslednáVeľkosť bude slúžiť na overenie zmeny
                // veľkosti vlastného tvaru a zároveň ho použijeme
                // v nasledujúcom kroku (na overenie potreby úpravy veľkosti
                // tvaru a na jej prípadné vykonanie).
                poslednáVeľkosť = veľkosť() * mierka();
                if (10.0 != poslednáVeľkosť)
                    // Na zmenu veľkosti tvaru (v prípade, že je potrebné ju
                    // upraviť) je použitá transformácia MIERKA:
                    tvar = SVGPodpora.dajVýsledný(
                        tvar, new Transformácia(
                            Transformácia.MIERKA,
                            poslednáVeľkosť / 10.0));
                // Potom presunieme vrátený tvar do stredu súradnicovej
                // sústavy grafického robota. Môžeme použiť metódu
                // SVGPodpora.presuňDoStredu(tvar):
                tvarVOblasti = new Oblasť(SVGPodpora.presuňDoStredu(tvar));
                // Nakoniec zaznamenáme poradové číslo použitého tvaru:
                poslednýNastavenýTvar = ktorý;
                Svet.vypíšRiadok("Nastavený tvar: ", ktorý);
            }
        }
    }
    
    // Táto verzia metódy dovoľuje použitie príkazu tohto bez zadania
    // parametra (namiesto ktorého je dosadená predvolená hodnota 1).
    public void nastavTvar() { nastavTvar(1); }
    
    // Táto reakcia zabezpečuje kreslenie vlastného (a v tomto prípade aj
    // predvoleného) tvaru robota.
    @Override public void kresliTvar()
    {
        // Ak je definovaná oblasť s vlastným tvarom, tak sa vykoná vetva
        // zabezpečujúca nakreslenie vlastného tvaru (s nejakými kontrolami).
        if (null != tvarVOblasti && 0 != poslednýNastavenýTvar)
        {
            // Ak sa zmenila veľkosť robota (alebo mierka), tak nastane
            // pregenerovanie tvaru:
            if (poslednáVeľkosť != veľkosť() * mierka())
                nastavTvar(poslednýNastavenýTvar);
            // Podľa toho, či je aktivované vypĺňanie tvarov robotom
            // bude oblasť vyplnená alebo obkreslená:
            if (vypĺňaTvary())
                vyplňOblasť(tvarVOblasti);
            else
                obkresliOblasť(tvarVOblasti);
        }
        else
        {
            // Alternatívna vetva obsahuje len príkaz kreslenia predvoleného
            // tvaru robota:
            trojzubec();
        }
    }
    
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("SVGTvarRobota.cfg");
        new SVGTvarRobota();
    }
}
 
 Výsledok:
 
 
 Ukážka vzhľadu okna po
 prvom spustení aplikácie(ukážka je zmenšená).
 
  
 
 Príklad:
 
 Tento príklad ukazuje ako previesť (konvertovať) rastrový
 obrázok prečítaný z PNG súboru na množinu kruhov s veľkosťami
 podľa lokálneho jasu konkrétnych častí obrázka. Výsledok konverzie
 je uložený do vektorového SVG súboru.
 
 Budeme postupovať tak, že najskôr prečítame bitmapový obrázok
 zo súboru s názvom „mola.jpeg,“ obrázok virtuálne rozdelíme na bloky
 veľké 10 × 10 bodov (pixelov), vypočítame priemerný farebný jas
 bodov v každom bloku a podľa týchto hodnôt vyrobíme kruhy tvoriace
 mozaiku nového obrázka vo formáte SVG. (Viaceré hodnoty v príklade
 sú zadané „napevno,“ nie univerzálne. Dôvodom je úsilie
 o nezvyšovanie zložitosti príkladu.)
 
 
import knižnica.*;
public class SVGKruhy extends GRobot
{
    // Konštruktor.
    private SVGKruhy()
    {
        // Úprava rozmerov plátna volaním nadradeného konštruktora.
        super(800, 600);
        // Skryje robot:
        skry();
        // Vypnutie automatického prekresľovania.
        Svet.nekresli();
        // Vytvorí obrázok zo súboru uloženého na pevnom disku
        // (prípadne inej jednotke, ktorá je aktuálna):
        Obrázok obrázok = Obrázok.prečítaj("mola.jpeg");
        // Zobrazí prečítaný obrázok v mierke 1 : 2, keďže obrázok má
        // v porovnaní s plátnami dvojnásobné rozmery. (Samozrejme, že
        // toto nie je univerzálne riešenie. Univerzálne riešenie by muselo
        // porovnať rozmery obrázka s rozmermi plátien a na základe toho
        // vypočítať mierku.)
        obrázok(obrázok, 0.5);
        // Ak teraz presmerujeme kreslenie na strop, kresba obrázka na
        // podlahe zostane neporušená a môžeme s ňou manipulovať samostatne
        // (to nesúvisí s grafikou samotného obrázka, tá zostane neporušená
        // i tak):
        kresliNaStrop();
        // Umiestnime robot na počiatočnú pozíciu – do ľavého dolného rohu
        // plátna. Poloha robota je dôležitá len pre výstupné SVG údaje.
        skočNa(Svet.najmenšieX() + 2.5, Svet.najmenšieY() + 2.5);
        // Nastavenie (konštantnej) veľkosti robota má zmysel najmä pri
        // inej verzii konverzie obrázka, ale výkonu aplikácie to neublíži:
        veľkosť(2.5);
        
        // Úlohou nasledujúcich štyroch (postupne sa vnárajúcich) cyklov
        // „for“ je prechádzať po blokoch 10 × 10 pixelov po obrázku,
        // vypočítať z každého bloku priemer jasu (alebo farebnosti, prípadne
        // iného parametra) a z vypočítaného údaja vyrobiť tvar, ktorý bude
        // uložený do SVG údajov.
        //
        // Poznámky:
        // ---------
        //
        // Využívané sú len metódy/príkazy programovacieho rámca GRobot.
        // Toto riešenie síce nie je optimálne, ale je odolné voči chybám,
        // pretože spracúvané hodnoty podstupujú viacnásobnú kontrolu.
        // Keby sme však potrebovali dávkovo spracovať veľké množstvo údajov
        // (napríklad mnoho obrázkov), bolo by nevyhnutné riešenie
        // optimalizovať. Odporúčame priamu prácu s rastrom:
        //
        //    int[] údaje = ((java.awt.image.DataBufferInt)obrázok.
        //        getRaster().getDataBuffer()).getData();
        //    …
        //
        // Takto získané celočíselné pole obsahuje farebné (ARGB) údaje
        // o jednotlivých bodoch obrázka počnúc ľavým horným rohom,
        // pokračujúc doprava a po jednotlivých riadkoch až na koniec.
        //
        for (double y = obrázok.najmenšieY();
            y &lt;= obrázok.najväčšieY(); y += 10.0)
        {
            for (double x = obrázok.najmenšieX();
                x &lt;= obrázok.najväčšieX(); x += 10.0)
            {
                // Do nasledujúcich premenných budú ukladané údaje určené
                // na výsledné spracovanie. V tomto prípade je to celková
                // suma hodnôt farebných zložiek všetkých bodov a počet
                // bodov, ktoré boli skutočne vyhodnotené.
                int suma = 0;
                int počet = 0;
                // Spracovanie bloku 10 × 10 pixelov:
                for (int j = 0; j &lt; 10; ++j)
                {
                    for (int i = 0; i &lt; 10; ++i)
                    {
                        // Najprv je prečítaná farba každého bodu. Bod je
                        // čítaný bez ohľadu na polohu robota. Súradnice
                        // bodu sú určené výhradne riadiacimi premennými
                        // štyroch cyklov „for“:
                        Farba farba = obrázok.farbaBodu(x + i, y + j);
                        // Ak neboli požadované súradnice mimo hraníc
                        // obrázka, tak je získaná farba spracovaná:
                        if (žiadna != farba)
                        {
                            // Zvýši sa počítadlo spracovaných farieb:
                            ++počet;
                            // A súčet všetkých farebných zložiek je pridaný
                            // do celkovej sumy:
                            suma += farba.červená() +
                                farba.zelená() + farba.modrá();
                        }
                    }
                }
                // Vyrobiť tvar má zmysel len ak sú k dispozícii údaje
                // na spracovanie.
                if (0 != počet)
                {
                    // Upravíme veľkosť robota podľa priemeru vypočítaného
                    // z farebných hodnôt všetkých spracovaných bodov
                    // (čísla vo vzorci sme získali empiricky – to jest
                    // čiastočne odhadom na základe predchádzajúcich
                    // vedomostí a skúseností a čiastočne „doladením“ podľa
                    // estetiky výsledku):
                    veľkosť(3.25 &#45; ((suma / (3 * počet)) / 80.0));
                    // Do inštancie svgPodpora pridáme čierny krúžok na
                    // pozícii robota s veľkosťou robota:
                    svgPodpora.pridaj(kruh(), "fill", "black");
                }
                // Posunutie robota o kúsok doprava – synchrónne s prechodom
                // na ďalší spracúvaný blok pixelov:
                skoč(5.0, 0.0);
            }
            // Posunutie robota na začiatok vyššieho riadka:
            skočNa(Svet.najmenšieX() + 2.5, polohaY() + 5.0);
            // Prekreslenie sveta (skrytím tohto príkazu do komentára sa
            // proces konverzie značne urýchli):
            Svet.prekresli();
        }
        
        // Skrytie obrázka na podlahe:
        podlaha.priehľadnosť(0);
        // Uloženie SVG súboru (s predvoleným titulkom a prepisujúc
        // prípadný pôvodný súbor):
        svgPodpora.zapíš("mola-bodkova.svg", null, true);
        // Opätovné zapnutie automatického prekresľovania.
        Svet.kresli();
    }
    
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("SVGKruhy.cfg");
        new SVGKruhy();
    }
}
 
  mola.jpeg –
 pôvodný rastrový obrázok na prevzatie. 
 
 
 Pôvodný rastrový obrázok(zobrazovaný
 obrázok je oproti pôvodnému obrázku 
na prevzatie zmenšený
 o 50 %).
 
  
 
 Výsledok:
 
 
 Výsledný 
SVG obraz.
 
  
 
 Príklad:
 
 Tento príklad ukazuje vytvorenie fraktálneho útvaru rastlinky
 s pomocou korytnačej grafiky grafického robota a jej uloženie do HTML
 súboru obsahujúceho SVG definíciu. Generovanie rastlinky používa
 náhodné čísla, preto každé spustenie vygeneruje a uloží unikátny
 obrázok. V skutočnosti sú ukladané dva súbory – rastrový obrázok vo
 formáte PNG a HTML obsahujúce SVG. Ďalšie podrobnosti o fungovaní
 príkladu sú v jeho komentároch.
 
 
import knižnica.*;
// Túto triedu Javy reprezentujúcu 2D úsečku potrebujeme na pridávanie
// jednotlivých úsečiek do inštancie svgPodpora.
import java.awt.geom.Line2D;
// V tomto príklade je implementovaných viacero mechanizmov, ktoré priamo
// nesúvisia s formátom SVG. Všetko je podrobne vysvetlené v komentároch.
// SVG formátu sa dotýkajú všetky pasáže používajúce triedu SVGPodpora
// a inštanciu svgPodpora.
public class SVGRastlinka extends GRobot
{
    // Súkromný konštruktor.
    private SVGRastlinka()
    {
        // Úprava rozmerov plátna volaním nadradeného konštruktora.
        super(800, 640);
        // Vypnutie predvoleného automatického prekresľovania.
        Svet.nekresli();
        // Obsluha udalostí zabezpečujúca prekresľovanie sveta
        // v pravidelných časových intervaloch.
        new ObsluhaUdalostí()
        {
            @Override public void tik()
            {
                if (Svet.neboloPrekreslené()) Svet.prekresli();
            }
        };
        // Spustenie časovača (na pravidelné prekresľovanie).
        Svet.spustiČasovač();
        // Úvodné nastavenie robota a spustenie kreslenia rastlinky.
        skoč(0, -300);
        farba(0, 120, 0, 120);
        rastlinka(96);
        // Skrytie robota.
        skry();
    }
    // Atribúty slúžiace na uchovanie súradníc úsečky.
    private double x0, y0, x1, y1;
    // Pomocná metóda na zaznamenanie aktuálnej polohy robota.
    private void uložPolohu()
    {
        // Je dôležité prepočítať súradnice zo súradnicového priestoru
        // rámca do súradnicového priestoru, ktorý je používaný formátom
        // SVG. Vo viacerých prípadoch je konverzia vykonaná automaticky,
        // ale tu to nie je možné, pretože čítame priamo polohu robota,
        // ktorú ukladáme ako bezrozmerné číslo, ktorého pôvod nie je možné
        // detegovať žiadnou súčasťou programovacieho rámca alebo Javy. Rovnaká situácia
        // nastáva aj v metóde pridajÚsečku (nižšie).
        // 
        // O súradnicových priestoroch je viac napísané v príklade v opise
        // metódy cesta() triedy GRobot a v opisoch metód zapíš a čítaj
        // v tejto triede (SVGPodpora)…
        x0 = x1 = Svet.prepočítajX(polohaX());
        y0 = y1 = Svet.prepočítajY(polohaY());
    }
    // Pomocná metóda na pridanie úsečky do SVG údajov.
    private void pridajÚsečku()
    {
        // Poznámka: Od 17. 5. 2022 je definovaná metóda SVG podpory:
        // pridajÚsečku
        // Jej použitie by tento príklad zjednodušilo.
        // Definícia tejto pomocnej metódy by nebola potrebná.
        // Je dôležité prepočítať súradnice zo súradnicového priestoru
        // rámca do súradnicového priestoru, ktorý je používaný formátom
        // SVG. Podrobnejšie je to vysvetlené v komentároch v metóde
        // uložPolohu (vyššie).
        x0 = x1; x1 = Svet.prepočítajX(polohaX());
        y0 = y1; y1 = Svet.prepočítajY(polohaY());
        // Z prevedených súradníc vytvoríme úsečku, ktorú vložíme do
        // vnútorného zásobníka tvarov inštancie svgPodpora a vzápätí
        // upravíme jej vizuálne vlastnosti.
        svgPodpora.pridaj(new Line2D.Double(x0, y0, x1, y1));
        svgPodpora.hrúbkaČiary(-1, hrúbkaČiary());
        svgPodpora.farbaČiary(-1, farba());
    }
    // Rekurzívna metóda na kreslenie rastlinky
    private void rastlinka(double dĺžka)
    {
        if (dĺžka &lt; 2) return;
        // V komentároch v tejto metóde vysvetlíme princípy, ktorými sa
        // riadi jej vykonávanie. Na zjednodušenie ignorujme v najbližších
        // úvahách rekurzívne volanie. (Aj tak sa nakoniec ukáže, že ak
        // správne uvažujeme, tak sa ním nemusíme zaoberať.)
        // Hlavná zásada znie:
        // -------------------
        // 
        //   #######################################################
        //   ##  Po vykonaní tejto metódy musí mať robot rovnakú  ##
        //   ##  orientáciu a polohu ako mal pred jej vykonaním.  ##
        //   #######################################################
        // „Vypočítame,“ respektíve náhodne vygenerujeme, dva uhly, o ktoré
        // sa bude robot otáčať pred prechodom do rekurzívnej vetvy. Uhly
        // si musíme zapamätať v lokálnych premenných, aby sme boli schopní
        // zabezpečiť dodržanie hlavnej zásady (vyššie).
        double uhol1 = Svet.náhodnéReálneČíslo(0, 30);
        double uhol2 = Svet.náhodnéReálneČíslo(0, 30);
        // Nastavíme hrúbku čiary a položíme pero:
        hrúbkaČiary(dĺžka / 12);
        položPero();
        // Prostredný z nasledujúcej trojice príkazov mení polohu robota.
        // Túto zmenu treba na konci metódy vrátiť naspäť (v súlade
        // s dodržaním hlavnej zásady uvedenej vyššie). Keďže príkazom
        // vyššie sme položili pero, robot kreslí čiaru. Nakreslenú úsečku
        // zároveň zaznamenáme do SVG údajov metódami uložPolohu
        // a pridajÚsečku.
        uložPolohu();
        dopredu(dĺžka);
        pridajÚsečku();
        // Poznámka: Od 17. 5. 2022 je definovaná metóda SVG podpory:
        // pridajÚsečku
        // Jej použitie by tento príklad zjednodušilo.
        // Definícia pomocnej metódy pridajÚsečku() by nebola potrebná
        // a namiesto jej volania (vyššie) by sme volali:
        // svgPodpora.pridajÚsečku(this);
        // Pootočenie doprava vlastne zjednodušene znamená odčítanie
        // zadaného uhla od aktuálneho uhla. Súčet všetkých pootočení
        // musí byť rovný nule. Toto je prvé pootočenie v zápornom smere:
        vpravo(uhol1);
        // Prvé rekurzívne volanie – tu nastáva vetvenie rastlinky vpravo:
        rastlinka(dĺžka &#45; Svet.náhodnéReálneČíslo(5, 16));
        // Toto pootočenie v kladnom smere vykompenzuje predchádzajúce
        // prvé záporné pootočenie, no zároveň robot pootočí o ďalší úsek
        // v kladnom smere (doľava):
        vľavo(uhol1 + uhol2);
        // Prvé rekurzívne volanie – tu nastáva vetvenie rastlinky vľavo:
        rastlinka(dĺžka &#45; Svet.náhodnéReálneČíslo(5, 16));
        // Posledné pootočenie vykompenzuje poslednú zmenu orientácie na nulu:
        vpravo(uhol2);
        // Nakoniec vrátime zmenu polohy tak, aby sa robot vrátil do svojej
        // východiskovej polohy. Musíme to urobiť až po vykompenzovaní
        // všetkých zmien orientácie, inak by sa robot vrátil na iné miesto.
        // Vďaka dodržaniu hlavnej zásady si nemusíme robiť starosti s tým,
        // čo sa udeje s polohou a orientáciou robota počas rekurzívneho
        // volania pretože práve dodržanie tejto zásady zabezpečí, že po
        // návrate z rekurzívneho volania bude poloha a orientácia robota
        // zachovaná. Z pohľadu orientácie a polohy sa rekurzívnym volaním
        // nič nezmenilo. Bez tohto faktu by sa s týmto typom fraktálneho
        // kreslenia vôbec nedalo pracovať. Práve preto je zásada uvedená
        // na začiatku klasifikovaná ako hlavná. 
        zdvihniPero();
        dozadu(dĺžka);
    }
    // Tento atribút slúži na číslovanie verzií uložených grafických súborov.
    private static int n = 0;
    // Táto metóda slúži na uloženie ďalšej verzie vygenerovaného obrázka
    // v dvoch formátoch – PNG a HTML obsahujúce SVG definície.
    private static void uložĎalšíObrázok(String názov)
    {
        // Keďže v tomto príklade je implementované automatické
        // prekresľovanie časovačom, je potrebné pred uložením
        // prekresliť svet. Mohlo by sa totiž stať, že fáza ukladania
        // by predbehla fázu prekreslenia, takže by sa do súboru vo formáte
        // PNG uložil neúplný obrázok (SVG údaje sú vkladané do objektu
        // svgPodpora priebežne a nesúvisia s prekresľovaním).
        Svet.prekresli();
        // Zápis cyklu „for“ s chýbajúcim podmieneným výrazom (nižšie) znamená
        // „nekonečný cyklus.“ Žiadny cyklus nesmie byť pri programovaní
        // nekonečný! Spôsobovalo by to uviaznutie. Aj v tomto prípade nejde
        // o skutočný nekonečný cyklus, ale o cyklus, na ktorom sa usilujeme
        // ukázať také opakovanie, ktorého podmienky ukončenia nie je možné
        // zapísať v tvare logických (booleovských) výrazov.
        // 
        // V tomto prípade ide o to, aby sa cyklus ukončil až po úspešnom
        // zápise obidvoch grafických súborov – PNG a HTML obsahujúce SVG
        // definície (ďalej HTML/SVG). To znamená, že ďalšia iterácia
        // nastáva iba v prípade neúspešného zápisu jedného zo súborov.
        // Ak zlyhá zápis PNG súboru, tak vznikne výnimka, o ktorej je
        // poslaná krátka správa na chybový konzolový výstup (err)
        // a pokračuje sa ďalšou iteráciou. Ak zlyhá zápis HTML/SVG
        // súboru, tak sa preruší vykonávanie aktuálnej iterácie
        // (a akoby mimochodom sa vymaže práve zapísaný PNG súbor, aby
        // vo výsledku obsahy oboch typov súborov korešpondovali – je to
        // obeť princípu – takáto situácia môže nastať v takom prípade,
        // ak používateľ vymaže niektorý PNG súbor, ale ponechá HTML/SVG
        // súbor, inak by nastať nemala) a pokračuje sa nasledujúcou
        // iteráciou. Ak nezlyhá zápis ani jedného súboru, tak je činnosť
        // metódy ukončená. V každom z uvedených prípadov je vykonaný blok
        // finally, v ktorom nastáva zvyšovanie hodnoty počítadla n (ktoré
        // slúži na číslovanie verzií ukladaných súborov). Celý tento
        // relatívne komplikovaný (prinajmenšom komplikovane znejúci)
        // mechanizmus vedie k nasledujúcemu výslednému efektu:
        // 
        // Predpokladajme, že program je spustený prvý raz a nemá šancu
        // jestvovať ani jeden súbor s obrázkom (PNG alebo HTML/SVG). Ak
        // sa nevyskytne žiadny nepredvídateľný problém (napr. hardvérové
        // zlyhanie), tak budú obidva súbory (.png a ) korektne
        // zapísané, metóda bude hneď po prvom pokuse (to jest prvej
        // iterácii „nekonečného cyklu“) ukončená, no ešte pred skončením
        // stihne aktualizovať hodnotu počítadla n (to jest zvýšiť ju
        // o jeden v bloku finally, pretože blok finally má to výsostné
        // postavenie, že je vykonaný vždy).
        // 
        // Teraz predpokladajme, že program je spustený n-tý raz a jestvuje
        // bližšie neurčený počet uložených PNG a HTML/SVG súborov. Zápis
        // PNG súboru bude zlyhávať, dokedy bude jestvovať súbor s aktuálnym
        // poradovým číslom, pričom po každom ďalšom pokuse sa poradové
        // číslo zvýši o jeden. Pri prvom poradovom čísle, pre ktoré nebude
        // jestvovať prislúchajúci súbor zápis uspeje a ďalej sa bude
        // pokračovať tak ako v predchádzajúcom prípade. Algoritmus bude
        // úspešný aj v prípade, že by príčina zlyhania bola iná. Ukončí
        // sa jednoducho pri prvom úspechu.
        // 
        // Aby sme zamedzili uviaznutiu v nekonečnom cykle v takom prípade,
        // keď je cieľové umiestnenie súborov na zápis chránené proti zápisu,
        // je vo vetve catch umiestnená kontrola, ktorá overí, či súbor
        // s aktuálnym poradovým číslom jestvuje. Ak nie, znamená to, že
        // príčina zlyhania bola zrejme iná a vykonávanie metódy bude
        // predčasne ukončené. Algoritmus by vďaka tejto kontrole nemal
        // uviaznuť.
        // 
        // Implementácia tohto algoritmu by samozrejme mohla byť aj iná, no
        // cieľom bolo ukázať možnosť vytvorenia takého cyklu, ktorý nie je
        // riadený výhradne booleovskými podmienkami.
        for (;;)
        {
            try
            {
                // Pokus o uloženie PNG súboru.
                Svet.uložObrázok(názov + "-" + n + ".png");
                // Pokus o uloženie HTML/SVG súboru.
                if (-1 == svgPodpora.zapíš(názov + "-" + n + ".html"))
                {
                    Súbor.vymaž(názov + "-" + n + ".png");
                    continue;
                }
                // Ukončenie – sem sa vykonávanie algoritmu dostane len
                // ak boli obidva zápisy úspešné.
                return;
            }
            catch (Throwable t)
            {
                // Oznámenie o chybe na chybovú konzolu.
                System.err.println(t.getMessage());
                // Test uviaznutia pri jednotke chránenej na zápis.
                if (!Súbor.jestvuje(názov + "-" + n + ".png"))
                {
                    // Oznámenie možnej príčiny a ukončenie.
                    System.err.println("Disk je pravdepodobne " +
                        "chránený proti zápisu!");
                    return;
                }
            }
            finally
            {
                // Tento príkaz sa vykoná na konci každej iterácie, ale aj
                // tesne pred skončením metódy (popri vykonaní príkazu
                // return). Zabezpečuje postupné zvyšovanie hodnoty
                // atribútu n, ktorý slúži na číslovanie zapisovaných súborov.
                ++n;
            }
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("svg-rastlinka.cfg");
        try
        {
            // Spustenie časomiery, vygenerovanie rastlinky
            // a zastavenie časomiery:
            Svet.spustiČasomieru();
            new SVGRastlinka();
            double čas = Svet.zastavČasomieru();
            // Uloženie vygenerovanej rastlinky do súborov vo formátoch
            // PNG a HTML/SVG:
            uložĎalšíObrázok("rastlinka");
            // Vypísanie výsledku merania (času) na konzolu sveta
            // a systémovú konzolu:
            Svet.vypíšRiadok("Kreslenie rastlinky trvalo: ", čas, "s");
            System.out.println("Kreslenie rastlinky trvalo: " + čas + " s");
            // Uloženie textov (momentálne jediného riadka) konzoly sveta
            // do schránky operačného systému:
            Svet.textyDoSchránky();
        }
        catch (Throwable t)
        {
            // Oznámenie o prípadnej chybe:
            t.printStackTrace();
        }
    }
}
 
 Výsledok:
 
 
 Ukážka možného výstupu(výsledný
 HTML súbor si môžete pozrieť 
tu).
 
 Táto trieda umožňuje aj veľmi primitívne spracovanie textových SVG
 definícií. So zreteľom na široké možnosti štandardu SVG na prezentáciu
 textových (znakových) informácií sú možnosti tejto triedy skutočne
 primitívne. Ide v podstate len o prečítanie a zápis obsahu značky
 &lt;text&gt; a o poskytnutie základných geometrických
 transformácií.
 
  
 
 Jeden celkom užitočný príklad použitia SVG podpory je v opise
 metódy vajce.
 
  
 
 Použité zdroje:
 
 
 
Andronikos, Nikos (Canon, Inc.) –
 Atanassov,
 Rossen (Microsoft Co.) – 
Bah, Tavmjong (Invited Expert) –
 
Bellamy-Royds, Amelia (Invited Expert) –
 Birtles,
 Brian (Mozilla Japan) – 
Brinza, Bogdan (Microsoft Co.) –
 
Concolato, Cyril (Telecom ParisTech) –
 Dahlström,
 Erik (Invited Expert) – 
Lilley, Chris (W3C) – 
McCormack, Cameron
 (Mozilla Corporation) – 
Schepers, Doug (W3C) –
 Schulze, Dirk
 (Adobe Systems) – 
Schwerdtfeger, Richard (IBM) –
 Takagi, Satoru
 (KDDI Corporation) – 
Watt, Jonathan (Mozilla Corporation):
 
Scalable Vector Graphics (SVG) 2. W3C
 Editor’s Draft 10 July 2016. Copyright © 2016 W3C® (MIT,
 ERCIM, Keio, Beihang). W3C liability, trademark and document use rules
 apply. Citované: 2016 – 2018.
 
 
Andronikos, Nikos (Canon, Inc.) –
 Atanassov,
 Rossen (Microsoft Co.) – 
Bah, Tavmjong (Invited Expert) –
 
Bellamy-Royds, Amelia (Invited Expert) –
 Birtles,
 Brian (Mozilla Japan) – 
Brinza, Bogdan (Microsoft Co.) –
 
Concolato, Cyril (Telecom ParisTech) –
 Dahlström,
 Erik (Invited Expert) – 
Lilley, Chris (W3C) –
 McCormack, Cameron
 (Mozilla Corporation) – 
Schepers, Doug (W3C) –
 Schulze, Dirk
 (Adobe Systems) – 
Schwerdtfeger, Richard (IBM) –
 Takagi, Satoru
 (KDDI Corporation) – 
Watt, Jonathan (Mozilla Corporation):
 Scalable
 Vector Graphics (SVG) 2. W3C Working Draft 15 September 2015.
 Copyright © 2015 W3C® (MIT, ERCIM, Keio, Beihang). W3C
 liability, trademark and document use rules apply. Citované: 2016 –
 2018.
 
 
SVG Tutorial. 
W3Schools.com.
 
 
 
Buck, Warren: Goniometric
 formulas. Planetmath.org, 2007.
 
 
Weisstein, Eric W.: Ellipse.
 Wolfram MathWorld.
 
 
User:Dilma –
 
User:Kevin:
 
How to calculate the tangent angle with the axis of
 an ellipse? Mathematics Stack Exchange (calculus), 2013.
 
 (Zdroje citované: 2016 – 2018.)
 
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
SVGPodpora.Transformacia
 Alias pre Transformácia.
static class 
SVGPodpora.Transformácia
Táto trieda slúži na uchovanie pôvodných informácií
 o transformáciách rozpoznávaných z textovej podoby podľa
 špecifikácie SVG.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
SVGPodpora() 
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static String
alfaNaRetazec(Color farba)
 Alias pre alfaNaReťazec.
static String
alfaNaReťazec(Color farba)
Vyjme zo zadanej inštancie farby hodnotu úrovne priehľadnosti
 a prevedie ju na reťazec v rozsahu 0.0 až
 1.0.
static String
alfaNaRetazec(Farebnosť farba)
 Alias pre alfaNaReťazec.
static String
alfaNaReťazec(Farebnosť farba)
Vyjme zo zadanej implementácie farebnosti hodnotu úrovne
 priehľadnosti a prevedie ju na reťazec v rozsahu 0.0
 až 1.0.
int
citaj(String meno)
 Alias pre čítaj.
int
čítaj(String meno)
Metóda postupne analyzuje XML údaje v zadanom SVG súbore (meno) a do vnútorného zásobníka uloží všetky tvary, ktoré v rámci
 analyzovaných údajov nájde a to bez ohľadu na ich umiestnenie vo
 vrstvách, skupinách alebo v rámci definícií takzvaných značiek
 (angl. marker) a podobne.
Shape
daj(int index)
Poskytne netransformovaný tvar uložený vo vnútornom zásobníku
 tejto inštancie so zadaným „poradovým číslom,“ respektíve indexom,
 to znamená, že nula označuje prvý tvar v zásobníku.
String
dajAtribut(int index,
          String meno)
 Alias pre dajAtribút.
String
dajAtribút(int index,
          String meno)
Poskytne hodnotu atribútu asociovaného s tvarom so zadaným
 indexom.
String[]
dajAtributy(int index)
 Alias pre dajAtribúty.
String[]
dajAtribúty(int index)
Poskytne zoznam názvov atribútov asociovaných s tvarom so zadaným
 indexom.
Shape
dajPovodny(int index)
 Alias pre daj.
Shape
dajPôvodný(int index)
 Alias pre daj.
String
dajSVG()
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
String
dajSVG(int index)
Vráti XML/SVG reprezentáciu tvaru uloženého vo vnútornom
 zásobníku tejto inštancie so zadaným poradovým číslom, resp.
String
dajSVG(String formát)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
String
dajSVG(String formát,
      String titulok)
Táto metóda slúži na export všetkých tvarov uložených vo vnútornom
 zásobníku tejto inštancie do formátu SVG.
Shape
dajVysledny(int index)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index)
Poskytne transformovaný tvar, ktorý je uložený vo vnútornom
 zásobníku tejto inštancie pod zadaným „poradovým číslom,“
 respektíve indexom (čiže nula označuje prvý tvar v zásobníku).
Shape
dajVysledny(int index,
           AffineTransform[] transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           AffineTransform[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov triedy AffineTransform.
Shape
dajVysledny(int index,
           AffineTransform transformácia,
           AffineTransform... transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           AffineTransform transformácia,
           AffineTransform... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije transformácie zadané vo forme objektov
 triedy AffineTransform, čiže v tomto
 prípade je podľa typu objektu zrejmé, že ide o 2D transformácie.
Shape
dajVysledny(int index,
           String[] transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           String[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa
 reťazcov.
Shape
dajVysledny(int index,
           String transformácia,
           String... transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           String transformácia,
           String... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije 2D transformácie zadané v argumentoch
 v tvare reťazcov v súlade so špecifikáciou SVG.
Shape
dajVysledny(int index,
           SVGPodpora.Transformácia[] transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           SVGPodpora.Transformácia[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov triedy Transformácia.
Shape
dajVysledny(int index,
           SVGPodpora.Transformácia transformácia,
           SVGPodpora.Transformácia... transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(int index,
           SVGPodpora.Transformácia transformácia,
           SVGPodpora.Transformácia... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije transformácie zadané vo forme objektov
 triedy Transformácia (ktorá slúži na
 uchovanie informácií o rozpoznaných 2D SVG transformáciách).
static Shape
dajVysledny(Shape tvar,
           AffineTransform[] transformácie)
 Alias pre dajVýsledný.
static Shape
dajVýsledný(Shape tvar,
           AffineTransform[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov typu AffineTransform.
static Shape
dajVysledny(Shape tvar,
           AffineTransform transformácia,
           AffineTransform... transformácie)
 Alias pre dajVýsledný.
static Shape
dajVýsledný(Shape tvar,
           AffineTransform transformácia,
           AffineTransform... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných vo forme objektov
 typu AffineTransform.
Shape
dajVysledny(Shape tvar,
           String[] transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(Shape tvar,
           String[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa
 reťazcov.
Shape
dajVysledny(Shape tvar,
           String transformácia,
           String... transformácie)
 Alias pre dajVýsledný.
Shape
dajVýsledný(Shape tvar,
           String transformácia,
           String... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných v tvare reťazcov
 v súlade so špecifikáciou SVG.
static Shape
dajVysledny(Shape tvar,
           SVGPodpora.Transformácia[] transformácie)
 Alias pre dajVýsledný.
static Shape
dajVýsledný(Shape tvar,
           SVGPodpora.Transformácia[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa objektov
 typu Transformácia.
static Shape
dajVysledny(Shape tvar,
           SVGPodpora.Transformácia transformácia,
           SVGPodpora.Transformácia... transformácie)
 Alias pre dajVýsledný.
static Shape
dajVýsledný(Shape tvar,
           SVGPodpora.Transformácia transformácia,
           SVGPodpora.Transformácia... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných vo forme objektov
 typu Transformácia.
Vector&lt;String&gt;
definicie()
 Alias pre definície().
Vector&lt;String&gt;
definície()
Vráti aktuálny zoznam (zásobník) špeciálnych definícií tejto SVG
 inštancie.
Farba
farbaCiary(int index)
 Alias pre farbaČiary.
void
farbaCiary(int index,
          Color farba)
 Alias pre farbaČiary.
Farba
farbaČiary(int index)
Pokúsi sa zistiť farbu čiary tvaru asociovaného so zadaným
 indexom.
void
farbaČiary(int index,
          Color farba)
Nastaví novú farbu čiary tvaru asociovanému so zadaným indexom.
static String
farbaNaRetazec(Color farba,
              boolean ignorujAlfu)
 Alias pre farbaNaReťazec.
static String
farbaNaReťazec(Color farba,
              boolean ignorujAlfu)
Prevedie zadanú inštanciu farby do textovej podoby používanej
 v rámci jazykov HTML, CSS a teda aj SVG.
static String
farbaNaRetazec(Farebnosť farba,
              boolean ignorujAlfu)
 Alias pre farbaNaReťazec.
static String
farbaNaReťazec(Farebnosť farba,
              boolean ignorujAlfu)
Prevedie zadanú implementáciu farebnosti do textovej podoby
 používanej v rámci jazykov HTML, CSS a teda aj SVG.
Farba
farbaVyplne(int index)
 Alias pre farbaVýplne.
Farba
farbaVýplne(int index)
Pokúsi sa zistiť farbu výplne tvaru asociovaného so zadaným
 indexom.
void
farbaVyplne(int index,
           Color farba)
 Alias pre farbaVýplne.
void
farbaVýplne(int index,
           Color farba)
Nastaví novú farbu výplne tvaru asociovanému so zadaným indexom.
double
hrubkaCiary(int index)
 Alias pre hrúbkaČiary.
void
hrubkaCiary(int index,
           double hrúbka)
 Alias pre hrúbkaČiary.
double
hrúbkaČiary(int index)
Pokúsi sa zistiť hrúbku čiary tvaru asociovaného so zadaným
 indexom.
void
hrúbkaČiary(int index,
           double hrúbka)
Nastaví novú hrúbku čiary tvaru asociovanému so zadaným indexom.
String[]
htmlSablona()
 Alias pre htmlŠablóna.
boolean
htmlSablona(String[] šablóna)
 Alias pre htmlŠablóna.
String[]
htmlŠablóna()
Táto metóda umožňuje zistiť aktuálny tvar šablóny HTML súboru.
boolean
htmlŠablóna(String[] šablóna)
Táto metóda slúži na nastavenie nového tvaru šablóny HTML súboru.
double
koeficient(String jednotka)
Táto metóda umožňuje overiť hodnotu koeficientu prevodu jednotky
 číselnej hodnoty (pozri opis metódy reťazecNaČíslo).
void
koeficient(String jednotka,
          double hodnota)
Táto metóda umožňuje upraviť koeficient prevodu jednotky číselnej
 hodnoty (pozri opis metódy reťazecNaČíslo).
String
konverziaDoubleNaString(double hodnota)
Prevedie hodnotu z údajového typu double do reťazcového
 tvaru.
void
nahradAtribut(int index,
             String meno,
             Object hodnota)
 Alias pre prepíšAtribút.
void
nahraďAtribút(int index,
             String meno,
             Object hodnota)
 Alias pre prepíšAtribút.
void
nahradTvar(int index,
          Shape tvar)
 Alias pre prepíšTvar.
void
nahraďTvar(int index,
          Shape tvar)
 Alias pre prepíšTvar.
void
nastavAtribut(int index,
             String meno,
             Object hodnota)
 Alias pre prepíšAtribút.
void
nastavAtribút(int index,
             String meno,
             Object hodnota)
 Alias pre prepíšAtribút.
void
nastavTvar(int index,
          Shape tvar)
 Alias pre prepíšTvar.
String
naterNaRetazec(Paint náter)
 Alias pre náterNaReťazec.
String
náterNaReťazec(Paint náter)
Pokúsi sa previesť zadaný náter do reťazcovej podoby – do definície
 podľa štandardu SVG.
int
pocet()
 Alias pre počet.
int
počet()
Vráti počet tvarov, ktoré sú momentálne uskladnené v tejto
 inštancii (v jej vnútornom zásobníku) podpory SVG formátu.
void
prepisAtribut(int index,
             String meno,
             Object hodnota)
 Alias pre prepíšAtribút.
void
prepisTvar(int index,
          Shape tvar)
 Alias pre prepíšTvar.
void
prepíšAtribút(int index,
             String meno,
             Object hodnota)
Prepíše, vloží novú alebo odstráni hodnotu atribútu asociovaného
 s tvarom so zadaným indexom.
void
prepíšTvar(int index,
          Shape tvar)
Prepíše tvar určený indexom v rámci vnútorného zásobníka tvarov.
static Shape
presunDoStredu(Shape tvar)
 Alias pre presuňDoStredu.
static Shape
presuňDoStredu(Shape tvar)
Táto statická metóda vyrobí transformovanú verziu zadaného tvaru
 tak, aby nové súradnice jeho „stredu“ ležali v strede súradnicovej
 sústavy programovacieho rámca GRobot.
void
pridaj(Shape tvar,
      GRobot tvorca,
      String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie ďalší tvar
 so základnými atribútmi (ťah a/alebo výplň) nastavenými podľa zadaného
 tvorcu a s prípadnou doplňujúcou sériou atribútov.
void
pridaj(Shape tvar,
      String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie ďalší tvar
 s prípadnou sériou atribútov.
int
pridajSVG(String xmlSVG)
Spracuje zadaný reťazec ako súčasť SVG definície a v prípade, že
 sú nájdené korektné XML/SVG údaje tvarov, pribudnú podľa nich do
 vnútorného zásobníka tejto inštancie ďalšie tvary.
void
pridajText(String text,
          GRobot tvorca,
          String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie nový tvar
 reprezentujúci text (znaky, textovú informáciu) s prípadnou
 sériou atribútov.
void
pridajText(String text,
          String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie nový tvar
 reprezentujúci text (znaky, textovú informáciu) s prípadnou
 sériou atribútov.
void
pridajTransformacie(int index,
                   AffineTransform[] transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   AffineTransform[] transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa hodnôt prvkov
 zadaného poľa objektov afinných transformácií.
void
pridajTransformacie(int index,
                   AffineTransform transformácia,
                   AffineTransform... transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   AffineTransform transformácia,
                   AffineTransform... transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa zadaného objektu
 alebo série objektov afinných transformácií.
void
pridajTransformacie(int index,
                   String[] transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   String[] transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa hodnôt prvkov
 zadaného poľa reťazcov.
void
pridajTransformacie(int index,
                   String transformácia,
                   String... transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   String transformácia,
                   String... transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa zadaného reťazca
 alebo série reťazcov.
void
pridajTransformacie(int index,
                   SVGPodpora.Transformácia[] transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   SVGPodpora.Transformácia[] transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa hodnôt prvkov
 zadaného poľa objektov afinných transformácií.
void
pridajTransformacie(int index,
                   SVGPodpora.Transformácia transformácia,
                   SVGPodpora.Transformácia... transformácie)
 Alias pre pridajTransformácie.
void
pridajTransformácie(int index,
                   SVGPodpora.Transformácia transformácia,
                   SVGPodpora.Transformácia... transformácie)
Pridá k vnútornému atribútu transformácií (‚transform‘)
 tvaru určeného indexom transformácie podľa zadaného objektu
 alebo série objektov afinných transformácií.
void
pridajUsecku(GRobot tvorca,
            String... atribúty)
 Alias pre pridajÚsečku(GRobot, String...).
void
pridajÚsečku(GRobot tvorca,
            String... atribúty)
Pridá úsečku vymedzenú posledným navštíveným bodom tvorcu a jeho
 aktuálnou polohou.
SVGPodpora.Transformacia[]
retazceNaTransformacie(String... texty)
 Alias pre reťazceNaTransformácie.
SVGPodpora.Transformácia[]
reťazceNaTransformácie(String... texty)
Táto metóda slúži na prevod 2D transformácií zadaných
 v textovej podobe v tvare, ktorý je v súlade so špecifikáciou
 SVG.
double
retazecNaCislo(String hodnota)
 Alias pre reťazecNaČíslo.
double
reťazecNaČíslo(String hodnota)
Zabezpečí prevod reťazca na číslo (bez vzniku chyby) s vyhľadaním
 a prepočítaním prípadných jednotiek používaných v jazykoch HTML,
 CSS a teda aj SVG (uvedených za číselnou hodnotou v reťazcovom
 tvare).
static Farba
retazecNaFarbu(String text,
              String alfa)
 Alias pre reťazecNaFarbu.
static Farba
reťazecNaFarbu(String text,
              String alfa)
Prevedie zadaný reťazec reprezentujúci farbu vo formátoch
 používaných jazykmi HTML, CSS a teda aj SVG na inštanciu farby
 programovacieho rámca.
SVGPodpora.Transformacia
retazecNaTransformaciu(String text)
 Alias pre reťazecNaTransformáciu.
SVGPodpora.Transformácia
reťazecNaTransformáciu(String text)
Táto metóda očakáva reťazec s jedinou 2D transformáciou, ktorý
 prevedie na objekt typu Transformácia.
double[]
rozmerKresby()
Vypočíta aktuálny rozmer kresby (šírku a výšku) a vráti ho
 v prvých dvoch prvkoch poľa typu double.
Bod
stredKresby()
Vypočíta súradnice stredu kresby a vráti ich v inštancii triedy
 Bod.
String[]
svgSablona()
 Alias pre svgŠablóna.
boolean
svgSablona(String[] šablóna)
 Alias pre svgŠablóna.
String[]
svgŠablóna()
Táto metóda umožňuje zistiť aktuálny tvar šablóny SVG súboru.
boolean
svgŠablóna(String[] šablóna)
Táto metóda slúži na nastavenie nového tvaru šablóny SVG súboru.
SVGPodpora.Transformacia[]
transformacie(int index)
 Alias pre transformácie.
SVGPodpora.Transformácia[]
transformácie(int index)
Vráti zoznam transformácií v poli objektov typu
 Transformácia, ktoré sú priradené k indexom
 určenému tvaru prostredníctvom vnútorného atribútu ‚transform‘.
void
transformacie(int index,
             AffineTransform[] transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             AffineTransform[] transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa hodnôt prvkov zadaného
 poľa objektov afinných transformácií.
void
transformacie(int index,
             AffineTransform transformácia,
             AffineTransform... transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             AffineTransform transformácia,
             AffineTransform... transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa zadaného objektu alebo
 série objektov afinných transformácií.
void
transformacie(int index,
             String[] transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             String[] transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa hodnôt prvkov
 zadaného poľa reťazcov.
void
transformacie(int index,
             String transformácia,
             String... transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             String transformácia,
             String... transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa hodnoty zadaného
 reťazca alebo série reťazcov.
void
transformacie(int index,
             SVGPodpora.Transformácia[] transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             SVGPodpora.Transformácia[] transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa hodnôt prvkov zadaného
 poľa objektov afinných transformácií.
void
transformacie(int index,
             SVGPodpora.Transformácia transformácia,
             SVGPodpora.Transformácia... transformácie)
 Alias pre transformácie.
void
transformácie(int index,
             SVGPodpora.Transformácia transformácia,
             SVGPodpora.Transformácia... transformácie)
Nastaví alebo odstráni vnútorný atribút transformácií
 (‚transform‘) tvaru určeného indexom podľa zadaného objektu alebo
 série objektov afinných transformácií.
static String
transformacieNaRetazec(AffineTransform... transformácie)
 Alias pre transformácieNaReťazec.
static String
transformácieNaReťazec(AffineTransform... transformácie)
Táto metóda slúži na prevod objektov typu AffineTransform do textovej podoby (tak, aby bola v súlade so
 špecifikáciou SVG).
static String
transformacieNaRetazec(SVGPodpora.Transformácia... transformácie)
 Alias pre transformácieNaReťazec.
static String
transformácieNaReťazec(SVGPodpora.Transformácia... transformácie)
Táto metóda slúži na prevod informácií uložených v ľubovoľnom
 počte objektov typu Transformácia do
 textovej podoby, ktorá je v súlade so špecifikáciou SVG.
static String
transformaciuNaRetazec(AffineTransform transformácia)
 Alias pre transformáciuNaReťazec.
static String
transformáciuNaReťazec(AffineTransform transformácia)
Táto metóda prevedie objekte typu AffineTransform do textovej podoby v súlade so špecifikáciou SVG.
static String
transformaciuNaRetazec(SVGPodpora.Transformácia transformácia)
 Alias pre transformáciuNaReťazec.
static String
transformáciuNaReťazec(SVGPodpora.Transformácia transformácia)
Táto metóda je doplnkom k metóde reťazecNaTransformáciu,
 prevádza informácie uložené v objekte typu Transformácia do textovej podoby v súlade so špecifikáciou SVG.
void
vymaz()
 Alias pre vymaž.
void
vymaz(int index)
 Alias pre vymaž.
void
vymaž()
Vyčistí vnútorné zásobníky tvarov a definícií tejto inštancie.
void
vymaž(int index)
Odstráni tvar tejto inštancie so zadaným indexom.
int
zapis(String meno)
 Alias pre zapíš.
int
zapis(String meno,
     String titulok)
 Alias pre zapíš.
int
zapis(String meno,
     String titulok,
     boolean prepísať)
 Alias pre zapíš.
int
zapíš(String meno)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
int
zapíš(String meno,
     String titulok)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
int
zapíš(String meno,
     String titulok,
     boolean prepísať)
Táto metóda slúži na export tvarov uložených vo vnútornom
 zásobníku tejto inštancie do formátu SVG.
String[]
zoznamAtributov(int index)
 Alias pre zoznamAtribútov.
String[]
zoznamAtribútov(int index)
Poskytne zoznam atribútov, ktoré sú asociované s tvarom so
 zadaným indexom.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
SVGPodpora
public SVGPodpora()
Podrobnosti metód
reťazecNaTransformáciu
public SVGPodpora.Transformácia reťazecNaTransformáciu(String text)
Táto metóda očakáva reťazec s jedinou 2D transformáciou, ktorý
 prevedie na objekt typu Transformácia.
 Volajúca metóda musí zabezpečiť, aby bola táto podmienka
 dodržaná – je na jej zodpovednosti, aby napríklad rozdelila
 prípadnú sériu 2D transformácií, z ktorých sa môže skladať atribút
 ‚transform‘ špecifikácie SVG na jednotlivé celky. (Toto obmedzenie
 je dôležité v súvislosti s typom návratovej hodnoty – metóda
 dokáže poskytnúť informácie o jedinej rozpoznanej transformácii –
 vracia jediný objekt typu Transformácia
 alebo null v prípade neúspechu.)
Parametre:
text – reťazec obsahujúci text definície jedinej
     2D transformácie, ktorý má byť prevedený na objekt typu
     Transformácia
Návratová hodnota:
prevedený objekt typu Transformácia
     alebo null, ak sa prevod nepodarí
retazecNaTransformaciu
public SVGPodpora.Transformacia retazecNaTransformaciu(String text)
 Alias pre reťazecNaTransformáciu.
reťazceNaTransformácie
public SVGPodpora.Transformácia[] reťazceNaTransformácie(String... texty)
Táto metóda slúži na prevod 2D transformácií zadaných
 v textovej podobe v tvare, ktorý je v súlade so špecifikáciou
 SVG. Metóda dokáže spracovať ľubovoľný počet reťazcov
 obsahujúcich ľubovoľný počet SVG definícií 2D transformácií.
 Všetky rozpoznané definície prevedie na objekty typu Transformácia, uloží ich do poľa, ktoré vráti
 v návratovej hodnote.
Parametre:
texty – reťazce obsahujúce text definícií 2D SVG
     transformácií, ktorý majú byť prevedené na objekty typu
     Transformácia
Návratová hodnota:
pole s dĺžkou rovnou počtu transformácií, ktoré sa
     podarilo rozpoznať; každý prvok poľa obsahuje údaje o jednej
     rozpoznanej transformácii uložené v objekte typu Transformácia; pole môže mať aj nulovú dĺžku
     (ak by sa nepodarilo rozpoznať ani jednu transformáciu);
     v prípade kritického zlyhania môže metóda vrátiť hodnotu
     null
retazceNaTransformacie
public SVGPodpora.Transformacia[] retazceNaTransformacie(String... texty)
 Alias pre reťazceNaTransformácie.
transformáciuNaReťazec
public static String transformáciuNaReťazec(AffineTransform transformácia)
Táto metóda prevedie objekte typu AffineTransform do textovej podoby v súlade so špecifikáciou SVG.
 Vo viacerých prípadoch je tento prevod jednoducho prepísaním
 údajov o afinnej transformácii na maticu matrix(…).
 Presnejší prevod je možný z údajov uložených v objektoch typu
 Transformácia. (Na spôsob výstupu tejto
 metódy má vplyv aj hodnota príznaku Transformácia.SVG2.)
Parametre:
transformácia – objekt typu AffineTransform, ktorý má byť prevedený na reťazec
Návratová hodnota:
prevedený reťazec obsahujúci text definície 2D SVG
     transformácie
transformaciuNaRetazec
public static String transformaciuNaRetazec(AffineTransform transformácia)
 Alias pre transformáciuNaReťazec.
transformáciuNaReťazec
public static String transformáciuNaReťazec(SVGPodpora.Transformácia transformácia)
Táto metóda je doplnkom k metóde reťazecNaTransformáciu,
 prevádza informácie uložené v objekte typu Transformácia do textovej podoby v súlade so špecifikáciou SVG.
 (Na spôsob výstupu tejto metódy má vplyv aj hodnota príznaku
 Transformácia.SVG2.)
Parametre:
transformácia – objekt typu Transformácia, ktorý má byť prevedený na reťazec
Návratová hodnota:
prevedený reťazec obsahujúci text definície 2D SVG
     transformácie
transformaciuNaRetazec
public static String transformaciuNaRetazec(SVGPodpora.Transformácia transformácia)
 Alias pre transformáciuNaReťazec.
transformácieNaReťazec
public static String transformácieNaReťazec(AffineTransform... transformácie)
Táto metóda slúži na prevod objektov typu AffineTransform do textovej podoby (tak, aby bola v súlade so
 špecifikáciou SVG). Vo viacerých prípadoch je tento prevod
 jednoducho prepísaním údajov o afinnej transformácii na maticu
 matrix(…). Presnejší prevod je možný z údajov uložených
 v objektoch typu Transformácia. (Na spôsob
 výstupu tejto metódy má vplyv aj hodnota príznaku Transformácia.SVG2.)
Parametre:
transformácie – objekty typu AffineTransform, ktoré majú byť prevedené do podoby série
     textových definícií uložených (podobne ako pri metóde transformácieNaReťazec prijímajúcej objekty typu Transformácia)
Návratová hodnota:
prevedený reťazec obsahujúci textové definície všetkých
     zadaných afinných transformácií
transformacieNaRetazec
public static String transformacieNaRetazec(AffineTransform... transformácie)
 Alias pre transformácieNaReťazec.
transformácieNaReťazec
public static String transformácieNaReťazec(SVGPodpora.Transformácia... transformácie)
Táto metóda slúži na prevod informácií uložených v ľubovoľnom
 počte objektov typu Transformácia do
 textovej podoby, ktorá je v súlade so špecifikáciou SVG. (Na
 spôsob výstupu tejto metódy má vplyv aj hodnota príznaku Transformácia.SVG2.)
Parametre:
transformácie – objekty typu Transformácia, ktoré majú byť prevedené do celistvej
     podoby série textových definícií uložených v rámci jediného
     reťazca
Návratová hodnota:
prevedený reťazec obsahujúci textové definície všetkých
     zadaných transformácií
transformacieNaRetazec
public static String transformacieNaRetazec(SVGPodpora.Transformácia... transformácie)
 Alias pre transformácieNaReťazec.
farbaNaReťazec
public static String farbaNaReťazec(Color farba,
                                    boolean ignorujAlfu)
Prevedie zadanú inštanciu farby do textovej podoby používanej
 v rámci jazykov HTML, CSS a teda aj SVG. Použitie tejto metódy je
 vhodné pri ukladaní údajov o farbe (napríklad výplne alebo čiary
 obrysu tvaru) do súboru v niektorom z uvedených súborových
 formátov (pri CSS by išlo o použitie nad rámec predvolených
 možností tejto triedy).
 
 Podľa okolností je výsledkom tejto metódy reťazec v jednom
 z nasledujúcich tvarov: none (ak má zadaný objekt hodnotu
 null), «HTML meno farby», #rgb,
 #rrggbb alebo rgba(red, green, blue, alpha).
 Posledná reprezentácia nie je univerzálne použiteľná v SVG
 atribútoch fill a stroke. Štandard SVG definuje
 doplňujúce atribúty fill-opacity a stroke-opacity.
 Na ich naplnenie je výhodné použiť metódu
 alfaNaReťazec(farba).
Parametre:
farba – farba, ktorá má byť prevedená do reťazcovej podoby
ignorujAlfu – ak je hodnota tohto atribútu rovná
     true, tak vo výslednej reprezentácii bude ignorovaný
     kanál priehľadnosti farby (alfa)
Návratová hodnota:
farba prevedená do reťazcovej podoby
Pozri tiež:
alfaNaReťazec(Color), 
reťazecNaFarbu(String, String)
farbaNaRetazec
public static String farbaNaRetazec(Color farba,
                                    boolean ignorujAlfu)
 Alias pre farbaNaReťazec.
farbaNaReťazec
public static String farbaNaReťazec(Farebnosť farba,
                                    boolean ignorujAlfu)
Prevedie zadanú implementáciu farebnosti do textovej podoby
 používanej v rámci jazykov HTML, CSS a teda aj SVG. Použitie
 tejto metódy je vhodné pri ukladaní údajov o farbe (napríklad
 výplne alebo čiary obrysu tvaru) do súboru v niektorom z uvedených
 súborových formátov (pri CSS by išlo o použitie nad rámec
 predvolených možností tejto triedy).
 
 Podľa okolností je výsledkom tejto metódy reťazec v jednom
 z nasledujúcich tvarov: none (ak má zadaný objekt hodnotu
 null), «HTML meno farby», #rgb,
 #rrggbb alebo rgba(red, green, blue, alpha).
 Posledná reprezentácia nie je univerzálne použiteľná v SVG
 atribútoch fill a stroke. Štandard SVG definuje
 doplňujúce atribúty fill-opacity a stroke-opacity.
 Na ich naplnenie je výhodné použiť metódu
 alfaNaReťazec(farba).
Parametre:
farba – inštancia farebnosti, ktorá má byť prevedená do
     reťazcovej podoby
ignorujAlfu – ak je hodnota tohto atribútu rovná
     true, tak vo výslednej reprezentácii bude ignorovaný
     kanál priehľadnosti farby (alfa)
Návratová hodnota:
implementácia farebnosti prevedená do reťazcovej podoby
Pozri tiež:
alfaNaReťazec(Farebnosť), 
reťazecNaFarbu(String, String)
alfaNaReťazec
public static String alfaNaReťazec(Color farba)
Vyjme zo zadanej inštancie farby hodnotu úrovne priehľadnosti
 a prevedie ju na reťazec v rozsahu 0.0 až
 1.0. Táto metóda je dôležitým doplnkom metódy farbaNaReťazec(farba,
 ignorujAlfu), pretože nie každý softvér pracujúci s formátom SVG
 akceptuje v atribútoch fill a stroke farby v tvare
 rgba(red, green, blue, alpha). Naproti tomu sme si overili,
 že všetok nami používaný softvér rešpektuje doplňujúce atribúty
 fill-opacity a stroke-opacity. Práve na určenie
 ich hodnôt je vhodná táto metóda.
Parametre:
farba – farba, ktorej zložka priehľadnosti má byť prevedená
     do reťazcovej podoby
Návratová hodnota:
zložka priehľadnosti zadanej farby prevedená do reťazcovej
     podoby (číslo v rozsahu 0.0 až 1.0
     vyjadrené ako text)
Pozri tiež:
farbaNaReťazec(Color, boolean), 
reťazecNaFarbu(String, String)
alfaNaRetazec
public static String alfaNaRetazec(Color farba)
 Alias pre alfaNaReťazec.
alfaNaReťazec
public static String alfaNaReťazec(Farebnosť farba)
Vyjme zo zadanej implementácie farebnosti hodnotu úrovne
 priehľadnosti a prevedie ju na reťazec v rozsahu 0.0
 až 1.0. Táto metóda je dôležitým doplnkom metódy
 farbaNaReťazec(farba,
 ignorujAlfu), pretože nie každý softvér pracujúci s formátom SVG
 akceptuje v atribútoch fill a stroke farby v tvare
 rgba(red, green, blue, alpha). Naproti tomu sme si overili,
 že všetok nami používaný softvér rešpektuje doplňujúce atribúty
 fill-opacity a stroke-opacity. Práve na určenie
 ich hodnôt je vhodná táto metóda.
Parametre:
farba – inštancia farebnosti, ktorej zložka priehľadnosti má
     byť prevedená do reťazcovej podoby
Návratová hodnota:
zložka priehľadnosti zadanej inštancie prevedená do
     reťazcovej podoby (číslo v rozsahu 0.0 až
     1.0 vyjadrené ako text)
Pozri tiež:
farbaNaReťazec(Farebnosť, boolean), 
reťazecNaFarbu(String, String)
alfaNaRetazec
public static String alfaNaRetazec(Farebnosť farba)
 Alias pre alfaNaReťazec.
farbaNaRetazec
public static String farbaNaRetazec(Farebnosť farba,
                                    boolean ignorujAlfu)
 Alias pre farbaNaReťazec.
reťazecNaFarbu
public static Farba reťazecNaFarbu(String text,
                                   String alfa)
Prevedie zadaný reťazec reprezentujúci farbu vo formátoch
 používaných jazykmi HTML, CSS a teda aj SVG na inštanciu farby
 programovacieho rámca. Metóda rozpoznáva buď názvy farebných entít
 uvedených jazykov (148 názvov typu black, yellow,
 white…), alebo reťazce v tvare:
 
 
 #rrggbb, kde rr je červená zložka
 v šestnástkovom tvare, gg zelená zložka v šestnástkovom
 tvare a bb modrá zložka v šestnástkovom tvare,
 #rgb, kde r je červená zložka
 v šestnástkovom tvare a g zelená zložka v šestnástkovom
 tvare, b modrá zložka v šestnástkovom tvare, pričom všetky
 zložky v tomto budú rozšírené na: rr, gg, bb,
 napríklad: #8af = #88aaff
 rgb(red, green,
 blue), kde red je červená zložka
 (v desiatkovom tvare), green zelená zložka, blue
 modrá zložka (všetko v desiatkovom tvare),
 rgba(red, green,
 blue, alpha), kde
 red je červená zložka (v desiatkovom tvare), green
 zelená zložka, blue modrá zložka (v desiatkových tvaroch),
 alpha priehľadnosť vyjadrená ako reálne číslo v rozsahu od
 0.0 do 1.0.
 
 
 Druhý argument (alfa) slúži na doplnenie hodnoty
 priehľadnosti k jednej z vyššie uvedených reprezentácií (okrem
 poslednej). Je to implementácia alternatívneho spôsobu určovania
 priehľadnosti výplne a čiary (fill a stroke)
 prostredníctvom XML atribútov fill-opacity
 a stroke-opacity štandardu SVG (niektoré softvéry
 rozpoznávajú len tento spôsob určovania priehľadnosti).
 
 Metóda je vhodná ako doplnok k metódam farbaNaReťazec a alfaNaReťazec.
Parametre:
text – reťazec, ktorý má byť prevedený na farbu
alfa – dodatočný reťazec obsahujúci úroveň priehľadnosti;
     môže byť null
Návratová hodnota:
inštancia farby získaná z reťazcovej podoby alebo
     null, ak sa formát nepodarilo rozpoznať
Pozri tiež:
farbaNaReťazec(Color, boolean), 
alfaNaReťazec(Color)
retazecNaFarbu
public static Farba retazecNaFarbu(String text,
                                   String alfa)
 Alias pre reťazecNaFarbu.
reťazecNaČíslo
public double reťazecNaČíslo(String hodnota)
Zabezpečí prevod reťazca na číslo (bez vzniku chyby) s vyhľadaním
 a prepočítaním prípadných jednotiek používaných v jazykoch HTML,
 CSS a teda aj SVG (uvedených za číselnou hodnotou v reťazcovom
 tvare). Všetky relatívne jednotky, okrem percenta, (to jest:
 em, ex, ch, rem, vw,
 vh, vmin a vmax) majú nastavený predvolený
 pomer prevodu 1 : 1, to znamená, že výsledkom je rovnaká hodnota,
 aká bola zapísaná v textovom tvare. Percentuálna jednotka má
 nastavený predvolený pomer 1 : 100. Absolútne jednotky (to jest:
 cm, mm, q, in, pc,
 pt a px) sú prepočítané podľa štandardu. Jednotky
 uhlov (deg, rad, grad a turn) sú
 prepočítané na „klasické“ uhlové stupne (deg), kedy jedna
 otáčka znamená 360°.
 
 
Parametre:
hodnota – číselná hodnota s prípadným uvedením jednotiek
Návratová hodnota:
výsledná prevedená a prepočítaná číselná hodnota
retazecNaCislo
public double retazecNaCislo(String hodnota)
 Alias pre reťazecNaČíslo.
koeficient
public void koeficient(String jednotka,
                       double hodnota)
Táto metóda umožňuje upraviť koeficient prevodu jednotky číselnej
 hodnoty (pozri opis metódy reťazecNaČíslo).
 
 Poznámka: Aktuálnu hodnotu koeficientu je
 možné overiť inou verziou tejto metódy. Touto metódou je tiež možné
 nastaviť koeficient prevodu úplne nových jednotiek.
 
 Ak je namiesto jednotky zadaný prázdny reťazec, tak je hodnota
 ignorovaná. Podobne, ak je zadaná nová hodnota koeficientu
 nekonečná (alebo neplatná, napríklad rovná nule), tak je
 ignorovaná.
 
 
Parametre:
jednotka – jednotka, ktorej koeficient prevodu chceme zmeniť
     alebo nastaviť
hodnota – nová číselná hodnota koeficientu prevodu
koeficient
public double koeficient(String jednotka)
Táto metóda umožňuje overiť hodnotu koeficientu prevodu jednotky
 číselnej hodnoty (pozri opis metódy reťazecNaČíslo). Ak zadaná jednotka nejestvuje (nie je definovaná),
 tak táto metóda vráti hodnotu Double.NaN.
 
 
Parametre:
jednotka – jednotka, ktorej koeficient prevodu chceme zistiť
Návratová hodnota:
koeficient pre určenú jednotku alebo Double.NaN
htmlŠablóna
public String[] htmlŠablóna()
Táto metóda umožňuje zistiť aktuálny tvar šablóny HTML súboru.
 Šablóna je použitá metódami zapíš slúžiacimi
 na zápis tvarov (vo formáte SVG).
 
 Jeden prvok poľa je ekvivalentný jednému riadku HTML súboru.
 Výnimku tvoria riadky obsahujúce rezervované reťazce $TVARY
 (resp. $SHAPES) alebo $DEFINÍCIE (resp. $DEFS),
 pretože tieto reťazce budú nahradený viacriadkovými SVG definíciami.
 
 V prípade potreby môžete obsah tejto šablóny nahradiť iným
 požadovaným tvarom metódou htmlŠablóna(šablóna).
Návratová hodnota:
aktuálny tvar šablóny HTML súboru
htmlSablona
public String[] htmlSablona()
 Alias pre htmlŠablóna.
svgŠablóna
public String[] svgŠablóna()
Táto metóda umožňuje zistiť aktuálny tvar šablóny SVG súboru.
 Šablóna je použitá metódami zapíš slúžiacimi
 na zápis tvarov (vo formáte SVG).
 
 Jeden prvok poľa je ekvivalentný jednému riadku SVG súboru.
 Výnimku tvoria riadky obsahujúce rezervované reťazce $TVARY
 (resp. $SHAPES) alebo $DEFINÍCIE (resp. $DEFS),
 pretože tieto reťazce budú nahradený viacriadkovými SVG definíciami.
 
 V prípade potreby môžete obsah tejto šablóny nahradiť iným
 požadovaným tvarom metódou svgŠablóna(šablóna).
Návratová hodnota:
aktuálny tvar šablóny SVG súboru
svgSablona
public String[] svgSablona()
 Alias pre svgŠablóna.
htmlŠablóna
public boolean htmlŠablóna(String[] šablóna)
Táto metóda slúži na nastavenie nového tvaru šablóny HTML súboru.
 Šablóna je použitá metódami zapíš slúžiacimi
 na zápis tvarov (vo formáte SVG).
 
 Jeden prvok poľa je ekvivalentný jednému riadku HTML súboru.
 Výnimku tvoria riadky obsahujúce rezervované reťazce $TVARY
 (resp. $SHAPES) alebo $DEFINÍCIE (resp. $DEFS),
 pretože tieto reťazce budú nahradený viacriadkovými SVG definíciami.
 
 Šablóna musí byť v korektnom tvare (dotýka sa to syntaxe
 a štruktúry) HTML súboru s vloženým svg elementom, inak
 bude výsledný súbor v nekorektnom tvare, čo môže viesť k jeho
 nefunkčnosti! (Za korektnú štruktúru šablóny je zodpovedný autor.)
 Šablóna musí obsahovať rezervované reťazce: $TVARY (resp.
 $SHAPES) a $DEFINÍCIE (resp. $DEFS). Mala by
 tiež obsahovať rezervované reťazce: $KÓDOVANIE, $ŠÍRKA,
 $VÝŠKA a $TITULOK, ktoré budú nahradené korektnými
 údajmi – kódovaním, rozmermi plátien a zadaným alebo predvoleným
 titulkom.
 
 Poznámka: Rezervované reťazce
 $KÓDOVANIE, $ŠÍRKA, $VÝŠKA a $DEFINÍCIE
 môžu byť uvedené aj bez diakritiky a všetky rezervované reťazce majú
 definované aliasy v anglickom jazyku: $KÓDOVANIE –
 $ENCODING, $ŠÍRKA – $WIDTH,
 $VÝŠKA – $HEIGHT, * $DEFINÍCIE – $DEFS,
 $TITULOK – $TITLE a $TVARY –
 $SHAPES.
Parametre:
šablóna – nový požadovaný tvar HTML šablóny
Návratová hodnota:
true v prípade úspechu (šablónu sa podarilo
     zmeniť), false v prípade neúspechu (šablóna
     neobsahuje požadovaný reťazec $TVARY (resp.
     $SHAPES) alebo $DEFINÍCIE (resp. $DEFS)
     alebo sa v zadaných vstupných údajoch vyskytla hodnota
     null)
htmlSablona
public boolean htmlSablona(String[] šablóna)
 Alias pre htmlŠablóna.
svgŠablóna
public boolean svgŠablóna(String[] šablóna)
Táto metóda slúži na nastavenie nového tvaru šablóny SVG súboru.
 Šablóna je použitá metódami zapíš slúžiacimi
 na zápis tvarov (vo formáte SVG).
 
 Jeden prvok poľa je ekvivalentný jednému riadku SVG súboru.
 Výnimku tvoria riadky obsahujúce rezervované reťazce $TVARY
 (resp. $SHAPES) alebo $DEFINÍCIE (resp. $DEFS),
 pretože tieto reťazce budú nahradený viacriadkovými SVG definíciami.
 
 Šablóna musí byť v korektnom tvare (dotýka sa to syntaxe
 a štruktúry) SVG súboru, inak bude výsledný súbor v nekorektnom
 tvare, čo môže viesť k jeho nefunkčnosti! (Za korektnú štruktúru
 šablóny je zodpovedný autor.) Šablóna musí obsahovať rezervovaný
 reťazec: $TVARY (resp. $SHAPES) a $DEFINÍCIE
 (resp. $DEFS). Mala by tiež obsahovať rezervované reťazce:
 $KÓDOVANIE, $ŠÍRKA, $VÝŠKA a $TITULOK,
 ktoré budú nahradené korektnými údajmi – kódovaním, rozmermi plátien
 a zadaným alebo predvoleným titulkom.
 
 Poznámka: Rezervované reťazce
 $KÓDOVANIE, $ŠÍRKA, $VÝŠKA a $DEFINÍCIE
 môžu byť uvedené aj bez diakritiky a všetky rezervované reťazce majú
 definované aliasy v anglickom jazyku: $KÓDOVANIE –
 $ENCODING, $ŠÍRKA – $WIDTH,
 $VÝŠKA – $HEIGHT, $DEFINÍCIE – $DEFS,
 $TITULOK – $TITLE a $TVARY –
 $SHAPES.
Parametre:
šablóna – nový požadovaný tvar SVG šablóny
Návratová hodnota:
true v prípade úspechu (šablónu sa podarilo zmeniť),
     false v prípade neúspechu (šablóna neobsahuje požadovaný
     reťazec $TVARY (resp. $SHAPES) alebo
     $DEFINÍCIE (resp. $DEFS) alebo sa v zadaných
     vstupných údajoch vyskytla hodnota null)
svgSablona
public boolean svgSablona(String[] šablóna)
 Alias pre svgŠablóna.
počet
public int počet()
Vráti počet tvarov, ktoré sú momentálne uskladnené v tejto
 inštancii (v jej vnútornom zásobníku) podpory SVG formátu.
 Tvary mohli byť do zásobníka vložené (importované)
 čítaním zo súboru alebo metódami
 pridaj a pridajText(tvar, tvorca, atribúty). Uskladnené
 tvary môžu byť vyjadrené v XML/SVG formáte
 a uložené (exportované) do súboru
 (HTML alebo SVG).
Návratová hodnota:
počet tvarov, ktoré sú momentálne uskladnené v tejto
     inštancii (v jej vnútornom zásobníku)
pocet
public int pocet()
 Alias pre počet.
vymaž
public void vymaž()
Vyčistí vnútorné zásobníky tvarov a definícií tejto inštancie. To znamená, že všetky vnútorne uskladnené
 tvary a (špeciálne) definície budú z tejto inštancie odstránené.
vymaz
public void vymaz()
 Alias pre vymaž.
vymaž
public void vymaž(int index)
Odstráni tvar tejto inštancie so zadaným indexom. Ako v ostatných
 prípadoch, index nula označuje prvý tvar v zásobníku. Ak je zadaný
 index záporný, tak bude metóda brať do úvahy tvar od konca zásobníka.
 To znamená, že index -1 označuje posledný tvar v zásobníku.
 Ak výsledný index (po úprave zo zápornej hodnoty na kladnú alebo bez
 úpravy) neukazuje na jestvujúci tvar (čiže jeho hodnota je mimo
 rozsahu 0 až počet() - 1, tak metóda nevykoná nič.
Parametre:
index – index tvaru, ktorý má byť vymazaný
vymaz
public void vymaz(int index)
 Alias pre vymaž.
presuňDoStredu
public static Shape presuňDoStredu(Shape tvar)
Táto statická metóda vyrobí transformovanú verziu zadaného tvaru
 tak, aby nové súradnice jeho „stredu“ ležali v strede súradnicovej
 sústavy programovacieho rámca GRobot. „Stredom“ tvaru je myslený
 stred ohraničujúceho obdĺžnika tvaru. (O súradnicových priestoroch
 sa podrobnejšie píše napríklad v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…), SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
 
  
 
 Malá algoritmická analýza
 
 Keby nejestvovala táto metóda, bolo by potrebné zakaždým
 vykonať nasledujúce príkazy:
 
 
Bod bod = Bod.polohaTvaru(tvar);
tvar = SVGPodpora.dajVýsledný(tvar,
    new Transformácia(Transformácia.POSUN,
        -bod.polohaX(), bod.polohaY()));
 
 Navyše, ak by nejestvovala metóda polohaTvaru, tak by bolo treba postupovať mierne odlišným spôsobom,
 napríklad využiť niektorý robot (r):
 
 
//  1. Najprv zálohovať jeho aktuálnu polohu (ak na nej záleží):
Bod záloha = r.poloha();
//  2. Potom sa robotom presunúť do stredu tvaru:
r.skočNa(tvar);
//  3. Potom využiť aktuálnu polohu robota na výrobu
//     presunutého tvaru (s pomocou transformácie):
tvar = SVGPodpora.dajVýsledný(tvar,
    new Transformácia(Transformácia.POSUN,
        -r.polohaX(), r.polohaY()));
//  4. Nakoniec vrátiť robot do pôvodnej polohy (zo zálohy):
r.skočNa(záloha);
 
 Tieto okolnosti viedli k vzniku tejto metódy, ktorá pracuje
 priamočiarejšie.
 
  
Parametre:
tvar – tvar, ktorého presunutá verzia má byť vyprodukovaná
Návratová hodnota:
transformovaný tvar – presunutý do stredu súradnicovej
     sústavy programovacieho rámca
presunDoStredu
public static Shape presunDoStredu(Shape tvar)
 Alias pre presuňDoStredu.
stredKresby
public Bod stredKresby()
Vypočíta súradnice stredu kresby a vráti ich v inštancii triedy
 Bod. Vrátené súradnice sú prepočítané do súradnicového
 priestoru rámca. (O súradnicových priestoroch sa podrobnejšie píše
 napríklad v opisoch metód GRobot.cesta(),
 SVGpodpora.zapíš(…), SVGpodpora.čítaj(meno) a priebežne v celej dokumentácii.)
 
 Príklad:
 
 Nasledujúci príklad ukazuje spôsob použitia tejto metódy na
 pridanie takých transformácií (vo forme objektov triedy
 AffineTransform) všetkým tvarom kresby,
 ktoré ju posunú do stredu súradnicovej sústavy sveta (programovacieho
 rámca):
 
 Upozornenie: Tento príklad vyžaduje
 importovanie triedy Javy AffineTransform.
 
 
// Získame súradnice stredu:
Bod stred = svgPodpora.stredKresby();
// Vyrobíme transformáciu posunutia, ktorá však očakáva súradnice
// v rámci súradnicového priestoru Javy (preto neobrátime y-ovú
// súradnicu):
AffineTransform posun = AffineTransform.
    getTranslateInstance(&#45;stred.polohaX(), stred.polohaY());
// Uložíme počet tvarov kresby do pomocnej premennej:
int počet = svgPodpora.počet();
// Pridáme transformáciu ku každému tvaru:
for (int i = 0; i &lt; počet; ++i)
    svgPodpora.pridajTransformácie(i, posun);
 
 Upozornenie: Táto metóda nesúvisí s metódou
 presuňDoStredu, ktorá pracuje
 s jednotlivými inštanciami triedy Shape.
 
 Poznámka: V triede nie je úmyselne
 definovaná metóda „presuňKresbuDoStredu“, ktorá by
 uzavrela (skryla) algoritmus vyššie uvedeného príkladu. Algoritmus
 používa na presun jednotlivých tvarov transformácie, ktoré pridáva
 k sérii prípadných jestvujúcich transformácií. Nepresúva tvary
 kresby priamo (fyzicky). Metódy daj
 a dajPôvodný vrátia neposunuté tvary.
 Posun sa prejaví až na tvaroch vrátených metódou dajVýsledný.
 
V niektorých prípadoch nemusí byť výsledok celej transformácie
 v súlade s očakávaniami, pretože môžu nastať nežiaduce interakcie
 s jestvujúcimi transformáciami niektorých tvarov. V takom prípade
 odporúčame vybrané (prípadne všetky) tvary prepísať ich transformovanými verziami (spolu s tým vymazať atribút ‚transform‘ –
 zadaním hodnoty null) a až potom ich posunúť.
 Upozornenie, po tejto transformácii nemusí (a pravdepodobne
 ani nebude) metóda rozmerKresby vracať
 korektnú hodnotu. Ak potrebujete poznať veľkosť kresby, musíte ju
 zistiť ihneď po prečítaní SVG súboru, skôr než vykonáte zásahy do
 vnútorných stavov inštancie triedy SVGPodpora.
Návratová hodnota:
bod so súradnicami stredu kresby
rozmerKresby
public double[] rozmerKresby()
Vypočíta aktuálny rozmer kresby (šírku a výšku) a vráti ho
 v prvých dvoch prvkoch poľa typu double.
 
 Doplnkovou informáciou v ďalších dvoch prvkoch poľa je miera
 vysunutia ľavého spodného rohu kresby od stredu súradnicovej sústavy.
 (Vrátené súradnice sú prepočítané do súradnicového priestoru rámca.
 O súradnicových priestoroch sa podrobnejšie píše napríklad v opisoch
 metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
 
 Príklad:
 
 TODO?
 
 
Upozornenie: V prípade, že je vnútorný
stav kresby upravený niektorými druhmi transformácií, nemusí táto
metóda fungovať spoľahlivo. Ak potrebujete napríklad zistiť veľkosť
kresby prečítanej z SVG súboru, tak je najlepšie ho zisťovať ihneď po
prečítaní kresby zo súboru (skôr než budú vykonané určité zásahy do
vnútorných stavov inštancie triedy SVGPodpora).
Návratová hodnota:
dvojica hodnôt (uložených v prvých dvoch prvkoch poľa)
udávajúcich rozmer kresby
daj
public Shape daj(int index)
Poskytne netransformovaný tvar uložený vo vnútornom zásobníku
 tejto inštancie so zadaným „poradovým číslom,“ respektíve indexom,
 to znamená, že nula označuje prvý tvar v zásobníku. Ak je zadaný
 index záporný, metóda bude hľadať tvar od konca zásobníka, to
 znamená, že index -1 označuje posledný tvar vložený do
 vnútorného zásobníka. Ak index ani po úprave zo zápornej hodnoty
 na kladnú neukazuje na jestvujúci tvar, to znamená, že jeho
 hodnota je mimo rozsahu 0 až počet() - 1, tak metóda vráti hodnotu
 null.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
Návratová hodnota:
netransformovaný tvar uložený vo vnútornom zásobníku pod
     zadaným indexom alebo null
dajPôvodný
public Shape dajPôvodný(int index)
 Alias pre daj.
dajPovodny
public Shape dajPovodny(int index)
 Alias pre daj.
dajVýsledný
public Shape dajVýsledný(int index)
Poskytne transformovaný tvar, ktorý je uložený vo vnútornom
 zásobníku tejto inštancie pod zadaným „poradovým číslom,“
 respektíve indexom (čiže nula označuje prvý tvar v zásobníku).
 Táto metóda pracuje s vnútorne definovaným atribútom ‚transform‘,
 avšak spracúva iba 2D transformácie (ako všetky súčasti tejto
 triedy).
 Ak uvedený atribút nie je definovaný, tak je výstup tejto metódy
 zhodný s výstupom metódy daj
 (a teda aj dajPôvodný).
 
 Tiež platia rovnaké informácie, aké sú uvedené v opise metódy
 daj, čiže: Ak je zadaný index záporný, metóda
 hľadá tvar od konca zásobníka, to znamená, že hodnota indexu
 -1 označuje posledný tvar vložený do vnútorného
 zásobníka. Ak index ani po úprave z prípadnej zápornej hodnoty
 na kladnú neukazuje na jestvujúci tvar, to znamená, že jeho
 hodnota je mimo rozsahu 0 až počet() - 1, tak táto metóda vráti hodnotu
 null.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
Návratová hodnota:
tvar uložený vo vnútornom zásobníku pod zadaným indexom
     transformovaný podľa hodnoty vnútorného atribútu ‚transform‘
     (ak má atribút definovanú hodnotu, inak je vrátený
     netransforomvaný tvar), alebo null ak tvar so zadaným
     indexom nejestvuje
dajVysledny
public Shape dajVysledny(int index)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         String transformácia,
                         String... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije 2D transformácie zadané v argumentoch
 v tvare reťazcov v súlade so špecifikáciou SVG. Výsledný tvar
 bude transformovaný zloženou 2D transformáciou zostavenej
 zo všetkých rozpoznaných 2D transformácií obsiahnutých v zadaných
 argumentoch transformácia a transformácie.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácia – povinná transformácia (2D) v textovom tvare;
     podľa špecifikácie SVG môže obsahovať i niekoľko transformácií
     uvedených za sebou
transformácie – ďalšie (nepovinné) transformácie (2D),
     z ktorých každá môže obsahovať jednu alebo viac transformácií
     (2D – podľa špecifikácie SVG)
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadanej transformácie alebo
     transformácií alebo null ak tvar so zadaným indexom
     nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         String transformácia,
                         String... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         String[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa
 reťazcov.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácie – pole reťazcových prvkov, z ktorých každý
     môže obsahovať jednu alebo viac transformácií (2D – podľa
     špecifikácie SVG)
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadaných transformácií alebo
     null ak tvar so zadaným indexom nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         String[] transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         AffineTransform transformácia,
                         AffineTransform... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije transformácie zadané vo forme objektov
 triedy AffineTransform, čiže v tomto
 prípade je podľa typu objektu zrejmé, že ide o 2D transformácie.
 Výsledný tvar bude transformovaný transformáciou zloženou
 zo všetkých zadaných transformácií.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácia – povinný objekt transformácia typu AffineTransform
transformácie – ďalšie (nepovinné) objekty transformácií typu
     AffineTransform
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadanej transformácie alebo
     transformácií alebo null ak tvar so zadaným indexom
     nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         AffineTransform transformácia,
                         AffineTransform... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         AffineTransform[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov triedy AffineTransform.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácie – pole objektov typu AffineTransform
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadaných transformácií alebo
     null ak tvar so zadaným indexom nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         AffineTransform[] transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         SVGPodpora.Transformácia transformácia,
                         SVGPodpora.Transformácia... transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný, ale namiesto prípadných vnútorne definovaných
 transformácií použije transformácie zadané vo forme objektov
 triedy Transformácia (ktorá slúži na
 uchovanie informácií o rozpoznaných 2D SVG transformáciách).
 Výsledný tvar bude transformovaný transformáciou zloženou zo
 všetkých zadaných transformácií.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácia – povinný objekt transformácia typu Transformácia
transformácie – ďalšie (nepovinné) objekty transformácií typu
     Transformácia
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadanej transformácie alebo
     transformácií alebo null ak tvar so zadaným indexom
     nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         SVGPodpora.Transformácia transformácia,
                         SVGPodpora.Transformácia... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(int index,
                         SVGPodpora.Transformácia[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov triedy Transformácia.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
transformácie – pole objektov typu Transformácia
Návratová hodnota:
tvar, ktorý je uložený vo vnútornom zásobníku pod zadaným
     indexom a transformovaný podľa zadaných transformácií alebo
     null ak tvar so zadaným indexom nejestvuje
dajVysledny
public Shape dajVysledny(int index,
                         SVGPodpora.Transformácia[] transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(Shape tvar,
                         String transformácia,
                         String... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných v tvare reťazcov
 v súlade so špecifikáciou SVG.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácia – povinná 2D transformácia v textovom tvare;
     podľa špecifikácie SVG môže obsahovať i niekoľko transformácií
     uvedených za sebou
transformácie – ďalšie (nepovinné) transformácie (2D),
     z ktorých každá môže obsahovať jednu alebo viac transformácií
     (podľa špecifikácie SVG)
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public Shape dajVysledny(Shape tvar,
                         String transformácia,
                         String... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public Shape dajVýsledný(Shape tvar,
                         String[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa
 reťazcov.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácie – pole reťazcových prvkov, z ktorých každý
     môže obsahovať jednu alebo viac transformácií (2D – podľa
     špecifikácie SVG)
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public Shape dajVysledny(Shape tvar,
                         String[] transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public static Shape dajVýsledný(Shape tvar,
                                SVGPodpora.Transformácia transformácia,
                                SVGPodpora.Transformácia... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných vo forme objektov
 typu Transformácia.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácia – povinný objekt transformácia typu Transformácia
transformácie – ďalšie (nepovinné) objekty transformácií typu
     Transformácia
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public static Shape dajVysledny(Shape tvar,
                                SVGPodpora.Transformácia transformácia,
                                SVGPodpora.Transformácia... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public static Shape dajVýsledný(Shape tvar,
                                SVGPodpora.Transformácia[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index, transformácia[,
 transformácie]), ale transformácie sú zadané v tvare poľa objektov
 typu Transformácia.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácie – pole objektov typu Transformácia
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public static Shape dajVysledny(Shape tvar,
                                SVGPodpora.Transformácia[] transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public static Shape dajVýsledný(Shape tvar,
                                AffineTransform transformácia,
                                AffineTransform... transformácie)
Táto metóda umožňuje transformovať ľubovoľný tvar (Shape) Javy podľa 2D transformácií zadaných vo forme objektov
 typu AffineTransform.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácia – povinný objekt transformácia typu AffineTransform
transformácie – ďalšie (nepovinné) objekty transformácií typu
     AffineTransform
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public static Shape dajVysledny(Shape tvar,
                                AffineTransform transformácia,
                                AffineTransform... transformácie)
 Alias pre dajVýsledný.
dajVýsledný
public static Shape dajVýsledný(Shape tvar,
                                AffineTransform[] transformácie)
Táto metóda pracuje rovnako ako metóda dajVýsledný(index,
 transformácia[, transformácie]), ale transformácie sú zadané
 v tvare poľa objektov typu AffineTransform.
Parametre:
tvar – tvar javy – objekt typu Shape (môže ísť
     aj o niektorý tvar generovaný robotom)
transformácie – pole objektov typu AffineTransform
Návratová hodnota:
vstupný tvar (z parametra tvar) transformovaný
     podľa zadaných transformácií (ak nastane chyba, tak je
     návratovou hodnotou null)
dajVysledny
public static Shape dajVysledny(Shape tvar,
                                AffineTransform[] transformácie)
 Alias pre dajVýsledný.
prepíšTvar
public void prepíšTvar(int index,
                       Shape tvar)
Prepíše tvar určený indexom v rámci vnútorného zásobníka tvarov.
 Všetky vlastnosti (atribúty) súvisiace s tvarom zostanú zachované.
 Ak je zadaný index záporný, tak metóda prepíše tvar počítaný
 od konca zásobníka, to znamená, že index -1
 označuje posledný tvar v zásobníku. Ak kladný alebo záporný index
 ukáže na tvar mimo zásobníka, tak metóda nevykoná žiadnu akciu.
 Ak je hodnota argumentu tvar rovná null, tak
 metóda tiež nevykoná žiadnu akciu.
Parametre:
index – index tvaru vo vnútornom zásobníku (hodnoty mimo
     platného rozsahu sú ignorované)
tvar – nový tvar, ktorým má byť nahradený jestvujúci tvar
     vo vnútornom zásobníku tvarov (hodnota null je
     ignorovaná)
prepisTvar
public void prepisTvar(int index,
                       Shape tvar)
 Alias pre prepíšTvar.
nahraďTvar
public void nahraďTvar(int index,
                       Shape tvar)
 Alias pre prepíšTvar.
nahradTvar
public void nahradTvar(int index,
                       Shape tvar)
 Alias pre prepíšTvar.
nastavTvar
public void nastavTvar(int index,
                       Shape tvar)
 Alias pre prepíšTvar.
dajAtribút
public String dajAtribút(int index,
                         String meno)
Poskytne hodnotu atribútu asociovaného s tvarom so zadaným
 indexom. Ak je zadaný index záporný, metóda bude hľadať atribút
 pre tvar od konca zásobníka, to znamená, že index -1
 označuje posledný tvar vložený do vnútorného zásobníka. Ak
 požadovaný atribút (alebo tvar) nejestvuje, tak metóda vráti
 hodnotu null.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
meno – názov požadovaného atribútu asociovaného s tvarom
Návratová hodnota:
reťazec s hodnotou požadovaného atribútu alebo
     null
dajAtribut
public String dajAtribut(int index,
                         String meno)
 Alias pre dajAtribút.
dajAtribúty
public String[] dajAtribúty(int index)
Poskytne zoznam názvov atribútov asociovaných s tvarom so zadaným
 indexom. Ak je zadaný index záporný, metóda vytvorí zoznam atribútov
 pre tvar od konca zásobníka tvarov. To znamená, že index -1
 označuje posledný tvar vložený do vnútorného zásobníka tvarov. Ak
 požadovaný tvar nejestvuje, tak táto metóda vráti hodnotu null, inak vráti pole reťazcov (hoci aj prázdne).
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
Návratová hodnota:
reťazec s hodnotou požadovaného atribútu alebo
     null
dajAtributy
public String[] dajAtributy(int index)
 Alias pre dajAtribúty.
dajSVG
public String dajSVG(int index)
Vráti XML/SVG reprezentáciu tvaru uloženého vo vnútornom
 zásobníku tejto inštancie so zadaným poradovým číslom, resp.
 indexom – nula označuje prvý tvar. (Ide vlastne o export tvaru
 do reťazca.)
 
 Ak je zadaný index záporný, metóda bude hľadať tvar od konca
 zásobníka, to znamená, že index -1 označuje posledný
 tvar vložený do vnútorného zásobníka. Index musí po tejto úprave
 ukazovať na jestvujúci tvar, to znamená, že jeho hodnota musí byť
 v rozsahu 0 až počet() - 1, inak metóda vráti hodnotu null.
 
 (Vkladanie/vytváranie nových tvarov do vnútorného zásobníka
 tejto inštancie s použitím XML/SVG reprezentácie je možné, okrem
 prečítania priamo z SVG alebo HTML
 súboru, aj metódou pridajSVG(xmlSVG).)
 
 Poznámka: Pri exporte nie sú využité
 vlastnosti SVG 2.0, najmä takzvaný „bearing“ – aktuálne pootočenie,
 ktorý má v budúcnosti slúžiť na implementáciu korytnačej grafiky
 v rámci štandardu SVG. Dôvodom nepoužitia novšej verzie štandardu
 je to, že súčasný softvér tento štandard nie je schopný spracovať.
 To znamená, že takto exportované údaje by neboli v praxi
 použiteľné.
Parametre:
index – index požadovaného tvaru z vnútorného zásobníka
Návratová hodnota:
textová XML/SVG reprezentácia tvaru uloženého vo vnútornom
     zásobníku pod zadaným indexom alebo null
farbaVýplne
public Farba farbaVýplne(int index)
Pokúsi sa zistiť farbu výplne tvaru asociovaného so zadaným
 indexom. Možnosti metódy sú obmedzené (pozri aj informácie v opise
 triedy).
Parametre:
hodnota – vstupná hodnota
Návratová hodnota:
výsledný reťazec v px
pridaj
public void pridaj(Shape tvar,
                   GRobot tvorca,
                   String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie ďalší tvar
 so základnými atribútmi (ťah a/alebo výplň) nastavenými podľa zadaného
 tvorcu a s prípadnou doplňujúcou sériou atribútov. Táto metóda
 kombinuje správanie metód pridaj(tvar,
 atribúty) a pridajText(text, tvorca, atribúty). Základné atribúty nastaví podľa
 tvorcu, ale umožní programátorovi pridať ďalšie, prípadne eliminovať
 tie, ktoré táto metóda pridáva predvolene.
 
 Trieda pri ukladaní
 tvarov do súboru nájde vhodnú reprezentáciu zadaného tvaru vo forme
 XML/SVG značky (pozri aj metódu dajSVG(index)),
 ku ktorej priradí sériu zadaných atribútov.
 
 Poznámky: Atribúty bez mena sú ignorované
 a na rozdiel od metódy pridaj(tvar,
 atribúty) sú v tejto metóde atribúty s hodnotou null
 pri spracovaní odstránené, čo sa dá využiť na úpravu niektorých
 predvolene vytváraných atribútov – napríklad na odstránenie
 predvolenej výplne – fill, fill-opacity alebo
 reset predvoleného pootočenia, ktoré sa ukladá vo forme
 transformácie otočenia do atribútu transform. Atribút
 transform má pritom špeciálny spôsob spracovania.
 Ak jeho hodnota nie je rovná null, tak je pripojená
 k pôvodnej (hoci aj vygenerovanej) hodnote. To znamená, že v prípade
 tohto atribútu má zmysel i jeho opakovaný výskyt v zozname
 atribútov.
 
 Poznámky: Na rozdiel od SVG štandardu sú
 touto metódou považované za predvolené tieto hodnoty nasledujúcich
 dvoch atribútov: round pre stroke-linecap a rovnako
 pre stroke-linejoin. Dôvodom je predvolené nastavenie
 v preddefinovanej SVG šablóne, ktoré zodpovedá predvolenému nastaveniu
 čiar robotov. Ak má čiara tvorcu nastavené tieto hodnoty, tak metóda
 tieto atribúty nenastaví. Ak programátor šablónu zmení a potrebuje
 tieto atribúty pre niektorý objekt nastaviť, tak ich musí uviesť
 zvlášť (v zozname doplňujúcich atribútov tejto metódy).
 
 Pozor! Atribúty, ktoré sú kľúčové pri
 vyjadrení konkrétneho tvaru (napr. cx, cy, r
 pri kružnici, points pri polygóne, d pri ceste
 a podobne) sú počas prevodu do XML/SVG tvaru nahradené konkrétnymi
 hodnotami. Preto ich nastavenie touto metódou nemá zmysel.
Parametre:
tvar – inštancia tvaru na uloženie
tvorca – robot, z ktorého budú prevzaté niektoré parametre
     užitočné počas vytvárania tvaru
atribúty – séria dvojíc reťazcov určujúca doplňujúce atribúty
     tvaru
pridajÚsečku
public void pridajÚsečku(GRobot tvorca,
                         String... atribúty)
Pridá úsečku vymedzenú posledným navštíveným bodom tvorcu a jeho
 aktuálnou polohou. Táto metóda bola pridaná na zjednodušenie pridávania
 úsečiek do inštancie SVG podpory. Principiálne používa nasledujúci
 algoritmus:
 
 
double x0 = Svet.prepočítajX(tvorca.poslednáPolohaX());
double y0 = Svet.prepočítajY(tvorca.poslednáPolohaY());
double x1 = Svet.prepočítajX(tvorca.polohaX());
double y1 = Svet.prepočítajY(tvorca.polohaY());
svgPodpora.pridaj(new Line2D.Double(x0, y0, x1, y1), tvorca, atribúty);
 
 Z toho vyplýva, že pri použití tejto metódy sú relevantné všetky
 informácie uvedené v opise metódy pridaj(tvar, tvorca, atribúty).
 
 Ak potrebujete pridať iný typ čiary, použite principiálne tento
 algoritmus (ale zabezpečte, aby mal tvorca vypnuté vypĺňanie tvarov – to je predvolené nastavenie
 robota, ale ak ste ho zmenili, treba ho pred týmto algoritmom vrátiť
 do pôvodného stavu; metóda pridajÚsečku tento stav
 automaticky zálohuje, nastavuje a obnovuje tak ako treba):
 
 
začniCestu();
choďNaPoOblúku(poloha);
svgPodpora.pridaj(cesta(), this);
Parametre:
tvorca – robot, z ktorého budú prevzaté niektoré parametre
     užitočné počas vytvárania tvaru
atribúty – séria dvojíc reťazcov určujúca doplňujúce atribúty
     tvaru
pridajUsecku
public void pridajUsecku(GRobot tvorca,
                         String... atribúty)
 Alias pre pridajÚsečku(GRobot, String...).
definície
public Vector&lt;String&gt; definície()
Vráti aktuálny zoznam (zásobník) špeciálnych definícií tejto SVG
 inštancie. Vrátený zoznam je úplne modifikovateľný a všetky zásahy do
 neho znamenajú priamy zásah do vnútorného zásobníka tejto inštancie
 (vrátená inštancia zoznamu je tá istá, ktorá je vnútornou inštanciou
 tejto SVG inštancie).
 
 
 
SVGElements/defs – HTML Wiki (cit. 7. 5. 2022).
 
&lt;defs&gt; SVG : Scalable Vector Graphics | MDN (cit.
 7. 5. 2022).
 
SVG defs Element – JavaTPoint (cit. 7. 5. 2022).
 
Návratová hodnota:
odkaz na vnútornú inštanciu špeciálnych SVG definícií
definicie
public Vector&lt;String&gt; definicie()
 Alias pre definície().
náterNaReťazec
public String náterNaReťazec(Paint náter)
Pokúsi sa previesť zadaný náter do reťazcovej podoby – do definície
 podľa štandardu SVG. Ak je zadaný náter jeden z podporovaných typov
, tak metóda vráti jeho textový tvar. Ak náter vyžaduje pridanie
 novej (špeciálnej) SVG definície, tak ju
 metóda automaticky vloží do zoznamu definícií. V prípade neúspechu
 vráti metóda hodnotu null.
 
 
 
Gradients in SVG – SVG: Scalable Vector Graphics.
 MDN Web Docs. (cit. 8. 5. 2022).
 
Gradients and Patterns – SVG 1.1 (Second Edition).
 W3Schools Online Web Tutorials. (cit. 8. 5. 2022).
 
Working GradientPaint Trieda in Java. C# Corner –
 Community of Software and Data Developers. (cit. 8. 5. 2022).
 
SVG Gradients – Linear. W3Schools Online Web
 Tutorials. (cit. 8. 5. 2022).
 
SVG Gradients – Radial. W3Schools Online Web
 Tutorials. (cit. 8. 5. 2022).
 
GradientPaint. Java Platform SE 8.
 (cit. 8. 5. 2022).
 
LinearGradientPaint. Java Platform SE 8.
 (cit. 8. 5. 2022).
 
RadialGradientPaint. Java Platform SE 8.
 (cit. 8. 5. 2022).
 
Parametre:
náter – inštancia náteru (Paint), ktorá má byť
     prevedená do reťazcovej (SVG) podoby
Návratová hodnota:
reťazec obsahujúci SVG definíciu náteru alebo null,
     ak bol náter neznámeho typu (alebo nejestvuje)
naterNaRetazec
public String naterNaRetazec(Paint náter)
 Alias pre náterNaReťazec.
pridajText
public void pridajText(String text,
                       GRobot tvorca,
                       String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie nový tvar
 reprezentujúci text (znaky, textovú informáciu) s prípadnou
 sériou atribútov. Pri kreslení (až vo fáze kreslenia, čiže text
 zostáva v SVG reprezentácii vo forme textu a dá sa dodatočne
 upravovať) je zo zadaného textu vytvorený obrys podľa niektorých
 parametrov, ktoré sú pri procese pridávania textu prevzaté zo
 zadaného robota (konkrétne písmo, poloha, spôsob kreslenia textov
 a pootočenie robota, ktoré určia vlastnosti písma, polohu kreslenia
 a pootočenie kresleného textu; farba robota, ktorá je použitá na
 určenie predvolenej farby výplne textu – čiže predvolene nie
 je nakreslený vygenerovaný obrys textu, ale jeho výplň).
 
 Trieda pri ukladaní
 tvarov do súboru použije XML/SVG značku &lt;text&gt;, ku
 ktorej priradí sériu základných a zadaných atribútov. Obsahom značky
 &lt;text&gt; bude zadaný text.
 
 Poznámky: Atribúty bez mena sú ignorované
 a na rozdiel od metódy pridaj(tvar,
 atribúty) sú v tejto metóde atribúty s hodnotou null
 pri spracovaní odstránené, čo sa dá využiť na úpravu niektorých
 predvolene vytváraných atribútov – napríklad na odstránenie
 predvolenej výplne – fill, fill-opacity alebo
 reset predvoleného pootočenia, ktoré sa ukladá vo forme
 transformácie otočenia do atribútu transform. Atribút
 transform má pritom špeciálny spôsob spracovania.
 Ak jeho hodnota nie je rovná null, tak je pripojená
 k pôvodnej (hoci aj vygenerovanej) hodnote. To znamená, že v prípade
 tohto atribútu má zmysel i jeho opakovaný výskyt v zozname
 atribútov.
 
 Pozor! Základné atribúty textu (to jest
 poloha: x, y a vlastnosti písma: font-family,
 font-size, font-weight a font-style) sú
 v prípade ich platnosti počas prevodu do XML/SVG tvaru prepísané
 konkrétnymi hodnotami, preto ich nastavenie touto metódou buď nemá
 zmysel (v prípade polohy), alebo sa ich efekt nemusí prejaviť
 (v prípade vlastností písma).
 
 
Parametre:
text – text, z ktorého bude pri kreslení vytvorený obrys
     (predvolene je obrys vyplnený, takže vizuálne vyzerá ako
     klasický text)
tvorca – robot, z ktorého budú prevzaté niektoré parametre
     užitočné počas vytvárania prislúchajúcej SVG definície tvaru
atribúty – séria dvojíc reťazcov určujúca doplňujúce atribúty
     výsledného SVG tvaru (textu)
pridajText
public void pridajText(String text,
                       String... atribúty)
Vloží do vnútorného zásobníka tejto inštancie nový tvar
 reprezentujúci text (znaky, textovú informáciu) s prípadnou
 sériou atribútov.
 
 Metóda funguje rovnako ako metóda pridajText(text, tvorca, atribúty) s tým, že
 na doplnenie chýbajúcich atribútov (poloha, písmo…) je použitý
 hlavný robot.
Parametre:
text – text, ktorý má byť pridaný k ostatným SVG tvarom
atribúty – séria dvojíc reťazcov určujúca doplňujúce
     atribúty textu
Pozri tiež:
pridajText(String, GRobot, String[])
zapíš
public int zapíš(String meno,
                 String titulok,
                 boolean prepísať)
Táto metóda slúži na export tvarov uložených vo vnútornom
 zásobníku tejto inštancie do formátu SVG. Podľa zadanej prípony
 súboru (povolené sú len tieto: .htm, .html
 a .svg) bude na export použitá šablóna HTML (pozri aj
 htmlŠablóna) alebo SVG (pozri aj svgŠablóna). Pre každý tvar, ktorý bol vložený do vnútorného zásobníka tejto
 inštancie bude nájdená vhodná reprezentácia v rámci štandardu SVG
 (pozri aj metódy dajSVG(index)
 a pridajText(tvar,
 tvorca, atribúty)).
 
 Exportované tvary sú prepočítané tak, aby mohli byť spracúvané
 v predvolenom súradnicovom priestore Javy, v ktorom sa „nula“ (to
 jest počiatok súradnicovej sústavy) nachádza v ľavom hornom rohu
 plátna a y-ová súradnica stúpa smerom nadol. Tento súradnicový
 priestor je bežne používaný v oblasti 2D počítačovej grafiky
 a používa ho aj formát SVG. (V skutočnosti táto konverzia prebieha
 už počas vytvárania tvarov Javy.)
 
 Poznámka: Pri exporte nie sú využité
 vlastnosti SVG 2.0, najmä takzvaný „bearing“ – aktuálne pootočenie,
 ktorý má v budúcnosti slúžiť na implementáciu korytnačej grafiky
 v rámci štandardu SVG. Dôvodom nepoužitia novšej verzie štandardu
 je to, že súčasný softvér tento štandard nie je schopný spracovať.
 To znamená, že takto exportované údaje by neboli v praxi
 použiteľné.
Parametre:
meno – názov súboru (s príponou .htm, .html
     alebo .svg), do ktorého majú byť zapísané tvary vo
     formáte SVG
titulok – titulok súboru; ak je zadaná hodnota null,
     tak sa použije predvolený tvar titulku: SVG tvary
     generované programovacím rámcom GRobot «verzia»,
     © «roky vývoja», «hlavný vývojár»
prepísať – príznak prepísania jestvujúceho súboru; ak je
     zadaná hodnota true, tak v prípade, že cieľový súbor
     jestvuje, je prepísaný; ak je zadaná hodnota false,
     tak v prípade, že cieľový súbor jestvuje, vráti metóda hodnotu
     -1
Návratová hodnota:
počet zapísaných (exportovaných) tvarov alebo -1
     ak bol pokus o zápis neúspešný
Výnimky:
GRobotException – ak nastane chyba počas zápisu súboru
zapis
public int zapis(String meno,
                 String titulok,
                 boolean prepísať)
 Alias pre zapíš.
zapíš
public int zapíš(String meno,
                 String titulok)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
 
 Ďalšie podrobnosti si prečítajte v opise metódy
 zapíš(meno, titulok, prepísať).
 
 Táto metóda sa správa tak, ako keby bola uvedená metóda volaná
 s nasledujúcimi hodnotami argumentov: zapíš(meno, titulok, false).
Parametre:
meno – názov súboru, do ktorého majú byť zapísané tvary vo
     formáte SVG
titulok – titulok súboru (alebo null)
Návratová hodnota:
počet zapísaných (exportovaných) tvarov alebo -1
     ak bol pokus o zápis neúspešný
zapis
public int zapis(String meno,
                 String titulok)
 Alias pre zapíš.
zapíš
public int zapíš(String meno)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
 
 Ďalšie podrobnosti si prečítajte v opise metódy
 zapíš(meno, titulok, prepísať).
 
 Táto metóda sa správa tak, ako keby bola uvedená metóda volaná
 s nasledujúcimi hodnotami argumentov: zapíš(meno, null, false).
Parametre:
meno – názov súboru, do ktorého majú byť zapísané tvary vo
     formáte SVG
Návratová hodnota:
počet zapísaných (exportovaných) tvarov alebo -1
     ak bol pokus o zápis neúspešný
zapis
public int zapis(String meno)
 Alias pre zapíš.
dajSVG
public String dajSVG(String formát,
                     String titulok)
Táto metóda slúži na export všetkých tvarov uložených vo vnútornom
 zásobníku tejto inštancie do formátu SVG. Podľa zadaného formátu
 (povolené sú: HTML a SVG) bude na export použitá
 šablóna HTML (pozri aj htmlŠablóna) alebo
 SVG (pozri aj svgŠablóna) a výsledok je
 vrátený vo forme reťazca v návratovej hodnote tejto metódy.
 Inak táto metóda funguje rovnako ako metóda zapíš.
 
 
Parametre:
formát – formát exportovaného SVG reťazca; povolené sú dva
     formáty: HTML a SVG)
titulok – obsah značky &lt;title&gt;; ak je zadaná
     hodnota null, tak sa použije predvolený tvar:
     SVG tvary generované programovacím rámcom
     GRobot «verzia», © «roky
     vývoja», «hlavný vývojár»
Návratová hodnota:
buď reťazec s exportovaným SVG v požadovanom formáte, alebo
     prázdny reťazec (""), ak export zlyhal
Výnimky:
GRobotException – ak nastane chyba počas zápisu súboru
dajSVG
public String dajSVG(String formát)
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
 
 Ďalšie podrobnosti si prečítajte v opise metódy
 dajSVG(formát, titulok).
 
 Táto metóda sa správa tak, ako keby bola uvedená metóda
 volaná s nasledujúcimi hodnotami argumentov: dajSVG(formát, null).
Parametre:
formát – formát exportovaného SVG reťazca; povolené sú dva
     formáty: HTML a SVG)
Návratová hodnota:
buď reťazec s exportovaným SVG v požadovanom formáte, alebo
     prázdny reťazec (""), ak export zlyhal
dajSVG
public String dajSVG()
Metóda exportuje tvary uložené vo vnútornom zásobníku tejto
 inštancie do formátu SVG.
 
 Ďalšie podrobnosti si prečítajte v opise metódy
 dajSVG(formát, titulok).
 
 Táto metóda sa správa tak, ako keby bola uvedená metóda
 volaná s nasledujúcimi hodnotami argumentov: dajSVG("SVG", 
 null).
Návratová hodnota:
buď reťazec s exportovaným SVG v požadovanom formáte, alebo
     prázdny reťazec (""), ak export zlyhal
pridajSVG
public int pridajSVG(String xmlSVG)
Spracuje zadaný reťazec ako súčasť SVG definície a v prípade, že
 sú nájdené korektné XML/SVG údaje tvarov, pribudnú podľa nich do
 vnútorného zásobníka tejto inštancie ďalšie tvary. (Pozri aj
 metódy čítaj(meno), pridaj(tvar, atribúty), pridajText(tvar, tvorca, atribúty)
 a dajSVG(index).)
Parametre:
xmlSVG – vstupné XML/SVG údaje
Návratová hodnota:
počet tvarov, ktoré sa podarilo vo vstupných údajoch
     rozpoznať alebo -1 ak analýza údajov zlyhá
Výnimky:
GRobotException – ak nastane chyba počas spracovania
     vstupných údajov
čítaj
public int čítaj(String meno)
Metóda postupne analyzuje XML údaje v zadanom SVG súbore (meno) a do vnútorného zásobníka uloží všetky tvary, ktoré v rámci
 analyzovaných údajov nájde a to bez ohľadu na ich umiestnenie vo
 vrstvách, skupinách alebo v rámci definícií takzvaných značiek
 (angl. marker) a podobne. Ak boli čítanie súboru a jeho analýza
 úspešné, tak metóda vráti počet spracovaných tvarov (ktoré pribudli
 do vnútorného zásobníka inštancie), inak vráti hodnotu -1.
 
 Importované tvary sú spracúvané v predvolenom súradnicovom
 priestore Javy, v ktorom „nula“ (to jest počiatok súradnicovej
 sústavy) sa nachádza v ľavom hornom rohu plátna a y-ová súradnica
 stúpa smerom nadol. Tento súradnicový priestor je bežne používaný
 v oblasti 2D počítačovej grafiky a používa ho aj formát SVG.
 
 Všetky tvary uložené vo vnútornom zásobníku a/alebo niektoré
 ich atribúty (súvisiace s ich vizuálnymi vlastnosťami) je možné
 získať metódami: daj(index),
 dajAtribút(index, meno),
 farbaVýplne(index),
 farbaČiary(index),
 hrúbkaČiary(index) atď.
Parametre:
meno – názov súboru, z ktorého majú byť prečítané
     (importované) SVG tvary
Návratová hodnota:
počet prečítaných tvarov (z množiny podporovaných tvarov)
     alebo -1 ak sa čítanie tvarov ani nemohlo začať
     (napríklad preto, že súbor nejestvuje)
Výnimky:
GRobotException – ak nastane chyba počas spracovania súboru
citaj
public int citaj(String meno)
 Alias pre čítaj.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Schránka
java.lang.Object
Schránka
Známe priame odvodené triedy:
Schranka
public class Schránka
extends Object
Táto trieda pokrýva základné činnosti so schránkou operačného
 systému. Schránka (angl. Clipboard) je odkladací priestor operačného
 systému, ktorý dovoľuje prenášať informácie rôzneho druhu medzi
 aplikáciami. Obvykle sú základným operáciám na prácu so schránkou
 priradené známe klávesové skratky: Ctrl + C (Windows), ⌘ + C (Command + C – Macintosh) na vloženie
 (kopírovanie) informácie do schránky; Ctrl + V (Windows),
 ⌘ + V (Command + C, Macintosh) na prevzatie
 (prilepenie, „vloženie“) informácie zo schránky (terminológia v tejto
 oblasti sa v súčasnosti, žiaľ, značne rôzni). Vo svete robota tieto
 skratky nefungujú automaticky. Ak chceme, aby aplikácia vytvorená
 s pomocou robota používala schránku, musíme prepojiť náležité
 položky ponuky (ktoré musíme vytvoriť)
 a prepojiť s funkcionalitou (volaním metód a prípadným
 doprogramovaním) tejto statickej triedy. Ako bolo práve čiastočne
 podotknuté, táto trieda i všetky jej metódy sú statické. Z toho
 vyplýva, že nemá zmysel vytvárať jej inštancie (jedna je i tak vytvorená automaticky). Použitie
 triedy je jednoduché, stačí napísať názov triedy (prípadne jej
 statickej inštancie – rozdiel je vo veľkosti prvého písmena)
 a za bodkou názov metódy, ktorú chceme použiť. Napríklad na
 vloženie textu do schránky slúži nasledujúci riadok kódu:
 
 
schránka.text("Tento text bude skopírovaný do schránky…");
 
 Text zo schránky, naopak, prevezmeme nasledujúcim riadkom kódu:
 
 
String text = schránka.text();
 
 Ďalšie spracovanie prevzatého textu zariadime podľa potreby,
 napríklad: text pripojíme do ďalšej premennej, vypíšeme ho na obrazovku, zobrazíme
 v dialógu (správe) a podobne.
Prehľad metód
Všetky metódy Statické metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static SVGPodpora
kresba()
Prevezme zo schránky kresbu vo formáte SVG, ak schránka obsahuje
 informáciu v tomto formáte.
static boolean
kresba(SVGPodpora svgPodpora)
Vloží do schránky kresbu v SVG formáte zadanú vo forme objektu
 SVGPodpora.
static Obrazok
obrazok()
 Alias pre obrázok.
static Obrázok
obrázok()
Prevezme zo schránky obrázok, ak schránka obsahuje obrazovú
 informáciu.
static boolean
obrazok(Image obrázok)
 Alias pre obrázok.
static boolean
obrázok(Image obrázok)
Vloží do schránky zadaný obrázok.
static String
text()
Prevezme zo schránky text, ak schránka obsahuje textovú
 informáciu.
static boolean
text(String reťazec)
Vloží do schránky zadaný text.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti metód
text
public static String text()
Prevezme zo schránky text, ak schránka obsahuje textovú
 informáciu.
Návratová hodnota:
text, ktorý bol obsiahnutý v schránke alebo null
     ak schránka neobsahovala textovú informáciu
text
public static boolean text(String reťazec)
Vloží do schránky zadaný text.
Parametre:
reťazec – text na vloženie do schránky
Návratová hodnota:
true ak bola operácia úspešná
obrázok
public static Obrázok obrázok()
Prevezme zo schránky obrázok, ak schránka obsahuje obrazovú
 informáciu. (V prípade úspešného prevzatia obrazovej informácie zo
 schránky vráti metóda nový objekt typu Obrázok.
 Tento je automaticky registrovaný vo vnútornom zozname obrázkov.
 Ak je objekt s obrázkom určený len na jedno použitie, mal by byť po
 skončení práce s ním uvoľnený, inak zostane prítomný v pamäti počítača až do ukončenia
 činnosti aplikácie.)
Návratová hodnota:
nový objekt s obrázkom, ktorý bol obsiahnutý v schránke,
     alebo null ak schránka neobsahovala obrazovú
     informáciu
obrazok
public static Obrazok obrazok()
 Alias pre obrázok.
obrázok
public static boolean obrázok(Image obrázok)
Vloží do schránky zadaný obrázok.
 
 Upozornenie: Obrázok je uchovaný
 v schránke len počas činnosti aplikácie robota. Po zatvorení
 okna sveta, je obrázok zo schránky odstránený.
Parametre:
obrázok – rastrový obrázok; môže byť aj objekt typu Obrázok
Návratová hodnota:
true ak bola operácia úspešná
obrazok
public static boolean obrazok(Image obrázok)
 Alias pre obrázok.
kresba
public static SVGPodpora kresba()
Prevezme zo schránky kresbu vo formáte SVG, ak schránka obsahuje
 informáciu v tomto formáte. V prípade úspešného prevzatia kresby zo
 schránky vráti metóda nový objekt typu SVGPodpora,
 ktorý bude obsahovať objekty rozpoznané z SVG definície, ktorá bola
 uložená v schránke. V opačnom prípade vráti táto metóda hodnotu
 null.
Návratová hodnota:
nový objekt typu SVGPodpora s rozpoznanými
     grafickými objektmi z SVG definície v schránke alebo
     null, ak schránka neobsahovala relevantnú informáciu
kresba
public static boolean kresba(SVGPodpora svgPodpora)
Vloží do schránky kresbu v SVG formáte zadanú vo forme objektu
 SVGPodpora.
Parametre:
svgPodpora – inštancia triedy SVGPodpora
Návratová hodnota:
true ak bola operácia úspešná
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":9,"i21":9,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":9,"i28":9,"i29":6,"i30":9,"i31":9,"i32":9,"i33":10,"i34":9,"i35":6,"i36":9,"i37":9,"i38":9,"i39":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Skript
java.lang.Object
Skript
public abstract class Skript
extends Object
Táto abstraktná trieda vnútorne implementuje celý mechanizmus
 interpretácie skriptov programovacieho rámca GRobot. Jej použitie
 je automatické.
 
 Poznámka:Verejné statické metódy poskytujú
 základné rozhranie na prácu so skriptovacím strojom, napríklad:
 vyrob, ladenie,
 čítajPremennú,
 zapíšPremennú,
 kódPoslednejChyby, vyrob a podobne. Dve inštančné metódy komunikujú s konkrétnymi
 inštanciami skriptov: vykonaj a vypíš. Tie sú užitočné v prípade, že pracujeme s vyrobenou inštanciou
 tejto triedy.
 
 Na prácu so skriptami sú určené tieto metódy triedy Svet (a ich klony):
 
 
 vykonajSkript(riadky),
 nahrajSkript(názov, súbor),
 vyrobSkript(skript, zoSúboru),
 registrujSkript(názov, skript),
 dajSkript(názov)
 a volajSkript(názov).
 
 
 Užitočná je tiež táto metóda (a jej klony):
 
 
 formulujChybuSkriptu(kódSkriptu, titulokChyby,
 šírkaRiadka)
 
 
 Na ladenie skriptov sú určené nasledujúce metódy (vrátane
 ich rôznych variánt a príbuzných metód):
 
 
 režimLadenia(zapniLadenie),
 premennáJestvuje(názov,
 typ),
 čítajPremennú(názov,
 typ),
 zapíšPremennú(názov,
 hodnota),
 vymažPremennú(názov,
 typ);
 a špeciálne vyhradená reakcia obsluhy
 udalostí:
 ladenie(riadok,
 príkaz, správa) (jej opis obsahuje základný príklad ladenia;
 komplexnejší príklad ladenia je nižšie v sekcii Príklad ladenia
 skriptov).
 
 
 Pričom opis chybových stavov je v opise triedy GRobotException a tiež pri viacerých konštantách definovaných v triede
 Konštanty (v ktorej sú zároveň zhromaždené konštanty
 reprezentujúce kódy správ, oznamov a iných informácií používaných
 skriptovacím strojom, napríklad ČAKAŤ,
 PRERUŠIŤ,
 VYPÍSAŤ_SKRIPT,
 VYPÍSAŤ_RIADOK,
 VYPÍSAŤ_PRÍKAZ,
 VYKONAŤ_PRÍKAZ,
 VYPÍSAŤ_PREMENNÉ a podobne).
 
 Poznámka: Krátky úryvok kódu ukazujúci
 najjednoduchší spôsob vykonania skriptu uloženého v súbore je v opise
 metódy vykonajSkript(skript,
 zoSúboru). Komplexnejší príklad spúšťania je nižšie v rámci príkladu
 ladenia skriptov…
 
  
 
 Vybrané pravidlá vykonávania
 
 Informácia: Ďalšie podrobnosti súvisiace
 s témou vykonávania príkazov interaktívneho režimu a skriptov
 sú v opise metódy Svet.interaktívnyRežim.
 
 Vykonávanie skriptu úzko súvisí s interaktívnou inštanciou a tým
 aj s interaktívnym režimom.
 Na korektné vykonanie príkazu, ktorý nie je riadiacim príkazom (riadiacou
 štruktúrou) skriptu, musí byť aktívna tzv. interaktívna inštancia robota,
 plátna alebo sveta, bez ktorej by nebolo možné príkaz správne vyhodnotiť,
 pretože by nebolo jasné, metódu ktorej inštancie je treba vykonať:
 
 
 GRobot.interaktívnyRežim(zapni) (v skriptoch je možné roboty odlíšiť
 ich menami);
 Plátno.interaktívnyRežim(zapni) (v skriptoch sa plátno rozlišuje buď
 ako podlaha, alebo ako strop);
 Svet.interaktívnyRežim(zapni)
 (opis metódy sveta obsahuje ďalšie podrobnejšie informácie).
 
 
 Ak v čase vykonania tzv. platného príkazu skriptu (pozri nižšie) nie
 je určená aktívna interaktívna inštancia (dá sa určiť aj priamo v skripte
 špeciálnym „príkazom“ @ – pozri nižšie), tak sa vykonávanie
 skriptu skončí chybou.
 
 Každý neprázdny riadok skriptu smie obsahovať niektorú
 z nasledujúcich položiek:
 
 
 platný príkaz – taký, ktorý je zároveň použiteľný s metódami
 na vykonávanie príkazov robota (GRobot.vykonajPríkaz), plátna (Plátno.vykonajPríkaz) alebo sveta (Svet.vykonajPríkaz), respektíve príkazy platné pre aktívnu interaktívnu
 inštanciu (pozri opis interaktívneho režimu tu; obsahuje ďalšie dôležité informácie,
 najmä o príkaze nech),
 komentár (pozri nižšie),
 definíciu menovky (pozri nižšie),
 aktivovanie alebo deaktivovanie interaktívnej inštancie (pozri
 nižšie),
 alebo jeden z rezervovaných príkazov skriptu (podrobnosti
 sú opäť nižšie):
   
   nepodmienený skok (na),
   podmienený skok (ak),
   podmienený skok s alternatívou (ak-inak),
   podmienený skok s dekrementáciou premennej („cyklus“ –
   dokedy),
   podmienený skok s dekrementáciou premennej a alternatívou
   („cyklus s alternatívou“ – dokedy-inak),
   cyklus s inkrementáciou premennej v rozsahu od 1 po zadanú
   hodnotu (opakuj),
   určenie obzoru premenných (obzor).
   
 
 
 
 Skripty môžu byť rozdelené na bloky, ktoré môžu s výhodou
 využívať rezervované príkazy (kvázi riadiace štruktúry) skriptov,
 pretože rovnako ako pri iných programovacích jazykoch aj tu platí, že
 ak niektorý príkaz (riadiaca štruktúra) vyžaduje na svoje fungovanie
 ďalší príkaz (napríklad verzie pomieneného spracovania a opakovania bez
 využitia menoviek), tak tento príkaz môže byť nahradený blokom. Bloky
 v skriptoch vymedzuje rovnaká veľkosť (úroveň) odsadenia riadkov
 tabulátormi (čiže úroveň opakujúca sa vo vymedzenej sérii riadkov).
 
  
 
 
 
 
 ; «text»–
komentár – tento riadok bude ignorovaný
 :«názov»–definícia
 menovky, ktorá je používaná na skoky (podmienené a nepodmienené –
 pozri nižšie); názov menovky „koniec“ je rezervovaný (a označuje
 koniec skriptu)
 @
«názov inštancie»
–aktivovanie interaktívnej inštancie
 @–zrušenie aktivácie
 interaktívnej
 inštancie
 na  «menovka»–
 nepodmienený skok – vykonávanie skriptu prejde (preskočí) na
 riadok označený menovkou (pozri vyššie); názov menovky „koniec“ označuje
 koniec skriptu
 ak 
«premenná alebo hodnota» 
«menovka»–
 podmienený skok – ak je «premenná alebo hodnota»
 nenulová, tak vykonávanie skriptu prejde (preskočí) na riadok
 označený menovkou
 ak 
«premenná alebo hodnota» 
«menovka1» inak 
«menovka2»–podmienený
 skok s alternatívou – ak je «premenná alebo hodnota»
 nenulová, tak vykonávanie skriptu prejde (preskočí) na riadok
 označený menovkou «menovka1», inak na riadok označený
 menovkou «menovka2»
 dokedy «premenná» 
«menovka»–podmienený
 skok s dekrementáciou premennej („cyklus“) – najprv sa zníži
 hodnota premennej o 1 a ak je výsledok výpočtu záporný, tak sa
 jej hodnota nastaví na nulu; ak je konečná hodnota premennej
 kladná, tak vykonávanie skriptu prejde (preskočí) na riadok
 označený menovkou
 dokedy «premenná» 
«menovka1» inak «menovka2»
–podmienený skok s dekrementáciou premennej („cyklus“)
 s alternatívou – najprv sa zníži hodnota premennej o 1 a ak je
 výsledok výpočtu záporný, tak sa jej hodnota nastaví na nulu;
 ak je konečná hodnota premennej kladná, tak vykonávanie skriptu
 prejde (preskočí) na riadok označený menovkou «menovka1»,
 inak na riadok označený menovkou «menovka2»
  
 podmienené skoky s dekrementáciou premennej sú navrhnuté tak,
 aby pomyselne predpokladali prítomnosť kladnej hodnoty v riadiacej
 premennej a aby sa opakovanie ukončilo v okamihu dosiahnutia nuly
 v riadiacej premennej (pričom nie je dovolené, aby sa v riadiacej
 premennej vyskytla záporná hodnota – záporné hodnoty sú prepísané
 nulou); to znamená, že všetky priebehy vykonania s hodnotou
 riadiacej premennej menšej alebo rovnej jednej sú identické
 
 
  Príkazy ak a dokedy
 sa dajú použiť aj v režime bez menovky, kedy menia svoje správanie – pozri
 nižšie.Vysvetlivky:«podmienka» je slovná
 skratka, ktorá má v tomto prípade viacero významov – môže to byť premenná,
 hodnota alebo výraz za mriežkou (pozri poznámku nižšie);
«hranica» môže byť literárna hodnota alebo názov premennej,
 z ktorej sa hodnota prevezme;
«príkaz/blok», «príkaz/blok 2» môže byť jediný príkaz na samostatnom
 riadku alebo blok (pozri vyššie)
Poznámka: Syntax s mriežkou je bližšie
 spomenutá napríklad v opise metódy Svet.interaktívnyRežim.
 
 
 ak «podmienka»
    «príkaz/blok» 
ak «podmienka»    
«príkaz/blok» inak     
«príkaz/blok 2» –
podmienené spracovanie (s alternatívou – inak);ak je
 výsledok/hodnota «podmienky» nenulová, tak sa vykoná 
«príkaz/blok»;v opačnom prípade, ak je prítomná alternatíva,
 sa vykoná «príkaz/blok 2»;(pozri príklad 1 nižšie)
 
 
 
 opakuj [«názov premennej»] 
«hranica»    «príkaz/blok» 
–opakovanie/cyklus (s alternatívou – 
inak);«názov premennej» je nepovinný; určuje
 premennú, do ktorej sa bude ukladať „číslo iterácie“ (čo je stúpajúca
 hodnota meniaca sa podľa hodnoty «hranice»); v prípade
 jej neuvedenia je cyklus anonymný;absolútna hodnota 
«hranice» určuje počet opakovaní; ak je nenulová, tak sa cyklicky
 vykonáva «príkaz/blok»;ak je kladná, tak sa hodnota
 premennej (ak nie je cyklus anonymný) bude meniť od hodnoty 1 po hodnotu
 «hranice»; ak je záporná, tak sa bude meniť od jej hodnoty po
 hodnotu −1 (vďaka tomu sa dá s pomocou absolútnej hodnoty simulovať
 klesajúci cyklus, ale má to háčik pri niektorých algoritmoch, pretože
 nenulová hodnota hranice má pri tomto cykle vždy za následok nenulový
 počet opakovaní; prípadné zamedzenie vykonania cyklu pri zápornej hranici
 musí byť ošetrené dodatočnou podmienkou);ak je (už pri prvom pokuse
 o vykonanie cyklu, to jest pred prvou iteráciou) «hranica»
 nulová, tak sa v prípade prítomnosti alternatívy (inak)
 vykoná «príkaz/blok 2» (v ostatných prípadoch je alternatíva
 ignorovaná, to jest, ak sa vykoná aspoň jedna iterácia cyklu,
 alternatíva nebude spustená);ak je pri anonymnom cykle hranica
 určená hodnotou premennej, tak je jej hodnota prevzatá a premenná je
 použitá tak, ako keby cyklus nebol anonymný (alebo to môžeme chápať tak,
 že cyklus prestáva byť anonymným) – pozri príklad 2 nižšie
 
 
 
 opakuj [«názov premennej»] 
«hranica»    «príkaz/blok» inak 
    «príkaz/blok 2» 
 
 
 
     «príkaz/blok» dokedy 
«názov premennej» –
zopakovanie predchádzajúceho «príkazu/bloku»
 (s alternatívou – inak);«názov premennej»
 je povinný a jej hodnota určuje počet opätovných zopakovaní
 predchádzajúceho «príkazu/bloku» (ten sa vždy vykoná najmenej
 raz – pred prvým vyhodnotením hodnoty «premennej»);ak
 je hodnota «premennej» väčšia od jednej, tak sa 
«príkaz/blok» zopakuje a jej hodnota sa zníži o 1;ak je
 hodnota «premennej» rovná jednej, tak sa vynuluje a prejde
 sa na vykonávanie príkazov za cyklom (pretože «príkaz/blok»
 sa už raz vykonal) – v tomto prípade sa nevykonáva 
«príkaz/blok 2» alternatívy (inak);ak je hodnota
 «premennej» nulová alebo záporná, tak sa jej hodnota vynuluje
 (čo sa viditeľne prejaví len pri záporných hodnotách) a v prípade
 prítomnosti alternatívy (inak) sa vykoná 
«príkaz/blok 2»;(pozri príklad 3 nižšie)
 
 
 
     «príkaz/blok» dokedy 
«názov premennej» inak 
    «príkaz/blok 2» 
 
 
 
 
 obzor «názov obzoru»
–nastaví obzor pre nasledujúci blok (pozri vyššie;
 uvedenie bloku za týmto príkazom je povinné);obzory predstavujú
 „menné priestory“ premenných (dajú sa nimi celkom dobre simulovať
 objekty); „menný priestor,“ t. j. obzor, je od názvu premennej oddelený
 bodkou; obzory sa nedajú prostredníctvom príkazu obzor
 „skladať“ – aktívny obzor je platný ako celok a akákoľvek „časť“ mena
 obzoru uvedená pred názvom premennej ruší aktívny obzor a nastavuje pre
 túto premennú nový obzor (opäť ako celok)
;(pozri príklad 4 nižšie)
 
 
 
 
 
 Príklad 1:
 
 Prvý skript ukazuje využitie premenných, blokov a príkazu
 podmieneného spracovania s alternatívou.
 
 
 @svet
 nech a = uprav číslo "Číslo A:", 5
 nech b = uprav číslo "Číslo B:", 3
 nech c = otázka "Sčítať = áno; násobiť = nie."
 vypíš a
 ak c
  ; Pretože nie je 1.
  vypíš " × ", b
  nech c = b
  nech c * a
 inak
  ; Pretože áno je 0.
  vypíš " + ", b
  nech c = a
  nech c + b
 vypíš riadok " = ", c
 
 
 Výsledky:
 
 Toto sú ukážky výsledných výpisov na obrazovke po potvrdení
 rôznych vstupných hodnôt.
 
 
 Výsledok po potvrdení predvolených hodnôt a voľbe „Áno“:
 
 Výsledok po potvrdení predvolených hodnôt a voľbe „Nie“:
 
 Výsledok po potvrdení hodnôt −5, 3 a voľbe „Áno“:
 
 5 + 3 = 8
 5 × 3 = 15
 −5 + 3 = −2
 
 
 Príklad 2:
 
 Ďalší skript je jednoduchou ukážkou príkazu (resp. riadiacej štruktúry)
 opakovania s vopred zadaným počtom opakovaní (iterácií), pričom počiatočná
 hodnota premennej zároveň určuje počet opakovaní (hranicu).
 
 
 @svet
 nech i = uprav číslo "Počet opakovaní:", 1
 opakuj i
  vypíš " ", i
 inak
 vypíš "Žiadne opakovanie."
 vypíš riadok
 
 
 Výsledky:
 
 Nasledujúce tri výpisy ukazujú, aké budú výsledky (výpisy na
 obrazovke) po potvrdení troch rôznych hodnôt.
 
 
 Výsledok po potvrdení hodnoty −5:
 
 Výsledok po potvrdení hodnoty 0:
 
 Výsledok po potvrdení hodnoty 5:
  −5 −4 −3 −2 −1
 Žiadne opakovanie.
  1 2 3 4 5
 
 
 Príklad 3:
 
 Tento skript ukazuje správanie skriptu, ktorý používa zopakovanie
 predchádzajúceho príkazu/bloku s alternatívou. Skript, aby ho nebolo
 potrebné zakaždým manuálne upravovať, si na začiatku vyžiada potvrdenie
 hodnoty počtu zopakovaní.
 
 
 @svet
 nech i = uprav číslo "Počet zopakovaní:", 3
  vypíš "Vykonanie s hodnotou i = ",
 i
  vypíš riadok "."
 dokedy i
 inak
 vypíš riadok "(Nemalo sa zopakovať.)"
 vypíš "Po opakovaniach (i = ", i
 vypíš riadok ")."
 
 
 Výsledky:
 
 Nasledujúce štyri výpisy ukazujú, aké budú výsledky (výpisy na
 obrazovke) po potvrdení štyroch rôznych hodnôt.
 
 
 Výsledok po vykonaní s predvolenou hodnotou 3:
 
 Výsledok po potvrdení hodnoty 1:
 
 Výsledok po potvrdení hodnoty 0:
 
 Výsledok po potvrdení hodnoty −2:
 Vykonanie s hodnotou i = 3.
Vykonanie s hodnotou i = 2.
Vykonanie s hodnotou i = 1.
Po opakovaniach (i = 0).
 Vykonanie s hodnotou i = 1.
Po opakovaniach (i = 0).
 Vykonanie s hodnotou i = 0.
(Nemalo sa zopakovať.)
Po opakovaniach (i = 0).
 Vykonanie s hodnotou i = −2.
(Nemalo sa zopakovať.)
Po opakovaniach (i = 0).
 
 
 Príklad 4:
 
 Tento skript využíva prácu s obzormi. Umiestňuje premennú x do troch
 rôznych obzorov a ukazuje „neskladateľnosť“ obzorov pri vzájomnom vnorení
 dvoch príkazov obzor (raz pre obzor a, potom pre obzor b,
 pričom napriek vnoreniu nevzniká odkazovanie sa na obzor a.b).
 
 
 @svet
 nech x = -2
 nech a.x = 3
 nech b.x = 12
 nech a.b.x = 8
  
 vypíš "Hodnoty pred obzorom: x = ", x
 vypíš "; a.x = ", a.x
 vypíš "; b.x = ", b.x
 vypíš riadok "; a.b.x = ", a.b.x
  
 obzor a
  vypíš
 "Hodnoty v obzore a: x = ", x
  vypíš "; a.x = ", a.x
  vypíš "; b.x = ", b.x
  vypíš riadok "; a.b.x = ",
 a.b.x
  obzor b
   vypíš "Hodnoty
 v obzore b: x = ", x
   vypíš "; a.x = ",
 a.x
   vypíš "; b.x = ",
 b.x
   vypíš riadok
 "; a.b.x = ", a.b.x
 
 
 Výsledný výpis na obrazovke bude vyzerať takto:
 
 Hodnoty pred obzorom: x = −2; a.x = 3; b.x = 12; a.b.x = 8
 Hodnoty v obzore a: x = 3; a.x = 3; b.x = 12; a.b.x = 8
 Hodnoty v obzore b: x = 12; a.x = 3; b.x = 12; a.b.x = 8
 
  
 
 Príklad ladenia skriptov
 
 Tento príklad predstavuje jednoduchý nástroj na ladenie skriptov.
 Dá sa ovládať klávesnicou a myšou. Klávesové skratky na posúvanie
 (krokovanie), zastavenie a štart nového skriptu (zoznam názvov je
 prebraný z príkazového riadka operačného systému) sú medzerník,
 Escape a Enter, ale keďže popri interaktívnom režime je aktivovaný
 vstupný riadok, ktorý v tomto
 prípade slúži ako príkazový
 riadok interaktívneho režimu, je treba stlačiť kláves tabulátor,
 prípadne kliknúť na plochu, aby riadok stratil smerovanie vstupu (fokus).
 (Prípadne môžete v príkazovom riadku zadať a potvrdiť príkaz: skrývaj
 vstupný riadok, ale príklad neimplementuje žiadnu možnosť opätovného
 zobrazenia príkazového riadka, takže ak ho neobnoví niektorý zo skriptov,
 tak ho až do nasledujúceho spustenia aplikácie neuvidíte.)
 
 
import knižnica.*;
public class TestLadeniaSkriptu extends GRobot
{
    // Nasledujúce premenné sú „semafory“ používané počas procesu ladenia:
    // 
    //   – krok:     hodnota tejto premennej riadi krokovanie; hodnota true
    //               znamená posunutie programu o krok ďalej (na ďalší príkaz)
    //   – prerušiť: nastavením hodnoty tejto premennej na true je možné
    //               ladenie programu predčasne ukončiť
    private boolean krok = false, prerušiť = false;
    // V tomto súkromnom poli sú uchovávané mená skriptov na cyklické
    // spúšťanie:
    private final String[] zoznamSkriptov;
    // Táto premenná slúži na počítanie spúšťania skriptov (a zároveň
    // pomáha pri ich cyklickom spúšťaní):
    private int počítadloSkriptov = 0;
    // Konštruktor.
    private TestLadeniaSkriptu(String[] zoznamSkriptov)
    {
        // Uchovanie zoznamu s menami skriptov.
        this.zoznamSkriptov = zoznamSkriptov;
        // Presmerovanie výpisov skriptov na podlahu.
        Skript.presmerujNaPodlahu();
        // Definovanie obsluhy udalostí…
        new ObsluhaUdalostí()
        {
            @Override public boolean ladenie(
                int riadok, String príkaz, int správa)
            {
                // Nasledujúce vetvenie zabezpečuje spracovanie rôznych
                // situácií počas ladenia:
                switch (správa)
                {
                    case ČAKAŤ:
                        // Čakanie počas krokovania:
                        if (krok)
                        {
                            krok = false;
                            Svet.prekresli();
                            return false;
                        }
                        return true;
                    case PRERUŠIŤ:
                        // Predčasné ukončenie vykonávania skriptu:
                        if (prerušiť)
                        {
                            Svet.farbaTextu(tmavooranžová);
                            Svet.vypíšRiadok("Vykonávanie bolo prerušené.");
                            Svet.predvolenáFarbaTextu();
                            // Ďalšie podrobnosti by sme mohli vypísať
                            // napríklad s pomocou nasledujúceho úryvku kódu:
                            //    "na riadku", riadok, ":", GRobot.riadok,
                            //    príkaz
                        }
                        return prerušiť;
                    // Výpis definovaných menoviek skriptu odfiltrujeme:
                    case VYPÍSAŤ_MENOVKY: return false;
                    case UKONČENIE_SKRIPTU:
                        if (!prerušiť)
                        {
                            // Informáciu o ukončení vypíšeme len v prípade,
                            // že program nebol prerušený:
                            Svet.farbaTextu(tmavotyrkysová);
                            Svet.vypíšRiadok("Vykonávanie bolo dokončené.");
                            Svet.predvolenáFarbaTextu();
                        }
                        return false;
                    case UKONČENIE_CHYBOU:
                        // Vypíšeme len text chyby…
                        Svet.farbaTextu(červená);
                        Svet.vypíšRiadok(príkaz);
                        Svet.predvolenáFarbaTextu();
                            // Ďalšie podrobnosti by sme mohli vypísať
                            // napríklad s pomocou nasledujúcich úryvkov kódu:
                            //    "Číslo chyby", Svet.kódPoslednejChyby()
                            //    "Riadok chyby ", riadok
                        return false;
                    // Nefiltrujeme žiadne príkazy,
                    // vykonávame všetko bez rozdielu:
                    case ZABRÁNIŤ_VYKONANIU: return false;
                }
                // Na všetky ostatné otázky režimu ladenia (VYPÍSAŤ_PREMENNÉ,
                // VYPÍSAŤ_RIADOK, VYPÍSAŤ_PRÍKAZ, VYKONAŤ_PRÍKAZ,
                // VYPÍSAŤ_SKRIPT) odpovedáme kladne:
                return true;
            }
            @Override public void klik()
            {
                // Ak bolo stlačené pravé tlačidlo myši, zistíme hodnotu
                // číselnej premennej (toto je tu uvedené na demonštračné
                // účely, dalo by sa to rozpracovať tak, aby si používateľ
                // mohol zvoliť typ premennej).
                if (ÚdajeUdalostí.tlačidloMyši(PRAVÉ))
                {
                    String názov = Svet.zadajReťazec(
                        "Názov číselnej premennej:");
                    if (null != názov)
                    {
                        if (Svet.premennáJestvuje(názov, Double.class))
                        {
                            Svet.farbaTextu(tyrkysová);
                            Svet.vypíšRiadok("     ", názov, " = ",
                                Svet.čítajPremennú(názov, Double.class));
                            Svet.predvolenáFarbaTextu();
                        }
                        else
                        {
                            Svet.farbaTextu(červená);
                            Svet.vypíšRiadok("     Premenná ",
                                názov, "nejestvuje.");
                            Svet.predvolenáFarbaTextu();
                        }
                    }
                }
                // Inak (t. j. ak boli stlačené ostatné tlačidlá myši):
                //   Ak prebieha vykonávanie skriptu, tak prejdeme na
                //   ďalší krok, inak začneme vykonávanie nového skriptu.
                else if (Svet.skriptJeSpustený()) krok = true; else spusti();
            }
            @Override public void stlačenieKlávesu()
            {
                if (ÚdajeUdalostí.kláves(Kláves.ESCAPE))
                {
                    // Klávesom ESC prerušíme ladenie…
                    prerušiť = true;
                    krok = true;
                }
                else if (Svet.skriptJeSpustený())
                {
                    if (ÚdajeUdalostí.kláves(Kláves.MEDZERA))
                    {
                        // Klávesom medzera krokujeme…
                        krok = true;
                    }
                }
                else
                {
                    if (ÚdajeUdalostí.kláves(Kláves.ENTER))
                    {
                        // Klávesom ENTER opätovne spúšťame skript…
                        spusti();
                    }
                }
            }
            @Override public void tik()
            {
                if (Svet.neboloPrekreslené()) Svet.prekresli();
            }
        };
        // Musíme zapnúť režim interaktívny režim (zapneme len Svet a robot),
        // režim ladenia a zabezpečíme, aby nebol robot automaticky skrytý po
        // prvom výpise na vnútornú konzolu programovacieho rámca (pozri
        // poznámku na konci opisu metódy Plátno.vypíš).
        Svet.režimLadenia(true);
        Svet.interaktívnyRežim(true);
        Svet.vypíš(this);
        interaktívnyRežim(true);
        spusti();
        Svet.spustiČasovač();
    }
    // Touto metódou sa spúšťa ladenie ďalšieho skriptu. Logicky, pokus
    // o spustenie nového ladenia bude vykonaný len v takom prípade,
    // keď nie je v činnosti iné ladenie. (Volanie metódy spustiSkript
    // by v opačnom prípade i tak nemalo žiadny efekt.)
    public void spusti()
    {
        if (!Svet.skriptJeSpustený())
        {
            // Nastavenie predvolených parametrov robota, rôznych vizuálnych
            // parametrov plátien sveta atď., aby malo každé ladenie čo
            // najviac podobné podmienky…
            Skript.globálnePremenné().vymaž();
            while (null != Skript.priestorNaVrchu())
                Skript.vynorPriestor();
            krok = false;
            prerušiť = false;
            domov();
            predvolenáHrúbkaPera();
            predvolenáFarba();
            predvolenéPísmo();
            predvolenýTvar();
            podlaha.predvolenáFarbaPozadiaTextu();
            strop.farbaPozadiaTextu(snehová);
            strop.písmo("Cambria", 16);
            podlaha.písmo("Consolas", 11);
            Svet.predvolenáFarbaPlochy();
            Svet.predvolenáFarbaPozadia();
            Svet.vymaž();
            Svet.titulok(zoznamSkriptov[
                počítadloSkriptov % zoznamSkriptov.length]);
            Svet.spustiSkript(zoznamSkriptov[
                počítadloSkriptov % zoznamSkriptov.length], true);
            ++počítadloSkriptov;
        }
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        if (0 == args.length)
        {
            System.out.println("Zadajte mená skriptov ako argumenty!");
        }
        else
        {
            Svet.použiKonfiguráciu("TestLadeniaSkriptu.cfg");
            new TestLadeniaSkriptu(args);
        }
    }
}
 
  
 
 Ďalšie využitie skriptov
 
 Skripty sa dajú použiť aj na oživenie ovládacích prvkov rozhrania
 programovacieho rámca. Pozri napríklad:
 
 Tlačidlo.skript(riadky),
 PoložkaPonuky.skript(riadky),
 KontextováPoložka.skript(riadky).
 
 Vývoj skriptovacieho stroja nebol úplne priamočiary a informácie,
 ktoré s ním úzko súvisia sú rozmiestnené na viacerých miestach
 dokumentácie. Užitočné príklady použitia nájdete napríklad […]
 
 
 
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
Skript.PremenneSkriptu
 Alias pre PremennéSkriptu.
static class 
Skript.PremennéSkriptu
Táto trieda uchováva a pracuje s mapami premenných skriptov.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Skript() 
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Abstract Metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static Object
citajPremennu(String názov,
             Class&lt;?&gt; typ)
 Alias pre čítajPremennú.
static Object
čítajPremennú(String názov,
             Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu.
static Farba
farbaLadenia(String názov)
Zistí farbu určeného prvku syntaxe používanej pri zobrazovaní
 zdrojového kódu v režime
 ladenia.
static void
farbaLadenia(String názov,
            Color nováFarba)
Určuje novú farbu určeného prvku syntaxe používanej pri zobrazovaní
 zdrojového kódu v režime
 ladenia.
static void
farbaLadenia(String názov,
            Farebnosť objekt)
Určuje novú farbu určeného prvku syntaxe používanej pri
 zobrazovaní zdrojového kódu v režime ladenia.
static Skript.PremenneSkriptu
globalnePremenne()
 Alias pre globálnePremenné.
static Skript.PremenneSkriptu
globálnePremenné()
Vráti globálny priestor premenných skriptov.
static int
kodPoslednejChyby()
 Alias pre kódPoslednejChyby.
static int
kódPoslednejChyby()
Získa kód poslednej chyby, ktorá nastala počas vykonávania
 príkazov interaktívneho režimu alebo skriptu.
static boolean
ladenie()
Zistí, či je zapnuté ladenie skriptov programovacieho rámca
 GRobot.
static void
ladenie(boolean zapniLadenie)
Zapne alebo vypne ladenie skriptov programovacieho rámca
 GRobot.
static int
objemPriestorov()
Vráti aktuálny objem vnútorného zásobníka vnorených priestorov
 premenných skriptov.
static Object
poslednaNavratovaHodnota()
 Alias pre poslednáNávratováHodnota.
static Object
poslednáNávratováHodnota()
Získa návratovú hodnotu naposledy vykonaného „príkazu“
 interaktívneho režimu,
 ktorý bol vykonaný vo forme volania niektorej metódy triedy rámca
 a to buď samostatne, alebo v rámci vykonávania skriptu.
static boolean
pouzivaPodlahu()
 Alias pre používaPodlahu.
static boolean
pouzivaStrop()
 Alias pre používaStrop.
static boolean
používaPodlahu()
Metóda zistí, či stroj skriptov používa na aktivity súvisiace
 s režimom ladenia (výpisy,
 mazanie textov, úprava farebnej schémy…) vnútornú konzolu podlahy.
static boolean
používaStrop()
Metóda zistí, či stroj skriptov používa na aktivity súvisiace
 s režimom ladenia (výpisy,
 mazanie textov, úprava farebnej schémy…) vnútornú konzolu stropu.
static boolean
premennaExistuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennáExistuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennaJestvuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennáJestvuje(String názov,
                Class&lt;?&gt; typ)
Zistí, či jestvuje (je definovaná) premenná so zadaným názvom
 a typom.
static void
presmerujNaPodlahu()
Presmeruje všetky aktivity súvisiace s režimom ladenia (výpisy, mazanie textov,
 úprava farebnej schémy…) na vnútornú konzolu podlahy.
static void
presmerujNaStrop()
Presmeruje všetky aktivity súvisiace s režimom ladenia (výpisy, mazanie textov,
 úprava farebnej schémy…) na vnútornú konzolu stropu.
static Skript.PremennéSkriptu
priestorNaVrchu()
Vráti najvrchnejší priestor vnútorného zásobníka vnorených
 priestorov premenných skriptov.
static int
riadokPoslednejChyby()
Ak posledná chyba vznikla na konkrétnom riadku skriptu, tak
 táto metóda vráti číslo tohto riadka.
static String
textChyby(int kódChyby)
Vráti vysvetľujúci text ku kódu chyby určenej parametrom
 kódChyby.
static String
textPoslednejChyby()
Vráti vysvetľujúci text ku kódu poslednej chyby, ktorá nastala
 počas vykonávania príkazov
 interaktívneho režimu
 alebo skriptu.
static Skript.PremennéSkriptu
vnorPriestor(Skript.PremennéSkriptu priestor)
Vloží do vnútorného zásobníka vnorených priestorov premenných
 skriptov novú položku – nový priestor.
abstract int
vykonaj()
Táto metóda je implementovaná v každej odvodenej triede a jej
 účelom je zabezpečiť vykonanie skriptu.
static void
vymazPremennu(String názov,
             Class&lt;?&gt; typ)
 Alias pre vymažPremennú.
static void
vymažPremennú(String názov,
             Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu.
static Skript.PremennéSkriptu
vynorPriestor()
Vyberie (a vráti) najvrchnejšiu položku zo zásobníka vnorených
 priestorov premenných skriptov.
void
vypis()
 Alias pre vypíš.
static void
vypisPremenne()
 Alias pre vypíšPremenné.
abstract void
vypíš()
Táto metóda je implementovaná v každej odvodenej triede a jej
 účelom je zabezpečiť vypísanie skriptu na aktuálnu vnútornú konzolu
 (predvolene na strop; pozri aj presmerujNaPodlahu).
static void
vypíšPremenné()
Vypíše všetky premenné dostupné v aktuálne vykonávanom bloku
 (to jest prostredí) na konzolu aktuálneho plátna (predvolene na
 strop; pozri aj presmerujNaPodlahu).
static Skript
vyrob(String[] skript)
Táto metóda vyrobí inštanciu skriptu zo zadaného poľa riadkov.
static boolean
zapisPremennu(String názov,
             Object hodnota)
 Alias pre zapíšPremennú.
static boolean
zapíšPremennú(String názov,
             Object hodnota)
Nastaví novú hodnotu určenej premennej alebo definuje novú
 premennú.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Skript
public Skript()
Podrobnosti metód
vykonaj
public abstract int vykonaj()
Táto metóda je implementovaná v každej odvodenej triede a jej
 účelom je zabezpečiť vykonanie skriptu. Vykonávanie paralelne
 zabezpečuje aj ladenie skriptu.
Návratová hodnota:
číslo riadka, na ktorom vznikla chyba; ak chyba nevznikla,
     tak návratovou hodnotou je nula = ŽIADNA_CHYBA
vypíš
public abstract void vypíš()
Táto metóda je implementovaná v každej odvodenej triede a jej
 účelom je zabezpečiť vypísanie skriptu na aktuálnu vnútornú konzolu
 (predvolene na strop; pozri aj presmerujNaPodlahu). Výpis skriptu je
 využívaný počas ladenia.
vypis
public void vypis()
 Alias pre vypíš.
vyrob
public static Skript vyrob(String[] skript)
Táto metóda vyrobí inštanciu skriptu zo zadaného poľa riadkov.
 Túto metódu využívajú všetky statické metódy sveta, ktoré spúšťajú
 alebo vytvárajú skripty (zo súborov alebo iných údajových štruktúr),
 napríklad:
 
 
 vyrobSkript(skript,
 zoSúboru),
 vyrobSkript(skript),
 nahrajSkript(názov,
 súbor),
 vykonajSkript(riadky)
 a podobne.
 
Parametre:
skript – pole riadkov skriptu, z ktorých bude vyrobená nová
     inštancia skriptu
Návratová hodnota:
inštancia skriptu alebo null)
     (v takom prípade by metóda kódPoslednejChyby mala vrátiť kód
     CHYBA_DVOJITÁ_MENOVKA)
ladenie
public static void ladenie(boolean zapniLadenie)
Zapne alebo vypne ladenie skriptov programovacieho rámca
 GRobot.
 
 Ak je ladenie zapnuté, tak sú počas činnosti skriptov vypisované
 rôzne informácie o vykonávaní príkazov skriptu na vnútornú konzolu
 programovacieho rámca (predvolene na strop;
 pozri aj presmerujNaPodlahu).
 Tiež je pravidelne spúšťaná reakcia obsluhy udalostí ladenie (ak je obsluha
 udalostí definovaná).
Parametre:
zapniLadenie – true alebo false
Pozri tiež:
ladenie(), 
ObsluhaUdalostí.ladenie(int, String, int)
ladenie
public static boolean ladenie()
Zistí, či je zapnuté ladenie skriptov programovacieho rámca
 GRobot.
Návratová hodnota:
true alebo false
Pozri tiež:
ladenie(boolean)
globálnePremenné
public static Skript.PremenneSkriptu globálnePremenné()
Vráti globálny priestor premenných skriptov. Globálny priestor
 premenných je spoločný pre všetky skripty. Lokálne priestory
 premenných sú vytvárané a likvidované priebežne počas činnosti
 skriptov a preto k nim nie je možné získať prístup „zvonka.“ (Pozri
 opis metódy objemPriestorov.)
 
 Podrobnosti o spôsobe práce s priestorom premenných skriptov sú
 v dokumentácii triedy PremennéSkriptu.
 
 Poznámka: Ten istý výsledok dosiahneme
 volaním metódy Skript.PremennéSkriptu.dajObzor(null) (resp. Skript.PremennéSkriptu.dajObzor("")).
globalnePremenne
public static Skript.PremenneSkriptu globalnePremenne()
 Alias pre globálnePremenné.
objemPriestorov
public static int objemPriestorov()
Vráti aktuálny objem vnútorného zásobníka vnorených priestorov
 premenných skriptov. Ide o aktuálny počet položiek v zásobníku.
 Zásobník, o ktorom je reč, uchováva priestory lokálnych premenných
 spustených skriptov a premenných definovaných vo vnorených blokoch
 skriptov. Ak nie je spustený žiadny skript, mal by byť jeho objem
 nulový. V opačnom prípade sa môže hodnota objemu rýchlo meniť.
 
 Poznámka: V opise metódy globálnePremenné je spomenutý proces
 dynamického vytvárania a likvidácie priestorov lokálnych premenných.
 Nejde len o lokálne premenné v zmysle individuálnych premenných
 skriptu, ale aj o premenné platné len v rámci konkrétneho bloku.
 Priestory ich existencie su spravované prostredníctvom vnútorného
 zásobníka (tzv. „zásobníka priestorov“), ktorý je sprístupnený
 prostredníctvom skupiny metód, do ktorej patrí aj táto metóda.
 (Proces dynamického vytvárania a likvidácie lokálnych priestorov môže
 byť značne komplikovaný.)
Návratová hodnota:
počet položiek (priestorov premenných) v zásobníku
Pozri tiež:
priestorNaVrchu(), 
vnorPriestor(PremennéSkriptu), 
vynorPriestor()
priestorNaVrchu
public static Skript.PremennéSkriptu priestorNaVrchu()
Vráti najvrchnejší priestor vnútorného zásobníka vnorených
 priestorov premenných skriptov. (Pozri aj opis metódy objemPriestorov.) Ak je zásobník prázdny, tak
 táto metóda vráti hodnotu null.
 
 Ak sa na vrchu zásobníka priestorov nenachádza ten priestor, ktorý
 by ste očakávali (ten, ktorý ste tam mali naposledy vložiť), tak to
 znamená, že sa niekde stala chyba a tento stav treba vhodne
 prehodnotiť (odladiť) a prípadne ohlásiť používateľovi aplikácie
 (chybovým hlásením; prípadne, ak si myslíte, že ide o vnútornú chybu
 rámca, tak aj autorovi rámca).
Návratová hodnota:
najvrchnejší (aktuálny) priestor premenných skriptov
     v zásobníku alebo null (pri chybe)
Pozri tiež:
objemPriestorov(), 
vnorPriestor(PremennéSkriptu), 
vynorPriestor()
vnorPriestor
public static Skript.PremennéSkriptu vnorPriestor(Skript.PremennéSkriptu priestor)
Vloží do vnútorného zásobníka vnorených priestorov premenných
 skriptov novú položku – nový priestor. (Pozri aj opis metódy objemPriestorov.) Tento zásobník je bežne
 spravovaný automaticky, čiže sa nepredpokladá aktívne využívanie
 tejto metódy, avšak môže byť užitočná napríklad pri simulácii práce
 s objektmi a ich vnútornými premennými (atribútmi).
 
 Návratová hodnota null signalizuje chybu. Pri tejto
 metóde to znamená buď pokus o vloženie hodnoty null
 namiesto platného priestoru, alebo pokus o duplicitné vloženie
 priestoru, čiže takého, ktorý sa už vo vnútornom zásobníku priestorov
 nachádza.
Parametre:
priestor – priestor premenných na vloženie do zásobníka; nesmie
     byť null
Návratová hodnota:
práve vložený priestor do zásobníka alebo null
     (pri chybe)
Pozri tiež:
objemPriestorov(), 
priestorNaVrchu(), 
vynorPriestor()
vynorPriestor
public static Skript.PremennéSkriptu vynorPriestor()
Vyberie (a vráti) najvrchnejšiu položku zo zásobníka vnorených
 priestorov premenných skriptov. (Pozri aj opis metódy objemPriestorov.) Táto metóda je doplnkom k metóde
 vnorPriestor.
 
 Návratová hodnota null signalizuje chybu. Pri tejto
 metóde to znamená, že zásobník priestorov je prázdny.
Návratová hodnota:
najvrchnejší (práve vybraný) priestor premenných skriptov
     v zásobníku alebo null (pri chybe)
Pozri tiež:
objemPriestorov(), 
priestorNaVrchu(), 
vnorPriestor(PremennéSkriptu)
vypíšPremenné
public static void vypíšPremenné()
Vypíše všetky premenné dostupné v aktuálne vykonávanom bloku
 (to jest prostredí) na konzolu aktuálneho plátna (predvolene na
 strop; pozri aj presmerujNaPodlahu). Totiž, vnorenie do každého bloku mení prostredie
 premenných stroja skriptov – vždy ho prekryje novým priestorom
 lokálnych premenných.
 
 Toto je príkaz ladenia. Má uľahčiť proces ladenia formátovaným
 výpisom premenných na aktuálnu konzolu. (Informácie o globálnych
 premenných sa dajú získať aj prostredníctvom inštancie, ktorú vracia
 metóda globálnePremenné.)
 
 Poznámka: To znamená, že globálne premenné
 by mohli byť v tomto vnorenom priestore prekryté lokálnymi (prípadne
 tzv. obzorovými) premennými, ale v skutočnosti je vznik takejto
 situácie veľmi nepravdepodobný, keďže pri zápise (to jest aj
 definícii) premenných sa vždy najskôr kontroluje dostupnosť premennej
 vo vyšších priestoroch premenných…
 
 Na výpis je použitý aktuálny štýl (farebná schéma). Pozri aj:
 farbaLadenia.
vypisPremenne
public static void vypisPremenne()
 Alias pre vypíšPremenné.
premennáJestvuje
public static boolean premennáJestvuje(String názov,
                                       Class&lt;?&gt; typ)
Zistí, či jestvuje (je definovaná) premenná so zadaným názvom
 a typom.
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Návratová hodnota:
ak premenná zadaného údajového typu jestvuje, tak je
     návratovou hodnotou tejto metódy hodnota true;
     ak premenná nejestvuje alebo bol zadaný nepovolený údajový
     typ premennej, tak je návratovou hodnotou tejto metódy
     hodnota false
Pozri tiež:
Skript.PremennéSkriptu.jestvuje(String, Trieda)
premennaJestvuje
public static boolean premennaJestvuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
premennáExistuje
public static boolean premennáExistuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
premennaExistuje
public static boolean premennaExistuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
čítajPremennú
public static Object čítajPremennú(String názov,
                                   Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu.
 (Ak jestvuje – je definovaná.)
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Návratová hodnota:
ak premenná jestvuje, tak je návratovou hodnotou tejto
     metódy hodnota tejto premennej; ak premenná nejestvuje,
     prípadne bol zadaný nepovolený údajový typ premennej, tak je
     návratovou hodnotou tejto metódy hodnota null
Pozri tiež:
Skript.PremennéSkriptu.čítaj(String, Trieda)
citajPremennu
public static Object citajPremennu(String názov,
                                   Class&lt;?&gt; typ)
 Alias pre čítajPremennú.
zapíšPremennú
public static boolean zapíšPremennú(String názov,
                                    Object hodnota)
Nastaví novú hodnotu určenej premennej alebo definuje novú
 premennú. Ak je zadaná hodnota nepovoleného údajového typu, tak
 nebude nastavená hodnota žiadnej premennej. To isté platí pri pokuse
 o zapísanie hodnoty null. Úspešnosť (resp. neúspešnosť)
 nastavenia hodnoty premennej potvrdzuje návratová hodnota tejto
 metódy – true (úspech) / false (neúspech).
 
 Upozornenie: Nová premenná je prednostne
 vytvorená v aktuálnom lokálnom priestore premenných (pozri napríklad
 opis metódy objemPriestorov). Iba
 v prípade, že nie je aktívny žiadny lokálny priestor, sa premenná
 vytvorí v globálnom priestore. Na zápis premennej do konkrétneho
 priestoru premenných (vrátane globálneho) slúži metóda PremennéSkriptu.zapíš.
Parametre:
názov – názov premennej
hodnota – hodnota premennej povoleného údajového typu –
     povolené sú: Double,
     Color, Poloha alebo
     String
Návratová hodnota:
kontrolná návratová hodnota (ide najmä o overenie toho,
     či zadaná hodnota naozaj bola niektorého povoleného typu);
     ak je návratová hodnota true, tak bola zadaná
     hodnota zapísaná do premennej prislúchajúceho údajového typu
Pozri tiež:
Skript.PremennéSkriptu.zapíš(String, Object)
zapisPremennu
public static boolean zapisPremennu(String názov,
                                    Object hodnota)
 Alias pre zapíšPremennú.
vymažPremennú
public static void vymažPremennú(String názov,
                                 Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu.
 (Ak jestvuje.)
 
 Upozornenie: Premenná je prednostne
 vymazaná z aktuálneho lokálneho priestoru premenných (pozri napríklad
 opis metódy objemPriestorov). V prípade,
 že nie je aktívny žiadny lokálny priestor, sa premenná vymaže
 z globálneho priestoru. Na vymazanie premennej z konkrétneho priestoru
 premenných (vrátane globálneho) slúži
 metóda PremennéSkriptu.vymaž.
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Pozri tiež:
Skript.PremennéSkriptu.vymaž(String, Trieda)
vymazPremennu
public static void vymazPremennu(String názov,
                                 Class&lt;?&gt; typ)
 Alias pre vymažPremennú.
kódPoslednejChyby
public static int kódPoslednejChyby()
Získa kód poslednej chyby, ktorá nastala počas vykonávania
 príkazov interaktívneho režimu alebo skriptu. Môže ísť buď o jeden
 z nasledujúcich kódov:
 
 
 ŽIADNA_CHYBA,
 CHYBA_VYKONANIA_PRÍKAZU,
 CHYBA_DVOJITÁ_MENOVKA,
 CHYBA_CHÝBAJÚCA_MENOVKA,
 CHYBA_NEZNÁMA_MENOVKA,
 CHYBA_NEZNÁME_SLOVO,
 CHYBA_CHYBNÁ_ŠTRUKTÚRA,
 CHYBA_NEZNÁME_MENO,
 CHYBA_NEZNÁMY_PRÍKAZ,
 CHYBA_ČÍTANIA_SKRIPTU,
 alebo CHYBA_VOLANIA_SKRIPTU,
 
 
 alebo o kód s celočíselnou hodnotou väčšou alebo rovnou
 50, kedy ide o chybu spôsobenú pri spracovaní
 (matematického) výrazu vyhodnoteného prostredníctvom vnútorného
 vyhodnocovača výrazov (pozri
 
ExpressionProcessor), ktorý
 (syntakticky) nasleduje za znakom mriežky # (chybové kódy
 vnútorného vyhodnocovača (matematických) výrazov nie sú uvedené v tejto
 dokumentácii, ale syntax s mriežkou je bližšie spomenutá napríklad
 v opise metódy Svet.interaktívnyRežim; chybové kódy vyhodnocovača sú uvedené v 
jeho zdrojovom kóde).
 
 Poznámka: Tabuľka chýb je v opise
 metódy textChyby.
Návratová hodnota:
kód chyby – ďalšie podrobnosti môžete získať kliknutím
     na kód chyby v zozname vyššie
Pozri tiež:
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
kodPoslednejChyby
public static int kodPoslednejChyby()
 Alias pre kódPoslednejChyby.
riadokPoslednejChyby
public static int riadokPoslednejChyby()
Ak posledná chyba vznikla na konkrétnom riadku skriptu, tak
 táto metóda vráti číslo tohto riadka.
Návratová hodnota:
číslo riadka, na ktorom vznikla posledná chyba
Pozri tiež:
kódPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
textPoslednejChyby
public static String textPoslednejChyby()
Vráti vysvetľujúci text ku kódu poslednej chyby, ktorá nastala
 počas vykonávania príkazov
 interaktívneho režimu
 alebo skriptu.
 
 Poznámka: Tabuľka chýb je v opise
 metódy textChyby.
Návratová hodnota:
text ku kódu chyby
Pozri tiež:
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textChyby(int)
textChyby
public static String textChyby(int kódChyby)
Vráti vysvetľujúci text ku kódu chyby určenej parametrom
 kódChyby. Ide o kódy vnútorne definované a používané
 pri hláseniach o nesprávnych stavoch počas vykonávania príkazov
 interaktívneho režimu
 alebo skriptu.
 
 Tabuľka chýb
 
 V tabuľke sú zosumarizované všetky konštanty reprezentujúce kódy
 chýb skriptov programovacieho rámca a prislúchajúce textové znenia
 patriace k týmto kódom. Kliknutím na kód prejdete na ďalšie
 podrobnosti.
 
 Výnimku tvoria kódy s hodnotou rovnou alebo vyššou než
 50, ktoré sú rezervované pre chyby spôsobené pri
 spracovaní výrazu vyhodnoteného prostredníctvom vnútorného
 vyhodnocovača výrazov – pozri opis metódy kódPoslednejChyby.
 
 
 Kód chybyTextové znenie chyby
 
 CHYBA_VOLANIA_SKRIPTUVznikla chyba pri volaní vnoreného
 skriptu. (Bola zaznamenaná príliš veľká hĺbka volaní vnorených
 skriptov.)
 
 CHYBA_ČÍTANIA_SKRIPTUVznikla chyba pri čítaní skriptu.
 (Súbor alebo zdroj s obsahom skriptu nemusel byť nájdený alebo mohla
 vzniknúť chyba pri čítaní údajov.)
 
 ŽIADNA_CHYBANenastala
 žiadna chyba. (Prípadne mohla nastať neznáma
 chyba.)
 
 CHYBA_VYKONANIA_PRÍKAZUNastala chyba počas vykonávania
 posledného príkazu. (Mohlo ísť napríklad o zadanie nesprávneho
 argumentu a pod.)
 
 CHYBA_DVOJITÁ_MENOVKAV skripte sa vyskytla dvojnásobná
 definícia menovky. (Vykonávanie skriptu nie je bezpečné, pretože
 skript pri vykonávaní riadiacich príkazov („na,“ „ak,“ „dokedy“
 s prípadnou alternatívou „inak“ pri posledných dvoch) nemusí správne
 identifikovať, ktorým riadkom má jeho vykonávanie
 pokračovať.)
 
 CHYBA_CHÝBAJÚCA_MENOVKAZa riadiacim príkazom „na,“ „ak,“
 „dokedy“ alebo za alternatívou „inak“ chýba zadanie menovky. (Za
 uvedenými riadiacimi príkazmi nie je zadaná menovka, prípadne nie je
 k dispozícii žiadna náhrada za chýbajúcu menovku, ako napríklad blok
 príkazov na vykonanie.)
 
 CHYBA_NEZNÁMA_MENOVKAMenovka za riadiacim príkazom „na,“
 „ak,“ „dokedy“ alebo za alternatívou „inak“ je neznáma. (Nie je
 definovaná v rámci aktuálneho bloku skriptu alebo pri príkaze „na“
 ani v niektorom z nadradených blokov skriptu.)
 
 CHYBA_NEZNÁME_SLOVOZa menovkou riadiaceho príkazu „ak“
 alebo „dokedy“ sa vyskytlo neznáme slovo. (Za zadaním prvej menovky
 môže nasledovať ďalšia menovka a to buď bezprostredne, alebo za slovom
 určujúcim alternatívu – „inak.“ Ostatné slová sú považované za
 neznáme.)
 
 CHYBA_CHYBNÁ_ŠTRUKTÚRAPokus o korektné rozpoznanie
 riadiaceho príkazu „obzor,“ „ak,“ „opakuj“ alebo „dokedy“ zlyhal.
 (Chyba vzniká napríklad, ak riadiaci príkaz nenašiel ďalší príkaz
 alebo blok na vykonanie/opakovanie. Pri opakovaniach vzniká chyba
 aj vtedy, ak nie je definovaná riadiaca premenná, ktorú sa riadiaci
 príkaz pokúša použiť na svoju činnosť.)
 
 CHYBA_NEZNÁME_MENONaposledy aktivovaná inštancia už alebo
 ešte nejestvuje. (Zadané meno inštancie je neznáme.)
 
 CHYBA_NEZNÁMY_PRÍKAZZadaný príkaz nebol rozpoznaný.
 (Najčastejšími príčinami sú syntaktické chyby alebo neaktivovanie
 správnej (prípadne žiadnej) inštancie, to jest takej, ktorá skutočne
 obsahuje definíciu metódy zodpovedajúcej príkazu
 skriptu.)
 
 50Nepodarilo sa priradiť reťazec
 vyhodnocovaču výrazov. (Vnútorný vyhodnocovač (matematických) výrazov
 z určitého dôvodu neprijal reťazec na spracovanie.)
 
 &gt; 50Vznikla chyba pri
 vyhodnocovaní výrazu. (Vnútorný vyhodnocovač (matematických) výrazov
 ohlásil chybu pri spracovaní reťazca, ktorý pravdepodobne nie je
 korektným (matematickým) výrazom. Text chyby: «pôvodný text chyby
 v angličtine».)
 
 
 
 Texty chýb vyhodnocovača (matematických) výrazov sú uvedené v 
jeho zdrojovom kóde.
Návratová hodnota:
text ku kódu chyby
Pozri tiež:
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby()
poslednáNávratováHodnota
public static Object poslednáNávratováHodnota()
Získa návratovú hodnotu naposledy vykonaného „príkazu“
 interaktívneho režimu,
 ktorý bol vykonaný vo forme volania niektorej metódy triedy rámca
 a to buď samostatne, alebo v rámci vykonávania skriptu.
Návratová hodnota:
návratová hodnota naposledy vykonaného príkazu
     (metódy rámca zadanej vo forme príkazu interaktívneho režimu)
poslednaNavratovaHodnota
public static Object poslednaNavratovaHodnota()
 Alias pre poslednáNávratováHodnota.
presmerujNaPodlahu
public static void presmerujNaPodlahu()
Presmeruje všetky aktivity súvisiace s režimom ladenia (výpisy, mazanie textov,
 úprava farebnej schémy…) na vnútornú konzolu podlahy. Od okamihu vykonania tejto metódy, budú
 všetky aktivity presmerované na vnútornú konzolu podlahy.
Pozri tiež:
presmerujNaStrop(), 
používaPodlahu(), 
používaStrop()
presmerujNaStrop
public static void presmerujNaStrop()
Presmeruje všetky aktivity súvisiace s režimom ladenia (výpisy, mazanie textov,
 úprava farebnej schémy…) na vnútornú konzolu stropu. (Toto je predvolené správanie.) Od okamihu
 vykonania tejto metódy, budú všetky aktivity presmerované na
 vnútornú konzolu podlahy (ak to tak dovtedy nebolo).
Pozri tiež:
presmerujNaPodlahu(), 
používaPodlahu(), 
používaStrop()
používaPodlahu
public static boolean používaPodlahu()
Metóda zistí, či stroj skriptov používa na aktivity súvisiace
 s režimom ladenia (výpisy,
 mazanie textov, úprava farebnej schémy…) vnútornú konzolu podlahy. Ak áno, tak je jej návratová hodnota
 true.
Návratová hodnota:
true v prípade, že
     režim ladenia používa
     vnútornú konzolu podlahy,
     false v opačnom prípade
Pozri tiež:
presmerujNaPodlahu(), 
presmerujNaStrop(), 
používaStrop()
pouzivaPodlahu
public static boolean pouzivaPodlahu()
 Alias pre používaPodlahu.
používaStrop
public static boolean používaStrop()
Metóda zistí, či stroj skriptov používa na aktivity súvisiace
 s režimom ladenia (výpisy,
 mazanie textov, úprava farebnej schémy…) vnútornú konzolu stropu. Ak áno, tak je jej návratová hodnota
 true.
Návratová hodnota:
true v prípade, že
     režim ladenia používa
     vnútornú konzolu stropu, false
     v opačnom prípade
Pozri tiež:
presmerujNaPodlahu(), 
presmerujNaStrop(), 
používaPodlahu()
pouzivaStrop
public static boolean pouzivaStrop()
 Alias pre používaStrop.
farbaLadenia
public static Farba farbaLadenia(String názov)
Zistí farbu určeného prvku syntaxe používanej pri zobrazovaní
 zdrojového kódu v režime
 ladenia. Ak zadaný názov farebného prvku syntaxe nekorešponduje
 ani s jedným z povolených názvov, tak je vrátená hodnota
 null.
Parametre:
názov – názov farby vo forme reťazca (povolené sú tieto názvy:
     "číslo riadka", "menovka",
     "symbol", "meno inštancie",
     "názov premennej", "číslo",
     "farba", "poloha", "reťazec",
     "riadiaci príkaz", "príkaz",
     "aktívny riadok", "začiatok bloku",
     "koniec bloku", "jednoduchý výraz",
     "zložený výraz" a "chyba")
Návratová hodnota:
farba priradená k určenému prvku syntaxe alebo hodnota
     null, ak názov nebo rozpoznaný
farbaLadenia
public static void farbaLadenia(String názov,
                                Color nováFarba)
Určuje novú farbu určeného prvku syntaxe používanej pri zobrazovaní
 zdrojového kódu v režime
 ladenia. Hodnota null nie je povolená a je ignorovaná.
 Farba prvku na nastavenie, je cielená názvom prvku vo forme
 reťazca. Ak zadaný názov nekorešponduje ani s jedným z povolených
 názvov, tak je zadaná hodnota farby ignorovaná.
Parametre:
názov – názov farby vo forme reťazca (povolené sú tieto názvy:
     "číslo riadka", "menovka",
     "symbol", "meno inštancie",
     "názov premennej", "číslo",
     "farba", "poloha", "reťazec",
     "riadiaci príkaz", "príkaz",
     "aktívny riadok", "začiatok bloku",
     "koniec bloku", "jednoduchý výraz",
     "zložený výraz" a "chyba")
farba – nová farba zadaného prvku syntaxe
farbaLadenia
public static void farbaLadenia(String názov,
                                Farebnosť objekt)
Určuje novú farbu určeného prvku syntaxe používanej pri
 zobrazovaní zdrojového kódu v režime ladenia. Farba je určená prostredníctvom objektu, ktorý
 implementuje rozhranie Farebnosť. Hodnota
 null nie je povolená a je ignorovaná.
 Farba prvku na nastavenie, je cielená názvom prvku vo forme
 reťazca. Ak zadaný názov nekorešponduje ani s jedným z povolených
 názvov, tak nie je vykonaná žiadna akcia.
Parametre:
názov – názov farby vo forme reťazca (povolené sú tieto názvy:
     "číslo riadka", "menovka",
     "symbol", "meno inštancie",
     "názov premennej", "číslo",
     "farba", "poloha", "reťazec",
     "riadiaci príkaz", "príkaz",
     "aktívny riadok", "začiatok bloku",
     "koniec bloku", "jednoduchý výraz",
     "zložený výraz" a "chyba")
objekt – objekt určujúci novú farbu zadaného prvku syntaxe
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Smer
Všetky známe implementujúce triedy:
Castica, Častica, GRobot, Uhol
public interface Smer
Rozhranie slúži na implementáciu metód slúžiacich na zistenie aktuálnej
 orientácie (smeru/uhla) objektu a na definíciu konštánt pre základné smery.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static double
JUH
Hodnota uhla zodpovedajúca smeru „juh“ – 270°.
static double
JUHOVYCHOD
Hodnota uhla zodpovedajúca smeru „juhovýchod“ – 315°.
static double
JUHOVÝCHOD
Hodnota uhla zodpovedajúca smeru „juhovýchod“ – 315°.
static double
JUHOZAPAD
Hodnota uhla zodpovedajúca smeru „juhozápad“ – 225°.
static double
JUHOZÁPAD
Hodnota uhla zodpovedajúca smeru „juhozápad“ – 225°.
static double
SEVER
Hodnota uhla zodpovedajúca smeru „sever“ – 90°.
static double
SEVEROVYCHOD
Hodnota uhla zodpovedajúca smeru „severovýchod“ – 45°.
static double
SEVEROVÝCHOD
Hodnota uhla zodpovedajúca smeru „severovýchod“ – 45°.
static double
SEVEROZAPAD
Hodnota uhla zodpovedajúca smeru „severozápad“ – 135°.
static double
SEVEROZÁPAD
Hodnota uhla zodpovedajúca smeru „severozápad“ – 135°.
static double
VYCHOD
Hodnota uhla zodpovedajúca smeru „východ“ – 0°.
static double
VÝCHOD
Hodnota uhla zodpovedajúca smeru „východ“ – 0°.
static double
ZAPAD
Hodnota uhla zodpovedajúca smeru „západ“ – 180°.
static double
ZÁPAD
Hodnota uhla zodpovedajúca smeru „západ“ – 180°.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
double
smer()
Prototyp metódy na zistenie smeru/uhla objektu.
double
uhol()
Prototyp metódy na zistenie smeru/uhla objektu.
Podrobnosti atribútov
VÝCHOD
static final double VÝCHOD
Hodnota uhla zodpovedajúca smeru „východ“ – 0°.
Pozri tiež:
Hodnoty konštánt
VYCHOD
static final double VYCHOD
Hodnota uhla zodpovedajúca smeru „východ“ – 0°.
Pozri tiež:
Hodnoty konštánt
SEVEROVÝCHOD
static final double SEVEROVÝCHOD
Hodnota uhla zodpovedajúca smeru „severovýchod“ – 45°.
Pozri tiež:
Hodnoty konštánt
SEVEROVYCHOD
static final double SEVEROVYCHOD
Hodnota uhla zodpovedajúca smeru „severovýchod“ – 45°.
Pozri tiež:
Hodnoty konštánt
SEVER
static final double SEVER
Hodnota uhla zodpovedajúca smeru „sever“ – 90°.
Pozri tiež:
Hodnoty konštánt
SEVEROZÁPAD
static final double SEVEROZÁPAD
Hodnota uhla zodpovedajúca smeru „severozápad“ – 135°.
Pozri tiež:
Hodnoty konštánt
SEVEROZAPAD
static final double SEVEROZAPAD
Hodnota uhla zodpovedajúca smeru „severozápad“ – 135°.
Pozri tiež:
Hodnoty konštánt
ZÁPAD
static final double ZÁPAD
Hodnota uhla zodpovedajúca smeru „západ“ – 180°.
Pozri tiež:
Hodnoty konštánt
ZAPAD
static final double ZAPAD
Hodnota uhla zodpovedajúca smeru „západ“ – 180°.
Pozri tiež:
Hodnoty konštánt
JUHOZÁPAD
static final double JUHOZÁPAD
Hodnota uhla zodpovedajúca smeru „juhozápad“ – 225°.
Pozri tiež:
Hodnoty konštánt
JUHOZAPAD
static final double JUHOZAPAD
Hodnota uhla zodpovedajúca smeru „juhozápad“ – 225°.
Pozri tiež:
Hodnoty konštánt
JUH
static final double JUH
Hodnota uhla zodpovedajúca smeru „juh“ – 270°.
Pozri tiež:
Hodnoty konštánt
JUHOVÝCHOD
static final double JUHOVÝCHOD
Hodnota uhla zodpovedajúca smeru „juhovýchod“ – 315°.
Pozri tiež:
Hodnoty konštánt
JUHOVYCHOD
static final double JUHOVYCHOD
Hodnota uhla zodpovedajúca smeru „juhovýchod“ – 315°.
Pozri tiež:
Hodnoty konštánt
Podrobnosti metód
uhol
double uhol()
Prototyp metódy na zistenie smeru/uhla objektu.
smer
double smer()
Prototyp metódy na zistenie smeru/uhla objektu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":10,"i2":10,"i3":9,"i4":9,"i5":10,"i6":10,"i7":9,"i8":9,"i9":9,"i10":9,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Spojenie
java.lang.Object
Spojenie
public class Spojenie
extends Object
Táto trieda slúži na vytvorenie a udržiavanie komunikácie so
 serverom.
 
 
 
  
 
 Príklady použitia – využitie pri komunikácii s PHP
 serverom:
 
 Upozornenie: Na cieľovom serveri musia
 jestvovať prislúchajúce PHP skripty, na ktoré sa nasledujúce príklady
 odvolávajú. (Napríklad: login.php, acceptFile.php
 a podobne.)
 
 Test spojenia:
 
 Táto ukážka použitia predpokladá, že lokálny ("localhost")
 PHP server je nakonfigurovaný tak, aby počúval na porte 81 a že
 v podpriečinku bjpu-server webového koreňa servera je uložený
 jednoduchý PHP skript test.php, ktorého výpis je uvedený
 nižšie.
 
 
 
 
private boolean test()
{
    Spojenie spojenie = new Spojenie();
    spojenie.vzdialenáCesta("bjpu-server");
    spojenie.identifikátorÚdajov("bluej-project-uploader");
    spojenie.port(81);
    boolean úspech = spojenie.otvor("test.php");
    return spojenie.zavri() && úspech;
}
 
 Príklad cieľového skriptu test.php umiestneného na cieľovom
 serveri (localhost) v priečinku bjpu-server (toto je
 jediný PHP príklad uvedený v tejto dokumentácii):
 
 
 
 
&lt;?php
    header('Content-Type: text/plain; charset=UTF-8');
    echo 'ERR0: Connected.';
?&gt;
 
  
 
 Príklad prihlásenia sa (od tohto miesta ďalej bez PHP príkladov):
 
 Upozornenie: Na cieľovom serveri musí
 jestvovať prihlasovací skript login.php, ktorý požaduje
 prihlasovacie údaje (meno a heslo) v údajových poliach login
 a password.
 
 
 
 
private Spojenie spojenie = new Spojenie();
public boolean prihlásSa(String prihlasovacieMeno, String heslo)
{
    boolean úspech;
    if (úspech = spojenie.otvor("login.php"))
    {
        úspech =
            spojenie.pridajÚdaj("login", prihlasovacieMeno) &&
            spojenie.pridajÚdaj("password", heslo);
    }
    return spojenie.zavri() && úspech;
}
 
  
 
 Príklad odoslania textového
 súboru:
 
 Upozornenie: Na cieľovom serveri musí
 jestvovať PHP skript acceptFile.php, ktorý očakáva prijatie
 súboru, ktorý spracuje (napríklad uloží do databázy, vykoná určitú
 akciu na základe jeho obsahu a podobne).
 
 Poznámka: S použitím tejto triedy je v rámci
 jedného otvoreného spojenia (ktoré je
 ekvivaletné jednej obojsmernej komunikácii) možné odoslať iba jeden
 súbor. To znamená, že príkaz pošliTextovýSúbor (prípadne pošliSúbor)
 musí byť posledný príkazom spojenia a po ňom musí nasledovať volanie
 metódy zavri.
 
 
 
 
private Spojenie spojenie = new Spojenie();
private int sessionID = &#45;152;    // Jedinečný identifikátor sedenia
public boolean odošliTextovýSúbor(String názovSúboru)
{
    boolean úspech;
    if (úspech = spojenie.otvor("acceptFile.php"))
    {
        úspech =
            spojenie.pridajÚdaj("sessionID", sessionID) &&
            spojenie.pošliTextovýSúbor(názovSúboru);
    }
    return spojenie.zavri() && úspech;
}
 
  
 
 Príklad spracovania primitívnej textovej odpovede (s použitím
 metódy dajOdpoveď):
 
 Poznámka: Budeme predpokladať, že odpoveď sa
 bude zhodovať s nasledujúcou šablónou vyjadrenou s pomocou regulárneho
 výrazu:
  ERR[+\-]{0,1}[0-9]+: «správa» 
 Príklady:  ERR0: OK  ERR-1: No error.
  ERR+100: „Nejaká správa“  a podobne.
 
 
 
 
private Spojenie spojenie = new Spojenie();
public int prevezmiChybovýKód()
{
    String odpoveď = spojenie.dajOdpoveď();
    if (null != odpoveď && odpoveď.startsWith("ERR"))
    {
        int index = odpoveď.indexOf(':');
        if (&#45;1 != index) try
        {
            return Integer.parseInt(odpoveď.substring(3, index));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    return &#45;1;
}
 
  
 
 Použité a odporúčané zdroje:
 
 
 User:Albe – 
User:Willi Mentzel – and others: 
 href="http://stackoverflow.com/questions/1314249/upload-and-post-file-to-php-page"
Upload and POST file to PHP page with Java. Stack
 Overflow, 2009, 2017. Citované: 2018.
 
 Vlad Patryshev: 
Send
 Form Data from Java: A Painless Solution. developer.com, 2003.
 Citované: 2018.
 
 
mkyong: 
 href="http://www.mkyong.com/java/how-to-get-mac-address-in-java/"
How to get MAC address in Java. mkyong.com,
 2010. Citované: 2018.
 
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Spojenie()
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 s predvolenými údajmi spojenia.
Spojenie(String doména)
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 so zadanou doménou a ostatnými údajmi spojenia nastavenými na
 predvolené hodnoty.
Spojenie(String doména,
        String vzdialenáCesta)
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 so zadanou doménou, vzdialenou cestou a ostatnými údajmi spojenia
 nastavenými na predvolené hodnoty.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static String
dajAdresu()
Táto statická metóda slúži na zistenie aktuálnej (IP) adresy
 tohto zariadenia.
byte[]
dajBajtyOdpovede()
Vráti odpoveď servera vo forme poľa bajtov.
byte[]
dajBajtyOdpovede(String kódovanie)
Vráti odpoveď servera vo forme poľa bajtov.
static String
dajHardverovuAdresu()
 Alias pre dajHardvérovúAdresu.
static String
dajHardvérovúAdresu()
Táto statická metóda slúži na zistenie aktuálnej hardvérovej
 adresy tohto zariadenia.
int
dajKodOdpovede()
 Alias pre dajKódOdpovede.
int
dajKódOdpovede()
Vráti kód poslednej odpovede servera.
static String
dajNazovHosta()
 Alias pre dajNázovHosťa.
static String
dajNázovHosťa()
Táto statická metóda slúži na zistenie aktuálneho názvu hosťa,
 to jest tohto zariadenia.
static String
dajNazovHosta(boolean kánonický)
 Alias pre dajNázovHosťa.
static String
dajNázovHosťa(boolean kánonický)
Táto statická metóda slúži na zistenie aktuálneho názvu hosťa,
 to jest tohto zariadenia.
String
dajNazovSuboruOdpovede()
 Alias pre dajNázovSúboruOdpovede.
String
dajNázovSúboruOdpovede()
Zistí názov súboru odpovede.
String
dajOdpoved()
 Alias pre dajOdpoveď.
String
dajOdpoveď()
Vráti odpoveď servera v textovej forme.
URLConnection
dajSpojenie()
Poskytne objekt URLConnection aktuálnej
 správy.
String
dajTypObsahuOdpovede()
Vráti typ obsahu odpovede servera.
String[]
dajUdajeOdpovede()
 Alias pre dajÚdajeOdpovede.
String[]
dajÚdajeOdpovede()
Vráti údaje súvisiace s odpoveďou servera vo forme poľa reťazcov.
String[]
dajUdajePoziadavky()
 Alias pre dajÚdajePožiadavky.
String[]
dajÚdajePožiadavky()
Vráti údaje súvisiace s poslednou správou (požiadavkou poslanou
 na server) vo forme poľa reťazcov.
long
dajVelkostOdpovede()
 Alias pre dajVeľkosťOdpovede.
long
dajVeľkosťOdpovede()
Vráti veľkosť poslednej odpovede servera v bajtoch.
String
domena()
 Alias pre doména.
String
doména()
Vráti aktuálnu doménu.
boolean
domena(String doména)
 Alias pre doména.
boolean
doména(String doména)
Nastaví novú doménu.
String
identifikatorUdajov()
 Alias pre identifikátorÚdajov.
String
identifikátorÚdajov()
Vráti aktuálny identifikátor údajov.
void
identifikatorUdajov(String identifikátorÚdajov)
 Alias pre identifikátorÚdajov.
void
identifikátorÚdajov(String identifikátorÚdajov)
Nastaví nový identifikátor údajov.
String
lokalnaCesta()
 Alias pre lokálnaCesta.
String
lokálnaCesta()
Vráti aktuálnu lokálnu cestu k súborom na odoslanie.
void
lokalnaCesta(String lokálnaCesta)
 Alias pre lokálnaCesta.
void
lokálnaCesta(String lokálnaCesta)
Nastaví novú lokálnu cestu k súborom na odoslanie.
boolean
odpovedPrecitana()
 Alias pre odpoveďPrečítaná.
boolean
odpoveďPrečítaná()
Overí, či bola alebo nebola prečítaná odpoveď servera.
boolean
otvor(String vzdialenýSúbor)
Otvorí novú komunikáciu (vytvorí novú správu) so serverom určeným
 konfiguráciou tejto inštancie (protokolom, doménou, portom, vzdialenou
 cestou) a parametrom vzdialenýSúbor tejto metódy.
boolean
otvor(String vzdialenýSúbor,
     String prvýParameter,
     String prváHodnota,
     String... ďalšieParametreAHodnoty)
Otvorí novú komunikáciu (vytvorí novú správu) so serverom určeným
 konfiguráciou tejto inštancie (protokolom, doménou, portom, vzdialenou
 cestou) a parametrami tejto metódy (vzdialenýSúbor,
 prvýParameter, prváHodnota a nepovinným variabilným
 zoznamom ďalších parametrov a hodnôt).
boolean
otvorLokalitu(String adresa)
Otvorí novú komunikáciu podľa zadanej lokality.
int
port()
Vráti aktuálne číslo portu.
boolean
port(int port)
Nastaví nový port.
String
posielatDatumPoslednejUpravy()
 Alias pre posielaťDátumPoslednejÚpravy.
String
posielaťDátumPoslednejÚpravy()
Zistí názov údajového poľa, v ktorom bude odoslaný dátum poslednej
 úpravy súboru odosielaného na server.
void
posielatDatumPoslednejUpravy(String názovPoľa)
 Alias pre posielaťDátumPoslednejÚpravy.
void
posielaťDátumPoslednejÚpravy(String názovPoľa)
Zmení názov údajového poľa, v ktorom bude odoslaný dátum poslednej
 úpravy súboru odosielaného na server.
boolean
posliSubor(String názovSúboru)
 Alias pre pošliSúbor.
boolean
posliSubor(String názovPoľa,
          String názovSúboru)
 Alias pre pošliSúbor.
boolean
posliSubor(String názovPoľa,
          String názovSúboru,
          String typObsahu)
 Alias pre pošliSúbor.
boolean
posliTextovySubor(String názovSúboru)
 Alias pre pošliTextovýSúbor.
boolean
posliTextovySubor(String názovSúboru,
                 String kódovanie)
 Alias pre pošliTextovýSúbor.
boolean
posliTextovySubor(String názovPoľa,
                 String názovSúboru,
                 String kódovanie)
 Alias pre pošliTextovýSúbor.
boolean
pošliSúbor(String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pošliSúbor(String názovPoľa,
          String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pošliSúbor(String názovPoľa,
          String názovSúboru,
          String typObsahu)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pošliTextovýSúbor(String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pošliTextovýSúbor(String názovSúboru,
                 String kódovanie)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pošliTextovýSúbor(String názovPoľa,
                 String názovSúboru,
                 String kódovanie)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
boolean
pridajUdaj(String názov,
          double hodnota)
 Alias pre pridajÚdaj.
boolean
pridajÚdaj(String názov,
          double hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
boolean
pridajUdaj(String názov,
          long hodnota)
 Alias pre pridajÚdaj.
boolean
pridajÚdaj(String názov,
          long hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
boolean
pridajUdaj(String názov,
          String hodnota)
 Alias pre pridajÚdaj.
boolean
pridajÚdaj(String názov,
          String hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
String
protokol()
Vráti aktuálny protokol.
boolean
protokol(String protokol)
Nastaví nový protokol.
String
ulozOdpoved()
 Alias pre uložOdpoveď.
String
ulozOdpoved(String názovSúboru)
 Alias pre uložOdpoveď.
String
uložOdpoveď()
Uloží odpoveď servera do súboru.
String
uložOdpoveď(String názovSúboru)
Uloží odpoveď servera do súboru so zadaným názvom.
String
vzdialenaCesta()
 Alias pre vzdialenáCesta.
String
vzdialenáCesta()
Vráti aktuálnu vzdialenú cestu.
boolean
vzdialenaCesta(String vzdialenáCesta)
 Alias pre vzdialenáCesta.
boolean
vzdialenáCesta(String vzdialenáCesta)
Nastaví novú vzdialenú cestu.
boolean
zavri()
Odošle všetky neodoslané údaje, prečíta odpoveď servera a zavrie
 aktuálne spojenie.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Spojenie
public Spojenie()
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 s predvolenými údajmi spojenia. Predvolenými sú nasledujúce údaje
 súvisiace so sieťovou komunikáciou:
 
 
 Protokol: "http"
 Doména: "localhost"
 Port: 80
 Vzdialená cesta:
 «prázdna»
 Identifikátor údajov:
 "grobot-data-boundary"
 Lokálna cesta:
 «prázdna»
 
Pozri tiež:
Spojenie(String), 
Spojenie(String, String), 
otvor(String), 
zavri(), 
dajSpojenie()
Spojenie
public Spojenie(String doména)
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 so zadanou doménou a ostatnými údajmi spojenia nastavenými na
 predvolené hodnoty. Pozri konštruktor: Spojenie
Parametre:
doména – cieľová doména tejto komunikácie
Výnimky:
GRobotException – v prípade zadania chybných údajov spojenia
Pozri tiež:
Spojenie(String), 
Spojenie(String, String), 
doména(String), 
otvor(String), 
zavri(), 
dajSpojenie()
Spojenie
public Spojenie(String doména,
                String vzdialenáCesta)
Vytvorí inštanciu komunikácie prostredníctvom počítačovej siete
 so zadanou doménou, vzdialenou cestou a ostatnými údajmi spojenia
 nastavenými na predvolené hodnoty. Pozri konštruktor: Spojenie
Parametre:
doména – cieľová doména tejto komunikácie
vzdialenáCesta – vzdialená cesta tejto komunikácie
Výnimky:
GRobotException – v prípade zadania chybných údajov spojenia
Pozri tiež:
Spojenie(String), 
Spojenie(String, String), 
doména(String), 
vzdialenáCesta(String), 
otvor(String), 
zavri(), 
dajSpojenie()
Podrobnosti metód
protokol
public boolean protokol(String protokol)
Nastaví nový protokol.
Parametre:
protokol – komunikačný protokol, napríklad http alebo https
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
protokol(), 
Spojenie(String, String), 
doména(String), 
port(int), 
vzdialenáCesta(String), 
identifikátorÚdajov(String), 
lokálnaCesta(String)
protokol
public String protokol()
Vráti aktuálny protokol.
Návratová hodnota:
aktuálny komunikačný protokol tohto spojenia
Pozri tiež:
protokol(String), 
doména(), 
port(), 
vzdialenáCesta(), 
identifikátorÚdajov(), 
lokálnaCesta()
doména
public boolean doména(String doména)
Nastaví novú doménu.
Parametre:
doména – sieťová doména servera, s ktorým má byť nadviazaná
     komunikácia
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
doména(), 
Spojenie(String), 
protokol(String), 
port(int), 
vzdialenáCesta(String), 
identifikátorÚdajov(String), 
lokálnaCesta(String)
domena
public boolean domena(String doména)
 Alias pre doména.
doména
public String doména()
Vráti aktuálnu doménu.
Návratová hodnota:
aktuálna doména tejto inštancie spojenia
Pozri tiež:
doména(String), 
protokol(), 
port(), 
vzdialenáCesta(), 
identifikátorÚdajov(), 
lokálnaCesta()
domena
public String domena()
 Alias pre doména.
port
public boolean port(int port)
Nastaví nový port. Hodnota musí byť v rozsahu 0 – 65 535. Ak je
 zadaná hodnota mimo tohto rozsahu, port nebude nastavený (zmenený).
 Predvolenou hodnotou je číslo 80.
Parametre:
port – číslo portu v rozsahu 0 – 65 535
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
port(), 
protokol(String), 
doména(String), 
vzdialenáCesta(String), 
identifikátorÚdajov(String), 
lokálnaCesta(String)
port
public int port()
Vráti aktuálne číslo portu. Predvolenou hodnotou je číslo portu
 80.
Návratová hodnota:
aktuálne číslo portu
Pozri tiež:
port(int), 
protokol(), 
doména(), 
vzdialenáCesta(), 
identifikátorÚdajov(), 
lokálnaCesta()
vzdialenáCesta
public boolean vzdialenáCesta(String vzdialenáCesta)
Nastaví novú vzdialenú cestu.
Parametre:
vzdialenáCesta – vzdialená cesta na serveri
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
vzdialenáCesta(), 
Spojenie(String, String), 
protokol(String), 
doména(String), 
port(int), 
identifikátorÚdajov(String), 
lokálnaCesta(String)
vzdialenaCesta
public boolean vzdialenaCesta(String vzdialenáCesta)
 Alias pre vzdialenáCesta.
vzdialenáCesta
public String vzdialenáCesta()
Vráti aktuálnu vzdialenú cestu.
Návratová hodnota:
aktuálna vzdialená cesta tohto spojenia
Pozri tiež:
vzdialenáCesta(String), 
protokol(), 
doména(), 
port(), 
identifikátorÚdajov(), 
lokálnaCesta()
vzdialenaCesta
public String vzdialenaCesta()
 Alias pre vzdialenáCesta.
identifikátorÚdajov
public void identifikátorÚdajov(String identifikátorÚdajov)
Nastaví nový identifikátor údajov. Tento identifikátor slúži na
 vytvorenie ohraničenia oblasti údajov HTTP požiadavky. Mal by byť
 zvolený tak, aby sa priamo nevyskytoval v odosielaných údajoch.
 Predvolená hodnota identifikátora je reťazec:
 "grobot-data-boundary".
Parametre:
identifikátorÚdajov – nový identifikátor, ktorý poslúži na
     vytvorenie oddeľovača odosielaných údajov
Pozri tiež:
identifikátorÚdajov(), 
protokol(String), 
doména(String), 
port(int), 
vzdialenáCesta(String), 
lokálnaCesta(String)
identifikatorUdajov
public void identifikatorUdajov(String identifikátorÚdajov)
 Alias pre identifikátorÚdajov.
identifikátorÚdajov
public String identifikátorÚdajov()
Vráti aktuálny identifikátor údajov.
Návratová hodnota:
aktuálny identifikátor slúžiaci na vytvorenie ohraničenia
     oblasti údajov posielaných prostredníctvom tohto spojenia
Pozri tiež:
identifikátorÚdajov(String), 
protokol(), 
doména(), 
port(), 
vzdialenáCesta(), 
lokálnaCesta()
identifikatorUdajov
public String identifikatorUdajov()
 Alias pre identifikátorÚdajov.
lokálnaCesta
public void lokálnaCesta(String lokálnaCesta)
Nastaví novú lokálnu cestu k súborom na odoslanie.
 
 Poznámka: Lokálnu cestu je vhodné nastaviť
 pred volaním niektorého z klonov metód pošliTextovýSúbor
 a pošliSúbor.
Parametre:
lokálnaCesta – lokálna cesta k súborom na odoslanie
Pozri tiež:
lokálnaCesta(), 
protokol(String), 
doména(String), 
port(int), 
vzdialenáCesta(String), 
identifikátorÚdajov(String)
lokalnaCesta
public void lokalnaCesta(String lokálnaCesta)
 Alias pre lokálnaCesta.
lokálnaCesta
public String lokálnaCesta()
Vráti aktuálnu lokálnu cestu k súborom na odoslanie.
Návratová hodnota:
aktuálna lokálna cesta použitá počas tejto komunikácie
Pozri tiež:
lokálnaCesta(String), 
protokol(), 
doména(), 
port(), 
vzdialenáCesta(), 
identifikátorÚdajov()
lokalnaCesta
public String lokalnaCesta()
 Alias pre lokálnaCesta.
dajÚdajePožiadavky
public String[] dajÚdajePožiadavky()
Vráti údaje súvisiace s poslednou správou (požiadavkou poslanou
 na server) vo forme poľa reťazcov. Volanie tejto metódy má zmysel
 až po ukončení spojenia metódou zavri.
 
 Prvé dva prvky vrátené v poli obsahujú cieľovú adresu URL
 rozdelenú na dve časti. Prvá časť je zostavená podľa konfigurácie
 tohto spojenia – protokolu,
 domény, portu
 a vzdialenej cesty. Druhá časť
 je vytvorená z parametra alebo parametrov niektorého z klonov metód
 otvor (vzdialenýSúbor a pod.).
 
  Ostatné prvky poľa sú tvorené údajmi hlavičky odoslanej správy.
 Táto metóda vráti len niektoré (HTTP) hlavičky poslednej požiadavky
 odoslanej na server a to tie, ktorých požiadavka na nastavenie bola
 aktívna v čase zahájenia posielania údajov na server. To znamená,
 že na server mohli byť poslané aj iné údaje (hlavičky), ktoré
 inštancia spojenia vytvorila podľa uváženia.
 
 Ak sa spojenie zlyhalo alebo vznikla iná chyba, tak metóda vráti
 hodnotu null.
Návratová hodnota:
údaje súvisiace s poslednou komunikáciou so serverom vo forme
     poľa reťazcov alebo null
Pozri tiež:
dajÚdajeOdpovede(), 
zavri()
dajUdajePoziadavky
public String[] dajUdajePoziadavky()
 Alias pre dajÚdajePožiadavky.
odpoveďPrečítaná
public boolean odpoveďPrečítaná()
Overí, či bola alebo nebola prečítaná odpoveď servera. Túto
 skutočnosť má zmysel overovať až po ukončení spojenia metódou
 zavri, pričom uvedená metóda vracia rovnakú
 hodnotu ako táto metóda.
Návratová hodnota:
pravdivostná hodnota vyjadrujúca to, či bola odpoveď servera
     korektne prečítaná alebo nie
Pozri tiež:
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
odpovedPrecitana
public boolean odpovedPrecitana()
 Alias pre odpoveďPrečítaná.
dajTypObsahuOdpovede
public String dajTypObsahuOdpovede()
Vráti typ obsahu odpovede servera. Volanie tejto metódy má zmysel
 až po ukončení spojenia metódou zavri. Ak je typ
 obsahu neznámy, tak metóda vráti hodnotu null.
Návratová hodnota:
typ obsahu odpovede servera alebo null, ak je
     neznámy
Pozri tiež:
odpoveďPrečítaná(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
dajVeľkosťOdpovede
public long dajVeľkosťOdpovede()
Vráti veľkosť poslednej odpovede servera v bajtoch. Volanie tejto
 metódy má zmysel až po ukončení spojenia metódou zavri. Ak sa odpoveď nepodarilo získať (alebo vznikla chyba), tak
 metóda vráti hodnotu -1L.
Návratová hodnota:
veľkosť odpovede servera alebo −1
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
dajVelkostOdpovede
public long dajVelkostOdpovede()
 Alias pre dajVeľkosťOdpovede.
dajÚdajeOdpovede
public String[] dajÚdajeOdpovede()
Vráti údaje súvisiace s odpoveďou servera vo forme poľa reťazcov.
 Volanie tejto metódy má zmysel až po ukončení spojenia metódou
 zavri.
 
 Táto metóda v podstate vráti všetky HTTP hlavičky odpovede
 servera.
 
 Ak sa odpoveď servera nepodarilo získať, tak metóda vráti hodnotu
 null.
Návratová hodnota:
všetky údaje súvisiace s odpoveďou servera vo forme poľa
     reťazcov alebo null
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
dajÚdajePožiadavky(), 
zavri()
dajUdajeOdpovede
public String[] dajUdajeOdpovede()
 Alias pre dajÚdajeOdpovede.
dajOdpoveď
public String dajOdpoveď()
Vráti odpoveď servera v textovej forme. Volanie tejto metódy má
 zmysel až po ukončení spojenia metódou zavri a len
 v prípade, že máme istotu, že odpoveď servera je v textovej forme.
 Typ obsahu odpovede je overiteľný metódou dajTypObsahuOdpovede – textové typy obsahu
 sú napríklad text/plain text/html a podobne. Ak
 odpoveď servera nie je textová, tak táto metóda vráti hodnotu
 null.
Návratová hodnota:
odpoveď servera (v textovej forme) alebo null
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
dajOdpoved
public String dajOdpoved()
 Alias pre dajOdpoveď.
dajKódOdpovede
public int dajKódOdpovede()
Vráti kód poslednej odpovede servera. Volanie tejto metódy má
 zmysel až po ukončení spojenia metódou zavri.
 Ak sa kód odpovede servera nepodarilo zistiť, tak metóda vráti
 hodnotu -1. Pozitívnym signálom toho, že komunikácia
 so serverom bola v poriadku je kód 200 –
 HTTP_OK. Ďalšie kódy s podrobným
 opisom v anglickom jazyku môžete nájsť napríklad tu: 
RFC 2616 – Hypertext Transfer Protocol –
 HTTP/1.1 – Section 10: Status Code Definitions (súhrnný zoznam
 kódov sa nachádza v 
sekcii 6.1.1 uvedeného dokumentu; citované: 2018).
Návratová hodnota:
HTTP kód poslednej odpovede servera alebo −1
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
dajKodOdpovede
public int dajKodOdpovede()
 Alias pre dajKódOdpovede.
dajBajtyOdpovede
public byte[] dajBajtyOdpovede()
Vráti odpoveď servera vo forme poľa bajtov. Volanie tejto metódy
 má zmysel až po ukončení spojenia metódou zavri.
 Ak bol typ odpovede textový, tak táto metóda vráti v poli bajtov
 bajty reťazca s použitím kódovania podľa typu obsahu odpovede
 (ktorý je overiteľný metódou dajTypObsahuOdpovede) alebo UTF-8 (ak sa kódovanie nepodarilo
 zistiť). Ak sa odpoveď servera nepodarilo získať (alebo bola priamo
 uložená do súboru), tak táto metóda vráti hodnotu null.
 Ak chcete pri textovej odpovedi typ použitého kódovania vynútiť,
 použite verziu tejto metódy
 s parametrom kódovanie.
Návratová hodnota:
odpoveď servera vo forme poľa bajtov alebo null
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(String), 
dajNázovSúboruOdpovede(), 
zavri()
dajBajtyOdpovede
public byte[] dajBajtyOdpovede(String kódovanie)
Vráti odpoveď servera vo forme poľa bajtov. Volanie tejto metódy
 má zmysel až po ukončení spojenia metódou zavri.
 Ak bol typ odpovede textový, tak táto metóda vráti v poli bajtov
 bajty reťazca zakódované s použitím zadaného kódovania. (Typ obsahu
 odpovede je overiteľný metódou dajTypObsahuOdpovede.) Ak sa odpoveď servera nepodarilo získať
 (alebo bola priamo uložená do súboru), tak táto metóda vráti hodnotu
 null.
Návratová hodnota:
odpoveď servera vo forme poľa bajtov alebo null
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajNázovSúboruOdpovede(), 
zavri()
dajNázovSúboruOdpovede
public String dajNázovSúboruOdpovede()
Zistí názov súboru odpovede. Volanie tejto metódy má zmysel až po
 ukončení spojenia metódou zavri. Ak nie je odpoveď
 textová, pokúsi sa názov prevziať z údajov prijatých v odpovedi. Ak
 zlyhá, prevezme názov z požiadavky odoslanej na server (z parametra
 vzdialenýSúbor metódy otvor alebo jej
 klonu). V tom prípade overí typu obsahu odpovede a ak je text/html, upraví príponu na
 .html.
Pozri tiež:
odpoveďPrečítaná(), 
dajTypObsahuOdpovede(), 
dajVeľkosťOdpovede(), 
dajÚdajeOdpovede(), 
dajOdpoveď(), 
dajKódOdpovede(), 
dajBajtyOdpovede(), 
dajBajtyOdpovede(String), 
uložOdpoveď(), 
uložOdpoveď(String), 
zavri()
dajNazovSuboruOdpovede
public String dajNazovSuboruOdpovede()
 Alias pre dajNázovSúboruOdpovede.
uložOdpoveď
public String uložOdpoveď()
Uloží odpoveď servera do súboru. Názov súboru prevezme s použitím
 metódy dajNázovSúboruOdpovede.
 Súbor bude uložený na aktuálnu lokálnu cestu. Ak súbor s názvom na uloženie v cieľovom umiestnení
 jestvuje, tak metóda upraví názov tak, aby nebol prepísaný žiadny
 súbor. Metóda sa správa rozdielne podľa toho, či bola volaná pred
 alebo po ukončení spojenia metódou zavri. Ďalšie
 podrobnosti (nielen o uvedenom rozdiele) sú v opise metódy uložOdpoveď.
Návratová hodnota:
názov súboru, pod ktorým bola odpoveď uložená alebo
     null v prípade zlyhania
Pozri tiež:
dajNázovSúboruOdpovede(), 
uložOdpoveď(String), 
zavri()
ulozOdpoved
public String ulozOdpoved()
 Alias pre uložOdpoveď.
uložOdpoveď
public String uložOdpoveď(String názovSúboru)
Uloží odpoveď servera do súboru so zadaným názvom. Ak je táto
 metóda volaná po ukončení spojenia metódou zavri,
 tak ukladá tie údaje, ktoré boli vopred prečítané a ktoré sú zároveň
 dostupné prostredníctvom metódy dajÚdajeOdpovede. V opačnom prípade začne údaje čítať a priebežne
 ukladať sama, ale pri tomto spôsobe ich neukladá do vnútornej pamäte
 a nebudú po ukončení spojenia dostupné metódou dajÚdajeOdpovede. To je výhodné pri preberaní
 väčších súborov, kedy by inak mohla nastať chyba v dôsledku preplnenia
 pamäte. V oboch prípadoch bude súbor uložený na aktuálnu lokálnu cestu. Ak súbor s názvom na uloženie
 v cieľovom umiestnení jestvuje, tak metóda upraví názov tak, aby nebol
 prepísaný žiadny súbor.
 
 Metóda rozlišuje ešte jeden špeciálny prípad. Ak je volaná pred
 ukončením spojenia (pretože len v tom prípade ešte neboli na server
 odoslané údaje o požiadavke), tak ak pred začatím ukladania nájde
 súbor zodpovedajúci šablóne názvu súboru s pripojeným reťazcom
 -part, tak tento súbor bude považovať za časť preberaného
 súboru, ktorého preberanie predtým zlyhalo. Vtedy zo servera vyžiada
 zvyšnú časť súboru a prijímané údaje pripojí k nájdenému súboru.
 
 Upozornenie: Obnovenie zlyhaného
 preberania funguje len v tom prípade, ak server podporuje odosielanie
 rozsahov bajtov (čiže častí súborov, ktoré si klient vyžiadal). Ak
 server nie je nakonfigurovaný tak, aby bol schopný odoslať len
 vyžiadaný rozsah bajtov (prípadne táto voľba nie je podporovaná pre
 vyžiadaný typ súboru), tak obnovenie preberania nebude možné, čo
 metóda signalizuje vrátením hodnoty null.
 
 V prípade okamžitého preberania údajov bude metóda spúšťať reakciu
 sekvencia (s prislúchajúcim variantom pre jednotlivé roboty)
 s kódom spracovania PREVZATIE_ÚDAJOV.
Parametre:
názovSúboru – názov súboru, pod ktorým by mala byť odpoveď
     uložená
Návratová hodnota:
názov súboru, pod ktorým bola odpoveď uložená alebo
     null v prípade zlyhania
Výnimky:
GRobotException – ak bol názov súboru zamlčaný (bola zadaná
     hodnota null)
Pozri tiež:
dajNázovSúboruOdpovede(), 
uložOdpoveď(), 
zavri()
ulozOdpoved
public String ulozOdpoved(String názovSúboru)
 Alias pre uložOdpoveď.
dajSpojenie
public URLConnection dajSpojenie()
Poskytne objekt URLConnection aktuálnej
 správy. Volaním niektorého klonu metódy otvor
 vzniká vždy nové spojenie – objekt URLConnection, ktorý je k dispozícii aj po volaní metódy
 zavri, aby z neho bolo možné prevziať i také údaje,
 ktoré trieda Spojenie nespracúva. Rovnako je možné
 prostredníctvom tohto objektu nastavovať v čase medzi otvorením a zatvorením spojenia
 také údaje, s ktorými tiež trieda Spojenie
 nepracuje. Ak doteraz nebolo vytvorené žiadne spojenie, tak metóda
 vráti hodnotu null.
Návratová hodnota:
inštancia triedy URLConnection alebo
     hodnota null
Pozri tiež:
otvor(String), 
otvor(String, String, String, String...), 
zavri()
otvor
public boolean otvor(String vzdialenýSúbor)
Otvorí novú komunikáciu (vytvorí novú správu) so serverom určeným
 konfiguráciou tejto inštancie (protokolom, doménou, portom, vzdialenou
 cestou) a parametrom vzdialenýSúbor tejto metódy.
 
 
Parametre:
vzdialenýSúbor – názov vzdialeného súboru (skriptu), ktorý má
     byť prevzatý zo servera (ak ide o názov skriptu, tak tento bude
     vykonaný na strane servera, ktorý odošle výsledok vykonania ako
     odpoveď)
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
otvor(String, String, String, String...), 
otvorLokalitu(String), 
pridajÚdaj(String, String), 
pošliSúbor(String, String, String), 
zavri(), 
dajSpojenie()
otvor
public boolean otvor(String vzdialenýSúbor,
                     String prvýParameter,
                     String prváHodnota,
                     String... ďalšieParametreAHodnoty)
Otvorí novú komunikáciu (vytvorí novú správu) so serverom určeným
 konfiguráciou tejto inštancie (protokolom, doménou, portom, vzdialenou
 cestou) a parametrami tejto metódy (vzdialenýSúbor,
 prvýParameter, prváHodnota a nepovinným variabilným
 zoznamom ďalších parametrov a hodnôt).
 
 
Parametre:
vzdialenýSúbor – názov vzdialeného súboru (skriptu), ktorý má
     byť prevzatý zo servera (ak ide o názov skriptu, tak tento bude
     vykonaný na strane servera, ktorý odošle výsledok vykonania ako
     odpoveď)
prvýParameter – názov prvého parametra, ktorý bude pridaný
     k tejto požiadavke
prváHodnota – hodnota prvého parametra
ďalšieParametreAHodnoty – nepovinný zoznam ďalších dvojíc
     názvov a hodnôt parametrov; ak má zoznam nepárny počet prvkov,
     tak posledný prvok nebude použitý
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
otvor(String), 
otvorLokalitu(String), 
pridajÚdaj(String, String), 
pošliSúbor(String, String, String), 
dajÚdajePožiadavky(), 
dajÚdajeOdpovede(), 
zavri(), 
dajSpojenie()
otvorLokalitu
public boolean otvorLokalitu(String adresa)
Otvorí novú komunikáciu podľa zadanej lokality. Metóda analyzuje
 zadanú adresu a na základe výsledku analýzy nastaví protokol, doménu,
 komunikačný port a vzdialenú cestu (zavolá vnútornú metódu
 na ich nastavenie). Potom spustí metódu otvor. Ak bol výsledok volania všetkých metód pozitívny, tak táto
 metóda vráti hodnotu true, inak vráti všetky zmeny
 a vráti hodnotu false. V prípade úspechu môžu byť
 prostredníctvom prislúchajúcich metód pridávané ďalšie údaje a/alebo odoslaný súbor. Nakoniec musí byť spojenie korektne
 ukončené.
 
 
Parametre:
adresa – úplná adresa na analýzu, podľa ktorej sa vykoná
     konfigurácia inštancie a otvorí sa nové spojenie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
protokol(String), 
doména(String), 
port(int), 
vzdialenáCesta(String), 
otvor(String), 
pridajÚdaj(String, String), 
pošliSúbor(String, String, String), 
zavri()
pridajÚdaj
public boolean pridajÚdaj(String názov,
                          String hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
 Správa vzniká v okamihu otvorenia
 spojenia.
Parametre:
názov – názov údaju na odoslanie
hodnota – hodnota údaju na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pridajÚdaj(String, long), 
pridajÚdaj(String, double), 
otvor(String), 
zavri()
pridajUdaj
public boolean pridajUdaj(String názov,
                          String hodnota)
 Alias pre pridajÚdaj.
pridajÚdaj
public boolean pridajÚdaj(String názov,
                          long hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
 Správa vzniká v okamihu otvorenia
 spojenia.
Parametre:
názov – názov údaju na odoslanie
hodnota – hodnota údaju na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pridajÚdaj(String, String), 
pridajÚdaj(String, double), 
otvor(String), 
zavri()
pridajUdaj
public boolean pridajUdaj(String názov,
                          long hodnota)
 Alias pre pridajÚdaj.
pridajÚdaj
public boolean pridajÚdaj(String názov,
                          double hodnota)
Pridá údajové pole so zadaným názvom a hodnotou k tejto správe.
 Správa vzniká v okamihu otvorenia
 spojenia.
Parametre:
názov – názov údaju na odoslanie
hodnota – hodnota údaju na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pridajÚdaj(String, String), 
pridajÚdaj(String, long), 
otvor(String), 
zavri()
pridajUdaj
public boolean pridajUdaj(String názov,
                          double hodnota)
 Alias pre pridajÚdaj.
pošliTextovýSúbor
public boolean pošliTextovýSúbor(String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Odosielaný súbor musí mať predvolené kódovanie UTF-8. Metóda použije
 predvolený názov údajového poľa tejto správy, pod ktorým bude obsah
 súboru dostupný na serveri: "textFile".
 V jednej správe je možné poslať len jeden súbor. Viac podrobností
 nájdete v opise metódy pošliSúbor. Po volaní tejto metódy musí nasledovať volanie metódy
 zavri().
Parametre:
názovSúboru – názov lokálneho súboru na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String, String), 
pošliTextovýSúbor(String, String, String), 
pošliSúbor(String), 
pošliSúbor(String, String), 
pošliSúbor(String, String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliTextovySubor
public boolean posliTextovySubor(String názovSúboru)
 Alias pre pošliTextovýSúbor.
pošliTextovýSúbor
public boolean pošliTextovýSúbor(String názovSúboru,
                                 String kódovanie)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Táto metóda dovoľuje spresniť kódovanie odosielaného textového súboru.
 Metóda použije predvolený názov údajového poľa tejto správy, pod
 ktorým bude obsah súboru dostupný na serveri: "textFile".
 V jednej správe je možné poslať len jeden súbor. Viac podrobností
 nájdete v opise metódy pošliSúbor. Po volaní tejto metódy musí nasledovať volanie metódy
 zavri().
Parametre:
názovSúboru – názov lokálneho súboru na odoslanie
kódovanie – kódovanie textového súboru; predvoleným kódovaním je
     UTF-8
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String), 
pošliTextovýSúbor(String, String, String), 
pošliSúbor(String), 
pošliSúbor(String, String), 
pošliSúbor(String, String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliTextovySubor
public boolean posliTextovySubor(String názovSúboru,
                                 String kódovanie)
 Alias pre pošliTextovýSúbor.
pošliTextovýSúbor
public boolean pošliTextovýSúbor(String názovPoľa,
                                 String názovSúboru,
                                 String kódovanie)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Táto metóda dovoľuje spresniť kódovanie odosielaného textového súboru
 a zadať názov údajového poľa tejto správy, pod ktorým bude súbor
 dostupný na serveri.
 V jednej správe je možné poslať len jeden súbor. Viac podrobností
 nájdete v opise metódy pošliSúbor. Po volaní tejto metódy musí nasledovať volanie metódy
 zavri().
Parametre:
názovPoľa – názov údajového poľa tejto správy priradeného
     k odosielanému súboru
názovSúboru – názov lokálneho súboru na odoslanie
kódovanie – kódovanie textového súboru; predvoleným kódovaním je
     UTF-8
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String), 
pošliTextovýSúbor(String, String), 
pošliSúbor(String), 
pošliSúbor(String, String), 
pošliSúbor(String, String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliTextovySubor
public boolean posliTextovySubor(String názovPoľa,
                                 String názovSúboru,
                                 String kódovanie)
 Alias pre pošliTextovýSúbor.
pošliSúbor
public boolean pošliSúbor(String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Metóda použije predvolený názov údajového poľa tejto správy, pod
 ktorým bude súbor dostupný na serveri: "uploadedFile"
 a predvolený typ obsahu "application/octet-stream".
 V jednej správe je možné poslať len jeden súbor. Viac podrobností
 nájdete v opise metódy pošliSúbor. Po volaní tejto metódy musí nasledovať volanie metódy
 zavri().
Parametre:
názovSúboru – názov lokálneho súboru na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String), 
pošliTextovýSúbor(String, String), 
pošliTextovýSúbor(String, String, String), 
pošliSúbor(String, String), 
pošliSúbor(String, String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliSubor
public boolean posliSubor(String názovSúboru)
 Alias pre pošliSúbor.
pošliSúbor
public boolean pošliSúbor(String názovPoľa,
                          String názovSúboru)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Súbor bude na serveri dostupný prostredníctvom údajového poľa so
 zadaným názvom v parametri názovPoľa. Metóda použije
 predvolený typ obsahu "application/octet-stream".
 V jednej správe je možné poslať len jeden súbor. Viac podrobností
 nájdete v opise metódy pošliSúbor. Po volaní tejto metódy musí nasledovať volanie metódy
 zavri().
Parametre:
názovPoľa – názov údajového poľa tejto správy priradeného
     k odosielanému súboru
názovSúboru – názov lokálneho súboru na odoslanie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String), 
pošliTextovýSúbor(String, String), 
pošliTextovýSúbor(String, String, String), 
pošliSúbor(String), 
pošliSúbor(String, String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliSubor
public boolean posliSubor(String názovPoľa,
                          String názovSúboru)
 Alias pre pošliSúbor.
pošliSúbor
public boolean pošliSúbor(String názovPoľa,
                          String názovSúboru,
                          String typObsahu)
Odošle všetky neodoslané údaje spolu so súborom so zadaným názvom.
 Táto metóda umožňuje spresniť typ obsahu súboru odosielaného na
 server a zadať názov údajového poľa tejto správy, pod ktorým bude
 súbor dostupný na serveri.
 
 Trieda Spojenie z optimalizačných a bezpečnostných
 dôvodov podporuje odoslanie len jedného súboru v rámci jednej
 obojstrannej komunikácie (jednej správy) medzi klientom a serverom,
 preto musí byť volanie tejto metódy posledným v rámci aktuálnej
 komunikácie (to jest v rámci odosielania tejto správy) a po jej
 vykonaní musí nasledovať volanie metódy zavri(). Na odoslanie
 ďalšieho súboru je potrebné otvoriť nové
 spojenie.
 
 Poznámka: Testovanie ukázalo, že serverový
 PHP skript nie je schopný spracovať odoslaný súbor, ak spolu s ním
 nebol odoslaný aspoň jeden údaj iného typu. Dôvod sa nám nepodarilo zistiť. Z toho dôvodu sme
 sa rozhodli predvolene spolu so súborom odosielať aj čas jeho
 poslednej úpravy v samostatnom údajovom poli, ktorého predvolený
 názov je "lastModified". Predvolený názov sa dá zmeniť
 metódou posielaťDátumPoslednejÚpravy, pričom hodnota null zruší
 posielanie tohto údaju na server. V tom prípade musíte buď na server
 poslať iný údaj, alebo použiť iný server, ktorý bude schopný súbor
 spracovať aj bez poslania doplnkového údaju.
Parametre:
názovPoľa – názov údajového poľa tejto správy priradeného
     k odosielanému súboru
názovSúboru – názov lokálneho súboru na odoslanie
typObsahu – textový reťazec určujúci typ súboru – typ obsahu
     tejto prílohy sieťovej komunikácie
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
pošliTextovýSúbor(String), 
pošliTextovýSúbor(String, String), 
pošliTextovýSúbor(String, String, String), 
pošliSúbor(String), 
pošliSúbor(String, String), 
posielaťDátumPoslednejÚpravy(), 
zavri()
posliSubor
public boolean posliSubor(String názovPoľa,
                          String názovSúboru,
                          String typObsahu)
 Alias pre pošliSúbor.
posielaťDátumPoslednejÚpravy
public String posielaťDátumPoslednejÚpravy()
Zistí názov údajového poľa, v ktorom bude odoslaný dátum poslednej
 úpravy súboru odosielaného na server. Hodnota null znamená,
 že tento údaj nie je na server odosielaný. Predvolenou hodnotou je
 "lastModified". Ďalšie podrobnosti nájdete v opise metódy
 pošliSúbor.
Návratová hodnota:
názov údajového poľa na odoslanie dátumu poslednej úpravy
     alebo null
Pozri tiež:
posielaťDátumPoslednejÚpravy(String), 
pošliSúbor(String, String, String)
posielatDatumPoslednejUpravy
public String posielatDatumPoslednejUpravy()
 Alias pre posielaťDátumPoslednejÚpravy.
posielaťDátumPoslednejÚpravy
public void posielaťDátumPoslednejÚpravy(String názovPoľa)
Zmení názov údajového poľa, v ktorom bude odoslaný dátum poslednej
 úpravy súboru odosielaného na server. Hodnota null znamená,
 že tento údaj nebude na server odoslaný. Predvolenou hodnotou je
 "lastModified". Ďalšie podrobnosti nájdete v opise metódy
 pošliSúbor.
Parametre:
názovPoľa – názov údajového poľa na odoslanie dátumu poslednej
     úpravy (alebo null)
Pozri tiež:
posielaťDátumPoslednejÚpravy(), 
pošliSúbor(String, String, String)
posielatDatumPoslednejUpravy
public void posielatDatumPoslednejUpravy(String názovPoľa)
 Alias pre posielaťDátumPoslednejÚpravy.
zavri
public boolean zavri()
Odošle všetky neodoslané údaje, prečíta odpoveď servera a zavrie
 aktuálne spojenie. Ak bolo vykonanie tejto metódy úspešné, má zmysel
 volať metódy slúžiace na zisťovanie údajov o odpovedi ako:
 dajOdpoveď, dajBajtyOdpovede (podľa typu obsahu odpovede), dajVeľkosťOdpovede, dajÚdajePožiadavky
 dajÚdajeOdpovede a tak ďalej.
Návratová hodnota:
true v prípade úspechu, inak false
Pozri tiež:
otvor(String), 
otvor(String, String, String, String...), 
pridajÚdaj(String, String), 
pošliSúbor(String, String, String), 
dajOdpoveď(), 
uložOdpoveď(), 
dajÚdajePožiadavky(), 
dajÚdajeOdpovede(), 
dajSpojenie()
dajNázovHosťa
public static String dajNázovHosťa()
Táto statická metóda slúži na zistenie aktuálneho názvu hosťa,
 to jest tohto zariadenia. (Má ešte jednu verziu, ktorá umožňuje
 zistiť kánonický názov hosťa.)
Návratová hodnota:
názov zariadenia (hosťa)
Výnimky:
GRobotException – ak sa nepodarilo získať názov zariadenia
     (hosťa)
Pozri tiež:
dajNázovHosťa(boolean), 
dajAdresu(), 
dajHardvérovúAdresu()
dajNazovHosta
public static String dajNazovHosta()
 Alias pre dajNázovHosťa.
dajNázovHosťa
public static String dajNázovHosťa(boolean kánonický)
Táto statická metóda slúži na zistenie aktuálneho názvu hosťa,
 to jest tohto zariadenia. Hodnota parametra kánonický určuje,
 či má byť názov vrátený v kánonickej podobe.
Parametre:
kánonický – ak je true, tak je vrátená kánonická
     podoba názvu
Návratová hodnota:
názov zariadenia (hosťa)
Výnimky:
GRobotException – ak sa nepodarilo získať kánonický alebo
     klasický názov zariadenia (hosťa)
Pozri tiež:
dajNázovHosťa(), 
dajAdresu(), 
dajHardvérovúAdresu()
dajNazovHosta
public static String dajNazovHosta(boolean kánonický)
 Alias pre dajNázovHosťa.
dajAdresu
public static String dajAdresu()
Táto statická metóda slúži na zistenie aktuálnej (IP) adresy
 tohto zariadenia. Adresa je vrátená v textovej podobe.
Návratová hodnota:
adresa (IP) tohto zariadenia
Výnimky:
GRobotException – ak sa nepodarilo získať adresu zariadenia
     (hosťa)
Pozri tiež:
dajNázovHosťa(), 
dajNázovHosťa(boolean), 
dajHardvérovúAdresu()
dajHardvérovúAdresu
public static String dajHardvérovúAdresu()
Táto statická metóda slúži na zistenie aktuálnej hardvérovej
 adresy tohto zariadenia. Adresa je vrátená v textovej podobe.
Návratová hodnota:
hardvérová (obvykle MAC) adresa tohto zariadenia
Výnimky:
GRobotException – ak sa nepodarilo získať hardvérovú adresu
     zariadenia (hosťa)
Pozri tiež:
dajNázovHosťa(), 
dajNázovHosťa(boolean), 
dajAdresu()
dajHardverovuAdresu
public static String dajHardverovuAdresu()
 Alias pre dajHardvérovúAdresu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":9,"i53":9,"i54":9,"i55":9,"i56":9,"i57":9,"i58":9,"i59":9,"i60":9,"i61":9,"i62":9,"i63":9,"i64":10,"i65":10,"i66":9,"i67":9,"i68":9,"i69":9,"i70":9,"i71":9,"i72":10,"i73":9,"i74":10,"i75":10,"i76":10,"i77":9,"i78":9,"i79":9,"i80":9,"i81":9,"i82":9,"i83":10,"i84":10,"i85":10,"i86":10,"i87":9,"i88":9,"i89":9,"i90":9,"i91":9,"i92":9,"i93":9,"i94":9,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":9,"i108":9,"i109":9,"i110":9,"i111":9,"i112":10,"i113":9,"i114":10,"i115":9,"i116":9,"i117":9,"i118":10,"i119":10,"i120":9,"i121":9,"i122":9,"i123":9,"i124":9,"i125":9,"i126":9,"i127":9,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":9,"i137":10,"i138":10,"i139":9,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":9,"i146":9,"i147":9,"i148":9,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":9,"i169":9,"i170":9,"i171":10,"i172":10,"i173":9,"i174":9,"i175":9,"i176":9,"i177":10,"i178":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Súbor
java.lang.Object
Súbor
Všetky implementované rozhrania:
Closeable, AutoCloseable
Známe priame odvodené triedy:
Subor
public class Súbor
extends Object
implements Closeable
Trieda na prácu so súbormi. Definuje metódy na otváranie,
 zatváranie, zápis a čítanie textových súborov a metódy na prácu
 s takzvanými „vlastnosťami“ (pozri nižšie).
 
 Príklad:
 
 V tomto príklade je ukázaný jednoduchý spôsob zápisu niekoľkých
 riadkov textu do súboru a vzápätí vypísania obsahu súboru na obrazovku.
 
 
try
{
    // Otvoriť súbor na zápis a zapísať niekoľko riadkov
    súbor.otvorNaZápis("pokus.txt");
    súbor.zapíšRiadok("Toto");
    súbor.zapíšRiadok("Je");
    súbor.zapíšRiadok("Pokusný");
    súbor.zapíšRiadok("Zápis");
    súbor.zapíšRiadok("Do");
    súbor.zapíšRiadok("Súboru");
    súbor.zavri();    // Každý súbor musí byť po použití zatvorený
    // Vzápätí otvoriť súbor na čítanie a vypísať ho po riadkoch
    súbor.otvorNaČítanie("pokus.txt");
    String riadok;
    while (null != (riadok = súbor.čítajRiadok()))
        Svet.vypíšRiadok("„", riadok, "“");
}
catch (IOException e)   // vyžaduje import java.io.IOException;
    // alternatívne je možné použiť namiesto IOException všeobecný
    // typ Exception, ktorý nevyžaduje žiadny import, ale potom by
    // bolo vhodné vymazať nasledujúci blok catch (pretože sa
    // stane zbytočným)
{
    // Keby sme chceli text chyby vypísať na štandardný výstup,
    // použili by sme:
    //   System.out.println(e.getMessage());
    // Keby sme chceli vypísať úplný výpis chybovej stopy na štandardný
    // chybový výstup, použili by sme:
    //   e.printStackTrace();
    // Použijeme vnútornú konzolu robota na výpis textu chyby červenou
    // farbou:
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
catch (GRobotException e)   // Táto výnimka vzniká napríklad ak súbor
    // nejestvuje. To by sa v našom prípade nemalo stať, ale ak
    // by ste chceli tento príklad „recyklovať“ na iné účely, mal
    // by tam tento blok byť.
{
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
// Keby nastala chyba v predchádzajúcom bloku, súbor by nemusel byť
// korektne zavretý, preto ho zatvárame v samostatnom bloku try-catch
try
{
    súbor.zavri();
}
catch (IOException e)
{
    // Chyby vypíše červenou farbou…
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
 
 Ak sa všetko vykoná korektne, súbor bude obsahovať nasledujúce
 riadky:
 
 
Toto
Je
Pokusný
Zápis
Do
Súboru
 
 Na obrazovke budú jednotlivé riadky vypísané v úvodzovkách („“).
 
  
 
 Príklad:
 
 V tomto príklade je ukázaný jednoduchý spôsob čítania série celých
 čísiel zo súboru.
 
 Predpokladajme, že v priečinku s projektom BlueJa jestvuje textový
 súbor _čísla.txt s nasledujúcim obsahom (medzery sú úmyselne
 podfarbené tyrkysovou farbou):
 
 
   8 23  3 4 32  0  -14  
   
 21  -2  +8 14 
64  -0  -24  
 
 Nasledujúci úryvok kódu bude zo súboru čítať a vypisovať na
 obrazovku celé čísla dovtedy, kým sa tam nejaké vyskytujú:
 
 
try
{
    súbor.otvorNaČítanie("_čísla.txt");
    Long číslo; boolean prvé = true;
    while (null != (číslo = súbor.čítajCeléČíslo()))
    {
        if (prvé) prvé = false; else Svet.vypíš(", ");
        Svet.vypíš(číslo);
    }
    Svet.vypíšRiadok(".");
}
catch (IOException e)   // vyžaduje import java.io.IOException;
    // alternatívne je možné použiť namiesto IOException všeobecný
    // typ Exception, ktorý nevyžaduje žiadny import, ale potom by
    // bolo vhodné vymazať nasledujúci blok catch (pretože sa
    // stane zbytočným)
{
    // Nasledujúci príkaz vypíše zápis o prípadnej chybe na štandardný
    // chybový výstup (System.err). Zápis by sa objavil v okne
    // terminálu BlueJa.
    System.err.print("IOException: ");
    e.printStackTrace();
}
catch (GRobotException e)
{
    System.err.print("GRobotException: ");
    e.printStackTrace();
}
 
 Výsledný výpis bude vyzerať takto:
 
 
8, 23, 3, 4, 32, 0, &#45;14, 21, &#45;2, 8, 14, 64, 0, &#45;24.
 
  
 
 Okrem klasických metód na čítanie a zápis, obsahuje trieda Súbor aj metódy na zápis a čítanie vlastností, ktoré sú do textového
 súboru ukladané v tvare názov=hodnota.
 
 Neodporúčame kombinovať použitie klasických metód na čítanie
 a zápis s metódami na čítanie a zápis vlastností. Rozdiel medzi oboma
 prístupmi je, že „klasické“ údaje musia byť čítané zo súboru
 v rovnakom poradí ako boli zapísané a vlastnosti môžu byť čítané
 a zapisované v ľubovoľnom poradí. Vlastnosti tiež ošetrujú výskyt
 takzvaných únikových (escape) sekvencií vo svojich hodnotách. Na lepšie
 pochopenie práce s vlastnosťami poslúži nasledujúci príklad:
 
 Poznámka: Cenou za náhodný („nesekvenčný“)
 prístup k hodnotám vlastností je vyššia pamäťová zložitosť
 vnútorných algoritmov a z toho vyplývajúce pomalšie spracovanie pri
 čítaní a zápise. Náhodný experiment pri tvorbe dokumentácie ukázal,
 že trieda Súbor dokáže spracovať aj relatívne veľké
 konfiguračné súbory (určite najmenej päť megabajtov), ale ich spracovanie
 (zostavenie, zápis, čítanie a analýza) trvalo niekoľko desiatok
 sekúnd až minút (experiment bol náhodný, nie účelový a program na tvorbu
 dokumentácie zostavoval a analyzoval asi päťdesiat rôzne veľkých
 konfiguračných súborov – od kilobajtov po megabajty; procesy zostavenia
 so zápisom a čítania s analýzou trvali niekoľko minút – experiment bol
 vykonaný v roku 2018 na prenosnom počítači so štandardným výkonom
).
 
 
try
{
    // Pokúsi sa otvoriť súbor na čítanie (ak nejestvuje, nastane
    // výnimka a program skončí, preto je potrebné vopred vytvoriť
    // prázdny súbor s názvom vlastnosti.txt – v operačnom systéme
    // zvonka BlueJa alebo pripísať pred tento program úryvok kódu
    // zverejnený nižšie – čítajte ďalej…)
    súbor.otvorNaČítanie("vlastnosti.txt");
    // Definícia premenných obsahujúca čítanie vlastností zo súboru
    double[] pole = new double[]{2.2, 4.4, 2.8, 14.0, 18};
    Double číslo = súbor.čítajVlastnosť("číslo", new Double(0));
    String reťazec = súbor.čítajVlastnosť("reťazec", new String("pokus"));
    pole = súbor.čítajVlastnosť("pole", pole);
    // Zavretie súboru
    súbor.zavri();
    // Výpis hodnôt premenných
    Svet.vypíšRiadok("číslo: ", číslo);
    Svet.vypíšRiadok("reťazec: ", reťazec);
    Svet.vypíšRiadok("pole: ", pole);
    // Zmena hodnoty prvku poľa (na demonštráciu)
    pole[3] *= 2;
    // Otvorenie súboru na zápis a zápis vlastností do súboru
    // (namiesto obsahu premennej číslo zapíšeme konštantnú hodnotu
    // 4 a v prvku pole[3] bude dvojnásobok pôvodnej hodnoty,
    // všetky ostatné údaje zostanú v pôvodnom tvare)
    súbor.otvorNaZápis("vlastnosti.txt");
    súbor.zapíšVlastnosť("číslo", 4);
    súbor.zapíšVlastnosť("reťazec", reťazec);
    súbor.zapíšVlastnosť("pole", pole);
}
catch (IOException e)   // vyžaduje import java.io.IOException;
    // alternatívne je možné použiť namiesto IOException všeobecný
    // typ Exception, ktorý nevyžaduje žiadny import, ale potom by
    // bolo vhodné vymazať nasledujúce bloky catch (pretože sa
    // stanú zbytočnými)
{
    // Chyby vypíše červenou farbou…
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
catch (IllegalArgumentException e)
{
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
catch (GRobotException e)
{
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
finally
{
    try
    {
        // Zavretie súboru
        súbor.zavri();
    }
    catch (IOException e)
    {
        Farba záloha = Svet.farbaTextu();
        Svet.farbaTextu(červená);
        Svet.vypíšRiadok(e.getMessage());
        Svet.farbaTextu(záloha);
    }
}
 
 Ak sa všetko vykoná korektne (pozorne si prečítajte aj komentáre
 v príklade), na obrazovke bude výpis:
 
 
číslo: 0.0
reťazec: pokus
pole: 2.2 4.4 2.8 14.0 18.0
 
 V súbore však budú údaje zapísané s drobnými rozdielmi:
 
 
číslo=4
reťazec=pokus
pole=2.2 4.4 2.8 28.0 18.0 
 
 Po každom ďalšom spustení programu bude hodnota štvrtého prvku poľa
 dvojnásobná.
 
 Ak nechcete ručne vytvárať prázdny súbor vlastnosti.txt
 zvonka BlueJa, tak pripíšte na začiatok programu nasledujúci úryvok
 kódu, ktorý vykoná kontrolu, či súbor jestvuje a v prípade, že
 nejestvuje ho vytvorí (na vytvorenie súboru ho stačí otvoriť na zápis
 a zavrieť).
 
 
try
{
    if (!Súbor.jestvuje("vlastnosti.txt"))
    {
        súbor.otvorNaZápis("vlastnosti.txt");
        súbor.zavri();
    }
}
catch (IOException | IllegalArgumentException e)
{
    Farba záloha = Svet.farbaTextu();
    Svet.farbaTextu(červená);
    Svet.vypíšRiadok(e.getMessage());
    Svet.farbaTextu(záloha);
}
 
 Poznámka: Prosím, venujte pozornosť upozorneniu pri
 metóde zapíšVlastnosť!
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Súbor() 
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
String
aktivnaSekcia()
 Alias pre aktívnaSekcia.
String
aktívnaSekcia()
Vráti názov aktívnej sekcie.
void
aktivujSekciu(String názov)
Pridá novú alebo aktivuje jestvujúcu sekciu konfiguračných
 direktív.
boolean
archivPriradeny()
 Alias pre archívPriradený.
boolean
archívPriradený()
Zistí, či je k tomuto súboru pripojený archív.
void
citaj(Object... objekty)
 Alias pre čítaj.
Boolean
citajBoolean()
 Alias pre čítajBoolean.
Long
citajCeleCislo()
 Alias pre čítajCeléČíslo.
Double
citajRealneCislo()
 Alias pre čítajReálneČíslo.
String
citajRiadok()
 Alias pre čítajRiadok.
Boolean
citajVlastnost(String názov,
              Boolean predvolenáHodnota)
 Alias pre čítajVlastnosť.
boolean[]
citajVlastnost(String názov,
              boolean[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
Farba
citajVlastnost(String názov,
              Color predvolenáHodnota)
 Alias pre čítajVlastnosť.
Double
citajVlastnost(String názov,
              Double predvolenáHodnota)
 Alias pre čítajVlastnosť.
double[]
citajVlastnost(String názov,
              double[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
Farba
citajVlastnost(String názov,
              Farebnosť predvolenáHodnota)
 Alias pre čítajVlastnosť.
Float
citajVlastnost(String názov,
              Float predvolenáHodnota)
 Alias pre čítajVlastnosť.
float[]
citajVlastnost(String názov,
              float[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
char[]
citajVlastnost(String názov,
              char[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
int[]
citajVlastnost(String názov,
              int[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
Integer
citajVlastnost(String názov,
              Integer predvolenáHodnota)
 Alias pre čítajVlastnosť.
Long
citajVlastnost(String názov,
              Long predvolenáHodnota)
 Alias pre čítajVlastnosť.
long[]
citajVlastnost(String názov,
              long[] predvolenáHodnota)
 Alias pre čítajVlastnosť.
Point2D.Double
citajVlastnost(String názov,
              Point2D predvolenáHodnota)
 Alias pre čítajVlastnosť.
Bod
citajVlastnost(String názov,
              Poloha predvolenáHodnota)
 Alias pre čítajVlastnosť.
String
citajVlastnost(String názov,
              String predvolenáHodnota)
 Alias pre čítajVlastnosť.
StringBuffer
citajVlastnost(String názov,
              StringBuffer predvolenáHodnota)
 Alias pre čítajVlastnosť.
Character
citajZnak()
 Alias pre čítajZnak.
void
close()
Zavrie súbor, ktorý bol predtým otvorený na čítanie alebo zápis.
int
čítaj(Object... objekty)
Pokúsi sa prečítať zo súboru otvoreného na čítanie toľko textu,
 koľko je potrebné na naplnenie zadaného počtu objektov, pričom
 objem prečítaného textu je závislý od typu objektu.
Boolean
čítajBoolean()
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na objekt typu Boolean
 obsahujúci pravdivostnú hodnotu true/&#8203;false.
Long
čítajCeléČíslo()
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na celé číslo…
Double
čítajReálneČíslo()
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na reálne číslo…
String
čítajRiadok()
Prečíta zo súboru otvoreného na čítanie riadok textu a vráti ho
 v objekte typu String.
Boolean
čítajVlastnosť(String názov,
              Boolean predvolenáHodnota)
Číta hodnotu vlastnosti v tvare logickej hodnoty true
 / false.
boolean[]
čítajVlastnosť(String názov,
              boolean[] predvolenáHodnota)
Číta hodnotu vlastnosti do poľa logických hodnôt typu boolean.
Farba
čítajVlastnosť(String názov,
              Color predvolenáHodnota)
Číta hodnotu vlastnosti ako objekt, ktorý je odvodený od typu
 Color.
Double
čítajVlastnosť(String názov,
              Double predvolenáHodnota)
Číta hodnotu vlastnosti v tvare reálneho čísla.
double[]
čítajVlastnosť(String názov,
              double[] predvolenáHodnota)
Číta hodnotu vlastnosti do poľa reálnych čísel typu double.
Farba
čítajVlastnosť(String názov,
              Farebnosť predvolenáHodnota)
Číta hodnotu vlastnosti ako objekt, ktorý je implementáciou
 rozhrania Farebnosť.
Float
čítajVlastnosť(String názov,
              Float predvolenáHodnota)
Číta hodnotu vlastnosti v tvare reálneho čísla.
float[]
čítajVlastnosť(String názov,
              float[] predvolenáHodnota)
Číta hodnotu vlastnosti do poľa reálnych čísel typu float.
char[]
čítajVlastnosť(String názov,
              char[] predvolenáHodnota)
Číta hodnotu vlastnosti do poľa znakov (char[]).
int[]
čítajVlastnosť(String názov,
              int[] predvolenáHodnota)
Číta hodnotu vlastnosti do celočíselného poľa typu int.
Integer
čítajVlastnosť(String názov,
              Integer predvolenáHodnota)
Číta hodnotu vlastnosti v tvare celého čísla.
Long
čítajVlastnosť(String názov,
              Long predvolenáHodnota)
Číta hodnotu vlastnosti v tvare celého čísla.
long[]
čítajVlastnosť(String názov,
              long[] predvolenáHodnota)
Číta hodnotu vlastnosti do celočíselného poľa typu long.
Point2D.Double
čítajVlastnosť(String názov,
              Point2D predvolenáHodnota)
Číta hodnotu vlastnosti ako objekt, ktorý je odvodený od typu
 Point2D.
Bod
čítajVlastnosť(String názov,
              Poloha predvolenáHodnota)
Číta hodnotu vlastnosti ako objekt, ktorý je implementáciou
 rozhrania Poloha.
String
čítajVlastnosť(String názov,
              String predvolenáHodnota)
Číta hodnotu vlastnosti v tvare reťazca.
StringBuffer
čítajVlastnosť(String názov,
              StringBuffer predvolenáHodnota)
Číta hodnotu vlastnosti v tvare reťazca, pričom výsledok je
 vrátený v objekte typu StringBuffer.
Character
čítajZnak()
Prečíta zo súboru otvoreného na nasledujúci znak a vráti jeho
 hodnotu.
static String
datumNaRetazec(long miliDátum)
 Alias pre dátumNaReťazec.
static String
dátumNaReťazec(long miliDátum)
Zostaví reťazec dátumu v predvolenom formáte zo zadaného počtu
 milisekúnd počítaných od začiatku takzvanej epochy.
static String
datumNaRetazec(long miliDátum,
              String formát)
 Alias pre dátumNaReťazec.
static String
dátumNaReťazec(long miliDátum,
              String formát)
Podľa zadaných údajov vytvorí reťazec dátumu.
static String
dialogOtvorit(String titulok)
 Alias pre dialógOtvoriť.
static String
dialógOtvoriť(String titulok)
Otvorí používateľský dialóg na otvorenie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom.
static String
dialogOtvorit(String titulok,
             String predvolenýNázovSúboru,
             String... filtre)
 Alias pre dialógOtvoriť.
static String
dialógOtvoriť(String titulok,
             String predvolenýNázovSúboru,
             String... filtre)
Otvorí používateľský dialóg na otvorenie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom.
static String
dialogUlozit(String titulok)
 Alias pre dialógUložiť.
static String
dialogUlozit(String titulok,
            String predvolenýNázovSúboru,
            String... filtre)
 Alias pre dialógUložiť.
static String
dialógUložiť(String titulok)
Otvorí používateľský dialóg na uloženie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom.
static String
dialógUložiť(String titulok,
            String predvolenýNázovSúboru,
            String... filtre)
Otvorí používateľský dialóg na uloženie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom.
String
docitajRiadok()
 Alias pre dočítajRiadok.
String
dočítajRiadok()
Umožňuje dočítať zo súboru otvoreného na čítanie aktuálne
 spracúvaný riadok textu.
static boolean
existuje(String názov)
Overí, či súbor alebo priečinok so zadaným názvom jestvuje.
static boolean
jePriecinok(String názov)
 Alias pre jePriečinok.
static boolean
jePriečinok(String názov)
Overí, či zadaný názov označuje priečinok.
static boolean
jestvuje(String názov)
Overí, či súbor alebo priečinok so zadaným názvom jestvuje.
static boolean
jeSubor(String názov)
 Alias pre jeSúbor.
static boolean
jeSúbor(String názov)
Overí, či zadaný názov určuje obyčajný súbor.
String
kdeJeSubor(String názovSúboru)
 Alias pre kdeJeSúbor.
static String
kdeJeSúbor(String názovSúboru)
Vyhľadá skutočné umiestnenie súboru určeného na čítanie alebo
 vráti hodnotu null, ak súbor nebol nájdený.
boolean
koniecRiadka()
Overí, či sa prúd údajov čítaný zo súboru momentálne nachádza na
 konci riadka.
boolean
koniecSuboru()
 Alias pre koniecSúboru.
boolean
koniecSúboru()
Overí, či sa prúd údajov čítaný zo súboru skončil.
static byte[]
kontrolnySucet(String názov)
 Alias pre kontrolnýSúčet.
static byte[]
kontrolnýSúčet(String názov)
Vyrobí kontrolný súčet súboru algoritmom SHA1.
static void
kopiruj(String zdroj,
       String cieľ)
 Alias pre kopíruj.
static void
kopíruj(String zdroj,
       String cieľ)
Skopíruje zdrojový súbor do cieľového súboru.
static void
kopiruj(String zdroj,
       String cieľ,
       boolean prepísať)
 Alias pre kopíruj.
static void
kopíruj(String zdroj,
       String cieľ,
       boolean prepísať)
Skopíruje zdrojový súbor do cieľového súboru.
String
mennyPriestorVlastnosti()
 Alias pre mennýPriestorVlastností.
String
mennýPriestorVlastností()
 Zistí aktuálne používaný menný priestor
 na čítanie a zápis vlastností.
void
mennyPriestorVlastnosti(String novýMennýPriestor)
 Alias pre mennýPriestorVlastností.
void
mennýPriestorVlastností(String novýMennýPriestor)
 Stanoví nový menný priestor na čítanie
 a zápis vlastností.
static long
naposledyUpraveny(String názov)
 Alias pre naposledyUpravený.
static long
naposledyUpravený(String názov)
Zistí dátum a čas poslednej úpravy zadaného súboru alebo
 priečinka.
static void
naposledyUpraveny(String názov,
                 long miliDátum)
 Alias pre naposledyUpravený.
static void
naposledyUpravený(String názov,
                 long miliDátum)
Nastaví dátum a čas poslednej úpravy zadaného súboru alebo
 priečinka.
static boolean
novyPriecinok(String názov)
 Alias pre vytvorPriečinok.
static boolean
novyPriecinok(String názov,
             boolean ajRodičov)
 Alias pre vytvorPriečinok.
static boolean
novýPriečinok(String názov)
 Alias pre vytvorPriečinok.
static boolean
novýPriečinok(String názov,
             boolean ajRodičov)
 Alias pre vytvorPriečinok.
void
odstranujNepouziteVlastnosti()
 Alias pre odstraňujNepoužitéVlastnosti.
void
odstraňujNepoužitéVlastnosti()
Prepne inštanciu do režimu odstraňovania nepoužitých vlastností.
void
otvorNaCitanie(String názovSúboru)
 Alias pre otvorNaČítanie.
void
otvorNaCitanie(String názovSúboru,
              String kódovanie)
 Alias pre otvorNaČítanie.
void
otvorNaČítanie(String názovSúboru)
Otvorí zadaný súbor s kódovaním UTF-8 na čítanie.
void
otvorNaČítanie(String názovSúboru,
              String kódovanie)
Otvorí zadaný súbor na čítanie.
void
otvorNaZapis(String názovSúboru)
 Alias pre otvorNaZápis.
void
otvorNaZápis(String názovSúboru)
Otvorí zadaný súbor na zápis.
void
otvorNaZapis(String názovSúboru,
            boolean pripojiť)
 Alias pre otvorNaZápis.
void
otvorNaZápis(String názovSúboru,
            boolean pripojiť)
Otvorí zadaný súbor na zápis.
void
otvorNaZapis(String názovSúboru,
            String kódovanie,
            boolean pripojiť)
 Alias pre otvorNaZápis.
void
otvorNaZápis(String názovSúboru,
            String kódovanie,
            boolean pripojiť)
Otvorí zadaný súbor na zápis.
static boolean
porovnaj(String názov1,
        String názov2)
Porovná obsah dvoch súborov.
static String
predvolenaCestaDialogov()
 Alias pre predvolenáCestaDialógov.
static String
predvolenáCestaDialógov()
Zistí, aká je aktuálna predvolená cesta (systémových pomocných)
 dialógov na otvorenie
 a uloženie súborov.
static void
predvolenaCestaDialogov(String cesta)
 Alias pre predvolenáCestaDialógov.
static void
predvolenáCestaDialógov(String cesta)
Nastaví novú predvolenú cestu (systémových pomocných)
 dialógov na otvorenie
 a uloženie súborov.
void
prekladajVlastnosti(String[][] prekladyNázvov,
                   String[][] prekladyHodnôt)
Táto metóda zapne alebo vypne automatický preklad názvov a hodnôt
 vlastností tak, aby aj tie vlastnosti konfiguračných súborov, ktoré
 programovací rámec zapisuje automaticky, mohli byť v prípade potreby
 používané v cudzojazyčnom prostredí.
static boolean
premenuj(String zdroj,
        String cieľ)
Premenuje (presunie) zdrojový súbor alebo priečinok na cieľový
 súbor alebo priečinok (do cieľovej cesty).
void
premenujSekciu(String názov)
Zmení názov aktuálnej sekcie.
static boolean
presun(String zdroj,
      String cieľovýPriečinok)
 Alias pre presuň.
static boolean
presuň(String zdroj,
      String cieľovýPriečinok)
Presunie zdrojový súbor alebo priečinok do cieľovej cesty.
static void
pripoj(String zdroj,
      String cieľ)
Pripojí zdrojový súbor k cieľovému súboru.
void
pripojArchiv(Archív archív)
 Alias pre pripojArchív.
void
pripojArchív(Archív archív)
Priradí k tomuto súboru zadanú inštanciu archívu.
static long
retazecNaDatum(String dátum)
 Alias pre reťazecNaDátum.
static long
reťazecNaDátum(String dátum)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy.
static long
retazecNaDatum(String dátum,
              String formát)
 Alias pre reťazecNaDátum.
static long
reťazecNaDátum(String dátum,
              String formát)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy.
static boolean
suctySuZhodne(byte[] kontrolnýSúčet1,
             byte[] kontrolnýSúčet2)
 Alias pre súčtySúZhodné.
static boolean
súčtySúZhodné(byte[] kontrolnýSúčet1,
             byte[] kontrolnýSúčet2)
Porovná zhodu dvoch kontrolných súčtov súborov.
static long
velkost(String názov)
 Alias pre veľkosť.
static long
veľkosť(String názov)
Zistí veľkosť zadaného súboru alebo zdroja.
boolean
vlastnostExistuje(String názov)
 Alias pre vlastnosťJestvuje.
boolean
vlastnosťExistuje(String názov)
 Alias pre vlastnosťJestvuje.
boolean
vlastnostJestvuje(String názov)
 Alias pre vlastnosťJestvuje.
boolean
vlastnosťJestvuje(String názov)
Zistí, či je v súbore otvorenom na čítanie (vlastností)
 definovaná zadaná vlastnosť.
void
vnorMennyPriestorVlastnosti()
 Alias pre vnorMennýPriestorVlastností.
void
vnorMennýPriestorVlastností()
Zálohuje aktuálny menný priestor na čítanie a zápis
 vlastností do vnútorného zásobníka.
void
vnorMennyPriestorVlastnosti(String vnorenýMennýPriestor)
 Alias pre vnorMennýPriestorVlastností.
void
vnorMennýPriestorVlastností(String vnorenýMennýPriestor)
Zmení menný priestor na čítanie a zápis vlastností tak, aby
 vznikol vnorený priestor podľa konvencie opísanej nižšie.
static boolean
vymaz(String názov)
 Alias pre vymaž.
void
vymazSekciu(String názov)
 Alias pre vymažSekciu.
void
vymazVlastnost(String názov)
 Alias pre vymažVlastnosť.
static boolean
vymaž(String názov)
Vymaže súbor alebo priečinok so zadaným názvom.
void
vymažSekciu(String názov)
Vymaže sekciu so zadaným názvom.
void
vymažVlastnosť(String názov)
Odstráni zo súboru záznam o vlastnosti so zadaným menom.
void
vymažVlastnosti()
Vymaže všetky vlastnosti z vnútornej pamäte, ktoré mohli zostať
 zapamätané po poslednom čítaní súboru.
void
vynorMennyPriestorVlastnosti()
 Alias pre vynorMennýPriestorVlastností.
void
vynorMennýPriestorVlastností()
Obnoví posledný zálohovaný menný priestor na čítanie a zápis
 vlastností z vnútorného zásobníka.
static boolean
vytvorPriecinok(String názov)
 Alias pre vytvorPriečinok.
static boolean
vytvorPriecinok(String názov,
               boolean ajRodičov)
 Alias pre vytvorPriečinok.
static boolean
vytvorPriečinok(String názov)
Vytvorí nový priečinok so zadaným názvom buď v aktuálnom
 priečinku, alebo na zadanej ceste (pripojenej pred názvom).
static boolean
vytvorPriečinok(String názov,
               boolean ajRodičov)
Vytvorí nový priečinok so zadaným názvom buď v aktuálnom
 priečinku, alebo na zadanej ceste (pripojenej pred názvom).
void
zachovajNepouziteVlastnosti()
 Alias pre zachovajNepoužitéVlastnosti.
void
zachovajNepoužitéVlastnosti()
Prepne inštanciu do režimu zachovávania nepoužitých vlastností.
boolean
zachovavaNepouziteVlastnosti()
 Alias pre zachovávaNepoužitéVlastnosti.
boolean
zachovávaNepoužitéVlastnosti()
Zistí v akom režime sa nachádza táto inštancia triedy
 Súbor.
void
zapis(Object... objekty)
 Alias pre zapíš.
void
zapisKomentarVlastnosti(String komentár)
 Alias pre zapíšKomentárVlastností.
void
zapisPrazdnyRiadokVlastnosti()
 Alias pre zapíšPrázdnyRiadokVlastností.
void
zapisRetazec(String text)
 Alias pre zapíšReťazec.
void
zapisRiadok()
 Alias pre zapíšRiadok.
void
zapisRiadok(String text)
 Alias pre zapíšRiadok.
void
zapisVlastnost(String názov,
              Object hodnota)
 Alias pre zapíšVlastnosť.
void
zapíš(Object... objekty)
Zapíše do súboru otvoreného na zápis textovú podobu zoznamu
 objektov rôzneho údajového typu (napríklad celé čísla int budú zapísané ako séria číslic – čísla vo forme textu).
void
zapíšKomentárVlastností(String komentár)
Dovoľuje vkladať do textových súborov vlastností jednoriadkové
 komentáre.
void
zapíšPrázdnyRiadokVlastností()
Dovoľuje vkladať do textových súborov vlastností prázdne riadky
 slúžiace ako oddeľovače.
void
zapíšReťazec(String text)
Zapíše do súboru otvoreného na zápis určený reťazec.
void
zapíšRiadok()
Zapíše do súboru otvoreného na zápis prázdny riadok.
void
zapíšRiadok(String text)
Zapíše do súboru otvoreného na zápis riadok textu.
void
zapíšVlastnosť(String názov,
              Object hodnota)
Zapíše vlastnosť podporovaného údajového typu.
void
zavri()
Zavrie súbor, ktorý bol predtým otvorený na čítanie alebo zápis.
static String[]
zoznam(String cesta)
Vytvorí zoznam všetkých položiek umiestnených na zadanej ceste.
static String[]
zoznamPriecinkov(String cesta)
 Alias pre zoznamPriečinkov.
static String[]
zoznamPriečinkov(String cesta)
Vytvorí zoznam priečinkov umiestnených na zadanej ceste.
Zoznam&lt;String&gt;
zoznamSekcii()
 Alias pre zoznamSekcií.
Zoznam&lt;String&gt;
zoznamSekcií()
Vráti zoznam aktuálnych sekcií definovaných v tomto
 konfiguračnom súbore.
static String[]
zoznamSuborov(String cesta)
 Alias pre zoznamSúborov.
static String[]
zoznamSúborov(String cesta)
Vytvorí zoznam súborov umiestnených v zadanom priečinku.
static String[]
zoznamSuborovAPriecinkov(String cesta)
 Alias pre zoznamSúborovAPriečinkov.
static String[]
zoznamSúborovAPriečinkov(String cesta)
Vytvorí zoznam súborov a priečinkov umiestnených v zadanom
 priečinku.
Zoznam&lt;String&gt;
zoznamVlastnosti()
 Alias pre zoznamVlastností.
Zoznam&lt;String&gt;
zoznamVlastností()
Vráti zoznam vlastností definovaných v aktuálnej sekcii
 konfigurácie.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Súbor
public Súbor()
Podrobnosti metód
aktívnaSekcia
public String aktívnaSekcia()
Vráti názov aktívnej sekcie. Prázdny reťazec označuje prvú
 bezmennú konfiguračnú pasáž.
Návratová hodnota:
názov aktívnej sekcie alebo prázdny reťazec
Pozri tiež:
aktivujSekciu(String), 
vymažSekciu(String), 
premenujSekciu(String), 
zoznamSekcií()
aktivnaSekcia
public String aktivnaSekcia()
 Alias pre aktívnaSekcia.
aktivujSekciu
public void aktivujSekciu(String názov)
                   throws IOException
Pridá novú alebo aktivuje jestvujúcu sekciu konfiguračných
 direktív. Prázdny reťazec označuje prvú bezmennú konfiguračnú
 pasáž. (Tá je definovaná predvolene.)
 
 Poznámka: Hodnota null
 je v tomto prípade nahradená hodnotou prázdneho reťazca
 "", takže tiež označuje predvolený (bezmenný)
 konfiguračný priestor.
Parametre:
názov – názov novej alebo jestvujúcej sekcie
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
aktívnaSekcia(), 
vymažSekciu(String), 
premenujSekciu(String), 
zoznamSekcií()
vymažSekciu
public void vymažSekciu(String názov)
                 throws IOException
Vymaže sekciu so zadaným názvom.
 
 Pozor! Táto akcia je nevratná!
Parametre:
názov – názov sekcie na vymazanie
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
aktívnaSekcia(), 
aktivujSekciu(String), 
premenujSekciu(String), 
zoznamSekcií()
vymazSekciu
public void vymazSekciu(String názov)
                 throws IOException
 Alias pre vymažSekciu.
Výnimky:
IOException
premenujSekciu
public void premenujSekciu(String názov)
                    throws IOException
Zmení názov aktuálnej sekcie. Nový názov nesmie byť v konflikte
 s pomenovaním jestvujúcej sekcie. Ak je použitý prázny názov, tak
 (v prípade, že prázdna sekcia nejestvuje) bude táto sekcia
 premiestnená na prvé miesto v konfiguračnom súbore.
Parametre:
názov – nový názov sekcie
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
aktívnaSekcia(), 
aktivujSekciu(String), 
vymažSekciu(String), 
zoznamSekcií()
zoznamSekcií
public Zoznam&lt;String&gt; zoznamSekcií()
                            throws IOException
Vráti zoznam aktuálnych sekcií definovaných v tomto
 konfiguračnom súbore. Zmeny vykonané vo vrátenom zozname
 nemajú žiadny vplyv na skutočné sekcie konfigurácie.
Návratová hodnota:
zoznam reťazcov označujúcich názvy aktuálne definovaných
     sekcií v tomto konfiguračnom súbore
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie,
     prípadne obsahuje chybu
Pozri tiež:
aktívnaSekcia(), 
aktivujSekciu(String), 
vymažSekciu(String), 
premenujSekciu(String), 
zoznamVlastností()
zoznamSekcii
public Zoznam&lt;String&gt; zoznamSekcii()
                            throws IOException
 Alias pre zoznamSekcií.
Výnimky:
IOException
zoznamSúborov
public static String[] zoznamSúborov(String cesta)
Vytvorí zoznam súborov umiestnených v zadanom priečinku.
Parametre:
cesta – cesta a názov priečinka, z obsahu ktorého má byť
     vytvorený zoznam
Návratová hodnota:
pole typu String so zoznamom
     súborov
Výnimky:
GRobotException – ak zadaná cesta nebola nájdená alebo
     je neplatná; ak zadaná cesta nespĺňa niektoré pravidlo platnej
     cesty
zoznamSuborov
public static String[] zoznamSuborov(String cesta)
 Alias pre zoznamSúborov.
zoznamPriečinkov
public static String[] zoznamPriečinkov(String cesta)
Vytvorí zoznam priečinkov umiestnených na zadanej ceste.
Parametre:
cesta – cesta na ktorej sa majú hľadať priečinky
Návratová hodnota:
pole typu String so zoznamom
     priečinkov
Výnimky:
GRobotException – ak zadaná cesta nebola nájdená alebo
     je neplatná; ak zadaná cesta nespĺňa niektoré pravidlo platnej
     cesty
zoznamPriecinkov
public static String[] zoznamPriecinkov(String cesta)
 Alias pre zoznamPriečinkov.
zoznamSúborovAPriečinkov
public static String[] zoznamSúborovAPriečinkov(String cesta)
Vytvorí zoznam súborov a priečinkov umiestnených v zadanom
 priečinku.
Parametre:
cesta – cesta a názov priečinka, z obsahu ktorého má byť
     vytvorený zoznam
Návratová hodnota:
pole typu String so zoznamom
     súborov a priečinkov
Výnimky:
GRobotException – ak zadaná cesta nebola nájdená alebo
     je neplatná; ak zadaná cesta nespĺňa niektoré pravidlo platnej
     cesty
zoznamSuborovAPriecinkov
public static String[] zoznamSuborovAPriecinkov(String cesta)
 Alias pre zoznamSúborovAPriečinkov.
zoznam
public static String[] zoznam(String cesta)
Vytvorí zoznam všetkých položiek umiestnených na zadanej ceste.
 Je pravdepodobné, že zoznam bude zhodný so zoznamom vytvoreným
 s pomocou metódy zoznamSúborovAPriečinkov, no tento zoznam môže obsahovať aj
 také položky, ktoré nie sú klasifikované ani ako súbory, ani ako
 priečinky (napríklad systémové odkazy, aliasy, jednotky…).
Parametre:
cesta – cesta a názov priečinka, z obsahu ktorého má byť
     vytvorený zoznam
Návratová hodnota:
pole typu String so zoznamom
     položiek
Výnimky:
GRobotException – ak zadaná cesta nebola nájdená alebo
     je neplatná; ak zadaná cesta nespĺňa niektoré pravidlo platnej
     cesty
existuje
public static boolean existuje(String názov)
Overí, či súbor alebo priečinok so zadaným názvom jestvuje.
 Metóda overuje len jestvovanie reálnych súborov na pevnom disku
 a len v rámci aktuálneho umiestnenia – neprehľadáva cestu
 classpath ani balíček .jar. V prípade
 potreby môžete použiť metódu kdeJeSúbor, ktorá uvedené umiestnenia prehľadáva, a ktorá
 v prípade nenájdenia súboru vráti hodnotu null.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true – áno; false – nie
jestvuje
public static boolean jestvuje(String názov)
Overí, či súbor alebo priečinok so zadaným názvom jestvuje.
 
 Metóda overuje len jestvovanie reálnych súborov na pevnom
 disku a len v rámci aktuálneho umiestnenia (resp. na presne
 zadanej ceste) – neprehľadáva cestu classpath ani
 balíček .jar. V prípade potreby môžete použiť metódu
 kdeJeSúbor, ktorá uvedené
 umiestnenia prehľadáva, a ktorá v prípade nenájdenia súboru
 vráti hodnotu null.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
kdeJeSúbor(String)
vytvorPriečinok
public static boolean vytvorPriečinok(String názov,
                                      boolean ajRodičov)
Vytvorí nový priečinok so zadaným názvom buď v aktuálnom
 priečinku, alebo na zadanej ceste (pripojenej pred názvom).
 Ak je parameter ajRodičov rovný true, tak sa metóda
 pokúsi vytvoriť aj rodičovské priečinky, ktoré nejestvujú.
Parametre:
názov – názov súboru alebo priečinka
ajRodičov – určuje, či sa má metóda pokúsiť vytvoriť aj
     prípadných rodičov
Návratová hodnota:
true vtedy a len vtedy, ak bol priečinok
     (vrátane prípadných rodičovských priečinkov) úspešne vytvorený
     úspešne, inak false
vytvorPriecinok
public static boolean vytvorPriecinok(String názov,
                                      boolean ajRodičov)
 Alias pre vytvorPriečinok.
novýPriečinok
public static boolean novýPriečinok(String názov,
                                    boolean ajRodičov)
 Alias pre vytvorPriečinok.
novyPriecinok
public static boolean novyPriecinok(String názov,
                                    boolean ajRodičov)
 Alias pre vytvorPriečinok.
vytvorPriečinok
public static boolean vytvorPriečinok(String názov)
Vytvorí nový priečinok so zadaným názvom buď v aktuálnom
 priečinku, alebo na zadanej ceste (pripojenej pred názvom).
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true vtedy a len vtedy, ak bol priečinok
     úspešne vytvorený úspešne, inak false
vytvorPriecinok
public static boolean vytvorPriecinok(String názov)
 Alias pre vytvorPriečinok.
novýPriečinok
public static boolean novýPriečinok(String názov)
 Alias pre vytvorPriečinok.
novyPriecinok
public static boolean novyPriecinok(String názov)
 Alias pre vytvorPriečinok.
jeSúbor
public static boolean jeSúbor(String názov)
Overí, či zadaný názov určuje obyčajný súbor. Obyčajný súbor
 znamená nie priečinok, ani iná špeciálna položka v rámci
 súborového systému.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true v prípade, že súbor so zadaným názvom
     jestvuje a ide o normálny súbor, inak false
jeSubor
public static boolean jeSubor(String názov)
 Alias pre jeSúbor.
jePriečinok
public static boolean jePriečinok(String názov)
Overí, či zadaný názov označuje priečinok.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true v prípade, že položka so zadaným názvom
     jestvuje a je to priečinok, inak false
jePriecinok
public static boolean jePriecinok(String názov)
 Alias pre jePriečinok.
porovnaj
public static boolean porovnaj(String názov1,
                               String názov2)
                        throws IOException
Porovná obsah dvoch súborov. Oba názvy musia označovať súbory,
 inak vznikne výnimka. Ak obidva súbory nejestvujú, je to
 vyhodnotené ako zhoda. Ak nejestvuje iba jeden zo súborov, vznikne
 výnimka, preto musí byť príkaz uzavretý do bloku try-catch
 (pozri napríklad príklad v opise metódy kopíruj). Ak obidva súbory jestvujú, tak sú
 porovnané a v prípade ich zhody je návratová hodnota rovná
 true, inak je rovná false.
 
 V rámci obsluhy udalostí je k dispozícii reakcia – sekvencia (s prislúchajúcim variantom pre jednotlivé roboty).
 Počas procesu porovnávania je uvedená reakcia spúšťaná (samozrejme
 aj so všetkými jej variantmi) s kódom spracovania
 POROVNANIE_SÚBOROV.
Parametre:
názov1 – názov (a cesta) prvého súboru
názov2 – názov (a cesta) druhého súboru
Návratová hodnota:
true v prípade, že sú súbory zhodné,
     inak false
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – jeden zo zadaných objektov nie je súbor
     alebo nejestvuje len jeden zo súborov (pričom druhý áno)
kopíruj
public static void kopíruj(String zdroj,
                           String cieľ,
                           boolean prepísať)
                    throws IOException
Skopíruje zdrojový súbor do cieľového súboru. Oba názvy musia
 označovať súbory, inak vznikne výnimka. Zdrojový súbor musí
 jestvovať a ak nie je argument prepísať rovný true, cieľový súbor nesmie jestvovať. Počas procesu
 kopírovania môže vzniknúť výnimka, preto musí byť príkaz uzavretý
 do bloku try-catch:
 
 
String zdroj = "citajma.txt";
String cieľ = "zaloha_citajma.txt";
try
{
    Súbor.kopíruj(zdroj, cieľ, true);
    Svet.správa("Súbor „" + zdroj + "“ úspešne skopírovaný do „" + cieľ + "“…");
}
catch (Exception e)
{
    Svet.správa(e.getMessage());
}
 
 V rámci obsluhy udalostí je k dispozícii reakcia – sekvencia (s prislúchajúcim variantom pre jednotlivé roboty).
 Počas procesu kopírovania je uvedená reakcia spúšťaná (samozrejme
 aj so všetkými jej variantmi) s kódom spracovania KOPÍROVANIE_SÚBOROV.
Parametre:
zdroj – názov (a cesta) zdrojového súboru
cieľ – názov (a cesta) cieľového súboru
prepísať – ak je true, cieľový súbor bude
     prepísaný (ak jestvuje)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak argument prepísať je false
     a cieľový súbor jestvuje; ak cieľový súbor nemôže byť
     prepísaný, lebo nie je súborom; ak zdrojový súbor nie je
     súborom; ak zdrojový súbor nejestvuje
kopiruj
public static void kopiruj(String zdroj,
                           String cieľ,
                           boolean prepísať)
                    throws IOException
 Alias pre kopíruj.
Výnimky:
IOException
kopíruj
public static void kopíruj(String zdroj,
                           String cieľ)
                    throws IOException
Skopíruje zdrojový súbor do cieľového súboru. Oba názvy musia
 označovať súbory, inak vznikne výnimka. Zdrojový súbor musí
 jestvovať a cieľový súbor nesmie jestvovať. Počas procesu
 kopírovania môže vzniknúť výnimka, preto musí byť príkaz
 uzavretý do bloku try-catch (pozri príklad pri kopíruj(zdroj, cieľ,
 prepísať)).
Parametre:
zdroj – názov (a cesta) zdrojového súboru
cieľ – názov (a cesta) cieľového súboru
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
kopiruj
public static void kopiruj(String zdroj,
                           String cieľ)
                    throws IOException
 Alias pre kopíruj.
Výnimky:
IOException
pripoj
public static void pripoj(String zdroj,
                          String cieľ)
                   throws IOException
Pripojí zdrojový súbor k cieľovému súboru. Oba názvy musia
 označovať súbory a oba musia jestvovať, inak vznikne výnimka.
 Počas procesu pripájania môže vzniknúť výnimka, preto musí byť
 príkaz uzavretý do bloku try-catch (podobne ako ostatné
 príkazy tejto triedy)…
 
 V rámci obsluhy udalostí je k dispozícii reakcia – sekvencia (s prislúchajúcim variantom pre jednotlivé roboty).
 Počas procesu pripájania je uvedená reakcia spúšťaná (samozrejme
 aj so všetkými jej variantmi) s kódom spracovania PRIPÁJANIE_SÚBOROV.
Parametre:
zdroj – názov (a cesta) zdrojového súboru
cieľ – názov (a cesta) cieľového súboru
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak cieľový súbor nemôže byť použitý,
     lebo nie je súborom; ak zdrojový súbor nie je súborom; alebo
     ak zdrojový súbor nejestvuje
premenuj
public static boolean premenuj(String zdroj,
                               String cieľ)
Premenuje (presunie) zdrojový súbor alebo priečinok na cieľový
 súbor alebo priečinok (do cieľovej cesty). Počas vykonania tejto
 operácie musí byť braných do úvahy veľa platformovo závislých
 aspektov. Premenovanie (presun) môže zlyhať z mnohých dôvodov:
 presun medzi rôznymi súborovými systémami, pokus o presun
 netriviálnej položky, pokus o premenovanie na názov jestvujúceho
 súboru… Vždy by ste mali overiť návratovú hodnotu tejto metódy,
 aby ste si mohli byť istí, že operácia prebehla úspešne.
Parametre:
zdroj – názov (a cesta) zdrojového súboru alebo priečinka
cieľ – názov (a cesta) cieľového súboru alebo priečinka
Návratová hodnota:
true vtedy a len vtedy, ak operácia
     premenovania prebehla úspešne, inak false
presuň
public static boolean presuň(String zdroj,
                             String cieľovýPriečinok)
Presunie zdrojový súbor alebo priečinok do cieľovej cesty. Počas
 vykonania tejto operácie musí byť braných do úvahy veľa
 platformovo závislých aspektov. Presun môže zlyhať z mnohých
 dôvodov: presun medzi rôznymi súborovými systémami, pokus
 o presun netriviálnej položky, pokus o nahradenie jestvujúcej
 položky pri presune… Vždy by ste mali overiť návratovú hodnotu
 tejto metódy, aby ste si mohli byť istí, že operácia prebehla
 úspešne.
Parametre:
zdroj – názov (a cesta) zdrojového súboru alebo priečinka
cieľovýPriečinok – cesta do cieľového priečinka
Návratová hodnota:
true vtedy a len vtedy, ak operácia presunu
     prebehla úspešne, inak false
presun
public static boolean presun(String zdroj,
                             String cieľovýPriečinok)
 Alias pre presuň.
vymaž
public static boolean vymaž(String názov)
Vymaže súbor alebo priečinok so zadaným názvom. Ak názov
 označuje priečinok, tak určený priečinok musí byť prázdny, inak
 nebude môcť byť vymazaný.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
true vtedy a len vtedy, ak operácia vymazania
     prebehla úspešne, inak false
vymaz
public static boolean vymaz(String názov)
 Alias pre vymaž.
dátumNaReťazec
public static String dátumNaReťazec(long miliDátum)
Zostaví reťazec dátumu v predvolenom formáte zo zadaného počtu
 milisekúnd počítaných od začiatku takzvanej epochy. Táto metóda je
 kópiou metódy dátumNaReťazec.
 Ďalšie detaily nájdete v jej opise.
Parametre:
miliDátum – dátum v milisekundách epochy
Návratová hodnota:
reťazec dátumu v predvolenom formáte
Pozri tiež:
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String), 
naposledyUpravený(String)
datumNaRetazec
public static String datumNaRetazec(long miliDátum)
 Alias pre dátumNaReťazec.
dátumNaReťazec
public static String dátumNaReťazec(long miliDátum,
                                    String formát)
Podľa zadaných údajov vytvorí reťazec dátumu. Prvý parameter je
 počet milisekúnd počítaných od začiatku takzvanej epochy a druhý
 parameter určuje požadovaný formát. Táto metóda je kópiou metódy
 dátumNaReťazec. Ďalšie
 detaily nájdete v jej opise.
Parametre:
miliDátum – dátum v milisekundách epochy
formát – reťazec určujúci formát dátumu
Návratová hodnota:
reťazec dátumu v zadanom formáte
Pozri tiež:
dátumNaReťazec(long), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String), 
naposledyUpravený(String)
datumNaRetazec
public static String datumNaRetazec(long miliDátum,
                                    String formát)
 Alias pre dátumNaReťazec.
reťazecNaDátum
public static long reťazecNaDátum(String dátum)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy. Táto metóda je kópiou metódy reťazecNaDátum. Ďalšie detaily
 nájdete v jej opise.
Parametre:
dátum – reťazec dátumu v predvolenom formáte
Návratová hodnota:
dátum v milisekundách epochy
Pozri tiež:
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String, String), 
naposledyUpravený(String, long)
retazecNaDatum
public static long retazecNaDatum(String dátum)
 Alias pre reťazecNaDátum.
reťazecNaDátum
public static long reťazecNaDátum(String dátum,
                                  String formát)
Vráti dátum v milisekundách počítaných od začiatku takzvanej
 epochy. Táto metóda je kópiou metódy reťazecNaDátum. Ďalšie
 detaily nájdete v jej opise.
Parametre:
dátum – reťazec dátumu v predvolenom formáte
formát – očakávaný formát dátumu
Návratová hodnota:
dátum v milisekundách epochy
Pozri tiež:
dátumNaReťazec(long), 
dátumNaReťazec(long, String), 
reťazecNaDátum(String), 
naposledyUpravený(String, long)
retazecNaDatum
public static long retazecNaDatum(String dátum,
                                  String formát)
 Alias pre reťazecNaDátum.
naposledyUpravený
public static long naposledyUpravený(String názov)
Zistí dátum a čas poslednej úpravy zadaného súboru alebo
 priečinka. Hodnota je udaná v milisekundách od začiatku takzvanej
 epochy – polnoc 1. januára 1970, pričom v našom časovom pásme to
 znamená hodinový posun, čiže jednu hodinu v noci rovnakého
 dátumu.
Parametre:
názov – názov súboru alebo priečinka
Návratová hodnota:
celočíselná hodnota reprezentujúca čas poslednej úpravy
     súboru; meraná je v milisekundách od začiatku epochy; ak súbor
     nejestvuje, návratová hodnota je 0 (začiatok epochy)
Pozri tiež:
naposledyUpravený(String, long), 
dátumNaReťazec(long), 
dátumNaReťazec(long, String)
naposledyUpraveny
public static long naposledyUpraveny(String názov)
 Alias pre naposledyUpravený.
naposledyUpravený
public static void naposledyUpravený(String názov,
                                     long miliDátum)
Nastaví dátum a čas poslednej úpravy zadaného súboru alebo
 priečinka. Hodnota je udaná v milisekundách od začiatku takzvanej
 epochy – polnoc 1. januára 1970, pričom v našom časovom pásme to
 znamená hodinový posun, čiže jednu hodinu v noci rovnakého
 dátumu.
Parametre:
názov – názov súboru alebo priečinka
miliDátum – celočíselná hodnota reprezentujúca dátum a čas
     v milisekundách meraný od začiatku epochy
Pozri tiež:
naposledyUpravený(String), 
reťazecNaDátum(String), 
reťazecNaDátum(String, String)
naposledyUpraveny
public static void naposledyUpraveny(String názov,
                                     long miliDátum)
 Alias pre naposledyUpravený.
veľkosť
public static long veľkosť(String názov)
Zistí veľkosť zadaného súboru alebo zdroja. Ak súbor alebo zdroj
 nemohli byť nájdené, tak metóda vráti hodnotu −1.
 
 Tip: Ak metóda jestvuje vráti pre zadaný názov hodnotu false, tak
 vrátená platná veľkosť je veľkosťou zdroja.
Parametre:
názov – názov súboru alebo zdroja
Návratová hodnota:
celočíselná hodnota reprezentujúca veľkosť zadaného
     súboru alebo zdroja
Pozri tiež:
kdeJeSúbor(String)
velkost
public static long velkost(String názov)
 Alias pre veľkosť.
kontrolnýSúčet
public static byte[] kontrolnýSúčet(String názov)
Vyrobí kontrolný súčet súboru algoritmom SHA1. Tento súčet sa dá
 použiť na overenie toho, či bol obsah súboru zmenený. Dá sa to
 využiť napríklad na overenie toho, či sa zmenil obsah konfigurácie
 zapísanej na disku, pretože je omnoho menej pamäťovo náročné
 uchovávať v pamäti len kontrolný súčet (kvázi signatúru) súboru ako
 celý súbor.
 
 Princíp je jednoduchý – uchovať kontrolný súčet vytvorený tesne
 po prečítaní a spracovaní obsahu súboru (t. j. napr. po prečítaní
 konfigurácie) a ten neskôr porovnavať s novým súčtom vytvoreným pri vzniku podozrenia
 na zmeny v súbore (napr. pri zistení zmeny dátumu a času poslednej úpravy súboru).
 Je minimálna šanca, že by mali súbory s rôznym obsahom a rovnakou
 veľkosťou rovnaké kontroné súčty (signatúry).
Parametre:
názov – názov súboru
Návratová hodnota:
pole bajtov obsahujúce kontrolný súčet súboru alebo
     null, ak súbor nejestvuje alebo je to priečinok,
     prípadne sa nedá čítať
Pozri tiež:
súčtySúZhodné(byte[], byte[])
kontrolnySucet
public static byte[] kontrolnySucet(String názov)
 Alias pre kontrolnýSúčet.
súčtySúZhodné
public static boolean súčtySúZhodné(byte[] kontrolnýSúčet1,
                                    byte[] kontrolnýSúčet2)
Porovná zhodu dvoch kontrolných súčtov súborov. Kontrolné súčty
 súborov sa dajú získať metódou: kontrolnýSúčet.
Parametre:
kontrolnýSúčet1 – kontrolný súčet 1 (prvý „odtlačok“ súboru
     na porovnanie oddelený od druhého v čase alebo priestore)
kontrolnýSúčet2 – kontrolný súčet 2 (druhý „odtlačok“ súboru)
Návratová hodnota:
true ak sa súčty zhodujú; true
     v opačnom prípade
Pozri tiež:
kontrolnýSúčet(String)
suctySuZhodne
public static boolean suctySuZhodne(byte[] kontrolnýSúčet1,
                                    byte[] kontrolnýSúčet2)
 Alias pre súčtySúZhodné.
mennýPriestorVlastností
public String mennýPriestorVlastností()
 Zistí aktuálne používaný menný priestor
 na čítanie a zápis vlastností. Pre viac informácií o účele menného
 priestoru pozri mennýPriestorVlastností(String).
Návratová hodnota:
vráti aktuálne používaný menný priestor v objekte typu
     String alebo null ak nie
     je používaný žiadny menný priestor
mennyPriestorVlastnosti
public String mennyPriestorVlastnosti()
 Alias pre mennýPriestorVlastností.
mennýPriestorVlastností
public void mennýPriestorVlastností(String novýMennýPriestor)
 Stanoví nový menný priestor na čítanie
 a zápis vlastností.
 
 Menný priestor slúži na oddelenie určitej skupiny vlastností od
 ostatných vlastností alebo skupín vlastností. Vďaka nemu je
 napríklad možné zapisovať vlastnosti s rovnakým názvom pre rôzne
 inštancie objektov.
 
 Menný priestor nesmie byť prázdny, nesmie sa začínať alebo
 končiť bodkou a nesmie obsahovať znak rovná sa. Ak chceme zrušiť
 používanie menného priestoru, treba volať túto metódu s argumentom
 null.
 
 Vo všeobecnosti menný priestor buď je, alebo nie je nastavený.
 V súčasnej verzii rámca je však implementovaný zásobník menných
 priestorov a menné priestory je možné s jednoduchosťou vnárať a vynárať.
 
  
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
novýMennýPriestor – názov nového menného priestoru alebo
     null na zrušenie používania menného priestoru
Výnimky:
GRobotException – ak názov menného priestoru nespĺňa
     niektorú požiadavku
mennyPriestorVlastnosti
public void mennyPriestorVlastnosti(String novýMennýPriestor)
 Alias pre mennýPriestorVlastností.
vnorMennýPriestorVlastností
public void vnorMennýPriestorVlastností(String vnorenýMennýPriestor)
Zmení menný priestor na čítanie a zápis vlastností tak, aby
 vznikol vnorený priestor podľa konvencie opísanej nižšie.
 Pozri aj informácie v opise metódy mennýPriestorVlastností.
 
 Upozornenie: Každá sekcia disponuje vlastným zásobníkom
 menných priestorov
 
 Ak je namiesto názvu vnoreného menného priestoru zadaná
 hodnota null, tak je aktuálny menný priestor
 zálohovaný do vnútorného zásobníka a zostáva nezmenený.
 (Je to ekvivalentné volaniu metódy vnorMennýPriestorVlastností bez
 parametra.) Obnoviť ho môžete volaním metódy vynorMennýPriestorVlastností.
 Až do volania uvedenej metódy môžete ľubovoľne meniť menný
 priestor metódou mennýPriestorVlastností a nakoniec jej volaním obnoviť posledný
 zálohovaný stav.
 
 Ak je zadaný korektný názov vnoreného menného priestoru,
 tak je okrem zálohovania pozmenený aktuálny priestor takto:
 
 
 Ak predtým nebol aktívny žiadny menný priestor, tak zadaný
 menný priestor sa stáva hlavným menným priestorom.
 Ak bol predtým aktívny ľubovoľný menný priestor, tak je
 vytvorený vnorený menný priestor podľa konvencie: «aktuálny
 menný priestor».«vnorený menný
 priestor»; príklad:
 starýPriestor.vnorenýPriestor.
 
 
 Obnoviť predchádzajúci menný priestor môžete aj v tomto prípade
 rovnako ako v prípade volania tejto metódy s hodnotou null) – volaním metódy vynorMennýPriestorVlastností.
 
  
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
 
 Príklad:
 
 Upozornenie: Nasledujúci príklad
 staticky importuje triedy Svet, ÚdajeUdalostí a Math. Je to ukážka toho, ako je
 možné zjednodušiť písanie kódu v Jave. Negatívnym dôsledkom je
 nižšia čitateľnosť kódu, pretože statické metódy týchto tried
 (čo sú v prípade uvedených tried prakticky všetky metódy) nie sú
 jednoduchým spôsobom odlíšiteľné (nemajú prefix triedy).
 
 Tento príklad ukazuje využitie vnárania menných priestorov
 v rámci jednoduchej aplikácie – skicára miestností.
 
 
// Upozornenie! Tento príklad staticky importuje triedy Svet, ÚdajeUdalostí
// a Math. Je to ukážka toho, ako je možné zjednodušiť písanie kódu v Jave.
// Negatívnym dôsledkom je nižšia čitateľnosť kódu, pretože statické metódy
// týchto tried (čo sú v prípade uvedených tried prakticky všetky ich metódy)
// nie sú jednoduchým spôsobom odlíšiteľné (nemajú prefix triedy).
import knižnica.*;
import java.io.IOException;
import static java.lang.Math.*;
import static knižnica.Svet.*;
import static knižnica.ÚdajeUdalostí.*;
public class SkicárMiestností extends GRobot
{
    // Menovka miestnosti použitá v prípade, keď je názov miestnosti
    // rovný null. To môže nastať v prípade, že používateľ zruší zadávanie
    // názvu novej miestnosti – miestnosť je síce vytvorená, ale nemá meno.
    private final static String bezMena = "«bez mena»";
    // Trieda zhromažďujúca informácie o miestnosti.
    private class Miestnosť extends Častica
    {
        public String meno = null;
        // Prečítanie záznamu o miestnosti z konfiguračného súboru.
        public void čítajZoSúboru(Súbor súbor, String identifikátor)
            throws IOException
        {
            súbor.vnorMennýPriestorVlastností(identifikátor);
            try
            {
                meno = orežMeno(súbor.čítajVlastnosť("meno", meno));
                x = súbor.čítajVlastnosť("x", x);
                y = súbor.čítajVlastnosť("y", y);
                uhol = súbor.čítajVlastnosť("uhol", uhol);
                w = súbor.čítajVlastnosť("šírka", w);
                h = súbor.čítajVlastnosť("výška", h);
            }
            finally
            {
                súbor.vynorMennýPriestorVlastností();
            }
        }
        // Zapísanie záznamu o miestnosti do konfiguračného súboru.
        public void uložDoSúboru(Súbor súbor, String identifikátor)
            throws IOException
        {
            súbor.vnorMennýPriestorVlastností(identifikátor);
            try
            {
                súbor.zapíšVlastnosť("meno", meno);
                súbor.zapíšVlastnosť("x", x);
                súbor.zapíšVlastnosť("y", y);
                súbor.zapíšVlastnosť("uhol", uhol);
                súbor.zapíšVlastnosť("šírka", w);
                súbor.zapíšVlastnosť("výška", h);
            }
            finally
            {
                súbor.vynorMennýPriestorVlastností();
            }
        }
    }
    // Zoznam pracovných režimov.
    private final static int PASÍVNY = 0;
    private final static int UPRAV_MIESTNOSŤ = 1;
    private final static int ŤAHAJ_MIESTNOSŤ = 2;
    private final static int PRESUŇ_MIESTNOSŤ = 3;
    private final static int PRESUŇ_VŠETKO = 4;
    // Aktuálny pracovný režim.
    private int režim = PASÍVNY;
    // Aktuálna inštancia miestnosti.
    private Miestnosť miestnosť = null;
    // Pracovné súradnice myši.
    private double myšX = 0.0, myšY = 0.0;
    private double myšZX = 0.0, myšZY = 0.0;
    // Zoznam vytvorených miestností.
    private final Zoznam&lt;Miestnosť&gt; miestnosti = new Zoznam&lt;Miestnosť&gt;();
    // Konštruktor.
    private SkicárMiestností()
    {
        super("Skicár miestností…");
        farbaPozadia(šedá);
        farbaPlochy(tmavošedá);
        písmo("Calibri", 14);
        hrúbkaČiary(2.5);
        skry();
        // Čítanie a zápis konfigurácie. Zapisuje sa počet miestností a každá
        // miestnosť je zapísaná do vnoreného menného priestoru s unikátnym
        // názvom (identifikátorom).
        new ObsluhaUdalostí()
        {
            @Override public boolean konfiguráciaZmenená()
            { return true; }
            @Override public void zapíšKonfiguráciu(Súbor súbor)
                throws IOException
            {
                int početMiestností = miestnosti.veľkosť();
                súbor.zapíšPrázdnyRiadokVlastností();
                súbor.zapíšVlastnosť("početMiestností", početMiestností);
                for (int i = 0; i &lt; početMiestností; ++i)
                {
                    súbor.zapíšPrázdnyRiadokVlastností();
                    miestnosti.daj(i).uložDoSúboru(súbor,
                        "miestnosť[" + i + "]");
                }
            }
            @Override public void čítajKonfiguráciu(Súbor súbor)
                throws IOException
            {
                int početMiestností = súbor.čítajVlastnosť(
                    "početMiestností", 0);
                for (int i = 0; i &lt; početMiestností; ++i)
                {
                    Miestnosť miestnosť = new Miestnosť();
                    miestnosť.čítajZoSúboru(súbor, "miestnosť[" + i + "]");
                    miestnosti.pridaj(miestnosť);
                }
            }
        };
    }
    // Pomocná metóda zaokrúhľujúca súradnice myši do mriežky.
    private void zaokrúhliMyš()
    {
        myšX = polohaMyšiX(); myšX += najmenšieX();
        myšY = polohaMyšiY(); myšY += najmenšieY();
        myšX /= 10; myšX = (int)myšX; myšX *= 10;
        myšY /= 10; myšY = (int)myšY; myšY *= 10;
        myšX -= najmenšieX();
        myšY -= najmenšieY();
    }
    // Pomocná metóda zbavujúca nadbytočných medzier názov miestnosti
    // (prípadne iného objektu).
    private String orežMeno(String meno)
    {
        return meno.replaceAll("\\s+", " ").trim();
    }
    // Pomocná metóda slúžiaca na zadanie alebo úpravu názvu miestnosti.
    private void premenuj(Miestnosť miestnosť)
    {
        if (null != miestnosť)
        {
            String meno = null == miestnosť.meno ? zadajReťazec(
                "Zadaj meno miestnosti") : upravReťazec(miestnosť.meno,
                "Uprav meno miestnosti");
            if (null != meno) miestnosť.meno = orežMeno(meno);
        }
    }
    // Časť ovládania myšou.
    @Override public void ťahanieMyšou()
    {
        switch (režim)
        {
        case PASÍVNY:
            // Začatie ťahania myšou so stlačeným klávesom Ctrl v pasívnom
            // režime začne definíciu novej miestnosti.
            if (myš().isControlDown())
            {
                zaokrúhliMyš();
                miestnosť = new Miestnosť();
                miestnosť.x = myšZX = myšX;
                miestnosť.y = myšZY = myšY;
                miestnosti.pridaj(miestnosť);
                režim = ŤAHAJ_MIESTNOSŤ;
                žiadajPrekreslenie();
            }
            // Klasické ťahanie myšou v pasívnom režime buď ťahá všetko,
            // alebo miestnosť na polohe myši.
            else
            {
                zaokrúhliMyš();
                myšZX = myšX;
                myšZY = myšY;
                režim = PRESUŇ_VŠETKO;
                for (Miestnosť miestnosť : miestnosti)
                {
                    skočNa(miestnosť);
                    if (myšVObdĺžniku(5 + miestnosť.w, 5 + miestnosť.h))
                    {
                        this.miestnosť = miestnosť;
                        režim = PRESUŇ_MIESTNOSŤ;
                        žiadajPrekreslenie();
                        break;
                    }
                }
            }
            break;
        case UPRAV_MIESTNOSŤ:
            // Ťahanie v režime úpravy miestnosti (t. j. keď je niektorá
            // miestnosť označená) ukončí tento režim a vykoná to isté ako
            // v pasívnom režime.
            režim = PASÍVNY;
            miestnosť = null;
            ťahanieMyšou();
            break;
        case ŤAHAJ_MIESTNOSŤ:
            // Režim ťahania novej miestnosti – mení rozmery miestnosti.
            zaokrúhliMyš();
            miestnosť.w = 10 + abs(myšX &#45; myšZX);
            miestnosť.h = 10 + abs(myšY &#45; myšZY);
            žiadajPrekreslenie();
            break;
        case PRESUŇ_MIESTNOSŤ:
            // Režim presúvania alebo zmeny rozmeru označenej miestnosti.
            zaokrúhliMyš();
            if (myš().isShiftDown())
            {
                // (Stlačenie klávesu Shift znamená zmenu rozmerov miestnosti.)
                if (myšX &gt;= miestnosť.x)
                    miestnosť.w += myšX &#45; myšZX;
                else
                    miestnosť.w += myšZX &#45; myšX;
                if (myšY &gt;= miestnosť.y)
                    miestnosť.h += myšY &#45; myšZY;
                else
                    miestnosť.h += myšZY &#45; myšY;
            }
            else
            {
                miestnosť.x += myšX &#45; myšZX;
                miestnosť.y += myšY &#45; myšZY;
            }
            myšZX = myšX;
            myšZY = myšY;
            žiadajPrekreslenie();
            break;
        case PRESUŇ_VŠETKO:
            // Režim presúvania všetkého definovaného…
            zaokrúhliMyš();
            for (Miestnosť miestnosť : miestnosti)
            {
                miestnosť.x += myšX &#45; myšZX;
                miestnosť.y += myšY &#45; myšZY;
            }
            myšZX = myšX;
            myšZY = myšY;
            žiadajPrekreslenie();
            break;
        }
    }
    // Časť ovládania myšou – ukončuje ťahanie myšou.
    // (Kód je krátky a samovysvetľujúci.)
    @SuppressWarnings("fallthrough")
    @Override public void uvoľnenieTlačidlaMyši()
    {
        switch (režim)
        {
        case ŤAHAJ_MIESTNOSŤ:
            premenuj(miestnosť);
            // no break – fallthrough
        case PRESUŇ_MIESTNOSŤ:
            režim = UPRAV_MIESTNOSŤ;
            žiadajPrekreslenie();
            break;
        case PRESUŇ_VŠETKO:
            režim = PASÍVNY;
            break;
        }
    }
    // Časť ovládania myšou – klinutie sa vykoná vtedy, keď nenastalo
    // ťahanie myšou.
    @Override public void klik()
    {
        switch (režim)
        {
        case PASÍVNY:
            // Kliknutie v pasívnom režime so stlačeným klávesom Ctrl začne
            // definíciu novej miestnosti, ale na rozdiel od ťahania myšou si
            // najskôr vyžiada názov miestnosti.
            if (myš().isControlDown())
            {
                zaokrúhliMyš();
                miestnosť = new Miestnosť();
                miestnosť.w = 20;
                miestnosť.x = myšX;
                miestnosť.y = myšY;
                premenuj(miestnosť);
                miestnosti.pridaj(miestnosť);
                režim = UPRAV_MIESTNOSŤ;
                žiadajPrekreslenie();
            }
            else
            {
                // Kliknutie na niektorú miestnosť ju označí.
                for (Miestnosť miestnosť : miestnosti)
                {
                    skočNa(miestnosť);
                    if (myšVObdĺžniku(5 + miestnosť.w, 5 + miestnosť.h))
                    {
                        this.miestnosť = miestnosť;
                        režim = UPRAV_MIESTNOSŤ;
                        žiadajPrekreslenie();
                        break;
                    }
                }
            }
            break;
        case UPRAV_MIESTNOSŤ:
            skočNa(miestnosť);
            // Kliknutie na označenú miestnosť spustí úpravu jej názvu.
            if (myšVObdĺžniku(5 + miestnosť.w, 5 + miestnosť.h))
            {
                premenuj(miestnosť);
            }
            // Kliknutie mimo označenej miestnosti buď prejde do pasívneho
            // režimu, alebo označí inú miestnosť (podľa polohy myši).
            else
            {
                režim = PASÍVNY;
                miestnosť = null;
                for (Miestnosť miestnosť : miestnosti)
                {
                    skočNa(miestnosť);
                    if (myšVObdĺžniku(5 + miestnosť.w, 5 + miestnosť.h))
                    {
                        this.miestnosť = miestnosť;
                        režim = UPRAV_MIESTNOSŤ;
                        break;
                    }
                }
            }
            žiadajPrekreslenie();
            break;
        }
    }
    // Časovač – implementuje prekresľovanie scény.
    @Override public void tik()
    {
        if (neboloPrekreslené())
        {
            podlaha.vymažGrafiku();
            farba(čierna);
            for (Miestnosť miestnosť : miestnosti)
            {
                skočNa(miestnosť);
                if (miestnosť.w &lt; 0.0) miestnosť.w = 0.0;
                if (miestnosť.h &lt; 0.0) miestnosť.h = 0.0;
                if (miestnosť == this.miestnosť)
                {
                    farba(oranžová);
                    if (0.0 == miestnosť.w && 0.0 == miestnosť.h)
                        kruh(2.0);
                    else
                        kresliObdĺžnik(miestnosť.w, miestnosť.h);
                    farba(čierna);
                }
                else if (0.0 == miestnosť.w && 0.0 == miestnosť.h)
                    kruh(2.0);
                else
                    kresliObdĺžnik(miestnosť.w, miestnosť.h);
            }
            farba(biela);
            for (Miestnosť miestnosť : miestnosti)
            {
                skočNa(miestnosť);
                if (0.0 &lt;= miestnosť.w && 0.0 &lt;= miestnosť.h)
                    vyplňObdĺžnik(miestnosť.w, miestnosť.h);
            }
            farba(hnedá);
            for (Miestnosť miestnosť : miestnosti)
            {
                skočNa(miestnosť);
                if (miestnosť == this.miestnosť)
                {
                    if (null != miestnosť.meno)
                    {
                        farba(šedá);
                        if (90.0 != miestnosť.uhol)
                        {
                            vľavo(90 &#45; miestnosť.uhol);
                            text(miestnosť.meno);
                            vpravo(90 &#45; miestnosť.uhol);
                        }
                        else text(miestnosť.meno);
                        farba(hnedá);
                    }
                }
                else if (90.0 != miestnosť.uhol)
                {
                    vľavo(90 &#45; miestnosť.uhol);
                    if (null == miestnosť.meno)
                        text(bezMena); else text(miestnosť.meno);
                    vpravo(90 &#45; miestnosť.uhol);
                }
                else if (null == miestnosť.meno)
                    text(bezMena); else text(miestnosť.meno);
            }
            prekresli();
        }
    }
    // Ovládanie klávesnicou.
    @Override public void stlačenieKlávesu()
    {
        switch (režim)
        {
        case PASÍVNY:
            if (klávesnica().isControlDown())
            {
                switch (kláves())
                {
                // Ctrl + kurzorové klávesy v pasívnom režime otáčajú scénu.
                case Kláves.VPRAVO:
                    {
                        double a, b;
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            a = miestnosť.x;
                            b = miestnosť.y;
                            miestnosť.x = b;
                            miestnosť.y = -a;
                            a = miestnosť.w;
                            b = miestnosť.h;
                            miestnosť.w = b;
                            miestnosť.h = a;
                            if (klávesnica().isShiftDown())
                                miestnosť.uhol += 90;
                        }
                    }
                    žiadajPrekreslenie();
                    break;
                case Kláves.VĽAVO:
                    {
                        double a, b;
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            a = miestnosť.x;
                            b = miestnosť.y;
                            miestnosť.x = -b;
                            miestnosť.y = a;
                            a = miestnosť.w;
                            b = miestnosť.h;
                            miestnosť.w = b;
                            miestnosť.h = a;
                            if (klávesnica().isShiftDown())
                                miestnosť.uhol -= 90;
                        }
                    }
                    žiadajPrekreslenie();
                    break;
                // Ctrl + plus v pasívnom režime zväčší všetky miestnosti
                // a odsunie ich od stredu scény (pokus o jemnejšiu zmenu
                // mierky – s aktívnou mriežkou to nebolo možné implementovať
                // lepšie).
                // Ctrl + Shift + plus urobí opak – to isté, čo Ctrl + mínus.
                case Kláves.VK_PLUS:
                case Kláves.VK_ADD:
                    if (klávesnica().isShiftDown())
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            if (miestnosť.x &gt;= 0.0)
                                miestnosť.x -= 20.0;
                            else
                                miestnosť.x += 20.0;
                            if (miestnosť.y &gt;= 0.0)
                                miestnosť.y -= 20.0;
                            else
                                miestnosť.y += 20.0;
                            miestnosť.w -= 10.0;
                            miestnosť.h -= 10.0;
                        }
                        žiadajPrekreslenie();
                    }
                    else
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            if (miestnosť.x &gt;= 0.0)
                                miestnosť.x += 20.0;
                            else
                                miestnosť.x -= 20.0;
                            if (miestnosť.y &gt;= 0.0)
                                miestnosť.y += 20.0;
                            else
                                miestnosť.y -= 20.0;
                            miestnosť.w += 10.0;
                            miestnosť.h += 10.0;
                        }
                        žiadajPrekreslenie();
                    }
                    break;
                // Ctrl + mínus v pasívnom režime zmenší všetky miestnosti
                // a priblíži ich k stredu scény…
                // Ctrl + Shift + mínus urobí opak – to isté, čo Ctrl + plus.
                case Kláves.VK_MINUS:
                case Kláves.VK_SUBTRACT:
                    if (klávesnica().isShiftDown())
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            if (miestnosť.x &gt;= 0.0)
                                miestnosť.x += 20.0;
                            else
                                miestnosť.x -= 20.0;
                            if (miestnosť.y &gt;= 0.0)
                                miestnosť.y += 20.0;
                            else
                                miestnosť.y -= 20.0;
                            miestnosť.w += 10.0;
                            miestnosť.h += 10.0;
                        }
                        žiadajPrekreslenie();
                    }
                    else
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            if (miestnosť.x &gt;= 0.0)
                                miestnosť.x -= 20.0;
                            else
                                miestnosť.x += 20.0;
                            if (miestnosť.y &gt;= 0.0)
                                miestnosť.y -= 20.0;
                            else
                                miestnosť.y += 20.0;
                            miestnosť.w -= 10.0;
                            miestnosť.h -= 10.0;
                        }
                        žiadajPrekreslenie();
                    }
                    break;
                // Ctrl + hviezdička v pasívnom režime zdvojnásobí
                // mierku scény.
                // Ctrl + Shift + hviezdička urobí opak, len s vyžiadaním
                // potvrdenia akcie – to isté, čo Ctrl + lomka.
                case Kláves.VK_ASTERISK:
                case Kláves.VK_MULTIPLY:
                    if (klávesnica().isShiftDown())
                    {
                        if (ÁNO == otázka("Určite chcete znížiť " +
                            "rozlíšenie plánu?"))
                        {
                            for (Miestnosť miestnosť : miestnosti)
                            {
                                miestnosť.x /= 2.0;
                                miestnosť.y /= 2.0;
                                miestnosť.w /= 2.0;
                                miestnosť.h /= 2.0;
                            }
                            žiadajPrekreslenie();
                        }
                    }
                    else
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            miestnosť.x *= 2.0;
                            miestnosť.y *= 2.0;
                            miestnosť.w *= 2.0;
                            miestnosť.h *= 2.0;
                        }
                        žiadajPrekreslenie();
                    }
                    break;
                // Ctrl + lomka v pasívnom režime zmenší mierku scény na
                // polovicu, avšak predtým si vyžiada potvrdenie akcie,
                // pretože hrozí deformácia scény mimo mriežku (toto nie
                // je v tejto verzii ošetrené).
                // Ctrl + Shift + lomka urobí opak – to isté, čo
                // Ctrl + hviezdička.
                case Kláves.VK_SLASH:
                case Kláves.VK_DIVIDE:
                    if (klávesnica().isShiftDown())
                    {
                        for (Miestnosť miestnosť : miestnosti)
                        {
                            miestnosť.x *= 2.0;
                            miestnosť.y *= 2.0;
                            miestnosť.w *= 2.0;
                            miestnosť.h *= 2.0;
                        }
                        žiadajPrekreslenie();
                    }
                    else
                    {
                        if (ÁNO == otázka("Určite chcete znížiť " +
                            "rozlíšenie plánu?"))
                        {
                            for (Miestnosť miestnosť : miestnosti)
                            {
                                miestnosť.x /= 2.0;
                                miestnosť.y /= 2.0;
                                miestnosť.w /= 2.0;
                                miestnosť.h /= 2.0;
                            }
                            žiadajPrekreslenie();
                        }
                    }
                    break;
                }
            }
            // Kurzorové klávesy (bez Ctrl) v pasívnom režime presúvajú scénu.
            else
            {
                switch (kláves())
                {
                case Kláves.HORE:
                    for (Miestnosť miestnosť : miestnosti)
                        miestnosť.y += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.DOLE:
                    for (Miestnosť miestnosť : miestnosti)
                        miestnosť.y -= 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VPRAVO:
                    for (Miestnosť miestnosť : miestnosti)
                        miestnosť.x += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VĽAVO:
                    for (Miestnosť miestnosť : miestnosti)
                        miestnosť.x -= 10;
                    žiadajPrekreslenie();
                    break;
                }
            }
            break;
        case UPRAV_MIESTNOSŤ:
            // Režim úpravy miestnosti…
            if (klávesnica().isShiftDown())
            {
                // Shift + kurzorové klávesy menia veľkosť
                // označenej miestnosti.
                switch (kláves())
                {
                case Kláves.HORE:
                    miestnosť.h += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.DOLE:
                    miestnosť.h -= 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VPRAVO:
                    miestnosť.w += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VĽAVO:
                    miestnosť.w -= 10;
                    žiadajPrekreslenie();
                    break;
                }
            }
            else if (klávesnica().isControlDown())
            {
                // Ctrl + kurzorové klávesy menia orientáciu textu názvu
                // označenej miestnosti. Klávesy vpravo a vľavo otáčajú
                // text o 90°, klávesy hore a dole jemnejšie – o 15°.
                switch (kláves())
                {
                case Kláves.HORE:
                    miestnosť.uhol -= 15;
                    žiadajPrekreslenie();
                    break;
                case Kláves.DOLE:
                    miestnosť.uhol += 15;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VPRAVO:
                    miestnosť.uhol += 90;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VĽAVO:
                    miestnosť.uhol -= 90;
                    žiadajPrekreslenie();
                    break;
                }
            }
            else
            {
                // Kurzorové klávesy (bez Ctrl a Shift) presúvajú
                // označenú miestnosť.
                switch (kláves())
                {
                case Kláves.HORE:
                    miestnosť.y += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.DOLE:
                    miestnosť.y -= 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VPRAVO:
                    miestnosť.x += 10;
                    žiadajPrekreslenie();
                    break;
                case Kláves.VĽAVO:
                    miestnosť.x -= 10;
                    žiadajPrekreslenie();
                    break;
                // Klávesy Escape a Enter ukončia režim úprav – zrušia
                // označenie miestnosti.
                case Kláves.ESCAPE:
                case Kláves.ENTER:
                    režim = PASÍVNY;
                    miestnosť = null;
                    žiadajPrekreslenie();
                    break;
                // Kláves Delete si vyžiada potvrdenie na vymazanie
                // miestnosti a v prípade pozitívnej odpovede ju vymaže.
                case Kláves.DELETE:
                    if (ÁNO == otázka("Určite chcete vymazať miestnosť?"))
                    {
                        miestnosti.odober(miestnosť);
                        režim = PASÍVNY;
                        miestnosť = null;
                        žiadajPrekreslenie();
                    }
                    break;
                }
            }
            break;
        }
    }
    // Vstupný bod programu.
    public static void main(String[] args)
    {
        // (Poznámka: Okrem konštruktora príkladu sú všetky metódy
        // v tomto bloku statickými metódami sveta – pozri upozornenie
        // na začiatku príkladu.)
        nekresli();
        použiKonfiguráciu("SkicárMiestností.cfg");
        new SkicárMiestností();
        if (prvéSpustenie())
        {
            zbaľ();
            vystreď();
        }
        spustiČasovač();
    }
}
 
 Ukážka aplikácie:
 
 
 Ukážka vzhľadu miniaplikácie „Skicár
 miestností.“
Parametre:
vnorenýMennýPriestor – názov vnoreného menného priestoru
     alebo null na zálohovanie aktuálneho menného
     priestoru
Výnimky:
GRobotException – ak názov vnoreného menného priestoru
     nespĺňa niektorú požiadavku – pozri informácie v opise metódy
     mennýPriestorVlastností
vnorMennyPriestorVlastnosti
public void vnorMennyPriestorVlastnosti(String vnorenýMennýPriestor)
 Alias pre vnorMennýPriestorVlastností.
vnorMennýPriestorVlastností
public void vnorMennýPriestorVlastností()
Zálohuje aktuálny menný priestor na čítanie a zápis
 vlastností do vnútorného zásobníka. Obnoviť ho môžete volaním
 metódy vynorMennýPriestorVlastností.
 
 Upozornenie: Každá sekcia disponuje vlastným zásobníkom
 menných priestorov
 
 Pozri aj informácie a príklad v opise metódy vnorMennýPriestorVlastností.
vnorMennyPriestorVlastnosti
public void vnorMennyPriestorVlastnosti()
 Alias pre vnorMennýPriestorVlastností.
vynorMennýPriestorVlastností
public void vynorMennýPriestorVlastností()
Obnoví posledný zálohovaný menný priestor na čítanie a zápis
 vlastností z vnútorného zásobníka. Zásobník nesmie byť prázdny,
 inak vznikne výnimka. Pozri aj informácie v opise metódy vnorMennýPriestorVlastností.
 
 Upozornenie: Každá sekcia disponuje vlastným zásobníkom
 menných priestorov
 
 Pozri aj informácie a príklad v opise metódy vnorMennýPriestorVlastností.
Výnimky:
EmptyStackException – ak je vnútorný zásobník
     menných priestorov prázdny
vynorMennyPriestorVlastnosti
public void vynorMennyPriestorVlastnosti()
 Alias pre vynorMennýPriestorVlastností.
predvolenáCestaDialógov
public static String predvolenáCestaDialógov()
Zistí, aká je aktuálna predvolená cesta (systémových pomocných)
 dialógov na otvorenie
 a uloženie súborov. Ak je
 návratová hodnota rovná null (alebo prázdny reťazec),
 tak to znamená, že dialógy nemajú žiadnu predvolenú cestu a budú
 otvorené na umiestnení, ktoré určí operačný systém.
Návratová hodnota:
aktuálna predvolená cesta dialógov na
     otvorenie
     a uloženie súborov
predvolenaCestaDialogov
public static String predvolenaCestaDialogov()
 Alias pre predvolenáCestaDialógov.
predvolenáCestaDialógov
public static void predvolenáCestaDialógov(String cesta)
Nastaví novú predvolenú cestu (systémových pomocných)
 dialógov na otvorenie
 a uloženie súborov. Ak je
 zadaná hodnota rovná null (alebo prázdny reťazec),
 tak to znamená, že dialógy nemajú žiadnu predvolenú cestu a budú
 otvorené na umiestnení, ktoré určí operačný systém.
 
 Tip: Neoficiálnym trikom na voľbu
 priečinka aktuálneho pri spustení aplikácie (ktorý nie je
 podpoprovaný všetkými operačnými systémami) je zadanie reťazca
 "." (ktorý má v podporovaných OS presne význam
 aktuálneho priečinka).
Parametre:
cesta – nová predvolená cesta dialógov na
     otvorenie
     a uloženie súborov
predvolenaCestaDialogov
public static void predvolenaCestaDialogov(String cesta)
 Alias pre predvolenáCestaDialógov.
dialógOtvoriť
public static String dialógOtvoriť(String titulok)
Otvorí používateľský dialóg na otvorenie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom. Ak používateľ dialóg zruší, návratová hodnota je
 null. Programátor zadáva titulok dialógu, s ktorým
 bude dialóg otvorený používateľovi.
Parametre:
titulok – titulok dialógu
Návratová hodnota:
úplná cesta a názov súboru alebo null
dialogOtvorit
public static String dialogOtvorit(String titulok)
 Alias pre dialógOtvoriť.
dialógOtvoriť
public static String dialógOtvoriť(String titulok,
                                   String predvolenýNázovSúboru,
                                   String... filtre)
Otvorí používateľský dialóg na otvorenie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom.
 Ak používateľ dialóg zruší, návratová hodnota je null.
 Programátor zadáva titulok dialógu, predvolený názov súboru,
 s ktorými bude dialóg otvorený používateľovi a prípadne aj jeden
 alebo viacero filtrov obsahujúcich šablóny masiek, ktoré určia
 súbory, ktoré sú v dialógu buď viditeľné (v OS Windows), alebo
 dovolené zvoliť (v macOS, predtým OS X a Mac OS – v tomto systéme
 sú vždy viditeľné všetky bežne zobrazované súbory, ale tie, ktoré
 nevyhovujú kritériám filtra sú „šedé“ – používateľovi nie je
 umožnené ich zvoliť).
 Filtre sú zadávané vo forme reťazca, ktorý bude k dispozícii na
 výber v dialógu, a ktorý musí obsahovať aspoň jeden reťazec v tvare
 *.«prípona»«oddeľovač», pričom platnými
 oddeľovačmi sú bodkočiarka (;), čiarka (,), zvislá
 čiara (|), koncová zátvorka ()) a elipsa
 (…), inak bude filter ignorovaný. Príkladom platného filtra
 môže byť: "Obrázky vo formátoch GIF, PNG a JPEG (*.gif,
 *.png, *.jpeg…)"
 
 Poznámka: Filtre sú dostupné iba pri
 tejto verzii metódy z dôvodu rozlíšiteľnosti dvoch verzií metódy.
 Ide o principiálne obmedzenie jazyka Java. Ak si neželáte zadať
 predvolený názov súboru, použite hodnotu null. Z dôvodu
 použitia filtrov otvára táto verzia metódy principiálne iný typ
 dialógu ako jej staršia verzia.
Parametre:
titulok – titulok dialógu
predvolenýNázovSúboru – predvolený názov súboru poskytovaný
     dialógom, ktorý je v niektorých operačných systémoch
     (konkrétne macOS – predtým OS X a Mac OS) žiaľ aj tak
     ignorovaný (pri dialógu slúžiacom na voľbu súboru na uloženie
     to neplatí)
filtre – jeden alebo viac nepovinných reťazcov filtrov
     (obsahujúcich masky) určujúcich, ktoré súbory majú byť v dialógu
     zobrazené (v OS Windows) alebo dovolené vybrať (v macOS –
     predtým OS X a Mac OS)
Návratová hodnota:
úplná cesta a názov súboru alebo null
dialogOtvorit
public static String dialogOtvorit(String titulok,
                                   String predvolenýNázovSúboru,
                                   String... filtre)
 Alias pre dialógOtvoriť.
dialógUložiť
public static String dialógUložiť(String titulok)
Otvorí používateľský dialóg na uloženie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom. Ak používateľ dialóg zruší, návratová hodnota je
 null. Programátor zadáva titulok dialógu, s ktorým
 bude dialóg otvorený používateľovi.
Parametre:
titulok – titulok dialógu
Návratová hodnota:
úplná cesta a názov súboru alebo null
dialogUlozit
public static String dialogUlozit(String titulok)
 Alias pre dialógUložiť.
dialógUložiť
public static String dialógUložiť(String titulok,
                                  String predvolenýNázovSúboru,
                                  String... filtre)
Otvorí používateľský dialóg na uloženie súboru, ktorý vráti
 reťazec s úplnou cestou a názvom súboru zvoleného v dialógu
 používateľom. Ak používateľ dialóg zruší, návratová hodnota je
 null. Programátor zadáva titulok dialógu, predvolený
 názov súboru, s ktorými bude dialóg otvorený používateľovi
 a prípadne aj jeden alebo viacero filtrov obsahujúcich šablóny
 masiek, ktoré určia súbory, ktoré sú v dialógu buď viditeľné
 (v OS Windows), alebo dovolené zvoliť (v macOS, predtým OS X
 a Mac OS – v tomto systéme sú vždy viditeľné všetky bežne
 zobrazované súbory, ale tie, ktoré nevyhovujú kritériám filtra
 sú „šedé“ – používateľovi nie je umožnené ich zvoliť).
 Filtre sú zadávané vo forme reťazca, ktorý bude k dispozícii na
 výber v dialógu, a ktorý musí obsahovať aspoň jeden reťazec v tvare
 *.«prípona»«oddeľovač», pričom platnými
 oddeľovačmi sú bodkočiarka (;), čiarka (,), zvislá
 čiara (|), koncová zátvorka ()) a elipsa
 (…), inak bude filter ignorovaný. Príkladom platného filtra
 môže byť: "Obrázky vo formátoch GIF, PNG a JPEG (*.gif,
 *.png, *.jpeg…)"
 
 Poznámka: Filtre sú dostupné iba pri
 tejto verzii metódy z dôvodu rozlíšiteľnosti dvoch verzií metódy.
 Ide o principiálne obmedzenie jazyka Java. Ak si neželáte zadať
 predvolený názov súboru, použite hodnotu null. Z dôvodu
 použitia filtrov otvára táto verzia metódy principiálne iný typ
 dialógu ako jej staršia verzia.
Parametre:
titulok – titulok dialógu
predvolenýNázovSúboru – predvolený názov súboru
     poskytovaný dialógom
filtre – jeden alebo viac nepovinných reťazcov filtrov
     (obsahujúcich masky) určujúcich, ktoré súbory majú byť v dialógu
     zobrazené (v OS Windows) alebo dovolené vybrať (v macOS –
     predtým OS X a Mac OS)
Návratová hodnota:
úplná cesta a názov súboru alebo null
dialogUlozit
public static String dialogUlozit(String titulok,
                                  String predvolenýNázovSúboru,
                                  String... filtre)
 Alias pre dialógUložiť.
kdeJeSúbor
public static String kdeJeSúbor(String názovSúboru)
Vyhľadá skutočné umiestnenie súboru určeného na čítanie alebo
 vráti hodnotu null, ak súbor nebol nájdený. Súbor je
 prednostne vyhľadaný v rámci aktuálneho umiestnenia (cesty)
 určeného na čítanie (a zápis) súborov. Ak nie je nájdený, tak je
 prehľadaný zoznam ciest classpath. Ak i tak nie je
 nájdený, tak je nakoniec prehľadaný aktuálny balíček .jar.
 Ak súbor nie je nájdený ani tam, tak je vrátená hodnota
 null. V prípade, že sa súbor nachádza v .jar
 súbore, tak je vrátená cesta v nasledujúcom tvare:
 
 jar:file:«úplná cesta k .jar
 súboru»!«cesta a názov súboru v rámci
 .jar súboru»
 
 Poznámka: Pre používateľov OS Windows
 môže byť neštandardné, že obe cesty súvisiace s .jar
 súborom budú v úlohe oddeľovačov priečinkov lomky (/)
 obsahovať namiesto spätných lomiek (\) a zároveň
 sa budú lomkou aj začínať (a to aj napriek tomu, že za touto
 prvou lomkou bude uvedená jednotka, na ktorej je .jar
 súbor umiestnený).
Parametre:
názovSúboru – názov súboru (určeného na čítanie)
Návratová hodnota:
skutočné umiestnenie súboru alebo null, ak
     súbor nebol nájdený na žiadnej z prehľadávaných lokalít
Pozri tiež:
jestvuje(String)
kdeJeSubor
public String kdeJeSubor(String názovSúboru)
 Alias pre kdeJeSúbor.
pripojArchív
public void pripojArchív(Archív archív)
Priradí k tomuto súboru zadanú inštanciu archívu. Metódy…
                 TODO (dokončiť opis: pripojenie má viacero výhodných
 dôsledkov…)
 … automatické otvorenie…
                 
                 Zápis:
                 …
 vrhne výnimku GRobotException s jazykovým
 identifikátorom duplicateEntry (Položka „názov
 položky“ už v archíve jestvuje.)
                 
 Hodnota null znamená, že prípadný pripojený archív má
 byť od tohto súboru odpojený a súbor má opäť fungovať samostatne
 (zapisujúc a čítajúc údaje priamo z pevného disku, prípadne zo
 zdrojov).
 
 
Parametre:
archív – inštancia archívu na pripojenie
Pozri tiež:
archívPriradený(), 
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
zavri(), 
close()
pripojArchiv
public void pripojArchiv(Archív archív)
 Alias pre pripojArchív.
archívPriradený
public boolean archívPriradený()
Zistí, či je k tomuto súboru pripojený archív.
Návratová hodnota:
true ak je archív priradený, false
     v opačnom prípade
Pozri tiež:
pripojArchív(Archív)
archivPriradeny
public boolean archivPriradeny()
 Alias pre archívPriradený.
otvorNaZápis
public void otvorNaZápis(String názovSúboru)
                  throws IOException
Otvorí zadaný súbor na zápis. Ak súbor jestvuje, bude
 prepísaný. Metóda použije kódovanie UTF-8.
 
 Poznámka: V prípade, že plánujete používať
 mechanizmus vlastností, venujte pozornosť upozorneniu pri metóde
 zapíšVlastnosť!
 
 Poznámka: Pozrite si aj informácie
 uvedené v opise metódy pripojArchív.
Parametre:
názovSúboru – názov súboru, ktorý má byť otvorený na zápis
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak je meno súboru zamlčané
     (null)
Pozri tiež:
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
zavri(), 
close()
otvorNaZapis
public void otvorNaZapis(String názovSúboru)
                  throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
otvorNaZápis
public void otvorNaZápis(String názovSúboru,
                         boolean pripojiť)
                  throws IOException
Otvorí zadaný súbor na zápis. Ak je druhý parameter true, zapisovaný obsah bude pripojený k obsahu jestvujúceho
 súboru, inak bude obsah súboru prepísaný. Metóda použije kódovanie
 UTF-8.
 
 Poznámka: Pozrite si aj informácie
 uvedené v opise metódy pripojArchív.
 
 Upozornenie: V prípade, že plánujete
 používať mechanizmus vlastností, nepoužívajte túto metódu
 so zadanou hodnotou true druhého argumentu!
 
 Pozor! Pripájanie (pozri parameter
 pripojiť) nesmie byť použité s konfiguračnými súbormi,
 pretože tieto by sa stali pri ďalšom otvorení nečitateľné!
Parametre:
názovSúboru – názov súboru, ktorý má byť otvorený na zápis
pripojiť – ak je hodnota tohto parametra true,
     zapisovaný obsah bude pripojený na koniec jestvujúceho súboru
     (nesmie byť použité s konfiguračnými súbormi‼)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak je meno súboru zamlčané
     (null)
Pozri tiež:
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
zavri(), 
close()
otvorNaZapis
public void otvorNaZapis(String názovSúboru,
                         boolean pripojiť)
                  throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
otvorNaZápis
public void otvorNaZápis(String názovSúboru,
                         String kódovanie,
                         boolean pripojiť)
                  throws IOException
Otvorí zadaný súbor na zápis. Ak je druhý parameter true, zapisovaný obsah bude pripojený k obsahu jestvujúceho
 súboru, inak bude obsah súboru prepísaný.
 
 Poznámka: Pozrite si aj informácie
 uvedené v opise metódy pripojArchív.
 
 Upozornenie: V prípade, že plánujete
 používať mechanizmus vlastností, nepoužívajte túto metódu
 so zadanou hodnotou true druhého argumentu!
 
 Pozor! Pripájanie (pozri parameter
 pripojiť) nesmie byť použité s konfiguračnými súbormi,
 pretože tieto by sa stali pri ďalšom otvorení nečitateľné!
Parametre:
názovSúboru – názov súboru, ktorý má byť otvorený na zápis
kódovanie – typ kódovania, ktorý má byť použitý na uloženie
     textového súboru
pripojiť – ak je hodnota tohto parametra true,
     zapisovaný obsah bude pripojený na koniec jestvujúceho súboru
     (nesmie byť použité s konfiguračnými súbormi‼)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak je meno súboru zamlčané
     (null)
Pozri tiež:
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
zavri(), 
close()
otvorNaZapis
public void otvorNaZapis(String názovSúboru,
                         String kódovanie,
                         boolean pripojiť)
                  throws IOException
 Alias pre otvorNaZápis.
Výnimky:
IOException
otvorNaČítanie
public void otvorNaČítanie(String názovSúboru)
                    throws IOException
Otvorí zadaný súbor s kódovaním UTF-8 na čítanie. Ak súbor
 nejestvuje, vznikne výnimka. Ďalšie informácie sú v opise verzie
 tejto metódy prijímajúcej dva parametre: otvorNaČítanie.
Parametre:
názovSúboru – názov súboru, ktorý má byť otvorený na čítanie
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak je meno súboru zamlčané
     (null) alebo súbor nejestvuje
Pozri tiež:
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
otvorNaČítanie(String, String), 
zavri(), 
close()
otvorNaCitanie
public void otvorNaCitanie(String názovSúboru)
                    throws IOException
 Alias pre otvorNaČítanie.
Výnimky:
IOException
otvorNaČítanie
public void otvorNaČítanie(String názovSúboru,
                           String kódovanie)
                    throws IOException
Otvorí zadaný súbor na čítanie. Ak súbor nejestvuje, vznikne
 výnimka.
 
 Poznámky a upozornenia: Ak bol z projektu
 vytvorený .jar súbor (spustiteľný balíček), tak sa
 v prípade spustenia projektu cez tento súbor pokúsi metóda hľadať
 požadovaný súbor aj v .jar balíčku. Prednosť však majú
 súbory umiestnené mimo balíčka. So súbormi na zápis to neplatí –
 tie nie je možné zapisovať do .jar balíčkov.
  
 V súčasnej verzii rámca metóda hľadá súbory na čítanie aj v rámci
 zoznamu ciest classpath. To
 znamená, že súbor, ktorý ste prvý raz prečítali, nemusí byť tým
 istým súborom ako ten, do ktorého budete zapisovať. Na overenie
 prítomnosti súboru v aktuálnom umiestnení na zápis môžete použiť
 metódu jestvuje a na zistenie
 umiestnenia súboru na čítanie môžete použiť metódu
 kdeJeSúbor.
Parametre:
názovSúboru – názov súboru, ktorý má byť otvorený na čítanie
kódovanie – typ kódovania textového súboru
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak je meno súboru zamlčané
     (null) alebo súbor nejestvuje
Pozri tiež:
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
otvorNaČítanie(String), 
zavri(), 
close()
otvorNaCitanie
public void otvorNaCitanie(String názovSúboru,
                           String kódovanie)
                    throws IOException
 Alias pre otvorNaČítanie.
Výnimky:
IOException
zavri
public void zavri()
           throws IOException
Zavrie súbor, ktorý bol predtým otvorený na čítanie alebo zápis.
 
 Poznámka: Pozrite si aj informácie
 uvedené v opise metódy pripojArchív.
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
close()
close
public void close()
           throws IOException
Zavrie súbor, ktorý bol predtým otvorený na čítanie alebo zápis. Táto metóda je definovaná ako
 súčasť implementácie rozhrania Closeable.
 Vnútorne volá metódu zavri.
Definované:
close v rozhraní Closeable
Definované:
close v rozhraní AutoCloseable
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
Pozri tiež:
otvorNaZápis(String), 
otvorNaZápis(String, boolean), 
otvorNaZápis(String, String, boolean), 
otvorNaČítanie(String), 
otvorNaČítanie(String, String), 
zavri()
vlastnosťJestvuje
public boolean vlastnosťJestvuje(String názov)
                          throws IOException
Zistí, či je v súbore otvorenom na čítanie (vlastností)
 definovaná zadaná vlastnosť. Táto metóda slúži na rozlíšenie
 špeciálnych prípadov pri čítaní konfigurácie. Každá metóda slúžiaca
 na čítanie vlastností musí mať určenú predvolenú hodnotu, ktorá je
 použitá v prípade, že vlastnosť v súbore nejestvuje, avšak niekedy
 môže nedefinovaná vlastnosť určovať špeciálny prípad konfigurácie,
 ktorý je potrebné rozlíšiť.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
Návratová hodnota:
true alebo false podľa toho, či je
     vlastnosť súbore definovaná alebo nie
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
vlastnostJestvuje
public boolean vlastnostJestvuje(String názov)
                          throws IOException
 Alias pre vlastnosťJestvuje.
Výnimky:
IOException
vlastnosťExistuje
public boolean vlastnosťExistuje(String názov)
                          throws IOException
 Alias pre vlastnosťJestvuje.
Výnimky:
IOException
vlastnostExistuje
public boolean vlastnostExistuje(String názov)
                          throws IOException
 Alias pre vlastnosťJestvuje.
Výnimky:
IOException
čítajVlastnosť
public String čítajVlastnosť(String názov,
                             String predvolenáHodnota)
                      throws IOException
Číta hodnotu vlastnosti v tvare reťazca.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v objekte typu String
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public String citajVlastnost(String názov,
                             String predvolenáHodnota)
                      throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public StringBuffer čítajVlastnosť(String názov,
                                   StringBuffer predvolenáHodnota)
                            throws IOException
Číta hodnotu vlastnosti v tvare reťazca, pričom výsledok je
 vrátený v objekte typu StringBuffer.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v objekte typu StringBuffer
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public StringBuffer citajVlastnost(String názov,
                                   StringBuffer predvolenáHodnota)
                            throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Long čítajVlastnosť(String názov,
                           Long predvolenáHodnota)
                    throws IOException
Číta hodnotu vlastnosti v tvare celého čísla.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená alebo pri prevode textu na celé
     číslo nastala chyba
Návratová hodnota:
hodnota vlastnosti v objekte typu Long
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Long citajVlastnost(String názov,
                           Long predvolenáHodnota)
                    throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Integer čítajVlastnosť(String názov,
                              Integer predvolenáHodnota)
                       throws IOException
Číta hodnotu vlastnosti v tvare celého čísla.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
 
 Poznámka: Pred verziou 1.85 bolo
 hodnoty s údajovým typom int alebo Integer potrebné prevádzať z typu Long. Pre primitívny typ int to
 znamenalo použiť nasledujúci zápis:
     premenná = súbor.čítajVlastnosť("názovVlastnosti",
         (long)predvolenáHodnota).intValue();
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená alebo pri prevode textu na celé
     číslo nastala chyba
Návratová hodnota:
hodnota vlastnosti v objekte typu Integer
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Integer citajVlastnost(String názov,
                              Integer predvolenáHodnota)
                       throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Float čítajVlastnosť(String názov,
                            Float predvolenáHodnota)
                     throws IOException
Číta hodnotu vlastnosti v tvare reálneho čísla.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
 
 Poznámka: Pred verziou 1.85 bolo
 hodnoty s údajovým typom float alebo Float potrebné prevádzať z typu Double. Pre primitívny typ float to
 znamenalo použiť nasledujúci zápis:
     premenná = súbor.čítajVlastnosť("názovVlastnosti",
         (double)predvolenáHodnota).floatValue();
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená alebo pri prevode textu na
     reálne číslo nastala chyba
Návratová hodnota:
hodnota vlastnosti v objekte typu Float
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Float citajVlastnost(String názov,
                            Float predvolenáHodnota)
                     throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Double čítajVlastnosť(String názov,
                             Double predvolenáHodnota)
                      throws IOException
Číta hodnotu vlastnosti v tvare reálneho čísla.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená alebo pri prevode textu na
     reálne číslo nastala chyba
Návratová hodnota:
hodnota vlastnosti v objekte typu Double
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Double citajVlastnost(String názov,
                             Double predvolenáHodnota)
                      throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Boolean čítajVlastnosť(String názov,
                              Boolean predvolenáHodnota)
                       throws IOException
Číta hodnotu vlastnosti v tvare logickej hodnoty true
 / false.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v objekte typu Boolean
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Boolean citajVlastnost(String názov,
                              Boolean predvolenáHodnota)
                       throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public int[] čítajVlastnosť(String názov,
                            int[] predvolenáHodnota)
                     throws IOException
Číta hodnotu vlastnosti do celočíselného poľa typu int.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole, ktoré
     je kópiou tohto argumentu – čiže pole s rovnakou dĺžkou
     a rovnakými hodnotami jednotlivých prvkov; toto pole je
     vytvorené a vrátené v prípade, že vlastnosť s uvedeným názvom
     nebola v textovom súbore nájdená alebo je hodnota vlastnosti
     prázdna
Návratová hodnota:
nové pole prvkov typu int, ktoré obsahuje
     toľko prvkov, koľko celých čísiel sa z hodnoty vlastnosti
     podarilo úspešne previesť (proces prevodu textov na celé čísla
     sa zastavuje pri prvom neúspechu) alebo kópia poľa zadaného do
     predvolenej hodnoty
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public int[] citajVlastnost(String názov,
                            int[] predvolenáHodnota)
                     throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public float[] čítajVlastnosť(String názov,
                              float[] predvolenáHodnota)
                       throws IOException
Číta hodnotu vlastnosti do poľa reálnych čísel typu float.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole, ktoré
     je kópiou tohto argumentu – čiže pole s rovnakou dĺžkou
     a rovnakými hodnotami jednotlivých prvkov; toto pole je
     vytvorené a vrátené v prípade, že vlastnosť s uvedeným názvom
     nebola v textovom súbore nájdená alebo je hodnota vlastnosti
     prázdna
Návratová hodnota:
nové pole prvkov typu float, ktoré obsahuje
     toľko prvkov, koľko reálnych čísiel sa z hodnoty vlastnosti
     podarilo úspešne previesť (proces prevodu textov na reálne
     čísla sa zastavuje pri prvom neúspechu) alebo kópia poľa
     zadaného do predvolenej hodnoty
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public float[] citajVlastnost(String názov,
                              float[] predvolenáHodnota)
                       throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public long[] čítajVlastnosť(String názov,
                             long[] predvolenáHodnota)
                      throws IOException
Číta hodnotu vlastnosti do celočíselného poľa typu long.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole, ktoré
     je kópiou tohto argumentu – čiže pole s rovnakou dĺžkou
     a rovnakými hodnotami jednotlivých prvkov; toto pole je
     vytvorené a vrátené v prípade, že vlastnosť s uvedeným názvom
     nebola v textovom súbore nájdená alebo je hodnota vlastnosti
     prázdna
Návratová hodnota:
nové pole prvkov typu long, ktoré obsahuje
     toľko prvkov, koľko celých čísiel sa z hodnoty vlastnosti
     podarilo úspešne previesť (proces prevodu textov na celé čísla
     sa zastavuje pri prvom neúspechu) alebo kópia poľa zadaného do
     predvolenej hodnoty
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public long[] citajVlastnost(String názov,
                             long[] predvolenáHodnota)
                      throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public double[] čítajVlastnosť(String názov,
                               double[] predvolenáHodnota)
                        throws IOException
Číta hodnotu vlastnosti do poľa reálnych čísel typu double.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole, ktoré
     je kópiou tohto argumentu – čiže pole s rovnakou dĺžkou
     a rovnakými hodnotami jednotlivých prvkov; toto pole je
     vytvorené a vrátené v prípade, že vlastnosť s uvedeným názvom
     nebola v textovom súbore nájdená alebo je hodnota vlastnosti
     prázdna
Návratová hodnota:
nové pole prvkov typu double, ktoré obsahuje
     toľko prvkov, koľko reálnych čísiel sa z hodnoty vlastnosti
     podarilo úspešne previesť (proces prevodu textov na reálne
     čísla sa zastavuje pri prvom neúspechu) alebo kópia poľa
     zadaného do predvolenej hodnoty
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public double[] citajVlastnost(String názov,
                               double[] predvolenáHodnota)
                        throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public boolean[] čítajVlastnosť(String názov,
                                boolean[] predvolenáHodnota)
                         throws IOException
Číta hodnotu vlastnosti do poľa logických hodnôt typu boolean.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole, ktoré
     je kópiou tohto argumentu – čiže pole s rovnakou dĺžkou
     a rovnakými hodnotami jednotlivých prvkov; toto pole je
     vytvorené a vrátené v prípade, že vlastnosť s uvedeným názvom
     nebola v textovom súbore nájdená alebo je hodnota vlastnosti
     prázdna
Návratová hodnota:
nové pole prvkov typu boolean, ktoré obsahuje
     toľko prvkov, koľko logických hodnôt sa podarilo z vlastnosti
     úspešne prečítať alebo kópia poľa zadaného do predvolenej
     hodnoty
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public boolean[] citajVlastnost(String názov,
                                boolean[] predvolenáHodnota)
                         throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public char[] čítajVlastnosť(String názov,
                             char[] predvolenáHodnota)
                      throws IOException
Číta hodnotu vlastnosti do poľa znakov (char[]). Metóda vracia nové pole znakov, ktorého prvky tvoria všetky
 znaky získané z hodnoty tejto vlastnosti.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – pole, ktoré je použité na vytvorenie
     „predvolenej hodnoty,“ čo je v tomto prípade nové pole znakov,
     ktoré je kópiou tohto argumentu; toto pole je vytvorené
     a vrátené v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
nové pole znakov (char[]), ktoré
     tvoria hodnotu tejto vlastnosti, prípadne kópia poľa zadaného
     do predvolenej hodnoty (ak vlastnosť v otvorenom súbore
     nejestvuje)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public char[] citajVlastnost(String názov,
                             char[] predvolenáHodnota)
                      throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Bod čítajVlastnosť(String názov,
                          Poloha predvolenáHodnota)
                   throws IOException
Číta hodnotu vlastnosti ako objekt, ktorý je implementáciou
 rozhrania Poloha.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v implementácii rozhrania Poloha (konkrétne typ Bod)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Bod citajVlastnost(String názov,
                          Poloha predvolenáHodnota)
                   throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Point2D.Double čítajVlastnosť(String názov,
                                     Point2D predvolenáHodnota)
                              throws IOException
Číta hodnotu vlastnosti ako objekt, ktorý je odvodený od typu
 Point2D.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v implementácii rozhrania Point2D (konkrétne typ Point2D.Double)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Point2D.Double citajVlastnost(String názov,
                                     Point2D predvolenáHodnota)
                              throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Farba čítajVlastnosť(String názov,
                            Farebnosť predvolenáHodnota)
                     throws IOException
Číta hodnotu vlastnosti ako objekt, ktorý je implementáciou
 rozhrania Farebnosť.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v implementácii rozhrania Farebnosť (konkrétne typ Farba)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Farba citajVlastnost(String názov,
                            Farebnosť predvolenáHodnota)
                     throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
čítajVlastnosť
public Farba čítajVlastnosť(String názov,
                            Color predvolenáHodnota)
                     throws IOException
Číta hodnotu vlastnosti ako objekt, ktorý je odvodený od typu
 Color.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
predvolenáHodnota – predvolená hodnota vlastnosti, ktorá je
     vrátená v prípade, že vlastnosť s uvedeným názvom nebola
     v textovom súbore nájdená
Návratová hodnota:
hodnota vlastnosti v implementácii rozhrania Color (konkrétne typ Farba)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak názov vlastnosti nespĺňa niektorú
     požiadavku alebo súbor nie je otvorený na čítanie, prípadne
     súbor obsahuje chybu
citajVlastnost
public Farba citajVlastnost(String názov,
                            Color predvolenáHodnota)
                     throws IOException
 Alias pre čítajVlastnosť.
Výnimky:
IOException
zoznamVlastností
public Zoznam&lt;String&gt; zoznamVlastností()
                                throws IOException
Vráti zoznam vlastností definovaných v aktuálnej sekcii
 konfigurácie. (Pozri aj: aktívnaSekcia.)
 Všetky názvy sú vrátené v úplnom znení, to jest vrátane
 prípadných menných priestorov, do ktorých patria. (Pozri aj:
 mennýPriestorVlastností.)
 Zmeny vykonané vo vrátenom zozname nemajú žiadny vplyv na
 skutočné vlastnosti v rámci konfigurácie. Detekciu prípadných
 menných priestorov musí vykonať používateľ (rámca).
 
 Metóda identifikuje a v zozname vracia aj dva špeciálne
 prípady:
 
 
 komentáre: ako názov vlastnosti, ktorý sa začína znakom
 ";" (čo nie je povolené),
 a prázdne riadky: ako prázdny názov vlastnosti
 "" (čo tiež nie je povolené).
 
 
 Poznámka: Obsah komentárov nie je
 možné získať.
Návratová hodnota:
zoznam reťazcov označujúcich názvy vlastností v aktuálnej
     sekcii tohto konfiguračného súboru
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie,
     prípadne obsahuje chybu
Pozri tiež:
aktívnaSekcia(), 
zoznamSekcií(), 
mennýPriestorVlastností()
zoznamVlastnosti
public Zoznam&lt;String&gt; zoznamVlastnosti()
                                throws IOException
 Alias pre zoznamVlastností.
Výnimky:
IOException
zachovávaNepoužitéVlastnosti
public boolean zachovávaNepoužitéVlastnosti()
Zistí v akom režime sa nachádza táto inštancia triedy
 Súbor.
Návratová hodnota:
true – inštancia pri zápise zachováva nepoužité
     vlastnosti; false – inštancia odstraňuje nepoužité
     vlastnosti
Pozri tiež:
zachovajNepoužitéVlastnosti(), 
odstraňujNepoužitéVlastnosti(), 
vymažVlastnosť(String), 
zapíšVlastnosť(String, Object)
zachovavaNepouziteVlastnosti
public boolean zachovavaNepouziteVlastnosti()
 Alias pre zachovávaNepoužitéVlastnosti.
zachovajNepoužitéVlastnosti
public void zachovajNepoužitéVlastnosti()
Prepne inštanciu do režimu zachovávania nepoužitých vlastností.
 V súbore zostanú po zápise zachované aj tie vlastnosti, ktoré
 z neho boli pôvodne prečítané, ale neboli opätovne zapísané.
 Toto je predvolené správanie triedy Súbor.
Pozri tiež:
zachovávaNepoužitéVlastnosti(), 
odstraňujNepoužitéVlastnosti(), 
vymažVlastnosť(String), 
zapíšVlastnosť(String, Object)
zachovajNepouziteVlastnosti
public void zachovajNepouziteVlastnosti()
 Alias pre zachovajNepoužitéVlastnosti.
odstraňujNepoužitéVlastnosti
public void odstraňujNepoužitéVlastnosti()
Prepne inštanciu do režimu odstraňovania nepoužitých vlastností.
 Do súboru budú zapísané len tie vlastnosti, ktoré programátor
 prikázal zapísať.
 Zapisované vlastnosti, prázdne riadky a komentáre sa v súbore
 nemusia vyskytnúť v rovnakom poradí ako boli zapísané. Poradie
 zápisu vychádza z pôvodného poradia vlastností v čase čítania
 súboru.
 
 Poznámka: Ak by uvedené správanie niekomu
 z ľubovoľného dôvodu prekážalo, môže pred zápisom otvoriť a zavrieť
 súbor na čítanie, pretože v metóde otvorNaČítanie nastáva vyčistenie vnútornej pamäte vlastností.
 V takom prípade by v skutočnosti nebolo nevyhnutné použiť túto metódu
 (odstraňujNepoužitéVlastnosti), ktorej účelom je iba
 zariadiť to, aby sa do súboru zapísali len relevantné riadky
 v ľubovoľnom poradí.
 
 Poznámka: Odstraňovanie sa dotýka aj
 komentárov
 a prázdnych riadkov.
 Avšak, ak by bola rovnaká inštancia triedy Súbor
 použitá na zápis vlastností do viacerých súborov, zapisované
 vlastnosti by sa mohli premiešať, preto radšej nepoužívajte jednu
 inštanciu na zápis do viacerých súborov – pozri tiež poznámku pri
 metóde zapíšVlastnosť.
Pozri tiež:
zachovávaNepoužitéVlastnosti(), 
zachovajNepoužitéVlastnosti(), 
vymažVlastnosť(String), 
zapíšVlastnosť(String, Object)
odstranujNepouziteVlastnosti
public void odstranujNepouziteVlastnosti()
 Alias pre odstraňujNepoužitéVlastnosti.
vymažVlastnosti
public void vymažVlastnosti()
Vymaže všetky vlastnosti z vnútornej pamäte, ktoré mohli zostať
 zapamätané po poslednom čítaní súboru. Po prečítaní konfiguračného
 súboru musia všetky vlastnosti zostať zachované vo vnútornej
 pamäti, aby ich bolo možné obnoviť (to jest zapísať) pri zápise
 konfiguračného súboru na disk aj v prípade, že neboli pri procese
 zápisu použité (čiže ich hodnoty neboli aktualizované niektorou
 metódou na zápis vlastností). Táto metóda môže pri správnom použití
 zabrániť nežiadúcemu premiešaniu vlastností pri spracovaní
 viacerých súborov prostredníctvom tej istej inštancie triedy
 Súbor.
 
 Poznámka: Pozrite si aj upozornenie pri
 metóde zapíšVlastnosť.
vymažVlastnosť
public void vymažVlastnosť(String názov)
                    throws IOException
Odstráni zo súboru záznam o vlastnosti so zadaným menom. Použitie
 tejto metódy môže byť zbytočné v prípade, že je zapnuté
 odstraňovanie
 nepoužitých vlastností. Naopak, v prípade, že je odstraňovanie
 nepoužitých vlastností vypnuté, môžu byť prostredníctvom tejto
 metódy odstránené individuálne nepotrebné záznamy.
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na zápis alebo
     ak názov vlastnosti nespĺňa niektorú požiadavku
Pozri tiež:
zapíšVlastnosť(String, Object), 
zachovávaNepoužitéVlastnosti(), 
zachovajNepoužitéVlastnosti(), 
odstraňujNepoužitéVlastnosti()
vymazVlastnost
public void vymazVlastnost(String názov)
                    throws IOException
 Alias pre vymažVlastnosť.
Výnimky:
IOException
prekladajVlastnosti
public void prekladajVlastnosti(String[][] prekladyNázvov,
                                String[][] prekladyHodnôt)
Táto metóda zapne alebo vypne automatický preklad názvov a hodnôt
 vlastností tak, aby aj tie vlastnosti konfiguračných súborov, ktoré
 programovací rámec zapisuje automaticky, mohli byť v prípade potreby
 používané v cudzojazyčnom prostredí. Preklad funguje automaticky pri
 zápise a čítaní, takže v rámci programu treba používať pôvodné
 pomenovania a/alebo hodnoty vlastností, ale v konfiguračnom súbore
 budú uložené preložené pomenovania a/alebo hodnoty vlastností.
 
 Obidve polia (prekladyNázvov a prekladyHodnôt)
 sú dvojrozmerné reťazcové. Počet prvkov prvého rozmeru je ľubovoľný,
 určuje počet záznamov v slovníku. Počet prvkov druhého rozmeru je
 predpísaný a musí sa rovnať trom, inak bude záznam ignorovaný.
 Význam jednotlivých prvkov druhého rozmeru je nasledujúci:
 
 
 indexvýznam
 0zdrojový reťazec – používaný
 v rámci programovacieho rámca
 1cieľový reťazec – zapisovaný
 do súboru
 2spôsob vyhľadávania – "Z" –
 výskyt na začiatku reťazca, "K" – výskyt na konci reťazca,
 "S" – výskyt v ľubovoľnej časti reťazca, "P" –
 presná zhoda reťazca; pri inej hodnote je záznam ignorovaný
 
 
 Každé spustenie tejto metódy spôsobí úplné vymazanie všetkých
 vnútorných slovníkov. Chybné prvky, záznamy (napr. duplicitné)
 alebo polia sú ignorované. To znamená, že zadanie prázdneho poľa
 alebo hodnoty null má za následok vypnutie tej časti
 prekladu, ktorej pole je prázdne.
 
 Príklad:
 
 Nasledujúca ukážka zariadi preklad základných vlastností okna
 a slovných vyjadrení farieb do anglického jazyka.
 
 
Svet.konfiguračnýSúbor().prekladajVlastnosti(new String[][]{
    {"okno.", "window.", "Z"},
    {".šírka", ".width", "K"}, {".výška", ".height", "K"},
    {".maximalizované", ".maximized", "K"}, {".minimalizované", ".minimized", "K"}
}, new String[][]{
    {"žiadna", "none", "P"}, {"biela", "white", "P"},
    {"svetlošedá", "lightgray", "P"}, {"šedá", "gray", "P"},
    {"tmavošedá", "darkgray", "P"}, {"čierna", "black", "P"},
    {"svetločervená", "lightred", "P"}, {"červená", "red", "P"},
    {"tmavočervená", "darkred", "P"},
    {"svetlozelená", "lightgreen", "P"},
    {"zelená", "green", "P"}, {"tmavozelená", "darkgreen", "P"},
    {"svetlomodrá", "lightblue", "P"},
    {"modrá", "blue", "P"}, {"tmavomodrá", "darkblue", "P"},
    {"svetlotyrkysová", "lightcyan", "P"},
    {"tyrkysová", "cyan", "P"}, {"tmavotyrkysová", "darkcyan", "P"},
    {"svetlopurpurová", "lightmagenta", "P"},
    {"purpurová", "magenta", "P"},
    {"tmavopurpurová", "darkmagenta", "P"},
    {"svetložltá", "lightyellow", "P"}, {"žltá", "yellow", "P"},
    {"tmavožltá", "darkyellow", "P"},
    {"svetlohnedá", "lightbrown", "P"},
    {"hnedá", "brown", "P"}, {"tmavohnedá", "darkbrown", "P"},
    {"svetlooranžová", "lightorange", "P"},
    {"oranžová", "orange", "P"}, {"tmavooranžová", "darkorange", "P"},
    {"svetloružová", "lightpink", "P"},
    {"ružová", "pink", "P"}, {"tmavoružová", "darkpink", "P"},
    {"uhlíková", "coal", "P"}, {"antracitová", "anthracite", "P"},
    {"papierová", "paper", "P"}, {"snehová", "snow", "P"},
    {"tmavofialová", "darkpurple", "P"}, {"fialová", "purple", "P"},
    {"svetlofialová", "lightpurple", "P"},
    {"tmavoatramentová", "darkink", "P"}, {"atramentová", "ink", "P"},
    {"svetloatramentová", "lightink", "P"},
    {"tmavoakvamarínová", "darkaqua", "P"}, {"akvamarínová", "aqua", "P"},
    {"svetloakvamarínová", "lightaqua", "P"},
    {"tmaváNebeská", "darkceleste", "P"}, {"nebeská", "celeste", "P"},
    {"svetláNebeská", "lightceleste", "P"}
});
Parametre:
prekladyNázvov – pole záznamov k prekladom názvov vlastností
prekladyHodnôt – pole záznamov k prekladom hodnôt vlastností
zapíšVlastnosť
public void zapíšVlastnosť(String názov,
                           Object hodnota)
Zapíše vlastnosť podporovaného údajového typu. Ak zavoláme túto
 metódu opakovane s rovnakým názvom vlastnosti, tak nastane
 prepísanie hodnoty tej istej vlastnosti. (V prípade kolízií
 odporúčame použiť menný priestor.)
 
 Dôležité upozornenie na prípadnú
 kolíziu pri práci so súbormi obsahujúcimi vlastnosti! 
  
 Najskôr niekoľko faktov. Prostredie grafického robota
 umožňuje otvoriť viacero súborov naraz. (Za prvé každý robot
 smie pracovať s vlastným súborom, za druhé programátor smie
 vytvárať vlastné inštancie typu Súbor.) Metóda
 otvorNaZápis okamžite po svojom
 úspešnom vykonaní kompletne vymaže celý obsah otváraného súboru
 bez ohľadu na to, čo obsahoval. Ak bol súbor otvorený na čítanie
 a použijeme ľubovoľnú z metód slúžiacich na čítanie vlastností,
 okamžite sa do inštancie súboru prečíta a spracuje celý obsah
 súboru predpokladajúc, že obsahuje údaje o vlastnostiach.
 Spracované údaje zostávajú v pamäti (v inštancii súboru) aj po
 zavretí súboru a sú opätovne použité pri zápise vlastností…
 Kolíziám a premiešavaniu obsahu rôznych súborov spracúvaných
 jednou inštanciou by sa za určitých okolností dalo zabrániť včasným
 zapnutím režimu
 nepoužitých vlastností (ktorý sa dotýka aj komentárov a prázdnych riadkov). Kolíziám
 spôsobeným spracovaním jedného súboru rôznymi inštanciami triedy
 Súbor sa zabrániť nedá. 
  
 Aby ste sa vyhli prípadným problémom, používajte vždy na prácu
 s jedným súborom vlastností tú istú inštanciu triedy Súbor (buď inštanciu súboru v niektorom
 z robotov, alebo vlastnú vytvorenú inštanciu). 
  
 K dispozícii je aj metóda vymažVlastnosti,
 ktorú je možné použiť pred každým čítaním vlastností zo súboru a tým
 zabrániť nežiadúcim kolíziám.
Parametre:
názov – názov vlastnosti; nesmie byť prázdny ani obsahovať
     nepovolené znaky (bodku, hranatú zátvorku alebo rovná sa)
hodnota – hodnota vlastnosti podporovaných údajových typov,
     čo sú jednorozmerné polia primitívnych údajových typov a všetky
     objekty vyjadriteľné v textovej podobe; v súčasnej verzii rámca
     táto metóda špeciálne zaobchádza s objektmi farieb a polôh –
     používa prislúchajúce metódy prevodu dostupné v rámci
     programovacieho rámca; v súvislosti s tým je definovaná aj
     prislúchajúca skupina metód slúžiaca na čítanie polôh a farieb
Výnimky:
GRobotException – ak súbor nie je otvorený na zápis alebo
     ak názov vlastnosti nespĺňa niektorú požiadavku
Pozri tiež:
vymažVlastnosť(String), 
zapíšKomentárVlastností(String), 
zapíšPrázdnyRiadokVlastností(), 
zachovávaNepoužitéVlastnosti(), 
zachovajNepoužitéVlastnosti(), 
odstraňujNepoužitéVlastnosti()
zapisVlastnost
public void zapisVlastnost(String názov,
                           Object hodnota)
 Alias pre zapíšVlastnosť.
zapíšKomentárVlastností
public void zapíšKomentárVlastností(String komentár)
Dovoľuje vkladať do textových súborov vlastností jednoriadkové
 komentáre. Ak s textovým súborom nebolo manipulované zvonka
 aplikácie a nebolo v ňom zmenené poradie zapísaných vlastností,
 nemali by sa v ňom vyskytnúť nežiaduce kópie komentárov.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Parametre:
komentár – text komentára
Pozri tiež:
zapíšVlastnosť(String, Object), 
zapíšPrázdnyRiadokVlastností()
zapisKomentarVlastnosti
public void zapisKomentarVlastnosti(String komentár)
 Alias pre zapíšKomentárVlastností.
zapíšPrázdnyRiadokVlastností
public void zapíšPrázdnyRiadokVlastností()
Dovoľuje vkladať do textových súborov vlastností prázdne riadky
 slúžiace ako oddeľovače. Ak s textovým súborom nebolo
 manipulované zvonka aplikácie a nebolo v ňom zmenené poradie
 zapísaných vlastností, nemali by sa v ňom vyskytnúť nežiaduce
 kópie prázdnych riadkov.
 
 Poznámka: Prosím, venujte pozornosť
 upozorneniu pri metóde zapíšVlastnosť!
Pozri tiež:
zapíšVlastnosť(String, Object), 
zapíšKomentárVlastností(String)
zapisPrazdnyRiadokVlastnosti
public void zapisPrazdnyRiadokVlastnosti()
 Alias pre zapíšPrázdnyRiadokVlastností.
koniecRiadka
public boolean koniecRiadka()
                     throws IOException
Overí, či sa prúd údajov čítaný zo súboru momentálne nachádza na
 konci riadka. Súbor musí byť otvorený na čítanie.
Návratová hodnota:
ak je aktuálna poloha čítania práve na konci riadka, tak
     táto metóda vráti true, inak false
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
koniecSúboru
public boolean koniecSúboru()
                     throws IOException
Overí, či sa prúd údajov čítaný zo súboru skončil. Súbor musí byť
 otvorený na čítanie.
Návratová hodnota:
ak už nie sú v súbore otvorenom na čítanie k dispozícii
     žiadne údaje, tak táto metóda vráti true, inak
     false
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
koniecSuboru
public boolean koniecSuboru()
                     throws IOException
 Alias pre koniecSúboru.
Výnimky:
IOException
čítajRiadok
public String čítajRiadok()
                   throws IOException
Prečíta zo súboru otvoreného na čítanie riadok textu a vráti ho
 v objekte typu String.
Návratová hodnota:
prečítaný riadok textu
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
citajRiadok
public String citajRiadok()
                   throws IOException
 Alias pre čítajRiadok.
Výnimky:
IOException
dočítajRiadok
public String dočítajRiadok()
                     throws IOException
Umožňuje dočítať zo súboru otvoreného na čítanie aktuálne
 spracúvaný riadok textu. Ak vo vnútornom zásobníku súboru jestvujú
 zvyškové údaje z naposledy spracúvaného riadka, tak sú vrátené
 v objekte typu String a následne sú
 vymazané z vnútorného zásobníka súboru. Inak je vrátený prázdny
 reťazec. To znamená, že spracovanie ďalšieho riadka sa nezačne ako
 tomu je pri volaní metódy čítajRiadok.
Návratová hodnota:
zvyškové údaje z aktuálne spracúvaného riadka textu alebo
     prázdny reťazec
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
docitajRiadok
public String docitajRiadok()
                     throws IOException
 Alias pre dočítajRiadok.
Výnimky:
IOException
čítajZnak
public Character čítajZnak()
                    throws IOException
Prečíta zo súboru otvoreného na nasledujúci znak a vráti jeho
 hodnotu. Znaky nových riadkov sú touto metódou ignorované. Ak
 metóda dosiahne koniec súboru, vráti hodnotu null.
Návratová hodnota:
prečítaný znak v objekte typu Character alebo null
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
citajZnak
public Character citajZnak()
                    throws IOException
 Alias pre čítajZnak.
Výnimky:
IOException
čítajCeléČíslo
public Long čítajCeléČíslo()
                    throws IOException
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na celé číslo…
Návratová hodnota:
výsledok v objekte typu Long ak je
     prečítaný text možné previesť na celé číslo alebo null v prípade zlyhania
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
citajCeleCislo
public Long citajCeleCislo()
                    throws IOException
 Alias pre čítajCeléČíslo.
Výnimky:
IOException
čítajReálneČíslo
public Double čítajReálneČíslo()
                        throws IOException
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na reálne číslo…
Návratová hodnota:
výsledok v objekte typu Double ak je prečítaný text možné previesť na rálne
     číslo alebo null v prípade zlyhania
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
citajRealneCislo
public Double citajRealneCislo()
                        throws IOException
 Alias pre čítajReálneČíslo.
Výnimky:
IOException
čítajBoolean
public Boolean čítajBoolean()
                     throws IOException
Prečíta zo súboru otvoreného na čítanie text od aktuálnej polohy
 v súbore po najbližšiu medzeru alebo koniec riadka a pokúsi sa ho
 previesť na objekt typu Boolean
 obsahujúci pravdivostnú hodnotu true/&#8203;false. Platí, že ak bol nájdený text „true“ bez
 ohľadu na veľkosť písmen, bude hodnota objektu true,
 inak false.
Návratová hodnota:
výsledok v objekte typu Boolean alebo null v prípade zlyhania
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
citajBoolean
public Boolean citajBoolean()
                     throws IOException
 Alias pre čítajBoolean.
Výnimky:
IOException
čítaj
public int čítaj(Object... objekty)
          throws IOException
Pokúsi sa prečítať zo súboru otvoreného na čítanie toľko textu,
 koľko je potrebné na naplnenie zadaného počtu objektov, pričom
 objem prečítaného textu je závislý od typu objektu. Sú povolené
 len niektoré údajové typy:
 
 
 StringBuffer – prečíta riadok
 textu;
 int[], long[] – prečíta
 toľko celých čísel, koľko prvkov má pole;
 float[], double[] –
 prečíta toľko reálnych čísel, koľko prvkov má pole;
 boolean[] – prečíta toľko pravdivostných
 hodnôt, koľko prvkov má pole;
 char[] – prečíta toľko znakov, koľko prvkov
 má pole.
 
 
 Ak metóda prijme nepovolený údajový typ, vrhne výnimku
 GRobotException s jazykovým
 identifikátorom unsupportedDataType.
Parametre:
objekty – variabilný zoznam parametrov s povolenými údajovými
     typmi – pozri zoznam vyššie
Návratová hodnota:
počet údajových jednotiek, ktorými sa podarilo naplniť
     zadané objekty; návratová hodnota je sumárna a je silno
     závislá od údajových typov objektov, ktoré boli zadané do
     variabilného zoznamu parametrov metódy; napríklad objekt poľa
     typu int prispeje do súčtu počtom textových
     blokov (oddelených medzerami a nasledujúcich v súbore za
     sebou, hoci na viacerých riadkoch), ktoré sa podarilo úspešne
     previesť na celé čísla a zapísať do prvkov poľa, objekt
     poľa typu char prispeje do súčtu počtom znakov,
     ktoré sa podarilo zapísať do prvkov poľa (znaky nových riadkov
     sú ignorované), objekt typu StringBuffer prispeje dĺžkou prečítaného riadka a podobne;
     ak potrebujete jednotlivé hodnoty odlíšiť, tak vykonajte
     viacero samostatných volaní tejto metódy vždy s jedným
     parametrom
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na čítanie
     alebo metóda prijala argument nepodporovaného údajového typu
     (čím sa spracovanie automaticky ukončí)
citaj
public void citaj(Object... objekty)
           throws IOException
 Alias pre čítaj.
Výnimky:
IOException
zapíšReťazec
public void zapíšReťazec(String text)
                  throws IOException
Zapíše do súboru otvoreného na zápis určený reťazec.
Parametre:
text – text, ktorý má byť zapísaný do súboru otvoreného na
     zápis
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na zápis
zapisRetazec
public void zapisRetazec(String text)
                  throws IOException
 Alias pre zapíšReťazec.
Výnimky:
IOException
zapíšRiadok
public void zapíšRiadok(String text)
                 throws IOException
Zapíše do súboru otvoreného na zápis riadok textu.
 
 Poznámka: Metóda používa na ukončenie
 riadka sekvenciu návrat vozíka ('\r') a koniec riadka
 ('\n'), čo je bežný spôsob ukončovania riadkov
 v textových súboroch OS Windows. Ak chcete na ukončovanie využívať
 inú sekvenciu, použite metódu zapíš
 a uveďte želanú sekvenciu ako posledný parameter.
Parametre:
text – text, ktorý má byť zapísaný do samostatného riadka
     súboru otvoreného na zápis
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na zápis
zapisRiadok
public void zapisRiadok(String text)
                 throws IOException
 Alias pre zapíšRiadok.
Výnimky:
IOException
zapíšRiadok
public void zapíšRiadok()
                 throws IOException
Zapíše do súboru otvoreného na zápis prázdny riadok.
 
 Poznámka: Metóda používa na ukončenie
 riadka sekvenciu návrat vozíka ('\r') a koniec riadka
 ('\n'), čo je bežný spôsob ukončovania riadkov
 v textových súboroch OS Windows. Ak chcete na ukončovanie využívať
 inú sekvenciu, použite metódu zapíš
 a uveďte želanú sekvenciu ako posledný parameter.
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
GRobotException – ak súbor nie je otvorený na zápis
zapisRiadok
public void zapisRiadok()
                 throws IOException
 Alias pre zapíšRiadok.
Výnimky:
IOException
zapíš
public void zapíš(Object... objekty)
           throws IOException
Zapíše do súboru otvoreného na zápis textovú podobu zoznamu
 objektov rôzneho údajového typu (napríklad celé čísla int budú zapísané ako séria číslic – čísla vo forme textu).
 Táto metóda automaticky oddeľuje číselné argumenty medzerami
 (resp. argumenty, ktoré nie sú priamo objektami typu String ani StringBuffer), čo je výhodné pri čítaní údajov zo súboru.
Parametre:
objekty – séria objektov rôzneho údajového typu; objekt musí
     byť vyjadriteľný v textovej podobe
Výnimky:
IOException – ak vznikla chyba vo vstupno-výstupnej
     operácii
zapis
public void zapis(Object... objekty)
           throws IOException
 Alias pre zapíš.
Výnimky:
IOException
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie Svet.PríkazovýRiadok.PresmerovanieVýstupu
Nadradená trieda:
Svet.PríkazovýRiadok
public static interface Svet.PríkazovýRiadok.PresmerovanieVýstupu
Toto rozhranie slúži na presmerovanie výstupov a denníkov
 inštancií príkazového riadka. Princíp je jednoduchý, len čo
 je do niektorého z atribútov vyčistenie, ladenie, denník, denníkChýb, chybovýVýstup alebo výstupProcesu vložená
 implementácia tohto rozhrania (dá sa použiť aj funkcionálna
 syntax, keďže rozhranie má jedinú metódu), tak je výstup
 súvisiacej metódy (alebo metód; pozri tabuľku nižšie)
 presmerovaný do metódy spracuj
 implementovaného rozhrania a to v nasledujúcom tvare:
 
 
 Metóda súvisiaca s presmerovaním výstupu
 Tvar volania metódy spracuj
 
 clearDebug
 vyčistenie.spracuj(0,
 názovVolajúcejMetódy);
 
 clearLog
 vyčistenie.spracuj(1,
 názovVolajúcejMetódy);
 
 clearErr
 vyčistenie.spracuj(2,
 názovVolajúcejMetódy);
 
 clearError
 vyčistenie.spracuj(3);
 
 clearOutput
 vyčistenie.spracuj(4);
 
 debug
 ladenie.spracuj(texty);
 
 log
 denník.spracuj(texty);
 
 err
 denníkChýb.spracuj(texty);
 
 error
 chybovýVýstup.spracuj(texty);
 
 output
 výstupProcesu.spracuj(texty);
 
 
 Príklad:
 
 
final StringBuffer out = new StringBuffer();
Svet.príkazovýRiadok.výstupProcesu = (obj) -&gt;
    {
        for (Object o : obj)
        {
            System.out.print(o.toString());
            out.append(o.toString());
        }
    };
 
 Upozornenie: Spracovanie
 presmerovania musí byť dostatočne rýchle, inak môže nastávať
 „strácanie sa“ údajov z toku v dôsledku preplnenia
 zásobníkov.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
void
spracuj(Object... texty)
Podrobnosti metód
spracuj
void spracuj(Object... texty)
Parametre:
texty – séria parameterov závislá od kontextu
     presmerovania (pozri hlavný opis triedy)
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Svet.PríkazovýRiadok
java.lang.Object
podpora.ExecuteShellCommand
Svet.PríkazovýRiadok
Známe priame odvodené triedy:
Svet.PrikazovyRiadok
Nadradená trieda:
Svet
public static class Svet.PríkazovýRiadok
extends knižnica.podpora.ExecuteShellCommand
Hlavná časť implementácie jednoduchého príkazového riadka
 operačného systému. Dovoľuje spravovať jeden spustený proces.
 Verejné atribúty tejto triedy a vnútorné rozhranie na
 presmerovanie výstupov nemajú z dôvodu výrazného zjednodušenia
 celej implementácie definované aliasy bez diakritiky.
 
 Príklad – grafická konzola:
 
 
 
 
Zobraziť
 dlhšiu verziu (s alternatívnou implementáciou ovládania konzoly
 v komentároch).
 
 
import knižnica.*;
import java.io.IOException;
public class GrafickáKonzola extends GRobot
{
    // Súčasť implementácie ukončenia spusteného procesu klávesovou
    // skratkou.
    private final static String kill = "kill";
    // Príznak aktivovania vnútorného príkazu pause.
    private boolean pause = false;
    // Konštruktor.
    private GrafickáKonzola()
    {
        skry();
        Svet.skratkyStropu(true);
        Svet.neskrývajVstupnýRiadok(true);
        Svet.príkazovýRiadok.output(Svet.príkazovýRiadok.getVersion());
        strop.automatickéZobrazovanieLíšt(true);
        strop.písmo("Consolas", 14);
        // Súčasť implementácie ukončenia spusteného procesu klávesovou
        // skratkou.
        Svet.pridajKlávesovúSkratku(kill, Kláves.VK_D);
    }
    // Súčasť implementácie ukončenia spusteného procesu klávesovou
    // skratkou. (Metóda je zároveň využitá v reakcii na ukončenie
    // aplikácie.)
    private void killProcess()
    {
        Process proces = Svet.príkazovýRiadok.getRunningProcess();
        if (null != proces)
            proces.destroy();
    }
    @Override public void klávesováSkratka()
    {
        String skratka = ÚdajeUdalostí.príkazSkratky();
        // Súčasť implementácie ukončenia spusteného procesu klávesovou
        // skratkou.
        if (skratka == kill) killProcess();
    }
    // Využitie vstupného riadka na vstup príkazového riadka.
    @Override public void potvrdenieVstupu()
    {
        if (pause)
        {
            pause = false;
            return;
        }
        String príkaz = Svet.prevezmiReťazec();
        if (!Svet.príkazovýRiadok.isProcessRunning())
        {
            Svet.príkazovýRiadok.output(Svet.príkazovýRiadok.expandPrompt());
            Svet.príkazovýRiadok.output(príkaz);
            if (príkaz.isEmpty()) return;
            // Prekrytie dvoch predvolene deaktivovaných príkazov:
            int[] zhoda = Svet.PríkazovýRiadok.matchCommand(
                príkaz, "pause", "exit");
            // Poznámka: Na to, aby niektoré príkazy fungovali rovnako ako
            //     v systémovej konzole, by musela byť na tomto mieste
            //     vykonaná dodatočná implementácia. Súvisí to najmä
            //     s príkazom na zmenu priečinka (cd/chdir). V príkazovom
            //     riadku Windows sa zvyknú používať tieto skrátené formy
            //     príkazu:
            // 
            //     cd\   chdir\
            // 
            //     (Podobne ako v iných OS tvary: cd/ a chdir/)
            // 
            //     Znamenajú prechod do koreňového priečinka aktuálnej
            //     jednotky. Tieto skrátené tvary nie sú spracované. Okrem
            //     tohto faktu samotný symbol \ alebo / nemá v tejto
            //     konzole význam koreňového priečinka. Implementácia
            //     metódy ExecuteShellCommand.changePath sa správa inak:
            //       1. prevezme zadaný reťazec,
            //       2. identifikuje, či ide o relatívnu alebo absolútnu
            //          cestu
            //       3. a podľa toho nastaví novú aktuálnu cestu.
            //     Samotné znaky \ a / nenesú informáciu o zmene
            //     priečinka, takže sú v podstate ignorované.
            // 
            //     Ďalšia odlišnosť je správanie sa príkazu cd/chdir
            //     bez parametrov. V súlade s opisom fungovania metódy
            //     ExecuteShellCommand.changePath spôsobí potvrdenie
            //     tohto príkazu návrat do aktuálneho štartovacieho
            //     priečinka virtuálneho stroja javy (JVM), to jest,
            //     cesta, na ktorej bola spustená aktuálna aplikácia
            //     (nemusí sa nevyhnutne zhodovať s cestou, na ktorej
            //     je aplikácia umiestnená).
            if (null != zhoda && 3 != zhoda[0])
            {
                String argumenty = príkaz.substring(zhoda[2]);
                switch (zhoda[1])
                {
                case 0: // pause
                    if (argumenty.isEmpty())
                        Svet.príkazovýRiadok.outputLine(riadok,
                            "Potvrďte ďalší príkazový riadok.");
                    else
                        Svet.príkazovýRiadok.outputLine(riadok,
                            Svet.príkazovýRiadok.expandVariables(argumenty));
                    pause = true;
                    return;
                case 1: // exit
                    Svet.koniec();
                    // (Prípadne by sa dala použiť metóda Svet.zavrieť.)
                    return;
                }
            }
        }
        Svet.príkazovýRiadok.updateTitle();
        Svet.spracujPríkaz(príkaz);
        Svet.príkazovýRiadok.updateTitle();
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public boolean konfiguráciaZmenená()
    {
        if (null == Svet.príkazovýRiadok) return false;
        return Svet.príkazovýRiadok.konfiguráciaZmenená;
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public void zapíšKonfiguráciu(Súbor súbor) throws IOException
    {
        if (null == Svet.príkazovýRiadok) return;
        // Pozor‼ V čase zápisu konfigurácie by vlastnosti nastavení
        // príkazového riadka mali byť pre istotu zapísané bez ohľadu
        // na hodnotu príznaku „Svet.príkazovýRiadok.konfiguráciaZmenená.“
        // Nemáme istotu, že inštancia konfiguračného súboru nemá nastavenú
        // vlastnosť „odstraňujNepoužitéVlastnosti.“
        Svet.príkazovýRiadok.zapíšKonfiguráciu(súbor);
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public void čítajKonfiguráciu(Súbor súbor) throws IOException
    {
        if (null == Svet.príkazovýRiadok) return;
        Svet.príkazovýRiadok.čítajKonfiguráciu(súbor);
    }
    // (Prekresľovanie s pomocou časovača, aby bola činnosť
    // konzoly svižnejšia.)
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
            Svet.prekresli();
    }
    // Ukončenie.
    @Override public void ukončenie()
    {
        // Ak je náhodou spustený vnorený (detský) proces, nezostáva iné
        // riešenie ako ho ukončiť:
        killProcess();
    }
    // Hlavná (vstupná) metóda.
    public static void main(String[] args)
    {
        Svet.režimLadenia(true);
        Svet.skry();
        Svet.nekresli();
        Svet.aktivujHistóriuVstupnéhoRiadka();
        Svet.uchovajHistóriuVstupnéhoRiadka();
        Svet.použiKonfiguráciu("GrafickáKonzola.cfg");
        new GrafickáKonzola();
        Svet.spustiČasovač();
        Svet.zobraz();
    }
}
 
 
 
 
 
Zobraziť
 kratšiu verziu (bez komentárov obsahujúcich alternatívnu
 implementáciu ovládania konzoly).
 
 
import knižnica.*;
import java.io.IOException;
public class GrafickáKonzola extends GRobot
{
    // Súčasť alternatívnej implementácie rolovania a posúvania textov
    // vnútornej konzoly stropu s pomocou klávesnice.
    // 
    // Poznámka: Nahradené príkazom Svet.skratkyStropu(true);
    // 
    /*private final static String home = "home";
    private final static String end  = "end";
    private final static String hore = "hore";
    private final static String dole = "dole";
    private final static String pgUp = "pgUp";
    private final static String pgDn = "pgDn";&#42;/
    // Súčasť implementácie ukončenia spusteného procesu klávesovou
    // skratkou.
    private final static String kill = "kill";
    // Súčasť alternatívnej implementácie označovania a kopírovania
    // textov stropu.
    // 
    // Poznámka: Nahradené príkazom Svet.skratkyStropu(true);
    // 
    /*private final static String dAll1 = "dAll1";
    private final static String dAll2 = "dAll2";
    private final static String sAll = "sAll";
    private final static String copy = "copy";&#42;/
    // Príznak aktivovania vnútorného príkazu pause.
    private boolean pause = false;
    // Konštruktor.
    private GrafickáKonzola()
    {
        skry();
        Svet.skratkyStropu(true);
        Svet.neskrývajVstupnýRiadok(true);
        Svet.príkazovýRiadok.output(Svet.príkazovýRiadok.getVersion());
        strop.automatickéZobrazovanieLíšt(true);
        strop.písmo("Consolas", 14);
        // Súčasť alternatívnej implementácie rolovania a posúvania textov
        // vnútornej konzoly stropu s pomocou klávesnice.
        /*Svet.pridajKlávesovúSkratku(home, Kláves.HOME);
        Svet.pridajKlávesovúSkratku(end,  Kláves.END);
        Svet.pridajKlávesovúSkratku(hore, Kláves.HORE);
        Svet.pridajKlávesovúSkratku(dole, Kláves.DOLE);
        Svet.pridajKlávesovúSkratku(pgUp, Kláves.PAGE_UP, 0); // bez ctrl…
        Svet.pridajKlávesovúSkratku(pgDn, Kláves.PAGE_DOWN, 0);&#42;/
        // Súčasť implementácie ukončenia spusteného procesu klávesovou
        // skratkou.
        Svet.pridajKlávesovúSkratku(kill, Kláves.VK_D);
        // Súčasť alternatívnej implementácie označovania a kopírovania
        // textov stropu.
        /*Svet.pridajKlávesovúSkratku(dAll1, Kláves.VK_A,
        	Kláves.SKRATKA_PONUKY | Kláves.SHIFT_MASK);
        Svet.pridajKlávesovúSkratku(dAll2, Kláves.ESCAPE, 0, false);
        Svet.pridajKlávesovúSkratku(sAll, Kláves.VK_A,
        	Kláves.SKRATKA_PONUKY, false);
        Svet.pridajKlávesovúSkratku(copy, Kláves.VK_C,
        	Kláves.SKRATKA_PONUKY, false);&#42;/
    }
    // Súčasť implementácie ukončenia spusteného procesu klávesovou
    // skratkou. (Metóda je zároveň využitá v reakcii na ukončenie
    // aplikácie.)
    private void killProcess()
    {
        Process proces = Svet.príkazovýRiadok.getRunningProcess();
        if (null != proces)
            proces.destroy();
    }
    @Override public void klávesováSkratka()
    {
        String skratka = ÚdajeUdalostí.príkazSkratky();
        // Súčasť alternatívnej implementácie rolovania a posúvania textov
        // vnútornej konzoly stropu s pomocou klávesnice.
        /*if (skratka == home) strop.posunutieTextov(
        	strop.posunutieTextovX(), strop.poslednáVýškaTextu());
        else if (skratka == end)
        	strop.posunutieTextov(strop.posunutieTextovX(), 0);
        else if (skratka == hore)
        	strop.rolujTexty(0, strop.výškaRiadka());
        else if (skratka == dole)
        	strop.rolujTexty(0, -strop.výškaRiadka());
        else if (skratka == pgUp)
        	strop.rolujTexty(0, Plátno.viditeľnáVýška() – 10);
        else if (skratka == pgDn)
        	strop.rolujTexty(0, 10 – Plátno.viditeľnáVýška());&#42;/
        // Súčasť implementácie ukončenia spusteného procesu klávesovou
        // skratkou.
        /*else &#42;/if (skratka == kill) killProcess();
        // Súčasť alternatívnej implementácie označovania a kopírovania
        // textov stropu.
        /*else if (skratka == dAll1 || skratka == dAll2)
        	strop.zrušOznačenieTextov();
        else if (skratka == sAll) strop.označVšetkyTexty();
        else if (skratka == copy) strop.textyDoSchránky(true);&#42;/
    }
    // Využitie vstupného riadka na vstup príkazového riadka.
    @Override public void potvrdenieVstupu()
    {
        if (pause)
        {
            pause = false;
            return;
        }
        String príkaz = Svet.prevezmiReťazec();
        if (!Svet.príkazovýRiadok.isProcessRunning())
        {
            Svet.príkazovýRiadok.output(Svet.príkazovýRiadok.expandPrompt());
            Svet.príkazovýRiadok.output(príkaz);
            if (príkaz.isEmpty()) return;
            // Prekrytie dvoch predvolene deaktivovaných príkazov:
            int[] zhoda = Svet.PríkazovýRiadok.matchCommand(
                príkaz, "pause", "exit");
            // Poznámka: Na to, aby niektoré príkazy fungovali rovnako ako
            //     v systémovej konzole, by musela byť na tomto mieste
            //     vykonaná dodatočná implementácia. Súvisí to najmä
            //     s príkazom na zmenu priečinka (cd/chdir). V príkazovom
            //     riadku Windows sa zvyknú používať tieto skrátené formy
            //     príkazu:
            // 
            //     cd\   chdir\
            // 
            //     (Podobne ako v iných OS tvary: cd/ a chdir/)
            // 
            //     Znamenajú prechod do koreňového priečinka aktuálnej
            //     jednotky. Tieto skrátené tvary nie sú spracované. Okrem
            //     tohto faktu samotný symbol \ alebo / nemá v tejto
            //     konzole význam koreňového priečinka. Implementácia
            //     metódy ExecuteShellCommand.changePath sa správa inak:
            //       1. prevezme zadaný reťazec,
            //       2. identifikuje, či ide o relatívnu alebo absolútnu
            //          cestu
            //       3. a podľa toho nastaví novú aktuálnu cestu.
            //     Samotné znaky \ a / nenesú informáciu o zmene
            //     priečinka, takže sú v podstate ignorované.
            // 
            //     Ďalšia odlišnosť je správanie sa príkazu cd/chdir
            //     bez parametrov. V súlade s opisom fungovania metódy
            //     ExecuteShellCommand.changePath spôsobí potvrdenie
            //     tohto príkazu návrat do aktuálneho štartovacieho
            //     priečinka virtuálneho stroja javy (JVM), to jest,
            //     cesta, na ktorej bola spustená aktuálna aplikácia
            //     (nemusí sa nevyhnutne zhodovať s cestou, na ktorej
            //     je aplikácia umiestnená).
            if (null != zhoda && 3 != zhoda[0])
            {
                String argumenty = príkaz.substring(zhoda[2]);
                switch (zhoda[1])
                {
                case 0: // pause
                    if (argumenty.isEmpty())
                        Svet.príkazovýRiadok.outputLine(riadok,
                            "Potvrďte ďalší príkazový riadok.");
                    else
                        Svet.príkazovýRiadok.outputLine(riadok,
                            Svet.príkazovýRiadok.expandVariables(argumenty));
                    pause = true;
                    return;
                case 1: // exit
                    Svet.koniec();
                    // (Prípadne by sa dala použiť metóda Svet.zavrieť.)
                    return;
                }
            }
        }
        Svet.príkazovýRiadok.updateTitle();
        Svet.spracujPríkaz(príkaz);
        Svet.príkazovýRiadok.updateTitle();
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public boolean konfiguráciaZmenená()
    {
        if (null == Svet.príkazovýRiadok) return false;
        return Svet.príkazovýRiadok.konfiguráciaZmenená;
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public void zapíšKonfiguráciu(Súbor súbor) throws IOException
    {
        if (null == Svet.príkazovýRiadok) return;
        // Pozor‼ V čase zápisu konfigurácie by vlastnosti nastavení
        // príkazového riadka mali byť pre istotu zapísané bez ohľadu
        // na hodnotu príznaku „Svet.príkazovýRiadok.konfiguráciaZmenená.“
        // Nemáme istotu, že inštancia konfiguračného súboru nemá nastavenú
        // vlastnosť „odstraňujNepoužitéVlastnosti.“
        Svet.príkazovýRiadok.zapíšKonfiguráciu(súbor);
    }
    // Súčasť ukladania a čítania konfigurácie príkazového riadka.
    @Override public void čítajKonfiguráciu(Súbor súbor) throws IOException
    {
        if (null == Svet.príkazovýRiadok) return;
        Svet.príkazovýRiadok.čítajKonfiguráciu(súbor);
    }
    // Súčasť alternatívnej implementácie označovania a kopírovania
    // textov stropu.
    /*private int počiatočnýRiadok, koncovýRiadok,
    	počiatočnýBlok, koncovýBlok;&#42;/
    // Súčasť alternatívnej implementácie označovania a kopírovania
    // textov stropu.
    /*@Override public void stlačenieTlačidlaMyši()
    &#123;
    	if (ÚdajeUdalostí.tlačidloMyši(PRAVÉ))
    	&#123;
    		strop.textyDoSchránky(true);
    		strop.zrušOznačenieTextov();
    		Svet.pípni();
    	&#125;
    	else
    	&#123;
    		if (!ÚdajeUdalostí.myš().isControlDown())
    			strop.zrušOznačenieTextov();
    		int[] výpis = strop.výpisPriMyši();
    		if (null != výpis)
    		&#123;
    			počiatočnýRiadok = koncovýRiadok = výpis[0];
    			počiatočnýBlok   = koncovýBlok   = výpis[1];
    		&#125;
    	&#125;
    &#125;&#42;/
    // Súčasť alternatívnej implementácie označovania a kopírovania
    // textov stropu.
    /*@Override public void ťahanieMyšou()
    &#123;
    	int[] výpis = strop.výpisPriMyši();
    	if (null != výpis)
    	&#123;
    		strop.zrušOznačenieVýpisov(
    			počiatočnýRiadok, počiatočnýBlok,
    			koncovýRiadok, koncovýBlok);
    		koncovýRiadok = výpis[0];
    		koncovýBlok   = výpis[1];
    		strop.označVýpisy(
    			počiatočnýRiadok, počiatočnýBlok,
    			koncovýRiadok, koncovýBlok);
    	&#125;
    &#125;&#42;/
    // Alternatívna implementácia klávesovej skratky ESC (bez držania
    // ktoréhokoľvek z modifikátorov), ktorá má význam zrušenia označenia
    // textov konzoly:
    /*@Override public void stlačenieKlávesu()
    &#123;
    	// Tento príznak je platný len vtedy, ak nebol stlačený žiadny
    	// modifikátor:
    	boolean nACS = !(ÚdajeUdalostí.klávesnica().isAltDown() ||
    		ÚdajeUdalostí.klávesnica().isControlDown() ||
    		ÚdajeUdalostí.klávesnica().isMetaDown() ||
    		ÚdajeUdalostí.klávesnica().isShiftDown());
    	// Súčasť alternatívnej implementácie označovania a kopírovania
    	// textov stropu.
    	switch (ÚdajeUdalostí.kláves())
    	&#123;
    	case Kláves.ESCAPE: if (nACS) strop.zrušOznačenieTextov(); break;
    	&#125;
    &#125;&#42;/
    // (Prekresľovanie s pomocou časovača, aby bola činnosť
    // konzoly svižnejšia.)
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené())
            Svet.prekresli();
    }
    // Ukončenie.
    @Override public void ukončenie()
    {
        // Ak je náhodou spustený vnorený (detský) proces, nezostáva iné
        // riešenie ako ho ukončiť:
        killProcess();
    }
    // Hlavná (vstupná) metóda.
    public static void main(String[] args)
    {
        Svet.režimLadenia(true);
        Svet.skry();
        Svet.nekresli();
        Svet.aktivujHistóriuVstupnéhoRiadka();
        Svet.uchovajHistóriuVstupnéhoRiadka();
        Svet.použiKonfiguráciu("GrafickáKonzola.cfg");
        new GrafickáKonzola();
        Svet.spustiČasovač();
        Svet.zobraz();
    }
}
 
 
 
 Do konfigurácie odporúčame (v OS Windows) pridať tieto
 riadky:
 
 
mapaKódovaní.počet=1
mapaKódovaní.príkaz[0]=cmd
mapaKódovaní.mapovanie[0]=windows-1250
mapaPríkazov.počet=1
mapaPríkazov.príkaz[0]=cmd
nul & %~
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static interface 
Svet.PríkazovýRiadok.PresmerovanieVýstupu
Toto rozhranie slúži na presmerovanie výstupov a denníkov
 inštancií príkazového riadka.
Vnorené triedy/rozhrania odvodené od triedy knižnica.podpora.ExecuteShellCommand
podpora.ExecuteShellCommand.StreamPrinter
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
Svet.PríkazovýRiadok.PresmerovanieVýstupu
denník
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy log sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie).
Svet.PríkazovýRiadok.PresmerovanieVýstupu
denníkChýb
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy err sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie).
Color
farbaDenníka
Farebné odlíšenie textov denníka.
Color
farbaDenníkaChýb
Farebné odlíšenie textov chybového denníka.
Color
farbaChybovéhoVýstupu
Farebné odlíšenie chybových výstupov externých procesov.
Color
farbaLadenia
Farebné odlíšenie textov ladenia.
Color
farbaVýstupu
Farebné prekrytie všetkých textov štandardného výstupu
 zachytených touto inštanciou a výstupu niektorých vnútorných
 príkazov spracovaných metódou sveta spracujPríkaz (napríklad ECHO).
Color
farbaVýstupuProcesu
Farebné odlíšenie výstupov externých procesov.
Svet.PríkazovýRiadok.PresmerovanieVýstupu
chybovýVýstup
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy error sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie).
boolean
konfiguráciaZmenená
Príznak toho, že nastavenia inštancie príkazového riadka
 boli zmenené a mali by byť uložené do konfiguračného súboru.
Svet.PríkazovýRiadok.PresmerovanieVýstupu
ladenie
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy debug sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie; pozri
 aj triedu PresmerovanieVýstupu)
 a to bez ohľadu na to, či je alebo nie je zapnutý režim ladenia.
Svet.PríkazovýRiadok.PresmerovanieVýstupu
vyčistenie
Toto presmerovanie je odlišné od ostatných.
Svet.PríkazovýRiadok.PresmerovanieVýstupu
výstupProcesu
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy output sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie).
Color
zálohaFarby
Prípadná záloha farby uložená po spustení nového
 procesu.
Atribúty zdedené z triedy knižnica.podpora.ExecuteShellCommand
CANNOT_EXECUTE, CLEARED, COMMAND, COMMAND_MAPPING, COMMANDS_MAP, dateFormat, DELETED, DUPLICATE_REQUEST, ENCODING, ENCODING_FOR, ENCODING_CHANGED, ENCODING_KEEPED, ENCODING_RESTORED, ENCODINGS_MAP, ERROR_MESSAGE, ERROR_OCCURED, EXECUTE, EXIT_CODE, INPUT, IS_EMPTY, langstring, MAPPED_COMMAND_USE, MAPPING, MORE_PROCESSES, SET, STREAM_READ_ERROR, STREAM_WRITE_ERROR, timeFormat
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
PríkazovýRiadok() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
citajKonfiguraciu(Súbor súbor)
 Alias pre čítajKonfiguráciu.
void
clearDebug(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 alebo začatie novej sekcie v prúde ladiacich informácií.
void
clearErr(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 denníka chýb, alebo začatie novej sekcie záznamov.
void
clearError()
Automaticky spúšťaná metóda signalizujúca vymazanie
 zásobníka (obrazovky), na ktorú je exportovaný chybový prúd
 procesu.
void
clearLog(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 denníka, alebo začatie novej sekcie záznamov.
void
clearOutput()
Automaticky spúšťaná metóda signalizujúca vymazanie
 zásobníka (obrazovky), na ktorú je exportovaný prúd
 štandardného výstupu procesu.
void
čítajKonfiguráciu(Súbor súbor)
Prečíta rôzne vlastnosti tejto inštancie z konfiguračného
 súboru.
void
debug(Object... texty)
Metóda vypisujúca ladiace informácie.
void
err(Object... texty)
Metóda zapisujúca údaje do denníka chýb.
void
error(Object... texty)
Metóda, do ktorej je automaticky presmerovaný štandardný
 chybový výstup spustených procesov.
String
finishExtraInput(String hodnota)
Táto metóda je spúšťaná automaticky pri dokončení čakania
 na doplnkový vstup (pozri aj startExtraInput).
String
getVersion()
Táto metóda je spúšťaná automaticky v priebehu práce
 tejto inštancie.
void
log(Object... texty)
Metóda zapisujúca údaje do denníka.
void
output(Object... texty)
Metóda, do ktorej je automaticky presmerovaný štandardný
 výstup spustených procesov.
void
processEnded(int návratovýKód)
Táto metóda je vykonaná automaticky po ukončení
 externého procesu.
String
startExtraInput(String návesť)
Táto metóda je spúšťaná automaticky pri začatí čakania
 na doplnkový vstup, napríklad pri čítaní hodnoty virtuálnej
 premennej %READ% z príkazového riadka.
void
title(String titulok)
Táto metóda je spúšťaná automaticky v priebehu práce
 tejto inštancie.
void
zapisKonfiguraciu(Súbor súbor)
 Alias pre zapíšKonfiguráciu.
void
zapíšKonfiguráciu(Súbor súbor)
Zapíše do konfiguračného súboru rôzne vlastnosti tejto
 inštancie.
Metódy zdedené z triedy knižnica.podpora.ExecuteShellCommand
debugLine, errLine, errorLine, escapeNewLines, execute, expandPrompt, expandTitle, expandVariables, getCommandArray, getCommandsMap, getCurrentPath, getDefaultEncoding, getDefaultPath, getDefaultPrompt, getDefaultTitle, getEncoding, getEncodingsMap, getInternalEnvironment, getPrompt, getRunArguments, getRunCommand, getRunEnvironment, getRunningProcess, getTitle, getVariable, changeEncoding, changePath, isInputActive, isProcessRunning, logLine, makeCommandArray, mapCommand, matchCommand, outputLine, quoteSpacedString, restoreDefaultEncoding, restoreDefaultPrompt, restoreDefaultTitle, setDefaultEncoding, setDefaultPrompt, setDefaultTitle, setPrompt, setTitle, setVariable, splitCommand, stackTraceToString, storeDefaultEncoding, storeDefaultPrompt, storeDefaultTitle, updateTitle, writeInput
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
konfiguráciaZmenená
public boolean konfiguráciaZmenená
Príznak toho, že nastavenia inštancie príkazového riadka
 boli zmenené a mali by byť uložené do konfiguračného súboru.
 O využitie tohto atribútu sa musí postarať externá
 implementácia.
zálohaFarby
public Color zálohaFarby
Prípadná záloha farby uložená po spustení nového
 procesu. Ak je nastavená, tak pre metódu výstupu output to znamená, že nemá použiť
 atribút farbaVýstupu.
farbaVýstupu
public Color farbaVýstupu
Farebné prekrytie všetkých textov štandardného výstupu
 zachytených touto inštanciou a výstupu niektorých vnútorných
 príkazov spracovaných metódou sveta spracujPríkaz (napríklad ECHO).
 Ak je nastavené, tak je použité v tele metódy výstupu output, okrem prípadu, keď je zároveň
 nastavená inštancia zálohy farby: zálohaFarby.
farbaVýstupuProcesu
public Color farbaVýstupuProcesu
Farebné odlíšenie výstupov externých procesov. Ak je
 nastavené, tak je použité pri spustení externého procesu
 metódou sveta spracujPríkaz.
farbaChybovéhoVýstupu
public Color farbaChybovéhoVýstupu
Farebné odlíšenie chybových výstupov externých procesov.
 Ak je nastavené, tak je použité metódou chybového výstupu
 error.
farbaLadenia
public Color farbaLadenia
Farebné odlíšenie textov ladenia. Ak je nastavené a ak
 je zároveň aktívny režim ladenia, tak je použité metódou výstupu textov ladenia
 príkazového riadka debug.
farbaDenníka
public Color farbaDenníka
Farebné odlíšenie textov denníka. Ak je nastavené, tak je
 použité metódou výstupu denníka log.
farbaDenníkaChýb
public Color farbaDenníkaChýb
Farebné odlíšenie textov chybového denníka. Ak je nastavené,
 tak je použité metódou výstupu chybového denníka err.
vyčistenie
public Svet.PríkazovýRiadok.PresmerovanieVýstupu vyčistenie
Toto presmerovanie je odlišné od ostatných. Ak je
 definované, tak sú do neho presmerované všetky udalosti
 vyčistenia alebo resetu denníkov, výstupných prúdov
 a podobne. Vstupné pole parametrov pritom bude obsahovať
 najmenej jeden prvok, ktorý slúži na odlíšenie typu udalosti.
 Je to objekt typu Integer, ktorého hodnota
 môže byť: 0 – clearDebug, 1 – clearLog, 2 – clearErr, 3 –
 clearError, 4 – clearOutput. Druhý prvok je relevantný
 len pre prvé tri udalosti a jeho hodnota je reťazec
 s názvom metódy, ktorá udalosť spustila. Predvolené
 správanie súvisiacich metód je výpis prázdneho riadka pre
 denník (clearLog), vymazanie vnútornej konzoly metódami
 štandardných výstupov (clearError a clearOutput) a ignorovanie
 zvyšných dvoch udalostí (clearDebug a clearErr).
ladenie
public Svet.PríkazovýRiadok.PresmerovanieVýstupu ladenie
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy debug sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie; pozri
 aj triedu PresmerovanieVýstupu)
 a to bez ohľadu na to, či je alebo nie je zapnutý režim ladenia.
denník
public Svet.PríkazovýRiadok.PresmerovanieVýstupu denník
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy log sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie). Pozri
 aj triedu PresmerovanieVýstupu.
denníkChýb
public Svet.PríkazovýRiadok.PresmerovanieVýstupu denníkChýb
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy err sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie). Pozri
 aj triedu PresmerovanieVýstupu.
chybovýVýstup
public Svet.PríkazovýRiadok.PresmerovanieVýstupu chybovýVýstup
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy error sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie). Pozri
 aj triedu PresmerovanieVýstupu.
výstupProcesu
public Svet.PríkazovýRiadok.PresmerovanieVýstupu výstupProcesu
Ak je definovaná (implementovaná) inštancia tohto atribútu,
 tak všetky (interné alebo externé) volania metódy output sú automaticky presmerované do
 metódy spracuj tejto implementácie (inštancie). Pozri
 aj triedu PresmerovanieVýstupu.
Podrobnosti konštruktorov
PríkazovýRiadok
public PríkazovýRiadok()
Podrobnosti metód
title
public void title(String titulok)
Táto metóda je spúšťaná automaticky v priebehu práce
 tejto inštancie. Účelom je nastavenie titulku okna (konzoly),
 ktorým je v tomto prípade okno sveta. (Mechanizmus je
 implementovaný v rodičovskej triede 
ExecuteShellCommand.)
 
 Poznámka: Na zlepšenie dojmu pri
 používaní programovacieho rámca bolo využitie tohto príkazu
 eliminované len na prípady vykonania vnútorného príkazu
 príkazového riadka TITLE. Titulok okna (konzoly) by inak mal
 byť aktualizovaný po každom vykonaní príkazu príkazového
 riadka (prípadne aj pred ním), pretože definícia titulku môže
 obsahovať referencie na (virtuálne) premenné prostredia,
 ktorých hodnoty sa menia (napríklad %CD% – aktuálna cesta,
 %TIME% – aktuálny čas…).
Definované:
title v triede podpora.ExecuteShellCommand
Parametre:
titulok – priebežne (niekedy automaticky) aktualizovaná
     verzia titulku okna
getVersion
public String getVersion()
Táto metóda je spúšťaná automaticky v priebehu práce
 tejto inštancie. (Mechanizmus je implementovaný v rodičovskej
 triede 
ExecuteShellCommand.) Jej
 účelom je poskytnúť aktuálnu verziu programovacieho rámca.
Definované:
getVersion v triede podpora.ExecuteShellCommand
Návratová hodnota:
aktuálna verzia programovacieho rámca
startExtraInput
public String startExtraInput(String návesť)
Táto metóda je spúšťaná automaticky pri začatí čakania
 na doplnkový vstup, napríklad pri čítaní hodnoty virtuálnej
 premennej %READ% z príkazového riadka. (Mechanizmus je
 implementovaný v rodičovskej triede 
ExecuteShellCommand.)
Definované:
startExtraInput v triede podpora.ExecuteShellCommand
Parametre:
návesť – návesť, ktorá má byť zobrazená pred začatím
     čakania na doplnkový vstup
Návratová hodnota:
prípadná predvolená hodnota doplnkového vstupu, ktorá
     okamžite ukončí čakanie na vstup a spustí metódu finishExtraInput
finishExtraInput
public String finishExtraInput(String hodnota)
Táto metóda je spúšťaná automaticky pri dokončení čakania
 na doplnkový vstup (pozri aj startExtraInput). Metóda poskytuje externej implementácii
 poslednú možnosť kontroly, úpravy alebo zrušenia doplnkového
 vstupu. (Mechanizmus automatického spúšťania tejto metódy je
 implementovaný v rodičovskej triede 
ExecuteShellCommand.)
Definované:
finishExtraInput v triede podpora.ExecuteShellCommand
Parametre:
hodnota – hodnota potvrdená používateľom (prípadne
     odoslaná iným procesom)
Návratová hodnota:
upravená hodnota alebo null na zrušenie
     vstupu
clearDebug
public void clearDebug(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 alebo začatie novej sekcie v prúde ladiacich informácií.
 
 Volanie tejto metódy je predvolene ignorované. Dá sa mu však
 definovať akcia v rámci presmerovania výstupu vyčistenie, ktoré (ak je definované) je touto metódou volané
 takto: vyčistenie.spracuj(0,
 metóda);
Definované:
clearDebug v triede podpora.ExecuteShellCommand
Parametre:
metóda – názov metódy, ktorá udalosť vyvolala
clearLog
public void clearLog(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 denníka, alebo začatie novej sekcie záznamov.
 
 Predvolene táto metóda vypíše na konzulu sveta prázdny
 riadok. To sa dá zmeniť akciou presmerovania výstupu
 vyčistenie, ktoré (ak je definované) je
 touto metódou volané takto: vyčistenie.spracuj(1,
 metóda);
Definované:
clearLog v triede podpora.ExecuteShellCommand
Parametre:
metóda – názov metódy, ktorá udalosť vyvolala
clearErr
public void clearErr(String metóda)
Automaticky spúšťaná metóda signalizujúca buď vyčistenie
 denníka chýb, alebo začatie novej sekcie záznamov.
 
 Volanie tejto metódy je predvolene ignorované. Dá sa mu však
 definovať akcia v rámci presmerovania výstupu vyčistenie, ktoré (ak je definované) je touto metódou volané
 takto: vyčistenie.spracuj(2,
 metóda);
Definované:
clearErr v triede podpora.ExecuteShellCommand
Parametre:
metóda – názov metódy, ktorá udalosť vyvolala
clearError
public void clearError()
Automaticky spúšťaná metóda signalizujúca vymazanie
 zásobníka (obrazovky), na ktorú je exportovaný chybový prúd
 procesu. Táto implementácia vymaže vnútornú konzolu sveta
 (stropu).
 
 Ak je definované presmerovanie výstupu vyčistenie, tak vnútorná konzola nie je vymazaná a namiesto
 toho je spustená metóda presmerovania:
 vyčistenie.spracuj(3);
Definované:
clearError v triede podpora.ExecuteShellCommand
clearOutput
public void clearOutput()
Automaticky spúšťaná metóda signalizujúca vymazanie
 zásobníka (obrazovky), na ktorú je exportovaný prúd
 štandardného výstupu procesu. Táto implementácia vymaže
 vnútornú konzolu sveta (stropu).
 
 Ak je definované presmerovanie výstupu vyčistenie, tak vnútorná konzola nie je vymazaná a namiesto
 toho je spustená metóda presmerovania:
 vyčistenie.spracuj(4);
Definované:
clearOutput v triede podpora.ExecuteShellCommand
debug
public void debug(Object... texty)
Metóda vypisujúca ladiace informácie. Jej automatické
 spúšťanie súvisí napríklad so spúšťaním a ukončovaním 
 procesov metódou 
ExecuteShellCommand.execute.
 Jej použitie je otvorené aj pre externé implementácie.
 Predvolene funguje tak, že vypisuje texty na vnútornú konzolu
 sveta (stropu) len v prípade zapnutého režimu ladenia (môže pri tom využiť
 atribút farbaLadenia).
 
 Ak je definované presmerovanie výstupu ladenie, tak sú všetky informácie presmerované do jeho
 metódy: ladenie.spracuj(texty);
Definované:
debug v triede podpora.ExecuteShellCommand
Parametre:
texty – ladiace informácie
log
public void log(Object... texty)
Metóda zapisujúca údaje do denníka. Môže byť volaná s cieľom
 zápisu informácií do denníka, ale je spúšťaná aj automaticky –
 vnútornými príkazmi inštancie príkazového riadka, ktoré ňou
 poskytujú informácie o sebe.
 
 Metóda predvolene vypisuje prijaté informácie na vnútornú
 konzolu sveta (môže pri tom využiť atribút farbaDenníka). Predvolené správanie sa dá
 zmeniť definovaním presmerovania výstupu denník, ktoré bude volané takto: denník.spracuj(texty);
Definované:
log v triede podpora.ExecuteShellCommand
Parametre:
texty – texty, ktoré majú byť zapísané do denníka
err
public void err(Object... texty)
Metóda zapisujúca údaje do denníka chýb. Môže byť volaná
 s cieľom zápisu informácií do denníka chýb, ale je spúšťaná aj
 automaticky – vnútornými príkazmi inštancie príkazového
 riadka, ktoré ňou poskytujú informácie o chybách.
 
 Metóda predvolene vypisuje prijaté informácie na vnútornú
 konzolu sveta (môže pri tom využiť atribút farbaDenníkaChýb). Predvolené správanie sa
 dá zmeniť definovaním presmerovania výstupu denníkChýb, ktoré bude volané takto:
 denníkChýb.spracuj(texty);
Definované:
err v triede podpora.ExecuteShellCommand
Parametre:
texty – texty, ktoré majú byť zapísané do denníka chýb
error
public void error(Object... texty)
Metóda, do ktorej je automaticky presmerovaný štandardný
 chybový výstup spustených procesov. (V niektorých prípadoch
 môže byť spustená aj pri iných príležitostiach, ale to je
 viac-menej výnimočné.)
 
 Metóda predvolene vypisuje prijaté informácie na vnútornú
 konzolu sveta (môže pri tom využiť atribút farbaChybovéhoVýstupu). Predvolené
 správanie sa dá zmeniť definovaním presmerovania výstupu
 chybovýVýstup, ktoré bude volané takto:
 chybovýVýstup.spracuj(texty);
Definované:
error v triede podpora.ExecuteShellCommand
Parametre:
texty – zachytené riadky chybového prúdu
output
public void output(Object... texty)
Metóda, do ktorej je automaticky presmerovaný štandardný
 výstup spustených procesov. V niektorých prípadoch môže byť
 táto metóda spustená aj pri iných príležitostiach (napríklad
 vnútorným príkazom ECHO).
 
 Metóda predvolene vypisuje prijaté informácie na vnútornú
 konzolu sveta (môže pri tom využiť atribút farbaVýstupu). Predvolené
 správanie sa dá zmeniť definovaním presmerovania výstupu
 výstupProcesu, ktoré bude volané takto:
 výstupProcesu.spracuj(texty);
Definované:
output v triede podpora.ExecuteShellCommand
Parametre:
texty – zachytené riadky výstupného prúdu
processEnded
public void processEnded(int návratovýKód)
Táto metóda je vykonaná automaticky po ukončení
 externého procesu. Návratový kód je nositeľom informácie
 o spôsobe ukončenia procesu alebo o chybe. Obvykle túto
 informáciu tvorí spustený proces pri svojom ukončení, ale
 môže ísť aj o informáciu odovzdanú spúšťajúcim procesom
 (príkazovým riadkom systému alebo programovacieho rámca).
 Hodnota nula obvykle znamená korektné ukončenie procesu.
 Interpretácia iných hodnôt závisí od konkrétneho procesu –
 o tom by mala informovať jeho dokumentácia.
 
 V tomto programovacom rámci je jediná výnimka, keď túto
 hodnotu negeneruje spustený proces a to pri pokuse spustenia
 nového procesu v čase, keď je skôr spustený proces stále
 v činnosti. Jedna inštancia príkazového riadka dovoľuje
 v jednom čase spustenie iba jedného procesu. V prípade pokusu
 o konfliktné spustenie vygeneruje rámec túto udalosť
 s návratovým kódom −1.
Definované:
processEnded v triede podpora.ExecuteShellCommand
Parametre:
návratovýKód – kód, ktorý vrátil externý proces
     pri ukončení; prípadne kód generovaný nadradeným procesom
zapíšKonfiguráciu
public void zapíšKonfiguráciu(Súbor súbor)
                       throws IOException
Zapíše do konfiguračného súboru rôzne vlastnosti tejto
 inštancie. Sú to hodnoty vnútorných premenných prostredia,
 aktuálne kódovanie, definícu náveste, titulku okna a mapy
 príkazov a kódovaní.
Parametre:
súbor – inštancia konfiguračného súboru
Výnimky:
IOException – v prípade vzniku vstupno-výstupnej chyby
zapisKonfiguraciu
public void zapisKonfiguraciu(Súbor súbor)
                       throws IOException
 Alias pre zapíšKonfiguráciu.
Výnimky:
IOException
čítajKonfiguráciu
public void čítajKonfiguráciu(Súbor súbor)
                       throws IOException
Prečíta rôzne vlastnosti tejto inštancie z konfiguračného
 súboru. Pozri aj zapíšKonfiguráciu.
Parametre:
súbor – inštancia konfiguračného súboru
Výnimky:
IOException – v prípade vzniku vstupno-výstupnej chyby
citajKonfiguraciu
public void citajKonfiguraciu(Súbor súbor)
                       throws IOException
 Alias pre čítajKonfiguráciu.
Výnimky:
IOException
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":9,"i21":9,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":9,"i28":9,"i29":9,"i30":9,"i31":9,"i32":9,"i33":9,"i34":9,"i35":9,"i36":9,"i37":9,"i38":9,"i39":9,"i40":9,"i41":9,"i42":9,"i43":9,"i44":9,"i45":9,"i46":9,"i47":9,"i48":9,"i49":9,"i50":9,"i51":9,"i52":9,"i53":9,"i54":9,"i55":9,"i56":9,"i57":9,"i58":9,"i59":9,"i60":9,"i61":9,"i62":9,"i63":9,"i64":9,"i65":9,"i66":9,"i67":9,"i68":9,"i69":9,"i70":9,"i71":9,"i72":9,"i73":9,"i74":9,"i75":9,"i76":9,"i77":9,"i78":9,"i79":9,"i80":9,"i81":9,"i82":9,"i83":9,"i84":9,"i85":9,"i86":9,"i87":9,"i88":9,"i89":9,"i90":9,"i91":9,"i92":9,"i93":9,"i94":9,"i95":9,"i96":9,"i97":9,"i98":9,"i99":9,"i100":9,"i101":9,"i102":9,"i103":9,"i104":9,"i105":9,"i106":9,"i107":9,"i108":9,"i109":9,"i110":9,"i111":9,"i112":9,"i113":9,"i114":9,"i115":9,"i116":9,"i117":9,"i118":9,"i119":9,"i120":9,"i121":9,"i122":9,"i123":9,"i124":9,"i125":9,"i126":9,"i127":9,"i128":9,"i129":9,"i130":9,"i131":9,"i132":9,"i133":9,"i134":9,"i135":9,"i136":9,"i137":9,"i138":9,"i139":9,"i140":9,"i141":9,"i142":9,"i143":9,"i144":9,"i145":9,"i146":9,"i147":9,"i148":9,"i149":9,"i150":9,"i151":9,"i152":9,"i153":9,"i154":9,"i155":9,"i156":9,"i157":9,"i158":9,"i159":9,"i160":9,"i161":9,"i162":9,"i163":9,"i164":9,"i165":9,"i166":9,"i167":9,"i168":9,"i169":9,"i170":9,"i171":9,"i172":9,"i173":9,"i174":9,"i175":9,"i176":9,"i177":9,"i178":9,"i179":9,"i180":9,"i181":9,"i182":9,"i183":9,"i184":9,"i185":9,"i186":9,"i187":9,"i188":9,"i189":9,"i190":9,"i191":9,"i192":9,"i193":9,"i194":9,"i195":9,"i196":9,"i197":9,"i198":9,"i199":9,"i200":9,"i201":9,"i202":9,"i203":9,"i204":9,"i205":9,"i206":9,"i207":9,"i208":9,"i209":9,"i210":9,"i211":9,"i212":9,"i213":9,"i214":9,"i215":9,"i216":9,"i217":9,"i218":9,"i219":9,"i220":9,"i221":9,"i222":9,"i223":9,"i224":9,"i225":9,"i226":9,"i227":9,"i228":9,"i229":9,"i230":9,"i231":9,"i232":9,"i233":9,"i234":9,"i235":9,"i236":9,"i237":9,"i238":9,"i239":9,"i240":9,"i241":9,"i242":9,"i243":9,"i244":9,"i245":9,"i246":9,"i247":9,"i248":9,"i249":9,"i250":9,"i251":9,"i252":9,"i253":9,"i254":9,"i255":9,"i256":9,"i257":9,"i258":9,"i259":9,"i260":9,"i261":9,"i262":9,"i263":9,"i264":9,"i265":9,"i266":9,"i267":9,"i268":9,"i269":9,"i270":9,"i271":9,"i272":9,"i273":9,"i274":9,"i275":9,"i276":9,"i277":9,"i278":9,"i279":9,"i280":9,"i281":9,"i282":9,"i283":9,"i284":9,"i285":9,"i286":9,"i287":9,"i288":9,"i289":9,"i290":9,"i291":9,"i292":9,"i293":9,"i294":9,"i295":9,"i296":9,"i297":9,"i298":9,"i299":9,"i300":9,"i301":9,"i302":9,"i303":9,"i304":9,"i305":9,"i306":9,"i307":9,"i308":9,"i309":9,"i310":9,"i311":9,"i312":9,"i313":9,"i314":9,"i315":9,"i316":9,"i317":9,"i318":9,"i319":9,"i320":9,"i321":9,"i322":9,"i323":9,"i324":9,"i325":9,"i326":9,"i327":9,"i328":9,"i329":9,"i330":9,"i331":9,"i332":9,"i333":9,"i334":9,"i335":9,"i336":9,"i337":9,"i338":9,"i339":9,"i340":9,"i341":9,"i342":9,"i343":9,"i344":9,"i345":9,"i346":9,"i347":9,"i348":9,"i349":9,"i350":9,"i351":9,"i352":9,"i353":9,"i354":9,"i355":9,"i356":9,"i357":9,"i358":9,"i359":9,"i360":9,"i361":9,"i362":9,"i363":9,"i364":9,"i365":9,"i366":9,"i367":9,"i368":9,"i369":9,"i370":9,"i371":9,"i372":9,"i373":9,"i374":9,"i375":9,"i376":9,"i377":9,"i378":9,"i379":9,"i380":9,"i381":9,"i382":9,"i383":9,"i384":9,"i385":9,"i386":9,"i387":9,"i388":9,"i389":9,"i390":9,"i391":9,"i392":9,"i393":9,"i394":9,"i395":9,"i396":9,"i397":9,"i398":9,"i399":9,"i400":9,"i401":9,"i402":9,"i403":9,"i404":9,"i405":9,"i406":9,"i407":9,"i408":9,"i409":9,"i410":9,"i411":9,"i412":9,"i413":9,"i414":9,"i415":9,"i416":9,"i417":9,"i418":9,"i419":9,"i420":9,"i421":9,"i422":9,"i423":9,"i424":9,"i425":9,"i426":9,"i427":9,"i428":9,"i429":9,"i430":9,"i431":9,"i432":9,"i433":9,"i434":9,"i435":9,"i436":9,"i437":9,"i438":9,"i439":9,"i440":9,"i441":9,"i442":9,"i443":9,"i444":9,"i445":9,"i446":9,"i447":9,"i448":9,"i449":9,"i450":9,"i451":9,"i452":9,"i453":9,"i454":9,"i455":9,"i456":9,"i457":9,"i458":9,"i459":9,"i460":9,"i461":9,"i462":9,"i463":9,"i464":9,"i465":9,"i466":9,"i467":9,"i468":9,"i469":9,"i470":9,"i471":9,"i472":9,"i473":9,"i474":9,"i475":9,"i476":9,"i477":9,"i478":9,"i479":9,"i480":9,"i481":9,"i482":9,"i483":9,"i484":9,"i485":9,"i486":9,"i487":9,"i488":9,"i489":9,"i490":9,"i491":9,"i492":9,"i493":9,"i494":9,"i495":9,"i496":9,"i497":9,"i498":9,"i499":9,"i500":9,"i501":9,"i502":9,"i503":9,"i504":9,"i505":9,"i506":9,"i507":9,"i508":9,"i509":9,"i510":9,"i511":9,"i512":9,"i513":9,"i514":9,"i515":9,"i516":9,"i517":9,"i518":9,"i519":9,"i520":9,"i521":9,"i522":9,"i523":9,"i524":9,"i525":9,"i526":9,"i527":9,"i528":9,"i529":9,"i530":9,"i531":9,"i532":9,"i533":9,"i534":9,"i535":9,"i536":9,"i537":9,"i538":9,"i539":9,"i540":9,"i541":9,"i542":9,"i543":9,"i544":9,"i545":9,"i546":9,"i547":9,"i548":9,"i549":9,"i550":9,"i551":9,"i552":9,"i553":9,"i554":9,"i555":9,"i556":9,"i557":9,"i558":9,"i559":9,"i560":9,"i561":9,"i562":9,"i563":9,"i564":9,"i565":9,"i566":9,"i567":9,"i568":9,"i569":9,"i570":9,"i571":9,"i572":9,"i573":9,"i574":9,"i575":9,"i576":9,"i577":9,"i578":9,"i579":9,"i580":9,"i581":9,"i582":9,"i583":9,"i584":9,"i585":9,"i586":9,"i587":9,"i588":9,"i589":9,"i590":9,"i591":9,"i592":9,"i593":9,"i594":9,"i595":9,"i596":9,"i597":9,"i598":9,"i599":9,"i600":9,"i601":9,"i602":9,"i603":9,"i604":9,"i605":9,"i606":9,"i607":9,"i608":9,"i609":9,"i610":9,"i611":9,"i612":9,"i613":9,"i614":9,"i615":9,"i616":9,"i617":9,"i618":9,"i619":9,"i620":9,"i621":9,"i622":9,"i623":9,"i624":9,"i625":9,"i626":9,"i627":9,"i628":9,"i629":9,"i630":9,"i631":9,"i632":9,"i633":9,"i634":9,"i635":9,"i636":9,"i637":9,"i638":9,"i639":9,"i640":9,"i641":9,"i642":9,"i643":9,"i644":9,"i645":9,"i646":9,"i647":9,"i648":9,"i649":9,"i650":9,"i651":9,"i652":9,"i653":9,"i654":9,"i655":9,"i656":9,"i657":9,"i658":9,"i659":9,"i660":9,"i661":9,"i662":9,"i663":9,"i664":9,"i665":9,"i666":9,"i667":9,"i668":9,"i669":9,"i670":9,"i671":9,"i672":9,"i673":9,"i674":9,"i675":9,"i676":9,"i677":9,"i678":9,"i679":9,"i680":9,"i681":9,"i682":9,"i683":9,"i684":9,"i685":9,"i686":9,"i687":9,"i688":9,"i689":9,"i690":9,"i691":9,"i692":9,"i693":9,"i694":9,"i695":9,"i696":9,"i697":9,"i698":9,"i699":9,"i700":9,"i701":9,"i702":9,"i703":9,"i704":9,"i705":9,"i706":9,"i707":9,"i708":9,"i709":9,"i710":9,"i711":9,"i712":9,"i713":9,"i714":9,"i715":9,"i716":9,"i717":9,"i718":9,"i719":9,"i720":9,"i721":9,"i722":9,"i723":9,"i724":9,"i725":9,"i726":9,"i727":9,"i728":9,"i729":9,"i730":9,"i731":9,"i732":9,"i733":9,"i734":9,"i735":9,"i736":9,"i737":9,"i738":9,"i739":9,"i740":9,"i741":9,"i742":9,"i743":9,"i744":9,"i745":9,"i746":9,"i747":9,"i748":9,"i749":9,"i750":9,"i751":9,"i752":9,"i753":9,"i754":9,"i755":9,"i756":9,"i757":9,"i758":9,"i759":9,"i760":9,"i761":9,"i762":9,"i763":9,"i764":9,"i765":9,"i766":9,"i767":9,"i768":9,"i769":9,"i770":9,"i771":9,"i772":9,"i773":9,"i774":9,"i775":9,"i776":9,"i777":9,"i778":9,"i779":9,"i780":9,"i781":9,"i782":9,"i783":9,"i784":9,"i785":9,"i786":9,"i787":9,"i788":9,"i789":9,"i790":9,"i791":9,"i792":9,"i793":9,"i794":9,"i795":9,"i796":9,"i797":9,"i798":9,"i799":9,"i800":9,"i801":9,"i802":9,"i803":9,"i804":9,"i805":9,"i806":9,"i807":9,"i808":9,"i809":9,"i810":9,"i811":9,"i812":9,"i813":9,"i814":9,"i815":9,"i816":9,"i817":9,"i818":9,"i819":9,"i820":9,"i821":9,"i822":9,"i823":9,"i824":9,"i825":9,"i826":9,"i827":9,"i828":9,"i829":9,"i830":9,"i831":9,"i832":9,"i833":9,"i834":9,"i835":9,"i836":9,"i837":9,"i838":9,"i839":9,"i840":9,"i841":9,"i842":9,"i843":9,"i844":9,"i845":9,"i846":9,"i847":9,"i848":9,"i849":9,"i850":9,"i851":9,"i852":9,"i853":9,"i854":9,"i855":9,"i856":9,"i857":9,"i858":9,"i859":9,"i860":9,"i861":9,"i862":9,"i863":9,"i864":9,"i865":9,"i866":9,"i867":9,"i868":9,"i869":9,"i870":9,"i871":9,"i872":9,"i873":9,"i874":9,"i875":9,"i876":9,"i877":9,"i878":9,"i879":9,"i880":9,"i881":9,"i882":9,"i883":9,"i884":9,"i885":9,"i886":9,"i887":9,"i888":9,"i889":9,"i890":9,"i891":9,"i892":9,"i893":9,"i894":9,"i895":9,"i896":9,"i897":9,"i898":9,"i899":9,"i900":9,"i901":9,"i902":9,"i903":9,"i904":9,"i905":9,"i906":9,"i907":9,"i908":9,"i909":9,"i910":9,"i911":9,"i912":9,"i913":9,"i914":9,"i915":9,"i916":9,"i917":9,"i918":9,"i919":9,"i920":9,"i921":9,"i922":9,"i923":9,"i924":9,"i925":9,"i926":9,"i927":9,"i928":9,"i929":9,"i930":9,"i931":9,"i932":9,"i933":9,"i934":9,"i935":9,"i936":9,"i937":9,"i938":9,"i939":9,"i940":9,"i941":9,"i942":9,"i943":9,"i944":9,"i945":9,"i946":9,"i947":9,"i948":9,"i949":9,"i950":9,"i951":9,"i952":9,"i953":9,"i954":9,"i955":9,"i956":9,"i957":9,"i958":9,"i959":9,"i960":9,"i961":9,"i962":9,"i963":9,"i964":9,"i965":9,"i966":9,"i967":9,"i968":9,"i969":9,"i970":9,"i971":9,"i972":9,"i973":9,"i974":9,"i975":9,"i976":9,"i977":9,"i978":9,"i979":9,"i980":9,"i981":9,"i982":9,"i983":9,"i984":9,"i985":9,"i986":9,"i987":9,"i988":9,"i989":9,"i990":9,"i991":9,"i992":9,"i993":9,"i994":9,"i995":9,"i996":9,"i997":9,"i998":9,"i999":9,"i1000":9,"i1001":9,"i1002":9,"i1003":9,"i1004":9,"i1005":9,"i1006":9,"i1007":9,"i1008":9,"i1009":9,"i1010":9,"i1011":9,"i1012":9,"i1013":9,"i1014":9,"i1015":9,"i1016":9,"i1017":9,"i1018":9,"i1019":9,"i1020":9,"i1021":9,"i1022":9,"i1023":9,"i1024":9,"i1025":9,"i1026":9,"i1027":9,"i1028":9,"i1029":9,"i1030":9,"i1031":9,"i1032":9,"i1033":9,"i1034":9,"i1035":9,"i1036":9,"i1037":9,"i1038":9,"i1039":9,"i1040":9,"i1041":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Svet
java.lang.Object
java.awt.Component
java.awt.Container
java.awt.Window
java.awt.Frame
javax.swing.JFrame
Svet
Všetky implementované rozhrania:
ImageObserver, MenuContainer, Serializable, Accessible, RootPaneContainer, WindowConstants
public final class Svet
extends JFrame
Trieda, ktorá spája metódy obsluhujúce hlavné okno so statickými
 metódami rôzneho významu.
 
 Majiteľom sveta je hlavný robot. Je to
 prvý vytvorený robot, ktorý má o niečo vyššie postavenie oproti
 ostatným robotom. Poskytuje alternatívu k definovaniu obsluhy udalostí a implicitne riadi niektoré procesy.
 
 Vo svete grafického robota jestvujú dve kresliace plátna (podlaha a strop), na ktoré môžu roboty kresliť. Svet umožňuje
 (okrem iného) napríklad prácu s obrázkami,
 zvukmi, vstupmi a výstupmi údajov,
 náhodnými číslami a časovačom, ktorý požadujú niektoré
 aktivity robotov.
 
 Niektoré príkazy sveta sú zhromaždené v nasledujúcom jednoduchom
 príklade hry na ozvenu – všetko, čo používateľ zadá do vstupného
 riadka a potvrdí klávesom Enter, sa zopakuje vypísaním na
 obrazovku:
 
 
Svet.skry();
Svet.začniVstup();
Svet.neskrývajVstupnýRiadok();
Svet.vymažPonuku();
Svet.zobraz();
Svet.farbaTextu(hnedá);
Svet.vypíšRiadok("Hra na ozvenu…", riadok);
Svet.farbaTextu(tmavotyrkysová);
new ObsluhaUdalostí()
{
    @Override public void potvrdenieÚdajov()
    {
        Svet.vypíšRiadok("  Ozvena:", Svet.prevezmiReťazec());
    }
};
 
 Nasledujúci rozsiahlejší príklad ukazuje implementáciu primitívneho
 prehliadača obrázkov:
 
 
import knižnica.*;
public class PrehliadačObrázkov extends GRobot
{
    // Názov práve prehliadaného obrázka
    private String   obrázok = null;
    // Zoznam obrázkov prečítaný z priečinka
    private String[] zoznam  = null;
    // Index posledného obrázka zobrazeného zo zoznamu
    private int index = &#45;1;
    // Konštruktor
    private PrehliadačObrázkov()
    {
        // Nastavenie rozmerov plátna na rozmery prvého zobrazovacieho
        // zariadenia (prvého monitora)
        super(Svet.šírkaZariadenia(), Svet.výškaZariadenia());
    }
    // Metóda slúžiaca na upravenie mierky obrázka podľa
    // rozmerov viditeľnej časti plátna
    public void upravMierku()
    {
        if (null != obrázok)
        {
            if (Svet.šírkaObrázka(obrázok) &gt; Svet.viditeľnáŠírka())
                veľkosť(Svet.viditeľnáŠírka());
            else
                veľkosť(Svet.šírkaObrázka(obrázok));
            if (veľkosť() * Svet.výškaObrázka(obrázok) /
                Svet.šírkaObrázka(obrázok) &gt; Svet.viditeľnáVýška())
                veľkosť(Svet.šírkaObrázka(obrázok) *
                    Svet.viditeľnáVýška() / Svet.výškaObrázka(obrázok));
        }
    }
    // Nastavenie nového prehliadaného obrázka
    public boolean nastavObrázok(String názov)
    {
        if (null != (obrázok = názov))
        {
            názov = názov.toLowerCase();
            if (názov.endsWith(".png") || názov.endsWith(".jpeg") ||
                názov.endsWith(".jpg"))
            {
                veľkosť(Svet.šírkaObrázka(obrázok));
                vlastnýTvar(obrázok);
                upravMierku();
                return true;
            }
        }
        
veľkosť(10);
        return false;
    }
    // Metóda slúžiaca na cyklické prehliadanie všetkých obrázkov v priečinku
    public void prehliadaj()
    {
        if (null == zoznam)
            nastavObrázok(null);
        else
        {
            for (int i = 0; i &lt; zoznam.length; ++i)
            {
                if (++index &gt;= zoznam.length) index = 0;
                if (nastavObrázok(zoznam[index])) break;
            }
        }
    }
    // Uvoľnenie ľubovoľného klávesu bude znamenať prehliadanie nasledujúceho
    // obrázka
    @Override public void uvoľnenieKlávesu()
    {
        prehliadaj();
    }
    // Zmena veľkosti okna bude mať za následok upravenie mierky prehliadaného
    // obrázka
    @Override public void zmenaVeľkostiOkna()
    {
        upravMierku();
    }
    // Pustenie súboru (priečinka) nad plátnom bude mať za následok spustenie
    // prehliadania
    @Override public void pustenieSúboru(String súbor)
    {
        // Ak je pustený „súbor“ (resp. položka) priečinok, tak sa spustí
        // prehliadanie priečinka (ak táto akcia náhodou zlyhá, tak metóda
        // prehliadaj sa automaticky postará o to, aby bol zobrazený dutý
        // robot s veľkosťou 10)
        if (Súbor.jePriečinok(súbor))
        {
            try
            {
                Svet.priečinokObrázkov(súbor);
                zoznam = Súbor.zoznamSúborov(súbor);
            }
            catch (Exception e)
            {
                Svet.správa(e.getMessage());
                zoznam = null;
            }
            prehliadaj();
        }
        // V opačnom prípade sa zoznam vymaže a prehliadač sa zadanú položku
        // pokúsi spracovať ako individuálny obrázok (jeho zobrazenie však
        // potrvá len do najbližšieho stlačenia, resp. uvoľnenia, klávesu; na
        // zabezpečenie inteligentnejšieho správania by bolo potrebné
        // implementovať inteligentnejší mechanizmus prehliadania)
        else
        {
            zoznam = null;
            nastavObrázok(súbor);
        }
    }
    // Hlavná metóda
    public static void main(String[] args)
    {
        new PrehliadačObrázkov();
    }
}
Pozri tiež:
JFrame, 
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
Svet.PrikazovyRiadok
 Alias pre PríkazovýRiadok.
static class 
Svet.PríkazovýRiadok
Hlavná časť implementácie jednoduchého príkazového riadka
 operačného systému.
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JFrame
JFrame.AccessibleJFrame
Vnorené triedy/rozhrania odvodené od triedy java.awt.Frame
Frame.AccessibleAWTFrame
Vnorené triedy/rozhrania odvodené od triedy java.awt.Window
Window.AccessibleAWTWindow, Window.Type
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static DecimalFormat
format
 Alias pre formát.
static DecimalFormat
formát
Inštancia triedy DecimalFormat slúžiaca na
 formátovanie číselných výstupov.
static Svet.PrikazovyRiadok
prikazovyRiadok
 Alias pre príkazovýRiadok.
static Svet.PrikazovyRiadok
príkazovýRiadok
Inštancia triedy PríkazovýRiadok
 slúžiaca na komunikáciu s príkazovým prostredím operačného
 systému.
static ZmenaCelejObrazovky
zmenaCelejObrazovky
Hodnota tohto atribútu môže obsahovať vlastnú implementáciu
 spôsobu zmeny režimu celej obrazovky.
Atribúty zdedené z triedy javax.swing.JFrame
accessibleContext, EXIT_ON_CLOSE, rootPane, rootPaneCheckingEnabled
Atribúty zdedené z triedy java.awt.Frame
CROSSHAIR_CURSOR, DEFAULT_CURSOR, E_RESIZE_CURSOR, HAND_CURSOR, ICONIFIED, MAXIMIZED_BOTH, MAXIMIZED_HORIZ, MAXIMIZED_VERT, MOVE_CURSOR, N_RESIZE_CURSOR, NE_RESIZE_CURSOR, NORMAL, NW_RESIZE_CURSOR, S_RESIZE_CURSOR, SE_RESIZE_CURSOR, SW_RESIZE_CURSOR, TEXT_CURSOR, W_RESIZE_CURSOR, WAIT_CURSOR
Atribúty zdedené z triedy java.awt.Component
BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania javax.swing.WindowConstants
DISPOSE_ON_CLOSE, DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad metód
Všetky metódy Statické metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static boolean
aktivnaHistoriaVstupnehoRiadka()
 Alias pre aktívnaHistóriaVstupnéhoRiadka.
static boolean
aktívnaHistóriaVstupnéhoRiadka()
Zistí, či je automatické uchovávanie potvrdených vstupných
 riadkov aktívne.
static ObsluhaUdalostí
aktívnaObsluhaUdalostí()
Táto metóda slúži na získanie aktívnej inštancie obsluhy udalostí.
static ObsluhaUdalosti
aktivnaObsluhuUdalosti()
 Alias pre aktívnaObsluhaUdalostí.
static void
aktivujHistoriuVstupnehoRiadka()
 Alias pre aktivujHistóriuVstupnéhoRiadka.
static void
aktivujHistóriuVstupnéhoRiadka()
Aktivuje automatické uchovávanie potvrdených vstupných riadkov.
static boolean
aktivujStandardnyVstup()
 Alias pre aktivujŠtandardnýVstup.
static boolean
aktivujStandardnyVstup(String kódovanie)
 Alias pre aktivujŠtandardnýVstup.
static boolean
aktivujŠtandardnýVstup()
Táto metóda vykoná jednorazovú akciu aktivovania štandardného
 vstupu s predvoleným kódovaním UTF-8.
static boolean
aktivujŠtandardnýVstup(String kódovanie)
Táto metóda vykoná jednorazovú akciu aktivovania štandardného
 vstupu so zadaným kódovaním.
static void
aktivujVstupnyRiadok()
 Alias pre aktivujVstupnýRiadok.
static void
aktivujVstupnýRiadok()
V prípade, že vstupný riadok je stále viditeľný, môžeme do neho
 touto metódou presmerovať vstup – v riadku sa aktivuje blikajúci
 kurzor.
static String
bodVAktivnomSlove(double x,
                 double y)
 Alias pre bodVAktívnomSlove.
static String
bodVAktívnomSlove(double x,
                 double y)
Overí, či sa bod identifikovaný zadanými súradnicami nachádza
 v oblasti niektorého z aktívnych slov.
static String
bodVAktivnomSlove(Poloha poloha)
 Alias pre bodVAktívnomSlove.
static String
bodVAktívnomSlove(Poloha poloha)
Funguje rovnako ako metóda bodVAktívnomSlove, ale namiesto súradníc bodu je zadaný
 objekt, ktorý je implementáciou rozhrania Poloha.
static void
cakaj(double početSekúnd)
 Alias pre čakaj.
static KeyEvent
cakajNaKlaves()
 Alias pre čakajNaKláves.
static InputEvent[]
cakajNaKlavesAleboKlik()
 Alias pre čakajNaKlikAleboKláves.
static MouseEvent
cakajNaKlik()
 Alias pre čakajNaKlik.
static InputEvent[]
cakajNaKlikAleboKlaves()
 Alias pre čakajNaKlikAleboKláves.
static String
cakajNaVstup()
 Alias pre čakajNaVstup.
static boolean
casovacAktivny()
 Alias pre časovačAktívny.
static boolean
casovacSpi()
 Alias pre časovačSpí.
static boolean
casovacSpusteny()
 Alias pre časovačAktívny.
static boolean
celaObrazovka()
 Alias pre celáObrazovka.
static boolean
celáObrazovka()
Pokúsi sa prepnúť svet do režimu celej obrazovky.
static boolean
celaObrazovka(boolean celáObrazovka)
 Alias pre celáObrazovka.
static boolean
celáObrazovka(boolean celáObrazovka)
Pokúsi sa prepnúť svet do režimu celej obrazovky alebo späť.
static boolean
celaObrazovka(int zariadenie)
 Alias pre celáObrazovka.
static boolean
celáObrazovka(int zariadenie)
Pokúsi sa prepnúť svet do režimu celej obrazovky na určenom
 zobrazovacom zariadení.
static boolean
celaObrazovka(int zariadenie,
             boolean celáObrazovka)
 Alias pre celáObrazovka.
static boolean
celáObrazovka(int zariadenie,
             boolean celáObrazovka)
Pokúsi sa prepnúť svet do režimu celej obrazovky alebo späť
 na určenom zobrazovacom zariadení.
static String
celeNaRimske(long celé)
 Alias pre celéNaRímske.
static String
celéNaRímske(long celé)
Prevedie zadané celé číslo na reťazec s rímskou reprezentáciou
 celých čísiel.
static int
cisloTiku()
 Alias pre čísloTiku.
static void
citajKonfiguraciuSveta()
 Alias pre čítajKonfiguráciuSveta.
static void
citajObrazky(Object... súbory)
 Alias pre čítajObrázky.
static void
citajObrazky(String[] súbory)
 Alias pre čítajObrázky.
static Image
citajObrazok(String súbor)
 Alias pre čítajObrázok.
static Object
citajPremennu(String názov,
             Class&lt;?&gt; typ)
 Alias pre čítajPremennú.
static Zvuk
citajZvuk(String súbor)
 Alias pre čítajZvuk.
static Zvuk
citajZvuk(String súbor,
         boolean unikátny)
 Alias pre čítajZvuk.
static void
citajZvuky(Object... súbory)
 Alias pre čítajZvuky.
static void
citajZvuky(String[] súbory)
 Alias pre čítajZvuky.
static void
čakaj(double početSekúnd)
Pozdrží vykonávanie programu na zadaný počet sekúnd.
static KeyEvent
čakajNaKláves()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na stlačenie klávesu.
static InputEvent[]
čakajNaKlávesAleboKlik()
 Alias pre čakajNaKlikAleboKláves.
static MouseEvent
čakajNaKlik()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na kliknutie ľubovoľným tlačidlom myši.
static InputEvent[]
čakajNaKlikAleboKláves()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na stlačenie ľubovoľného klávesu alebo kliknutie ľubovoľným
 tlačidlom myši.
static String
čakajNaVstup()
Táto metóda implementuje mechanizmus blokovania pri čakaní
 údajov zo štandardného vstupu (v samostatnom vlákne).
static boolean
časovačAktívny()
Zistí, či je časovač aktívny.
static boolean
časovačSpí()
Zistí, či je časovač v „režime spánku.“ Podrobnosti o užitočnosti
 spánku časovača nájdete v opise metódy uspiČasovač.
static boolean
časovačSpustený()
 Alias pre časovačAktívny.
static int
čísloTiku()
Overí, ktorý násobok tiku je práve vykonávaný.
static void
čítajKonfiguráciuSveta()
Prečíta konfiguráciu
 sveta (a plátien).
static void
čítajObrázky(Object... súbory)
Táto metóda slúži na čítanie zadaných obrázkov do vnútornej pamäte
 sveta (napríklad pri štarte aplikácie).
static void
čítajObrázky(String[] súbory)
Táto metóda slúži na čítanie zadaných obrázkov do vnútornej pamäte
 sveta (napríklad pri štarte aplikácie).
static Image
čítajObrázok(String súbor)
Prečíta do vnútornej pamäte sveta zadaný obrázok zo súboru a vráti
 ho v objekte typu Image.
static Object
čítajPremennú(String názov,
             Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu
 interaktívneho režimu.
static Zvuk
čítajZvuk(String súbor)
Prečíta do vnútornej pamäte sveta zadaný zvuk zo súboru a vráti
 ho v objekte typu Zvuk.
static Zvuk
čítajZvuk(String súbor,
         boolean unikátny)
Prečíta do vnútornej pamäte sveta zadaný zvuk zo súboru a vráti
 ho v objekte typu Zvuk.
static void
čítajZvuky(Object... súbory)
Táto metóda slúži na čítanie zadaných zvukových súborov do
 vnútornej pamäte sveta (napríklad pri štarte aplikácie).
static void
čítajZvuky(String[] súbory)
Táto metóda slúži na čítanie zadaných zvukových súborov do
 vnútornej pamäte sveta (napríklad pri štarte aplikácie).
static GRobot
dajRobot(String menoRobota)
Vráti inštanciu robota podľa jeho mena.
static GRobot
dajRobota(String menoRobota)
 Alias pre dajRobot.
static Skript
dajSkript(String názov)
Vráti inštanciu skriptu registrovanú vo vnútornej pamäti programovacieho rámca
 pod zadaným menom.
static void
deaktivujHistoriuVstupnehoRiadka()
 Alias pre deaktivujHistóriuVstupnéhoRiadka.
static void
deaktivujHistóriuVstupnéhoRiadka()
Deaktivuje automatické uchovávanie potvrdených vstupných
 riadkov počas činnosti aplikácie.
static Vlnenie
definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
static Vlnenie
definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
static boolean
dialog(String[] popisy,
      Object[] údaje)
 Alias pre dialóg.
static boolean
dialóg(String[] popisy,
      Object[] údaje)
Otvorí prispôsobiteľný dialóg s prvkami vytvorenými podľa poľa
 údaje.
static boolean
dialog(String[] popisy,
      Object[] údaje,
      String titulok)
 Alias pre dialóg.
static boolean
dialóg(String[] popisy,
      Object[] údaje,
      String titulok)
Vytvorí a otvorí prispôsobiteľný dialóg s prvkami vytvorenými
 podľa obsahu poľa údaje.
static double
dolnyOkraj()
 Alias pre dolnýOkraj.
static double
dolnýOkraj()
 Alias pre spodnýOkraj.
static Vlnenie
existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
static Vlnenie
existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
static String
F(double číslo,
 int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
static String
F(double číslo,
 int šírka,
 int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
static Farba
farbaBodu(double x,
         double y)
Zistí farbu bodu (jedného pixela) na zadaných súradniciach.
static boolean
farbaBodu(double x,
         double y,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje so zadanou farbou.
static boolean
farbaBodu(double x,
         double y,
         Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu.
static boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek.
static boolean
farbaBodu(double x,
         double y,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
static Farba
farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) na pozícii zadaného objektu.
static boolean
farbaBodu(Poloha objekt,
         Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje so zadanou farbou.
static boolean
farbaBodu(Poloha objekt,
         Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu.
static boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek.
static boolean
farbaBodu(Poloha objekt,
         int r,
         int g,
         int b,
         int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
static Farba
farbaNaMysi()
 Alias pre farbaNaMyši.
static boolean
farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
static boolean
farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
static boolean
farbaNaMysi(int r,
           int g,
           int b)
 Alias pre farbaNaMyši.
static boolean
farbaNaMysi(int r,
           int g,
           int b,
           int a)
 Alias pre farbaNaMyši.
static Farba
farbaNaMyši()
Zistí farbu bodu (jedného pixela) na súradniciach myši.
static boolean
farbaNaMyši(Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou.
static boolean
farbaNaMyši(Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou.
static boolean
farbaNaMyši(int r,
           int g,
           int b)
Zistí, či je farba bodu (jedného pixela) na súradniciach myši
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
static boolean
farbaNaMyši(int r,
           int g,
           int b,
           int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
static Farba
farbaPlochy()
 Číta farbu plochy sveta.
static void
farbaPlochy(Color nováFarba)
 Nastaví farbu plochy sveta.
static void
farbaPlochy(Farebnosť objekt)
Nastaví farbu plochy sveta podľa farby zadaného objektu.
static Farba
farbaPlochy(int r,
           int g,
           int b)
Nastaví farbu plochy sveta.
static Farba
farbaPlochy(int r,
           int g,
           int b,
           int a)
Nastaví farbu a (ne)priehľadnosť plochy sveta.
static Farba
farbaPozadia()
 Čítaj farbu pozadia sveta.
static void
farbaPozadia(Color nováFarba)
 Nastav farbu pozadia sveta.
static void
farbaPozadia(Farebnosť objekt)
Nastaví farbu pozadia sveta podľa farby zadaného objektu.
static Farba
farbaPozadia(int r,
            int g,
            int b)
Nastav farbu pozadia sveta.
static Farba
farbaPozadia(int r,
            int g,
            int b,
            int a)
Nastav farbu a (ne)priehľadnosť pozadia sveta.
static Farba
farbaPozadiaTextu()
Zistí aktuálnu farbu pozadia výpisu nových textov stropu.
static void
farbaPozadiaTextu(Color nováFarba)
Nastav farbu pozadia textov stropu.
static void
farbaPozadiaTextu(Farebnosť objekt)
Nastav farbu pozadia textov stropu.
static Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b)
Nastav farbu pozadia textov stropu.
static Farba
farbaPozadiaTextu(int r,
                 int g,
                 int b,
                 int a)
Nastav farbu pozadia textov stropu.
static Farba
farbaTextu()
Zistí aktuálnu farbu výpisu nových textov stropu.
static void
farbaTextu(Color nováFarba)
Nastav farbu textov stropu.
static void
farbaTextu(Farebnosť objekt)
Nastav farbu textov stropu.
static Farba
farbaTextu(int r,
          int g,
          int b)
Nastav farbu textov stropu.
static Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastav farbu textov stropu.
static void
formulujChybuSkriptu(int kódSkriptu)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 predvoleným počtom znakov (60) a predvoleným titulkom
 chybového dialógu ("Chyba skriptu…").
static void
formulujChybuSkriptu(int kódSkriptu,
                    int šírkaRiadka)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 zadaným počtom znakov a predvoleným titulkom chybového dialógu
 ("Chyba skriptu…").
static void
formulujChybuSkriptu(int kódSkriptu,
                    String titulokChyby)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 predvoleným počtom znakov (60) a zadaným titulkom
 chybového dialógu.
static void
formulujChybuSkriptu(int kódSkriptu,
                    String titulokChyby,
                    int šírkaRiadka)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 zadaným počtom znakov a zadaným titulkom chybového dialógu.
static double
frekvenciaNoty(int nota,
              int oktáva)
Vypočíta harmonickú frekvenciu tónu na základe zadaného
 poradového čísla noty (odporúčané sú hodnoty 1 až 12) a oktávy
 (odporúčané sú hodnoty −1 až 9).
static knižnica.podpora.BeepChannel
generatorTonov()
 Alias pre generátorTónov.
static knižnica.podpora.BeepChannel
generátorTónov()
Táto metóda sprostredkúva prístup k vnútornej inštancii
 generátora tónov (
BeepChannel).
static Graphics2D
grafika()
Vráti grafický objekt sveta na kreslenie v reakcii ObsluhaUdalostí.dokreslenie().
static boolean
grafikaDoSchranky()
 Alias pre obrázokDoSchránky.
static boolean
grafikaDoSchránky()
 Alias pre obrázokDoSchránky.
static Zoznam&lt;String&gt;
historiaVstupnehoRiadka()
 Alias pre históriaVstupnéhoRiadka.
static Zoznam&lt;String&gt;
históriaVstupnéhoRiadka()
Vráti zoznam reťazcov histórie vstupného riadka.
static void
hlasitostPreZvuky(double miera,
                 Object... súbory)
 Alias pre hlasitosťPreZvuky
static void
hlasitosťPreZvuky(double miera,
                 Object... súbory)
Nastaví hromadne hlasitosť pre všetky uvedené zvuky.
static void
hlasitostPreZvuky(double miera,
                 String[] súbory)
 Alias pre hlasitosťPreZvuky
static void
hlasitosťPreZvuky(double miera,
                 String[] súbory)
Nastaví hromadne hlasitosť pre všetky uvedené zvuky.
static JPanel
hlavnyPanel()
 Alias pre hlavnýPanel.
static JPanel
hlavnýPanel()
Poskytne komponent hlavného panela vloženého v hlavnom okne
 aplikácie (vo svete).
static GRobot
hlavnyRobot()
 Alias pre hlavnýRobot.
static GRobot
hlavnýRobot()
 Vráti hlavný robot.
static double
hornyOkraj()
 Alias pre hornýOkraj.
static double
hornýOkraj()
 Alias pre vrchnýOkraj.
static void
hrajTon(double frekvencia)
 Alias pre hrajTón.
static void
hrajTón(double frekvencia)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou.
static void
hrajTon(double frekvencia,
       double hlasitosť)
 Alias pre hrajTón.
static void
hrajTón(double frekvencia,
       double hlasitosť)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou
 so zadanou hlasitosťou (v rozsahu od 0.0 do 1.0).
static void
hrajTon(double frekvencia,
       double hlasitosť,
       double trvanie)
 Alias pre hrajTón.
static void
hrajTón(double frekvencia,
       double hlasitosť,
       double trvanie)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou
 so zadanou hlasitosťou (v rozsahu od 0.0 do 1.0)
 a s dĺžkou trvania prehrávania v sekundách.
static boolean
hraZvukNaPozadi()
 Alias pre hráZvukNaPozadí.
static boolean
hráZvukNaPozadí()
Zistí, či je aktívne prehrávanie zvuku na pozadí, ktoré bolo
 spustené metódou zvukNaPozadí.
static void
chyba(String chyba)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 chyby.
static void
chyba(String chyba,
     String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 chyby.
static boolean
chybaSystemovejIkony(String chyba)
 Alias pre chybaSystémovejIkony.
static boolean
chybaSystémovejIkony(String chyba)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 chybové oznámenie.
static boolean
chybaSystemovejIkony(String chyba,
                    String titulok)
 Alias pre chybaSystémovejIkony.
static boolean
chybaSystémovejIkony(String chyba,
                    String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 chybové oznámenie s titulkom.
static Obrazok
ikona()
Prečíta ikonu okna aplikácie a prevedie ju na obrázok.
static void
ikona(Image obrázok)
Nastaví oknu aplikácie ikonu podľa zadaného obrázka.
static void
ikona(String súbor)
 Nastaví oknu aplikácie novú ikonu.
static boolean
informaciaSystemovejIkony(String informácia)
 Alias pre informáciaSystémovejIkony.
static boolean
informáciaSystémovejIkony(String informácia)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 informačné oznámenie.
static boolean
informaciaSystemovejIkony(String informácia,
                         String titulok)
 Alias pre informáciaSystémovejIkony.
static boolean
informáciaSystémovejIkony(String informácia,
                         String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 informačné oznámenie s titulkom.
static String
interaktivnaInstancia()
 Alias pre interaktívnaInštancia.
static void
interaktivnaInstancia(String inštancia)
 Alias pre interaktívnaInštancia.
static String
interaktívnaInštancia()
 Vráti aktívnu inštanciu interaktívneho režimu alebo
 null.
static void
interaktívnaInštancia(String inštancia)
 Nastaví alebo zruší aktívnu inštanciu
 pre interaktívny
 režim.
static boolean
interaktivnyRezim()
 Alias pre interaktívnyRežim.
static void
interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
static boolean
interaktívnyRežim()
Zistí stav interaktívneho režimu pre svet.
static void
interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre inštanciu sveta.
static double
intervalCasovaca()
 Alias pre intervalČasovača.
static double
intervalČasovača()
Vráti časový interval časovača v sekundách.
static boolean
jePrvocislo(long číslo)
 Alias pre jePrvočíslo.
static boolean
jePrvočíslo(long číslo)
Overí, či zadané číslo je prvočíslo.
static Vlnenie
jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
static Vlnenie
jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
static int
kodPoslednejChyby()
 Alias pre kódPoslednejChyby.
static int
kódPoslednejChyby()
Získa kód poslednej chyby, ktorá nastala počas vykonávania
 príkazov interaktívneho režimu alebo skriptu.
static Súbor
konfiguracnySubor()
 Alias pre konfiguračnýSúbor.
static Súbor
konfiguračnýSúbor()
Vráti inštanciu konfiguračného súboru na účely úpravy jeho parametrov,
 napríklad na úpravu predvolenej sekcie automatickej konfigurácie.
static void
koniec()
Skončí aplikáciu bez opýtania.
static void
koniec(int kód)
Skončí aplikáciu s návratovým kódom pre opreračný systém.
static boolean
kreslenie()
Overí, či je automatické prekresľovanie sveta zapnuté.
static void
kresli()
Zapne automatické prekresľovanie sveta, ktoré bolo vypnuté metódou
 nekresli.
static void
kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na podlahu.
static void
kresli(Shape tvar,
      GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na podlahu.
static double
kubickaAproximacia(double v0,
                  double v1,
                  double v2,
                  double v3,
                  double t)
 Alias pre kubickáAproximácia.
static double
kubickáAproximácia(double v0,
                  double v1,
                  double v2,
                  double v3,
                  double t)
Kubická aproximácia je počítaná zo štyroch vstupných hodnôt
 (a parametra).
static double
kubickaInterpolacia(double v0,
                   double v1,
                   double v2,
                   double v3,
                   double t)
 Alias pre kubickáInterpolácia.
static double
kubickáInterpolácia(double v0,
                   double v1,
                   double v2,
                   double v3,
                   double t)
Kubická interpolácia je počítaná zo štyroch vstupných hodnôt
 (a parametra).
static double
kvadratickaAproximacia(double a,
                      double b,
                      double c,
                      double t)
 Alias pre kvadratickáAproximácia.
static double
kvadratickáAproximácia(double a,
                      double b,
                      double c,
                      double t)
Kvadratická aproximácia je počítaná z troch vstupných hodnôt
 (a parametra).
static double
kvadratickaInterpolacia(double a,
                       double b,
                       double c,
                       double t)
 Alias pre kvadratickáInterpolácia.
static double
kvadratickáInterpolácia(double a,
                       double b,
                       double c,
                       double t)
Kvadratická interpolácia je počítaná z troch vstupných hodnôt
 (a parametra).
static double
lavyOkraj()
 Alias pre ľavýOkraj.
static double
ľavýOkraj()
 Zistí najmenšiu aktuálne viditeľnú x-ovú súradnicu
 plátien (podlahy alebo stropu).
static boolean
lenRezimLadenia()
 Alias pre lenRežimLadenia.
static boolean
lenRežimLadenia()
Zistí, či je zapnutý režim ladenia programovacieho rámca
 GRobot bez ohľadu na režim výpisu chybových hlásení rámca.
static double
linearnaInterpolacia(double a,
                    double b,
                    double t)
 Alias pre lineárnaInterpolácia.
static double
lineárnaInterpolácia(double a,
                    double b,
                    double t)
Táto metóda slúži na parametrické vypočítanie hodnoty ležiacej
 medzi dvomi zadanými hodnotami.
static boolean
maVlnenie()
 Alias pre máVlnenie.
static boolean
máVlnenie()
Overí, či má svet definovanú inštanciu vlnenia.
static boolean
maximalizovany()
 Alias pre maximalizovaný.
static boolean
maximalizovaný()
Zistí, či je okno sveta v maximalizovanom stave.
static void
maximalizuj()
Pokúsi sa prepnúť okno sveta do maximalizovaného stavu.
static double
maximalneX()
 Alias pre najväčšieX.
static double
maximálneX()
 Alias pre najväčšieX.
static double
maximalneY()
 Alias pre najväčšieY.
static double
maximálneY()
 Alias pre najväčšieY.
static Bod
mierkaVyplne()
 Alias pre mierkaVýplne.
static Bod
mierkaVýplne()
Vráti bod s hodnotami mierky obrázkových dlaždicových výplní
 v osiach x a y.
static void
mierkaVyplne(double mierka)
 Alias pre mierkaVýplne.
static void
mierkaVýplne(double mierka)
Nastaví mierku obrázkových dlaždicových výplní (v oboch osiach
 naraz).
static void
mierkaVyplne(double mx,
            double my)
 Alias pre mierkaVýplne.
static void
mierkaVýplne(double mx,
            double my)
Nastaví mierku obrázkových dlaždicových výplní jednotlivo pre
 osi x a y.
static boolean
minimalizovany()
 Alias pre minimalizovaný.
static boolean
minimalizovaný()
Zistí, či je okno sveta v minimalizovanom stave.
static void
minimalizuj()
Pokúsi sa prepnúť okno sveta do minimalizovaného stavu.
static double
minimalneX()
 Alias pre najmenšieX.
static double
minimálneX()
 Alias pre najmenšieX.
static double
minimalneY()
 Alias pre najmenšieY.
static double
minimálneY()
 Alias pre najmenšieY.
static boolean
mysJeZachytena()
 Alias pre myšJeZachytená.
static String
mysVAktivnomSlove()
 Alias pre myšVAktívnomSlove.
static boolean
myšJeZachytená()
Overí, či je myš zachytená v okne sveta.
static String
myšVAktívnomSlove()
Overí, či sa súradnice kurzora myši nachádzajú v oblasti niektorého
 z aktívnych slov.
static long
nahodneCeleCislo()
 Alias pre náhodnéCeléČíslo.
static long
nahodneCeleCislo(long hodnota)
 Alias pre náhodnéCeléČíslo.
static long
nahodneCeleCislo(long min,
                long max)
 Alias pre náhodnéCeléČíslo.
static long
náhodnéCeléČíslo()
Generovanie náhodného celého čísla v celom rozsahu long.
static long
náhodnéCeléČíslo(long hodnota)
Generovanie náhodného celého čísla v rozsahu od nula
 po zadanú hodnotu parametra (vrátane).
static long
náhodnéCeléČíslo(long min,
                long max)
Generovanie náhodného celého čísla v zadanom rozsahu.
static double
nahodneRealneCislo()
 Alias pre náhodnéReálneČíslo.
static double
nahodneRealneCislo(double hodnota)
 Alias pre náhodnéReálneČíslo.
static double
nahodneRealneCislo(double min,
                  double max)
 Alias pre náhodnéReálneČíslo.
static double
náhodnéReálneČíslo()
Generovanie náhodného reálneho čísla v rozsahu od nula
 po jeden.
static double
náhodnéReálneČíslo(double hodnota)
Generovanie náhodného reálneho čísla v rozsahu od nula
 po zadanú hodnotu parametra.
static double
náhodnéReálneČíslo(double min,
                  double max)
Generovanie náhodného reálneho čísla v zadanom rozsahu.
static Skript
nahrajSkript(String súbor)
Toto je klon metódy nahrajSkript(názov, súbor), ktorý bol definovaný preto, aby
 bolo možné nahrávať zo súborov skripty aj v rámci iných
 skriptov.
static Skript
nahrajSkript(String názov,
            String súbor)
Nahrá skript zo súboru a uloží ho do vnútornej pamäte pod
 zadaným názvom.
static Bod
najblizsiBodNaKruznici(double x0,
                      double y0,
                      double x1,
                      double y1,
                      double r)
 Alias pre najbližšíBodNaKružnici.
static Bod
najblizsiBodNaKruznici(Poloha V,
                      Poloha S,
                      double r)
 Alias pre najbližšíBodNaKružnici.
static Bod
najblizsiBodNaPriamke(double x0,
                     double y0,
                     double x1,
                     double y1,
                     double x2,
                     double y2)
 Alias pre najbližšíBodNaPriamke.
static Bod
najblizsiBodNaPriamke(Poloha[] poleBodov)
 Alias pre najbližšíBodNaPriamke.
static Bod
najblizsiBodNaPriamke(Poloha V,
                     Poloha A,
                     Poloha B)
 Alias pre najbližšíBodNaPriamke.
static Bod
najblizsiBodNaUsecke(double x0,
                    double y0,
                    double x1,
                    double y1,
                    double x2,
                    double y2)
 Alias pre najbližšíBodNaÚsečke.
static Bod
najblizsiBodNaUsecke(Poloha[] poleBodov)
 Alias pre najbližšíBodNaÚsečke.
static Bod
najblizsiBodNaUsecke(Poloha V,
                    Poloha A,
                    Poloha B)
 Alias pre najbližšíBodNaÚsečke.
static Bod
najbližšíBodNaKružnici(double x0,
                      double y0,
                      double x1,
                      double y1,
                      double r)
Nájde najbližší bod na kružnici so stredom S[x1, y1]
 a polomerom r k zadanému voľnému bodu V[x0, y0] a vráti jeho
 polohu v objekte typu Bod.
static Bod
najbližšíBodNaKružnici(Poloha V,
                      Poloha S,
                      double r)
Nájde najbližší bod na kružnici so stredom S a polomerom
 r k zadanému voľnému bodu V a vráti jeho polohu v objekte typu
 Bod.
static Bod
najbližšíBodNaPriamke(double x0,
                     double y0,
                     double x1,
                     double y1,
                     double x2,
                     double y2)
Nájde najbližší bod na priamke určenej dvomi bodmi A[x1, y1]
 a B[x2, y2] k zadanému voľnému bodu V[x0, y0] a vráti jeho
 súradnice v objekte typu Bod.
static Bod
najbližšíBodNaPriamke(Poloha[] poleBodov)
Nájde najbližší bod na priamke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
static Bod
najbližšíBodNaPriamke(Poloha V,
                     Poloha A,
                     Poloha B)
Nájde najbližší bod na priamke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
static Bod
najbližšíBodNaÚsečke(double x0,
                    double y0,
                    double x1,
                    double y1,
                    double x2,
                    double y2)
Nájde najbližší bod na úsečke určenej dvomi bodmi A[x1, y1]
 a B[x2, y2] k zadanému voľnému bodu V[x0, y0] a vráti jeho
 súradnice v objekte typu Bod.
static Bod
najbližšíBodNaÚsečke(Poloha[] poleBodov)
Nájde najbližší bod na úsečke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
static Bod
najbližšíBodNaÚsečke(Poloha V,
                    Poloha A,
                    Poloha B)
Nájde najbližší bod na úsečke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
static double
najmensieX()
 Alias pre najmenšieX.
static double
najmensieY()
 Alias pre najmenšieY.
static double
najmenšieX()
 Zistí najmenšiu x-ovú súradnicu sveta.
static double
najmenšieY()
 Zistí najmenšiu y-ovú súradnicu sveta.
static double
najvacsieX()
 Alias pre najväčšieX.
static double
najvacsieY()
 Alias pre najväčšieY.
static double
najväčšieX()
 Zistí najväčšiu x-ovú súradnicu sveta.
static double
najväčšieY()
 Zistí najväčšiu y-ovú súradnicu sveta.
static int
nasobTiky()
 Alias pre násobTiky.
static int
násobTiky()
Zistí aktuálnu hodnotu násobičky tikov časovača.
static void
nasobTiky(int násobTiky)
 Alias pre násobTiky.
static void
násobTiky(int počet)
Upraví hodnotu násobičky tikov časovača.
static String
nazovKonfiguracnehoSuboru()
 Alias pre názovKonfiguračnéhoSúboru.
static String
názovKonfiguračnéhoSúboru()
Vráti naposledy použitý názov konfiguračného súboru.
static boolean
neboloPrekreslene()
 Alias pre nebolPrekreslený.
static boolean
neboloPrekreslené()
 Alias pre nebolPrekreslený.
static boolean
nebolPrekresleny()
 Alias pre nebolPrekreslený.
static boolean
nebolPrekreslený()
Zistí stav príznaku zamietnutej požiadavky na automatické
 prekreslenie.
static void
nekresli()
Vypne predvolenú implementáciu automatického prekresľovanie
 sveta.
static void
neskryvajVstupnyRiadok()
 Alias pre neskrývajVstupnýRiadok.
static void
neskrývajVstupnýRiadok()
Prikáže vstupnému riadku, aby sa neskrýval po potvrdení klávesom
 Enter.
static boolean
neskryvajVstupnyRiadok(boolean začniVstup)
 Alias pre neskrývajVstupnýRiadok.
static boolean
neskrývajVstupnýRiadok(boolean začniVstup)
Prikáže vstupnému riadku, aby sa neskrýval po potvrdení klávesom
 Enter.
static void
nespi()
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku.
static void
nespi(int novýInterval)
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku.
static void
nespi(int novýInterval,
     boolean ajČasovač)
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku.
static void
neuchovajHistoriuVstupnehoRiadka()
 Alias pre neuchovajHistóriuVstupnéhoRiadka.
static void
neuchovajHistóriuVstupnéhoRiadka()
Deaktivuje automatické uchovávanie histórie vstupných riadkov
 do konfiguračného
 súboru.
static void
nezalamujTexty()
Vypne zalamovanie textov vnútornej konzoly stropu.
static boolean
normalny()
 Alias pre normálny.
static boolean
normálny()
Zistí, či je okno sveta v normálnom stave.
static void
novyKurzorMysi(Image predloha,
              double x,
              double y,
              String meno)
 Alias pre novýKurzorMyši.
static void
novyKurzorMysi(Image predloha,
              int x,
              int y,
              String meno)
 Alias pre novýKurzorMyši.
static void
novýKurzorMyši(Image predloha,
              double x,
              double y,
              String meno)
 Alias pre novýKurzorMyši.
static void
novýKurzorMyši(Image predloha,
              int x,
              int y,
              String meno)
Definuje nový kurzor myši použiteľný v hlavnom okne aplikácie.
static void
obnov()
Pokúsi sa prepnúť okno sveta do normálneho stavu.
static BufferedImage
obrazok()
 Alias pre obrázok.
static BufferedImage
obrázok()
Vráti objekt typu BufferedImage obsahujúci
 aktuálnu obrazovú informáciu sveta.
static void
obrazok(double x,
       double y,
       Image obrázok)
 Alias pre obrázok.
static void
obrázok(double x,
       double y,
       Image obrázok)
Nakreslí na zadaných súradniciach na podlahe obrázok.
static void
obrazok(double x,
       double y,
       String súbor)
 Alias pre obrázok.
static void
obrázok(double x,
       double y,
       String súbor)
Nakreslí na zadaných súradniciach na podlahe obrázok.
static void
obrazok(Image obrázok)
 Alias pre obrázok.
static void
obrázok(Image obrázok)
Nakreslí v strede podlahy zadaný obrázok.
static void
obrazok(Poloha objekt,
       Image obrázok)
 Alias pre obrázok.
static void
obrázok(Poloha objekt,
       Image obrázok)
Nakreslí na súradniciach zadaného objektu na podlahe obrázok.
static void
obrazok(Poloha objekt,
       String súbor)
 Alias pre obrázok.
static void
obrázok(Poloha objekt,
       String súbor)
Nakreslí na súradniciach zadaného objektu na podlahe obrázok.
static void
obrazok(String súbor)
 Alias pre obrázok.
static void
obrázok(String súbor)
Nakreslí v strede podlahy zadaný obrázok.
static boolean
obrazokDoSchranky()
 Alias pre obrázokDoSchránky.
static boolean
obrázokDoSchránky()
Vloží obrázok (grafiku) sveta do schránky.
static char
oddelovacDesatinnejCasti()
 Alias pre oddeľovačDesatinnejČasti.
static void
oddelovacDesatinnejCasti(char oddeľovač)
 Alias pre oddeľovačDesatinnejČasti.
static String
oddelovacPrvkovPola()
 Alias pre oddeľovačPrvkovPoľa.
static void
oddelovacPrvkovPola(String oddeľovač)
 Alias pre oddeľovačPrvkovPoľa.
static Character
oddelovacTisicov()
 Alias pre oddeľovačTisícov.
static void
oddelovacTisicov(Character oddeľovač)
 Alias pre oddeľovačTisícov.
static char
oddeľovačDesatinnejČasti()
Zistí, aký oddeľovač desatinnej časti je aktuálne používaný pri
 výpisoch čísiel príkazmi vypíš,
 vypíšRiadok.
static void
oddeľovačDesatinnejČasti(char oddeľovač)
Nastaví hodnotu oddeľovača desatinnej časti, ktorý bude používaný
 pri výpisoch príkazmi vypíš,
 vypíšRiadok.
static String
oddeľovačPrvkovPoľa()
Zistí, aký oddeľovač prvkov je aktuálne používaný pri výpisoch polí
 príkazmi vypíš,
 vypíšRiadok.
static void
oddeľovačPrvkovPoľa(String oddeľovač)
Nastaví hodnotu oddeľovača prvkov poľa, ktorý bude používaný pri
 výpisoch polí príkazmi vypíš,
 vypíšRiadok.
static Character
oddeľovačTisícov()
Zistí, aký oddeľovač tisícov je aktuálne používaný pri výpisoch
 čísiel príkazmi vypíš,
 vypíšRiadok.
static void
oddeľovačTisícov(Character oddeľovač)
Nastaví hodnotu oddeľovača tisícov, ktorý bude používaný pri
 výpisoch príkazmi vypíš,
 vypíšRiadok.
static void
odlozCasovac(double čas)
 Alias pre odložČasovač.
static void
odložČasovač(double čas)
Odloží časovač o zadaný časový interval v sekundách.
static void
odoberKlavesovuSkratku(String príkaz)
 Alias pre odoberKlávesovúSkratku.
static void
odoberKlávesovúSkratku(String príkaz)
Odoberie definovanú klávesovú skratku, ktorá je previazaná so
 zadaným príkazom.
static void
odstranVlnenie()
 Alias pre odstráňVlnenie.
static void
odstráňVlnenie()
Ukončí vlnenie sveta a úplne odstráni inštanciu vlnenia,
 ktorá bola pre neho definovaná z prostredia programovacieho
 rámca GRobot.
static JFrame
oknoCelejObrazovky()
Ak je svet v režime celej obrazovky,
 tak táto metóda vráti inštanciu okna celej
 obrazovky, inak metóda vráti hodnotu null.
static int
opakovaniePerlina()
Vráti hodnotu opakovania vzoru generátora Perlinovho šumu.
static void
opakovaniePerlina(int opakovanie)
Nastaví novú hodnotu opakovania vzoru generátora Perlinovho
 šumu.
static int
otazka(String otázka)
 Alias pre otázka.
static int
otázka(String otázka)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static int
otazka(String otázka,
      Object[] tlačidlá)
 Alias pre otázka.
static int
otázka(String otázka,
      Object[] tlačidlá)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static int
otazka(String otázka,
      Object[] tlačidlá,
      int predvolenéTlačidlo)
 Alias pre otázka.
static int
otázka(String otázka,
      Object[] tlačidlá,
      int predvolenéTlačidlo)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static int
otazka(String otázka,
      String titulok)
 Alias pre otázka.
static int
otázka(String otázka,
      String titulok)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static int
otazka(String otázka,
      String titulok,
      Object[] tlačidlá)
 Alias pre otázka.
static int
otázka(String otázka,
      String titulok,
      Object[] tlačidlá)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static int
otazka(String otázka,
      String titulok,
      Object[] tlačidlá,
      int predvolenéTlačidlo)
 Alias pre otázka.
static int
otázka(String otázka,
      String titulok,
      Object[] tlačidlá,
      int predvolenéTlačidlo)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
static double
otocenieVyplne()
 Alias pre otočenieVýplne.
static void
otocenieVyplne(double uhol)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(double uhol,
              double sx,
              double sy)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(double uhol,
              Poloha poloha)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(double uhol,
              Shape tvar)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(Smer smer)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(Smer smer,
              double sx,
              double sy)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(Smer smer,
              Poloha poloha)
 Alias pre otočenieVýplne.
static void
otocenieVyplne(Smer smer,
              Shape tvar)
 Alias pre otočenieVýplne.
static void
otocenieVyplneNaMys()
 Alias pre otočenieVýplneNaMyš.
static double
otočenieVýplne()
Vráti hodnotu pootočenia obrázkových dlaždicových výplní.
static void
otočenieVýplne(double uhol)
Nastaví nový uhol pootočenia obrázkových dlaždicových výplní.
static void
otočenieVýplne(double uhol,
              double sx,
              double sy)
Nastaví nový uhol pootočenia a zároveň nový relatívny stred
 otáčania obrázkových dlaždicových výplní.
static void
otočenieVýplne(double uhol,
              Poloha poloha)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy).
static void
otočenieVýplne(double uhol,
              Shape tvar)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy).
static void
otočenieVýplne(Smer smer)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol).
static void
otočenieVýplne(Smer smer,
              double sx,
              double sy)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy).
static void
otočenieVýplne(Smer smer,
              Poloha poloha)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy).
static void
otočenieVýplne(Smer smer,
              Shape tvar)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy).
static void
otočenieVýplneNaMyš()
Táto metóda použije súradnice myši na vypočítanie nového
 pootočenia obrázkových výplní.
static boolean
otvor(String súbor)
Pokúsi sa otvoriť zadaný súbor v predvolenej aplikácii podľa
 nastavení operačného systému.
static boolean
otvor(String súbor,
     boolean naÚpravu)
Pokúsi sa otvoriť (spustiť) alebo otvoriť na úpravy zadaný
 súbor v predvolenej aplikácii podľa nastavení operačného
 systému.
static boolean
otvorSuborNaUlozenieTonu(String názov)
 Alias pre otvorSúborNaUloženieTónu.
static boolean
otvorSuborNaUlozenieTonu(String názov,
                        boolean prepísať)
 Alias pre otvorSúborNaUloženieTónu.
static boolean
otvorSúborNaUloženieTónu(String názov)
Umožní začať záznam všetkých generovaných tónov, ktorý sa po
 zavolaní párovej metódy zavriSúborNaUloženieTónu uloží do súboru s požadovaným názvom.
static boolean
otvorSúborNaUloženieTónu(String názov,
                        boolean prepísať)
Umožní začať záznam všetkých generovaných tónov, ktorý sa po
 zavolaní párovej metódy zavriSúborNaUloženieTónu uloží do súboru s požadovaným názvom.
static boolean
otvorVPredvolenejAplikacii(String súbor)
 Alias pre otvorVPredvolenejAplikácii.
static boolean
otvorVPredvolenejAplikácii(String súbor)
 Alias pre otvorVPredvolenejAplikácii.
static boolean
otvorVPredvolenejAplikacii(String súbor,
                          boolean naÚpravu)
 Alias pre otvorVPredvolenejAplikácii.
static boolean
otvorVPredvolenejAplikácii(String súbor,
                          boolean naÚpravu)
 Alias pre otvorVPredvolenejAplikácii.
static boolean
otvorWebovyOdkaz(String uri)
 Alias pre otvorWebovýOdkaz.
static boolean
otvorWebovýOdkaz(String uri)
Pokúsi sa použiť zadaný textový reťazec ako webovú adresu
 a otvoriť ju v predvolenom prehliadači operačného systému.
static boolean
overujPociatocnuPolohuOkna()
 Alias pre overujPočiatočnúPolohuOkna.
static void
overujPociatocnuPolohuOkna(boolean overuj)
 Alias pre overujPočiatočnúPolohuOkna.
static boolean
overujPočiatočnúPolohuOkna()
Zistí aktuálny stav automatického overovania počiatočnej polohy
 okna po jeho inicializácii.
static void
overujPočiatočnúPolohuOkna(boolean overuj)
Zmení stav automatického overovania počiatočnej polohy okna po
 jeho inicializácii.
static double
perlin(double x,
      double y,
      double z)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami.
static double
perlin(double x,
      double y,
      double z,
      int početOktáv)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami a so zadaným počtom obsiahnutých oktáv.
static double
perlin(double x,
      double y,
      double z,
      int početOktáv,
      double stabilita)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami a so zadaným počtom obsiahnutých oktáv.
static void
pipni()
 Alias pre pípni.
static void
pípni()
Aplikácia vydá štandardný zvuk operačného systému.
static void
pipni(String názov)
 Alias pre pípni.
static void
pípni(String názov)
Aplikácia vydá štandardný zvuk operačného systému Windows podľa
 vloženého pomenovania.
static Pismo
pismo()
 Alias pre písmo.
static Písmo
písmo()
Čítaj aktuálny typ písma textov stropu.
static void
pismo(Font novéPísmo)
 Alias pre písmo.
static void
písmo(Font novéPísmo)
Nastav nový typ písma textov stropu.
static Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
static Písmo
písmo(String názov,
     double veľkosť)
Nastav nový typ písma textov stropu.
static void
pisNa(double x,
     double y,
     Object... argumenty)
 Alias pre píšNa.
static void
pisRiadokNa(double x,
           double y,
           Object... argumenty)
 Alias pre píšRiadokNa.
static void
píšNa(double x,
     double y,
     Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope.
static void
píšRiadokNa(double x,
           double y,
           Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope a posunie sa na ďalší riadok.
static int
pocetObrazoviek()
 Alias pre početZariadení.
static int
pocetZariadení()
 Alias pre početZariadení.
static int
početObrazoviek()
 Alias pre početZariadení.
static int
početZariadení()
Zistí počet obrazovkových zariadení, ktoré sú dostupné na tomto
 počítači.
static PoložkaPonuky
polozkaPonukyKoniec()
 Alias pre položkaPonukyKoniec.
static PoložkaPonuky
polozkaPonukyPrekreslit()
 Alias pre položkaPonukyPrekresliť.
static PoložkaPonuky
polozkaPonukyVymazat()
 Alias pre položkaPonukyVymazať.
static PoložkaPonuky
položkaPonukyKoniec()
Poskytne preddefinovanú položku „Koniec“ na prípadné úpravy.
static PoložkaPonuky
položkaPonukyPrekresliť()
Poskytne preddefinovanú položku „Prekresliť“ na prípadné úpravy.
static PoložkaPonuky
položkaPonukyVymazať()
Poskytne preddefinovanú položku „Vymazať“ na prípadné úpravy.
static double
polPerlina(double x,
          double y,
          double z)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami.
static double
polPerlina(double x,
          double y,
          double z,
          int početOktáv)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami a so zadaným počtom obsiahnutých
 oktáv.
static double
polPerlina(double x,
          double y,
          double z,
          int početOktáv,
          double stabilita)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami a so zadaným počtom obsiahnutých
 oktáv.
static double
pootocenieVyplne()
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(double uhol)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(double uhol,
                double sx,
                double sy)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(double uhol,
                Poloha poloha)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(double uhol,
                Shape tvar)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(Smer smer)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(Smer smer,
                double sx,
                double sy)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(Smer smer,
                Poloha poloha)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplne(Smer smer,
                Shape tvar)
 Alias pre pootočenieVýplne.
static void
pootocenieVyplneNaMys()
 Alias pre pootočenieVýplneNaMyš.
static double
pootočenieVýplne()
Vráti hodnotu pootočenia obrázkových dlaždicových výplní.
static void
pootočenieVýplne(double uhol)
Nastaví nový uhol pootočenia obrázkových dlaždicových výplní.
static void
pootočenieVýplne(double uhol,
                double sx,
                double sy)
Nastaví nový uhol pootočenia a zároveň nový relatívny stred
 otáčania obrázkových dlaždicových výplní.
static void
pootočenieVýplne(double uhol,
                Poloha poloha)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy).
static void
pootočenieVýplne(double uhol,
                Shape tvar)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy).
static void
pootočenieVýplne(Smer smer)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol).
static void
pootočenieVýplne(Smer smer,
                double sx,
                double sy)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy).
static void
pootočenieVýplne(Smer smer,
                Poloha poloha)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy).
static void
pootočenieVýplne(Smer smer,
                Shape tvar)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy).
static void
pootočenieVýplneNaMyš()
Táto metóda použije súradnice myši na vypočítanie nového
 pootočenia obrázkových výplní.
static String
popisVstupnehoRiadka()
 Alias pre popisVstupnéhoRiadka.
static String
popisVstupnéhoRiadka()
 Získa text popisu vstupného riadka.
static void
popisVstupnehoRiadka(String výzva)
 Alias pre popisVstupnéhoRiadka.
static void
popisVstupnéhoRiadka(String výzva)
 Nastaví text popisu vstupného riadka.
static Object
poslednaNavratovaHodnota()
 Alias pre poslednáNávratováHodnota.
static Object
poslednáNávratováHodnota()
Získa návratovú hodnotu naposledy vykonaného príkazu
 interaktívneho režimu
 alebo skriptu.
static boolean
posliEmail(String... údajeSprávy)
 Alias pre pošliEmail.
static Bod
posunutieVyplne()
 Alias pre posunutieVýplne.
static Bod
posunutieVýplne()
Vráti bod so súradnicami relatívneho posunutia obrázkových
 dlaždicových výplní.
static void
posunutieVyplne(double x,
               double y)
 Alias pre posunutieVýplne.
static void
posunutieVýplne(double x,
               double y)
Nastaví relatívne posunutie obrázkových dlaždicových výplní.
static void
posunutieVyplne(Poloha poloha)
 Alias pre posunutieVýplne.
static void
posunutieVýplne(Poloha poloha)
Táto metóda funguje podobne ako metóda
 posunutieVýplne(x, y).
static void
posunutieVyplne(Shape tvar)
 Alias pre posunutieVýplne.
static void
posunutieVýplne(Shape tvar)
Táto metóda funguje podobne ako metóda
 posunutieVýplne(x, y).
static void
posunutieVyplneNaMys()
 Alias pre posunutieVýplneNaMyš.
static void
posunutieVýplneNaMyš()
Táto metóda číta súradnice myši, ktoré použije na posunutie
 počiatku obrázkových výplní.
static boolean
pošliEmail(String... údajeSprávy)
Otvorí okno na napísanie novej správy elektronickej pošty
 predvoleného e-mailového klienta OS.
static void
potvrdVstup()
 Alias pre potvrďVstup.
static void
potvrďVstup()
Vykoná pre vstupný riadok rovnakú akciu ako pri stlačení klávesu
 Enter.
static void
pouziKonfiguraciu()
 Alias pre použiKonfiguráciu.
static void
pouziKonfiguraciu(int x,
                 int y,
                 int šírka,
                 int výška)
 Alias pre použiKonfiguráciu.
static void
pouziKonfiguraciu(String názovSúboru)
 Alias pre použiKonfiguráciu.
static void
pouziKonfiguraciu(String názovSúboru,
                 int x,
                 int y,
                 int šírka,
                 int výška)
 Alias pre použiKonfiguráciu.
static void
použiKonfiguráciu()
Zapne automatické spracovanie konfiguračného súboru sveta.
static void
použiKonfiguráciu(int x,
                 int y,
                 int šírka,
                 int výška)
Zapne automatickú
 konfiguráciu, pričom umožní zadať počiatočnú polohu a rozmery
 okna.
static void
použiKonfiguráciu(String názovSúboru)
Zapne automatické spracovanie konfiguračného súboru sveta.
static void
použiKonfiguráciu(String názovSúboru,
                 int x,
                 int y,
                 int šírka,
                 int výška)
Zapne automatickú
 konfiguráciu, pričom umožní zadať počiatočnú polohu a rozmery
 okna.
static void
povolViacnasobnuObsluhuUdalosti()
 Alias pre povoľViacnásobnúObsluhuUdalostí.
static void
povoľViacnásobnúObsluhuUdalostí()
Po spustení tejto metódy bude možné vytváranie viacerých verzií
 obsluhy udalostí, ktoré môžu byť
 neskôr podľa potreby uvedené do činnosti metódou presmerujObsluhuUdalostí.
static double
pravyOkraj()
 Alias pre pravýOkraj.
static double
pravýOkraj()
 Zistí najväčšiu aktuálne viditeľnú x-ovú súradnicu
 plátien (podlahy alebo stropu).
static void
prebudCasovac()
 Alias pre prebuďČasovač.
static void
prebuďČasovač()
Prebudí časovač z „režimu spánku.“ Podrobnosti o užitočnosti
 spánku časovača nájdete v opise metódy uspiČasovač.
static void
precitajKonfiguraciuSveta()
 Alias pre čítajKonfiguráciuSveta.
static void
precitajObrazky(Object... súbory)
 Alias pre čítajObrázky.
static void
precitajObrazky(String[] súbory)
 Alias pre čítajObrázky.
static Image
precitajObrazok(String súbor)
 Alias pre čítajObrázok.
static Zvuk
precitajZvuk(String súbor)
 Alias pre čítajZvuk.
static Zvuk
precitajZvuk(String súbor,
            boolean unikátny)
 Alias pre čítajZvuk.
static void
precitajZvuky(Object... súbory)
 Alias pre čítajZvuky.
static void
precitajZvuky(String[] súbory)
 Alias pre čítajZvuky.
static void
prečítajKonfiguráciuSveta()
 Alias pre čítajKonfiguráciuSveta.
static void
prečítajObrázky(Object... súbory)
 Alias pre čítajObrázky.
static void
prečítajObrázky(String[] súbory)
 Alias pre čítajObrázky.
static Image
prečítajObrázok(String súbor)
 Alias pre čítajObrázok.
static Zvuk
prečítajZvuk(String súbor)
 Alias pre čítajZvuk.
static Zvuk
prečítajZvuk(String súbor,
            boolean unikátny)
 Alias pre čítajZvuk.
static void
prečítajZvuky(Object... súbory)
 Alias pre čítajZvuky.
static void
prečítajZvuky(String[] súbory)
 Alias pre čítajZvuky.
static void
predvolenaFarbaPlochy()
 Alias pre predvolenáFarbaPlochy.
static void
predvolenáFarbaPlochy()
Nastaví predvolenú farbu plochy.
static void
predvolenaFarbaPozadia()
 Alias pre predvolenáFarbaPozadia.
static void
predvolenáFarbaPozadia()
Nastav predvolenú farbu pozadia.
static void
predvolenaFarbaPozadiaTextu()
 Alias pre predvolenáFarbaPozadiaTextu.
static void
predvolenáFarbaPozadiaTextu()
Zmení farbu pozadia textov stropu na predvolenú.
static void
predvolenaFarbaTextu()
 Alias pre predvolenáFarbaTextu.
static void
predvolenáFarbaTextu()
Zmení farbu textov stropu na predvolenú.
static String
predvolenaSekciaKonfiguracie()
 Alias pre predvolenáSekciaKonfigurácie.
static String
predvolenáSekciaKonfigurácie()
Vráti názov predvolenej sekcie.
static void
predvolenaSekciaKonfiguracie(String názov)
 Alias pre predvolenáSekciaKonfigurácie.
static void
predvolenáSekciaKonfigurácie(String názov)
Zmení názov predvolenej sekcie, ktorú používajú metódy automatickej
 konfigurácie.
static void
predvolenePismo()
 Alias pre predvolenéPísmo.
static void
predvolenéPísmo()
Nastav predvolený typ písma textov stropu.
static void
prekresli()
Jednorazovo prekreslí obsah sveta (bez ohľadu na použitie metódy
 nekresli).
static boolean
premennaExistuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennáExistuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennaJestvuje(String názov,
                Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
static boolean
premennáJestvuje(String názov,
                Class&lt;?&gt; typ)
Zistí, či premenná interaktívneho režimu so zadaným názvom a typom jestvuje (je
 definovaná).
static boolean
premenujPolozkuHlavnejPonuky(int ktorá,
                            String text)
 Alias pre premenujPoložkuHlavnejPonuky.
static boolean
premenujPolozkuHlavnejPonuky(int ktorá,
                            String text,
                            int mnemonickáSkratka)
 Alias pre premenujPoložkuHlavnejPonuky.
static boolean
premenujPoložkuHlavnejPonuky(int ktorá,
                            String text)
Premenuje zadanú položku hlavnej ponuky.
static boolean
premenujPoložkuHlavnejPonuky(int ktorá,
                            String text,
                            int mnemonickáSkratka)
Premenuje zadanú položku hlavnej ponuky.
static void
premiestniNaObrazovku()
 Alias pre premiestniNaZariadenie.
static void
premiestniNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
static void
premiestniNaZariadenie()
Umiestni okno sveta na predvolené zobrazovacie zariadenie.
static void
premiestniNaZariadenie(int zariadenie)
Umiestni okno sveta na určené zobrazovacie zariadenie.
static double
prepocitajSpatX(double x)
 Alias pre prepočítajSpäťX.
static double
prepocitajSpatY(double y)
 Alias pre prepočítajSpäťY.
static double
prepocitajX(double x)
 Alias pre prepočítajX.
static double
prepocitajY(double y)
 Alias pre prepočítajY.
static double
prepočítajSpäťX(double x)
Prepočíta zadanú x-ovú (horizontálnu) súradnicu zo súradnicového
 priestoru používaného v oblasti 2D počítačovej grafiky do
 súradnicového priestoru programovacieho rámca GRobot.
static double
prepočítajSpäťY(double y)
Prepočíta zadanú y-ovú (vertikálnu) súradnicu zo súradnicového
 priestoru používaného v oblasti 2D počítačovej grafiky do
 súradnicového priestoru programovacieho rámca GRobot.
static double
prepočítajX(double x)
Prepočíta zadanú x-ovú (horizontálnu) súradnicu zo súradnicového
 priestoru programovacieho rámca GRobot do súradnicového priestoru
 používaného v oblasti 2D počítačovej grafiky.
static double
prepočítajY(double y)
Prepočíta zadanú y-ovú (vertikálnu) súradnicu zo súradnicového
 priestoru programovacieho rámca GRobot do súradnicového priestoru
 používaného v oblasti 2D počítačovej grafiky.
static void
presmerujObsluhuUdalosti(ObsluhaUdalostí obsluha)
 Alias pre presmerujObsluhuUdalostí.
static void
presmerujObsluhuUdalostí(ObsluhaUdalostí obsluha)
Presmeruje spracovanie udalostí do inej inštancie triedy ObsluhaUdalostí.
static void
presunNaObrazovku()
 Alias pre premiestniNaZariadenie.
static void
presuňNaObrazovku()
 Alias pre premiestniNaZariadenie.
static void
presunNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
static void
presuňNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
static void
presunNaZariadenie()
 Alias pre premiestniNaZariadenie.
static void
presuňNaZariadenie()
 Alias pre premiestniNaZariadenie.
static void
presunNaZariadenie(int zariadenie)
 Alias pre premiestniNaZariadenie.
static void
presuňNaZariadenie(int zariadenie)
 Alias pre premiestniNaZariadenie.
static Long
prevezmiCeleCislo()
 Alias pre prevezmiCeléČíslo.
static Long
prevezmiCeléČíslo()
Vráti celé číslo zadané do vstupného riadka po potvrdení
 klávesom Enter.
static Double
prevezmiRealneCislo()
 Alias pre prevezmiReálneČíslo.
static Double
prevezmiReálneČíslo()
Vráti reálne číslo zadané do vstupného riadka po potvrdení
 klávesom Enter.
static String
prevezmiRetazec()
 Alias pre prevezmiReťazec.
static String
prevezmiReťazec()
Vráti reťazec zadaný do vstupného riadka po potvrdení klávesom
 Enter.
static String
prevezmiZruseneUdaje()
 Alias pre prevezmiZrušenéÚdaje.
static String
prevezmiZrušenéÚdaje()
Vráti reťazec, ktorý obsahoval vstupný riadok tesne pred zrušením
 klávesom Escape.
static void
pridajKlavesovuSkratku(String príkaz,
                      int kódKlávesu)
 Alias pre pridajKlávesovúSkratku.
static void
pridajKlávesovúSkratku(String príkaz,
                      int kódKlávesu)
Definuje novú klávesovú skratku s modifikátorom pre ponuky, ktorá
 bude previazaná so zadaným príkazom.
static void
pridajKlavesovuSkratku(String príkaz,
                      int kódKlávesu,
                      int modifikátor)
 Alias pre pridajKlávesovúSkratku.
static void
pridajKlávesovúSkratku(String príkaz,
                      int kódKlávesu,
                      int modifikátor)
Definuje novú klávesovú skratku, ktorá bude previazaná so zadaným
 príkazom.
static void
pridajKlavesovuSkratku(String príkaz,
                      int kódKlávesu,
                      int modifikátor,
                      boolean ajVstupnýRiadok)
 Alias pre pridajKlávesovúSkratku.
static void
pridajKlávesovúSkratku(String príkaz,
                      int kódKlávesu,
                      int modifikátor,
                      boolean ajVstupnýRiadok)
Definuje novú klávesovú skratku, ktorá bude previazaná so zadaným
 príkazom.
static void
pridajKlavesovuSkratkuVstupnehoRiadka(String príkaz,
                                     int kódKlávesu,
                                     int modifikátor)
 Alias pre pridajKlávesovúSkratkuVstupnéhoRiadka.
static void
pridajKlávesovúSkratkuVstupnéhoRiadka(String príkaz,
                                     int kódKlávesu,
                                     int modifikátor)
Definuje novú klávesovú skratku pre vstupný riadok, ktorá bude
 previazaná so zadaným príkazom.
static void
pridajOddelovacPonuky()
 Alias pre pridajOddeľovačPonuky.
static void
pridajOddeľovačPonuky()
Pridá do hlavnej ponuky oddeľovač.
static void
pridajPolozkuHlavnejPonuky(String text)
 Alias pre pridajPoložkuHlavnejPonuky.
static void
pridajPolozkuHlavnejPonuky(String text,
                          int mnemonickáSkratka)
 Alias pre pridajPoložkuHlavnejPonuky.
static PolozkaPonuky
pridajPolozkuPonuky(String text)
 Alias pre pridajPoložkuPonuky.
static PolozkaPonuky
pridajPolozkuPonuky(String text,
                   int mnemonickáSkratka)
 Alias pre pridajPoložkuPonuky.
static PolozkaPonuky
pridajPolozkuPonuky(String text,
                   int mnemonickáSkratka,
                   int klávesováSkratka)
 Alias pre pridajPoložkuPonuky.
static void
pridajPolozkuPonukyKoniec()
 Alias pre pridajPoložkuPonukyKoniec.
static void
pridajPolozkuPonukyPrekreslit()
 Alias pre pridajPoložkuPonukyPrekresliť.
static void
pridajPolozkuPonukyVymazat()
 Alias pre pridajPoložkuPonukyVymazať.
static void
pridajPoložkuHlavnejPonuky(String text)
Rozšíri hlavnú ponuku o ďalšiu položku alebo prepíše aktuálnu
 položku hlavnej ponuky.
static void
pridajPoložkuHlavnejPonuky(String text,
                          int mnemonickáSkratka)
Rozšíri hlavnú ponuku o ďalšiu položku alebo prepíše aktuálnu
 položku hlavnej ponuky.
static PoložkaPonuky
pridajPoložkuPonuky(String text)
Pridá do hlavnej ponuky položku so zadaným textom.
static PoložkaPonuky
pridajPoložkuPonuky(String text,
                   int mnemonickáSkratka)
Funguje rovnako ako pridajPoložkuPonuky(String) s tým,
 že definuje novej položke mnemonickú skratku (skratky, ktoré sú
 v položkách ponuky znázorňované podčiarknutým písmenom).
static PoložkaPonuky
pridajPoložkuPonuky(String text,
                   int mnemonickáSkratka,
                   int klávesováSkratka)
Funguje rovnako ako pridajPoložkuPonuky(String, int)
 s tým, že definuje novej položke okrem mnemonickej aj klávesovú
 skratku (skratky, ktoré pri v položkách ponuky znázorňované
 v pravej časti textom Ctrl + písmeno).
static void
pridajPoložkuPonukyKoniec()
Pridá do ponuky preddefinovanú položku „Koniec.“ Toto je
 využiteľné keď sme ponuku vymazali
 a chceme do nej pridať túto položku, ktorej funkcionalita je
 vopred naprogramovaná.
static void
pridajPoložkuPonukyPrekresliť()
Pridá do ponuky položku „Prekresliť.“ Položka je jednou
 z preddefinovaných položiek, ktoré majú vopred definovanú
 funkcionalitu.
static void
pridajPoložkuPonukyVymazať()
Pridá do ponuky položku „Vymazať.“ Položka je jednou
 z preddefinovaných položiek, ktoré majú vopred definovanú
 funkcionalitu.
static void
pridajVlnenie()
Pridá alebo zresetuje vlnenie sveta.
static void
pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie sveta.
static void
pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie sveta.
static void
pridajVlnenie(int útlm,
             boolean ajČasovač)
Pridá alebo zresetuje vlnenie sveta.
static JMenu
pridajVnorenuPonuku(String text,
                   JMenuItem... položky)
 Alias pre pridajVnorenúPonuku.
static JMenu
pridajVnorenúPonuku(String text,
                   JMenuItem... položky)
Vytvorí a pridá do hlavnej ponuky vnorenú ponuku zo zadaných
 položiek.
static String
priecinokObrazkov()
 Alias pre priečinokObrázkov.
static void
priecinokObrazkov(String priečinok)
 Alias pre priečinokObrázkov.
static String
priecinokZvukov()
 Alias pre priečinokZvukov.
static void
priecinokZvukov(String priečinok)
 Alias pre priečinokZvukov.
static String
priečinokObrázkov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú obrázky
 prečítané.
static void
priečinokObrázkov(String priečinok)
Ak sú všetky obrázky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
static String
priečinokZvukov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú zvuky čítané.
static void
priečinokZvukov(String priečinok)
Ak sú všetky zvuky uložené v spoločnom priečinku, môžeme pre nich
 touto metódou nastaviť zdrojový priečinok čítania.
static void
priehladnost(double prePodlahu,
            double preStrop)
 Alias pre priehľadnosť.
static void
priehľadnosť(double prePodlahu,
            double preStrop)
Naraz nastaví priehľadnosť pre podlahu aj strop.
static Bod
priesecnikPriamok(double x0,
                 double y0,
                 double x1,
                 double y1,
                 double x2,
                 double y2,
                 double x3,
                 double y3)
 Alias pre priesečníkPriamok.
static Bod
priesecnikPriamok(Poloha[] poleBodov)
 Alias pre priesečníkPriamok.
static Bod
priesecnikPriamok(Poloha A,
                 Poloha B,
                 Poloha C,
                 Poloha D)
 Alias pre priesečníkPriamok.
static Bod
priesecnikUseciek(double x0,
                 double y0,
                 double x1,
                 double y1,
                 double x2,
                 double y2,
                 double x3,
                 double y3)
 Alias pre priesečníkÚsečiek.
static Bod
priesecnikUseciek(Poloha[] poleBodov)
 Alias pre priesečníkÚsečiek.
static Bod
priesecnikUseciek(Poloha A,
                 Poloha B,
                 Poloha C,
                 Poloha D)
 Alias pre priesečníkÚsečiek.
static Bod[]
priesecnikyKruznic(double x1,
                  double y1,
                  double r1,
                  double x2,
                  double y2,
                  double r2)
 Alias pre priesečníkyKružníc.
static Bod[]
priesecnikyKruznic(Poloha S1,
                  double r1,
                  Poloha S2,
                  double r2)
 Alias pre priesečníkyKružníc.
static Bod[]
priesecnikyPriamkyAKruznice(double x1,
                           double y1,
                           double x2,
                           double y2,
                           double x3,
                           double y3,
                           double r)
 Alias pre priesečníkyPriamkyAKružnice.
static Bod[]
priesecnikyPriamkyAKruznice(Poloha A,
                           Poloha B,
                           Poloha S,
                           double r)
 Alias pre priesečníkyPriamkyAKružnice.
static Bod[]
priesecnikyUseckyAKruznice(double x1,
                          double y1,
                          double x2,
                          double y2,
                          double x3,
                          double y3,
                          double r)
 Alias pre priesečníkyÚsečkyAKružnice.
static Bod[]
priesecnikyUseckyAKruznice(Poloha A,
                          Poloha B,
                          Poloha S,
                          double r)
 Alias pre priesečníkyÚsečkyAKružnice.
static Bod
priesečníkPriamok(double x0,
                 double y0,
                 double x1,
                 double y1,
                 double x2,
                 double y2,
                 double x3,
                 double y3)
Hľadá priesečník dvoch priamok určených bodmi A, B a C, D.
static Bod
priesečníkPriamok(Poloha[] poleBodov)
Hľadá priesečník dvoch priamok určených polohami bodov v poli
 parametra.
static Bod
priesečníkPriamok(Poloha A,
                 Poloha B,
                 Poloha C,
                 Poloha D)
Hľadá priesečník dvoch priamok určených bodmi A, B a C, D.
static Bod
priesečníkÚsečiek(double x0,
                 double y0,
                 double x1,
                 double y1,
                 double x2,
                 double y2,
                 double x3,
                 double y3)
Hľadá priesečník dvoch úsečiek |AB| a |CD|.
static Bod
priesečníkÚsečiek(Poloha[] poleBodov)
Hľadá priesečník dvoch úsečiek |AB| a |CD|.
static Bod
priesečníkÚsečiek(Poloha A,
                 Poloha B,
                 Poloha C,
                 Poloha D)
Hľadá priesečník dvoch úsečiek |AB| a |CD|.
static Bod[]
priesečníkyKružníc(double x1,
                  double y1,
                  double r1,
                  double x2,
                  double y2,
                  double r2)
Hľadá priesečníky dvoch kružníc určených súradnicami ich
 stredov S1[x1, y1] a S2[x2, y2] a polomermi r1 a r2.
static Bod[]
priesečníkyKružníc(Poloha S1,
                  double r1,
                  Poloha S2,
                  double r2)
Hľadá priesečníky dvoch kružníc určených polohami ich stredov
 S1 a S2 a polomermi r1 a r2.
static Bod[]
priesečníkyPriamkyAKružnice(double x1,
                           double y1,
                           double x2,
                           double y2,
                           double x3,
                           double y3,
                           double r)
Hľadá priesečníky priamky |AB| a kružnice určenej súradnicami
 stredu S a polomeru r.
static Bod[]
priesečníkyPriamkyAKružnice(Poloha A,
                           Poloha B,
                           Poloha S,
                           double r)
Hľadá priesečníky priamky |AB| a kružnice určenej polohou
 stredu S a polomeru r.
static Bod[]
priesečníkyÚsečkyAKružnice(double x1,
                          double y1,
                          double x2,
                          double y2,
                          double x3,
                          double y3,
                          double r)
Hľadá priesečníky úsečky |AB| a kružnice so stredom
 S a polomerom r.
static Bod[]
priesečníkyÚsečkyAKružnice(Poloha A,
                          Poloha B,
                          Poloha S,
                          double r)
Hľadá priesečníky úsečky |AB| a kružnice so stredom
 S a polomerom r.
static void
pripojTextVstupnehoRiadka(String naPripojenie)
 Alias pre pripojTextVstupnéhoRiadka.
static void
pripojTextVstupnéhoRiadka(String naPripojenie)
Pripojí zadaný text na koniec vstupného riadka.
static boolean
prveSpustenie()
 Alias pre prvéSpustenie.
static boolean
prvéSpustenie()
Účelom tejto metódy je overiť, či pred spustením aplikácie
 jestvoval konfiguračný súbor.
static void
registrujRobot()
Registruje hlavný robot
 v konfigurácii sveta.
static void
registrujRobot(GRobot robot)
Registruje robot v konfigurácii.
static void
registrujRobot(GRobot robot,
              String meno)
Registruje robot v konfigurácii podľa zadaného mena.
static void
registrujRobot(String meno)
Registruje robot v konfigurácii podľa jeho (vopred priradeného)
 mena.
static void
registrujRobota()
 Alias pre registrujRobot.
static void
registrujRobota(GRobot robot)
 Alias pre registrujRobot.
static void
registrujRobota(GRobot robot,
               String meno)
 Alias pre registrujRobot.
static void
registrujRobota(String meno)
 Alias pre registrujRobot.
static Skript
registrujSkript(String názov,
               List&lt;String&gt; skript)
Vyrobí zo zadaného zoznamu reťazcov nový skript, registruje
 ho pod zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
static Skript
registrujSkript(String názov,
               String skript)
Vyrobí zo zadaného reťazca nový skript, registruje ho pod
 zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
static Skript
registrujSkript(String názov,
               String[] skript)
Vyrobí zo zadaného reťazcového poľa nový skript, registruje
 ho pod zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
static Long
retazecNaCeleCislo(String reťazec)
 Alias pre reťazecNaCeléČíslo.
static Long
reťazecNaCeléČíslo(String reťazec)
Pokúsi sa previesť zadaný reťazec na celé číslo.
static Double
retazecNaRealneCislo(String reťazec)
 Alias pre reťazecNaReálneČíslo.
static Double
reťazecNaReálneČíslo(String reťazec)
Pokúsi sa previesť zadaný reťazec na reálne číslo.
static String
retazecSkratkyPrikazu(String príkaz)
 Alias pre reťazecSkratkyPríkazu.
static String
reťazecSkratkyPríkazu(String príkaz)
Táto metóda prevedie definíciu klávesovej skratku, ktorá je
 priradená zadanému príkazu do textovej podoby.
static boolean
rezimLadenia()
 Alias pre režimLadenia.
static void
rezimLadenia(boolean zapniLadenie)
 Alias pre režimLadenia.
static void
rezimLadenia(boolean zapniLadenie,
            boolean vypíšChybovéHlásenia)
 Alias pre režimLadenia.
static boolean
režimLadenia()
Zistí, či je zapnutý režim ladenia programovacieho rámca
 GRobot alebo aspoň výpis chybových hlásení programovacieho rámca.
static void
režimLadenia(boolean zapniLadenie)
Zapne alebo vypne režim ladenia programovacieho rámca GRobot.
static void
režimLadenia(boolean zapniLadenie,
            boolean vypíšChybovéHlásenia)
Zapne alebo vypne režim ladenia programovacieho rámca GRobot so
 spresnením zapnutia alebo vypnutia výpisu chybových hlásení
 programovacieho rámca.
static int
riadokPoslednejChyby()
Ak posledná chyba vznikla na konkrétnom riadku skriptu, tak táto metóda vráti
 číslo tohto riadka.
static long
rimskeNaCele(String reťazec)
 Alias pre rímskeNaCelé.
static Long
rímskeNaCelé(String rímske)
Prevedie zadaný reťazec obsahujúci číslo reprezentované
 v rímskej číselnej sústave na celé číslo.
static double
rotovaneX(double x,
         double y,
         double uhol)
 Alias pre rotovanéX.
static double
rotovanéX(double x,
         double y,
         double uhol)
Vráti výpočet x-ovej súradnice zadaného bodu pootočeného okolo
 stredu súradnicovej sústavy o zadaný uhol.
static double
rotovaneY(double x,
         double y,
         double uhol)
 Alias pre rotovanéY.
static double
rotovanéY(double x,
         double y,
         double uhol)
Vráti výpočet y-ovej súradnice zadaného bodu pootočeného okolo
 stredu súradnicovej sústavy o zadaný uhol.
static String
S(Object... argumenty)
Táto metóda slúži na rýchly prevod rôznych objektov do
 textovej podoby a ich zlúčenie do jedného reťazca.
static int
sirka()
 Alias pre šírka.
static int
sirkaObrazka(String súbor)
 Alias pre šírkaObrázka.
static int
sirkaObrazovky()
 Alias pre šírkaZariadenia.
static int
sirkaObrazovky(int zariadenie)
 Alias pre šírkaZariadenia.
static int
sirkaOkna()
 Alias pre šírkaOkna.
static int
sirkaZariadenia()
 Alias pre šírkaZariadenia.
static int
sirkaZariadenia(int zariadenie)
 Alias pre šírkaZariadenia.
static KeyStroke
skratkaPrikazu(String príkaz)
 Alias pre skratkaPríkazu.
static KeyStroke
skratkaPríkazu(String príkaz)
Táto metóda zistí, aká klávesová skratka je priradená zadanému
 príkazu.
static boolean
skratkyPodlahy()
Overí, či sú zapnuté preddefinované skratky podlahy.
static void
skratkyPodlahy(boolean zapnúť)
Zapne alebo vypne fungovanie niekoľkých predvolených skratiek
 vnútornej konzoly podlahy.
static boolean
skratkyStropu()
Overí, či sú zapnuté preddefinované skratky stropu.
static void
skratkyStropu(boolean zapnúť)
Zapne alebo vypne fungovanie niekoľkých predvolených skratiek
 vnútornej konzoly stropu.
static boolean
skriptJeSpusteny()
 Alias pre skriptJeSpustený.
static boolean
skriptJeSpustený()
Zistí, či je práve vykonávaný skript, ktorý bol spustený
 príkazom spustiSkript (alebo
 niektorou jeho modifikáciou).
static void
skry()
Skryje hlavné okno.
static void
skryUvodnuObrazovku()
 Alias pre skryÚvodnúObrazovku.
static void
skryÚvodnúObrazovku()
Skryje úvodnú obrazovku a zobrazí hlavné okno aplikácie.
static void
skryvajVstupnyRiadok()
 Alias pre skrývajVstupnýRiadok.
static void
skrývajVstupnýRiadok()
Umožní vstupnému riadku, aby sa skryl po potvrdení klávesom
 Enter alebo po zrušení vstupu klávesom Escape.
static void
skryvajVstupnyRiadok(boolean zrušVstup)
 Alias pre skrývajVstupnýRiadok.
static void
skrývajVstupnýRiadok(boolean zrušVstup)
Umožní vstupnému riadku, aby sa skryl po potvrdení klávesom
 Enter alebo po zrušení vstupu klávesom Escape.
static double
smer(double súradnicaBoduX,
    double súradnicaBoduY)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a zadaným bodom.
static double
smer(double súradnicaBoduX1,
    double súradnicaBoduY1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 zadanými bodmi.
static double
smer(double súradnicaBoduX1,
    double súradnicaBoduY1,
    Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a polohou zadaného objektu.
static double
smer(double súradnicaBoduX1,
    double súradnicaBoduY1,
    Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a stredom hraníc[1]
 zadaného tvaru Javy.
static double
smer(Poloha objekt)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a bodom určeným polohou zadaného
 objektu.
static double
smer(Poloha objekt1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a zadanými súradnicami.
static double
smer(Poloha objekt1,
    Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 bodmi zadanými vo forme polôh objektov.
static double
smer(Poloha objekt1,
    Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a stredom hraníc[1]
 zadaného tvaru Javy.
static double
smer(Shape tvar)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a bodom určeným polohou stredu
 hraníc[1] zadaného tvaru.
static double
smer(Shape tvar1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a zadanými súradnicami.
static double
smer(Shape tvar1,
    Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a polohou zadaného objektu.
static double
smer(Shape tvar1,
    Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 bodmi vypočítanými zo stredov hraníc[1] zadaných tvarov
 Javy.
static void
spi()
Zastaví aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, ktorá slúžila na to, aby sa zabránilo prechodu
 počítača do režimu spánku.
static double
spodnyOkraj()
 Alias pre spodnýOkraj.
static double
spodnýOkraj()
 Zistí najmenšiu aktuálne viditeľnú y-ovú súradnicu
 plátien (podlahy alebo stropu).
static void
spracujPrikaz(String príkaz)
 Alias pre spracujPríkaz.
static void
spracujPríkaz(String príkaz)
Spracuje jeden príkaz príkazového riadka.
static void
sprava(String správa)
 Alias pre správa.
static void
správa(String správa)
Zobrazí štandardný dialóg so zadanou textovou správou.
static void
sprava(String správa,
      String titulok)
 Alias pre správa.
static void
správa(String správa,
      String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou.
static boolean
spravaSystemovejIkony(String správa)
 Alias pre správaSystémovejIkony.
static boolean
správaSystémovejIkony(String správa)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadanú
 správu.
static boolean
spravaSystemovejIkony(String správa,
                     String titulok)
 Alias pre správaSystémovejIkony.
static boolean
správaSystémovejIkony(String správa,
                     String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadanú
 správu s titulkom.
static void
spustiCasomieru()
 Alias pre spustiČasomieru.
static void
spustiCasovac()
 Alias pre spustiČasovač.
static void
spustiCasovac(double čas)
 Alias pre spustiČasovač.
static void
spustiČasomieru()
Táto metóda „spustí“ časomieru.
static void
spustiČasovač()
Spustí časovač s naposledy zadaným časovým intervalom
 (v sekundách) alebo s predvoleným intervalom 40 milisekúnd (ak
 nebol v činnosti).
static void
spustiČasovač(double čas)
Spustí časovač so zadaným časovým intervalom v sekundách.
static void
spustiSkript(List&lt;String&gt; skript)
Funguje podobne ako vykonajSkript(skript) a principiálne pre neho platia rovnaké
 pravidlá ako pre spustiSkript(skript).
static void
spustiSkript(String skript)
Funguje podobne ako vykonajSkript(skript), ale spustí vykonávanie v samostatnom vlákne
 Javy, takže môže byť ladené.
static void
spustiSkript(String[] riadky)
Funguje podobne ako vykonajSkript(riadky), ale spustí vykonávanie v samostatnom vlákne
 Javy, takže môže byť ladené.
static void
spustiSkript(String skript,
            boolean zoSúboru)
Funguje podobne ako vykonajSkript(skript, zoSúboru), ale spustí vykonávanie
 v samostatnom vlákne Javy, takže môže byť ladené.
static boolean
standardnyVstupAktivny()
 Alias pre štandardnýVstupAktívny.
static Bod
stredOtacaniaVyplne()
 Alias pre stredOtáčaniaVýplne.
static void
stredOtacaniaVyplne(double sx,
                   double sy)
 Alias pre stredOtáčaniaVýplne.
static void
stredOtacaniaVyplne(Poloha poloha)
 Alias pre stredOtáčaniaVýplne.
static void
stredOtacaniaVyplne(Shape tvar)
 Alias pre stredOtáčaniaVýplne.
static void
stredOtacaniaVyplneNaMys()
 Alias pre stredOtáčaniaVýplneNaMyš.
static Bod
stredOtáčaniaVýplne()
Vráti bod so súradnicami relatívneho posunutia stredu otáčania
 obrázkových dlaždicových výplní vztiahnutý k súradniciam posunutia
 výplne.
static void
stredOtáčaniaVýplne(double sx,
                   double sy)
Nastaví nový relatívny stred otáčania obrázkových dlaždicových
 výplní.
static void
stredOtáčaniaVýplne(Poloha poloha)
Táto metóda funguje podobne ako metóda
 stredOtáčaniaVýplne(sx, sy).
static void
stredOtáčaniaVýplne(Shape tvar)
Táto metóda funguje podobne ako metóda
 stredOtáčaniaVýplne(sx, sy).
static void
stredOtáčaniaVýplneNaMyš()
Táto metóda číta súradnice myši, ktoré použije na nastavenie
 nového relatívneho stredu otáčania obrázkových výplní.
static TrayIcon
systemovaIkona()
 Alias pre systémováIkona.
static TrayIcon
systémováIkona()
Vráti objekt systémovej ikony sveta, ak je definovaná.
static boolean
systemovaIkona(Image ikona,
              String... položkyPonuky)
 Alias pre systémováIkona.
static boolean
systémováIkona(Image ikona,
              String... položkyPonuky)
Definuje alebo aktualizuje ikonu v systémovej oblasti.
static boolean
systemovaIkona(String popis,
              Image ikona,
              String... položkyPonuky)
 Alias pre systémováIkona.
static boolean
systémováIkona(String popis,
              Image ikona,
              String... položkyPonuky)
Definuje alebo aktualizuje systémovú ikonu nazývanú aj ikonou
 v systémovej oblasti alebo v oblasti oznámení (angl. system
 tray).
static boolean
systemovaIkona(String popis,
              String... položkyPonuky)
 Alias pre systémováIkona.
static boolean
systémováIkona(String popis,
              String... položkyPonuky)
Aktualizuje jestvujúcu ikonu v systémovej oblasti.
static boolean
systemovaIkonaZobrazena()
 Alias pre systémováIkonaZobrazená.
static boolean
systémováIkonaZobrazená()
Zistí, či je jestvujúca ikona v systémovej oblasti zobrazená.
static int
šírka()
Zistí šírku plátien sveta.
static int
šírkaObrázka(String súbor)
 Zistí šírku zadaného obrázka.
static int
šírkaObrazovky()
 Alias pre šírkaZariadenia.
static int
šírkaObrazovky(int zariadenie)
 Alias pre šírkaZariadenia.
static int
šírkaOkna()
Zistí šírku hlavného okna aplikácie.
static int
šírkaZariadenia()
Zistí šírku dostupného obrazovkového zariadenia.
static int
šírkaZariadenia(int zariadenie)
Zistí šírku dostupného obrazovkového zariadenia.
static boolean
štandardnýVstupAktívny()
Overí, či je štandardný vstup, ktorý bol aktivovaný metódou
 aktivujŠtandardnýVstup (alebo
 niektorou jej verziou) stále aktívny.
static boolean
textDoSchranky()
 Alias pre textyDoSchránky.
static boolean
textDoSchránky()
 Alias pre textyDoSchránky.
static boolean
textDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
static boolean
textDoSchránky(boolean lenOznačené)
 Alias pre textyDoSchránky.
static String
textChyby(int kódChyby)
Vráti vysvetľujúci text ku kódu chyby určenej parametrom
 kódChyby.
static String[]
textNaRiadky(String text,
            int dĺžkaRiadka)
Rozdelí dlhý text na riadky s maximálnou zadanou dĺžkou
 v znakoch.
static String[]
textNaRiadky(String text,
            int dĺžkaRiadka,
            boolean zachovajMedzery)
Rozdelí dlhý text na riadky s maximálnou zadanou dĺžkou
 v znakoch.
static String
textPoslednejChyby()
Vráti vysvetľujúci text ku kódu poslednej chyby, ktorá nastala
 počas vykonávania príkazov
 interaktívneho režimu
 alebo
 skriptu.
static String
textTlacidla(String tlačidlo)
 Alias pre textTlačidla.
static void
textTlacidla(String tlačidlo,
            String text)
 Alias pre textTlačidla.
static String
textTlačidla(String tlačidlo)
Umožňuje overiť aktuálne definované znenie textu tlačidla
 konkrétnej odpovede na otázku (pozri napríklad metódu
 otázka) alebo zadania/zmeny údaju (pozri
 napríklad metódu zadajReťazec).
static void
textTlačidla(String tlačidlo,
            String text)
Umožňuje upraviť text tlačidla odpovede na otázku (pozri napríklad
 metódu otázka) alebo zadania údaju (pozri
 napríklad metódu zadajReťazec).
static String
textVstupnehoRiadka()
 Alias pre textVstupnéhoRiadka.
static String
textVstupnéhoRiadka()
 Získa text aktuálne zadaný do vstupného riadka.
static void
textVstupnehoRiadka(String text)
 Alias pre textVstupnéhoRiadka.
static void
textVstupnéhoRiadka(String text)
 Nastaví text vstupného riadka na zadanú
 hodnotu.
static boolean
textyDoSchranky()
 Alias pre textyDoSchránky.
static boolean
textyDoSchránky()
Vloží do schránky všetky texty vypísané na vnútorných konzolách
 podlahy a stropu.
static boolean
textyDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
static boolean
textyDoSchránky(boolean lenOznačené)
Vloží do schránky buď všetky texty vypísané na vnútorných
 konzolách podlahy a stropu, alebo len označené časti –
 v závislosti od hodnoty parametra lenOznačené.
static void
tik()
Simuluje vykonanie reakcie na tik časovača.
static String
titulok()
Vráti titulok hlavného okna aplikácie.
static void
titulok(String titulok)
Nastaví titulok hlavného okna aplikácie.
static long
udrzba()
 Alias pre údržba.
static long
údržba()
Po pamäťovo náročných operáciách môže byť vhodné uvoľniť
 systémové prostriedky.
static double
uhol(double súradnicaBoduX,
    double súradnicaBoduY)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a zadaným bodom.
static double
uhol(double súradnicaBoduX1,
    double súradnicaBoduY1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou zadanými
 bodmi.
static double
uhol(double súradnicaBoduX1,
    double súradnicaBoduY1,
    Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a polohou zadaného objektu.
static double
uhol(double súradnicaBoduX1,
    double súradnicaBoduY1,
    Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a stredom hraníc[1]
 zadaného tvaru Javy.
static double
uhol(Poloha objekt)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a bodom určeným polohou zadaného objektu.
static double
uhol(Poloha objekt1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a zadanými súradnicami.
static double
uhol(Poloha objekt1,
    Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 zadanými vo forme polôh objektov.
static double
uhol(Poloha objekt1,
    Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a stredom hraníc[1]
 zadaného tvaru Javy.
static double
uhol(Shape tvar)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a bodom určeným polohou stredu
 hraníc[1] zadaného tvaru.
static double
uhol(Shape tvar1,
    double súradnicaBoduX2,
    double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a zadanými súradnicami.
static double
uhol(Shape tvar1,
    Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a polohou zadaného objektu.
static double
uhol(Shape tvar1,
    Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 vypočítanými zo stredov hraníc[1] zadaných tvarov
 Javy.
static void
uchovajHistoriuVstupnehoRiadka()
 Alias pre uchovajHistóriuVstupnéhoRiadka.
static void
uchovajHistóriuVstupnéhoRiadka()
Aktivuje automatické uchovávanie potvrdených
 vstupných riadkov do konfiguračného
 súboru.
static boolean
uchovavaSaHistoriaVstupnehoRiadka()
 Alias pre uchovávaSaHistóriaVstupnéhoRiadka.
static boolean
uchovávaSaHistóriaVstupnéhoRiadka()
Zistí, či je aktívne automatické uchovanie histórie
 potvrdených vstupných riadkov do konfiguračného súboru.
static void
ulozObrazok(String súbor)
 Alias pre uložObrázok.
static void
ulozObrazok(String súbor,
           boolean prepísať)
 Alias pre uložObrázok.
static void
uložObrázok(String súbor)
Uloží aktuálne zobrazený obsah sveta do súboru s obrázkom.
static void
uložObrázok(String súbor,
           boolean prepísať)
Uloží aktuálny obsah sveta do súboru s obrázkom.
static void
upevni()
Upevní hlavné okno (svet) – okno bude mať pevnú veľkosť.
static Long
upravCeleCislo(long celéČíslo,
              String výzva)
 Alias pre upravCeléČíslo.
static Long
upravCeleCislo(long celéČíslo,
              String výzva,
              String titulok)
 Alias pre upravCeléČíslo.
static Long
upravCeléČíslo(long celéČíslo,
              String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je celočíselný údaj).
static Long
upravCeléČíslo(long celéČíslo,
              String výzva,
              String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je celočíselný údaj).
static void
upravPriehladnost(double prePodlahu,
                 double preStrop)
 Alias pre upravPriehľadnosť.
static void
upravPriehľadnosť(double prePodlahu,
                 double preStrop)
Naraz upraví úroveň
 priehľadnosti pre podlahu aj strop.
static Double
upravRealneCislo(double reálneČíslo,
                String výzva)
 Alias pre upravReálneČíslo.
static Double
upravRealneCislo(double reálneČíslo,
                String výzva,
                String titulok)
 Alias pre upravReálneČíslo.
static Double
upravReálneČíslo(double reálneČíslo,
                String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je číselný údaj).
static Double
upravReálneČíslo(double reálneČíslo,
                String výzva,
                String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je číselný údaj).
static String
upravRetazec(String reťazec,
            String výzva)
 Alias pre upravReťazec.
static String
upravReťazec(String reťazec,
            String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov.
static String
upravRetazec(String reťazec,
            String výzva,
            String titulok)
 Alias pre upravReťazec.
static String
upravReťazec(String reťazec,
            String výzva,
            String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov.
static void
upravRozmeryPlatien(int šírka,
                   int výška)
 Alias pre zmeňRozmeryPlátien.
static void
upravRozmeryPlátien(int šírka,
                   int výška)
 Alias pre zmeňRozmeryPlátien.
static void
uspiCasovac()
 Alias pre uspiČasovač.
static void
uspiČasovač()
Uvedie časovač do „režimu spánku.“ Keď časovač spí, preskakuje
 tiky, čiže sa zdá, ako keby nefungoval.
static void
uvolni()
 Alias pre uvoľni.
static void
uvoľni()
Uvoľní hlavné okno (svet) – okno nebude mať pevnú veľkosť
 (predvolené správanie sveta).
static void
uvolni(Class typ)
 Alias pre uvoľni.
static void
uvoľni(Class typ)
Metóda slúži na hromadné vymazanie robotov určitého typu
 z vnútorného zoznamu robotov.
static void
uvolni(GRobot ktorý)
 Alias pre uvoľni.
static void
uvoľni(GRobot ktorý)
Metóda slúži na odstránenie konkrétneho robota (alebo inštancie
 odvodeného typu) z vnútorného zoznamu robotov.
static void
uvolni(Obrázok ktorý)
 Alias pre uvoľni.
static void
uvoľni(Obrázok ktorý)
Táto metóda slúži na odstránenie konkrétneho obrázka
 z vnútorného zoznamu obrázkov.
static void
uvolni(Plazma ktorá)
 Alias pre uvoľni.
static void
uvoľni(Plazma ktorá)
Táto metóda slúži na odstránenie konkrétnej inštancie
 pixelového generátora plazmy z vnútorného zoznamu týchto
 generátorov.
static void
uvolni(String názovZdroja)
 Alias pre uvoľni.
static void
uvoľni(String názovZdroja)
Táto metóda slúži na odstránenie zdrojov (obrázkov a/alebo
 zvukov) z vnútorných zoznamov zdrojov sveta.
static boolean
uvolniMys()
 Alias pre uvoľniMyš.
static boolean
uvoľniMyš()
Zruší zachytenie kurzora myš v okne sveta.
static void
vahaPreZvuky(double miera,
            Object... súbory)
 Alias pre váhaPreZvuky
static void
váhaPreZvuky(double miera,
            Object... súbory)
Nastaví hromadne stereováhu pre všetky uvedené zvuky.
static void
vahaPreZvuky(double miera,
            String[] súbory)
 Alias pre váhaPreZvuky
static void
váhaPreZvuky(double miera,
            String[] súbory)
Nastaví hromadne stereováhu pre všetky uvedené zvuky.
static void
varovanie(String varovanie)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 varovania.
static void
varovanie(String varovanie,
         String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 varovania.
static boolean
varovanieSystemovejIkony(String varovanie)
 Alias pre varovanieSystémovejIkony.
static boolean
varovanieSystémovejIkony(String varovanie)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 varovné oznámenie.
static boolean
varovanieSystemovejIkony(String varovanie,
                        String titulok)
 Alias pre varovanieSystémovejIkony.
static boolean
varovanieSystémovejIkony(String varovanie,
                        String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 varovné oznámenie s titulkom.
static int
verzia(int hlavná,
      int vedľajšia)
Porovná aktuálnu verziu robota so zadanou.
static int
viditelnaSirka()
 Alias pre viditeľnáŠírka.
static int
viditeľnáŠírka()
Zistí aktuálnu šírku tzv. klientskej oblasti okna.
static int
viditelnaVyska()
 Alias pre viditeľnáVýška.
static int
viditeľnáVýška()
Zistí viditeľnú výšku tzv. klientskej oblasti okna.
static boolean
viditelny()
 Alias pre viditeľný.
static boolean
viditeľný()
Zistí, či je hlavné okno (svet) viditeľné.
static Vlnenie
vlnenie()
Vráti inštanciu vlnenia sveta, aby s ňou
 bolo možné ďalej pracovať.
static int
volajSkript(String názov)
Spustí skript registrovaný vo vnútornej pamäti rámca pod zadaným menom.
static double
vrchnyOkraj()
 Alias pre vrchnýOkraj.
static double
vrchnýOkraj()
 Zistí najväčšiu aktuálne viditeľnú y-ovú súradnicu
 plátien (podlahy alebo stropu).
static JTextField
vstupnyRiadok()
 Alias pre vstupnýRiadok.
static JTextField
vstupnýRiadok()
Vráti komponent vstupného riadka, aby s ním mohlo byť manipulované
 na nižšej úrovni (úrovni bližšej k systému).
static boolean
vstupnyRiadokZobrazeny()
 Alias pre vstupnýRiadokZobrazený.
static boolean
vstupnýRiadokZobrazený()
Overí, či je zobrazený panel vstupného riadka.
static boolean
vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
static boolean
vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
static int
vykonajSkript(List&lt;String&gt; skript)
Vykoná skript zadaný vo forme parametrického zoznamu.
static int
vykonajSkript(String skript)
Vykoná skript zadaný vo forme reťazca.
static int
vykonajSkript(String[] riadky)
Vykoná skript uložený v poli reťazcov.
static int
vykonajSkript(String skript,
             boolean zoSúboru)
Vykoná skript zadaný vo forme reťazca alebo vo forme názvu
 súboru, z ktorého má byť prečítaný.
static void
vykonatNeskor(Runnable vykonať)
 Alias pre vykonaťNeskôr.
static void
vykonatNeskor(Runnable vykonať,
             boolean samostatnéVlákno)
 Alias pre vykonaťNeskôr.
static void
vykonaťNeskôr(Runnable vykonať)
Táto metóda slúži na zadanie príkazov Javy, ktoré majú byť
 vykonané „neskôr“ – asynchrónne vzhľadom na reťaz čakajúcich
 správ (udalostí) aktívneho vlákna.
static void
vykonaťNeskôr(Runnable vykonať,
             boolean samostatnéVlákno)
Táto metóda slúži na zadanie príkazov Javy, ktoré majú byť
 vykonané „neskôr“ – pozri opis metódy vykonaťNeskôr(vykonať).
static void
vymaz()
 Alias pre vymaž.
static void
vymazGrafiku()
 Alias pre vymažGrafiku.
static void
vymazPonuku()
 Alias pre vymažPonuku.
static void
vymazPremennu(String názov,
             Class&lt;?&gt; typ)
 Alias pre vymažPremennú.
static void
vymazTexty()
 Alias pre vymažTexty.
static void
vymaž()
Vymaže obsah sveta.
static void
vymažGrafiku()
Vymaže plátno podlahy a stropu.
static void
vymažPonuku()
Vymaže všetky položky hlavnej ponuky (vrátane predvolených).
static void
vymažPremennú(String názov,
             Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu
 interaktívneho režimu.
static void
vymažTexty()
Vymaže texty podlahy a stropu.
static void
vypis(Object... argumenty)
 Alias pre vypíš.
static void
vypisAktivneSlova(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
static void
vypisAktivneSlovo(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
static boolean
vypisChybovychHlaseni()
 Alias pre výpisChybovýchHlásení.
static boolean
výpisChybovýchHlásení()
Zistí, či je zapnutý výpis chybových hlásení programovacieho
 rámca.
static void
vypisNa(double x,
       double y,
       Object... argumenty)
 Alias pre vypíšNa.
static void
vypisRiadok(Object... argumenty)
 Alias pre vypíšRiadok.
static void
vypisRiadokNa(double x,
             double y,
             Object... argumenty)
 Alias pre vypíšRiadokNa.
static void
vypíš(Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope.
static void
vypíšAktívneSlová(String identifikátor,
                 Object... argumenty)
 Alias pre vypíšAktívneSlovo.
static void
vypíšAktívneSlovo(String identifikátor,
                 Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope ako aktívne
 slová.
static void
vypíšNa(double x,
       double y,
       Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope.
static void
vypíšRiadok(Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope a posunie sa na
 ďalší riadok.
static void
vypíšRiadokNa(double x,
             double y,
             Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope a posunie sa na ďalší riadok.
static void
vypln(Color farba)
 Alias pre vyplň.
static void
vyplň(Color farba)
Vyplní podlahu zadanou farbou, ktorá prekryje aj
 farbu pozadia sveta.
static void
vypln(Farebnosť objekt)
 Alias pre vyplň.
static void
vyplň(Farebnosť objekt)
Vyplní podlahu farbou zadaného objektu, ktorá prekryje aj
 farbu pozadia sveta.
static void
vypln(Image výplň)
 Alias pre vyplň.
static void
vyplň(Image výplň)
Vyplní podlahu zadanou textúrou.
static Farba
vypln(int r,
     int g,
     int b)
 Alias pre vyplň.
static Farba
vyplň(int r,
     int g,
     int b)
Vyplní podlahu farbou zadanou prostredníctvom farebných zložiek.
static Farba
vypln(int r,
     int g,
     int b,
     int a)
 Alias pre vyplň.
static Farba
vyplň(int r,
     int g,
     int b,
     int a)
Vyplní podlahu farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
static void
vypln(Shape tvar)
 Alias pre vyplň.
static void
vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov na podlahu.
static void
vypln(Shape tvar,
     GRobot kreslič)
 Alias pre vyplň.
static void
vyplň(Shape tvar,
     GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov na podlahu.
static void
vypln(String súbor)
 Alias pre vyplň.
static void
vyplň(String súbor)
Vyplní podlahu zadanou textúrou.
static Skript
vyrobSkript(List&lt;String&gt; skript)
Vyrobí zo zadaného zoznamu reťazcov reprezentujúcich riadky
 skriptu nový skript a vráti ho v inštancii triedy Skript na ďalšie spracovanie.
static Skript
vyrobSkript(String skript)
Vyrobí zo zadaného textového reťazca skript a vráti ho
 v inštancii triedy Skript na ďalšie spracovanie.
static Skript
vyrobSkript(String[] skript)
Vyrobí zo zadaného reťazcového poľa, ktorého prvky reprezentujú
 riadky skriptu, nový skript a vráti ho na ďalšie spracovanie
 v inštancii triedy Skript.
static Skript
vyrobSkript(String skript,
           boolean zoSúboru)
Vyrobí skript (zo zadaného textového reťazca alebo zo súboru)
 a vráti ho v inštancii triedy Skript na ďalšie
 spracovanie.
static int
vyska()
 Alias pre šírka.
static int
vyskaObrazka(String súbor)
 Alias pre výškaObrázka.
static int
vyskaObrazovky()
 Alias pre výškaZariadenia.
static int
vyskaObrazovky(int zariadenie)
 Alias pre výškaZariadenia.
static int
vyskaOkna()
 Alias pre výškaOkna.
static int
vyskaZariadenia()
 Alias pre výškaZariadenia.
static int
vyskaZariadenia(int zariadenie)
 Alias pre výškaZariadenia.
static void
vystred()
 Alias pre vystreď.
static void
vystreď()
Presunie okno tak, aby sa nachádzalo v strede obrazovky.
static int
výška()
Zistí výšku plátien sveta.
static int
výškaObrázka(String súbor)
 Zistí výšku zadaného obrázka.
static int
výškaObrazovky()
 Alias pre výškaZariadenia.
static int
výškaObrazovky(int zariadenie)
 Alias pre výškaZariadenia.
static int
výškaOkna()
Zistí výšku hlavného okna aplikácie.
static int
výškaZariadenia()
Zistí výšku dostupného obrazovkového zariadenia.
static int
výškaZariadenia(int zariadenie)
Zistí výšku dostupného obrazovkového zariadenia.
static boolean
vytlac(String súbor)
 Alias pre vytlač.
static boolean
vytlač(String súbor)
Ak je pre zadaný súbor asociovaný príkaz na tlač dokumentu,
 tak otvorí prislúchajúci tlačový dialóg operačného systému,
 s pomocou ktorého bude možné súbor (dokument) vytlačiť.
static void
vyzviRobotov()
 Alias pre vyzviRoboty.
static void
vyzviRobotov(int kľúč)
 Alias pre vyzviRoboty.
static void
vyzviRobotov(int kľúč,
            boolean obrátene)
 Alias pre vyzviRoboty.
static void
vyzviRoboty()
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null) a s hodnotou
 argumentu kľúč rovnou -1.
static void
vyzviRoboty(int kľúč)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null).
static void
vyzviRoboty(int kľúč,
           boolean obrátene)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null).
static double
vzdialenost(double súradnicaBoduX,
           double súradnicaBoduY)
 Alias pre vzdialenosť.
static double
vzdialenosť(double súradnicaBoduX,
           double súradnicaBoduY)
Zistí vzdialenosť bodu so zadanými súradnicami od stredu
 súradnicovej sústavy.
static double
vzdialenost(double súradnicaBoduX1,
           double súradnicaBoduY1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
 Alias pre vzdialenosť.
static double
vzdialenosť(double súradnicaBoduX1,
           double súradnicaBoduY1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť medzi bodmi so zadanými súradnicami.
static double
vzdialenost(double súradnicaBoduX1,
           double súradnicaBoduY1,
           Poloha objekt2)
 Alias pre vzdialenosť.
static double
vzdialenosť(double súradnicaBoduX1,
           double súradnicaBoduY1,
           Poloha objekt2)
Zistí vzájomnú vzdialenosť medzi bodom so zadanými súradnicami
 a zadaným objektom.
static double
vzdialenost(double súradnicaBoduX1,
           double súradnicaBoduY1,
           Shape tvar2)
 Alias pre vzdialenosť.
static double
vzdialenosť(double súradnicaBoduX1,
           double súradnicaBoduY1,
           Shape tvar2)
Zistí vzájomnú vzdialenosť medzi bodom so zadanými súradnicami
 a stredom hraníc[1] zadaného tvaru.
static double
vzdialenost(Poloha objekt)
 Alias pre vzdialenosť.
static double
vzdialenosť(Poloha objekt)
Zistí, aká je vzdialenosť zadaného objektu od stredu súradnicovej
 sústavy.
static double
vzdialenost(Poloha objekt1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Poloha objekt1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť zadaného objektu a bodu so zadanými
 súradnicami.
static double
vzdialenost(Poloha objekt1,
           Poloha objekt2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Poloha objekt1,
           Poloha objekt2)
Zistí vzájomnú vzdialenosť zadaných objektov.
static double
vzdialenost(Poloha objekt1,
           Shape tvar2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Poloha objekt1,
           Shape tvar2)
Zistí vzájomnú vzdialenosť medzi zadaným objektom a stredom
 hraníc[1] zadaného tvaru.
static double
vzdialenost(Shape tvar)
 Alias pre vzdialenosť.
static double
vzdialenosť(Shape tvar)
Zistí vzdialenosť stredu hraníc[1] zadaného tvaru od
 stredu súradnicovej sústavy.
static double
vzdialenost(Shape tvar1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Shape tvar1,
           double súradnicaBoduX2,
           double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť stredu hraníc[1] zadaného
 tvaru a bodu so zadanými súradnicami.
static double
vzdialenost(Shape tvar1,
           Poloha objekt2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Shape tvar1,
           Poloha objekt2)
Zistí vzájomnú vzdialenosť stredu hraníc[1] zadaného
 tvaru a polohy zadaného objektu.
static double
vzdialenost(Shape tvar1,
           Shape tvar2)
 Alias pre vzdialenosť.
static double
vzdialenosť(Shape tvar1,
           Shape tvar2)
Zistí vzájomnú vzdialenosť stredov hraníc[1] zadaných
 tvarov.
static double
vzdialenostBodov(double x1,
                double y1,
                double x2,
                double y2)
 Alias pre vzdialenosťBodov.
static double
vzdialenosťBodov(double x1,
                double y1,
                double x2,
                double y2)
Vypočíta vzdialenosť medzi dvomi bodmi so súradnicami [x1, y1]
 a [x2, y2].
static double
vzdialenostBodov(Poloha[] poleBodov)
 Alias pre vzdialenosťBodov.
static double
vzdialenosťBodov(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi dvomi bodmi so súradnicami určenými
 polohami bodov v poli parametra.
static double
vzdialenostBodov(Poloha A,
                Poloha B)
 Alias pre vzdialenosťBodov.
static double
vzdialenosťBodov(Poloha A,
                Poloha B)
Vypočíta vzdialenosť medzi dvomi bodmi A a B.
static double
vzdialenostBoduOdKruznice(double x0,
                         double y0,
                         double x1,
                         double y1,
                         double r)
 Alias pre vzdialenosťBoduOdKružnice.
static double
vzdialenostBoduOdKruznice(Poloha[] poleBodov,
                         double polomer)
 Alias pre vzdialenosťBoduOdKružnice.
static double
vzdialenostBoduOdKruznice(Poloha V,
                         Poloha S,
                         double r)
 Alias pre vzdialenosťBoduOdKružnice.
static double
vzdialenosťBoduOdKružnice(double x0,
                         double y0,
                         double x1,
                         double y1,
                         double r)
Vypočíta vzdialenosť od zadaného voľného bodu V ku kružnici
 určenej stredom S a polomerom r.
static double
vzdialenosťBoduOdKružnice(Poloha[] poleBodov,
                         double polomer)
Vypočíta vzdialenosť medzi voľným bodom V a kružnicou, ktorá
 je určená stredom S a polomerom r, pričom body V a S sú prvkami
 poľa poleBodov a r je uložený v parametri polomer).
static double
vzdialenosťBoduOdKružnice(Poloha V,
                         Poloha S,
                         double r)
Vypočíta vzdialenosť od zadaného voľného bodu V ku kružnici
 určenej stredom S a polomerom r.
static double
vzdialenostBoduOdPriamky(double x0,
                        double y0,
                        double x1,
                        double y1,
                        double x2,
                        double y2)
 Alias pre vzdialenosťBoduOdPriamky.
static double
vzdialenosťBoduOdPriamky(double x0,
                        double y0,
                        double x1,
                        double y1,
                        double x2,
                        double y2)
Vypočíta vzdialenosť od zadaného voľného bodu V[x0, y0]
 k priamke určenej dvomi bodmi A[x1, y1] a B[x2, y2].
static double
vzdialenostBoduOdPriamky(Poloha[] poleBodov)
 Alias pre vzdialenosťBoduOdPriamky.
static double
vzdialenosťBoduOdPriamky(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi voľným bodom a priamkou, ktoré
 sú určené určenými polohami bodov v poli parametra.
static double
vzdialenostBoduOdPriamky(Poloha V,
                        Poloha A,
                        Poloha B)
 Alias pre vzdialenosťBoduOdPriamky.
static double
vzdialenosťBoduOdPriamky(Poloha V,
                        Poloha A,
                        Poloha B)
Vypočíta vzdialenosť od zadaného voľného bodu V k priamke |AB|.
static double
vzdialenostBoduOdUsecky(double x0,
                       double y0,
                       double x1,
                       double y1,
                       double x2,
                       double y2)
 Alias pre vzdialenosťBoduOdÚsečky.
static double
vzdialenostBoduOdUsecky(Poloha[] poleBodov)
 Alias pre vzdialenosťBoduOdÚsečky.
static double
vzdialenostBoduOdUsecky(Poloha V,
                       Poloha A,
                       Poloha B)
 Alias pre vzdialenosťBoduOdÚsečky.
static double
vzdialenosťBoduOdÚsečky(double x0,
                       double y0,
                       double x1,
                       double y1,
                       double x2,
                       double y2)
Vypočíta vzdialenosť od zadaného voľného bodu V[x0, y0]
 k úsečke určenej dvomi bodmi A[x1, y1] a B[x2, y2].
static double
vzdialenosťBoduOdÚsečky(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi voľným bodom V a úsečkou |AB|, ktoré
 sú určené polohami bodov v poli parametra poleBodov.
static double
vzdialenosťBoduOdÚsečky(Poloha V,
                       Poloha A,
                       Poloha B)
Vypočíta vzdialenosť od zadaného voľného bodu V k úsečke |AB|.
static double
vzdialenostKruznic(double x1,
                  double y1,
                  double r1,
                  double x2,
                  double y2,
                  double r2)
 Alias pre vzdialenosťKružníc.
static double
vzdialenostKruznic(Poloha[] poleBodov,
                  double polomer1,
                  double polomer2)
 Alias pre vzdialenosťKružníc.
static double
vzdialenostKruznic(Poloha S1,
                  double r1,
                  Poloha S2,
                  double r2)
 Alias pre vzdialenosťKružníc.
static double
vzdialenosťKružníc(double x1,
                  double y1,
                  double r1,
                  double x2,
                  double y2,
                  double r2)
Vypočíta vzdialenosť medzi dvomi kružnicami, ktoré sú určené
 svojími stredmi (S1, S2) a polomermi (r1, r2).
static double
vzdialenosťKružníc(Poloha[] poleBodov,
                  double polomer1,
                  double polomer2)
Vypočíta vzdialenosť medzi dvomi kružnicami určenými stredmi
 S1 a S2 a polomermi r1 a r2, pričom stredy S1 a S2 sú prvkami
 poľa poleBodov.
static double
vzdialenosťKružníc(Poloha S1,
                  double r1,
                  Poloha S2,
                  double r2)
Vypočíta vzdialenosť medzi dvomi kružnicami, ktoré sú určené
 svojími stredmi (S1, S2) a polomermi (r1, r2).
static double
vzdialenostPriamkyOdKruznice(double x1,
                            double y1,
                            double x2,
                            double y2,
                            double x3,
                            double y3,
                            double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
static double
vzdialenostPriamkyOdKruznice(Poloha[] poleBodov,
                            double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
static double
vzdialenostPriamkyOdKruznice(Poloha A,
                            Poloha B,
                            Poloha S,
                            double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
static double
vzdialenosťPriamkyOdKružnice(double x1,
                            double y1,
                            double x2,
                            double y2,
                            double x3,
                            double y3,
                            double r)
Vypočíta vzdialenosť medzi určenou priamkou a kružnicou.
static double
vzdialenosťPriamkyOdKružnice(Poloha[] poleBodov,
                            double r)
Vypočíta vzdialenosť medzi určenou priamkou |AB| a kružnicou
 so stredom S a polomerom r, pričom body A, B a stred S sú určené
 prvkami poľa poleBodov.
static double
vzdialenosťPriamkyOdKružnice(Poloha A,
                            Poloha B,
                            Poloha S,
                            double r)
Vypočíta vzdialenosť medzi určenou priamkou |AB| a kružnicou
 so stredom S a polomerom r.
static double
vzdialenostUseciek(double x1,
                  double y1,
                  double x2,
                  double y2,
                  double x3,
                  double y3,
                  double x4,
                  double y4)
 Alias pre vzdialenosťÚsečiek.
static double
vzdialenostUseciek(Poloha[] poleBodov)
 Alias pre vzdialenosťÚsečiek.
static double
vzdialenostUseciek(Poloha A,
                  Poloha B,
                  Poloha C,
                  Poloha D)
 Alias pre vzdialenosťÚsečiek.
static double
vzdialenostUseckyOdKruznice(double x1,
                           double y1,
                           double x2,
                           double y2,
                           double x3,
                           double y3,
                           double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
static double
vzdialenostUseckyOdKruznice(Poloha[] poleBodov,
                           double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
static double
vzdialenostUseckyOdKruznice(Poloha A,
                           Poloha B,
                           Poloha S,
                           double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
static double
vzdialenosťÚsečiek(double x1,
                  double y1,
                  double x2,
                  double y2,
                  double x3,
                  double y3,
                  double x4,
                  double y4)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|.
static double
vzdialenosťÚsečiek(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|, pričom
 ich určujúce body sú prvkami poľa poleBodov.
static double
vzdialenosťÚsečiek(Poloha A,
                  Poloha B,
                  Poloha C,
                  Poloha D)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|.
static double
vzdialenosťÚsečkyOdKružnice(double x1,
                           double y1,
                           double x2,
                           double y2,
                           double x3,
                           double y3,
                           double r)
Vypočíta vzdialenosť medzi určenou úsečkou a kružnicou.
static double
vzdialenosťÚsečkyOdKružnice(Poloha[] poleBodov,
                           double r)
Vypočíta vzdialenosť medzi určenou úsečkou |AB| a kružnicou
 so stredom S a polomerom r, pričom body A, B a stred S sú určené
 prvkami poľa poleBodov.
static double
vzdialenosťÚsečkyOdKružnice(Poloha A,
                           Poloha B,
                           Poloha S,
                           double r)
Vypočíta vzdialenosť medzi určenou úsečkou |AB| a kružnicou
 so stredom S a polomerom r.
static boolean
zacniVstup()
 Alias pre začniVstup.
static boolean
zacniVstup(String výzva)
 Alias pre začniVstup.
static boolean
začniVstup()
Zobrazí vstupný riadok v spodnej časti okna.
static boolean
začniVstup(String výzva)
Funguje rovnako ako začniVstup(), s tým rozdielom, že pred
 vstupným riadkom je zobrazená návesť s výzvou.
static Long
zadajCeleCislo(String výzva)
 Alias pre zadajCeléČíslo.
static Long
zadajCeleCislo(String výzva,
              String titulok)
 Alias pre zadajCeléČíslo.
static Long
zadajCeléČíslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je celočíselný údaj).
static Long
zadajCeléČíslo(String výzva,
              String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je celočíselný údaj).
static String
zadajHeslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie hesla.
static String
zadajHeslo(String výzva,
          String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie hesla.
static Double
zadajRealneCislo(String výzva)
 Alias pre zadajReálneČíslo.
static Double
zadajRealneCislo(String výzva,
                String titulok)
 Alias pre zadajReálneČíslo.
static Double
zadajReálneČíslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je číselný údaj).
static Double
zadajReálneČíslo(String výzva,
                String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je číselný údaj).
static String
zadajRetazec(String výzva)
 Alias pre zadajReťazec.
static String
zadajReťazec(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov.
static String
zadajRetazec(String výzva,
            String titulok)
 Alias pre zadajReťazec.
static String
zadajReťazec(String výzva,
            String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov.
static boolean
zachytMys()
 Alias pre zachyťMyš.
static boolean
zachyťMyš()
Zachytí kurzor myši v okne sveta.
static boolean
zalamujeTexty()
 Zistí stav/hodnotu vlastnosti zalamovania
 textov vnútornej konzoly stropu.
static void
zalamujTexty()
Zapne zalamovanie textov vnútornej konzoly stropu.
static void
zalamujTexty(boolean zalamuj)
 Nastaví vlastnosť zalamovania textov
 vnútornej konzoly stropu podľa hodnoty parametra.
static double
zaokruhli(double hodnota,
         int miest)
 Alias pre zaokrúhli.
static double
zaokrúhli(double hodnota,
         int miest)
Zaokrúhli zadané číslo na zadaný počet (desatinných) miest.
static boolean
zapisPremennu(String názov,
             Object hodnota)
 Alias pre zapíšPremennú.
static boolean
zapíšPremennú(String názov,
             Object hodnota)
Nastaví novú hodnotu premennej
 interaktívneho režimu.
static double
zastavCasomieru()
 Alias pre zastavČasomieru.
static void
zastavCasovac()
 Alias pre zastavČasovač.
static double
zastavČasomieru()
Táto metóda „zastaví“ časomieru a vráti výsledok merania
 v sekundách.
static void
zastavČasovač()
Zastaví časovač, ktorý bol spustený metódou spustiČasovač.
static void
zastavTon()
 Alias pre zastavTón.
static void
zastavTón()
Okamžite zastaví prehrávanie generovaného harmonického signálu
 a vyčistí vnútorný zoznam tónov naplánovaných na prehranie.
static void
zastavZvuky(Object... súbory)
Zastaví všetky uvedené zvuky.
static void
zastavZvuky(String[] súbory)
Zastaví všetky uvedené zvuky.
static void
zavriet()
 Alias pre zavrieť.
static void
zavrieť()
Vygeneruje udalosť zavretia hlavného okna.
static boolean
zavriSuborNaUlozenieTonu()
 Alias pre zavriSúborNaUloženieTónu.
static boolean
zavriSúborNaUloženieTónu()
Ukončí záznam generovaných tónov, ktorý bol začatý volaním
 niektorej verzie metódy otvorSúborNaUloženieTónu.
static void
zbal()
 Alias pre zbaľ.
static void
zbaľ()
Prispôsobí veľkosť okna tak, aby sa do neho pohodlne vošli všetky
 viditeľné komponenty.
static void
ziadajPrekreslenie()
 Alias pre žiadajPrekreslenie.
static int
zistiZariadenieOkna()
Zistí číslo zariadenia, na ktorom sa nachádza okno sveta.
static void
zmenKurzorMysi(String meno)
 Alias pre zmeňKurzorMyši.
static void
zmeňKurzorMyši(String meno)
Zmení hlavnému oknu tvar kurzora myši buď na vlastný tvar kurzora
 vytvorený prostredníctvom metódy novýKurzorMyši
 (prípadne zmeňNovýKurzorMyši), alebo na niektorý zo systémom
 preddefinovaných kurzorov.
static void
zmenNovyKurzorMysi(Image predloha,
                  double x,
                  double y,
                  String meno)
 Alias pre zmeňNovýKurzorMyši.
static void
zmenNovyKurzorMysi(Image predloha,
                  int x,
                  int y,
                  String meno)
 Alias pre zmeňNovýKurzorMyši.
static void
zmeňNovýKurzorMyši(Image predloha,
                  double x,
                  double y,
                  String meno)
 Alias pre zmeňNovýKurzorMyši.
static void
zmeňNovýKurzorMyši(Image predloha,
                  int x,
                  int y,
                  String meno)
Táto metóda je kombináciou volania metód novýKurzorMyši
 a zmeňKurzorMyši.
static void
zmenRozmeryPlatien(int šírka,
                  int výška)
 Alias pre zmeňRozmeryPlátien.
static void
zmeňRozmeryPlátien(int šírka,
                  int výška)
Upraví rozmery plátna sveta, podlahy a stropu, čo je komplexný
 proces, preto by mal byť vykonaný len vo výnimočných prípadoch!
static void
zobraz()
Zobrazí hlavné okno (svet).
static boolean
zobrazeny()
 Alias pre zobrazený.
static boolean
zobrazený()
Zistí, či je hlavné okno (svet) viditeľné.
static boolean
zobrazSystemovuIkonu(boolean zobraz)
 Alias pre zobrazSystémovúIkonu.
static boolean
zobrazSystémovúIkonu(boolean zobraz)
Zobrazí alebo skryje jestvujúcu ikonu v systémovej oblasti.
static void
zobrazUvodnuObrazovku(Image úvodnýObrázok)
 Alias pre zobrazÚvodnúObrazovku.
static void
zobrazÚvodnúObrazovku(Image obrázok)
Zobrazí úvodnú obrazovku so zadaným obrázkom.
static void
zobrazUvodnuObrazovku(String názovSúboru)
 Alias pre zobrazÚvodnúObrazovku.
static void
zobrazÚvodnúObrazovku(String názovSúboru)
Zobrazí úvodnú obrazovku so zadaným obrázkom prečítaným zo súboru.
static void
zobudCasovac()
 Alias pre prebuďČasovač.
static void
zobuďČasovač()
 Alias pre prebuďČasovač.
static void
zrusInteraktivnuInstanciu()
 Alias pre zrušInteraktívnuInštanciu.
static void
zrusVstup()
 Alias pre zrušVstup.
static void
zrušInteraktívnuInštanciu()
Zruší interaktívnu inštanciu.
static void
zrušVstup()
Vykoná pre vstupný riadok rovnakú akciu ako pri stlačení klávesu
 Escape.
static void
zvuk(String súbor)
Prehrá zvukový súbor (formát .wav, .au alebo
 .mp3).
static void
zvukNaPozadi(String súbor)
 Alias pre zvukNaPozadí.
static void
zvukNaPozadí(String súbor)
Začne alebo ukončí prehrávanie zvuku zo súboru na pozadí (formát
 .wav, .au alebo .mp3).
static void
žiadajPrekreslenie()
Nastaví vnútorný príznak (stav) prekreslenia sveta tak, aby metóda
 nebolPrekreslený vrátila hodnotu
 true.
Metódy zdedené z triedy javax.swing.JFrame
addImpl, createRootPane, frameInit, getAccessibleContext, getContentPane, getDefaultCloseOperation, getGlassPane, getGraphics, getJMenuBar, getLayeredPane, getRootPane, getTransferHandler, isDefaultLookAndFeelDecorated, isRootPaneCheckingEnabled, paramString, processWindowEvent, remove, repaint, setContentPane, setDefaultCloseOperation, setDefaultLookAndFeelDecorated, setGlassPane, setIconImage, setJMenuBar, setLayeredPane, setLayout, setRootPane, setRootPaneCheckingEnabled, setTransferHandler, update
Metódy zdedené z triedy java.awt.Frame
addNotify, getCursorType, getExtendedState, getFrames, getIconImage, getMaximizedBounds, getMenuBar, getState, getTitle, isResizable, isUndecorated, remove, removeNotify, setBackground, setCursor, setExtendedState, setMaximizedBounds, setMenuBar, setOpacity, setResizable, setShape, setState, setTitle, setUndecorated
Metódy zdedené z triedy java.awt.Window
addPropertyChangeListener, addPropertyChangeListener, addWindowFocusListener, addWindowListener, addWindowStateListener, applyResourceBundle, applyResourceBundle, createBufferStrategy, createBufferStrategy, dispose, getBackground, getBufferStrategy, getFocusableWindowState, getFocusCycleRootAncestor, getFocusOwner, getFocusTraversalKeys, getIconImages, getInputContext, getListeners, getLocale, getModalExclusionType, getMostRecentFocusOwner, getOpacity, getOwnedWindows, getOwner, getOwnerlessWindows, getShape, getToolkit, getType, getWarningString, getWindowFocusListeners, getWindowListeners, getWindows, getWindowStateListeners, hide, isActive, isAlwaysOnTop, isAlwaysOnTopSupported, isAutoRequestFocus, isFocusableWindow, isFocusCycleRoot, isFocused, isLocationByPlatform, isOpaque, isShowing, isValidateRoot, pack, paint, postEvent, processEvent, processWindowFocusEvent, processWindowStateEvent, removeWindowFocusListener, removeWindowListener, removeWindowStateListener, reshape, setAlwaysOnTop, setAutoRequestFocus, setBounds, setBounds, setCursor, setFocusableWindowState, setFocusCycleRoot, setIconImages, setLocation, setLocation, setLocationByPlatform, setLocationRelativeTo, setMinimumSize, setModalExclusionType, setSize, setSize, setType, setVisible, show, toBack, toFront
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getAlignmentX, getAlignmentY, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalPolicy, getInsets, getLayout, getMaximumSize, getMinimumSize, getMousePosition, getPreferredSize, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, print, printComponents, processContainerEvent, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusTraversalKeys, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, setFont, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, contains, createImage, createImage, createVolatileImage, createVolatileImage, disable, disableEvents, dispatchEvent, enable, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBaseline, getBaselineResizeBehavior, getBounds, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getFontMetrics, getForeground, getGraphicsConfiguration, getHeight, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocation, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getSize, getTreeLock, getWidth, getX, getY, gotFocus, handleEvent, hasFocus, checkImage, checkImage, imageUpdate, inside, isBackgroundSet, isCursorSet, isDisplayable, isDoubleBuffered, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, prepareImage, prepareImage, printAll, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processKeyEvent, processMouseEvent, processMouseMotionEvent, processMouseWheelEvent, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resize, resize, revalidate, setComponentOrientation, setDropTarget, setEnabled, setFocusable, setFocusTraversalKeysEnabled, setForeground, setIgnoreRepaint, setLocale, setMaximumSize, setName, setPreferredSize, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.awt.MenuContainer
getFont, postEvent
Podrobnosti atribútov
formát
public static final DecimalFormat formát
Inštancia triedy DecimalFormat slúžiaca na
 formátovanie číselných výstupov. Úpravou vlastností tejto inštancie
 je možné dosiahnuť zmenu spôsobu formátovania celých a reálnych
 čísiel na výstupe (konzolovom alebo pri použití metódy
 F). Niektoré vlastnosti tejto
 inštancie sú použité aj na úpravu formátu čísiel zadávaných
 vstupnými prvkami (dialógmi alebo vstupným riadkom).
Pozri tiež:
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
zadajCeléČíslo(String), 
zadajReálneČíslo(String), 
upravCeléČíslo(long, String), 
upravReálneČíslo(double, String), 
prevezmiCeléČíslo(), 
prevezmiReálneČíslo(), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
format
public static final DecimalFormat format
 Alias pre formát.
príkazovýRiadok
public static Svet.PrikazovyRiadok príkazovýRiadok
Inštancia triedy PríkazovýRiadok
 slúžiaca na komunikáciu s príkazovým prostredím operačného
 systému.
prikazovyRiadok
public static Svet.PrikazovyRiadok prikazovyRiadok
 Alias pre príkazovýRiadok.
zmenaCelejObrazovky
public static ZmenaCelejObrazovky zmenaCelejObrazovky
Hodnota tohto atribútu môže obsahovať vlastnú implementáciu
 spôsobu zmeny režimu celej obrazovky. (Predvolený spôsob je
 hardvérový – pozri aj ZmenaCelejObrazovky.hardvérová.)
Podrobnosti metód
zavrieť
public static void zavrieť()
Vygeneruje udalosť zavretia hlavného okna. Ak nie je zavretie
 odmietnuté žiadnou z reakcií na zavretie okna (pozri napríklad
 ObsluhaUdalostí.zavretie()), tak bude aplikácia
 ukončená.
Pozri tiež:
koniec()
zavriet
public static void zavriet()
 Alias pre zavrieť.
verzia
public static int verzia(int hlavná,
                         int vedľajšia)
Porovná aktuálnu verziu robota so zadanou.
 
 Príklad:
 
 
if (Svet.verzia(1, 50) &lt; 0)
{
    Svet.pípni();
    Svet.správa("Na fungovanie tejto aplikácie\n" +
        "je potrebná vyššia verzia triedy GRobot!\n" +
        "(Najmenej 1.50)");
    Svet.koniec();
}
Návratová hodnota:
ak je zadaná verzia zhodná s aktuálnou, tak je vrátená
     hodnota 0; ak je aktuálna verzia nižšia, než zadaná, tak je
     vrátená záporná hodnota, inak kladná
hlavnýRobot
public static GRobot hlavnýRobot()
 Vráti hlavný robot. Hlavný robot je
 predvolene prvý vytvorený robot. Tento robot je považovaný za
 vlastníka sveta. On asistuje pri vytvorení okna aplikácie,
 s pomocou neho sú spracované niektoré úlohy… O svoje privilégium
 by mohol prísť jedine v prípade, že by bol (pravdepodobne omylom)
 uvoľnený. V takom prípade by bol
 nahradený najbližším definovaným robotom s posunutím všetkých
 privilégií jemu. Problém by mohol nastať, keby nebol k dispozícii
 žiadny ďalší robot, ktorý by ho nahradil.
Návratová hodnota:
hlavný (prvý) robot
hlavnyRobot
public static GRobot hlavnyRobot()
 Alias pre hlavnýRobot.
vyzviRoboty
public static void vyzviRoboty()
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null) a s hodnotou
 argumentu kľúč rovnou -1. Prvotné
 poradie robotov je určené poradím ich vytvorenia (čiže ak sme
 nijako neovplyvnili poradie robotov, je prvý vyzvaný ten robot,
 ktorý bol vytvorený ako prvý, to jest robot, ktorý je nakreslený
 pod všetkými ostatnými robotmi). Dodatočne môžeme poradie
 ovplyvniť volaním metód naVrch, naSpodok, vyššie,
 nižšie, pred
 a za.
 
 Poznámka: Ak je poradie robotov zmenené
 počas spracovania
 výzviev, dôjde z technických príčin k opätovnému spusteniu
 posielania výziev (inak povedané – posielanie výziev sa
 „reštartuje“). To znamená, že niektoré roboty budú vyzvané dva
 alebo viac ráz. Buďte preto opatrní so zmenami poradia v rámci
 spracovania výziev, aby ste nespôsobili vznik nekonečného
 cyklu… (Rovnaký efekt má prípadné vytvorenie nového robota,
 resp. ľubovoľnej inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nie je taký
 efektívny ako definícia vlastného zoznamu robotov
 (prípadne inštancií odvodených tried) a vykonanie hromadnej akcie
 s pomocou tohto zoznamu. Slúži predovšedkým na umožnenie hromadného
 spracovania bez nevyhnutnosti vytvárania takého zoznamu (napríklad
 pri malom počte robotov alebo predtým, než sa programátor
 podrobnejšie oboznámi s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Pozri tiež:
GRobot.prijatieVýzvy(GRobot, int), 
vyzviRoboty(int), 
vyzviRoboty(int, boolean), 
GRobot.vyzviRoboty()
vyzviRobotov
public static void vyzviRobotov()
 Alias pre vyzviRoboty.
vyzviRoboty
public static void vyzviRoboty(int kľúč)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null). S pomocou argumentu
 kľúč môžeme odlišovať rôzne druhy výziev a ovplyvňovať
 tým správanie reakcie prijatieVýzvy. Prvotné poradie robotov je určené poradím ich
 vytvorenia (čiže ak sme nijako neovplyvnili poradie robotov, je
 prvý vyzvaný ten robot, ktorý bol vytvorený ako prvý, to jest
 robot, ktorý je nakreslený pod všetkými ostatnými robotmi).
 Dodatočne môžeme poradie ovplyvniť volaním metód
 naVrch, naSpodok, vyššie, nižšie, pred a za.
 
 Poznámka: Ak je poradie robotov zmenené
 počas spracovania
 výzviev, dôjde z technických príčin k opätovnému spusteniu
 posielania výziev (inak povedané – posielanie výziev sa
 „reštartuje“). To znamená, že niektoré roboty budú vyzvané dva
 alebo viac ráz. Buďte preto opatrní so zmenami poradia v rámci
 spracovania výziev, aby ste nespôsobili vznik nekonečného
 cyklu… (Rovnaký efekt má prípadné vytvorenie nového robota,
 resp. ľubovoľnej inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nie je taký
 efektívny ako definícia vlastného zoznamu robotov
 (prípadne inštancií odvodených tried) a vykonanie hromadnej akcie
 s pomocou tohto zoznamu. Slúži predovšedkým na umožnenie hromadného
 spracovania bez nevyhnutnosti vytvárania takého zoznamu (napríklad
 pri malom počte robotov alebo predtým, než sa programátor
 podrobnejšie oboznámi s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Parametre:
kľúč – celočíselná hodnota, ktorá je poslaná do reakcie
     prijatieVýzvy
     každého robota; takto je možné odlíšiť rôzne druhy výziev,
     vďaka čomu môžeme ovplyvniť správanie reakcie prijatieVýzvy
Pozri tiež:
GRobot.prijatieVýzvy(GRobot, int), 
vyzviRoboty(), 
vyzviRoboty(int, boolean), 
GRobot.vyzviRoboty(int)
vyzviRobotov
public static void vyzviRobotov(int kľúč)
 Alias pre vyzviRoboty.
vyzviRoboty
public static void vyzviRoboty(int kľúč,
                               boolean obrátene)
Spustením tejto metódy sa pre každý robot (podľa ich
 aktuálneho poradia) vykoná reakcia prijatieVýzvy bez určenia
 autora výzvy (autor je rovný null). S pomocou argumentu
 kľúč môžeme odlišovať rôzne druhy výziev a ovplyvňovať
 tým správanie reakcie prijatieVýzvy. Argument obrátene určuje smer
 spracovania. Ak je rovný true, zoznam robotov bude
 spracovaný od konca, to znamená, že prvý bude vyzvaný buď
 naposledy vytvorený robot, alebo robot aktuálne umiestnený na
 konci vnútorného zoznamu robotov. Záleží od toho, či sme
 dodatočne ovplyvňovali poradie robotov metódami naVrch, naSpodok,
 vyššie, nižšie,
 pred a za.
 Ak je hodnota argumentu obrátene rovná false,
 metóda sa správa rovnako ako vyzviRoboty(int).
 
 Poznámka: Ak je poradie robotov zmenené
 počas spracovania
 výzviev, dôjde z technických príčin k opätovnému spusteniu
 posielania výziev (inak povedané – posielanie výziev sa
 „reštartuje“). To znamená, že niektoré roboty budú vyzvané dva
 alebo viac ráz. Buďte preto opatrní so zmenami poradia v rámci
 spracovania výziev, aby ste nespôsobili vznik nekonečného
 cyklu… (Rovnaký efekt má prípadné vytvorenie nového robota,
 resp. ľubovoľnej inštancie triedy odvodenej od robota.)
 
 Poznámka: Mechanizmus výziev nepovažujeme
 za taký efektívny ako je definícia vlastného zoznamu robotov (prípadne inštancií odvodených tried) a nasledujúce
 vykonanie hromadnej akcie s pomocou tohto vlastného zoznamu. Výzvy
 slúžia predovšedkým na umožnenie hromadného spracovania bez
 nevyhnutnosti vytvárania takého zoznamu (napríklad v prípade, keď
 nepovažujeme vytvorenie vlastného zoznamu za významný prínos,
 alebo predtým, než sa programátor podrobnejšie oboznámi
 s možnosťami zoznamov).
 
 Príklad použitia mechanizmu výziev je napríklad
 v opise metódy mimoHraníc.
Parametre:
kľúč – celočíselná hodnota, ktorá je poslaná do reakcie
     prijatieVýzvy
     každého robota; takto je možné odlíšiť rôzne druhy výziev,
     vďaka čomu môžeme ovplyvniť správanie reakcie prijatieVýzvy
obrátene – týmto argumentom môžeme ovplyvniť smer
     spracovania;
     true znamená spracovanie vnútorného zoznamu
     robotov od konca; false znamená rovnaký spôsob
     spracovania ako pri metóde vyzviRoboty(int)
Pozri tiež:
GRobot.prijatieVýzvy(GRobot, int), 
vyzviRoboty(), 
vyzviRoboty(int), 
GRobot.vyzviRoboty(int, boolean)
vyzviRobotov
public static void vyzviRobotov(int kľúč,
                                boolean obrátene)
 Alias pre vyzviRoboty.
najmenšieX
public static double najmenšieX()
 Zistí najmenšiu x-ovú súradnicu sveta.
 Plátna podlahy a stropu majú obmedzenú veľkosť, ktorá je o niečo
 väčšia ako predvolená veľkosť okna aplikácie.
Návratová hodnota:
najmenšia x-ová súradnica plátien
Pozri tiež:
najväčšieX(), 
najmenšieY(), 
najväčšieY()
najmensieX
public static double najmensieX()
 Alias pre najmenšieX.
minimálneX
public static double minimálneX()
 Alias pre najmenšieX.
minimalneX
public static double minimalneX()
 Alias pre najmenšieX.
najmenšieY
public static double najmenšieY()
 Zistí najmenšiu y-ovú súradnicu sveta.
 Plátna podlahy a stropu majú obmedzenú veľkosť, ktorá je o niečo
 väčšia ako predvolená veľkosť okna aplikácie.
Návratová hodnota:
najmenšia y-ová súradnica plátien
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najväčšieY()
najmensieY
public static double najmensieY()
 Alias pre najmenšieY.
minimálneY
public static double minimálneY()
 Alias pre najmenšieY.
minimalneY
public static double minimalneY()
 Alias pre najmenšieY.
najväčšieX
public static double najväčšieX()
 Zistí najväčšiu x-ovú súradnicu sveta.
 Plátna podlahy a stropu majú obmedzenú veľkosť, ktorá je o niečo
 väčšia ako predvolená veľkosť okna aplikácie.
Návratová hodnota:
najväčšia x-ová súradnica plátien
Pozri tiež:
najmenšieX(), 
najmenšieY(), 
najväčšieY()
najvacsieX
public static double najvacsieX()
 Alias pre najväčšieX.
maximálneX
public static double maximálneX()
 Alias pre najväčšieX.
maximalneX
public static double maximalneX()
 Alias pre najväčšieX.
najväčšieY
public static double najväčšieY()
 Zistí najväčšiu y-ovú súradnicu sveta.
 Plátna podlahy a stropu majú obmedzenú veľkosť, ktorá je o niečo
 väčšia ako predvolená veľkosť okna aplikácie.
Návratová hodnota:
najväčšia y-ová súradnica plátien
Pozri tiež:
najmenšieX(), 
najväčšieX(), 
najmenšieY()
najvacsieY
public static double najvacsieY()
 Alias pre najväčšieY.
maximálneY
public static double maximálneY()
 Alias pre najväčšieY.
maximalneY
public static double maximalneY()
 Alias pre najväčšieY.
šírka
public static int šírka()
Zistí šírku plátien sveta.
Návratová hodnota:
šírka plátien sveta
sirka
public static int sirka()
 Alias pre šírka.
výška
public static int výška()
Zistí výšku plátien sveta.
Návratová hodnota:
výška plátien sveta
vyska
public static int vyska()
 Alias pre šírka.
viditeľnáŠírka
public static int viditeľnáŠírka()
Zistí aktuálnu šírku tzv. klientskej oblasti okna. Ide
 o viditeľnú časť komponentu okna zahŕňajúceho obvykle šedú plochu s predvolene bielou
 kresliacou oblasťou a prípadne ďalšími komponentmi (vstupným riadkom, tlačidlami…). Ak je okno užšie, než sú rozmery plátien
 sveta, tak ide v podstate o viditeľnú šírku plátien.
Návratová hodnota:
šírka klientskej oblasti okna (ak je okno užšie, než
     plátno, tak ide o viditeľnú časť plátien sveta)
viditelnaSirka
public static int viditelnaSirka()
 Alias pre viditeľnáŠírka.
viditeľnáVýška
public static int viditeľnáVýška()
Zistí viditeľnú výšku tzv. klientskej oblasti okna. Pozri aj
 opis metódy viditeľnáŠírka() – rovnaké
 informácie platia aj pre túto metódu
 (viditeľnáVýška).
Návratová hodnota:
výška klientskej oblasti okna (ak je okno menšie, než
     výška plátna, tak ide o viditeľnú časť plátien sveta)
viditelnaVyska
public static int viditelnaVyska()
 Alias pre viditeľnáVýška.
šírkaOkna
public static int šírkaOkna()
Zistí šírku hlavného okna aplikácie.
Návratová hodnota:
šírka hlavného okna aplikácie
sirkaOkna
public static int sirkaOkna()
 Alias pre šírkaOkna.
výškaOkna
public static int výškaOkna()
Zistí výšku hlavného okna aplikácie.
Návratová hodnota:
výška hlavného okna aplikácie
vyskaOkna
public static int vyskaOkna()
 Alias pre výškaOkna.
titulok
public static String titulok()
Vráti titulok hlavného okna aplikácie. Ak metóda zistí, že
 aktuálny titulok sa zhoduje s predvoleným titulkom (prípadne ak
 hlavné okno ešte nejestvuje), tak vráti hodnotu
 null.
Návratová hodnota:
titulok hlavného okna aplikácie alebo null
titulok
public static void titulok(String titulok)
Nastaví titulok hlavného okna aplikácie. Ak je zadaná hodnota
 null, tak metóda nastaví predvolený titulok okna.
Parametre:
titulok – nový titulok hlavného okna aplikácie alebo
     null na nastavenie predvoleného titulku okna
ľavýOkraj
public static double ľavýOkraj()
 Zistí najmenšiu aktuálne viditeľnú x-ovú súradnicu
 plátien (podlahy alebo stropu).
Návratová hodnota:
najmenšia viditeľná x-ová súradnica plátien
Pozri tiež:
pravýOkraj(), 
spodnýOkraj(), 
vrchnýOkraj()
lavyOkraj
public static double lavyOkraj()
 Alias pre ľavýOkraj.
spodnýOkraj
public static double spodnýOkraj()
 Zistí najmenšiu aktuálne viditeľnú y-ovú súradnicu
 plátien (podlahy alebo stropu).
Návratová hodnota:
najmenšia viditeľná y-ová súradnica plátien
Pozri tiež:
ľavýOkraj(), 
pravýOkraj(), 
vrchnýOkraj()
spodnyOkraj
public static double spodnyOkraj()
 Alias pre spodnýOkraj.
dolnýOkraj
public static double dolnýOkraj()
 Alias pre spodnýOkraj.
dolnyOkraj
public static double dolnyOkraj()
 Alias pre dolnýOkraj.
pravýOkraj
public static double pravýOkraj()
 Zistí najväčšiu aktuálne viditeľnú x-ovú súradnicu
 plátien (podlahy alebo stropu).
Návratová hodnota:
najväčšia viditeľná x-ová súradnica plátien
Pozri tiež:
ľavýOkraj(), 
spodnýOkraj(), 
vrchnýOkraj()
pravyOkraj
public static double pravyOkraj()
 Alias pre pravýOkraj.
vrchnýOkraj
public static double vrchnýOkraj()
 Zistí najväčšiu aktuálne viditeľnú y-ovú súradnicu
 plátien (podlahy alebo stropu).
Návratová hodnota:
najväčšia viditeľná y-ová súradnica plátien
Pozri tiež:
ľavýOkraj(), 
pravýOkraj(), 
spodnýOkraj()
vrchnyOkraj
public static double vrchnyOkraj()
 Alias pre vrchnýOkraj.
hornýOkraj
public static double hornýOkraj()
 Alias pre vrchnýOkraj.
hornyOkraj
public static double hornyOkraj()
 Alias pre hornýOkraj.
zmeňRozmeryPlátien
public static void zmeňRozmeryPlátien(int šírka,
                                      int výška)
Upraví rozmery plátna sveta, podlahy a stropu, čo je komplexný
 proces, preto by mal byť vykonaný len vo výnimočných prípadoch!
 Tento proces má za následok prebudovanie grafických objektov sveta,
 stropu a podlahy (čo má za následok vymazanie ich grafického
 obsahu), ich opätovné priradenie grafickým robotom, aktualizáciu
 umiestnenia komponentov sveta (tlačidiel – pozri triedu
 Tlačidlo), zrušenie úprav textov (pozri metódu
 upravText), odstránenie
 prípadných definovaných inštancií vlnenia
 oboch plátien aj sveta (pretože sa menia ich rozmery; prípadné
 definované vlnenia obrázkov zostanú zachované), prepočet niektorých
 ďalších vnútorných parametrov a úpravu súradnicových systémov
 všetkých obrázkov programovacieho rámca.
Parametre:
šírka – nová šírka plátien
výška – nová výška plátien
Pozri tiež:
GRobot.GRobot(int, int), 
GRobot.GRobot(int, int, String)
zmenRozmeryPlatien
public static void zmenRozmeryPlatien(int šírka,
                                      int výška)
 Alias pre zmeňRozmeryPlátien.
upravRozmeryPlátien
public static void upravRozmeryPlátien(int šírka,
                                       int výška)
 Alias pre zmeňRozmeryPlátien.
upravRozmeryPlatien
public static void upravRozmeryPlatien(int šírka,
                                       int výška)
 Alias pre zmeňRozmeryPlátien.
viditeľný
public static boolean viditeľný()
Zistí, či je hlavné okno (svet) viditeľné. Ak okno sveta ešte
 nebolo inicializované (to platí v prípade, keď ešte nebola
 vytvorená ani jedna inštancia robota, to znamená, že nejestvuje
 hlavný robot), metóda informuje o tom, či bude okno zobrazené hneď
 po inicializácii. (Ak nie, znamená to, že sme volali metódu
 skry, prípadne niektorú z verzií metódy zobrazÚvodnúObrazovku. V tom
 prípade musíme po inicializácii okno zobraziť metódou zobraz, prípadne metódou skryÚvodnúObrazovku.) Alternatívou tejto metódy je metóda zobrazený.
Návratová hodnota:
true – áno; false – nie
viditelny
public static boolean viditelny()
 Alias pre viditeľný.
zobrazený
public static boolean zobrazený()
Zistí, či je hlavné okno (svet) viditeľné. Ak okno sveta ešte
 nebolo inicializované (to platí v prípade, keď ešte nebola
 vytvorená ani jedna inštancia robota, to znamená, že nejestvuje
 hlavný robot), metóda informuje o tom, či bude okno zobrazené hneď
 po inicializácii. (Ak nie, znamená to, že sme volali metódu
 skry, prípadne niektorú z verzií metódy zobrazÚvodnúObrazovku. V tom
 prípade musíme po inicializácii okno zobraziť metódou zobraz, prípadne metódou skryÚvodnúObrazovku.) Alternatívou tejto metódy je metóda viditeľný.
Návratová hodnota:
true – áno; false – nie
zobrazeny
public static boolean zobrazeny()
 Alias pre zobrazený.
skry
public static void skry()
Skryje hlavné okno. Zároveň spôsobí, že okno sveta nebude
 automaticky zobrazené pri štarte. Aplikácia sa môže inicializovať
 a potom zobraziť hlavné okno metódou zobraz.
zobraz
public static void zobraz()
Zobrazí hlavné okno (svet). Metóda je protikladom metódy
 skry.
upevni
public static void upevni()
Upevní hlavné okno (svet) – okno bude mať pevnú veľkosť. Opakom
 je metóda uvoľni. Veľkosť okna nemá vplyv na
 veľkosti plátien podlahy a stropu. Tie je v súčasnej verzii
 programovacieho rámca možné upraviť konštruktorom hlavného robota (čo je historicky starší spôsob –
 pozri aj konštruktor GRobot.GRobot(int, int)) alebo volaním
 metódy zmeňRozmeryPlátien.
Pozri tiež:
uvoľni()
uvoľni
public static void uvoľni()
Uvoľní hlavné okno (svet) – okno nebude mať pevnú veľkosť
 (predvolené správanie sveta). Opakom je metóda upevni. Veľkosť okna nemá vplyv na veľkosti plátien podlahy
 a stropu. Tie je v súčasnej verzii programovacieho rámca možné
 upraviť konštruktorom hlavného robota
 (čo je historicky starší spôsob – pozri aj konštruktor
 GRobot.GRobot(int, int)) alebo volaním metódy
 zmeňRozmeryPlátien.
 
 Poznámka: Názov uvoľni
 má v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Pozri tiež:
upevni()
uvolni
public static void uvolni()
 Alias pre uvoľni.
zbaľ
public static void zbaľ()
Prispôsobí veľkosť okna tak, aby sa do neho pohodlne vošli všetky
 viditeľné komponenty.
zbal
public static void zbal()
 Alias pre zbaľ.
vystreď
public static void vystreď()
Presunie okno tak, aby sa nachádzalo v strede obrazovky.
vystred
public static void vystred()
 Alias pre vystreď.
premiestniNaZariadenie
public static void premiestniNaZariadenie(int zariadenie)
Umiestni okno sveta na určené zobrazovacie zariadenie.
 Zariadenie je určené jeho „poradovým číslom“ (indexom; čiže
 nula označuje prvé zariadenie). Okno je umiestnené tak, aby
 bola na určenom zariadení viditeľná celá jeho plocha, ak to
 rozmery okna dovoľujú. Ak je okno väčšie, než sú rozmery
 zariadenia, tak je umiestnené do ľavého horného rohu
 zariadenia. Ak zariadenie so zadaným indexom nejestvuje,
 tak nie je vykonaná žiadna operácia.
Parametre:
zariadenie – číslo zariadenia, na ktoré má byť
     okno umiestnené
Pozri tiež:
početZariadení(), 
premiestniNaZariadenie(), 
zistiZariadenieOkna()
premiestniNaZariadenie
public static void premiestniNaZariadenie()
Umiestni okno sveta na predvolené zobrazovacie zariadenie.
 Okno je umiestnené tak, aby bola viditeľná celá jeho plocha,
 ak to jeho rozmery dovoľujú. Ak je okno väčšie, než sú rozmery
 zariadenia, tak je umiestnené do ľavého horného rohu.
Pozri tiež:
početZariadení(), 
premiestniNaZariadenie(int), 
zistiZariadenieOkna()
premiestniNaObrazovku
public static void premiestniNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
premiestniNaObrazovku
public static void premiestniNaObrazovku()
 Alias pre premiestniNaZariadenie.
presuňNaZariadenie
public static void presuňNaZariadenie(int zariadenie)
 Alias pre premiestniNaZariadenie.
presuňNaZariadenie
public static void presuňNaZariadenie()
 Alias pre premiestniNaZariadenie.
presunNaZariadenie
public static void presunNaZariadenie(int zariadenie)
 Alias pre premiestniNaZariadenie.
presunNaZariadenie
public static void presunNaZariadenie()
 Alias pre premiestniNaZariadenie.
presuňNaObrazovku
public static void presuňNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
presuňNaObrazovku
public static void presuňNaObrazovku()
 Alias pre premiestniNaZariadenie.
presunNaObrazovku
public static void presunNaObrazovku(int zariadenie)
 Alias pre premiestniNaZariadenie.
presunNaObrazovku
public static void presunNaObrazovku()
 Alias pre premiestniNaZariadenie.
zistiZariadenieOkna
public static int zistiZariadenieOkna()
Zistí číslo zariadenia, na ktorom sa nachádza okno sveta.
 Zariadenie je určené jeho „poradovým číslom“ (indexom; čiže
 nula označuje prvé zariadenie). Pri zisťovaní polohy je braný do
 úvahy stred okna. Ak také zariadenie, do ktorého plochy by patril
 stred okna nejestvuje, tak je vrátená hodnota -1.
Návratová hodnota:
číslo zariadenia, do ktorého patrí stred okna sveta alebo
     -1, ak také zariadenie nejestvuje
Pozri tiež:
početZariadení(), 
premiestniNaZariadenie(), 
premiestniNaZariadenie(int)
maximalizovaný
public static boolean maximalizovaný()
Zistí, či je okno sveta v maximalizovanom stave.
Návratová hodnota:
ak je okno sveta v maximalizovanom stave, tak vráti hodnotu
     true, inak false
Pozri tiež:
ObsluhaUdalostí.maximalizovanie(), 
maximalizuj(), 
minimalizovaný(), 
minimalizuj(), 
normálny(), 
obnov()
maximalizovany
public static boolean maximalizovany()
 Alias pre maximalizovaný.
maximalizuj
public static void maximalizuj()
Pokúsi sa prepnúť okno sveta do maximalizovaného stavu. O tom,
 či sa táto akcia podarila sa dá presvedčiť volaním metódy maximalizovaný.
Pozri tiež:
ObsluhaUdalostí.maximalizovanie(), 
maximalizovaný(), 
minimalizovaný(), 
minimalizuj(), 
normálny(), 
obnov()
minimalizovaný
public static boolean minimalizovaný()
Zistí, či je okno sveta v minimalizovanom stave.
Návratová hodnota:
ak je okno sveta v minimalizovanom stave, tak vráti hodnotu
     true, inak false
Pozri tiež:
ObsluhaUdalostí.minimalizovanie(), 
maximalizovaný(), 
maximalizuj(), 
minimalizuj(), 
normálny(), 
obnov()
minimalizovany
public static boolean minimalizovany()
 Alias pre minimalizovaný.
minimalizuj
public static void minimalizuj()
Pokúsi sa prepnúť okno sveta do minimalizovaného stavu. O tom,
 či sa táto akcia podarila sa dá presvedčiť volaním metódy minimalizovaný.
Pozri tiež:
ObsluhaUdalostí.minimalizovanie(), 
maximalizovaný(), 
maximalizuj(), 
minimalizovaný(), 
normálny(), 
obnov()
normálny
public static boolean normálny()
Zistí, či je okno sveta v normálnom stave.
Návratová hodnota:
ak je okno sveta v normálnom stave, tak vráti hodnotu
     true, inak false
Pozri tiež:
ObsluhaUdalostí.obnovenie(), 
maximalizovaný(), 
maximalizuj(), 
minimalizovaný(), 
minimalizuj(), 
obnov()
normalny
public static boolean normalny()
 Alias pre normálny.
obnov
public static void obnov()
Pokúsi sa prepnúť okno sveta do normálneho stavu. (V zmysle
 „nie maximalizovaného a nie minimalizovaného“ stavu.) O tom, či
 sa táto akcia podarila sa dá presvedčiť volaním metódy normálny.
Pozri tiež:
ObsluhaUdalostí.obnovenie(), 
maximalizovaný(), 
maximalizuj(), 
minimalizovaný(), 
minimalizuj(), 
normálny(), 
obnov()
hlavnýPanel
public static JPanel hlavnýPanel()
Poskytne komponent hlavného panela vloženého v hlavnom okne
 aplikácie (vo svete).
 
 Upozornenie: Neodborná manipulácia
 s týmto komponentom môže mať nežiaduce vedľajšie účinky.
 
 Poznámka: Táto metóda bola do
 programovacieho rámca niekoľkokrát pridaná na testovacie účely,
 pričom hneď po skončení testov bola odobraná. Autor rámca nemal
 v úmysle trvalé ponechanie možnosti získania hlavného panela
 na ďalšiu manipuláciu, ale dňa 12. 6. 2019 ho okolnosti presvedčili
 o tom, aby túto možnosť predsa ponechal dostupnú natrvalo.
 Riaďte sa však upozornením vyššie.
Návratová hodnota:
hlavný panel aplikačného okna
hlavnyPanel
public static JPanel hlavnyPanel()
 Alias pre hlavnýPanel.
vzdialenosť
public static double vzdialenosť(double súradnicaBoduX,
                                 double súradnicaBoduY)
Zistí vzdialenosť bodu so zadanými súradnicami od stredu
 súradnicovej sústavy.
Parametre:
súradnicaBoduX – x-ová súradnica bodu
súradnicaBoduY – y-ová súradnica bodu
Návratová hodnota:
vzdialenosť medzi stredom súradnicovej sústavy
     a zadaným bodom
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Poloha), 
vzdialenosť(Shape)
vzdialenost
public static double vzdialenost(double súradnicaBoduX,
                                 double súradnicaBoduY)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Poloha objekt)
Zistí, aká je vzdialenosť zadaného objektu od stredu súradnicovej
 sústavy.
Parametre:
objekt – objekt, ktorého vzdialenosť zisťujeme
Návratová hodnota:
vzdialenosť objektu od stredu súradnicovej sústavy
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double), 
vzdialenosť(Shape)
vzdialenost
public static double vzdialenost(Poloha objekt)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Shape tvar)
Zistí vzdialenosť stredu hraníc[1] zadaného tvaru od
 stredu súradnicovej sústavy.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar – tvar Javy (Shape), stred hraníc
     ktorého vzdialenosť od stredu zisťujeme
Návratová hodnota:
vzdialenosť stredom súradnicovej sústavy a stredom
     zadaného tvaru
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double), 
vzdialenosť(Poloha)
vzdialenost
public static double vzdialenost(Shape tvar)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť medzi bodmi so zadanými súradnicami.
Parametre:
súradnicaBoduX1 – x-ová súradnica prvého bodu
súradnicaBoduY1 – y-ová súradnica prvého bodu
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
vzájomná vzdialenosť medzi zadanými bodmi
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Poloha, Poloha), 
vzdialenosť(Shape, Shape)
vzdialenost
public static double vzdialenost(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Poloha objekt1,
                                 Poloha objekt2)
Zistí vzájomnú vzdialenosť zadaných objektov.
Parametre:
objekt1 – prvý objekt, ktorého súradnice sa berú do úvahy
objekt2 – druhý objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
vzájomná vzdialenosť medzi zadanými objektmi
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double, double, double), 
vzdialenosť(Shape, Shape)
vzdialenost
public static double vzdialenost(Poloha objekt1,
                                 Poloha objekt2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Shape tvar1,
                                 Shape tvar2)
Zistí vzájomnú vzdialenosť stredov hraníc[1] zadaných
 tvarov.
 
 [1] – nejde presne o stred útvarov; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – prvý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
tvar2 – druhý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
vzájomná vzdialenosť stredov hraníc zadaných tvarov
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double, double, double), 
vzdialenosť(Poloha, Poloha)
vzdialenost
public static double vzdialenost(Shape tvar1,
                                 Shape tvar2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Poloha objekt1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť zadaného objektu a bodu so zadanými
 súradnicami.
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
súradnicaBoduX2 – x-ová súradnica bodu
súradnicaBoduY2 – y-ová súradnica bodu
Návratová hodnota:
vzájomná vzdialenosť medzi zadaným objektom a bodom
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Shape, double, double)
vzdialenost
public static double vzdialenost(Poloha objekt1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Shape tvar1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
Zistí vzájomnú vzdialenosť stredu hraníc[1] zadaného
 tvaru a bodu so zadanými súradnicami.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
súradnicaBoduX2 – x-ová súradnica bodu
súradnicaBoduY2 – y-ová súradnica bodu
Návratová hodnota:
vzájomná vzdialenosť medzi stredom hraníc zadaného tvaru
     a bodom
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Poloha, double, double)
vzdialenost
public static double vzdialenost(Shape tvar1,
                                 double súradnicaBoduX2,
                                 double súradnicaBoduY2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 Poloha objekt2)
Zistí vzájomnú vzdialenosť medzi bodom so zadanými súradnicami
 a zadaným objektom.
Parametre:
súradnicaBoduX1 – x-ová súradnica bodu
súradnicaBoduY1 – y-ová súradnica bodu
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
vzájomná vzdialenosť medzi zadaným bodom a objektom
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Shape, Poloha)
vzdialenost
public static double vzdialenost(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 Poloha objekt2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Shape tvar1,
                                 Poloha objekt2)
Zistí vzájomnú vzdialenosť stredu hraníc[1] zadaného
 tvaru a polohy zadaného objektu.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
vzájomná vzdialenosť stredu hraníc zadaného tvaru
     a polohy zadaného objektu
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double, Poloha)
vzdialenost
public static double vzdialenost(Shape tvar1,
                                 Poloha objekt2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 Shape tvar2)
Zistí vzájomnú vzdialenosť medzi bodom so zadanými súradnicami
 a stredom hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
súradnicaBoduX1 – x-ová súradnica bodu
súradnicaBoduY1 – y-ová súradnica bodu
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
vzájomná vzdialenosť medzi zadaným bodom a stredom hraníc
     zadaného tvaru
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(Poloha, Shape)
vzdialenost
public static double vzdialenost(double súradnicaBoduX1,
                                 double súradnicaBoduY1,
                                 Shape tvar2)
 Alias pre vzdialenosť.
vzdialenosť
public static double vzdialenosť(Poloha objekt1,
                                 Shape tvar2)
Zistí vzájomnú vzdialenosť medzi zadaným objektom a stredom
 hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
vzájomná vzdialenosť medzi zadaným objektom a stredom
     hraníc zadaného tvaru
Pozri tiež:
GRobot.vzdialenosť(), 
vzdialenosť(double, double, Shape)
vzdialenost
public static double vzdialenost(Poloha objekt1,
                                 Shape tvar2)
 Alias pre vzdialenosť.
smer
public static double smer(double súradnicaBoduX,
                          double súradnicaBoduY)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a zadaným bodom.
Parametre:
súradnicaBoduX – x-ová súradnica určujúceho bodu
súradnicaBoduY – y-ová súradnica určujúceho bodu
Návratová hodnota:
uhol (smer) medzi osou x a priamkou určenou stredom
     súradnicovej sústavy a zadaným bodom
Pozri tiež:
GRobot.smerNa(double, double), 
smer(Poloha), 
smer(Shape)
smer
public static double smer(Poloha objekt)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a bodom určeným polohou zadaného
 objektu.
Parametre:
objekt – objekt, ktorého poloha učuje súradnice určujúceho
     bodu priamky
Návratová hodnota:
uhol (smer) medzi osou x a priamkou určenou stredom
     súradnicovej sústavy a bodom určeným polohou zadaného objektu
Pozri tiež:
GRobot.smerNa(Poloha), 
smer(double, double), 
smer(Shape)
smer
public static double smer(Shape tvar)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 stredom súradncovej sústavy a bodom určeným polohou stredu
 hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
objekt – tvar Javy (Shape), ktorého stred
     hraníc učuje súradnice určujúceho bodu priamky
Návratová hodnota:
uhol (smer) medzi osou x a priamkou určenou stredom
     súradnicovej sústavy a bodom určeným stredom hraníc zadaného
     tvaru Javy
Pozri tiež:
GRobot.smerNa(Shape), 
smer(double, double), 
smer(Poloha)
smer
public static double smer(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 zadanými bodmi.
Parametre:
súradnicaBoduX1 – x-ová súradnica prvého bodu
súradnicaBoduY1 – y-ová súradnica prvého bodu
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol (smer) medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(double, double), 
smer(Poloha, Poloha), 
smer(Shape, Shape)
smer
public static double smer(Poloha objekt1,
                          Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 bodmi zadanými vo forme polôh objektov.
Parametre:
objekt1 – prvý objekt, ktorého súradnice sa berú do úvahy
objekt2 – druhý objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(Poloha), 
smer(double, double, double, double), 
smer(Shape, Shape)
smer
public static double smer(Shape tvar1,
                          Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou
 bodmi vypočítanými zo stredov hraníc[1] zadaných tvarov
 Javy.
 
 [1] – nejde presne o stred útvarov; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – prvý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
tvar2 – druhý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(Shape), 
smer(double, double, double, double), 
smer(Poloha, Poloha)
smer
public static double smer(Poloha objekt1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a zadanými súradnicami.
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Poloha), 
smer(Shape, double, double)
smer
public static double smer(Shape tvar1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a zadanými súradnicami.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Shape), 
smer(Poloha, double, double)
smer
public static double smer(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a polohou zadaného objektu.
Parametre:
súradnicaBoduX1 – x-ová súradnica prvého bodu
súradnicaBoduY1 – y-ová súradnica prvého bodu
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Poloha), 
smer(Shape, Poloha)
smer
public static double smer(Shape tvar1,
                          Poloha objekt2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a polohou zadaného objektu.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Poloha), 
smer(double, double, Poloha)
smer
public static double smer(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a stredom hraníc[1]
 zadaného tvaru Javy.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
súradnicaBoduX1 – x-ová súradnica bodu
súradnicaBoduY1 – y-ová súradnica bodu
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Shape), 
smer(Poloha, Shape)
smer
public static double smer(Poloha objekt1,
                          Shape tvar2)
Zistí uhol (smer) zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a stredom hraníc[1]
 zadaného tvaru Javy.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol (smer) medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Shape), 
smer(double, double, Shape)
uhol
public static double uhol(double súradnicaBoduX,
                          double súradnicaBoduY)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a zadaným bodom.
Parametre:
súradnicaBoduX – x-ová súradnica určujúceho bodu
súradnicaBoduY – y-ová súradnica určujúceho bodu
Návratová hodnota:
uhol medzi osou x a priamkou určenou stredom súradnicovej
     sústavy a zadaným bodom
Pozri tiež:
GRobot.smerNa(double, double), 
uhol(Poloha), 
uhol(Shape)
uhol
public static double uhol(Poloha objekt)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a bodom určeným polohou zadaného objektu.
Parametre:
objekt – objekt, ktorého poloha učuje súradnice určujúceho
     bodu priamky
Návratová hodnota:
uhol medzi osou x a priamkou určenou stredom súradnicovej
     sústavy a bodom určeným polohou zadaného objektu
Pozri tiež:
GRobot.smerNa(Poloha), 
uhol(double, double), 
uhol(Shape)
uhol
public static double uhol(Shape tvar)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou stredom
 súradncovej sústavy a bodom určeným polohou stredu
 hraníc[1] zadaného tvaru.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
objekt – tvar Javy (Shape), ktorého stred
     hraníc učuje súradnice určujúceho bodu priamky
Návratová hodnota:
uhol medzi osou x a priamkou určenou stredom súradnicovej
     sústavy a bodom určeným stredom hraníc zadaného tvaru Javy
Pozri tiež:
GRobot.smerNa(Shape), 
uhol(double, double), 
uhol(Poloha)
uhol
public static double uhol(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou zadanými
 bodmi.
Parametre:
súradnicaBoduX1 – x-ová súradnica prvého bodu
súradnicaBoduY1 – y-ová súradnica prvého bodu
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(double, double), 
uhol(Poloha, Poloha), 
uhol(Shape, Shape)
uhol
public static double uhol(Poloha objekt1,
                          Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 zadanými vo forme polôh objektov.
Parametre:
objekt1 – prvý objekt, ktorého súradnice sa berú do úvahy
objekt2 – druhý objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(Poloha), 
uhol(double, double, double, double), 
uhol(Shape, Shape)
uhol
public static double uhol(Shape tvar1,
                          Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 vypočítanými zo stredov hraníc[1] zadaných tvarov
 Javy.
 
 [1] – nejde presne o stred útvarov; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – prvý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
tvar2 – druhý tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol medzi osou x a priamkou vedúcou zadanými bodmi
Pozri tiež:
GRobot.smerNa(Shape), 
uhol(double, double, double, double), 
uhol(Poloha, Poloha)
uhol
public static double uhol(Poloha objekt1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a zadanými súradnicami.
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(double, double), 
uhol(Shape, double, double)
uhol
public static double uhol(Shape tvar1,
                          double súradnicaBoduX2,
                          double súradnicaBoduY2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a zadanými súradnicami.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
súradnicaBoduX2 – x-ová súradnica druhého bodu
súradnicaBoduY2 – y-ová súradnica druhého bodu
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(double, double), 
uhol(Poloha, double, double)
uhol
public static double uhol(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a polohou zadaného objektu.
Parametre:
súradnicaBoduX1 – x-ová súradnica prvého bodu
súradnicaBoduY1 – y-ová súradnica prvého bodu
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Poloha), 
uhol(Shape, Poloha)
uhol
public static double uhol(Shape tvar1,
                          Poloha objekt2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými stredom hraníc[1] zadaného tvaru Javy
 a polohou zadaného objektu.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
tvar1 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
objekt2 – objekt, ktorého súradnice sa berú do úvahy
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Poloha), 
uhol(double, double, Poloha)
uhol
public static double uhol(double súradnicaBoduX1,
                          double súradnicaBoduY1,
                          Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými zadanými súradnicami a stredom hraníc[1]
 zadaného tvaru Javy.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
súradnicaBoduX1 – x-ová súradnica bodu
súradnicaBoduY1 – y-ová súradnica bodu
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Shape), 
uhol(Poloha, Shape)
uhol
public static double uhol(Poloha objekt1,
                          Shape tvar2)
Zistí uhol zvieraný medzi osou x a priamkou vedúcou bodmi
 určenými polohou zadaného objektu a stredom hraníc[1]
 zadaného tvaru Javy.
 
 [1] – nejde presne o stred útvaru; je použitý
 najrýchlejší a najjednoduchší spôsob zistenia približného
 stredu: vezme sa obdĺžnik tesne ohraničujúci útvar a určí sa
 jeho stred – čiže „stred hraníc.“
Parametre:
objekt1 – objekt, ktorého súradnice sa berú do úvahy
tvar2 – tvar Javy (Shape), ktorého
     stred hraníc sa berie do úvahy
Návratová hodnota:
uhol medzi osou x a určenou priamkou
Pozri tiež:
GRobot.smerNa(Shape), 
uhol(double, double, Shape)
vymaž
public static void vymaž()
Vymaže obsah sveta. Má rovnaký efekt, ako keby sme za sebou
 spustili metódy podlaha.vymaž()
 a strop.vymaž().
vymaz
public static void vymaz()
 Alias pre vymaž.
vymažTexty
public static void vymažTexty()
Vymaže texty podlahy a stropu. Má rovnaký efekt, ako keby sme za
 sebou spustili metódy podlaha.vymažTexty() a strop.vymažTexty().
vymazTexty
public static void vymazTexty()
 Alias pre vymažTexty.
vymažGrafiku
public static void vymažGrafiku()
Vymaže plátno podlahy a stropu. Má rovnaký efekt, ako keby sme za
 sebou spustili metódy podlaha.vymažGrafiku() a strop.vymažGrafiku().
vymazGrafiku
public static void vymazGrafiku()
 Alias pre vymažGrafiku.
povoľViacnásobnúObsluhuUdalostí
public static void povoľViacnásobnúObsluhuUdalostí()
Po spustení tejto metódy bude možné vytváranie viacerých verzií
 obsluhy udalostí, ktoré môžu byť
 neskôr podľa potreby uvedené do činnosti metódou presmerujObsluhuUdalostí. Vždy môže byť v činnosti len jedna
 obsluha udalostí. Vytváranie viacerých inštancií triedy ObsluhaUdalostí (resp. inštancií odvodených tried) je predvolene
 zakázané, aby nedochádzalo k omylom. Po povolení tvorby viacerých
 inštancií obsluhy udalostí zostáva aktívna prvá vytvorená
 inštancia, dokedy tok udalostí nepresmerujeme do inej metódou
 presmerujObsluhuUdalostí.
 
 Upozornenie: Pri povoľovaní viacnásobnej
 obsluhy musíme dobre rozumieť mechanizmu spracovania udalostí. Nemali
 by sme ju povoliť bezdôvodne. Príkadom takého dôvodu môže byť potreba
 využitia odlišnej skupiny udalostí v rôznych situáciách hry, ktorú
 programujeme napríklad keď hráč vstúpi do hlavnej ponuky hry,
 má obsluha udalostí fungovať ináč, než keď hráč aktívne hrá hru…
 
 Príklad, ktorý používa zapnutie viacnásobného spracovania
 udalostí je pri opise metódy presmerujObsluhuUdalostí.
Pozri tiež:
ObsluhaUdalostí, 
presmerujObsluhuUdalostí(ObsluhaUdalostí)
povolViacnasobnuObsluhuUdalosti
public static void povolViacnasobnuObsluhuUdalosti()
 Alias pre povoľViacnásobnúObsluhuUdalostí.
presmerujObsluhuUdalostí
public static void presmerujObsluhuUdalostí(ObsluhaUdalostí obsluha)
Presmeruje spracovanie udalostí do inej inštancie triedy ObsluhaUdalostí. Použitie tejto metódy má význam
 len po povolení
 vytvárania viacerých inštancií obsluhy udalostí (čo je predvolene
 zakázané). Po použití metódy presmerujObsluhuUdalostí
 sú ďalšie vznikajúce udalosti presmerované do zadanej inštancie
 obsluha. Táto akcia automaticky vyradí z činnosti
 predchádzajúcu inštanciu obsluhy udalostí, z čoho vyplýva, že
 v činnosti môže byť vždy len jedna obsluha udalostí.
 
 Príklad:
 
 V tomto príklade sú definované dve obsluhy udalostí. Obidve
 definujú spracovanie udalosti kliku
 myšou. Príklad je demonštratívny. Po prvom kliku je (popri
 zobrazení robota, vymazaní a zmeny pozadia sveta) presmerovaný tok
 udalostí do druhej verzie obsluhy udalostí, ktorá má na starosti
 jediné: upravovať cieľ cesty hlavného robota…
 
 
import knižnica.*;
public class ViacnásobnáObsluhaUdalostí extends GRobot
{
    private ObsluhaUdalostí obsluha1, obsluha2;
    private ViacnásobnáObsluhaUdalostí()
    {
        // Napísanie bieleho textu
        farba(biela);
        text("…kliknite myšou…");
        // Nastavenie vlastností hlavného robota
        farba(200, 0, 0, 100);
        skry();
        veľkosť(30);
        zdvihniPero();
        hrúbkaČiary(3);
        
zrýchlenie(0.5, false);
        maximálnaRýchlosť(20);
        rýchlosťOtáčania(5, false);
        // Prvá verzia obsluhy udalostí
        obsluha1 = new ObsluhaUdalostí()
        {
            @Override public void klik()
            {
                zobraz();
                Svet.vymaž();
                Svet.farbaPozadia(svetlotyrkysová.svetlejšia());
                Svet.presmerujObsluhuUdalostí(obsluha2);
            }
        };
        // Najneskôr tu musíme povoliť viacnásobnú obsluhu udalostí…
        // …inak nasledujúci príkaz „new ObsluhaUdalostí“ zlyhá.
        Svet.povoľViacnásobnúObsluhuUdalostí();
        // Druhá verzia obsluhy udalostí
        obsluha2 = new ObsluhaUdalostí()
        {
            @Override public void klik()
            {
                cieľNaMyš();
            }
        };
        // Nastavenie vlastností sveta
        Svet.farbaPozadia(čierna);
        Svet.upevni();
        Svet.zbaľ();
    }
    
    public static void main(String[] args)
    {
        new ViacnásobnáObsluhaUdalostí();
    }
}
 
 Výsledok:
 
 
 
 Fáza
 1 – pred prvým kliknutím je robot skrytý(plátno
 na obrázku je zmenšené). 
 
 Fáza
 2 – po prvom kliknutí sa robot zobrazía potom smeruje
 do cieľa určeného ďalšímklikom; každý ďalší klik určí nový
 cieľ(plátno na obrázku je zmenšené).
 
Parametre:
obsluha – inštancia obsluhy
     udalostí, do ktorej budú presmerované ďalšie udalosti
     spracúvané svetom grafického robota
Pozri tiež:
ObsluhaUdalostí, 
povoľViacnásobnúObsluhuUdalostí()
presmerujObsluhuUdalosti
public static void presmerujObsluhuUdalosti(ObsluhaUdalostí obsluha)
 Alias pre presmerujObsluhuUdalostí.
aktívnaObsluhaUdalostí
public static ObsluhaUdalostí aktívnaObsluhaUdalostí()
Táto metóda slúži na získanie aktívnej inštancie obsluhy udalostí.
 Je užitočná v súvislosti s možnosťou povolenia viacnásobnej obsluhy
 udalostí. Ak obsluha udalostí nebola definovaná, prípadne nie je
 z nejakého dôvodu aktívna žiadna z jestvujúcich inštancií obsluhy
 udalostí, tak metóda vráti hodnotu null.
Návratová hodnota:
aktívna inštancia obsluhy udalostí alebo null
Pozri tiež:
ObsluhaUdalostí.aktívna()
aktivnaObsluhuUdalosti
public static ObsluhaUdalosti aktivnaObsluhuUdalosti()
 Alias pre aktívnaObsluhaUdalostí.
vyplň
public static void vyplň(Color farba)
Vyplní podlahu zadanou farbou, ktorá prekryje aj
 farbu pozadia sveta.
 Má rovnaký efekt, ako keby sme volali metódu podlaha.vyplň(farba).
Parametre:
farba – objekt určujúci farbu výplne podlahy
Pozri tiež:
vymaž()
vypln
public static void vypln(Color farba)
 Alias pre vyplň.
vyplň
public static void vyplň(Farebnosť objekt)
Vyplní podlahu farbou zadaného objektu, ktorá prekryje aj
 farbu pozadia sveta.
 Má rovnaký efekt, ako keby sme volali metódu podlaha.vyplň(farba).
Parametre:
objekt – objekt určujúci farbu výplne podlahy
Pozri tiež:
vymaž()
vypln
public static void vypln(Farebnosť objekt)
 Alias pre vyplň.
vyplň
public static Farba vyplň(int r,
                          int g,
                          int b)
Vyplní podlahu farbou zadanou prostredníctvom farebných zložiek. Má
 rovnaký efekt, ako keby sme volali metódu podlaha.vyplň(r, g, b).
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     zložiek
Pozri tiež:
vyplň(Color)
vypln
public static Farba vypln(int r,
                          int g,
                          int b)
 Alias pre vyplň.
vyplň
public static Farba vyplň(int r,
                          int g,
                          int b,
                          int a)
Vyplní podlahu farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti. Má rovnaký efekt, ako keby sme volali
 metódu podlaha.vyplň(r, g, b, a).
Parametre:
r – červená zložka farby; celé číslo v rozsahu 0 – 255
g – zelená zložka farby; celé číslo v rozsahu 0 – 255
b – modrá zložka farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti farby; celé číslo v rozsahu
     0 – 255
     (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba vytvorený podľa zadaných
     hodnôt parametrov
Pozri tiež:
vyplň(Color)
vypln
public static Farba vypln(int r,
                          int g,
                          int b,
                          int a)
 Alias pre vyplň.
vyplň
public static void vyplň(String súbor)
Vyplní podlahu zadanou textúrou. Textúra je súbor s obrázkom, ktorý
 bude použitý na dlaždicové vyplnenie plochy podlahy. Má rovnaký
 efekt, ako keby sme volali metódu podlaha.vyplň(súbor).
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
súbor – názov súboru s obrázkom textúry
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
vyplň(Color), 
priečinokObrázkov(String)
vypln
public static void vypln(String súbor)
 Alias pre vyplň.
vyplň
public static void vyplň(Image výplň)
Vyplní podlahu zadanou textúrou. Textúra je obrázok (objekt typu Image alebo odvodený), ktorý
 bude použitý na dlaždicové vyplnenie plochy podlahy. Má rovnaký
 efekt, ako keby sme volali metódu podlaha.vyplň(obrázok).
 
 Poznámka: Parametre textúry sa dajú
 ovplyvňovať špeciálnymi príkazmi. Súvisí s nimi i predvolené
 správanie príkazov vypĺňania. Predvolený bod začiatku vypĺňania
 dlaždicami sa nachádza v strede plátna alebo vypĺňaného
 obrázka. Pozrite si aj opis metódy
 posunutieVýplne,
 kde nájdete príklad použitia a odkazy na metódy
 upravujúce ďalšie parametre obrázkových výplní.
Parametre:
výplň – obrázok textúry
Pozri tiež:
vyplň(Color)
vypln
public static void vypln(Image výplň)
 Alias pre vyplň.
posunutieVýplne
public static Bod posunutieVýplne()
Vráti bod so súradnicami relatívneho posunutia obrázkových
 dlaždicových výplní.
Návratová hodnota:
objekt typu Bod určujúci súradnice
     relatívneho posunutia obrázkových dlaždicových výplní
Pozri tiež:
posunutieVýplne(double, double), 
mierkaVýplne(), 
otočenieVýplne(), 
stredOtáčaniaVýplne()
posunutieVyplne
public static Bod posunutieVyplne()
 Alias pre posunutieVýplne.
posunutieVýplne
public static void posunutieVýplne(double x,
                                   double y)
Nastaví relatívne posunutie obrázkových dlaždicových výplní.
 Každé ďalšie spustenie niektorého z príkazov vypĺňania bude
 používať novú relatívnu polohu dlaždíc. Predvolené posunutie
 [0, 0] znamená, že dlaždicová textúra sa začína v strede plátna,
 čo je platné aj pre vypĺňanie útvarov a oblastí, alebo v strede
 vypĺňaného obrázka.
 
 Príklad:
 
 Nasledujúci príklad zhŕňa použitie viacerých metód súvisiacich
 s úpravou parametrov dlaždicových výplní. Príklad si sám
 vygeneruje textúru, ktorá je predvolene dlaždicovo sa nadpájajúca
 alebo bezšvová (anglicky tileable alebo
 seamless), ale môže byť úmyselne pregenerovaná aj tak,
 aby sa dlaždicovo nenadpájala (aby bolo lepšie vidno jej
 hranice). Textúrou sú potom vypĺňané rôzne druhy cieľov, vrátane
 celého plátna. Parametre textúry sa dajú možné dynamicky
 upravovať myšou.
 
 
import knižnica.*;
public class TestVypĺňaniaTextúrou extends GRobot
{
    // Mliečna farba výplne stropu v režime zobrazenia pomocníka
    private final static Farba mliečna = new Farba(1.0, 1.0, 1.0, 0.8);
    // Oblasť, ktorá je jedným z cieľov vypĺňania:
    private Oblasť oblasť;
    // Obrázok, ktorý je ďalším z cieľov vypĺňania:
    private Obrázok obrázok;
    // Obrázok s vygenerovanou výplňou (textúrou):
    private Obrázok textúra;
    // Rôzne nastavenia:
    private boolean bezšvová;
    private boolean zamknuté;
    private boolean upravTextúru;
    private int zobrazPomoc;
    private int cieľVýplne;
    private int typ;
    // Zálohy pre jeden z režimov práce:
    private Poloha zálohaPosunutia;
    private double zálohaPootočenia;
    // Konštruktor.
    private TestVypĺňaniaTextúrou()
    {
        // Úprava rozmerov plátna (volaním nadradeného konštruktora):
        super(1200, 600);
        // Vypnutie automatického prekresľovania:
        Svet.nekresli();
        // Vytvorenie relatívne komplikovaného tvaru oblasti – medzikružie
        // prekryté dvomi pootočenými hviezdami – „jež v obruči“:
        veľkosť(200);
        oblasť = new Oblasť();
        oblasť.pridaj(kruh(veľkosť() * 4.0 / 5.0));
        oblasť.odober(kruh(veľkosť() * 3.0 / 4.0));
        vpravo(18);
        oblasť.pridaj(hviezda());
        vľavo(36);
        oblasť.pridaj(hviezda());
        vpravo(18);
        oblasť.pridaj(kruh(veľkosť() * 2.0 / 3.0));
        // Vytvorenie práznych inštancií obrázkov. Prvá inštancia „obrázok“
        // je jedným z cieľov vypĺňania. Druhá inštancia „textúra“ je výplň
        // použitá na rôzne ciele (podľa nastavenia, ktoré sa dá meniť počas
        // činnosti programu):
        obrázok = new Obrázok(200, 200);
        textúra = new Obrázok(160, 120);
        
        // Vykonanie počiatočných nastavení príkladu:
        bezšvová = true;
        zamknuté = false;
        upravTextúru = true;
        zobrazPomoc = 3;
        cieľVýplne = 2;
        typ = 0;
        vygenerujTextúru();
        vyplňTextúrou();
        pomoc();
        Svet.spustiČasovač();
    }
    // Generovanie textúry aktuálneho typu v aktuálnom režime
    private void vygenerujTextúru()
    {
        // Záloha stavu robota pred generovaním textúry (nesúvisí so zálohou
        // pre jeden z režimov – toto je nezávislá záloha tých vlastností
        // robota, ktoré táto metóda ovplyvňuje):
        Farba zálohaFarby = farba();
        Poloha zálohaPolohy = poloha();
        double zálohaSmeru  = smer();
        double zálohaHrúbky = hrúbkaČiary();
        // Presmerovanie kreslenia robota. Toto je jediná vlastnosť, ktorú
        // metóda nezálohuje poctivo – spoliehame sa na to, že robot bude
        // pred aj po vykonaní tejto metódy kresliť na podlahu (čo je
        // predvolené nastavenie robota):
        kresliDoObrázka(textúra);
        textúra.vymaž();
        // Generovanie textúry aktuálneho typu:
        for (int i = 0; i &lt; 280; ++i)
        {
            // Farba, poloha, smer aj hrúbka čiary sú náhodne zmenené:
            náhodnáFarba();
            náhodnáPoloha();
            náhodnýSmer();
            hrúbkaČiary(Svet.náhodnéReálneČíslo(3, 5));
            if (bezšvová)
            {
                // Ak má byť textúra bezšvová, tak musí byť každá čiara
                // a tvar nakreslený deväť ráz – na aktuálnej pozícii a na
                // ôsmich ďalších pozíciách:
                //  – dvoch posunutých o šírku obrázka vpravo a vľavo,
                //  – dvoch posunutých o výšku obrázka hore a dole
                //  – a štyroch zvyšných diagonálnych smerov podľa rozmerov
                //    textúry.
                // 
                // To je najjednoduchší spôsob ako získať istotu, že ak čiara
                // alebo tvar presahujú v niektorom smere von, tak budú určite
                // nakreslené yak, aby zasahovali do obrázka aj z protiľahlej
                // strany. (Základným predpokladom je, že čiara alebo tvar nie
                // sú niekoľkonásobne väčšie než sú rozmery obrázka. Ak by to
                // tak, nebolo, tak by generovanie bezšvovej textúry bolo
                // komplikovanejšie.)
                // 
                // (Efektívnejším spôsobom, no komplikovanejším na
                // naprogramovanie, by bolo overovať, ktorý okraj alebo okraje
                // obrázka čiara alebo tvar prekročili a podľa toho ich
                // nakresliť pokračujúc z opačnej strany alebo strán.
                // 
                // Ďalšia úroveň spoľahlivosti algoritmu by dokázala overiť aj
                // to, o koľko čiara prípadne tvar prekračujú okraj(e)
                // a zabezpečiť nakreslenie viacnásobného prekročenia hraníc
                // obrázka.
                // 
                // Pri kreslení čiary vo vodorovnom alebo zvislom smere by išlo
                // len o viacnásobné prekreslenie čiary na určitom riadku alebo
                // stĺpci. Výsledný efekt by bol málo viditeľný. No ak by bola
                // čiara nakreslená pod určitým uhlom, tak by dostatočne dlhá
                // vhodne umiestnená čiara dokázala vyšrafovať celú plochu
                // obrázka. No s tým algoritmom, ktorý je použitý tu, by to
                // nefungovalo…
                // 
                // Posledný tip: Ďalším spôsobom, ktorý by ani nemusel byť
                // taký náročný na naprogramovanie, by mohlo byť využitie
                // pretáčania obrázka s textúrou. Ak by tvar alebo čiara,
                // ktoré by mali tvoriť textúru boli vždy menšie než rozmery
                // textúry, tak by stačilo, aby sme vždy nakreslili tvar
                // alebo čiaru presne do stredu textúry a potom ju
                // pretočili o náhodný počet bodov v oboch smeroch – pozri
                // metódu pretoč(Δx, Δy).)
                // Zálohujeme polohu – budeme ju recyklovať ako východiskovú
                // polohu:
                Poloha poloha = poloha();
                // Podľa hodnoty atribútu typ vygenerujeme textúru:
                switch (typ % 3)
                {
                case 1: // krúžky – kružnice kreslené hrubšou čiarou
                    {
                        // (Vtáčie zátvorky sú tu preto, aby sme mohli
                        // v rámci jednej vetvy, presnejšie v rámci
                        // zátvoriek, definovať lokálne premenné.)
                        // Vygenerujeme veľkosť:
                        double veľkosť = Svet.náhodnéReálneČíslo(3, 12);
                        // Nakreslíme strednú kružnicu:
                        kružnica(veľkosť);
                        // Presunieme sa do východiskovej polohy, posunieme
                        // sa doľava o šírku textúry a nakreslíme ďalšiu
                        // kružnicu:
                        skočNa(poloha);
                        skoč(-textúra.šírka, 0);
                        kružnica(veľkosť);
                        // (Podobne doprava.)
                        skočNa(poloha);
                        skoč(textúra.šírka, 0);
                        kružnica(veľkosť);
                        // (Hore.)
                        skočNa(poloha);
                        skoč(0, -textúra.výška);
                        kružnica(veľkosť);
                        // (Dole.)
                        skočNa(poloha);
                        skoč(0, textúra.výška);
                        kružnica(veľkosť);
                        // (Vľavo dole.)
                        skočNa(poloha);
                        skoč(-textúra.šírka, -textúra.výška);
                        kružnica(veľkosť);
                        // (Vľavo hore.)
                        skočNa(poloha);
                        skoč(-textúra.šírka, textúra.výška);
                        kružnica(veľkosť);
                        // (Vpravo dole.)
                        skočNa(poloha);
                        skoč(textúra.šírka, -textúra.výška);
                        kružnica(veľkosť);
                        // (Vpravo hore.)
                        skočNa(poloha);
                        skoč(textúra.šírka, textúra.výška);
                        kružnica(veľkosť);
                    }
                    break;
                case 2: // čiarky
                    {
                        // (Princíp je rovnaký ako pri krúžkoch vyššie, ale
                        // vygenerovaná hodnota je použitá ako dĺžka čiary.)
                        double dĺžka = Svet.náhodnéReálneČíslo(60, 100);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(-textúra.šírka, 0);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(textúra.šírka, 0);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(0, -textúra.výška);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(0, textúra.výška);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(-textúra.šírka, -textúra.výška);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(-textúra.šírka, textúra.výška);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(textúra.šírka, -textúra.výška);
                        dopredu(dĺžka);
                        skočNa(poloha);
                        skoč(textúra.šírka, textúra.výška);
                        dopredu(dĺžka);
                    }
                    break;
                default: // plné kruhy
                    {
                        // (Princíp je rovnaký ako pri krúžkoch vyššie,
                        // len sú kreslené plné kruhy.)
                        double veľkosť = Svet.náhodnéReálneČíslo(3, 12);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(-textúra.šírka, 0);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(textúra.šírka, 0);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(0, -textúra.výška);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(0, textúra.výška);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(-textúra.šírka, -textúra.výška);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(-textúra.šírka, textúra.výška);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(textúra.šírka, -textúra.výška);
                        kruh(veľkosť);
                        skočNa(poloha);
                        skoč(textúra.šírka, textúra.výška);
                        kruh(veľkosť);
                    }
                }
            }
            else
            {
                // V režime švovej textúry kreslíme každý tvar len raz:
                switch (typ % 3)
                {
                case 1:
                    kružnica(Svet.náhodnéReálneČíslo(3, 12));
                    break;
                case 2:
                    dopredu(Svet.náhodnéReálneČíslo(60, 100));
                    break;
                default:
                    kruh(Svet.náhodnéReálneČíslo(3, 12));
                }
            }
        }
        // Presmerujeme kreslenie späť na podlahu:
        kresliNaPodlahu();
        // Vrátenie zálohy vykonanej na začiatku tejto metódy:
        farba(zálohaFarby);
        skočNa(zálohaPolohy);
        smer(zálohaSmeru);
        hrúbkaČiary(zálohaHrúbky);
    }
    // Vyplnenie aktuálneho cieľa vypĺňania textúrou
    private void vyplňTextúrou()
    {
        // Vymazanie grafiky podlahy:
        podlaha.vymažGrafiku();
        if (zamknuté)
        {
            // Ak je posúvanie a otáčanie textúry zamknuté, tak vykonáme
            // posunutie a otočenie výplne podľa aktuálnych parametrov robota
            // (zaujímavo sa to prejaví na vypĺňanom obrázku, ktorý pracuje
            // akoby so samostatnou súradnicovou sústavou):
            Svet.posunutieVýplne(this);
            Svet.pootočenieVýplne(this);
        }
        // Podľa cieľa výplne prekreslíme požadovanú súčasť (vždy použijeme
        // príkaz vyplň tej ktorej súčasti, aby bolo vidno výsledok
        // s aktuálnymi parametrami textúry):
        switch (cieľVýplne)
        {
        case 0:
            obrázok.vymaž();
            obrázok.vyplň(textúra);
            obrázok(obrázok, 1.0);
            break;
        case 1:
            // Kreslenie tvarov nie je vypnuté, preto sa hviezda zároveň
            // nakreslí na plochu plátna aktuálnou hrúbkou a farbou čiary.
            vyplňTvar(hviezda(), textúra);
            break;
        case 2:
            vyplňOblasť(oblasť, textúra);
            break;
        case 3:
            podlaha.vyplň(textúra);
            break;
        }
    }
    // Výpis obsahu elektronického pomocníka
    private void pomoc()
    {
        strop.vymažTexty();
        strop.vymažGrafiku();
        if (zobrazPomoc &gt; 0)
        {
            strop.vyplň(mliečna);
            int zobrazenie = (zobrazPomoc &#45; 1) % 3;
            if (zobrazenie &gt;= 2)
            {
                Svet.vypíšRiadok("Medzerníkom prepnete medzi režimom úprav (transformácie) textúry a tvaru.");
                Svet.vypíšRiadok("Enterom sa prepnete medzi režimom zamknutého alebo voľného posunu a otáčania textúry s tvarom.");
                Svet.vypíšRiadok("Klávesom F1 zobrazíte tohto pomocníka (viacnásobné stlačenie prepína mieru zobrazených informácií).");
                Svet.vypíšRiadok("Klávesom Escape skryjete pomocníka.");
                Svet.vypíšRiadok("Klávesy 1 až 4 prepínajú ciele vypĺňania: obrázok, tvar hviezdy, oblasť ježa v obruči a celú plochu podlahy. (Všímajte si odlišnosti.)");
                Svet.vypíšRiadok("Kláves F prepne na ďalší typ textúry a vygeneruje novú náhodnú textúru (v aktuálnom režime).");
                Svet.vypíšRiadok("Kláves G vygeneruje novú náhodnú textúru aktuálneho typu v aktuálnom režime.");
                Svet.vypíšRiadok("Kláves H prepne medzi režimom bezšvovej a švovej textúry a vygeneruje novú náhodnú textúru (aktuálneho typu).", riadok);
            }
            if (zobrazenie &gt;= 1)
            {
                Svet.vypíšRiadok("Kliknutím alebo ťahaním niektorým tlačidlom myši vykonáte jednu z nasledujúcich akcií s tvarom (v režime úprav tvaru):");
                Svet.vypíšRiadok(" — ľavé tlačidlo: posunutie tvaru,");
                Svet.vypíšRiadok(" — pravé tlačidlo: pootočenie tvaru.", riadok);
                Svet.vypíšRiadok("Kliknutím alebo ťahaním niektorým tlačidlom myši vykonáte jednu z nasledujúcich akcií s textúrou (v režime úprav textúry):");
                Svet.vypíšRiadok(" — ak je posúvanie a otáčenie textúry voľné:");
                Svet.vypíšRiadok("   — ľavé tlačidlo: posunutie textúry,");
                Svet.vypíšRiadok("   — pravé tlačidlo: pootočenie textúry,", riadok);
                Svet.vypíšRiadok(" — ak je posúvanie a otáčenie textúry zamknuté:");
                Svet.vypíšRiadok("   — ľavé tlačidlo: posunutie stredu otáčania textúry,");
                Svet.vypíšRiadok("   — pravé tlačidlo: zmena mierky textúry.", riadok);
            }
            if (zobrazenie &gt;= 0)
            {
                Svet.vypíšRiadok("Aktuálny stav:", riadok);
                Svet.vypíš(" — Cieľ výplne: ");
                switch (cieľVýplne)
                {
                case 0: Svet.vypíš("obrázok"); break;
                case 1: Svet.vypíš("tvar hviezdy"); break;
                case 2: Svet.vypíš("oblasť ježa v obruči"); break;
                case 3: Svet.vypíš("podlaha"); break;
                }
                Svet.vypíšRiadok(".");
                Svet.vypíš(" — Režim úprav: ");
                if (upravTextúru)
                    Svet.vypíš("textúra");
                else
                    Svet.vypíš("tvaru");
                Svet.vypíšRiadok(".");
                Svet.vypíš(" — Stav zámku textúry: ");
                if (zamknuté)
                    Svet.vypíš("zamknuté");
                else
                    Svet.vypíš("voľné");
                Svet.vypíšRiadok(".");
            }
            Svet.vypíšRiadok(riadok, "(Tip: Ak je miera zobrazených textov pomocníka vyššia, tak kolieskom myši môžete rolovať text…)");
            Svet.vypíšRiadok(riadok, "Stlačte Escape…");
        }
    }
    
    // Obsluhy udalostí (časovača, myši a klávesnice):
    
    @Override public void tik()
    {
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        ťahanieMyšou();
    }
    @Override public void ťahanieMyšou()
    {
        if (upravTextúru)
        {
            if (zamknuté)
            {
                if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                    Svet.stredOtáčaniaVýplne(
                        ÚdajeUdalostí.súradnicaMyšiX() &#45; súradnicaX(),
                        ÚdajeUdalostí.súradnicaMyšiY() &#45; súradnicaY());
                else
                    Svet.mierkaVýplne(ÚdajeUdalostí.súradnicaMyšiX() / 100.0,
                        ÚdajeUdalostí.súradnicaMyšiY() / 100.0);
            }
            else
            {
                if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                    Svet.posunutieVýplneNaMyš();
                else
                    Svet.pootočenieVýplneNaMyš();
            }
        }
        else
        {
            if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
                skočNaMyš();
            else
                otočNaMyš();
        }
        vyplňTextúrou();
    }
    @SuppressWarnings("fallthrough") // toto je vysvetlené na konci metódy
    @Override public void uvoľnenieKlávesu()
    {
        switch (ÚdajeUdalostí.kláves())
        {
            case Kláves.MEDZERA:
                upravTextúru = !upravTextúru;
                pomoc();
                break;
            case Kláves.ENTER:
                if (zamknuté)
                {
                    Svet.posunutieVýplne(zálohaPosunutia);
                    Svet.pootočenieVýplne(zálohaPootočenia);
                }
                else
                {
                    zálohaPosunutia = Svet.posunutieVýplne();
                    zálohaPootočenia = Svet.pootočenieVýplne();
                }
                zamknuté = !zamknuté;
                vyplňTextúrou();
                pomoc();
                break;
            case Kláves.ESCAPE:
                if (zobrazPomoc &gt; 0)
                    zobrazPomoc = -zobrazPomoc;
                else if (0 == zobrazPomoc)
                    zobrazPomoc = -3;
                pomoc();
                break;
            case Kláves.VK_F1:
                if (zobrazPomoc &lt; 0)
                    zobrazPomoc = -zobrazPomoc;
                else if (0 == zobrazPomoc)
                    zobrazPomoc = 3;
                else
                    ++zobrazPomoc;
                pomoc();
                break;
            case Kláves.VK_1:
                cieľVýplne = 0;
                vyplňTextúrou();
                pomoc();
                break;
            case Kláves.VK_2:
                cieľVýplne = 1;
                vyplňTextúrou();
                pomoc();
                break;
            case Kláves.VK_3:
                cieľVýplne = 2;
                vyplňTextúrou();
                pomoc();
                break;
            case Kláves.VK_4:
                cieľVýplne = 3;
                vyplňTextúrou();
                pomoc();
                break;
            case Kláves.VK_F:
                ++typ;
                bezšvová = !bezšvová;
                // Na tomto mieste býva obvykle príkaz break. Jeho
                // neprítomnosť tu nie je chybou. Ide o úmyselné
                // prepadnutie sa do ďalšej vetvy, ktorá sa prepadáva
                // ešte hlbšie, takže posledné tri príkazy
                // (vygenerujTextúru – pomoc) sú vykonané vo všetkých
                // troch vetvách.
                // 
                // Posledný príkaz v tejto vetve (bezšvová = !bezšvová)
                // iba kompenzuje účinok nasledujúcej vetvy tak, aby
                // bola hodnota príznaku „bešvová“ po vykonaní tejto
                // vetvy nezmenená (pretože stlačenie klávesu F má mať
                // za následok iba zmenu typu generovanej textúry, nie
                // švového režimu).
                // 
                // Java by programátora varovala, že v tejto metóde sa
                // nachádza prepadnutie sa medzi vetvami riadiacej
                // štruktúry switch, preto je pred deklaračnou časťou
                // tejto metódy anotácia @SuppressWarnings("fallthrough"),
                // ktorá varovanie potlačí. Túto anotáciu smie
                // programátor použiť len v prípade, že o prepadnutí sa,
                // vie a úmyselne ho chce vo svojej metóde ponechať.
            case Kláves.VK_H:
                bezšvová = !bezšvová;
            case Kláves.VK_G:
                vygenerujTextúru();
                vyplňTextúrou();
                pomoc();
                break;
        }
    }
    
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("TestVypĺňaniaTextúrou.cfg");
        new TestVypĺňaniaTextúrou();
    }
}
 
 Výsledok:
 
 
 Ukážka výsledku – úvodné
 zobrazenie.
Parametre:
x – x-ová súradnica určujúca novú hodnotu relatívneho
     posunutia obrázkových dlaždicových výplní
y – y-ová súradnica určujúca novú hodnotu relatívneho
     posunutia obrázkových dlaždicových výplní
Pozri tiež:
posunutieVýplne(), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
otočenieVýplne(double), 
otočenieVýplne(double, double, double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
posunutieVyplne
public static void posunutieVyplne(double x,
                                   double y)
 Alias pre posunutieVýplne.
posunutieVýplne
public static void posunutieVýplne(Poloha poloha)
Táto metóda funguje podobne ako metóda
 posunutieVýplne(x, y).
 Rozdielom je, že namiesto dvoch samostatných súradníc prijíma
 objekt, ktorého polohu použije namiesto zadania súradníc. Inak
 funguje táto metóda úplne rovnako ako spomenutá metóda. Všetky
 informácie uvedené v jej opise sú tiež relevantné, preto
 odporúčame prečítať si aj jej opis.
Parametre:
poloha – objekt určujúci nové relatívne posunutie výplní
Pozri tiež:
posunutieVýplne(double, double)
posunutieVyplne
public static void posunutieVyplne(Poloha poloha)
 Alias pre posunutieVýplne.
posunutieVýplne
public static void posunutieVýplne(Shape tvar)
Táto metóda funguje podobne ako metóda
 posunutieVýplne(x, y).
 Rozdielom je, že namiesto dvoch samostatných súradníc prijíma
 objekt, ktorého polohu použije namiesto zadania súradníc. Inak
 funguje táto metóda úplne rovnako ako spomenutá metóda. Všetky
 informácie uvedené v jej opise sú tiež relevantné, preto
 odporúčame prečítať si aj jej opis.
Parametre:
tvar – objekt určujúci nové relatívne posunutie výplní
Pozri tiež:
posunutieVýplne(double, double)
posunutieVyplne
public static void posunutieVyplne(Shape tvar)
 Alias pre posunutieVýplne.
mierkaVýplne
public static Bod mierkaVýplne()
Vráti bod s hodnotami mierky obrázkových dlaždicových výplní
 v osiach x a y.
Návratová hodnota:
objekt typu Bod určujúci hodnoty mierky
     obrázkových dlaždicových výplní v osiach x a y
Pozri tiež:
mierkaVýplne(double, double), 
posunutieVýplne(), 
otočenieVýplne(), 
stredOtáčaniaVýplne()
mierkaVyplne
public static Bod mierkaVyplne()
 Alias pre mierkaVýplne.
mierkaVýplne
public static void mierkaVýplne(double mierka)
Nastaví mierku obrázkových dlaždicových výplní (v oboch osiach
 naraz). Každé ďalšie spustenie niektorého z príkazov vypĺňania
 bude používať novú mierku. Hodnota mierky 1.0 je neutrálna –
 znamená, že rozmer textúry nebude zmenený. Hodnoty menšie než
 1.0 (ale väčšie než 0.0 – to jest neceločíselné hodnoty)
 znamenajú zmenšenie a hodnoty väčšie než 1.0 znamenajú
 zväčšenie.
Parametre:
mierka – hodnota určujúca novú mierku textúry
Pozri tiež:
mierkaVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double, double), 
otočenieVýplne(double), 
otočenieVýplne(double, double, double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
mierkaVyplne
public static void mierkaVyplne(double mierka)
 Alias pre mierkaVýplne.
mierkaVýplne
public static void mierkaVýplne(double mx,
                                double my)
Nastaví mierku obrázkových dlaždicových výplní jednotlivo pre
 osi x a y. Každé ďalšie spustenie niektorého z príkazov
 vypĺňania bude používať nové mierky. Hodnota mierky 1.0 pre
 niektorú z osí je neutrálna – znamená, že rozmer textúry nebude
 v smere tejto osi zmenený. Hodnoty menšie než 1.0 (ale väčšie
 než 0.0 – to jest neceločíselné hodnoty) znamenajú zmenšenie
 v určenom smere a hodnoty väčšie než 1.0 znamenajú zväčšenie.
Parametre:
mx – hodnota určujúca novú mierku v smere osi x
my – hodnota určujúca novú mierku v smere osi y
Pozri tiež:
mierkaVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
otočenieVýplne(double), 
otočenieVýplne(double, double, double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
mierkaVyplne
public static void mierkaVyplne(double mx,
                                double my)
 Alias pre mierkaVýplne.
otočenieVýplne
public static double otočenieVýplne()
Vráti hodnotu pootočenia obrázkových dlaždicových výplní.
Návratová hodnota:
objekt typu Bod určujúci mieru pootočenia
     obrázkových dlaždicových výplní
Pozri tiež:
otočenieVýplne(double), 
otočenieVýplne(double, double, double), 
posunutieVýplne(), 
mierkaVýplne(), 
stredOtáčaniaVýplne()
otocenieVyplne
public static double otocenieVyplne()
 Alias pre otočenieVýplne.
pootočenieVýplne
public static double pootočenieVýplne()
Vráti hodnotu pootočenia obrázkových dlaždicových výplní.
Návratová hodnota:
objekt typu Bod určujúci mieru pootočenia
     obrázkových dlaždicových výplní
Pozri tiež:
pootočenieVýplne(double), 
pootočenieVýplne(double, double, double), 
posunutieVýplne(double, double), 
posunutieVýplne(), 
mierkaVýplne(), 
stredOtáčaniaVýplne()
pootocenieVyplne
public static double pootocenieVyplne()
 Alias pre pootočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(double uhol)
Nastaví nový uhol pootočenia obrázkových dlaždicových výplní.
 Každé ďalšie spustenie niektorého z príkazov vypĺňania bude
 pracovať s pootočenou textúrou. Predvolené je nulové, to jest
 žiadne, pootočenie so stredom otáčania v bode relatívneho
 posunutia textúry – pozri príkaz posunutieVýplne(x, y).
Parametre:
uhol – nový uhol pootočenia obrázkových dlaždicových výplní
Pozri tiež:
otočenieVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
otočenieVýplne(double, double, double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
otocenieVyplne
public static void otocenieVyplne(double uhol)
 Alias pre otočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(double uhol)
Nastaví nový uhol pootočenia obrázkových dlaždicových výplní.
 Každé ďalšie spustenie niektorého z príkazov vypĺňania bude
 pracovať s pootočenou textúrou. Predvolené je nulové, to jest
 žiadne, pootočenie so stredom otáčania v bode relatívneho
 posunutia textúry – pozri príkaz posunutieVýplne(x, y).
Parametre:
uhol – nový uhol pootočenia obrázkových dlaždicových výplní
Pozri tiež:
pootočenieVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
pootočenieVýplne(double, double, double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
pootocenieVyplne
public static void pootocenieVyplne(double uhol)
 Alias pre pootočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(double uhol,
                                  double sx,
                                  double sy)
Nastaví nový uhol pootočenia a zároveň nový relatívny stred
 otáčania obrázkových dlaždicových výplní.
 Každé ďalšie spustenie niektorého z príkazov vypĺňania bude
 pracovať s novými parametrami.
 Predvolené je nulové, to jest žiadne, pootočenie so stredom
 otáčania [0, 0], ktorý označuje bod relatívneho posunutia textúry –
 pozri príkaz posunutieVýplne(x, y).
Parametre:
uhol – nový uhol pootočenia obrázkových dlaždicových výplní
sx – x-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
sy – y-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
Pozri tiež:
otočenieVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
otočenieVýplne(double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
otocenieVyplne
public static void otocenieVyplne(double uhol,
                                  double sx,
                                  double sy)
 Alias pre otočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(double uhol,
                                    double sx,
                                    double sy)
Nastaví nový uhol pootočenia a zároveň nový relatívny stred
 otáčania obrázkových dlaždicových výplní.
 Každé ďalšie spustenie niektorého z príkazov vypĺňania bude
 pracovať s novými parametrami.
 Predvolené je nulové, to jest žiadne, pootočenie so stredom
 otáčania [0, 0], ktorý označuje bod relatívneho posunutia textúry –
 pozri príkaz posunutieVýplne(x, y).
Parametre:
uhol – nový uhol pootočenia obrázkových dlaždicových výplní
sx – x-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
sy – y-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
Pozri tiež:
pootočenieVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
pootočenieVýplne(double), 
stredOtáčaniaVýplne(double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
pootocenieVyplne
public static void pootocenieVyplne(double uhol,
                                    double sx,
                                    double sy)
 Alias pre pootočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(Smer smer)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol). Rozdielom
 je, že namiesto číselnej hodnoty smeru prijíma objekt, ktorý
 musí byť implementáciou rozhrania Smer. Inak
 funguje táto metóda úplne rovnako ako spomenutá metóda.
 Všetky informácie uvedené v jej opise sú tiež relevantné,
 preto odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
Pozri tiež:
otočenieVýplne(double)
otocenieVyplne
public static void otocenieVyplne(Smer smer)
 Alias pre otočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(Smer smer)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol).
 Rozdielom je, že namiesto číselnej hodnoty smeru prijíma objekt,
 ktorý musí byť implementáciou rozhrania Smer. Inak
 funguje táto metóda úplne rovnako ako spomenutá metóda.
 Všetky informácie uvedené v jej opise sú tiež relevantné,
 preto odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
Pozri tiež:
pootočenieVýplne(double)
pootocenieVyplne
public static void pootocenieVyplne(Smer smer)
 Alias pre pootočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(Smer smer,
                                  double sx,
                                  double sy)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto číselnej
 hodnoty smeru prijíma objekt, ktorý musí byť implementáciou
 rozhrania Smer. Inak funguje táto metóda úplne
 rovnako ako spomenutá metóda. Všetky informácie uvedené v jej
 opise sú tiež relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
sx – nová x-ová súradnica relatívneho posunutia stredu
     otáčania výplní
sy – nová y-ová súradnica relatívneho posunutia stredu
     otáčania výplní
Pozri tiež:
otočenieVýplne(double, double, double)
otocenieVyplne
public static void otocenieVyplne(Smer smer,
                                  double sx,
                                  double sy)
 Alias pre otočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(double uhol,
                                  Poloha poloha)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania prijíma
 objekt, ktorého polohu použije v relatívnom kontexte namiesto
 priameho zadania hodnôt súradníc (čiže absolútne súradnice polohy
 objektu použije priamo ako relatívne hodnoty – nie je vykonaný
 žiadny prepočet). Inak funguje táto metóda úplne rovnako ako
 spomenutá metóda. Všetky informácie uvedené v jej opise sú tiež
 relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
uhol – nový uhol pootočenia výplní
poloha – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
otočenieVýplne(double, double, double)
otocenieVyplne
public static void otocenieVyplne(double uhol,
                                  Poloha poloha)
 Alias pre otočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(Smer smer,
                                  Poloha poloha)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto číselnej
 hodnoty smeru prijíma objekt, ktorý musí byť implementáciou
 rozhrania Smer a namiesto dvoch samostatných súradníc
 určujúcich vysunutie stredu otáčania prijíma objekt, ktorého
 polohu použije v relatívnom kontexte namiesto priameho zadania
 hodnôt súradníc (čiže absolútne súradnice polohy objektu použije
 priamo ako relatívne hodnoty – nie je vykonaný žiadny prepočet).
 Inak funguje táto metóda úplne rovnako ako spomenutá metóda.
 Všetky informácie uvedené v jej opise sú tiež relevantné, preto
 odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
poloha – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
otočenieVýplne(double, double, double)
otocenieVyplne
public static void otocenieVyplne(Smer smer,
                                  Poloha poloha)
 Alias pre otočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(double uhol,
                                  Shape tvar)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania prijíma
 objekt, ktorého polohu použije v relatívnom kontexte namiesto
 priameho zadania hodnôt súradníc (čiže absolútne súradnice polohy
 objektu použije priamo ako relatívne hodnoty – nie je vykonaný
 žiadny prepočet). Inak funguje táto metóda úplne rovnako ako
 spomenutá metóda. Všetky informácie uvedené v jej opise sú tiež
 relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
uhol – nový uhol pootočenia výplní
tvar – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
otočenieVýplne(double, double, double)
otocenieVyplne
public static void otocenieVyplne(double uhol,
                                  Shape tvar)
 Alias pre otočenieVýplne.
otočenieVýplne
public static void otočenieVýplne(Smer smer,
                                  Shape tvar)
Táto metóda funguje podobne ako metóda
 otočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto číselnej
 hodnoty smeru prijíma objekt, ktorý musí byť implementáciou
 rozhrania Smer a namiesto dvoch samostatných súradníc
 určujúcich vysunutie stredu otáčania prijíma objekt, ktorého
 polohu použije v relatívnom kontexte namiesto priameho zadania
 hodnôt súradníc (čiže absolútne súradnice polohy objektu použije
 priamo ako relatívne hodnoty – nie je vykonaný žiadny prepočet).
 Inak funguje táto metóda úplne rovnako ako spomenutá metóda.
 Všetky informácie uvedené v jej opise sú tiež relevantné, preto
 odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
tvar – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
otočenieVýplne(double, double, double)
otocenieVyplne
public static void otocenieVyplne(Smer smer,
                                  Shape tvar)
 Alias pre otočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(Smer smer,
                                    double sx,
                                    double sy)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto
 číselnej hodnoty smeru prijíma objekt, ktorý musí byť
 implementáciou rozhrania Smer. Inak funguje táto
 metóda úplne rovnako ako spomenutá metóda. Všetky informácie
 uvedené v jej opise sú tiež relevantné, preto odporúčame prečítať
 si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
sx – nová x-ová súradnica relatívneho posunutia stredu
     otáčania výplní
sy – nová y-ová súradnica relatívneho posunutia stredu
     otáčania výplní
Pozri tiež:
pootočenieVýplne(double, double, double)
pootocenieVyplne
public static void pootocenieVyplne(Smer smer,
                                    double sx,
                                    double sy)
 Alias pre pootočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(double uhol,
                                    Poloha poloha)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania prijíma
 objekt, ktorého polohu použije v relatívnom kontexte namiesto
 priameho zadania hodnôt súradníc (čiže absolútne súradnice polohy
 objektu použije priamo ako relatívne hodnoty – nie je vykonaný
 žiadny prepočet). Inak funguje táto metóda úplne rovnako ako
 spomenutá metóda. Všetky informácie uvedené v jej opise sú tiež
 relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
uhol – nový uhol pootočenia výplní
poloha – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
pootočenieVýplne(double, double, double)
pootocenieVyplne
public static void pootocenieVyplne(double uhol,
                                    Poloha poloha)
 Alias pre pootočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(Smer smer,
                                    Poloha poloha)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto
 číselnej hodnoty smeru prijíma objekt, ktorý musí byť
 implementáciou rozhrania Smer a namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania prijíma
 objekt, ktorého polohu použije v relatívnom kontexte namiesto
 priameho zadania hodnôt súradníc (čiže absolútne súradnice polohy
 objektu použije priamo ako relatívne hodnoty – nie je vykonaný
 žiadny prepočet). Inak funguje táto metóda úplne rovnako ako
 spomenutá metóda. Všetky informácie uvedené v jej opise sú tiež
 relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
poloha – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
pootočenieVýplne(double, double, double)
pootocenieVyplne
public static void pootocenieVyplne(Smer smer,
                                    Poloha poloha)
 Alias pre pootočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(double uhol,
                                    Shape tvar)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania prijíma
 objekt, ktorého polohu použije v relatívnom kontexte namiesto
 priameho zadania hodnôt súradníc (čiže absolútne súradnice polohy
 objektu použije priamo ako relatívne hodnoty – nie je vykonaný
 žiadny prepočet). Inak funguje táto metóda úplne rovnako ako
 spomenutá metóda. Všetky informácie uvedené v jej opise sú tiež
 relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
uhol – nový uhol pootočenia výplní
tvar – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
pootočenieVýplne(double, double, double)
pootocenieVyplne
public static void pootocenieVyplne(double uhol,
                                    Shape tvar)
 Alias pre pootočenieVýplne.
pootočenieVýplne
public static void pootočenieVýplne(Smer smer,
                                    Shape tvar)
Táto metóda funguje podobne ako metóda
 pootočenieVýplne(uhol, sx, sy). Rozdielom je, že namiesto
 číselnej hodnoty smeru prijíma objekt, ktorý musí byť
 implementáciou rozhrania Smer a namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania
 prijíma objekt, ktorého polohu použije v relatívnom kontexte
 namiesto priameho zadania hodnôt súradníc (čiže absolútne
 súradnice polohy objektu použije priamo ako relatívne hodnoty –
 nie je vykonaný žiadny prepočet). Inak funguje táto metóda úplne
 rovnako ako spomenutá metóda. Všetky informácie uvedené v jej
 opise sú tiež relevantné, preto odporúčame prečítať si aj jej
 opis.
Parametre:
smer – objekt určujúci nový uhol pootočenia výplní
tvar – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
pootočenieVýplne(double, double, double)
pootocenieVyplne
public static void pootocenieVyplne(Smer smer,
                                    Shape tvar)
 Alias pre pootočenieVýplne.
stredOtáčaniaVýplne
public static Bod stredOtáčaniaVýplne()
Vráti bod so súradnicami relatívneho posunutia stredu otáčania
 obrázkových dlaždicových výplní vztiahnutý k súradniciam posunutia
 výplne.
Návratová hodnota:
objekt typu Bod určujúci súradnice
     relatívneho posunutia stredu otáčania obrázkových
     dlaždicových výplní vztiahnutý k súradniciam posunutia výplne
Pozri tiež:
stredOtáčaniaVýplne(double, double), 
posunutieVýplne(), 
mierkaVýplne(), 
otočenieVýplne()
stredOtacaniaVyplne
public static Bod stredOtacaniaVyplne()
 Alias pre stredOtáčaniaVýplne.
stredOtáčaniaVýplne
public static void stredOtáčaniaVýplne(double sx,
                                       double sy)
Nastaví nový relatívny stred otáčania obrázkových dlaždicových
 výplní. Každé ďalšie spustenie niektorého z príkazov vypĺňania
 bude pracovať s novými parametrami. Tento parameter má na textúru
 vplyv len pri nenulovom uhle pootočenia výplní.
 Predvolený stred otáčania [0, 0] označuje bod relatívneho
 posunutia textúry – pozri príkaz posunutieVýplne(x, y).
Parametre:
uhol – nový uhol pootočenia obrázkových dlaždicových výplní
sx – x-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
sy – y-ová súradnica nového relatívneho stredu otáčania
     obrázkových dlaždicových výplní
Pozri tiež:
stredOtáčaniaVýplne(), 
posunutieVýplne(double, double), 
mierkaVýplne(double), 
mierkaVýplne(double, double), 
otočenieVýplne(double), 
otočenieVýplne(double, double, double), 
GRobot.vyplňTvar(Shape, String), 
GRobot.vyplňTvar(Shape, Image), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vyplňOblasť(Area, Image), 
Plátno.vyplň(String), 
Plátno.vyplň(Image), 
Obrázok.vyplň(Shape, String), 
Obrázok.vyplň(Shape, Image), 
Obrázok.vyplň(String), 
Obrázok.vyplň(Image), 
Oblasť.vyplň(String), 
Oblasť.vyplň(Image)
stredOtacaniaVyplne
public static void stredOtacaniaVyplne(double sx,
                                       double sy)
 Alias pre stredOtáčaniaVýplne.
stredOtáčaniaVýplne
public static void stredOtáčaniaVýplne(Poloha poloha)
Táto metóda funguje podobne ako metóda
 stredOtáčaniaVýplne(sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania
 prijíma objekt, ktorého polohu použije v relatívnom kontexte
 namiesto priameho zadania hodnôt súradníc (čiže absolútne
 súradnice polohy objektu použije priamo ako relatívne hodnoty –
 nie je vykonaný žiadny prepočet). Inak funguje táto metóda úplne
 rovnako ako spomenutá metóda. Všetky informácie uvedené v jej
 opise sú tiež relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
poloha – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
stredOtáčaniaVýplne(double, double)
stredOtacaniaVyplne
public static void stredOtacaniaVyplne(Poloha poloha)
 Alias pre stredOtáčaniaVýplne.
stredOtáčaniaVýplne
public static void stredOtáčaniaVýplne(Shape tvar)
Táto metóda funguje podobne ako metóda
 stredOtáčaniaVýplne(sx, sy). Rozdielom je, že namiesto dvoch
 samostatných súradníc určujúcich vysunutie stredu otáčania
 prijíma objekt, ktorého polohu použije v relatívnom kontexte
 namiesto priameho zadania hodnôt súradníc (čiže absolútne
 súradnice polohy objektu použije priamo ako relatívne hodnoty –
 nie je vykonaný žiadny prepočet). Inak funguje táto metóda úplne
 rovnako ako spomenutá metóda. Všetky informácie uvedené v jej
 opise sú tiež relevantné, preto odporúčame prečítať si aj jej opis.
Parametre:
tvar – objekt určujúci nové relatívne posunutie
     stredu otáčania výplní
Pozri tiež:
stredOtáčaniaVýplne(double, double)
stredOtacaniaVyplne
public static void stredOtacaniaVyplne(Shape tvar)
 Alias pre stredOtáčaniaVýplne.
posunutieVýplneNaMyš
public static void posunutieVýplneNaMyš()
Táto metóda číta súradnice myši, ktoré použije na posunutie
 počiatku obrázkových výplní. Funguje tak, ako keby sme do metódy
 posunutieVýplne(x, y)
 zadali súradnice myši namiesto parametrov. Informácie nachádzajúce
 sa v opise uvedenej metódy sú relevantné aj v prípade tejto
 metódy, preto odporúčame prečítať si ho.
Pozri tiež:
posunutieVýplne(double, double)
posunutieVyplneNaMys
public static void posunutieVyplneNaMys()
 Alias pre posunutieVýplneNaMyš.
otočenieVýplneNaMyš
public static void otočenieVýplneNaMyš()
Táto metóda použije súradnice myši na vypočítanie nového
 pootočenia obrázkových výplní. Najprv prevezme súradnice myši,
 vypočíta z nich uhol smerom k aktuálnemu stredu otáčania
 obrázkových výplní a uhol použije na nastavenie nového pootočenia.
 
 Metóda funguje tak, ako keby sme vypočítaný uhol zadali ako
 parameter do metódy otočenieVýplne(uhol). Informácie nachádzajúce sa v opise
 uvedenej metódy sú relevantné aj pre túto metódu, preto
 odporúčame prečítať si aj jej opis.
Pozri tiež:
otočenieVýplne(double)
otocenieVyplneNaMys
public static void otocenieVyplneNaMys()
 Alias pre otočenieVýplneNaMyš.
pootočenieVýplneNaMyš
public static void pootočenieVýplneNaMyš()
Táto metóda použije súradnice myši na vypočítanie nového
 pootočenia obrázkových výplní. Najprv prevezme súradnice myši,
 vypočíta z nich uhol smerom k aktuálnemu stredu otáčania
 obrázkových výplní a uhol použije na nastavenie nového pootočenia.
 
 Metóda funguje tak, ako keby sme vypočítaný uhol zadali ako
 parameter do metódy pootočenieVýplne(uhol). Informácie nachádzajúce sa v opise
 uvedenej metódy sú relevantné aj pre túto metódu, preto
 odporúčame prečítať si aj jej opis.
Pozri tiež:
pootočenieVýplne(double)
pootocenieVyplneNaMys
public static void pootocenieVyplneNaMys()
 Alias pre pootočenieVýplneNaMyš.
stredOtáčaniaVýplneNaMyš
public static void stredOtáčaniaVýplneNaMyš()
Táto metóda číta súradnice myši, ktoré použije na nastavenie
 nového relatívneho stredu otáčania obrázkových výplní.
 Funguje tak, ako keby sme do parametrov metódy
 stredOtáčaniaVýplne(sx, sy) zadali rozdiel súradníc myši
 a aktuálnych hodnôt posunutia textúr. Informácie nachádzajúce sa
 v opise dotknutej metódy sú relevantné aj v prípade tejto metódy,
 preto odporúčame prečítať si ho.
Pozri tiež:
stredOtáčaniaVýplne(double, double)
stredOtacaniaVyplneNaMys
public static void stredOtacaniaVyplneNaMys()
 Alias pre stredOtáčaniaVýplneNaMyš.
kresli
public static void kresli(Shape tvar,
                          GRobot kreslič)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na podlahu.
 Metóda potrebuje na svoje správne fungovanie robota „kresliča,“
 ktorého farbu a štýl čiary použije na kreslenie. Ak je do metódy
 namiesto konkrétneho kresliča zadaná hodnota null, tak
 je na získanie parametrov kreslenia použitý hlavný robot. Spustenie tejto metódy má rovnaký
 efekt, ako keby sme volali metódu
 podlaha.kresli(tvar,
 kreslič).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou zadaného robota
     („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
kresli(Shape), 
vyplň(Shape, GRobot), 
vyplň(Shape)
vyplň
public static void vyplň(Shape tvar,
                         GRobot kreslič)
Táto metóda slúži na kreslenie vyplnených tvarov na podlahu.
 Metóda potrebuje na svoje správne fungovanie robota „kresliča,“
 ktorého farbu použije na vyplnenie zadaného tvaru. Ak je do metódy
 namiesto konkrétneho kresliča zadaná hodnota null, tak
 je na získanie parametrov kreslenia použitý hlavný robot. Spustenie tejto metódy má rovnaký
 efekt, ako keby sme volali metódu
 podlaha.vyplň(tvar,
 kreslič).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     aktuálnou farbou zadaného robota („kresliča“)
kreslič – grafický robot, ktorého parametre budú použité
     na kreslenie alebo null
Pozri tiež:
kresli(Shape, GRobot), 
kresli(Shape), 
vyplň(Shape)
vypln
public static void vypln(Shape tvar,
                         GRobot kreslič)
 Alias pre vyplň.
kresli
public static void kresli(Shape tvar)
Táto metóda slúži na kreslenie obrysov zadaného tvaru na podlahu.
 Metóda používa na získanie parametrov kreslenia (štýlu a farby
 čiary) hlavného robota. Spustenie
 tejto metódy má rovnaký efekt, ako keby sme volali metódu
 podlaha.kresli(tvar).
Parametre:
tvar – objekt typu Shape, ktorý bude
     nakreslený aktuálnym štýlom čiary a farbou hlavného robota
Pozri tiež:
kresli(Shape, GRobot), 
vyplň(Shape, GRobot), 
vyplň(Shape)
vyplň
public static void vyplň(Shape tvar)
Táto metóda slúži na kreslenie vyplnených tvarov na podlahu.
 Metóda používa na získanie parametrov kreslenia (farby výplne)
 hlavného robota. Spustenie tejto
 metódy má rovnaký efekt, ako keby sme volali metódu
 podlaha.vyplň(tvar).
Parametre:
tvar – objekt typu Shape, ktorý bude vyplnený
     farbou hlavného robota
Pozri tiež:
kresli(Shape, GRobot), 
kresli(Shape), 
vyplň(Shape, GRobot)
vypln
public static void vypln(Shape tvar)
 Alias pre vyplň.
priehľadnosť
public static void priehľadnosť(double prePodlahu,
                                double preStrop)
Naraz nastaví priehľadnosť pre podlahu aj strop.
Parametre:
prePodlahu – nová úroveň (ne)priehľadnosti pre podlahu
     (0.0 – 1.0)
preStrop – nová úroveň priehľadnosti pre strop (0.0 – 1.0)
Pozri tiež:
upravPriehľadnosť(double, double), 
Plátno.priehľadnosť(double), 
Plátno.priehľadnosť(), 
Plátno.upravPriehľadnosť(double)
priehladnost
public static void priehladnost(double prePodlahu,
                                double preStrop)
 Alias pre priehľadnosť.
upravPriehľadnosť
public static void upravPriehľadnosť(double prePodlahu,
                                     double preStrop)
Naraz upraví úroveň
 priehľadnosti pre podlahu aj strop. Parametre sú koeficienty,
 ktorými bude násobená aktuálna úroveň priehľadnosti stanoveného
 plátna – ak napríklad zadáme Svet.upravPriehľadnosť(0.5, 2), tak úroveň priehľadnosti podlahy klesne
 na polovicu a stropu stúpne dvojnásobne.
 
 Príklad:
 
 V tomto príklade použijeme úpravu priehľadnosti plátien na
 vytvorenie prechodového efektu (pozri zoznam zmien: 
poďakovanie uvedené pri
 verzii 1.35):
 
 
// Najskôr zaplníme plátno a strop kresbou:
hrúbkaČiary(10.0);
skry();
for (int i = 0; i &lt; 2; ++i)
{
    farba((int)Svet.náhodnéCeléČíslo(0, 255),
        (int)Svet.náhodnéCeléČíslo(0, 255),
        (int)Svet.náhodnéCeléČíslo(0, 255));
    vyplň();
    for (int j = 0; j &lt; 22; ++j)
    {
        smer(0);
        náhodnáPoloha();
        skoč(0, &#45;113.5);
        for (int k = 0; k &lt; 24; ++k)
        {
            farba((int)Svet.náhodnéCeléČíslo(0, 255),
                (int)Svet.náhodnéCeléČíslo(0, 255),
                (int)Svet.náhodnéCeléČíslo(0, 255));
            doľava(15);
            dopredu(30);
        }
    }
    podlaha.priehľadnosť(0.0);
    kresliNaStrop();
}
// Definujeme obsluhu udalostí (z dôvodu obsluhy časovača):
new ObsluhaUdalostí()
{
    @Override public void tik()
    {
        Svet.upravPriehľadnosť(1.1, 0.9);
        if (strop.priehľadnosť() &lt;= 0.03)
        {
            Svet.pípni();
            Svet.zastavČasovač();
            Svet.priehľadnosť(1.0, 0.0);
        }
    }
};
// A spustíme časovač:
Svet.čakaj(1.0);
Svet.spustiČasovač(0.1);
Svet.pípni();
 
 Výsledok:
 
 
 
 
 Prvý (náhodne) generovaný obrázok(plátno na obrázku
 je zmenšené). 
 
 
 Fáza prelivu obrázkov s pomocou priehľadnosti(zhruba
 v polovici procesu)(plátno na obrázku je
 zmenšené). 
 
 
 Druhý (náhodne) generovaný obrázok(plátno na obrázku
 je zmenšené).
 
 
 Poznámka: Ak by sme chceli vytvoriť plynulý
 prechod priehľadnosti medzi dvomi kresbami pokrývajúcimi celé
 plátna, tak by bolo lepšie, keby sme postupovali tak, že by sme
 na začiatku nastavili obom plátnam úplnú nepriehľadnosť, spodnému
 plátnu by sme ponechali nepriehľadnosť nezmenenú a nepriehľadnosť
 horného plátna by sme plynule znižovali. Avšak pre nepravidelné
 kresby alebo rôzne veľkosti obrázkov by tento postup nefugoval.
 Podobne by sme s týmto prístupom neuspeli, keby sme chceli, aby
 bolo počas prelivu vidno určité (napríklad vzorkované) pozadie,
 ktoré by nebolo súčasťou ani jednej z kresieb.
Parametre:
prePodlahu – koeficient zmeny úrovne priehľadnosti podlahy
preStrop – koeficient zmeny úrovne priehľadnosti stropu
Pozri tiež:
priehľadnosť(double, double), 
Plátno.upravPriehľadnosť(double), 
Plátno.priehľadnosť(double), 
Plátno.priehľadnosť(), 
Plátno.upravPriehľadnosť(double)
upravPriehladnost
public static void upravPriehladnost(double prePodlahu,
                                     double preStrop)
 Alias pre upravPriehľadnosť.
kreslenie
public static boolean kreslenie()
Overí, či je automatické prekresľovanie sveta zapnuté. Vypnutie
 automatického prekresľovania zabezpečuje metóda nekresli, zapnutie zase metóda kresli.
 
 Poznámka: Predvolená implementácia
 automatického prekresľovania sveta nie je efektívna (ale má
 svoje príčiny). Pozrite si komentáre a príklady v opisoch metód
 prekresli a nebolPrekreslený.
Návratová hodnota:
true ak je automatické prekresľovanie zapnuté,
     false ak je vypnuté
Pozri tiež:
nebolPrekreslený(), 
nekresli(), 
kresli(), 
prekresli(), 
žiadajPrekreslenie()
nebolPrekreslený
public static boolean nebolPrekreslený()
Zistí stav príznaku zamietnutej požiadavky na automatické
 prekreslenie. Ak je hodnota tohto príznaku rovná true,
 tak je pravdepodobné, že obsah okna na obrazovke nekorešponduje
 so skutočnými obsahmi pozadia a plátien (prípadne ďalších
 komponentov).
 
 Táto metóda súvisí s vypnutím predvolenej implementácie
 automatického prekresľovania, ktoré i tak nie je efektívne.
 Nasledujúci príklad ukazuje lepší spôsob implementácie
 automatického (resp. pravidelného) prekresľovania. Ide
 o pravidelnú kontrolu nevyhnutnoti prekresľovanie sveta
 s využitím tejto metódy a prekreslenie v prípade potreby.
 (Ide vlastne o implementáciu prekresľovania v jednotkách snímok
 za sekundu – frames per second – FPS.)
 
 Tento spôsob prekresľovania je v súvislosti s počítačovou
 grafikou ideálny, ale nemohol byť implementovaný v rámci
 programovacieho rámca predvolene, pretože by vyžadoval implicitné
 zapnutie časovača so stanovením predvoleného času obnovovania (čomu
 sa autor programovaceho rámca chcel vyhnúť). Pri implementácii
 programovacieho rámca bolo cieľom:
 
 
 ponechať čo najviac možností slobodnej voľby na
 programátorovi (automatické zapnutie časovača by bolo považované
 za rozhodnutie nad rámec kompetencií programovacieho rámca, pretože
 časovač je jedným z obmedzovaných systémových zdrojov – nie je
 možné vytvoriť nekonečné množstvo časovačov a časovače ovplyvňujú
 činnosť celého systému)
 a zároveň minimalizácia objemu vstupných poznatkov
 pre začiatočníkov (zvolený prístup nevyžaduje od začiatočníka, aby
 sa najskôr podrobne oboznámil s nevyhnutnosťou prekresľovania
 a s možnosťami jeho implementácie – jednoducho si sadne k vhodne
 zvolenému a nakonfigurovanému programovaciemu prostrediu a začne
 používať príkazy grafického robota).
 
 
 To viedlo k predvolenej implementácii automatického
 prekresľovania v súčasnej podobe, čiže po každej zmene plátna.
 Voľba tohto prístupu bola pri vzatí do úvahy uvedených cieľov
 najlepšou možnosťou. Tento nevýhodný spôsob vykresľovania
 sa dá vypnúť a nahradiť iným lepším spôsobom, napríklad
 tým, ktorý ukazuje nasledujúci príklad. Vďaka tomu môže učiteľ
 študentom ukázať výhody a nevýhody rôznych prístupov a vysvetliť
 dôvody ich použitia.
 
 Dôležité upozornenie! V rámci používania
 programovacieho rámca môžu nastať určité špeciálne situácie, kedy nie
 je automaticky rozpoznaná potreba prekreslenia, napríklad pri použití
 vlastných metód obrázka na jeho úpravu, pričom obrázok je nastavený
 ako vlastný tvar niektorému z robotov. Nepoužívajte v takom
 prípade príkaz Svet.prekresli()!
 Na tento účel je rezervovaný príkaz
 Svet.žiadajPrekreslenie().
 
 Príklad:
 
 
import knižnica.*;
public class TestPrekresľovania extends GRobot
{
    private TestPrekresľovania()
    {
        super(300, 200); // nadradený konštruktor upraví veľkosť plátna
        Svet.nekresli(); // vypne predvolený spôsob automatického prekresľovania
        // V nasledujúcej obsluje udalostí (v reakcii tik) bude zabezpečené
        // pravidelné prekresľovanie:
        new ObsluhaUdalostí()
        {
            @Override public void tik()
            {
                // Ak je treba, tak prekresli svet…
                if (Svet.neboloPrekreslené()) Svet.prekresli();
            }
            // …
            // Obsluha prípadných ďalších udalostí…
            // …
        };
        Svet.spustiČasovač();
        // Príklad časovo náročnej činnosti (pri zapnutom pôvodnom
        // automatickom prekresľovaní by bola časovo ešte náročnejšia, pretože
        // prekreslenie by nastalo po každom príkaze v tele cyklu – dokončenie
        // vykonávania cyklu by trvalo možno aj niekoľko minút; takto sa celý
        // príklad vykoná za necelú sekundu…):
        for (int i = 0; i &lt; 1000000; ++i)
        {
            náhodnáPoloha();
            bod();
        }
    }
    public static void main(String... args)
    {
        // Príkaz „Svet.nekresli()“ môže byť prípadne uvedený aj tu…
        Svet.použiKonfiguráciu("test-prekresľovania.cfg");
        new TestPrekresľovania();
    }
}
 
 Výsledok:
 
 
 
 
 
 
 Niekoľko obrázkov zobrazujúcich
 priebeh zapĺňania plátna bodmi počas vykonávania tohto
 príkladu.
 
 Poznámka: Pozrite si aj komentáre a príklad
 v opise metódy prekresli.
Návratová hodnota:
true ak vznikla požiadavka na automatické
     prekreslenie, zapnuté, no bola zamietnutá (napríklad
     v dôsledku vypnutia automatického prekresľovania – pozri aj:
     nekresli); false v opačnom
     prípade
Pozri tiež:
kreslenie(), 
nekresli(), 
kresli(), 
prekresli(), 
žiadajPrekreslenie()
nebolPrekresleny
public static boolean nebolPrekresleny()
 Alias pre nebolPrekreslený.
neboloPrekreslené
public static boolean neboloPrekreslené()
 Alias pre nebolPrekreslený.
neboloPrekreslene
public static boolean neboloPrekreslene()
 Alias pre nebolPrekreslený.
nekresli
public static void nekresli()
Vypne predvolenú implementáciu automatického prekresľovanie
 sveta. Tá funguje tak, že prekresľovanie sveta je automaticky
 vykonávané po rôznych aktivitách robotov (zmena polohy,
 orientácie a podobne), pri zmene niektorých parametrov sveta,
 prípadne pri inej relevantnej príležitosti (to jest vždy, keď je
 pravdepodobné, že sa niečo na plátnach sveta vizuálne zmenilo).
 
 Vypnutie automatického prekresľovania môže značne zvýšiť
 grafickú efektívnosť aplikácie, aby sme však po jeho vypnutí
 mohli vidieť výsledok kreslenia, musíme vždy (po akejkoľvek zmene,
 ktorá by sa mohla prejaviť graficky) použiť metódu prekresli (napríklad pravidelne po určitom počte
 vykonaných príkazov, alebo v pravidelných časových intervaloch,
 prípadne po overení potreby prekreslenia sveta metódou
 nebolPrekreslený). Túto predvolenú
 implementáciu automatického prekresľovania sveta opätovne
 zapneme metódou kresli.
 
 Poznámka: Predvolená implementácia
 automatického prekresľovania sveta nie je efektívna, i keď má
 svoje príčiny. Pozrite si komentáre a príklady v opisoch metód
 prekresli a nebolPrekreslený.
Pozri tiež:
kreslenie(), 
nebolPrekreslený(), 
kresli(), 
prekresli(), 
žiadajPrekreslenie()
kresli
public static void kresli()
Zapne automatické prekresľovanie sveta, ktoré bolo vypnuté metódou
 nekresli. Ak nechceme prekresľovanie zapnúť,
 ale chceme napríklad vidieť, čo medzičasom nakreslil niektorý
 robot, môžeme použiť metódu prekresli.
 
 Poznámka: Predvolená implementácia
 automatického prekresľovania sveta nie je efektívna (ale má
 svoje príčiny). Pozrite si komentáre a príklady v opisoch metód
 prekresli a nebolPrekreslený.
Pozri tiež:
kreslenie(), 
nebolPrekreslený(), 
nekresli(), 
prekresli(), 
žiadajPrekreslenie()
prekresli
public static void prekresli()
Jednorazovo prekreslí obsah sveta (bez ohľadu na použitie metódy
 nekresli).
 
 To znamená, že metóda prekreslí obsah sveta bez ohľadu na
 nastavenie automatického prekresľovania (pozri napríklad metódu
 nekresli). Metóda spustí rovnaký proces,
 aký je vykonávaný pri automatickom prekresľovaní. V prípade, že
 je automatické prekresľovanie sveta vypnuté (metódou nekresli), nie je prekreslenie vykonané bez vedomia
 programátora, okrem prípadu, keď sú splnené nasledujúce podmienky:
 
 
 bola aspoň raz použitá niektorá z metód vypíš, vypíšRiadok
 a súčasne
 sa zmenila veľkosť hlavného okna (buď aktivitou
 používateľa, alebo z iných príčin)
 a súčasne
 nie je aktívna obsluha udalostí (pozri ObsluhaUdalostí.zmenaVeľkostiOkna()).
 
 
 Vypnutie automatického prekresľovania môže značne zvýšiť
 grafickú efektívnosť aplikácie.
 
 Príklad:
 
 V tomto príklade najskôr vypneme kreslenie a začneme kresliť
 vymyslenú mapu kruhového sveta… Svet bude mať dvadsať kontinentov.
 Po nakreslení každého z nich použijeme metódu prekresli na ukázanie čiastočného (a nakoniec konečného)
 výsledku (pozri zoznam zmien: 
poďakovanie uvedené pri
 verzii 1.35):
 
 
// V tomto príklade nakreslíme „Novú Zem“:
Svet.farbaPozadia(modrá);
Svet.nekresli();
hrúbkaČiary(1.5);
for (int i = 0; i &lt; 20; ++i)
{
    // Pevninu rozbijeme na viacero kontinentov (kolízie nebudeme
    // kontrolovať, dovolíme, aby sa prekrývali). Každý kontinent
    // začneme na náhodnej pozícii:
    náhodnáPoloha();
    for (int j = 0; j &lt; 25000; ++j)
    {
        // Tieto dva príkazy sa postarajú o kreslenie pevniny
        // (náhodným spôsobom):
        náhodnýSmer();
        dopredu(1.5);
        // Nasledujúci výpočet a podmienka sa postarajú o vznik
        // červených „kruhov“ (tenkých obručí) na ploche pevniny:
        double výpočet = vzdialenosť() / 50 &#45; vzdialenosť() % 50;
        if ((výpočet % 2) &gt;= 1)
            farba(červená);
        else
            farba(zelená);
    }
    Svet.prekresli();
}
Svet.kresli();
 
 Nová Zem sa bude vykresľovať po fázach, výsledok bude náhodný
 a môže vyzerať napríklad takto:
 
 
 
 Poznámka: Táto metóda súvisí s vypnutím
 predvolenej implementácie automatického prekresľovania, ktoré i tak
 nie je efektívne. Pozrite si aj komentáre a príklad v opise metódy
 nebolPrekreslený.
Pozri tiež:
kreslenie(), 
nebolPrekreslený(), 
nekresli(), 
kresli(), 
žiadajPrekreslenie()
žiadajPrekreslenie
public static void žiadajPrekreslenie()
Nastaví vnútorný príznak (stav) prekreslenia sveta tak, aby metóda
 nebolPrekreslený vrátila hodnotu
 true. Táto metóda nedokáže zabezpečiť prekreslenie sveta.
 Jej účelom je len nastaviť uvedený príznak. Využitie nájde
 v prípadoch, kedy je vypnuté automatické prekresľovanie sveta
 a čas (interval) prekresľovania určuje aplikácia. (Pozri aj
 upozornenie v opise metódy nebolPrekreslený.)
Pozri tiež:
kreslenie(), 
nebolPrekreslený(), 
nekresli(), 
kresli(), 
prekresli()
ziadajPrekreslenie
public static void ziadajPrekreslenie()
 Alias pre žiadajPrekreslenie.
vymažPonuku
public static void vymažPonuku()
Vymaže všetky položky hlavnej ponuky (vrátane predvolených). Metóda
 automaticky skryje hlavnú ponuku. Viditeľnosť ponuky je automaticky
 obnovená po začatí pridávania položiek.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuHlavnejPonuky(String), 
pridajPoložkuHlavnejPonuky(String, int), 
pridajPoložkuPonuky(String), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky()
vymazPonuku
public static void vymazPonuku()
 Alias pre vymažPonuku.
pridajPoložkuHlavnejPonuky
public static void pridajPoložkuHlavnejPonuky(String text)
Rozšíri hlavnú ponuku o ďalšiu položku alebo prepíše aktuálnu
 položku hlavnej ponuky. Aktuálna hlavná položka je prepísaná
 v prípade, že zatiaľ neobsauje žiadne podpoložky (pozri pridajPoložkuPonuky alebo jej
 „klony“).
Parametre:
text – reťazec textu pridávanej položky
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuHlavnejPonuky(String, int), 
premenujPoložkuHlavnejPonuky(int, String), 
pridajPoložkuPonuky(String), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky()
pridajPolozkuHlavnejPonuky
public static void pridajPolozkuHlavnejPonuky(String text)
 Alias pre pridajPoložkuHlavnejPonuky.
pridajPoložkuHlavnejPonuky
public static void pridajPoložkuHlavnejPonuky(String text,
                                              int mnemonickáSkratka)
Rozšíri hlavnú ponuku o ďalšiu položku alebo prepíše aktuálnu
 položku hlavnej ponuky. Aktuálna hlavná položka je prepísaná
 v prípade, že zatiaľ neobsauje žiadne podpoložky (pozri pridajPoložkuPonuky alebo jej
 „klony“). Význam parametra mnemonickáSkratka je rovnaký ako
 pri metóde pridajPoložkuPonuky(text, mnemonickáSkratka).
Parametre:
text – reťazec textu pridávanej položky
mnemonickáSkratka – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuHlavnejPonuky(String), 
premenujPoložkuHlavnejPonuky(int, String, int), 
pridajPoložkuPonuky(String, int), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky()
pridajPolozkuHlavnejPonuky
public static void pridajPolozkuHlavnejPonuky(String text,
                                              int mnemonickáSkratka)
 Alias pre pridajPoložkuHlavnejPonuky.
premenujPoložkuHlavnejPonuky
public static boolean premenujPoložkuHlavnejPonuky(int ktorá,
                                                   String text)
Premenuje zadanú položku hlavnej ponuky. (Cieľom tejto metódy
 je uľahčiť jazykovú lokalizáciu.) Prvý parameter je index
 („poradové číslo“ začínajúce od nuly) položky, ktorá má byť
 premenovaná. Ak nastane chyba (napríklad položka so zadaným
 indexom nejestvuje), tak metóda vráti hodnotu false.
Parametre:
ktorá – index položky, ktorej text má byť zmenený
text – nové znenie textu položky
Návratová hodnota:
kontrolná návratová hodnota: true ak akcia uspela
Pozri tiež:
premenujPoložkuHlavnejPonuky(int, String, int), 
pridajPoložkuHlavnejPonuky(String)
premenujPolozkuHlavnejPonuky
public static boolean premenujPolozkuHlavnejPonuky(int ktorá,
                                                   String text)
 Alias pre premenujPoložkuHlavnejPonuky.
premenujPoložkuHlavnejPonuky
public static boolean premenujPoložkuHlavnejPonuky(int ktorá,
                                                   String text,
                                                   int mnemonickáSkratka)
Premenuje zadanú položku hlavnej ponuky. (Cieľom tejto metódy
 je uľahčiť jazykovú lokalizáciu.) Prvý parameter je index
 („poradové číslo“ začínajúce od nuly) položky, ktorá má byť
 premenovaná. Ak nastane chyba (napríklad položka so zadaným
 indexom nejestvuje), tak metóda vráti hodnotu false.
 Význam parametra mnemonickáSkratka je rovnaký ako
 pri metóde pridajPoložkuPonuky(text, mnemonickáSkratka).
Parametre:
ktorá – index položky, ktorej text má byť zmenený
text – nové znenie textu položky
mnemonickáSkratka – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
Návratová hodnota:
kontrolná návratová hodnota: true ak akcia uspela
Pozri tiež:
premenujPoložkuHlavnejPonuky(int, String), 
pridajPoložkuHlavnejPonuky(String, int)
premenujPolozkuHlavnejPonuky
public static boolean premenujPolozkuHlavnejPonuky(int ktorá,
                                                   String text,
                                                   int mnemonickáSkratka)
 Alias pre premenujPoložkuHlavnejPonuky.
pridajPoložkuPonuky
public static PoložkaPonuky pridajPoložkuPonuky(String text)
Pridá do hlavnej ponuky položku so zadaným textom. Zvolenie položky
 vyvolá reakciu voľbaPoložkyPonuky v triede obsluhy udalostí. V tej je možné
 položku identifikovať s pomocou metódy
 ÚdajeUdalostí.položkaPonuky
 ktorá vracia objekt typu PoložkaPonuky.
 Ten môžeme porovnať s hodnotou vrátenou z tejto metódy (ktorú si
 odložíme do pomocnej premennej) alebo použiť iný spôsob
 identifikácie. Napríklad metódu aktivovaná, ktorá vráti true v prípade, že bola táto
 položka naposledy aktivovaná.
Parametre:
text – reťazec textu pridávanej položky ponuky
Návratová hodnota:
objekt novej položky ponuky (PoložkaPonuky) alebo null ak nastala chyba
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuPonuky(String, int), 
pridajPoložkuPonuky(String, int, int), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky(), 
pridajPoložkuPonukyVymazať(), 
pridajPoložkuPonukyPrekresliť(), 
pridajPoložkuPonukyKoniec()
pridajPolozkuPonuky
public static PolozkaPonuky pridajPolozkuPonuky(String text)
 Alias pre pridajPoložkuPonuky.
pridajPoložkuPonuky
public static PoložkaPonuky pridajPoložkuPonuky(String text,
                                                int mnemonickáSkratka)
Funguje rovnako ako pridajPoložkuPonuky(String) s tým,
 že definuje novej položke mnemonickú skratku (skratky, ktoré sú
 v položkách ponuky znázorňované podčiarknutým písmenom). Skratku
 je možné najjednoduchšie určiť konštantou triedy KeyEvent.VK_XXX (tá je
 v programovacom rámci na zjednodušenie prístupu prekrytá triedou
 Kláves, takže môžeme použiť napríklad konštanty
 Kláves.VK_A, Kláves.VK_B, Kláves.VK_C…).
Parametre:
text – reťazec textu pridávanej položky ponuky
mnemonickáSkratka – kód mnemonickej skratky (príklad:
     Kláves.VK_A)
Návratová hodnota:
objekt novej položky ponuky (PoložkaPonuky) alebo null ak nastala chyba
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuPonuky(String), 
pridajPoložkuPonuky(String, int, int), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky(), 
pridajPoložkuPonukyVymazať(), 
pridajPoložkuPonukyPrekresliť(), 
pridajPoložkuPonukyKoniec()
pridajPolozkuPonuky
public static PolozkaPonuky pridajPolozkuPonuky(String text,
                                                int mnemonickáSkratka)
 Alias pre pridajPoložkuPonuky.
pridajPoložkuPonuky
public static PoložkaPonuky pridajPoložkuPonuky(String text,
                                                int mnemonickáSkratka,
                                                int klávesováSkratka)
Funguje rovnako ako pridajPoložkuPonuky(String, int)
 s tým, že definuje novej položke okrem mnemonickej aj klávesovú
 skratku (skratky, ktoré pri v položkách ponuky znázorňované
 v pravej časti textom Ctrl + písmeno). Skratky je možné
 najjednoduchšie určiť konštantou triedy KeyEvent.VK_XXX (tá je v programovacom rámci
 na zjednodušenie prístupu prekrytá triedou Kláves,
 takže môžeme použiť napríklad konštanty Kláves.VK_A,
 Kláves.VK_B, Kláves.VK_C…).
Parametre:
text – reťazec textu pridávanej položky ponuky
mnemonickáSkratka – kód mnemonickej skratky (príklad: Kláves.VK_A)
klávesováSkratka – kód klávesovej skratky (príklad: Kláves.VK_B)
Návratová hodnota:
objekt novej položky ponuky (PoložkaPonuky) alebo null ak nastala chyba
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuPonuky(String), 
pridajPoložkuPonuky(String, int), 
pridajVnorenúPonuku(String, JMenuItem...), 
pridajOddeľovačPonuky(), 
pridajPoložkuPonukyVymazať(), 
pridajPoložkuPonukyPrekresliť(), 
pridajPoložkuPonukyKoniec()
pridajPolozkuPonuky
public static PolozkaPonuky pridajPolozkuPonuky(String text,
                                                int mnemonickáSkratka,
                                                int klávesováSkratka)
 Alias pre pridajPoložkuPonuky.
pridajVnorenúPonuku
public static JMenu pridajVnorenúPonuku(String text,
                                        JMenuItem... položky)
Vytvorí a pridá do hlavnej ponuky vnorenú ponuku zo zadaných
 položiek. Táto metóda bola pridaná podľa vzoru metódy KontextováPonuka.pridajPonuku(text, položky) na umožnenie vkladania
 kaskádových ponúk do hlavnej ponuky. A táto metóda tiež pracuje
 s rovnakými pravidlami ako uvedená metóda.
 
 Upozornenie: Do vnorenej ponuky nie je
 možné vkladať inštancie triedy PoložkaPonuky,
 pretože tie sú implementované tak, aby sa automaticky pri svojom
 vytvorení pridávali do hlavnej ponuky sveta. Je však možné použiť
 inštancie triedy KontextováPoložka. To
 má však prirodzený dôsledok, že voľbu takejto položky neobsluhujeme
 v rámci reakcie voľbaPoložkyPonuky, ale voľbaKontextovejPoložky.
 
 Ak má niektorá zo položiek zadaných v zozname parametrov
 položky hodnotu null, tak je do ponuky vložený
 oddeľovač.
Parametre:
text – text položky vnorenej ponuky
položky – zoznam položiek
Návratová hodnota:
vytvorená (a pridaná) ponuka
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuHlavnejPonuky(String), 
pridajPoložkuPonuky(String), 
pridajOddeľovačPonuky()
pridajVnorenuPonuku
public static JMenu pridajVnorenuPonuku(String text,
                                        JMenuItem... položky)
 Alias pre pridajVnorenúPonuku.
pridajOddeľovačPonuky
public static void pridajOddeľovačPonuky()
Pridá do hlavnej ponuky oddeľovač. Štandardne je oddeľovač pridaný
 za prvé dve predvolené položky ponuky. Toto správanie nie je možné
 potlačiť, iba ak by ponuka bola najskôr vymazaná a znova vytvorená
 s vlastnou obsluhou nových položiek. Táto metóda slúži na
 pridávanie vlastných oddeľovačov do ponuky.
Pozri tiež:
PoložkaPonuky, 
vymažPonuku(), 
pridajPoložkuHlavnejPonuky(String), 
pridajPoložkuPonuky(String), 
pridajVnorenúPonuku(String, JMenuItem...)
pridajOddelovacPonuky
public static void pridajOddelovacPonuky()
 Alias pre pridajOddeľovačPonuky.
pridajPoložkuPonukyVymazať
public static void pridajPoložkuPonukyVymazať()
Pridá do ponuky položku „Vymazať.“ Položka je jednou
 z preddefinovaných položiek, ktoré majú vopred definovanú
 funkcionalitu. Táto po zvolení vymaže a prekreslí svet.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonuky(String), 
pridajPoložkuPonukyPrekresliť(), 
pridajPoložkuPonukyKoniec()
pridajPolozkuPonukyVymazat
public static void pridajPolozkuPonukyVymazat()
 Alias pre pridajPoložkuPonukyVymazať.
pridajPoložkuPonukyPrekresliť
public static void pridajPoložkuPonukyPrekresliť()
Pridá do ponuky položku „Prekresliť.“ Položka je jednou
 z preddefinovaných položiek, ktoré majú vopred definovanú
 funkcionalitu. Táto vynúti prekreslenie sveta.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonuky(String), 
pridajPoložkuPonukyVymazať(), 
pridajPoložkuPonukyKoniec()
pridajPolozkuPonukyPrekreslit
public static void pridajPolozkuPonukyPrekreslit()
 Alias pre pridajPoložkuPonukyPrekresliť.
pridajPoložkuPonukyKoniec
public static void pridajPoložkuPonukyKoniec()
Pridá do ponuky preddefinovanú položku „Koniec.“ Toto je
 využiteľné keď sme ponuku vymazali
 a chceme do nej pridať túto položku, ktorej funkcionalita je
 vopred naprogramovaná.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonuky(String), 
pridajPoložkuPonukyVymazať(), 
pridajPoložkuPonukyPrekresliť()
pridajPolozkuPonukyKoniec
public static void pridajPolozkuPonukyKoniec()
 Alias pre pridajPoložkuPonukyKoniec.
položkaPonukyVymazať
public static PoložkaPonuky položkaPonukyVymazať()
Poskytne preddefinovanú položku „Vymazať“ na prípadné úpravy.
 Ak položka doteraz nebola použitá, bude automaticky pridaná do
 hlavnej ponuky. Toto správanie nie je možné ovplyvniť. Ak je
 položka v ponuke nežiaduca, je potrebné ju dodatočne odstrániť.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonukyVymazať()
polozkaPonukyVymazat
public static PoložkaPonuky polozkaPonukyVymazat()
 Alias pre položkaPonukyVymazať.
položkaPonukyPrekresliť
public static PoložkaPonuky položkaPonukyPrekresliť()
Poskytne preddefinovanú položku „Prekresliť“ na prípadné úpravy.
 Ak položka doteraz nebola použitá, bude automaticky pridaná do
 hlavnej ponuky. Toto správanie nie je možné ovplyvniť. Ak je
 položka v ponuke nežiaduca, je potrebné ju dodatočne odstrániť.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonukyPrekresliť()
polozkaPonukyPrekreslit
public static PoložkaPonuky polozkaPonukyPrekreslit()
 Alias pre položkaPonukyPrekresliť.
položkaPonukyKoniec
public static PoložkaPonuky položkaPonukyKoniec()
Poskytne preddefinovanú položku „Koniec“ na prípadné úpravy.
Pozri tiež:
PoložkaPonuky, 
pridajPoložkuPonukyKoniec()
polozkaPonukyKoniec
public static PoložkaPonuky polozkaPonukyKoniec()
 Alias pre položkaPonukyKoniec.
textNaRiadky
public static String[] textNaRiadky(String text,
                                    int dĺžkaRiadka)
Rozdelí dlhý text na riadky s maximálnou zadanou dĺžkou
 v znakoch.
 
 Poznámka: Metóda zmení všetky znaky
 tabulátorov na medzery.
Parametre:
text – text, ktorý má byť rozdelený na riadky
dĺžkaRiadka – maximálna dĺžka jednotlivých riadkov udaná
     v znakoch
Návratová hodnota:
pole reťazcov – jednotlivé riadky pôvodného textu
textNaRiadky
public static String[] textNaRiadky(String text,
                                    int dĺžkaRiadka,
                                    boolean zachovajMedzery)
Rozdelí dlhý text na riadky s maximálnou zadanou dĺžkou
 v znakoch.
 
 Poznámka: Metóda zmení všetky znaky
 tabulátorov na medzery.
Parametre:
text – text, ktorý má byť rozdelený na riadky
dĺžkaRiadka – maximálna dĺžka jednotlivých riadkov udaná
     v znakoch
zachovajMedzery – ak je false, medzery budú
     redukované na minimum – medzery na koncoch a začiatkoch riadkov
     budú odstránené a viacnásobné medzery medzi slovami budú
     redukované na jedinú medzeru
Návratová hodnota:
pole reťazcov – jednotlivé riadky pôvodného textu
oddeľovačPrvkovPoľa
public static String oddeľovačPrvkovPoľa()
Zistí, aký oddeľovač prvkov je aktuálne používaný pri výpisoch polí
 príkazmi vypíš,
 vypíšRiadok.
Návratová hodnota:
oddeľovač prvkov poľa (reťazec)
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacPrvkovPola
public static String oddelovacPrvkovPola()
 Alias pre oddeľovačPrvkovPoľa.
oddeľovačPrvkovPoľa
public static void oddeľovačPrvkovPoľa(String oddeľovač)
Nastaví hodnotu oddeľovača prvkov poľa, ktorý bude používaný pri
 výpisoch polí príkazmi vypíš,
 vypíšRiadok.
Parametre:
oddeľovač – nový oddeľovač prvkov poľa
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacPrvkovPola
public static void oddelovacPrvkovPola(String oddeľovač)
 Alias pre oddeľovačPrvkovPoľa.
oddeľovačDesatinnejČasti
public static char oddeľovačDesatinnejČasti()
Zistí, aký oddeľovač desatinnej časti je aktuálne používaný pri
 výpisoch čísiel príkazmi vypíš,
 vypíšRiadok. Tento oddeľovač je
 braný do úvahy aj pri rozpoznávaní číselných hodnôt rôznymi
 metódami vstupu.
Návratová hodnota:
oddeľovač desatinnej časti
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacDesatinnejCasti
public static char oddelovacDesatinnejCasti()
 Alias pre oddeľovačDesatinnejČasti.
oddeľovačDesatinnejČasti
public static void oddeľovačDesatinnejČasti(char oddeľovač)
Nastaví hodnotu oddeľovača desatinnej časti, ktorý bude používaný
 pri výpisoch príkazmi vypíš,
 vypíšRiadok. Zadaný oddeľovač bude
 vzatý do úvahy aj pri rozpoznávaní číselných hodnôt rôznymi
 metódami vstupu.
Parametre:
oddeľovač – nový oddeľovač desatinnej časti
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacDesatinnejCasti
public static void oddelovacDesatinnejCasti(char oddeľovač)
 Alias pre oddeľovačDesatinnejČasti.
oddeľovačTisícov
public static Character oddeľovačTisícov()
Zistí, aký oddeľovač tisícov je aktuálne používaný pri výpisoch
 čísiel príkazmi vypíš,
 vypíšRiadok. Tento oddeľovač je
 braný do úvahy aj pri rozpoznávaní číselných hodnôt rôznymi
 metódami vstupu. Ak oddeľovač tisícov nie je použitý (to znamená,
 že celá časť čísla je vždy vypísaná spolu a tisíce nie sú
 oddeľované), tak je výsledkom tejto metódy hodnota null.
Návratová hodnota:
oddeľovač tisícov alebo null
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacTisicov
public static Character oddelovacTisicov()
 Alias pre oddeľovačTisícov.
oddeľovačTisícov
public static void oddeľovačTisícov(Character oddeľovač)
Nastaví hodnotu oddeľovača tisícov, ktorý bude používaný pri
 výpisoch príkazmi vypíš,
 vypíšRiadok. Zadaný oddeľovač bude
 vzatý do úvahy aj pri rozpoznávaní číselných hodnôt rôznymi
 metódami vstupu. Ak je požadované, aby vo výpisoch tisíce neboli
 oddeľované, tak je potrebné vložiť hodnotu null.
Parametre:
oddeľovač – nový oddeľovač tisícov alebo null
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(), 
vypíš(Object[]), 
F(double, int), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
oddelovacTisicov
public static void oddelovacTisicov(Character oddeľovač)
 Alias pre oddeľovačTisícov.
F
public static String F(double číslo,
                       int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
 Prijíma reálne číslo a hodnotu počtu desatinných miest, ktoré majú
 byť zobrazené.
 Na jednoduchšie používanie je rovnaká metóda definovaná aj v triede
 GRobot: F(číslo,
 desatinné).
 (V jej opise je uvedený aj príklad použitia a ďalšie fakty.)
 Metóda má ešte jednu verziu: Svet.F(číslo, šírka, desatinné).
Parametre:
číslo – hodnota, ktorá má byť naformátovaná
desatinné – počet desatinných miest, ktoré majú byť uvedené
     vo výslednom (naformátovanom) tvare
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
F
public static String F(double číslo,
                       int šírka,
                       int desatinné)
Táto metóda slúži na jednoduché formátovanie reálnych čísiel.
 Prijíma reálne číslo, potom hodnotu určujúcu šírku výsledného
 reťazca (počet znakov), na ktorú má byť zarovnaný zľava a nakoniec
 počet desatinných miest, ktoré majú byť zobrazené.
 Na jednoduchšie používanie je rovnaká metóda definovaná aj v triede
 GRobot: F(číslo, šírka, desatinné).
 (V jej opise je uvedený aj príklad použitia a ďalšie fakty.)
 Metóda má ešte jednu verziu: Svet.F(číslo, desatinné).
Parametre:
číslo – hodnota, ktorá má byť naformátovaná
šírka – najmenší počet znakov výsledného naformátovaného
     reťazca (pri krátkych číslach budú chýbajúce znaky doplnené
     medzerami)
desatinné – počet desatinných miest, ktoré majú byť uvedené
     vo výslednom (naformátovanom) tvare
Pozri tiež:
formát, 
oddeľovačPrvkovPoľa(String), 
oddeľovačDesatinnejČasti(char), 
oddeľovačTisícov(Character), 
vypíš(Object[]), 
F(double, int), 
GRobot.F(double, int), 
GRobot.F(double, int, int)
S
public static String S(Object... argumenty)
Táto metóda slúži na rýchly prevod rôznych objektov do
 textovej podoby a ich zlúčenie do jedného reťazca. Pri
 zlučovaní používa rovnaké pravidlá, aké sú opísané v opise
 metódy Plátno.vypíš(argumenty). Súvisí
 to napríklad so spôsobom pridávania medzier medzi reťazce
 zlučovaných argumentov, automatickým formátovaním čísiel
 a podobne.
 Na jednoduchšie používanie je rovnaká metóda definovaná aj
 v triede GRobot: S(argumenty).
 (V jej opise je uvedená aj ukážka použitia a ďalšie fakty.)
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
vypíš(Object[]), 
GRobot.S(Object[])
zaokrúhli
public static double zaokrúhli(double hodnota,
                               int miest)
Zaokrúhli zadané číslo na zadaný počet (desatinných) miest.
 
 Počet miest rovný nule znamená zaokrúhlenie na celé číslo (myslené
 iba terminologicky, pretože vrátená hodnota je vždy údajového typu
 double).
 
 Ak je zadaný záporný počet miest na zaokrúhlenie, tak bude výsledné
 číslo zaokrúhlené na počet miest pred desatinnou čiarkou (desiatky,
 stovky…).
 
 Pri zaokrúhľovaní je uplatnené pravidlo „half up“ (od polovice
 nahor), to znamená, že hodnoty 0 – 4 na pozícii zaokrúhlenia
 zaokrúhľujú výsledok smerom nadol a 5 – 9 nahor.
Parametre:
hodnota – hodnota, ktorá má byť zaokrúhlená
miest – počet (desatinných) miest, ktoré majú byť zachované
Návratová hodnota:
výsledná zaokrúhlená hodnota
zaokruhli
public static double zaokruhli(double hodnota,
                               int miest)
 Alias pre zaokrúhli.
ikona
public static void ikona(String súbor)
 Nastaví oknu aplikácie novú ikonu.
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
 
 Poznámka: Z dôvodu konzistencie by
 k tejto metóde mal byť definovaný alias obrazok(súbor)
 (bez diakritiky), ktorý by korešpondoval s rovnakým aliasom metódy
 ikona(), podobne ako je to v triedach kontextových a klasických položiek ponuky. V tejto
 triede to však nie je možné, pretože už obsahuje definíciu
 metódy obrazok(súbor) (ktorá je aliasom
 metódy obrázok(súbor) – s diakritikou).
 Nie je to závažný technický problém, pretože metódy sú navrhnuté
 tak, aby boli univerzálne. Je to iba „kozmetický“ problém.
Parametre:
súbor – názov súboru s obrázkom
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
priečinokObrázkov(String)
ikona
public static void ikona(Image obrázok)
Nastaví oknu aplikácie ikonu podľa zadaného obrázka.
Parametre:
obrázok – obrázok slúžiaci ako predloha pre ikonu
ikona
public static Obrazok ikona()
Prečíta ikonu okna aplikácie a prevedie ju na obrázok.
 
 Poznámka: Táto metóda vriacia objekt typu
 Obrazok (t. j. triedy, ktorá je aliasom triedy
 Obrázok). Dôvod je uvedený v poznámke v opise metódy
 ikona(súbor).
Návratová hodnota:
obrázok s ikonou
novýKurzorMyši
public static void novýKurzorMyši(Image predloha,
                                  int x,
                                  int y,
                                  String meno)
Definuje nový kurzor myši použiteľný v hlavnom okne aplikácie.
 Tvar kurzora určí aktuálna grafika zadaného obrázka (môže byť
 použitý aj objekt typu Obrázok). Súradnice x a x určujú aktívny bod kurzora (hot spot),
 t. j. bod, ktorý bude považovaný za „špičku,“ či „stred“ kurzora
 (záleží na tvare kurzora). Súradnice [0, 0] sú považované za
 stred kurzora. Rozsah súradníc je určený rozmermi obrázka.
 Odporúčame zvoliť také rozmery obrázka, ktoré sú štandardné pre
 kurzory, napríklad 32 × 32 bodov, inak by mohlo dôjsť
 k nežiadanému posunu aktívneho bodu kurzora. Názov kurzora musí
 byť jedinečný. Ten treba použiť pri volaní metódy zmeňKurzorMyši.
 
 Príklad:
 
 
 
 
Obrázok ihla = new Obrázok(32, 32);
kresliDoObrázka(ihla);
hrúbkaČiary(2.5);
farba(tyrkysová);
choďNa(&#45;16, &#45;16);
domov();
farba(modrá);
kruh(4.5);
Svet.novýKurzorMyši(ihla, &#45;15, &#45;15, "ihla");
Svet.zmeňKurzorMyši("ihla");
 
 Maličký výrez plátna so zobrazeným novým
 kurzorom nad ním.
Parametre:
predloha – obrázok, ktorého grafika bude použitá na
     vytvorenie kurzora
x – x-ová súradnica aktívneho bodu nového kurzora
y – y-ová súradnica aktívneho bodu nového kurzora
meno – meno kurzora, ktoré bude neskôr použité pri volaní
     metódy zmeňKurzorMyši
Výnimky:
GRobotException – ak kurzor so zadaným menom už jestvuje
Pozri tiež:
zmeňKurzorMyši(String), 
zmeňNovýKurzorMyši(Image, int, int, String)
novyKurzorMysi
public static void novyKurzorMysi(Image predloha,
                                  int x,
                                  int y,
                                  String meno)
 Alias pre novýKurzorMyši.
novýKurzorMyši
public static void novýKurzorMyši(Image predloha,
                                  double x,
                                  double y,
                                  String meno)
 Alias pre novýKurzorMyši.
novyKurzorMysi
public static void novyKurzorMysi(Image predloha,
                                  double x,
                                  double y,
                                  String meno)
 Alias pre novýKurzorMyši.
zmeňKurzorMyši
public static void zmeňKurzorMyši(String meno)
Zmení hlavnému oknu tvar kurzora myši buď na vlastný tvar kurzora
 vytvorený prostredníctvom metódy novýKurzorMyši
 (prípadne zmeňNovýKurzorMyši), alebo na niektorý zo systémom
 preddefinovaných kurzorov. Systémové kurzory majú nasledujúce
 preddefinované názvy: "predvolený",
 "mieridlo", "text", "čakaj",
 "swZmeniťVeľkosť", "seZmeniťVeľkosť",
 "nwZmeniťVeľkosť", "neZmeniťVeľkosť",
 "nZmeniťVeľkosť", "sZmeniťVeľkosť",
 "wZmeniťVeľkosť", "eZmeniťVeľkosť",
 "ruka", "presunúť". Ak namiesto názvu
 kurzora zadáte null, bude použitý prázdny (neviditeľný)
 kurzor.
 
 Poznámka: Testy ukázali, že táto metóda nemá
 vplyv na tvar kurzora v režime celej obrazovky v operačnom systéme Windows s viacerými
 zobrazovacími zariadeniami. Je možné, že nastavenie tvaru kurzora
 nebude fungovať aj v iných situáciách súvisiacich s režimom celej
 obrazovky.
Parametre:
meno – názov vlastného kurzora, systémového kurzora alebo
     null
Výnimky:
GRobotException – ak kurzor so zadaným menom nejestvuje
Pozri tiež:
novýKurzorMyši(Image, int, int, String), 
zmeňNovýKurzorMyši(Image, int, int, String)
zmenKurzorMysi
public static void zmenKurzorMysi(String meno)
 Alias pre zmeňKurzorMyši.
zmeňNovýKurzorMyši
public static void zmeňNovýKurzorMyši(Image predloha,
                                      int x,
                                      int y,
                                      String meno)
Táto metóda je kombináciou volania metód novýKurzorMyši
 a zmeňKurzorMyši. Platia pre ňu
 rovnaké pravidlá ako pre uvedené dve metódy…
Pozri tiež:
novýKurzorMyši(Image, int, int, String), 
zmeňKurzorMyši(String)
zmenNovyKurzorMysi
public static void zmenNovyKurzorMysi(Image predloha,
                                      int x,
                                      int y,
                                      String meno)
 Alias pre zmeňNovýKurzorMyši.
zmeňNovýKurzorMyši
public static void zmeňNovýKurzorMyši(Image predloha,
                                      double x,
                                      double y,
                                      String meno)
 Alias pre zmeňNovýKurzorMyši.
zmenNovyKurzorMysi
public static void zmenNovyKurzorMysi(Image predloha,
                                      double x,
                                      double y,
                                      String meno)
 Alias pre zmeňNovýKurzorMyši.
systémováIkona
public static TrayIcon systémováIkona()
Vráti objekt systémovej ikony sveta, ak je definovaná.
Návratová hodnota:
buď objekt typu TrayIcon, alebo
     null
systemovaIkona
public static TrayIcon systemovaIkona()
 Alias pre systémováIkona.
systémováIkona
public static boolean systémováIkona(String popis,
                                     Image ikona,
                                     String... položkyPonuky)
Definuje alebo aktualizuje systémovú ikonu nazývanú aj ikonou
 v systémovej oblasti alebo v oblasti oznámení (angl. system
 tray). Pri prvom volaní metódy ide o vytvorenie ikony. Vtedy
 nesmie byť ikona prázdna (null). Položky kontextovej
 ponuky sú určené voliteľným zoznamom reťazcov, v ktorom hodnota
 null znamená oddeľovač. Ak vytvorenie alebo
 aktualizácia zlyhá, tak metóda vráti hodnotu false.
 
 Príklad:
 
 Tento príklad ukazuje vytvorenie primitívnej aplikácie,
 ktorá sa po zatvorení hlavého okna aplikácie skryje/presunie
 do ikony v systémovej oblasti.
 
 
import knižnica.*;
public class AplikáciaVSystémovejOblasti extends GRobot
{
    private AplikáciaVSystémovejOblasti()
    {
        // Nastavenie titulku okna.
        super("Aplikácia v systémovej oblasti…");
        // Vyrobenie grafiky ikony a jej použitie ako ikony aplikácie.
        Obrázok ikona = new Obrázok(32, 32);
        ikona.vyplň(žltá);
        kresliDoObrázka(ikona);
        kruh(12);
        kresliNaPodlahu();
        Svet.ikona(ikona);
        // Pokúsime sa vytvoriť systémovú ikonu s práve vytvorenou grafikou
        // a dvomi položkami kontextovej ponuky:
        if (Svet.systémováIkona(ikona, "Obnoviť", null, "Ukončiť"))
        {
            // Ak je systémová ikona podporovaná, tak zmeníme akciu zatvorenia
            // okna z predvoleného zavretia aplikácie na jej skrytie…
            svet.setDefaultCloseOperation(
                javax.swing.JFrame.HIDE_ON_CLOSE);
                // (poznámka: teraz má používateľ len dve možnosti zavretia
                // tejto aplikácie s použitím jej grafického používateľského
                // rozhrania – predvolenou položkou „Koniec“ v hlavnej ponuke
                // alebo zvolením kontextovej položky „Ukončiť“ v kontextovej
                // ponuke systémovej ikony)
            // …a vypíšeme o tom do okna informáciu:
            skoč(15);
            text("Tlačidlo „Zavrieť“ okna aplikácie teraz");
            odskoč(30);
            text("slúži na jeho skrytie do systémovej oblasti.");
            // Systémovú ikonu nateraz skryjeme.
            Svet.zobrazSystémovúIkonu(false);
        }
        else
        {
            // V opačnom prípade vypíšeme informáciu o tom, že systém túto
            // vlastnosť nepodporuje (alebo jej použitiu bránia iné okolnosti).
            farba(červená);
            text("Systémová ikona nie je podporovaná.");
        }
        // Skryjeme robot a vystredíme okno aplikácie.
        skry();
        Svet.vystreď();
    }
    @Override public void voľbaSystémovejIkony()
    {
        // Predvolenou akciou dvojitého kliknutia na ikonu v systémovej oblasti
        // bude skrytie systémovej ikony a zobrazenie okna aplikácie (ak je skryté).
        Svet.zobrazSystémovúIkonu(false);
        if (!Svet.viditeľný()) Svet.zobraz();
    }
    @Override public void voľbaSystémovejPoložky()
    {
        switch (ÚdajeUdalostí.položkaSystémovejPonuky())
        {
        case 0:
            // Prvá položka kontextovej ponuky bude vykonávať rovnakú akciu
            // ako dvojklik na systémovú ikonu.
            voľbaSystémovejIkony();
            break;
            // Poznámka: Index 1 má oddeľovač.
        case 2:
            // Druhá položka (technicky tretia) kontextovej ponuky aplikáciu zavrie.
            Svet.zavrieť();
            break;
        }
    }
    @Override public boolean zavretie()
    {
        // Touto reakciou vypneme klasickú akciu zavretia okna.
        return false;
    }
    @Override public void skrytieOkna()
    {
        // Pri skrytí okna aplikácie bude zobrazená systémová ikona.
        Svet.zobrazSystémovúIkonu(true);
    }
    public static void main(String... args)
    {
        Svet.skry();
        new AplikáciaVSystémovejOblasti();
        Svet.zobraz();
    }
}
 
 Výsledok:
 
 
  
 Okno aplikácie po spustení
 v stave, keď jeikona v systémovej oblasti podporovaná.
 
 
 
 
 
 Ikona aplikácie na paneli úloh.
 Ikona aplikácie (s ponukou) v systémovej
 oblasti.
 
 
 
Parametre:
popis – popis zobrazovaný pri ukázaní na ikonu
     v systémovej oblasti
ikona – obrázok určujúci vzhľad ikony v systémovej oblasti
položkyPonuky – voliteľný zoznam reťazcov, z ktorých bude
     vytvorená kontextová ponuka ikony
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
systemovaIkona
public static boolean systemovaIkona(String popis,
                                     Image ikona,
                                     String... položkyPonuky)
 Alias pre systémováIkona.
systémováIkona
public static boolean systémováIkona(String popis,
                                     String... položkyPonuky)
Aktualizuje jestvujúcu ikonu v systémovej oblasti. Ďalšie
 podrobnosti čítajte v opise metódy systémováIkona(popis, ikona,
 položkyPonuky).
Parametre:
popis – popis zobrazovaný pri ukázaní na ikonu
     v systémovej oblasti
položkyPonuky – voliteľný zoznam reťazcov, z ktorých bude
     vytvorená kontextová ponuka ikony
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
systemovaIkona
public static boolean systemovaIkona(String popis,
                                     String... položkyPonuky)
 Alias pre systémováIkona.
systémováIkona
public static boolean systémováIkona(Image ikona,
                                     String... položkyPonuky)
Definuje alebo aktualizuje ikonu v systémovej oblasti. Pri
 prvom volaní metódy ide o vytvorenie ikony, vtedy nesmie byť
 ikona prázdna (null). Ďalšie podrobnosti čítajte
 v opise metódy systémováIkona(popis, ikona, položkyPonuky).
Parametre:
ikona – obrázok určujúci vzhľad ikony v systémovej oblasti
položkyPonuky – voliteľný zoznam reťazcov, z ktorých bude
     vytvorená kontextová ponuka ikony
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
systemovaIkona
public static boolean systemovaIkona(Image ikona,
                                     String... položkyPonuky)
 Alias pre systémováIkona.
systémováIkonaZobrazená
public static boolean systémováIkonaZobrazená()
Zistí, či je jestvujúca ikona v systémovej oblasti zobrazená.
Návratová hodnota:
booleovská hodnota určujúca, či je ikona viditeľná
systemovaIkonaZobrazena
public static boolean systemovaIkonaZobrazena()
 Alias pre systémováIkonaZobrazená.
zobrazSystémovúIkonu
public static boolean zobrazSystémovúIkonu(boolean zobraz)
Zobrazí alebo skryje jestvujúcu ikonu v systémovej oblasti.
Parametre:
zobraz – booleovská hodnota určuje, či má byť ikona
     zobrazená alebo skrytá
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
zobrazSystemovuIkonu
public static boolean zobrazSystemovuIkonu(boolean zobraz)
 Alias pre zobrazSystémovúIkonu.
správaSystémovejIkony
public static boolean správaSystémovejIkony(String správa,
                                            String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadanú
 správu s titulkom.
 
 
Parametre:
správa – text správy
titulok – text titulku
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
správaSystémovejIkony
public static boolean správaSystémovejIkony(String správa)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadanú
 správu.
 
 
Parametre:
správa – text správy
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
spravaSystemovejIkony
public static boolean spravaSystemovejIkony(String správa,
                                            String titulok)
 Alias pre správaSystémovejIkony.
spravaSystemovejIkony
public static boolean spravaSystemovejIkony(String správa)
 Alias pre správaSystémovejIkony.
informáciaSystémovejIkony
public static boolean informáciaSystémovejIkony(String informácia,
                                                String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 informačné oznámenie s titulkom.
 
 
Parametre:
informácia – text informácie
titulok – text titulku
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
informáciaSystémovejIkony
public static boolean informáciaSystémovejIkony(String informácia)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 informačné oznámenie.
 
 
Parametre:
informácia – text informácie
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
informaciaSystemovejIkony
public static boolean informaciaSystemovejIkony(String informácia,
                                                String titulok)
 Alias pre informáciaSystémovejIkony.
informaciaSystemovejIkony
public static boolean informaciaSystemovejIkony(String informácia)
 Alias pre informáciaSystémovejIkony.
varovanieSystémovejIkony
public static boolean varovanieSystémovejIkony(String varovanie,
                                               String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 varovné oznámenie s titulkom.
 
 
Parametre:
varovanie – text varovania
titulok – text titulku
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
varovanieSystémovejIkony
public static boolean varovanieSystémovejIkony(String varovanie)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 varovné oznámenie.
 
 
Parametre:
varovanie – text varovania
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
varovanieSystemovejIkony
public static boolean varovanieSystemovejIkony(String varovanie,
                                               String titulok)
 Alias pre varovanieSystémovejIkony.
varovanieSystemovejIkony
public static boolean varovanieSystemovejIkony(String varovanie)
 Alias pre varovanieSystémovejIkony.
chybaSystémovejIkony
public static boolean chybaSystémovejIkony(String chyba,
                                           String titulok)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 chybové oznámenie s titulkom.
 
 
Parametre:
chyba – text chyby
titulok – text titulku
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
chybaSystémovejIkony
public static boolean chybaSystémovejIkony(String chyba)
Ak je definovaná systémová ikona, tak v jej kontexte zobrazí zadané
 chybové oznámenie.
 
 
Parametre:
chyba – text chyby
Návratová hodnota:
true pri úspechu; false
     v opačnom prípade
chybaSystemovejIkony
public static boolean chybaSystemovejIkony(String chyba,
                                           String titulok)
 Alias pre chybaSystémovejIkony.
chybaSystemovejIkony
public static boolean chybaSystemovejIkony(String chyba)
 Alias pre chybaSystémovejIkony.
koniec
public static void koniec()
Skončí aplikáciu bez opýtania. Pozri aj koniec(kód).
Pozri tiež:
zavrieť()
koniec
public static void koniec(int kód)
Skončí aplikáciu s návratovým kódom pre opreračný systém.
 Ukončenie je okamžité, na rozdiel od metódy zavrieť, ktorá generuje udalosť zavretia okna (ktorá môže
 byť odmietnutá).
Parametre:
kód – celočíselný návratový kód, ktorý je schopný prijať
     operačný systém
Pozri tiež:
zavrieť()
obrázok
public static BufferedImage obrázok()
Vráti objekt typu BufferedImage obsahujúci
 aktuálnu obrazovú informáciu sveta. Vrátený objekt obsahuje
 zobrazenie spájajúce dohromady grafiky plátien,
 robotov, spojníc, konzolových textov
 a tak podobne. Tento objekt je pravidelne aktualizovaný, takže
 akékoľvek zmeny v ňom budú mať krátke trvanie. Vrátený objekt je
 skôr vhodný na získanie aktuálnej verzie grafickej informácie
 sveta.
 
 Vrátený objekt (typu BufferedImage) nemá
 prispôsobený súradnicový priestor potrebám programovacieho rámca
 GRobot – pracuje v rovnakom súradnicovom systéme ako všetky
 grafické objekty Javy – začiatok súradnicovej sústavy je umiestnený
 v ľavom hornom rohu obrázka a y-ové súradnice sú v porovnaní
 s klasickým kartéziánskym súradnicovým systémom zrkadlovo
 prevrátené, to znamená, že y-ová súradnica stúpa smerom nadol.
 
 (O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(), SVGpodpora.zapíš(…),
 SVGpodpora.čítaj(meno) a priebežne
 v celej dokumentácii.)
Návratová hodnota:
objekt typu BufferedImage
     obsahujúci aktuálnu obrazovú informáciu sveta
Pozri tiež:
grafika()
obrazok
public static BufferedImage obrazok()
 Alias pre obrázok.
grafika
public static Graphics2D grafika()
Vráti grafický objekt sveta na kreslenie v reakcii ObsluhaUdalostí.dokreslenie().
 Tento objekt pracuje v súradnicovom priestore Javy a všetko, čo
 s pomocou neho nakreslíte, bude na obrazovke zobrazené len do
 najbližšieho prekreslenia. Jeho používanie je vyhradené
 viac-menej iba pre skúsených programátorov. Žiadny robot nedokáže
 priamo kresliť do tohto objektu, ale niektoré metódy robotov môžu
 byť využité, napríklad na generovanie tvarov, ktoré kresliace
 metódy tohto objektu dokážu akceptovať.
 
 (Objekty generované robotmi sú vygenerované tak, aby boli
 použiteľné v súradnicovom priestore Javy, teda aj tohto objektu.
 O súradnicových priestoroch sa podrobnejšie píše napríklad
 v opisoch metód GRobot.cesta(),
 SVGpodpora.zapíš(…), SVGpodpora.čítaj(meno) a priebežne v celej dokumentácii.)
Pozri tiež:
obrázok()
údržba
public static long údržba()
Po pamäťovo náročných operáciách môže byť vhodné uvoľniť
 systémové prostriedky. Metóda sa pokúsi uvoľniť čo najviac
 nepoužívaných prostriedkov. Vráti informáciu o objeme uvoľnenej
 pamäte.
Návratová hodnota:
množstvo uvoľnenej pamäte
udrzba
public static long udrzba()
 Alias pre údržba.
uvoľni
public static void uvoľni(GRobot ktorý)
Metóda slúži na odstránenie konkrétneho robota (alebo inštancie
 odvodeného typu) z vnútorného zoznamu robotov. Prijíma jeden
 argument typu GRobot (to znamená, že môže ísť aj
 o hocijakú inštanciu odvodeného údajového typu). Zadaný objekt
 bude potom vymazaný z vnútorného zoznamu robotov. Keď
 aplikácia zabezpečí aj vynulovanie všetkých ostatných premenných,
 v ktorých je stanovená inštancia uložená, objekt by mal byť (resp.
 bude, aj keď možno nie hneď) uvoľnený z pamäte počítača zberačom
 odpadkov Javy. Uvoľnený robot už nie je možné do sveta
 vrátiť! V prípade, že je uvoľnený hlavný robot, nastúpi na jeho miesto najbližší jestvujúci robot.
 Problém by mohol nastať, keby nie je k dispozícii žiadny ďalší
 robot, ktorý by ho mohol nahradiť.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
ktorý – objekt, ktorý má byť odstránený
Pozri tiež:
uvoľni(java.lang.Class)
uvolni
public static void uvolni(GRobot ktorý)
 Alias pre uvoľni.
uvoľni
public static void uvoľni(Class typ)
Metóda slúži na hromadné vymazanie robotov určitého typu
 z vnútorného zoznamu robotov. Očakáva určenie údajového typu
 prostredníctvom inštancie typu Class. Tú
 môžeme získať, napríklad takto: GRobot.class, Postavička.class…). Zo zoznamu budú v dôsledku toho vymazané
 všetky inštancie určeného typu, ale aj inštancie odvodených
 tried. Preto je dobré byť pri hromadnom odstraňovaní obozretný.
 Ak si nie ste istí, aký dopad by malo použitie tejto metódy,
 použite radšej na uvoľnenie konkrétnych robotov metódu uvoľni(GRobot). Uvoľnených robotov už nie je možné do sveta
 vrátiť! V prípade, že nastane uvoľnenie hlavného robota, nastúpi na jeho miesto najbližší
 jestvujúci robot. Problém by mohol nastať, keby nie je
 k dispozícii žiadny ďalší robot, ktorý by ho mohol nahradiť.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
typ – objekt typu Class
Pozri tiež:
uvoľni(GRobot)
uvolni
public static void uvolni(Class typ)
 Alias pre uvoľni.
uvoľni
public static void uvoľni(Plazma ktorá)
Táto metóda slúži na odstránenie konkrétnej inštancie
 pixelového generátora plazmy z vnútorného zoznamu týchto
 generátorov. Prijíma jeden argument typu Plazma, ktorý určuje objekt určený na vymazanie z vnútorného
 zoznamu generátorov. Aplikácia musí zabezpečiť vynulovanie všetkých
 premenných, v ktorých je inštancia tohto generátora uložená, pretože
 po vymazaní generátora z vnútorného zoznamu prestane byť objekt
 synchronizovaný so zvyškom programovacieho rámca a mohol by sa
 správať inak než by sa od neho očakávalo. Uvoľnený pixelový
 generátor plazmy už nie je možné do sveta vrátiť!
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
ktorá – inštancia plazmy, ktorá má byť odstránená
     z vnútorného zoznamu
uvolni
public static void uvolni(Plazma ktorá)
 Alias pre uvoľni.
uvoľni
public static void uvoľni(Obrázok ktorý)
Táto metóda slúži na odstránenie konkrétneho obrázka
 z vnútorného zoznamu obrázkov. Prijíma jeden argument typu
 Obrázok, ktorý určuje objekt určený na vymazanie
 z vnútorného zoznamu obrázkov. Aplikácia musí zabezpečiť
 vynulovanie všetkých premenných, v ktorých je inštancia tohto
 obrázka uložená, pretože po vymazaní obrázka z vnútorného zoznamu
 prestane byť objekt synchronizovaný so zvyškom programovacieho
 rámca a mohol by sa správať inak než by sa od neho očakávalo.
 Uvoľnený obrázok už nie je možné do sveta vrátiť!
 
 Táto metóda (rovnako ako všetky jej klony) je nevyhnutná pri
 implementácii správy vnútornej pamäte programovacieho rámca. Ak
 aplikácia pracuje s veľkým množstvom grafických a/alebo zvukových
 súborov, je dôležité priebežne pamäť uvoľňovať, inak bude
 vyčerpaná a aplikácia sa zrúti. Základné použitie tejto metódy
 je ukázané v opise metódy pustenieSúboru.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
ktorý – objekt, ktorý má byť odstránený z vnútorného zoznamu
uvolni
public static void uvolni(Obrázok ktorý)
 Alias pre uvoľni.
uvoľni
public static void uvoľni(String názovZdroja)
Táto metóda slúži na odstránenie zdrojov (obrázkov a/alebo
 zvukov) z vnútorných zoznamov zdrojov sveta. Argument určuje
 názov súboru, z ktorého bol objekt zdroja prečítaný. Podľa neho
 sú vo vnútorných zoznamoch sveta (označovaných v tejto
 dokumentácii aj termínom „vnútorná pamäť sveta“) vyhľadané
 všetky korešpondujúce záznamy a sú z nich vymazané. Pri
 najbližšom čítaní tohto zdroja bude zdroj opätovne prečítaný
 z pevného disku (zdrojového súboru) a nová verzia bude opäť
 uložená do vnútorného zoznamu zdrojov sveta.
 
 Táto metóda (rovnako ako všetky jej klony) je nevyhnutná pri
 implementácii správy vnútornej pamäte programovacieho rámca. Ak
 aplikácia pracuje s veľkým množstvom grafických a/alebo zvukových
 súborov, je dôležité priebežne pamäť uvoľňovať, inak bude
 vyčerpaná a aplikácia sa zrúti. Základné použitie tejto metódy
 je ukázané v opise metódy pustenieSúboru.
 
 Poznámka: Názov uvoľni má
 v programovacom rámci GRobot deväť rôznych metód:
 GRobot.uvoľni(),
 GRobot.uvoľni(Oblasť),
 Oblasť.uvoľni(),
 Oblasť.uvoľni(GRobot) –
 slúžia na uvoľnenie robota zo zamestnania pre stanovenú
 oblasť (čo je geometrická trieda),
 Svet.uvoľni() –
 slúži na uvoľnenie hlavného okna sveta, t. j. umožnenie
 zmeny veľkosti okna používateľovi (ide o opak metódy Svet.upevni) a nakoniec
 Svet.uvoľni(GRobot),
 Svet.uvoľni(Class),
 Svet.uvoľni(Plazma)
 Svet.uvoľni(Obrázok)
 a Svet.uvoľni(String) –
 slúžia na uvoľňovanie nepotrebných inštancií robotov,
 vytvorených alebo prečítaných obrázkov a prečítaných zvukov
 z vnútorných zoznamov zdrojov (robotov, obrázkov, zvukov), čo
 je jednak nevyhnutnou podmienkou ich úspešného vymazania
 z pamäte zberačom odpadkov Javy a jednak to môže byť niekedy
 potrebné (napríklad ak sa obsah súboru so zdrojom uloženým na
 disku zmenil).
Parametre:
názovZdroja – názov súboru so zdrojom, ktorý má byť uvoľnený
     z vnútornej pamäte sveta
uvolni
public static void uvolni(String názovZdroja)
 Alias pre uvoľni.
konfiguračnýSúbor
public static Súbor konfiguračnýSúbor()
Vráti inštanciu konfiguračného súboru na účely úpravy jeho parametrov,
 napríklad na úpravu predvolenej sekcie automatickej konfigurácie.
 Neodporúčame túto inštanciu používať na vlastné účely! Tiež odporúčame
 vykonávať čo najmenej zásahov do jej vlastností…
Návratová hodnota:
inštancia konfiguračného súboru
konfiguracnySubor
public static Súbor konfiguracnySubor()
 Alias pre konfiguračnýSúbor.
názovKonfiguračnéhoSúboru
public static String názovKonfiguračnéhoSúboru()
Vráti naposledy použitý názov konfiguračného súboru. Pozri aj
 napríklad metódu konfiguračnýSúbor
 alebo reakciu zapíšKonfiguráciu.
Návratová hodnota:
názov konfiguračného súboru
nazovKonfiguracnehoSuboru
public static String nazovKonfiguracnehoSuboru()
 Alias pre názovKonfiguračnéhoSúboru.
predvolenáSekciaKonfigurácie
public static String predvolenáSekciaKonfigurácie()
Vráti názov predvolenej sekcie. (Pozri aj
 predvolenáSekciaKonfigurácie.)
 Prázdny reťazec označuje prvú bezmennú konfiguračnú pasáž.
Návratová hodnota:
názov predvolenej sekcie alebo prázdny reťazec
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
použiKonfiguráciu(String), 
použiKonfiguráciu(), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
predvolenaSekciaKonfiguracie
public static String predvolenaSekciaKonfiguracie()
 Alias pre predvolenáSekciaKonfigurácie.
predvolenáSekciaKonfigurácie
public static void predvolenáSekciaKonfigurácie(String názov)
Zmení názov predvolenej sekcie, ktorú používajú metódy automatickej
 konfigurácie.
Parametre:
názov – názov novej predvolenej sekcie
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
použiKonfiguráciu(String), 
použiKonfiguráciu(), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
predvolenaSekciaKonfiguracie
public static void predvolenaSekciaKonfiguracie(String názov)
 Alias pre predvolenáSekciaKonfigurácie.
použiKonfiguráciu
public static void použiKonfiguráciu(String názovSúboru,
                                     int x,
                                     int y,
                                     int šírka,
                                     int výška)
Zapne automatickú
 konfiguráciu, pričom umožní zadať počiatočnú polohu a rozmery
 okna. Parametre polohy a rozmerov okna opísané nižšie určujú
 predvolené hodnoty údajov – neskôr budú nahradené aktuálnymi
 hodnotami uloženými v konfigurácii. Súradnice x a y
 určujú, o koľko bodov je posunutý ľavý horný roh okna od ľavého
 horného rohu obrazovky (y-ová súradnica rastie smerom nadol).
 Viac informácií je v opise metódy použiKonfiguráciu(názovSúboru).
Parametre:
názovSúboru – názov konfiguračného súboru (.cfg)
x – predvolená (pozri vyššie) x-ová súradnica
     polohy okna
y – predvolená (pozri vyššie) y-ová súradnica
     polohy okna
šírka – predvolená (pozri vyššie) šírka okna
výška – predvolená (pozri vyššie) výška okna
Výnimky:
GRobotException – ak svet už bol inicializovaný
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(), 
predvolenáSekciaKonfigurácie(String), 
použiKonfiguráciu(int, int, int, int), 
použiKonfiguráciu(String), 
použiKonfiguráciu(), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
pouziKonfiguraciu
public static void pouziKonfiguraciu(String názovSúboru,
                                     int x,
                                     int y,
                                     int šírka,
                                     int výška)
 Alias pre použiKonfiguráciu.
použiKonfiguráciu
public static void použiKonfiguráciu(int x,
                                     int y,
                                     int šírka,
                                     int výška)
Zapne automatickú
 konfiguráciu, pričom umožní zadať počiatočnú polohu a rozmery
 okna. Metóda použije predvolené meno konfiguračného súboru "grobot.cfg". Parametre polohy a rozmerov okna opísané nižšie
 určujú predvolené hodnoty údajov – neskôr budú nahradené aktuálnymi
 hodnotami uloženými v konfigurácii. Súradnice x a y
 určujú, o koľko bodov je posunutý ľavý horný roh okna od ľavého
 horného rohu obrazovky (y-ová súradnica rastie smerom nadol).
 Viac informácií je v opise metódy použiKonfiguráciu().
Parametre:
x – predvolená (pozri vyššie) x-ová súradnica
     polohy okna
y – predvolená (pozri vyššie) y-ová súradnica
     polohy okna
šírka – predvolená (pozri vyššie) šírka okna
výška – predvolená (pozri vyššie) výška okna
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(), 
predvolenáSekciaKonfigurácie(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(String), 
použiKonfiguráciu(), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
pouziKonfiguraciu
public static void pouziKonfiguraciu(int x,
                                     int y,
                                     int šírka,
                                     int výška)
 Alias pre použiKonfiguráciu.
použiKonfiguráciu
public static void použiKonfiguráciu(String názovSúboru)
Zapne automatické spracovanie konfiguračného súboru sveta. Metóda
 musí byť volaná pred vytvorením hlavného robota, čiže ešte pred začatím inicializácie sveta
 (najlepšie v hlavnej metóde).
 
 V súčasnosti konfigurácia sveta zahŕňa polohu a rozmery hlavného
 okna (vrátane stavu minimalizovania/maximalizovania okna)
 a ukladanie vlastností registrovaných robotov. Meno konfiguračného súboru
 určuje parameter názovSúboru. Súbor nemusí jestvovať,
 v takom prípade bude vytvorený automaticky pri ukončení
 aplikácie.
 
 Príklad:
 
 
public static void main(String[] args)
{
    Svet.použiKonfiguráciu("grobot.cfg");
    // new …
}
 
 (Táto metóda použije predvolené hodnoty polohy [25, 25]
 a rozmerov 600 × 500 bodov.)
 
 Upozornenie: Upozorňujeme na to, že
 nie je bezpečné používať súbor so zadaným názvom na iné účely.
 Prosím, venujte pozornosť upozorneniu pri metóde zapíšVlastnosť!
Parametre:
názovSúboru – názov konfiguračného súboru (.cfg)
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(), 
predvolenáSekciaKonfigurácie(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
použiKonfiguráciu(), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
pouziKonfiguraciu
public static void pouziKonfiguraciu(String názovSúboru)
 Alias pre použiKonfiguráciu.
použiKonfiguráciu
public static void použiKonfiguráciu()
Zapne automatické spracovanie konfiguračného súboru sveta. Metóda
 musí byť volaná pred vytvorením hlavného robota, čiže ešte pred začatím inicializácie sveta
 (najlepšie v hlavnej metóde).
 
 V súčasnosti konfigurácia sveta zahŕňa polohu a rozmery hlavného
 okna (vrátane stavu minimalizovania/maximalizovania okna)
 a ukladanie vlastností registrovaných robotov. Metóda použije predvolené
 meno konfiguračného súboru "grobot.cfg". Súbor
 nemusí jestvovať, v takom prípade bude vytvorený automaticky
 pri ukončení aplikácie.
 
 Príklad:
 
 
public static void main(String[] args)
{
    Svet.použiKonfiguráciu();
    // new …
}
 
 (Táto metóda použije predvolené hodnoty polohy [25, 25]
 a rozmerov 600 × 500 bodov.)
 
 Upozornenie: Upozorňujeme na to, že
 nie je bezpečné používať súbor "grobot.cfg" na iné
 účely. Prosím, venujte pozornosť upozorneniu pri metóde zapíšVlastnosť!
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
predvolenáSekciaKonfigurácie(), 
predvolenáSekciaKonfigurácie(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
použiKonfiguráciu(String), 
registrujRobot(GRobot, String), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
pouziKonfiguraciu
public static void pouziKonfiguraciu()
 Alias pre použiKonfiguráciu.
overujPočiatočnúPolohuOkna
public static boolean overujPočiatočnúPolohuOkna()
Zistí aktuálny stav automatického overovania počiatočnej polohy
 okna po jeho inicializácii. Viac podrobností nájdete v opise metódy
 overujPočiatočnúPolohuOkna(overuj).
Návratová hodnota:
aktuálny stav overovania: true/false
Pozri tiež:
použiKonfiguráciu(), 
overujPočiatočnúPolohuOkna(boolean)
overujPočiatočnúPolohuOkna
public static void overujPočiatočnúPolohuOkna(boolean overuj)
Zmení stav automatického overovania počiatočnej polohy okna po
 jeho inicializácii. Z toho vyplýva, že tento stav (príznak) má
 zmysel meniť len pred inicializáciou okna sveta. Najlepšie pred
 použitím konfigurácie. Po
 inicializácii okna sveta už nie je poloha okna overovaná
 automaticky, ale dá sa vykonať týmto (alebo podobným) kódom:
 
 
if (Svet.zistiZariadenieOkna())
    Svet.premiestniNaZariadenie();
Parametre:
overuj – nový stav overovania: true/false
Pozri tiež:
použiKonfiguráciu(), 
overujPočiatočnúPolohuOkna(), 
overujPočiatočnúPolohuOkna(boolean)
overujPociatocnuPolohuOkna
public static boolean overujPociatocnuPolohuOkna()
 Alias pre overujPočiatočnúPolohuOkna.
overujPociatocnuPolohuOkna
public static void overujPociatocnuPolohuOkna(boolean overuj)
 Alias pre overujPočiatočnúPolohuOkna.
prvéSpustenie
public static boolean prvéSpustenie()
Účelom tejto metódy je overiť, či pred spustením aplikácie
 jestvoval konfiguračný súbor. Ak áno, nejde o prvé spustenie
 a metóda vráti hodnotu false. Ak nie, tak je toto
 spustenie považované za prvé a aplikácia si v tejto situácii
 môže nakonfigurovať niektoré vlastnosti alebo vykonať určité
 aktivity (napríklad zbaliť okno) bez obáv,
 že by táto činnosť zničila údaje prečítané z konfiguračného
 súboru.
Návratová hodnota:
true ak konfigurácia nejestvovala; false
     v opačnom prípade
prveSpustenie
public static boolean prveSpustenie()
 Alias pre prvéSpustenie.
registrujRobot
public static void registrujRobot()
Registruje hlavný robot
 v konfigurácii sveta.
 Rezervované meno pre hlavný robot je robot.
 Pozri aj informácie pri metóde registrujRobot(robot).
Parametre:
meno – meno robota
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
GRobot.uložDoSúboru(Súbor), 
GRobot.čítajZoSúboru(Súbor), 
Písmo.uložDoSúboru(Súbor), 
Písmo.čítajZoSúboru(Súbor), 
registrujRobot(String), 
registrujRobot(GRobot), 
registrujRobot(GRobot, String), 
použiKonfiguráciu(), 
použiKonfiguráciu(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
registrujRobota
public static void registrujRobota()
 Alias pre registrujRobot.
registrujRobot
public static void registrujRobot(String meno)
Registruje robot v konfigurácii podľa jeho (vopred priradeného)
 mena.
 Ak nejestvuje žiadny robot so zadaným menom, tak vznikne výnimka.
 Pozri aj informácie pri metóde registrujRobot(robot).
Parametre:
meno – meno robota
Výnimky:
GRobotException – ak robot so zadaným menom nejestvuje
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
GRobot.uložDoSúboru(Súbor), 
GRobot.čítajZoSúboru(Súbor), 
Písmo.uložDoSúboru(Súbor), 
Písmo.čítajZoSúboru(Súbor), 
registrujRobot(), 
registrujRobot(GRobot), 
registrujRobot(GRobot, String), 
použiKonfiguráciu(), 
použiKonfiguráciu(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
registrujRobota
public static void registrujRobota(String meno)
 Alias pre registrujRobot.
registrujRobot
public static void registrujRobot(GRobot robot)
Registruje robot v konfigurácii. Registrácia je vykonaná podľa jeho
 mena. To znamená, že údaje
 o robote (poloha, smer, veľkosť, farba pera a tak ďalej) budú
 automaticky ukladané do a čítané z konfiguračného súboru.
 Ak robot nie je pomenovaný a nejde o hlavný robot, tak vznikne výnimka.
 
 Pred registráciou je vhodné vypnúť automatické prekresľovanie a po dokončení registrácie ho opätovne
 zapnúť. I tak nemusí byť garantovaná bezproblémová aktualizácia
 obrazovky, preto je vhodné vykonať registráciu podľa nasledujúcej
 schémy:
 
 
import knižnica.*;
public class UkážkaKonfigurácie extends GRobot
{
    private UkážkaKonfigurácie()
    {
        // Inicializácia
        // ...
        Svet.registrujRobot(this);
        // Prípadne sa dá použiť aj verzia metódy
        // bez argumentu: Svet.registrujRobot();
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu();
        Svet.nekresli();
        new UkážkaKonfigurácie();
        Svet.kresli();
    }
}
 
 Poznámka: Čítanie údajov o robote je
 vykonané pri spustení tohto príkazu a zápis je vykonaný automaticky
 pri ukončení aplikácie. V prípade kombinácie registrácie robota
 s vlastnou konfiguráciou (pozri príklad TestKonfigurácie
 v triede ObsluhaUdalostí) je vhodné tieto
 fakty zvážiť.
Parametre:
robot – robot, ktorý má byť zaregistrovaný
Výnimky:
GRobotException – ak zadaný robot nemá definované meno
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
GRobot.uložDoSúboru(Súbor), 
GRobot.čítajZoSúboru(Súbor), 
Písmo.uložDoSúboru(Súbor), 
Písmo.čítajZoSúboru(Súbor), 
GRobot.registrujVKonfigurácii(), 
GRobot.registrujVKonfigurácii(String), 
GRobot.jeRegistrovaný(), 
registrujRobot(), 
registrujRobot(String), 
registrujRobot(GRobot, String), 
dajRobot(String), 
použiKonfiguráciu(), 
použiKonfiguráciu(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
čítajKonfiguráciuSveta(), 
overujPočiatočnúPolohuOkna()
registrujRobota
public static void registrujRobota(GRobot robot)
 Alias pre registrujRobot.
registrujRobot
public static void registrujRobot(GRobot robot,
                                  String meno)
Registruje robot v konfigurácii podľa zadaného mena.
 Pozri aj informácie pri metóde registrujRobot(robot).
Parametre:
meno – meno robota
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
GRobot.uložDoSúboru(Súbor), 
GRobot.čítajZoSúboru(Súbor), 
registrujRobot(), 
registrujRobot(String), 
registrujRobot(GRobot), 
dajRobot(String), 
použiKonfiguráciu(), 
použiKonfiguráciu(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
overujPočiatočnúPolohuOkna()
registrujRobota
public static void registrujRobota(GRobot robot,
                                   String meno)
 Alias pre registrujRobot.
dajRobot
public static GRobot dajRobot(String menoRobota)
Vráti inštanciu robota podľa jeho mena. Pomenovanie robotov
 je nepovinné a dá sa vykonať rôznymi spôsobmi. Napríklad pri
 registrácii
 robota v konfigurácii
 sveta alebo priamo jeho pomenovaním.
 
 Hodnota parametra null vráti hlavný robot bez ohľadu na jeho aktuálne meno.
 V prípade, že hlavný robot nemá priradené špeciálne meno, je
 táto hodnota ekvivalentá hodnote "robot", ktorá vráti
 hlavný robot len v prípade, že nemá špeciálne pomenovanie.
Parametre:
meno – meno robota, ktorého inštanciu chceme vrátiť alebo
     null
Návratová hodnota:
inštancia robota so zadaným menom alebo null,
     ak taký robot nejestvuje
Pozri tiež:
GRobot.meno(String), 
registrujRobot(GRobot, String)
dajRobota
public static GRobot dajRobota(String menoRobota)
 Alias pre dajRobot.
čítajKonfiguráciuSveta
public static void čítajKonfiguráciuSveta()
Prečíta konfiguráciu
 sveta (a plátien). Konfigurácia sveta ukladá viaceré informácie,
 napríklad: farbu
 pozadia, písma
 podlahy a stropu, hodnotu časovača,
 aktiváciu interaktívneho
 režimu a podobne. Spustenie tejto metódy spôsobí automatické
 uloženie údajov o svete (a plátnach) do konfigurácie pri
 (korektnom) ukončení aplikácie.
 
 Vhodné je použiť nasledujúcu schému:
 
 
import knižnica.*;
public class UkážkaKonfigurácie extends GRobot
{
    private UkážkaKonfigurácie()
    {
        // Inicializácia
        // ...
        Svet.registrujRobot(this, "robot");
        Svet.čítajKonfiguráciuSveta();
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu();
        Svet.nekresli();
        new UkážkaKonfigurácie();
        Svet.kresli();
    }
}
Parametre:
meno – meno robota
Pozri tiež:
ObsluhaUdalostí.konfiguráciaZmenená(), 
GRobot.uložDoSúboru(Súbor), 
GRobot.čítajZoSúboru(Súbor), 
Písmo.uložDoSúboru(Súbor), 
Písmo.čítajZoSúboru(Súbor), 
registrujRobot(), 
registrujRobot(String), 
registrujRobot(GRobot), 
registrujRobot(GRobot, String), 
dajRobot(String), 
použiKonfiguráciu(), 
použiKonfiguráciu(String), 
použiKonfiguráciu(String, int, int, int, int), 
použiKonfiguráciu(int, int, int, int), 
overujPočiatočnúPolohuOkna()
citajKonfiguraciuSveta
public static void citajKonfiguraciuSveta()
 Alias pre čítajKonfiguráciuSveta.
prečítajKonfiguráciuSveta
public static void prečítajKonfiguráciuSveta()
 Alias pre čítajKonfiguráciuSveta.
precitajKonfiguraciuSveta
public static void precitajKonfiguraciuSveta()
 Alias pre čítajKonfiguráciuSveta.
vykonaťNeskôr
public static void vykonaťNeskôr(Runnable vykonať)
Táto metóda slúži na zadanie príkazov Javy, ktoré majú byť
 vykonané „neskôr“ – asynchrónne vzhľadom na reťaz čakajúcich
 správ (udalostí) aktívneho vlákna. To znamená, že zadané príkazy
 budú vykonané v čase, kedy je zásobník správ (to jest udalostí)
 aktívneho vlákna prázdny.
 
 Príklad:
 
 
// Výpis veľkého množstva textov – na niekoľko strán…
Svet.čakaj(0.05);
Svet.vykonaťNeskôr(() -&gt;
    strop.posunutieTextovY(
        strop.poslednáVýškaTextu()));
 
 Príkazy v príklade sú vykonané nielen s päťdesiatmilisekundovým
 oneskorením (spôsobeným príkazom čakaj), ale aj až po vykonaní spracovania všetkých čakajúcich
 udalostí, čo by v tomto prípade mala byť prinajmenšom udalosť
 prekreslenia sveta, ktorá vznikla ako dôsledok výpisu textov
 (ktoré nie sú v tomto príklade uvedené).
Parametre:
vykonať – inštancia Runnable alebo
     funkcionálny blok príkazov Javy na vykonanie
vykonatNeskor
public static void vykonatNeskor(Runnable vykonať)
 Alias pre vykonaťNeskôr.
vykonaťNeskôr
public static void vykonaťNeskôr(Runnable vykonať,
                                 boolean samostatnéVlákno)
Táto metóda slúži na zadanie príkazov Javy, ktoré majú byť
 vykonané „neskôr“ – pozri opis metódy vykonaťNeskôr(vykonať). Toto je verzia
 metódy, ktorá umožňuje určiť, či má byť vytvorené samostatné
 vlákno, ktoré bude vykonávať blok zadaných príkazov.
Parametre:
vykonať – inštancia Runnable alebo
     funkcionálny blok príkazov Javy na vykonanie
samostatnéVlákno – určuje, či má byť spustené samostatné
     vlákno vykonávajúce zadané príkazy
vykonatNeskor
public static void vykonatNeskor(Runnable vykonať,
                                 boolean samostatnéVlákno)
 Alias pre vykonaťNeskôr.
nespi
public static void nespi()
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku. Táto verzia automaticky spustí časovač a zachová pôvodný
 (prípadne predvolený) interval generovania udalostí.
 Viac podrobností nájdete v opise nasledujúcej verzie metódy:
 nespi(novýInterval,
 ajČasovač).
Pozri tiež:
nespi(int), 
nespi(int, boolean), 
spi()
nespi
public static void nespi(int novýInterval)
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku. Táto verzia automaticky spustí časovač.
 Viac podrobností nájdete v opise nasledujúcej verzie metódy:
 nespi(novýInterval,
 ajČasovač).
Parametre:
novýInterval – celé číslo určujúce počet tikov časovača, po uplynutí ktorých
     sa budú generovať nové udalosti pohybu kurzora myši; nulová
     alebo záporná hodnota zastaví generovanie
Pozri tiež:
nespi(), 
nespi(int, boolean), 
spi()
nespi
public static void nespi(int novýInterval,
                         boolean ajČasovač)
Spustí aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, aby sa zabránilo prechodu počítača do režimu
 spánku.
 Toto je dôležité najmä pri aplikáciách, ktoré niečo samostatne
 prezentujú. Bez tejto možnosti by po určitom čase počítač mohol
 „zaspať“ (a prezentovanie by stratilo efekt).
 
 Udalosti, ktoré budú generované sú systémom považované za
 reálne udalosti, ktoré spôsobil používateľ. Keďže virtuálny
 stroj Javy nemá priamy prístup k nastaveniam súvisiacim so
 správou a šetrením energie, toto je jediná možnosť ako túto
 záležitosť ovplyvniť.
Parametre:
novýInterval – celé číslo určujúce počet tikov časovača, po uplynutí ktorých
     sa budú generovať nové udalosti pohybu kurzora myši; nulová
     alebo záporná hodnota zastaví generovanie
ajČasovač – ak je true, tak je automaticky
     spustený časovač
     (v prípade, že je nečinný); bez spusteného časovača nebude
     táto aktivita fungovať – dôvodom na použitie hodnoty false môže byť spustenie v prípravnej fáze aplikácie
     s tým, že časovač bude spustený neskôr, keď bude aplikácie
     korektne inicializovaná (pripravená na činnosť)
Pozri tiež:
nespi(), 
nespi(int), 
spi()
spi
public static void spi()
Zastaví aktivitu pravidelného generovania udalostí pohybu
 kurzorom myšky, ktorá slúžila na to, aby sa zabránilo prechodu
 počítača do režimu spánku.
Pozri tiež:
nespi(), 
nespi(int), 
nespi(int, boolean)
otvorWebovýOdkaz
public static boolean otvorWebovýOdkaz(String uri)
Pokúsi sa použiť zadaný textový reťazec ako webovú adresu
 a otvoriť ju v predvolenom prehliadači operačného systému.
Parametre:
uri – reťazec s webovou adresou, ktorá má byť otvorená
     v predvolenom prehliadači OS
Návratová hodnota:
true ak metóda uspela, false
     v opačnom prípade
otvorWebovyOdkaz
public static boolean otvorWebovyOdkaz(String uri)
 Alias pre otvorWebovýOdkaz.
pošliEmail
public static boolean pošliEmail(String... údajeSprávy)
Otvorí okno na napísanie novej správy elektronickej pošty
 predvoleného e-mailového klienta OS.
 
 Voliteľné parametre údajeSprávy môžu byť vynechané
 alebo môže byť zadaný nepárny počet prvkov. V tom prípade je
 prvý prvok adresa primárneho adresáta a zvyšné dvojice
 parametrov určujú ďalšie údaje správy. Prvý z páru je názov
 údaja a druhý jeho hodnota. Metóda podporuje tieto názvy:
 
 
 "komu" alebo "to" – adresa ďalšieho
 primárneho adresáta
 "kópia" alebo "cc" – adresa adresáta
 v kópii
 "skrytá", "skrytá kópia" alebo
 "bcc" – adresa adresáta v skrytej kópii
 "predmet" alebo "subject" – predmet
 správy
 "telo", "telo správy" alebo
 "body" – telo správy
 
Parametre:
údajeSprávy – údaje súvisiace s novou správou (pozri vyššie)
Návratová hodnota:
true ak metóda uspela, false
     v opačnom prípade
Pozri tiež:
otvorWebovýOdkaz(String), 
vytlač(String), 
otvorVPredvolenejAplikácii(String), 
otvorVPredvolenejAplikácii(String, boolean)
posliEmail
public static boolean posliEmail(String... údajeSprávy)
 Alias pre pošliEmail.
vytlač
public static boolean vytlač(String súbor)
Ak je pre zadaný súbor asociovaný príkaz na tlač dokumentu,
 tak otvorí prislúchajúci tlačový dialóg operačného systému,
 s pomocou ktorého bude možné súbor (dokument) vytlačiť.
Parametre:
súbor – súbor (dokument), ktorý má byť vytlačený podľa
     predvoleného nastavenia OS
Návratová hodnota:
true ak metóda uspela, false
     v opačnom prípade
vytlac
public static boolean vytlac(String súbor)
 Alias pre vytlač.
otvor
public static boolean otvor(String súbor)
Pokúsi sa otvoriť zadaný súbor v predvolenej aplikácii podľa
 nastavení operačného systému.
Parametre:
súbor – súbor (dokument), ktorý má byť otvorený v predvolenej
     aplikácie (podľa nastavení OS)
Návratová hodnota:
true ak metóda uspela, false
     v opačnom prípade
otvorVPredvolenejAplikácii
public static boolean otvorVPredvolenejAplikácii(String súbor)
 Alias pre otvorVPredvolenejAplikácii.
otvorVPredvolenejAplikacii
public static boolean otvorVPredvolenejAplikacii(String súbor)
 Alias pre otvorVPredvolenejAplikácii.
otvor
public static boolean otvor(String súbor,
                            boolean naÚpravu)
Pokúsi sa otvoriť (spustiť) alebo otvoriť na úpravy zadaný
 súbor v predvolenej aplikácii podľa nastavení operačného
 systému. Spôsob otvorenia určuje druhý parameter:
 naÚpravu. Ak je false, tak sa metóda správa
 rovnako ako jej verzia bez tohto parametra (otvor), čiže pokúsi sa súbor (dokument) otvoriť v zmysle jeho
 spustenia (čo nadobúda lepší význam napríklad v prípade skriptov).
 Ak sa hodnota parametra rovná true, tak sa metóda
 pokúsi zadaný súbor (dokument) otvoriť v predvolenom editore.
 (Ak tento nie je definovaný, tak je pravdepodobné, že operačný
 systém súbor otvorí/spustí rovnakým spôsobom ako v prvom
 prípade.)
 
 Príklad:
 
 Porovnajte nasledujúce dva príkazy:
 
 
Svet.otvor("uprav.bat");
Svet.otvor("uprav.bat", true);
 
 Obidva sa pokúšajú „otvoriť“ naledujúci skript (uložený v súbore
 uprav.bat s kódovaním UTF-8), ale každá iným spôsobom:
 
 
Parametre:
súbor – súbor (dokument), ktorý má byť otvorený v predvolenej
     aplikácie (podľa nastavení OS)
naÚpravu – ak je true, tak sa metóda pokúsi
     otvoriť zadaný súbor (dokument) v predvolenom editore (ak je
     definovaný); ak je false, tak sa metóda správa
     rovnako ako jej verzia bez tohto parametra (otvor)
Návratová hodnota:
true ak metóda uspela, false
     v opačnom prípade
Pozri tiež:
otvorWebovýOdkaz(String), 
pošliEmail(String...), 
vytlač(String), 
otvor(String), 
otvor(String, boolean)
otvorVPredvolenejAplikácii
public static boolean otvorVPredvolenejAplikácii(String súbor,
                                                 boolean naÚpravu)
 Alias pre otvorVPredvolenejAplikácii.
otvorVPredvolenejAplikacii
public static boolean otvorVPredvolenejAplikacii(String súbor,
                                                 boolean naÚpravu)
 Alias pre otvorVPredvolenejAplikácii.
spracujPríkaz
public static void spracujPríkaz(String príkaz)
Spracuje jeden príkaz príkazového riadka. Táto metóda je
 jednoduchou implementáciou príkazového riadka operačného systému
 s úzkou množinou vnútorných príkazov vymenovaných nižšie. Metóda
 používa funkcie implementované v statickej inštancii príkazovýRiadok (pozri triedu PríkazovýRiadok). Napríklad metódu execute na spustenie
 externého procesu. Štandardný výstup procesov
 je presmerovaný na vnútornú konzolu sveta (stropu – pozri
 napríklad metódu vypíšRiadok).
 
 Vnútorne spracúvané príkazy (neposielané do OS):
 
 
 CD/CHDIR – zmení vnútorné
 nastavenie aktuálnej cesty, v ktorej má byť spustený nasledujúci
 proces. (Doplňujúce informácie v anglickom jazyku sú v opise
 metódy 
ExecuteShellCommand.changePath(String).)
 CLS – vymaže obsah vnútornej konzoly sveta
 (stropu).
 ECHO – vypíše zadané argumenty na vnútornú
 konzolu sveta (stropu). Obsahy premenných prostredia sú
 rozvinuté.
 CHCP – zmení kódovanie inštancie príkazového
 riadka alebo konfiguruje vnútornú mapu kódovaní príkazov
 podrobnosti v anglickom jazyku sú v opise metódy 
ExecuteShellCommand.changeEncoding(String).
 MAPCMD – upraví alebo overí mapovanie zadaného
 príkazu, prípadne vypíše zoznam všetkých mapovaní. (Doplňujúce
 informácie v anglickom jazyku sú v opise metódy 
ExecuteShellCommand.mapCommand(String).)
 PROMPT – zmení definíciu náveste príkazového
 riadka. (Použitie náveste je nepovinné. Doplňujúce informácie
 v anglickom jazyku sú v opise metódy 
ExecuteShellCommand.setPrompt(String).)
 SET – nastaví, vymaže, vypíše zoznam premenných
 prostredia príkazového riadka alebo si vyžiada doplňujúci vstup.
 Príkaz dokáže vyhodnocovať výrazy (Doplňujúce informácie
 v anglickom jazyku sú v opise metódy 
ExecuteShellCommand.setVariable(String).)
 TITLE – upraví definíciu titulku okna konzoly,
 ktorá sa automaticky prenesie do titulku okna sveta. (Doplňujúce
 informácie v anglickom jazyku sú v opise metódy 
ExecuteShellCommand.setTitle(String).)
 
 PAUSE, EXIT – tieto dva príkazy sú vypnuté.
 Metóda ich rozpoznáva, pretože sú relatívne bežné a aby neboli
 omylom poslané operačnému systému ako žiadosť o spustenie
 procesu, ktorá by sa skončila s chybou.
 
Parametre:
príkaz – reťazec obsahujúci jediný príkaz príkazového riadka
     na vykonanie
spracujPrikaz
public static void spracujPrikaz(String príkaz)
 Alias pre spracujPríkaz.
zadajReťazec
public static String zadajReťazec(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov.
 
 Príklad:
 
 
String meno = Svet.zadajReťazec("Zadaj svoje meno:");
if (meno != null)
{
    if (meno.equals(""))
    // Prípadne lepšie: if (!meno.isEmpty())
    {
        Svet.správa("Nezadal si svoje meno…");
    }
    else
    {
        Svet.správa("Vitaj, " + meno + "!");
    }
}
else
{
    Svet.správa("Zrušil si zadanie svojho mena…");
}
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (Windows).
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (macOS).
 
Parametre:
výzva – text výzvy
Návratová hodnota:
objekt String s textom, ktorý
     zadal používateľ, alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravReťazec(String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
zadajRetazec
public static String zadajRetazec(String výzva)
 Alias pre zadajReťazec.
zadajReťazec
public static String zadajReťazec(String výzva,
                                  String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov.
Parametre:
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt String s textom, ktorý
     zadal používateľ, alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
zadajReťazec(String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravReťazec(String, String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
zadajRetazec
public static String zadajRetazec(String výzva,
                                  String titulok)
 Alias pre zadajReťazec.
zadajHeslo
public static String zadajHeslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie hesla.
 
 Poznámka: Táto metóda je určená na tvorbu
 príkladov na vzdelávacie účely. Riadi sa princípom jednoduchosti.
 Vyššiu bezpečnosť pri zadávaní hesla poskytuje metóda
 dialóg(popisy,
 údaje, titulok) a jej klony.
Parametre:
výzva – text výzvy
Návratová hodnota:
objekt String s heslom, ktoré
     zadal používateľ, alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
zadajHeslo
public static String zadajHeslo(String výzva,
                                String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie hesla.
 
 Poznámka: Táto metóda je určená na tvorbu
 príkladov na vzdelávacie účely. Riadi sa princípom jednoduchosti.
 Vyššiu bezpečnosť pri zadávaní hesla poskytuje metóda
 dialóg(popisy,
 údaje, titulok) a jej klony.
Parametre:
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt String s heslom, ktoré
     zadal používateľ, alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
zadajCeléČíslo
public static Long zadajCeléČíslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je celočíselný údaj). Pozri príklad pri
 zadajCeléČíslo.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
výzva – text výzvy
Návratová hodnota:
objekt Long s celočíselnou hodnotou, ktorú zadal
     používateľ, alebo null ak používateľ dialóg zrušil
     alebo zadal reťazec, ktorý nebolo možné previesť na celé
     číslo
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravCeléČíslo(long, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String), 
formát
zadajCeleCislo
public static Long zadajCeleCislo(String výzva)
 Alias pre zadajCeléČíslo.
zadajCeléČíslo
public static Long zadajCeléČíslo(String výzva,
                                  String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je celočíselný údaj).
 
 Príklad:
 
 
 
Long l = Svet.zadajCeléČíslo("Počet:", "Zadaj celé číslo");
if (l != null)
{
    int i = l.intValue();
    Svet.správa("Zadané: " + F(i, 0));
}
else
    Svet.správa("Vstup bol zrušený alebo nesprávny.");
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (Windows).
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (macOS).
 
Parametre:
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt Long s celočíselnou hodnotou, ktorú zadal
     používateľ, alebo null ak používateľ dialóg zrušil
     alebo zadal reťazec, ktorý nebolo možné previesť na celé
     číslo
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravCeléČíslo(long, String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String), 
formát
zadajCeleCislo
public static Long zadajCeleCislo(String výzva,
                                  String titulok)
 Alias pre zadajCeléČíslo.
zadajReálneČíslo
public static Double zadajReálneČíslo(String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je číselný údaj). Pozri príklad pri
 zadajReálneČíslo.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
výzva – text výzvy
Návratová hodnota:
objekt Double s celočíselnou
     hodnotou, ktorú zadal používateľ, alebo null ak
     používateľ dialóg zrušil alebo zadal reťazec, ktorý
     nebolo možné previesť na reálne číslo
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String, String), 
upravReálneČíslo(double, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String), 
formát
zadajRealneCislo
public static Double zadajRealneCislo(String výzva)
 Alias pre zadajReálneČíslo.
zadajReálneČíslo
public static Double zadajReálneČíslo(String výzva,
                                      String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 zadanie údajov (očakávaný je číselný údaj).
 
 Príklad:
 
 
 
Double d = Svet.zadajReálneČíslo("Hodnota:", "Zadaj reálne číslo");
if (d != null)
{
    double a = d.doubleValue();
    Svet.správa("Zadané: " + F(a, 2));
}
else
    Svet.správa("Vstup bol zrušený alebo nesprávny.");
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (Windows).
 
 
 
 
 Ukážky možného vzhľadu dialógov
 zobrazenýchpočas vykonávania tohto príkladu (macOS).
 
Parametre:
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt Double s celočíselnou
     hodnotou, ktorú zadal používateľ, alebo null ak
     používateľ dialóg zrušil alebo zadal reťazec, ktorý
     nebolo možné previesť na reálne číslo
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
upravReálneČíslo(double, String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String), 
formát
zadajRealneCislo
public static Double zadajRealneCislo(String výzva,
                                      String titulok)
 Alias pre zadajReálneČíslo.
upravReťazec
public static String upravReťazec(String reťazec,
                                  String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov. Funguje podobne ako metóda zadajReťazec, ibaže vyžaduje zadanie
 reťazca určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
reťazec – reťazec určený na úpravu
výzva – text výzvy
Návratová hodnota:
objekt String s textom, ktorý
     používateľ upravil alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
upravReťazec(String, String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
zadajReťazec(String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
upravRetazec
public static String upravRetazec(String reťazec,
                                  String výzva)
 Alias pre upravReťazec.
upravReťazec
public static String upravReťazec(String reťazec,
                                  String výzva,
                                  String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov. Funguje podobne ako metóda zadajReťazec, ibaže vyžaduje
 zadanie reťazca určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
reťazec – reťazec určený na úpravu
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt String s textom, ktorý
     používateľ upravil alebo null ak používateľ dialóg
     zrušil
Pozri tiež:
upravReťazec(String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
zadajReťazec(String, String), 
dialóg(String[], Object[]), 
dialóg(String[], Object[], String)
upravRetazec
public static String upravRetazec(String reťazec,
                                  String výzva,
                                  String titulok)
 Alias pre upravReťazec.
upravCeléČíslo
public static Long upravCeléČíslo(long celéČíslo,
                                  String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je celočíselný údaj). Funguje podobne ako
 metóda zadajCeléČíslo, ibaže
 vyžaduje zadanie celého čísla určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
celéČíslo – celé číslo určené na úpravu
výzva – text výzvy
Návratová hodnota:
objekt Long s celočíselnou hodnotou, ktorú
     používateľ upravil, alebo null ak používateľ dialóg
     zrušil alebo zadal reťazec, ktorý nebolo možné previesť na
     celé číslo
Pozri tiež:
upravReťazec(String, String), 
upravReťazec(String, String, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
zadajCeléČíslo(String), 
formát
upravCeleCislo
public static Long upravCeleCislo(long celéČíslo,
                                  String výzva)
 Alias pre upravCeléČíslo.
upravCeléČíslo
public static Long upravCeléČíslo(long celéČíslo,
                                  String výzva,
                                  String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je celočíselný údaj). Funguje podobne ako
 metóda zadajCeléČíslo,
 ibaže vyžaduje zadanie celého čísla určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
celéČíslo – celé číslo určené na úpravu
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt Long s celočíselnou hodnotou, ktorú
     používateľ upravil, alebo null ak používateľ dialóg
     zrušil alebo zadal reťazec, ktorý nebolo možné previesť na
     celé číslo
Pozri tiež:
upravReťazec(String, String), 
upravReťazec(String, String, String), 
upravCeléČíslo(long, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
zadajCeléČíslo(String, String), 
formát
upravCeleCislo
public static Long upravCeleCislo(long celéČíslo,
                                  String výzva,
                                  String titulok)
 Alias pre upravCeléČíslo.
upravReálneČíslo
public static Double upravReálneČíslo(double reálneČíslo,
                                      String výzva)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je číselný údaj). Funguje podobne ako
 metóda zadajReálneČíslo,
 ibaže vyžaduje zadanie reálneho čísla určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
reálneČíslo – reálne číslo určené na úpravu
výzva – text výzvy
Návratová hodnota:
objekt Double s celočíselnou
     hodnotou, ktorú používateľ upravil, alebo null ak
     používateľ dialóg zrušil alebo zadal reťazec, ktorý
     nebolo možné previesť na reálne číslo
Pozri tiež:
upravReťazec(String, String), 
upravReťazec(String, String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String, String), 
zadajReálneČíslo(String), 
formát
upravRealneCislo
public static Double upravRealneCislo(double reálneČíslo,
                                      String výzva)
 Alias pre upravReálneČíslo.
upravReálneČíslo
public static Double upravReálneČíslo(double reálneČíslo,
                                      String výzva,
                                      String titulok)
Otvorí štandardný dialóg so zadanou výzvou a zadávacím poľom na
 úpravu údajov (očakávaný je číselný údaj). Funguje podobne ako
 metóda zadajReálneČíslo, ibaže vyžaduje zadanie reálneho čísla
 určeného na úpravu.
 
 
 
 Ukážka dialógu (Windows).
 
Ukážka dialógu (macOS).
 
Parametre:
reálneČíslo – reálne číslo určené na úpravu
výzva – text výzvy
titulok – text titulku dialógového okna
Návratová hodnota:
objekt Double s celočíselnou
     hodnotou, ktorú používateľ upravil, alebo null ak
     používateľ dialóg zrušil alebo zadal reťazec, ktorý
     nebolo možné previesť na reálne číslo
Pozri tiež:
upravReťazec(String, String), 
upravReťazec(String, String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
zadajReálneČíslo(String, String), 
formát
upravRealneCislo
public static Double upravRealneCislo(double reálneČíslo,
                                      String výzva,
                                      String titulok)
 Alias pre upravReálneČíslo.
dialóg
public static boolean dialóg(String[] popisy,
                             Object[] údaje)
Otvorí prispôsobiteľný dialóg s prvkami vytvorenými podľa poľa
 údaje. Táto metóda funguje rovnako ako metóda
 dialóg(popisy,
 údaje, titulok), ale namiesto zadaného titulku dialógu je
 zobrazený predvolený text ("Dialóg"). Dalšie
 podrobnosti a príklad použitia nájdete v opise uvedenej metódy.
Parametre:
popisy – pole popisov komponentov
údaje – pole hodnôt komponentov, ktoré zároveň určuje typ
     komponentu
Návratová hodnota:
true znamená, že používateľ dialóg potvrdil
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravReťazec(String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
dialóg(String[], Object[], String)
dialog
public static boolean dialog(String[] popisy,
                             Object[] údaje)
 Alias pre dialóg.
dialóg
public static boolean dialóg(String[] popisy,
                             Object[] údaje,
                             String titulok)
Vytvorí a otvorí prispôsobiteľný dialóg s prvkami vytvorenými
 podľa obsahu poľa údaje. Metóda akceptuje v poli prvkov
 údaje osem údajových typov (resp. v poslednom prípade
 špeciálnu hodnotu null) prvkov tohto poľa:
 
 
 hodnota údajového typu String, ktorá
 spôsobí, že na určenej pozícii v dialógu sa bude nachádzať
 textové vstupné pole s predvolenou zadanou hodnotou (môže to byť
 aj prázdny reťazec "", ale údajový typ musí byť
 String),
 
 hodnota údajového typu Double, ktorá
 spôsobí, že na určenej pozícii v dialógu sa bude nachádzať
 textové vstupné pole s predvolenou zadanou číselnou hodnotou;
 funguje podobne ako typ String, ale výsledok je
 automaticky prevedený na reálne číslo metódou reťazecNaReálneČíslo; ak pri
 prevode nastane chyba, v objekte bude uložená hodnota
 Double.NaN,
 
 hodnota údajového typu Boolean, ktorá
 spôsobí, že na určenej pozícii v dialógu sa bude nachádzať
 prvok začiarkavacieho políčka s predvolenou zadanou hodnotou,
 
 hodnota údajového typu Farba (čo je trieda
 programovacieho rámca GRobot), ktorá spôsobí, že na určenej pozícii
 dialógu bude zobrazený panel na výber farby s predvolenou zadanou
 farbou, pričom zmenu môže používateľ vykonať výberom z paletoy
 predvolených farieb programovacieho rámca alebo prostredníctvom
 preddefinovaného dialógu Javy, ktorý je dostupný cez prislúchajúce
 tlačidlo,
 
 hodnota údajového typu Bod (čo je trieda
 programovacieho rámca GRobot), ktorá spôsobí, že na určenej pozícii
 dialógu bude zobrazený panel na grafickú voľbu polohy s predvolenou
 polohou podľa hodnôt v inštancii Bod a s možnosťou
 zadania súradníc do vstupných polí,
 
 hodnota údajového typu Uhol (čo je trieda
 programovacieho rámca GRobot), ktorá spôsobí, že na určenej pozícii
 dialógu bude zobrazený panel na grafickú voľbu uhla (smeru)
 s predvolenou hodnotou podľa zadanej inštancie Uhol
 a s možnosťou zadania (zmeny) uhla prostredníctvom vstupného
 poľa,
 
 hodnota inštancie údajového typu Enum – čiže
 prvok enumeračného údajového typu; ktorý spôsobí, že na určenej
 pozícii dialógu bude zobrazený panel so zoznamom rádiových
 tlačidiel vytvorený podľa všetkých položiek dotknutého údajového
 typu, pričom zadaná hodnota bude použitá na určenie aktuálne
 zvoleného rádiového tlačidla (aktuálne zvolenej hodnoty v rámci
 skupiny týchto tlačidiel),
 
 
 
 inštancia netriedeného zoznamu Javy (Vector,
 resp. odvodeného, napr. Zoznam), ktorá spôsobí, že
 na určenej pozícii bude zobrazený zoznam položiek vytvorený
 z objektov zoznamu (okrem prvej položky) prevedených na reťazce;
 výnimku tvorí typový zoznam objektov Image (resp.
 odvodených, napr. Obrázok; opäť, okrem prvej
 položky), ktorý spôsobí zobrazenie obrázkového zoznamu; pozor,
 prvá položka zoznamu je rezervovaná na zadanie a prevzatie voľby
 zoznamu; táto položka je pri tvorbe zoznamu použitá na výber
 predvolenej položky zoznamu spomedzi ostatných položiek a po
 návrate je zmenená podľa voľby používateľa, čiže jej hodnota
 (ktorá je zmenená/nahradená aj v pôvodnom zozname) určuje
 používateľom zvolenú položku (hodnota null znamená,
 že používateľ nezvolil žiadnu položku alebo výber zrušil),
 
 inštancia tably rolovania JScrollPane, ktorá je
 (prirodzene, že spolu s jej obsahom) do dialógu iba vložená; nie
 je nijako dodatočne spracovaná a je ponechaná na svojom mieste
 aj vo vrátených údajoch; programátor môže na tomto mieste s výhodou
 využiť pripravenú triedu podpora.ScrollTextPane,
 ktorá obsahuje niečo ako „odľahčenú verziu“ triedy PoznámkovýBlok (pretože poznámkový blok by
 v dialógu nebol použiteľný z dôvodu jeho úzkej viazanosti na
 komponent sveta),
 
 hodnota údajového typu Character,
 ktorá má špeciálny význam – je rezervovaná na vkladanie riadiacich
 znakov – v súčasnosti je platná len hodnota znaku nového riadka
 ('\n' – odporúčame použiť znakovú konštantu riadok), ktorá prepne dialóg zo stĺpcového do
 riadkového režimu a všetky komponenty dialógu (zodpovedajúce
 jednotlivým prvkom vstupného poľa – zdrojovým prvkom),
 ktorých zdrojové prvky sú umiestnené medzi prvkami nového riadka
 (to znamená, že každý nový riadok musí byť samostatným
 prvkom vstupného poľa údaje), budú umiestnené na
 samostatnom neviditeľnom paneli dialógu – akoby v jednom
 riadku
 
 a hodnotu null, ktorá spôsobí, že na určenej
 pozícii bude umiestnený vstupný prvok na zadanie hesla.
 
 
 
 
 Ku každému prvku poľa údaje musí byť zadaný
 korešpondujúci prvok poľa popisy, ktorý určí popis
 komponentu. Výnimku tvoria znaky nových riadkov (bod 9.
 vyššie),
 ktoré nesmú mať zadaný korešpondujúci reťazec – pri ňom treba zadať
 namiesto platného reťazca hodnotu null, pretože platný
 reťazec by sa automaticky priradil k ďalšiemu komponentu v dialógu,
 čím by sa významovo posunul na nesprávne miesto a to by sa reťazovo
 premietlo do celého dialógu.
 
 Posledný argument metódy – reťazec titulok určí titulok
 dialógu.
 
 Pravdivá návratová hodnota vypovedá o tom, že používateľ
 dialóg skutočne potvrdil. (Texy tlačidiel dialógu je možné
 upraviť metódou textTlačidla.)
 
 Príklad:
 
 
// Predpokladajme, že v premenných „meno“ a „heslo“ sú prihlasovacie
// údaje, pričom heslo môže byť zašifrované alebo zahešované…
String meno = "Mundos";
char[] heslo = {'a', 'b', 'c', 'd'};
// Pripravíme si pole údajov, s ktorými budeme pracovať:
Object[] údaje = {"", null, false};
// Tento príznak zabezpečí ukončenie aplikácie v prípade zlyhania
// prihlasovacieho procesu:
boolean prihlásenieZlyhalo = false;
// Spustíme dialóg a len v prípade, že ho používateľ potvrdil,
// overíme správnosť prihlasovacích údajov:
if (Svet.dialóg(new String[] {"Meno:", "Heslo:",
    "Zapamätaj si ma"}, údaje, "Prihlásenie sa…"))
{
    // Najprv overujeme prihlasovacie meno:
    if (null != údaje[0] && údaje[0] instanceof String &&
        meno.equalsIgnoreCase((String)údaje[0]))
    {
        // Potom heslo:
        if (null != údaje[1] && údaje[1] instanceof char[])
        {
            char porovnaj[] = (char[])údaje[1];
            // Niekde na tomto mieste by mohlo byť vykonané hešovanie
            // hesla, ale pozor, pôvodné aj hešlované heslo treba
            // po použití vyčistiť v súlade s tým, čo je vysvetlené
            // nižšie… (Hľadaj text začínajúci sa „Oracle odporúča“…)
            if (porovnaj.length == heslo.length)
            {
                for (int i = 0; i &lt; porovnaj.length; ++i)
                    if (porovnaj[i] != heslo[i])
                    {
                        prihlásenieZlyhalo = true;
                        break;
                    }
                // Na tomto mieste by sme mohli zužitkovať voľbu
                // „Zapamätaj si ma“ (ktorá je v tomto príklade
                // použitá v podstate len na demonštráciu možností
                // metódy „dialóg“):
                if (!prihlásenieZlyhalo && null != údaje[2] &&
                    údaje[2] instanceof Boolean && (Boolean)údaje[2])
                {
                    //...
                    Svet.správa("Zvolili ste voľbu „Zapamätaj si ma“…");
                    //...
                }
            }
            else prihlásenieZlyhalo = true;
        }
        else prihlásenieZlyhalo = true;
    }
    else prihlásenieZlyhalo = true;
}
else prihlásenieZlyhalo = true;
// Oracle odporúča po použití hesla nastaviť každý jeho znak na nulu,
// aby nezostávalo uložené a vystopovateľné v pamäti RAM (tam by
// mohlo zostať aj po ukončení aplikácie, napr. v dôsledku
// nekorektného prihlásenia sa, preto toto čistenie vykonávame
// v každom prípade):
if (null != údaje[1] && údaje[1] instanceof char[])
{
    char vymaž[] = (char[])údaje[1];
    for (int i = 0; i &lt; vymaž.length; ++i) vymaž[i] = 0;
}
// To isté urobíme aj so vzorom hesla…
for (int i = 0; i &lt; heslo.length; ++i) heslo[i] = 0;
// V prípade zlyhania prihlasovacieho procesu aplikáciu ukončíme:
if (prihlásenieZlyhalo)
{
    Svet.správa("Prihlasovanie zlyhalo!");
    Svet.koniec();
    return; // (Volanie metódy „koniec“ nie je to isté ako okamžité
            // ukončenie aplikácie – „upratovacie procesy“ ešte môžu chvíľu trvať,
            // preto sem pridávame aj príkaz „return.“)
}
// ...
Svet.správa("Prihlásenie je v poriadku. Vitajte!");
 
 Výsledok:
 
 Po spustení aplikácie je používateľovi zobrazený dialóg na
 obrázku nižšie.
 
 
 
 Vyplnený dialóg príkadu (Windows).
 
 Vyplnený dialóg príkadu (macOS).
 
 
 Ak používateľ zadal správne údaje, tak pri zvolení voľby
 „Zapamätaj si ma“ (ako na obrázku) sa najprv zobrazí správa
 ‚Zvolili ste voľbu „Zapamätaj si ma“…‘ a po potvrdení správa
 „Prihlásenie je v poriadku. Vitajte!“
Parametre:
popisy – pole popisov komponentov
údaje – pole hodnôt komponentov, ktoré zároveň určuje typ
     komponentu
titulok – titulok dialógu
Návratová hodnota:
true znamená, že používateľ dialóg potvrdil
Pozri tiež:
zadajReťazec(String), 
zadajReťazec(String, String), 
zadajHeslo(String), 
zadajHeslo(String, String), 
zadajCeléČíslo(String), 
zadajCeléČíslo(String, String), 
zadajReálneČíslo(String), 
zadajReálneČíslo(String, String), 
upravReťazec(String, String), 
upravCeléČíslo(long, String), 
upravCeléČíslo(long, String, String), 
upravReálneČíslo(double, String), 
upravReálneČíslo(double, String, String), 
dialóg(String[], Object[])
dialog
public static boolean dialog(String[] popisy,
                             Object[] údaje,
                             String titulok)
 Alias pre dialóg.
správa
public static void správa(String správa)
Zobrazí štandardný dialóg so zadanou textovou správou.
 
 
 
 Ukážka vzhľadu dialógu
 s informačnou správou (Windows).
 
 Ukážka vzhľadu dialógu
 s informačnou správou (macOS).
 
Parametre:
správa – text správy
Pozri tiež:
správa(String, String), 
varovanie(String), 
chyba(String), 
otázka(String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
sprava
public static void sprava(String správa)
 Alias pre správa.
správa
public static void správa(String správa,
                          String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou.
 
 
 
 Ukážka vzhľadu dialógu
 s informačnou správou (Windows).
 
 Ukážka vzhľadu dialógu
 s informačnou správou (macOS).
 
Parametre:
správa – text správy
titulok – text titulku dialógového okna správy
Pozri tiež:
správa(String), 
varovanie(String, String), 
chyba(String, String), 
otázka(String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
sprava
public static void sprava(String správa,
                          String titulok)
 Alias pre správa.
varovanie
public static void varovanie(String varovanie)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 varovania.
 
 
 
 Ukážka vzhľadu dialógu s varovaním
 (Windows).
 
 Ukážka vzhľadu dialógu s varovaním
 (macOS).
 
Parametre:
varovanie – text s obsahom varovania
Pozri tiež:
správa(String), 
správa(String, String)
varovanie
public static void varovanie(String varovanie,
                             String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 varovania.
 
 
 
 Ukážka vzhľadu dialógu s varovaním
 (Windows).
 
 Ukážka vzhľadu dialógu s varovaním
 (macOS).
 
Parametre:
varovanie – text s obsahom varovania
titulok – text titulku dialógového okna varovania
Pozri tiež:
správa(String), 
správa(String, String)
chyba
public static void chyba(String chyba)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 chyby.
 
 
 
 Ukážka vzhľadu dialógu
 s chybovým hlásením (Windows).
 
 Ukážka vzhľadu dialógu s chybovým
 hlásením (macOS).
 
Parametre:
chyba – text s obsahom chyby
Pozri tiež:
správa(String), 
správa(String, String)
chyba
public static void chyba(String chyba,
                         String titulok)
Zobrazí štandardný dialóg so zadanou textovou správou a ikonou
 chyby.
 
 
 
 Ukážka vzhľadu dialógu
 s chybovým hlásením (Windows).
 
 Ukážka vzhľadu dialógu s chybovým
 hlásením (macOS).
 
Parametre:
chyba – text s obsahom chyby
titulok – text titulku dialógového okna chyby
Pozri tiež:
správa(String), 
správa(String, String)
otázka
public static int otázka(String otázka)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Dobre?");
if (ÁNO == i) Svet.vypíš("Odpoveď: áno");
if (NIE == i) Svet.vypíš("Odpoveď: nie");
if (ZAVRETÉ == i) Svet.vypíš("Nechceš odpovedať…");
 
 
 
 
 
 
 Ukážky možného vzhľadu dialógov
 a odpovedí zobrazených počas vykonávania tohto príkladu.
 
Parametre:
otázka – text otázky
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného ako odpoveď alebo ZAVRETÉ,
     keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
otazka
public static int otazka(String otázka)
 Alias pre otázka.
otázka
public static int otázka(String otázka,
                         String titulok)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Dobre?", "Otázočka na teba…");
if (ÁNO == i) Svet.vypíš("Odpoveď: áno");
if (NIE == i) Svet.vypíš("Odpoveď: nie");
if (ZAVRETÉ == i) Svet.vypíš("Nechceš odpovedať…");
 
 
 
 
 
 
 Ukážky možného vzhľadu dialógov
 a odpovedí zobrazených počas vykonávania tohto príkladu.
 
Parametre:
otázka – text otázky
titulok – text titulku okna s otázkou
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného ako odpoveď alebo ZAVRETÉ,
     keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
otazka
public static int otazka(String otázka,
                         String titulok)
 Alias pre otázka.
otázka
public static int otázka(String otázka,
                         Object[] tlačidlá)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Ako?", new String[]{"Zle", "Dobre"});
// Spracovanie… Pozri príklad pri: otázka(otázka, titulok, tlačidlá, predvolenéTlačidlo)
  Ukážka
 možného vzhľadu dialóguzobrazeného počas vykonávania tohto
 príkladu (Windows).
 Ukážka dialógu (macOS).
Parametre:
otázka – text otázky
tlačidlá – zoznam popisov tlačidiel
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného ako odpoveď alebo ZAVRETÉ,
     keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String), 
otázka(String, String), 
otázka(String, String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
otazka
public static int otazka(String otázka,
                         Object[] tlačidlá)
 Alias pre otázka.
otázka
public static int otázka(String otázka,
                         String titulok,
                         Object[] tlačidlá)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Ako?", "Otázočka na teba…", new String[]{"Zle", "Dobre"});
// Spracovanie… Pozri príklad pri: otázka(otázka, titulok, tlačidlá, predvolenéTlačidlo)
  Ukážka
 možného vzhľadu dialóguzobrazeného počas vykonávania tohto
 príkladu (Windows).
 Ukážka dialógu (macOS).
Parametre:
otázka – text otázky
titulok – text titulku okna s otázkou
tlačidlá – zoznam popisov tlačidiel
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného ako odpoveď alebo ZAVRETÉ,
     keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, Object[], int), 
otázka(String, String, Object[], int)
otazka
public static int otazka(String otázka,
                         String titulok,
                         Object[] tlačidlá)
 Alias pre otázka.
otázka
public static int otázka(String otázka,
                         Object[] tlačidlá,
                         int predvolenéTlačidlo)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Ako?", new String[]{"Zle", "Dobre"}, 1);
// Spracovanie… Pozri príklad pri: otázka(otázka, titulok, tlačidlá, predvolenéTlačidlo)
  Ukážka
 možného vzhľadu dialóguzobrazeného počas vykonávania tohto
 príkladu (Windows).
 Ukážka dialógu (macOS).
Parametre:
otázka – text otázky
tlačidlá – zoznam popisov tlačidiel
predvolenéTlačidlo – „poradové číslo“ (index) predvoleného
     tlačidla
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného tlačidla ako odpoveď alebo ZAVRETÉ, keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, String, Object[], int)
otazka
public static int otazka(String otázka,
                         Object[] tlačidlá,
                         int predvolenéTlačidlo)
 Alias pre otázka.
otázka
public static int otázka(String otázka,
                         String titulok,
                         Object[] tlačidlá,
                         int predvolenéTlačidlo)
Zobrazí štandardný dialóg s otázkou na používateľa
 (odpoveď používateľ volí stlačením tlačidla).
 
 Príklad:
 
 
 
int i = Svet.otázka("Ako?", "Otázočka na teba…", new String[]{"Zle", "Dobre"}, 1);
if (0 == i) Svet.vypíš("Zle, vravíš? Škoda…");
if (1 == i) Svet.vypíš("Dobre, vravíš? Výborne!");
if (ZAVRETÉ == i) Svet.vypíš("Nechceš odpovedať…");
 
 
 
 
 
 
 Ukážky možného vzhľadu
 dialógov (Windows a macOS) a odpovedízobrazených počas
 vykonávania tohto príkladu.
 
Parametre:
otázka – text otázky
titulok – text titulku okna s otázkou
tlačidlá – zoznam popisov tlačidiel
predvolenéTlačidlo – „poradové číslo“ (index) predvoleného
     tlačidla
Návratová hodnota:
celé číslo označujúce „poradové číslo“ (index) tlačidla
     zvoleného ako odpoveď alebo ZAVRETÉ,
     keď používateľ zavrel dialóg
Pozri tiež:
správa(String), 
správa(String, String), 
otázka(String), 
otázka(String, String), 
otázka(String, Object[]), 
otázka(String, String, Object[]), 
otázka(String, Object[], int)
otazka
public static int otazka(String otázka,
                         String titulok,
                         Object[] tlačidlá,
                         int predvolenéTlačidlo)
 Alias pre otázka.
textTlačidla
public static String textTlačidla(String tlačidlo)
Umožňuje overiť aktuálne definované znenie textu tlačidla
 konkrétnej odpovede na otázku (pozri napríklad metódu
 otázka) alebo zadania/zmeny údaju (pozri
 napríklad metódu zadajReťazec).
 Predvolené znenie textov tlačidiel sa dá zmeniť metódou
 textTlačidla(tlačidlo, text).
 Táto metóda prijíma text, ktorý považuje za univerzálny
 identifikátor tlačidla a vráti skutočný text tlačidla.
Parametre:
tlačidlo – musí byť jeden z nasledujúcich predvolených textov:
     "áno", "nie", "ok",
     "zrušiť", "reset farby",
     "miešanie farby", "reset polohy" alebo
     "reset smeru" (na veľkosti písmen nezáleží;
     programovací rámec prijme aj predvolené texty bez diakritiky
     alebo bez medzier, ale v tom prípade je potrebné ju/ich
     vynechať v celom slove/texte)
Návratová hodnota:
aktuálny text určeného tlačidla alebo null ak je
     hodnota argumentu neplatná
textTlacidla
public static String textTlacidla(String tlačidlo)
 Alias pre textTlačidla.
textTlačidla
public static void textTlačidla(String tlačidlo,
                                String text)
Umožňuje upraviť text tlačidla odpovede na otázku (pozri napríklad
 metódu otázka) alebo zadania údaju (pozri
 napríklad metódu zadajReťazec).
Parametre:
tlačidlo – musí byť jeden z nasledujúcich predvolených textov:
     "áno", "nie", "ok",
     "zrušiť", "reset farby",
     "miešanie farby", "reset polohy" alebo
     "reset smeru" (na veľkosti písmen nezáleží;
     programovací rámec prijme aj predvolené texty bez diakritiky
     alebo bez medzier, ale v tom prípade je potrebné ju/ich
     vynechať v celom slove/texte)
text – nový text určeného tlačidla (ak je hodnota prvého
     argumentu neplatná, nebude mať volanie tejto metódy žiadny
     efekt)
textTlacidla
public static void textTlacidla(String tlačidlo,
                                String text)
 Alias pre textTlačidla.
zobrazÚvodnúObrazovku
public static void zobrazÚvodnúObrazovku(Image obrázok)
Zobrazí úvodnú obrazovku so zadaným obrázkom. Úvodná obrazovka
 (splash screen) je dekoračný obrázok zobrazovaný počas
 inicializácie aplikácie. Má upozorniť používateľa, že aplikácia sa
 práve spúšťa a potrebuje čas na svoju úplnú inicializáciu. Volanie
 tejto metódy zároveň spôsobí skrytie hlavného okna aplikácie
 (sveta), nezabudnite preto po skončení inicializácie použiť metódu
 skryÚvodnúObrazovku na skrytie
 úvodnej obrazovky a zobrazenie hlavného okna sveta…
 
 Poznámka: Java má vlastný mechanizmus
 definovania úvodnej obrazovky (SplashScreen),
 avšak takúto úvodnú obrazovku nie je možné vytvoriť programovo,
 preto používa programovací rámec GRobot svoj vlastný spôsob.
 
 Obrázok pre túto verziu metódy musíte definovať sami. Nie je
 predpísaný spôsob, ale priam sa ponúka využitie triedy Obrázok a mechanizmu kreslenia na obrázok s pomocou
 robota. Treba pri tom zvážiť viacero okolností. Zobrazenie
 úvodnej obrazovky je očakávané v čase, keď ešte hlavné okno nie
 je zobrazené. V podstate v čase, keď ešte nejestvuje žiadny
 robot. Preto, ak chceme používať kreslenie s pomocou robota, musíme
 jedného na tento účel vytvoriť. Prvý vytvorený robot je zároveň
 hlavný robot zodpovedný za
 vytvorenie a zobrazenie hlavného okna. Preto musíme pred jeho
 vytvorením volať metódu Svet.skry(). Najlepšie je celý kód umiestniť do
 hlavnej metódy (main).
 
 Príklad:
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        Svet.čakaj(3.0);
    }
    public static void main(String[] args)
    {
        Svet.skry();
        GRobot kreslič = new GRobot();
        Obrázok obrázok = new Obrázok(300, 200);
        kreslič.kresliNaObrázok(obrázok);
        // Kreslenie
        obrázok.vyplň(svetlošedá);
        // Chceli sme orámovať plochu obrázka. Robot pracuje s odlišným
        // súradnicovým priestorom, preto bolo na nájdenie vhodných hodnôt
        // potrebné trochu experimentovať:
        kreslič.skoč(&#45;0.5, 0.5);
        kreslič.obdĺžnik(149.5, 99.5);
        kreslič.písmo("Arial", 32);
        kreslič.text("Čakajte…");
        // kreslič.skry(); // ← týmto spôsobom by sme v podstate zamedzili,
            // aby sa inštancia hlavnej triedy stala hlavným robotom (čo
            // by nebolo podľa nášho očakávania) a hlavným robotom by zostal
            // skrytý kreslič; preto urobíme toto:
        Svet.uvoľni(kreslič);
        // Zobrazenie
        Svet.zobrazÚvodnúObrazovku(obrázok);
        new HlavnáTrieda();
        Svet.skryÚvodnúObrazovku();
    }
}
 
 Vidíme, že tento spôsob prináša určité komplikácie (pozri text
 pred príkladom), preto odporúčame obrázok určený na zobrazenie
 počas inicializácie uložiť do súboru v niektorom z podporovaných
 súborových formátov a použiť ďalšiu verziu metódy
 zobrazÚvodnúObrazovku prijímajúcu názov súboru:
 zobrazÚvodnúObrazovku(názovSúboru).
 
 Vhodný obrázok si môžeme vyrobiť aj sami. Nasledujúci príklad
 nahrádza obsah metódy main predchádzajúceho príkladu.
 Využíva obe verzie metódy zobrazÚvodnúObrazovku. Ak
 súbor s obrázkom jestvuje, zobrazí ho, inak ho najskôr vyrobí
 a potom zobrazí jeho vyrobenú verziu uloženú v pamäti:
 
 
if (Súbor.jestvuje("môjObrázok.png"))
    Svet.zobrazÚvodnúObrazovku("môjObrázok.png");
else
{
    Svet.skry();
    GRobot kreslič = new GRobot();
    Obrázok obrázok = new Obrázok(300, 200);
    kreslič.kresliNaObrázok(obrázok);
    // Kreslenie
    kreslič.farba(199, 201, 203, 9);
    for (double i = 1; i &gt; 0; i &#45;= 0.03)
        kreslič.vyplňElipsu(150.0 * i, 100.0 * i);
    kreslič.farba(99, 101, 103);
    kreslič.písmo("Arial", 32);
    kreslič.text("Čakajte…");
    obrázok.ulož("môjObrázok.png");
    // Tento robot bol doteraz hlavným robotom. Aby bolo vykonávanie
    // programu konzistetné v oboch prípadoch – keď obrázok úvodnej
    // obrazovky nejestvuje a keď obrázok už bol vytvorený – odstránime
    // v tejto vetve kresliča z pamäte počítača. Hlavným robotom sa
    // potom stane inštancia triedy HlavnáTrieda – rovnako ako po
    // vykonaní hlavnej vetvy tohto vetvenia.
    // (Poznámka: Nastavenie farby robota na červenú je len
    //  ilustračné – aby bolo vidno, že robot naozaj nejestvuje.)
    kreslič.farba(červená);
    Svet.uvoľni(kreslič);
    // Zobrazenie
    Svet.zobrazÚvodnúObrazovku(obrázok);
}
new HlavnáTrieda();
Svet.skryÚvodnúObrazovku();
// Ak by sme vo vedľajšej vetve vyššie uvedeného vetvenia neodstránili
// robot (kresliča), tak pri prvom spustení (keby ešte nejestvoval
// obrázok) by sa nasledujúca kružnica nenakreslila a pod robotom
// inštancie HlavnáTrieda by bolo vidno (aspoň presvitajúc) ďalší
// červený robot. Kružnica by sa v skutočnosti nakreslila –
// červenou farbou, ale do inštancie obrázok, do ktorej má kreslič
// presmerované kreslenie. (Obrázok je v tom čase už uložený, takže
// v ňom by ste ju nenašli.) Pri každom ďalšom spustení by sa
// nakreslila kružnica inštanciou triedy HlavnáTrieda (predvolene
// čiernou farbou). Uvoľnenie kresliča z pamäte túto nekonzistenciu
// odstraňuje.
Svet.hlavnýRobot().kružnica(50);
 
 O niečo zdokonalenú verziu môžete vidieť na nasledujúcom
 obrázku:
 
 
 Obrázok úvodnej obrazovky –
 „uvodnaObrazovka1.png.“
 
 Obrázok je pre demonštráciu polopriehľadný. Zobrazenie
 priehľadnosti okna závisí od platformy a verzie Javy.
 
 Upozornenie: Robot (kresliča) síce
 odstránime z pamäti počítača, svet sa však už zrušiť nedá.
 Rovnako platí, že svet je vytvorený i pri vykonaní príkazu
 zobrazÚvodnúObrazovku(názovSúboru). Z týchto dôvodov nie je
 možné po použití príkazov na zobrazenie úvodnej obrazovky
 použiť v konštruktore hlavnej triedy príkaz super
 na nastavenie rozmerov plátna. Program by sa zrútil so vznikom
 výnimky „Svet už jestvuje!“ Dá sa však použiť príkaz
 zmeňRozmeryPlátien.
Parametre:
obrázok – objekt obrázka; môže byť použitý aj objekt
     typu Obrázok
Pozri tiež:
zobrazÚvodnúObrazovku(String), 
skryÚvodnúObrazovku()
zobrazUvodnuObrazovku
public static void zobrazUvodnuObrazovku(Image úvodnýObrázok)
 Alias pre zobrazÚvodnúObrazovku.
zobrazÚvodnúObrazovku
public static void zobrazÚvodnúObrazovku(String názovSúboru)
Zobrazí úvodnú obrazovku so zadaným obrázkom prečítaným zo súboru.
 Úvodná obrazovka (splash screen) je dekoračný obrázok
 zobrazovaný počas inicializácie aplikácie. Má upozorniť
 používateľa, že aplikácia sa práve spúšťa a potrebuje čas na svoju
 úplnú inicializáciu. Volanie tejto metódy zároveň spôsobí skrytie
 hlavného okna aplikácie (sveta), nezabudnite preto po skončení
 inicializácie použiť metódu skryÚvodnúObrazovku na skrytie úvodnej obrazovky a zobrazenie
 hlavného okna sveta…
 
 Poznámka: Java má vlastný mechanizmus
 definovania úvodnej obrazovky (SplashScreen),
 avšak takúto úvodnú obrazovku nie je možné vytvoriť programovo,
 preto používa programovací rámec GRobot svoj vlastný spôsob.
 
 Príklad:
 
 
import knižnica.*;
public class HlavnáTrieda extends GRobot
{
    private HlavnáTrieda()
    {
        Svet.čakaj(1.0);
    }
    public static void main(String[] args)
    {
        Svet.zobrazÚvodnúObrazovku("môjObrázok.png");
        new HlavnáTrieda();
        Svet.skryÚvodnúObrazovku();
    }
}
 
 Upozornenie: Vykonanie tohto príkazu
 má za následok inicializáciu sveta. Z toho dôvodu nie je možné
 po jeho použití použiť v konštruktore hlavnej triedy príkaz
 super na nastavenie rozmerov plátna. Program by sa
 zrútil so vznikom výnimky „Svet už jestvuje!“ Dá sa však použiť
 príkaz zmeňRozmeryPlátien.
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
názovSúboru – názov súboru s obrázkom (prípona súboru musí
     byť .gif, .png alebo .jpg (resp.
     .jpeg))
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
zobrazÚvodnúObrazovku(Image), 
skryÚvodnúObrazovku(), 
priečinokObrázkov(String)
zobrazUvodnuObrazovku
public static void zobrazUvodnuObrazovku(String názovSúboru)
 Alias pre zobrazÚvodnúObrazovku.
skryÚvodnúObrazovku
public static void skryÚvodnúObrazovku()
Skryje úvodnú obrazovku a zobrazí hlavné okno aplikácie. Viac
 informácií nájdete v opisoch metód zobrazÚvodnúObrazovku(obrázok)
 a zobrazÚvodnúObrazovku(názovSúboru)…
Pozri tiež:
zobrazÚvodnúObrazovku(Image), 
zobrazÚvodnúObrazovku(String)
skryUvodnuObrazovku
public static void skryUvodnuObrazovku()
 Alias pre skryÚvodnúObrazovku.
začniVstup
public static boolean začniVstup()
Zobrazí vstupný riadok v spodnej časti okna. Aplikácia pokračuje
 v činnosti. Ak bol vstupný riadok zobrazený (t. j. už prebieha
 iný vstup), metóda sa predčasne ukončí a vráti false.
 Riadok je možné zrušiť klávesom Escape alebo potvrdiť
 klávesom Enter. Ak bola použitá metóda neskrývajVstupnýRiadok, kláves
 Escape iba vymaže obsah vstupného riadka, ale neskryje
 ho. Po potvrdení vstupu klávesom Enter aplikácia vyvolá
 metódu počúvadla potvrdenieÚdajov. V nej môže programátor získať zadané údaje
 metódami
 prevezmiReťazec,
 prevezmiCeléČíslo alebo
 prevezmiReálneČíslo.
 V prípade, že potvrdené údaje nie sú v správnom tvare (platí pre
 celé alebo reálne číslo), vrátia metódy prevezmiCeléČíslo a prevezmiReálneČíslo hodnotu null.
 
 Poznámka: Táto metóda je použitá
 v príklade „Hra na ozvenu,“ ktorý sa nachádza v úvode dokumentácie tejto triedy…
Návratová hodnota:
true ak bol pred volaním metódy vstupný riadok
     skrytý, false ak bol vstupný riadok zobrazený (čiže
     ak vstup už prebieha)
Pozri tiež:
začniVstup(String), 
potvrďVstup(), 
zrušVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
zacniVstup
public static boolean zacniVstup()
 Alias pre začniVstup.
začniVstup
public static boolean začniVstup(String výzva)
Funguje rovnako ako začniVstup(), s tým rozdielom, že pred
 vstupným riadkom je zobrazená návesť s výzvou.
Parametre:
výzva – text výzvy zobrazenej vo forme náveste pred vstupným
     riadkom
Návratová hodnota:
true ak bol pred volaním metódy vstupný riadok
     skrytý, false ak bol vstupný riadok zobrazený (čiže
     ak už vstup prebieha)
Pozri tiež:
začniVstup(), 
potvrďVstup(), 
zrušVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
zacniVstup
public static boolean zacniVstup(String výzva)
 Alias pre začniVstup.
potvrďVstup
public static void potvrďVstup()
Vykoná pre vstupný riadok rovnakú akciu ako pri stlačení klávesu
 Enter.
Pozri tiež:
začniVstup(), 
začniVstup(String), 
zrušVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
potvrdVstup
public static void potvrdVstup()
 Alias pre potvrďVstup.
zrušVstup
public static void zrušVstup()
Vykoná pre vstupný riadok rovnakú akciu ako pri stlačení klávesu
 Escape.
Pozri tiež:
začniVstup(), 
začniVstup(String), 
potvrďVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
prevezmiReťazec()
zrusVstup
public static void zrusVstup()
 Alias pre zrušVstup.
vstupnýRiadokZobrazený
public static boolean vstupnýRiadokZobrazený()
Overí, či je zobrazený panel vstupného riadka.
Návratová hodnota:
true – áno; false – nie
Pozri tiež:
neskrývajVstupnýRiadok(), 
neskrývajVstupnýRiadok(boolean), 
skrývajVstupnýRiadok(), 
skrývajVstupnýRiadok(boolean), 
aktivujVstupnýRiadok(), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec()
vstupnyRiadokZobrazeny
public static boolean vstupnyRiadokZobrazeny()
 Alias pre vstupnýRiadokZobrazený.
neskrývajVstupnýRiadok
public static void neskrývajVstupnýRiadok()
Prikáže vstupnému riadku, aby sa neskrýval po potvrdení klávesom
 Enter. Ak je v čase spustenia tejto metódy skrytý, je ho
 potrebné zobraziť metódou začniVstup alebo
 použiť alternatívnu metódu neskrývajVstupnýRiadok(boolean).
 
 Poznámka: Táto metóda je použitá
 v príklade „Hra na ozvenu,“ ktorý sa nachádza v úvode dokumentácie tejto triedy…
Pozri tiež:
vstupnýRiadokZobrazený(), 
neskrývajVstupnýRiadok(boolean), 
skrývajVstupnýRiadok(), 
skrývajVstupnýRiadok(boolean), 
aktivujVstupnýRiadok(), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
neskryvajVstupnyRiadok
public static void neskryvajVstupnyRiadok()
 Alias pre neskrývajVstupnýRiadok.
neskrývajVstupnýRiadok
public static boolean neskrývajVstupnýRiadok(boolean začniVstup)
Prikáže vstupnému riadku, aby sa neskrýval po potvrdení klávesom
 Enter. Táto metóda je alternatívou metódy neskrývajVstupnýRiadok, pričom
 poskytuje rozšírenú funkcionalitu opísanú nižšie…
Parametre:
začniVstup – ak je true, vykoná sa zároveň metóda
     začniVstup; ak je false,
     vstupný riadok zostane v pôvodnom stave
Návratová hodnota:
ak má parameter začniVstup hodnotu true,
     tak návratová hodnota je návratovou hodnotou metódy začniVstup; ak má parameter začniVstup
     hodnotu false, tak návratová hodnota je
     true ak je vstupný riadok zobrazený
     a false v opačnom prípade
Pozri tiež:
vstupnýRiadokZobrazený(), 
neskrývajVstupnýRiadok(), 
skrývajVstupnýRiadok(), 
skrývajVstupnýRiadok(boolean), 
aktivujVstupnýRiadok(), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
neskryvajVstupnyRiadok
public static boolean neskryvajVstupnyRiadok(boolean začniVstup)
 Alias pre neskrývajVstupnýRiadok.
skrývajVstupnýRiadok
public static void skrývajVstupnýRiadok()
Umožní vstupnému riadku, aby sa skryl po potvrdení klávesom
 Enter alebo po zrušení vstupu klávesom Escape.
 Toto je predvolené správanie vstupného riadka.
Pozri tiež:
vstupnýRiadokZobrazený(), 
neskrývajVstupnýRiadok(), 
neskrývajVstupnýRiadok(boolean), 
skrývajVstupnýRiadok(boolean), 
aktivujVstupnýRiadok(), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
skryvajVstupnyRiadok
public static void skryvajVstupnyRiadok()
 Alias pre skrývajVstupnýRiadok.
skrývajVstupnýRiadok
public static void skrývajVstupnýRiadok(boolean zrušVstup)
Umožní vstupnému riadku, aby sa skryl po potvrdení klávesom
 Enter alebo po zrušení vstupu klávesom Escape.
 Toto je predvolené správanie vstupného riadka. Táto metóda je
 alternatívou metódy skrývajVstupnýRiadok, pričom poskytuje rozšírenú funkcionalitu
 opísanú nižšie…
Parametre:
zrušVstup – ak je true, vykoná sa zároveň metóda
     zrušVstup; ak je false,
     vstupný riadok zostane v pôvodnom stave
Pozri tiež:
vstupnýRiadokZobrazený(), 
neskrývajVstupnýRiadok(), 
neskrývajVstupnýRiadok(boolean), 
skrývajVstupnýRiadok(), 
aktivujVstupnýRiadok(), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
skryvajVstupnyRiadok
public static void skryvajVstupnyRiadok(boolean zrušVstup)
 Alias pre skrývajVstupnýRiadok.
aktivujVstupnýRiadok
public static void aktivujVstupnýRiadok()
V prípade, že vstupný riadok je stále viditeľný, môžeme do neho
 touto metódou presmerovať vstup – v riadku sa aktivuje blikajúci
 kurzor.
Pozri tiež:
vstupnýRiadokZobrazený(), 
neskrývajVstupnýRiadok(), 
neskrývajVstupnýRiadok(boolean), 
skrývajVstupnýRiadok(), 
skrývajVstupnýRiadok(boolean), 
začniVstup(), 
vstupnýRiadok(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
aktivujVstupnyRiadok
public static void aktivujVstupnyRiadok()
 Alias pre aktivujVstupnýRiadok.
vstupnýRiadok
public static JTextField vstupnýRiadok()
Vráti komponent vstupného riadka, aby s ním mohlo byť manipulované
 na nižšej úrovni (úrovni bližšej k systému).
Návratová hodnota:
objekt typu JTextField
     reprezentujúci vstupný riadok
Pozri tiež:
popisVstupnéhoRiadka(), 
popisVstupnéhoRiadka(String), 
textVstupnéhoRiadka(), 
textVstupnéhoRiadka(String), 
pripojTextVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
vstupnyRiadok
public static JTextField vstupnyRiadok()
 Alias pre vstupnýRiadok.
popisVstupnéhoRiadka
public static String popisVstupnéhoRiadka()
 Získa text popisu vstupného riadka.
 Ak je popis vstupného riadka skrytý, metóda vráti hodnotu
 null.
Návratová hodnota:
aktuálny text popisu vstupného riadka alebo null
Pozri tiež:
vstupnýRiadok(), 
popisVstupnéhoRiadka(String), 
textVstupnéhoRiadka(), 
textVstupnéhoRiadka(String), 
pripojTextVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
popisVstupnehoRiadka
public static String popisVstupnehoRiadka()
 Alias pre popisVstupnéhoRiadka.
popisVstupnéhoRiadka
public static void popisVstupnéhoRiadka(String výzva)
 Nastaví text popisu vstupného riadka. Ak bola na
 zobrazenie vstupného riadka použitá metóda bez určenia výzvy
 (začniVstup()), popis bude po volaní tejto metódy
 zobrazený. Ak je táto metóda volaná s argumentom null,
 popis bude skrytý.
Parametre:
výzva – nový text popisu vstupného riadka
Pozri tiež:
vstupnýRiadok(), 
popisVstupnéhoRiadka(), 
textVstupnéhoRiadka(), 
textVstupnéhoRiadka(String), 
pripojTextVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
popisVstupnehoRiadka
public static void popisVstupnehoRiadka(String výzva)
 Alias pre popisVstupnéhoRiadka.
textVstupnéhoRiadka
public static String textVstupnéhoRiadka()
 Získa text aktuálne zadaný do vstupného riadka. Touto
 metódou je možné overiť obsah vstupného riadka ešte pred jeho
 potvrdením klávesom Enter.
Návratová hodnota:
aktuálny text vstupného riadka
Pozri tiež:
vstupnýRiadok(), 
popisVstupnéhoRiadka(), 
popisVstupnéhoRiadka(String), 
textVstupnéhoRiadka(String), 
pripojTextVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
textVstupnehoRiadka
public static String textVstupnehoRiadka()
 Alias pre textVstupnéhoRiadka.
textVstupnéhoRiadka
public static void textVstupnéhoRiadka(String text)
 Nastaví text vstupného riadka na zadanú
 hodnotu. Pozor, metóda začniVstup() vždy pred zobrazením
 panela so vstupným riadkom vyčistí vstupný riadok (vymaže jeho
 obsah).
Parametre:
text – nový text vstupného riadka
Pozri tiež:
vstupnýRiadok(), 
popisVstupnéhoRiadka(), 
popisVstupnéhoRiadka(String), 
textVstupnéhoRiadka(), 
pripojTextVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec(), 
históriaVstupnéhoRiadka()
textVstupnehoRiadka
public static void textVstupnehoRiadka(String text)
 Alias pre textVstupnéhoRiadka.
pripojTextVstupnéhoRiadka
public static void pripojTextVstupnéhoRiadka(String naPripojenie)
Pripojí zadaný text na koniec vstupného riadka. Volanie metódy má
 význam len keď je vstupný riadok zobrazený.
Parametre:
naPripojenie – text na pripojenie
Pozri tiež:
vstupnýRiadok(), 
popisVstupnéhoRiadka(), 
popisVstupnéhoRiadka(String), 
textVstupnéhoRiadka(), 
textVstupnéhoRiadka(String), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
prevezmiReťazec()
pripojTextVstupnehoRiadka
public static void pripojTextVstupnehoRiadka(String naPripojenie)
 Alias pre pripojTextVstupnéhoRiadka.
históriaVstupnéhoRiadka
public static Zoznam&lt;String&gt; históriaVstupnéhoRiadka()
Vráti zoznam reťazcov histórie vstupného riadka. Na to, aby sa
 zoznam automaticky plnil (počas činnosti aplikácie), musí byť
 história aktívna.
 Vrátený zoznam je autentický. Môžete ho upravovať podľa vlastných
 potrieb (to jest jeho vymazanie skutočne spôsobí vymazanie histórie
 a podobne). Históriu je tiež možné nechať automaticky uchovať v konfiguračnom súbore,
 avšak musí byť aktívna aj samotná konfigurácia.
 
 Poznámky: Najnovšie položky sú v zozname
 histórie umiestnené na konci. Správa histórie vstupného riadka
 automaticky maže staré duplikáty každého potvrdeného riadka. To
 znamená, že ak by história obsahovala riadky: x, x, y, y, x, y, z
 a používateľ by potvrdil riadok x, tak by sa história zmenila na:
 y, y, y, z, x. Po ďalšom potvrdení y by v histórii zostalo: z, x,
 y. Najjednoduchší spôsob overenia umožňuje príklad nižšie.
 
 Príklad:
 
 Tento príklad umožňuje overenie informácií uvedených
 v poznámkach vyššie.
 
 
import knižnica.*;
import static knižnica.Svet.*;
public class OverHistóriu extends GRobot
{
 história = históriaVstupnéhoRiadka();
    private OverHistóriu()
    {
        začniVstup();
        neskrývajVstupnýRiadok();
        história.pridaj("x");
        história.pridaj("x");
        história.pridaj("y");
        história.pridaj("y");
        história.pridaj("x");
        história.pridaj("y");
        história.pridaj("z");
        vypíšHistóriu();
    }
    private void vypíšHistóriu()
    {
        vymažTexty();
        vypíš(história);
    }
    @Override public void potvrdenieVstupu()
    {
        vypíšHistóriu();
    }
    public static void main(String[] args)
    {
        aktivujHistóriuVstupnéhoRiadka();
        new OverHistóriu();
        zbaľ(); vystreď();
    }
}
Návratová hodnota:
zoznam reťazcov (história vstupného riadka)
Pozri tiež:
začniVstup(), 
aktívnaHistóriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
historiaVstupnehoRiadka
public static Zoznam&lt;String&gt; historiaVstupnehoRiadka()
 Alias pre históriaVstupnéhoRiadka.
aktívnaHistóriaVstupnéhoRiadka
public static boolean aktívnaHistóriaVstupnéhoRiadka()
Zistí, či je automatické uchovávanie potvrdených vstupných
 riadkov aktívne. Tento stav vypovedá len o tom, či budú potvrdené
 vstupné riadky uchovávané počas aktuálnej činnosti aplikácie. Na
 to, aby boli tieto údaje dostupné aj pri ďalšom spustení
 aplikácie, musí byť aktivované uchovávanie histórie
 v konfiguračnom súbore a musí byť aktívna aj samotná
 konfigurácia.
Návratová hodnota:
stav aktivovania automatického uchovávania histórie
     vstupného riadka počas činnosti aplikácie
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
aktivnaHistoriaVstupnehoRiadka
public static boolean aktivnaHistoriaVstupnehoRiadka()
 Alias pre aktívnaHistóriaVstupnéhoRiadka.
aktivujHistóriuVstupnéhoRiadka
public static void aktivujHistóriuVstupnéhoRiadka()
Aktivuje automatické uchovávanie potvrdených vstupných riadkov.
 Ak je navyše aktivované uchovávanie histórie
 v konfiguračnom súbore (pričom konfigurácia musí byť tiež aktívna), tak budú uchované
 potvrdené riadky dostupné aj pri ďalšom spustení aplikácie.
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktívnaHistóriaVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
aktivujHistoriuVstupnehoRiadka
public static void aktivujHistoriuVstupnehoRiadka()
 Alias pre aktivujHistóriuVstupnéhoRiadka.
deaktivujHistóriuVstupnéhoRiadka
public static void deaktivujHistóriuVstupnéhoRiadka()
Deaktivuje automatické uchovávanie potvrdených vstupných
 riadkov počas činnosti aplikácie.
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktívnaHistóriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
deaktivujHistoriuVstupnehoRiadka
public static void deaktivujHistoriuVstupnehoRiadka()
 Alias pre deaktivujHistóriuVstupnéhoRiadka.
uchovávaSaHistóriaVstupnéhoRiadka
public static boolean uchovávaSaHistóriaVstupnéhoRiadka()
Zistí, či je aktívne automatické uchovanie histórie
 potvrdených vstupných riadkov do konfiguračného súboru. Na to,
 aby táto vlastnosť fungovala, musí byť aktívna aj samotná
 konfigurácia a na to,
 aby sa história riadkov automaticky plnila, musí byť aktívne
 automatické uchovávanie histórie počas činnosti aplikácie.
Návratová hodnota:
stav aktivovania automatického uchovávania histórie
     vstupného riadka do konfiguračného súboru
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktívnaHistóriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
uchovavaSaHistoriaVstupnehoRiadka
public static boolean uchovavaSaHistoriaVstupnehoRiadka()
 Alias pre uchovávaSaHistóriaVstupnéhoRiadka.
uchovajHistóriuVstupnéhoRiadka
public static void uchovajHistóriuVstupnéhoRiadka()
Aktivuje automatické uchovávanie potvrdených
 vstupných riadkov do konfiguračného
 súboru. Na to, aby táto vlastnosť fungovala, musí byť aktívna
 aj samotná konfigurácia
 a na to, aby sa história riadkov automaticky plnila, musí byť
 aktívne automatické uchovávanie histórie počas činnosti aplikácie.
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktívnaHistóriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
neuchovajHistóriuVstupnéhoRiadka()
uchovajHistoriuVstupnehoRiadka
public static void uchovajHistoriuVstupnehoRiadka()
 Alias pre uchovajHistóriuVstupnéhoRiadka.
neuchovajHistóriuVstupnéhoRiadka
public static void neuchovajHistóriuVstupnéhoRiadka()
Deaktivuje automatické uchovávanie histórie vstupných riadkov
 do konfiguračného
 súboru.
Pozri tiež:
začniVstup(), 
históriaVstupnéhoRiadka(), 
aktívnaHistóriaVstupnéhoRiadka(), 
aktivujHistóriuVstupnéhoRiadka(), 
deaktivujHistóriuVstupnéhoRiadka(), 
uchovávaSaHistóriaVstupnéhoRiadka(), 
uchovajHistóriuVstupnéhoRiadka()
neuchovajHistoriuVstupnehoRiadka
public static void neuchovajHistoriuVstupnehoRiadka()
 Alias pre neuchovajHistóriuVstupnéhoRiadka.
prevezmiReťazec
public static String prevezmiReťazec()
Vráti reťazec zadaný do vstupného riadka po potvrdení klávesom
 Enter. Vstup s pomocou vstupného riadka sa zahajuje metódou
 začniVstup.
Návratová hodnota:
objekt typu String obsahujúci
     text zadaný používateľom
Pozri tiež:
prevezmiZrušenéÚdaje(), 
prevezmiCeléČíslo(), 
prevezmiReálneČíslo(), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok()
prevezmiRetazec
public static String prevezmiRetazec()
 Alias pre prevezmiReťazec.
prevezmiZrušenéÚdaje
public static String prevezmiZrušenéÚdaje()
Vráti reťazec, ktorý obsahoval vstupný riadok tesne pred zrušením
 klávesom Escape.
Návratová hodnota:
objekt typu String obsahujúci
     text vstupného riadka pred zrušením
Pozri tiež:
prevezmiReťazec(), 
prevezmiCeléČíslo(), 
prevezmiReálneČíslo(), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok()
prevezmiZruseneUdaje
public static String prevezmiZruseneUdaje()
 Alias pre prevezmiZrušenéÚdaje.
prevezmiCeléČíslo
public static Long prevezmiCeléČíslo()
Vráti celé číslo zadané do vstupného riadka po potvrdení
 klávesom Enter. Metóda vráti hodnotu null
 v prípade, že do vstupného riadka nebolo zadané celé číslo.
 Vstup s pomocou vstupného riadka sa zahajuje metódou začniVstup.
Návratová hodnota:
objekt typu Long obsahujúci zadané celé číslo,
     alebo null v prípade chyby
Pozri tiež:
prevezmiReťazec(), 
prevezmiReálneČíslo(), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
formát
prevezmiCeleCislo
public static Long prevezmiCeleCislo()
 Alias pre prevezmiCeléČíslo.
prevezmiReálneČíslo
public static Double prevezmiReálneČíslo()
Vráti reálne číslo zadané do vstupného riadka po potvrdení
 klávesom Enter. Metóda vráti hodnotu null
 v prípade, že do vstupného riadka nebolo zadané reálne číslo.
 Vstup s pomocou vstupného riadka sa zahajuje metódou začniVstup.
Návratová hodnota:
objekt typu Double obsahujúci
     zadané reálne číslo alebo null v prípade chyby
Pozri tiež:
prevezmiReťazec(), 
prevezmiCeléČíslo(), 
začniVstup(), 
vstupnýRiadokZobrazený(), 
vstupnýRiadok(), 
formát
prevezmiRealneCislo
public static Double prevezmiRealneCislo()
 Alias pre prevezmiReálneČíslo.
reťazecNaCeléČíslo
public static Long reťazecNaCeléČíslo(String reťazec)
Pokúsi sa previesť zadaný reťazec na celé číslo. V prípade
 chyby pri prevode vráti metóda hodnotu null.
Parametre:
reťazec – reťazec s údajom na prevedenie
Návratová hodnota:
objekt typu Long obsahujúci prevedené celé číslo,
     alebo null v prípade chyby
Pozri tiež:
reťazecNaReálneČíslo(String), 
formát
retazecNaCeleCislo
public static Long retazecNaCeleCislo(String reťazec)
 Alias pre reťazecNaCeléČíslo.
reťazecNaReálneČíslo
public static Double reťazecNaReálneČíslo(String reťazec)
Pokúsi sa previesť zadaný reťazec na reálne číslo. V prípade
 chyby pri prevode vráti metóda hodnotu null.
Parametre:
reťazec – reťazec s údajom na prevedenie
Návratová hodnota:
objekt typu Double obsahujúci
     prevedené reálne číslo alebo null v prípade chyby
Pozri tiež:
reťazecNaCeléČíslo(String), 
formát
retazecNaRealneCislo
public static Double retazecNaRealneCislo(String reťazec)
 Alias pre reťazecNaReálneČíslo.
celéNaRímske
public static String celéNaRímske(long celé)
Prevedie zadané celé číslo na reťazec s rímskou reprezentáciou
 celých čísiel. Metóda umožňuje vykonať reverzný proces k metóde
 rímskeNaCelé, pričom výsledok nijako
 neoptimalizuje (v zmysle, že jej cieľom nie je dosiahnuť čo
 najkratšiu reprezentáciu celočíselnej hodnoty). Naopak, prevod je
 značne priamočiary s použitím vnútornej zotriedenej tabuľky
 obsahujúcej predpísané hodnoty použité pri prevode ako napríklad:
 M (1000), CM (900), D (500), CD (400) atď. Použité sú len veľké
 písmená. Písmeno O reprezentuje nulu. Záporné hodnoty sú vyjadrené
 uvedením Unicode znaku mínus (−) na začiatku prevedeného reťazca.
 Hodnoty vyššie od tisíc (písmeno M) sú reprezentované s použitím
 Unicode kombinačných znakov, ktoré však 2D stroj Javy nevie
 korektne zobraziť – podrobnosti sú uvedené v opise metódy rímskeNaCelé.
Parametre:
celé – celé číslo určené na prevod
Návratová hodnota:
rímska reprezentácia hodnoty
Pozri tiež:
rímskeNaCelé(String)
celeNaRimske
public static String celeNaRimske(long celé)
 Alias pre celéNaRímske.
rímskeNaCelé
public static Long rímskeNaCelé(String rímske)
Prevedie zadaný reťazec obsahujúci číslo reprezentované
 v rímskej číselnej sústave na celé číslo.
 
 Metóda je značne liberálna. Znak mínus na začiatku reťazca
 spôsobí, že analyzované číslo bude prevedené na záporné, písmeno
 O je považované za nulu (malé aj veľké) a metóda rozpoznáva aj
 dva Unicode modifikátory, ktoré násobia hodnotu rímskeho znaku
 tisícom alebo miliónom. Ide o kombinačné znaky jednoduchej
 a dvojitej čiary nad predchádzajúcim znakom:  ̅,  ̿. Jednoduchá
 čiara násobí hodnotu predchádzajúceho písmena tisícom a dvojitá
 miliónom. Nevýhodou týchto špeciálnych znakov je to, že vnútorná
 konzola plátien a pečiatkové texty programovacieho rámca ich
 nevedia korektne zobraziť z dôvodu predvoleného spôsobu
 vykresľovania textov 2D strojom jazyka Java a tiež to, že
 v niektorých softvéroch sú tieto znaky zobrazované nad
 nasledujúcim znakom namiesto predchádzajúceho. Ak sú však
 v zadanom reťazci prítomné, tak ich táto metóda berie do úvahy
 a priraďuje ich vždy k predchádzajúcemu symbolu.
 
 Platné rímske číslice sú malé alebo veľké písmená: I (1),
 V (5), X (10), L (50), C (100), D (500) a M (1000). Ak je séria
 znakov s nižšou hodnotou uvedená pred znakom s vyššou hodnotou,
 tak je súčet hodnôt znakov s nižšou hodnotou od výsledku odrátaný
 a hodnota znaku s vyššou je okamžite spracovaná tak, že je
 k výsledku prirátaná bez ohľadu na to, či za ňou nasledujú ďalšie
 znaky s rovnakou hodnotou alebo znak s ešte vyššou hodnotou. To
 znamená, že napríklad reťazec IIIVVX má hodnotu 7 (čiže je
 oddelene spracovaná séria IIIV = 2 a VX = 5), pričom samostatný
 reťazec VVX má hodnotu 0.
Parametre:
rímske – rímska reprezentácia celého čísla
Návratová hodnota:
prevedená hodnota
Pozri tiež:
celéNaRímske(long)
rimskeNaCele
public static long rimskeNaCele(String reťazec)
 Alias pre rímskeNaCelé.
jePrvočíslo
public static boolean jePrvočíslo(long číslo)
Overí, či zadané číslo je prvočíslo. Metóda
 prevedie záporné číslo na kladné, pretože záporné
 čísla sú považované za združené (angl. associates)
 a v tomto zmysle je prvočíslom každé záporné číslo,
 ktorého kladný „súrodenec“ je prvočíslom [1, 2,
 3].
 
 Poznámka: Vnútorný
 mechanizmus sveta zabezpečuje dynamické vyhľadávanie
 potrebného množstva (kladných) prvočísiel podľa
 najvyššieho naposledy overeného čísla. Nájdené
 prvočísla vnútorne uchováva a používa na overovanie
 ostatných zadávaných čísiel.
 
 
 
 [1]
Can negative numbers be
 prime? PrimePages. Citované:
 16. 12. 2020.
 
 [2]
Gud, Git (asker) – Tanner, J. W. (answerer), et al.
 Do we have negative prime numbers? Mathematics Stack
 Exchange. 2014. Citované: 16. 12. 2020.
 
 [3]
Jagielski, Matthew – Cheng, Yuanyou
 F a.k.a. Fred) (answerers). Can negative numbers
 be prime? Quora. 2013, 2016. Citované:
 16. 12. 2020.
 
 
Parametre:
číslo – celé číslo, ktorého prvočíselnosť
     chceme overiť
Návratová hodnota:
true ak je zadané číslo
     prvočíslo; false v opačnom prípade
jePrvocislo
public static boolean jePrvocislo(long číslo)
 Alias pre jePrvočíslo.
aktivujŠtandardnýVstup
public static boolean aktivujŠtandardnýVstup()
Táto metóda vykoná jednorazovú akciu aktivovania štandardného
 vstupu s predvoleným kódovaním UTF-8. Jej volanie má zmysel len
 v prípade, že vstup ešte nebol úspešne aktivovaný. (Vstup nesmie
 byť aktívny, ani ukončený.) Skrytá inštancia prijímajúca údaje
 zo vstupu funguje asynchrónne v samostatnom vlákne. Pri prijatí
 údajov volá reakciu spracujRiadokVstupu
 a z toho vyplýva, že v čase aktivovania štandardného vstupu by
 mala byť aktívna obsluha udalostí,
 inak môže nastať strata prijatých údajov, najmä ak je štandardný
 vstup pripojený k externému prúdu vstupných údajov (napríklad
 z iného procesu alebo zo súboru). V prípade konečného vstupného
 prúdu je po dosiahnutí jeho konca spustená reakcia koniecVstupu. Overiť to, či je
 štandardný vstup (stále) aktívny sa dá s pomocou metódy štandardnýVstupAktívny. Určiť iné
 kódovanie údajov zo štandardného vstupu sa dá volaním inej
 verzie tejto metódy: aktivujŠtandardnýVstup(kódovanie).
 
 Príklad:
 
 
import knižnica.*;
public class ŠtandardnýVstupNaVnútornúKonzolu extends GRobot
{
    private ŠtandardnýVstupNaVnútornúKonzolu()
    {
        Svet.aktivujŠtandardnýVstup();
    }
    @Override public void spracujRiadokVstupu(String riadokVstupu)
    {
        Svet.farbaTextu(tmavohnedá);
        Svet.vypíšRiadok(riadokVstupu);
    }
    @Override public void koniecVstupu()
    {
        Svet.farbaTextu(oranžová);
        Svet.vypíšRiadok("koniec");
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("ŠtandardnýVstupNaVnútornúKonzolu.cfg");
        new ŠtandardnýVstupNaVnútornúKonzolu();
    }
}
 
 Výsledok:
 
 
 Výsledok.
 (Ako vidno, nastavenie správneho kódovania môže byť problém –
 nepodarilo sa to ani po viacerých pokusoch…)
Návratová hodnota:
ak bol štandardný vstup bezchybne aktivovaný, tak táto
     metóda vráti hodnotu true
Pozri tiež:
aktivujŠtandardnýVstup(String), 
štandardnýVstupAktívny(), 
čakajNaVstup(), 
ObsluhaUdalostí.spracujRiadokVstupu(String), 
ObsluhaUdalostí.koniecVstupu()
aktivujStandardnyVstup
public static boolean aktivujStandardnyVstup()
 Alias pre aktivujŠtandardnýVstup.
aktivujŠtandardnýVstup
public static boolean aktivujŠtandardnýVstup(String kódovanie)
Táto metóda vykoná jednorazovú akciu aktivovania štandardného
 vstupu so zadaným kódovaním. Platia pre ňu rovnaké pravidlá ako
 pre jej verziu bez parametra: aktivujŠtandardnýVstup().
Parametre:
kódovanie – kódovanie, ktoré má byť použité na dekódovanie
     údajov prijímaných zo štandardného vstupu
Návratová hodnota:
ak bol štandardný vstup bezchybne aktivovaný, tak táto
     metóda vráti hodnotu true
Pozri tiež:
aktivujŠtandardnýVstup(), 
štandardnýVstupAktívny(), 
čakajNaVstup(), 
ObsluhaUdalostí.spracujRiadokVstupu(String), 
ObsluhaUdalostí.koniecVstupu()
aktivujStandardnyVstup
public static boolean aktivujStandardnyVstup(String kódovanie)
 Alias pre aktivujŠtandardnýVstup.
štandardnýVstupAktívny
public static boolean štandardnýVstupAktívny()
Overí, či je štandardný vstup, ktorý bol aktivovaný metódou
 aktivujŠtandardnýVstup (alebo
 niektorou jej verziou) stále aktívny.
Návratová hodnota:
ak je štandardný vstup stále aktívny, tak táto metóda
     vráti hodnotu true
Pozri tiež:
aktivujŠtandardnýVstup(), 
aktivujŠtandardnýVstup(String), 
čakajNaVstup()
standardnyVstupAktivny
public static boolean standardnyVstupAktivny()
 Alias pre štandardnýVstupAktívny.
čakajNaVstup
public static String čakajNaVstup()
Táto metóda implementuje mechanizmus blokovania pri čakaní
 údajov zo štandardného vstupu (v samostatnom vlákne). Ak nie je
 vstup aktívny, tak ho
 aktivuje (s použitím
 predvoleného kódovania UTF-8). Ak už nie je možné prijať žiadne
 ďalšie údaje (vstupný prúd bol konečný a už sa skončil – napríklad
 keď prichádzal cez rúru (pipe) operačného systému), tak táto
 metóda bez ďalšieho čakania vráti hodnotu null.
 
 Príklad:
 
 
System.out.print("Zadaj svoje meno: ");
String meno = Svet.čakajNaVstup();
System.out.println("Ahoj, " + meno + "!");
 
 Výsledok:
 
 
Zadaj svoje meno: Adam
Ahoj, Adam!
 
 Príklad:
 
 
import knižnica.*;
public class ČakanieNaVstup extends GRobot
{
    public static void main(String[] args)
    {
        // Dôležitá poznámka:
        // ------------------
        // 
        // Tento komentár obsahuje Java kód ukazujúci štandardný postup pri
        // čítaní údajov zo štandardného vstupu bez použitia programovacieho
        // rámca GRobot:
        // 
        // try (java.io.BufferedReader čítač = new java.io.BufferedReader(
        // 	new java.io.InputStreamReader(System.in)))
        // &#123;
        // 	String riadokVstupu = čítač.readLine();
        // 	System.out.println("Riadok vstupu: " + riadokVstupu);
        // &#125;
        // catch (java.io.IOException e)
        // &#123;
        // 	e.printStackTrace();
        // &#125;
        // System.out.println("Vstupný prúd bol automaticky zavretý.");
        // 
        // Tento spôsob nie je kompatibilný so spôsobom čítania vstupu
        // programovacím rámcom GRobot. Ak by sme sa pokúsili použiť oboje,
        // vznikla by výnimka.
        // 
        // Nasleduje príklad použitia čítania štandardného vstupu
        // s použitím programovacieho rámca GRobot…
        
        // Počet určíme s pomocou reťazca zadaného do prvého argumentu
        // aplikácie, pričom najmenší povolený počet je 1.
        int počet = 1;
        if (args.length &gt; 0)
        {
            Long číslo = Svet.reťazecNaCeléČíslo(args[0]);
            if (null != číslo) počet = číslo.intValue();
        }
        if (počet 0) počet = 1;
        System.out.println("(Počet reťazcov: " + počet + ")");
        // Prečítame zo štandardného vstupu určený počet reťazcov.
        for (int i = 1; i 
 Ukážka čítania vstupu
 v režime príkazového riadka operačného systému Windows.
Návratová hodnota:
reťazec prečítaný zo štandardného vstupu alebo
     null
Pozri tiež:
aktivujŠtandardnýVstup(), 
aktivujŠtandardnýVstup(String), 
štandardnýVstupAktívny(), 
čakaj(double), 
čakajNaKláves(), 
čakajNaKlik(), 
čakajNaKlikAleboKláves()
cakajNaVstup
public static String cakajNaVstup()
 Alias pre čakajNaVstup.
čakajNaKláves
public static KeyEvent čakajNaKláves()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na stlačenie klávesu. Ide o čakanie na zadanie znaku (z toho
 vyplýva, že napríklad funkčné klávesy nie sú brané do úvahy).
 Znak je týmto procesom skonzumovaný (a vrátený v návratovej
 hodnote tejto metódy). To znamená, že prislúchajúce reakcie
 zadanieZnaku nie sú
 spustené. Na to, aby bola táto metóda použiteľná, musí byť
 Svet inicializovaný, inak metóda vráti hodnotu
 null.
 
 Tip: Návratovou hodnotou je udalosť KeyEvent. Použite jej metódu getKeyChar na získanie stlačeného znaku.
 
 Pozor! Použitie tejto metódy
 (a jej príbuzných) je kritické! Metóda slúži výhradne na
 pozastavenie činnosti veľmi jednoduchého (synchrónne
 vykonávaného) programu, ktorého činnosť
 je prakticky úplne dokončená v rámci konštruktora hlavnej triedy
 (t. j. v rámci inicializácie aplikácie). Metóda síce môže slúžiť
 na pozastavenie inicializácie akejkoľvek aplikácie, ale môže byť
 použitá výhradne týmto spôsobom! (To jest, počas inicializácie.)
 Dôvodom je, že metóda musí byť spustená len v hlavnom vlákne
 aplikácie a nejestvuje prakticky žiadny iný spôsob, ktorým sa toto
 dá zaručiť, len ten, že metóda bude vykonaná počas inicializácie.
 Všetky ďalšie aktivity aplikácie sú už totiž realizované
 prostredníctvom vlákna slúžiaceho na obsluhu udalostí, ktoré
 vykonanie tejto metódy (a jej príbuzných) zablokuje!
Návratová hodnota:
udalosť klávesnice alebo hodnota null
Pozri tiež:
čakaj(double), 
čakajNaVstup(), 
čakajNaKlik(), 
čakajNaKlikAleboKláves()
cakajNaKlaves
public static KeyEvent cakajNaKlaves()
 Alias pre čakajNaKláves.
čakajNaKlik
public static MouseEvent čakajNaKlik()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na kliknutie ľubovoľným tlačidlom myši. Udalosť je týmto procesom
 skonzumovaná (a vrátená v návratovej hodnote tejto metódy). To
 znamená, že prislúchajúce reakcie klik nie sú spustené. Na to, aby bola táto
 metóda použiteľná, musí byť Svet inicializovaný, inak
 metóda vráti hodnotu null.
 
 Tip: Návratovou hodnotou je udalosť MouseEvent. Môžete použiť jej metódy getButton, getX,
 getY a podobne na získanie podrobností
 o udalosti.
 
 Pozor! Použitie tejto metódy
 (a jej príbuzných) je kritické! Metóda slúži výhradne na
 pozastavenie činnosti veľmi jednoduchého (synchrónne
 vykonávaného) programu, ktorého činnosť
 je prakticky úplne dokončená v rámci konštruktora hlavnej triedy
 (t. j. v rámci inicializácie aplikácie). Metóda síce môže slúžiť
 na pozastavenie inicializácie akejkoľvek aplikácie, ale môže byť
 použitá výhradne týmto spôsobom! (To jest, počas inicializácie.)
 Dôvodom je, že metóda musí byť spustená len v hlavnom vlákne
 aplikácie a nejestvuje prakticky žiadny iný spôsob, ktorým sa toto
 dá zaručiť, len ten, že metóda bude vykonaná počas inicializácie.
 Všetky ďalšie aktivity aplikácie sú už totiž realizované
 prostredníctvom vlákna slúžiaceho na obsluhu udalostí, ktoré
 vykonanie tejto metódy (a jej príbuzných) zablokuje!
Návratová hodnota:
udalosť myši alebo hodnota null
Pozri tiež:
čakaj(double), 
čakajNaVstup(), 
čakajNaKláves(), 
čakajNaKlikAleboKláves()
cakajNaKlik
public static MouseEvent cakajNaKlik()
 Alias pre čakajNaKlik.
čakajNaKlikAleboKláves
public static InputEvent[] čakajNaKlikAleboKláves()
Slúži na pozastavenie (blokovanie) programu s cieľom čakania
 na stlačenie ľubovoľného klávesu alebo kliknutie ľubovoľným
 tlačidlom myši. Návratovou hodnotou je dvojprvkové pole udalostí
 všeobecného typu: InputEvent. Prvý prvok je
 rezervovaný pre udalosť klávesnice (KeyEvent)
 a druhý pre udalosť myši (MouseEvent). Tá
 udalosť, ktorá vznikne skôr, je týmto procesom skonzumovaná
 a vrátená v prislúchajúcom prvku návratovej hodnoty tejto metódy.
 (To znamená, že prislúchajúce reakcie zadanieZnaku a klik nie sú spustené.) Ten prvok
 návratovej hodnoty, ktorého udalosť nevznikla, bude nastavený na
 hodnotu null. Na to, aby bola táto metóda použiteľná,
 musí byť Svet inicializovaný, inak bude pole
 návratovej hodnoty obsahovať dve hodnoty null.
 
 Tip: Pozri aj opisy metód čakajNaKláves a čakajNaKlik.
 
 Pozor! Použitie tejto metódy
 (a jej príbuzných) je kritické! Metóda slúži výhradne na
 pozastavenie činnosti veľmi jednoduchého (synchrónne
 vykonávaného) programu, ktorého činnosť
 je prakticky úplne dokončená v rámci konštruktora hlavnej triedy
 (t. j. v rámci inicializácie aplikácie). Metóda síce môže slúžiť
 na pozastavenie inicializácie akejkoľvek aplikácie, ale môže byť
 použitá výhradne týmto spôsobom! (To jest, počas inicializácie.)
 Dôvodom je, že metóda musí byť spustená len v hlavnom vlákne
 aplikácie a nejestvuje prakticky žiadny iný spôsob, ktorým sa toto
 dá zaručiť, len ten, že metóda bude vykonaná počas inicializácie.
 Všetky ďalšie aktivity aplikácie sú už totiž realizované
 prostredníctvom vlákna slúžiaceho na obsluhu udalostí, ktoré
 vykonanie tejto metódy (a jej príbuzných) zablokuje!
 
 Príklad:
 
 Tento príklad ukazuje možné využitie návratovej hodnoty tejto
 metódy na získanie podrobností o udalosti, ktorá čakanie
 ukončila. Aplikácia opakuje príkaz čakania (so zisťovaním
 a vypisovaním detailov o vzniknutej udalosti), dokedy nie je
 stlačené ľavé tlačidlo myši (na ploche aplikácie).
 
 
import knižnica.GRobot;
import knižnica.Svet;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
public class TestČakania extends GRobot
{
    private KeyEvent kláves;
    private MouseEvent klik;
    private InputEvent[] udalosti;
    private TestČakania()
    {
        Svet.vypíšRiadok("Stlačte ľubovoľný kláves alebo kliknite " +
            "ľubovoľným tlačidlom myši.");
        Svet.vypíšRiadok("(Kliknutie ľavého tlačidla myši " +
            "ukončí aplikáciu.)");
        do
        {
            // Získanie a výpis podrobností o udalosti:
            udalosti = Svet.čakajNaKlikAleboKláves();
            kláves = (KeyEvent)udalosti[0];
            klik = (MouseEvent)udalosti[1];
            if (null != kláves)
                Svet.vypíšRiadok("ASCII (", (int)kláves.getKeyChar(),
                    ")", kláves.getKeyChar());
            if (null != klik)
                Svet.vypíšRiadok(klik.getButton() + ": " +
                    klik.getX() + ", " + klik.getY());
        }
        while (null == klik || 1 != klik.getButton());
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("TestČakania.cfg");
        new TestČakania();
        Svet.vypíšRiadok("Koniec.");
        Svet.čakaj(1.5);
        Svet.koniec();
    }
}
 
 Výsledné výpisy na obrazovke (konzole programovacieho rámca)
 môžu vyzerať napríklad takto:
 
 
Stlačte ľubovoľný kláves alebo kliknite ľubovoľným tlačidlom myši.
(Kliknutie ľavého tlačidla myši ukončí aplikáciu.)
ASCII (116)t
ASCII (101)e
ASCII (115)s
ASCII (116)t
ASCII (10)
ASCII (32) 
ASCII (32) 
3: 364, 275
ASCII (32) 
2: 332, 104
ASCII (32) 
1: 217, 339
Koniec.
Návratová hodnota:
dvojprvkové pole vstupných udalostí všeobecného typu
     (InputEvent; pričom v prvom prvku je
     očakávaná udalosť klávesnice KeyEvent,
     ak vznikla, a v druhom udalosť myši MouseEvent – rovnako, ak vznikla)
Pozri tiež:
čakaj(double), 
čakajNaVstup(), 
čakajNaKláves(), 
čakajNaKlik()
cakajNaKlikAleboKlaves
public static InputEvent[] cakajNaKlikAleboKlaves()
 Alias pre čakajNaKlikAleboKláves.
čakajNaKlávesAleboKlik
public static InputEvent[] čakajNaKlávesAleboKlik()
 Alias pre čakajNaKlikAleboKláves.
cakajNaKlavesAleboKlik
public static InputEvent[] cakajNaKlavesAleboKlik()
 Alias pre čakajNaKlikAleboKláves.
režimLadenia
public static void režimLadenia(boolean zapniLadenie)
Zapne alebo vypne režim ladenia programovacieho rámca GRobot.
 V režime ladenia sú vypisované rôzne chybové hlásenia na
 štandardný chybový výstup (systémový terminál) a informácie
 o vykonávaní príkazov interaktívneho režimu alebo skriptu na vnútornú konzolu programovacieho rámca (na strop). Tiež
 je pravidelne spúšťaná reakcia obsluhy udalostí ladenie, ak je
 definovaná obsluha udalostí.
 
 Poznámka: Zapnutie výpisu chybových
 hlásení na štandardný chybový výstup nemusí byť vždy žiaduce,
 preto vznikla ďalšia verzia tejto metódy: režimLadenia(zapniLadenie,
 vypíšChybovéHlásenia).
Parametre:
zapniLadenie – true alebo false
Pozri tiež:
režimLadenia(), 
lenRežimLadenia(), 
režimLadenia(boolean, boolean), 
interaktívnyRežim(boolean), 
vykonajPríkaz(String), 
vykonajSkript(String[]), 
ObsluhaUdalostí.ladenie(int, String, int)
rezimLadenia
public static void rezimLadenia(boolean zapniLadenie)
 Alias pre režimLadenia.
režimLadenia
public static void režimLadenia(boolean zapniLadenie,
                                boolean vypíšChybovéHlásenia)
Zapne alebo vypne režim ladenia programovacieho rámca GRobot so
 spresnením zapnutia alebo vypnutia výpisu chybových hlásení
 programovacieho rámca. Vypnutie výpisu chybových hlásení na štandardný
 chybový výstup (systémový terminál) nevypne výpis informácií
 o vykonávaní príkazov interaktívneho režimu alebo skriptu na vnútornú konzolu programovacieho rámca (na strop). Toto
 správanie sa dá ovplyvniť v tele reakcie ladenie (pozri napríklad
 správy ladenia: VYPÍSAŤ_PRÍKAZ, VYPÍSAŤ_RIADOK alebo VYPÍSAŤ_MENOVKY).
Parametre:
zapniLadenie – true alebo false
vypíšChybovéHlásenia – true alebo false
Pozri tiež:
režimLadenia(), 
lenRežimLadenia(), 
režimLadenia(boolean), 
výpisChybovýchHlásení(), 
interaktívnyRežim(boolean), 
vykonajPríkaz(String), 
vykonajSkript(String[]), 
ObsluhaUdalostí.ladenie(int, String, int)
rezimLadenia
public static void rezimLadenia(boolean zapniLadenie,
                                boolean vypíšChybovéHlásenia)
 Alias pre režimLadenia.
režimLadenia
public static boolean režimLadenia()
Zistí, či je zapnutý režim ladenia programovacieho rámca
 GRobot alebo aspoň výpis chybových hlásení programovacieho rámca.
 (Stačí, ak je aktívna aspoň jedna z vlastností. Pozri: režimLadenia. Táto metóda bola
 takto navrhnutá z dôvodu kompatibility s jej jednoparametrickou
 verziou: režimLadenia(zapniLadenie).)
Návratová hodnota:
true alebo false
Pozri tiež:
režimLadenia(boolean), 
režimLadenia(boolean, boolean)
rezimLadenia
public static boolean rezimLadenia()
 Alias pre režimLadenia.
lenRežimLadenia
public static boolean lenRežimLadenia()
Zistí, či je zapnutý režim ladenia programovacieho rámca
 GRobot bez ohľadu na režim výpisu chybových hlásení rámca.
 (Pozri: režimLadenia.)
Návratová hodnota:
true alebo false
Pozri tiež:
režimLadenia(), 
režimLadenia(boolean), 
režimLadenia(boolean, boolean), 
výpisChybovýchHlásení()
lenRezimLadenia
public static boolean lenRezimLadenia()
 Alias pre lenRežimLadenia.
výpisChybovýchHlásení
public static boolean výpisChybovýchHlásení()
Zistí, či je zapnutý výpis chybových hlásení programovacieho
 rámca. (Pozri: režimLadenia.)
Návratová hodnota:
true alebo false
Pozri tiež:
režimLadenia(), 
lenRežimLadenia(), 
režimLadenia(boolean), 
režimLadenia(boolean, boolean)
vypisChybovychHlaseni
public static boolean vypisChybovychHlaseni()
 Alias pre výpisChybovýchHlásení.
premennáJestvuje
public static boolean premennáJestvuje(String názov,
                                       Class&lt;?&gt; typ)
Zistí, či premenná interaktívneho režimu so zadaným názvom a typom jestvuje (je
 definovaná).
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Návratová hodnota:
ak premenná zadaného údajového typu jestvuje, tak je
     návratovou hodnotou tejto metódy hodnota true;
     ak premenná nejestvuje alebo bol zadaný nepovolený údajový
     typ premennej, tak je návratovou hodnotou tejto metódy
     hodnota false
Pozri tiež:
PremennéSkriptu#jestvuje(String, Trieda)
premennaJestvuje
public static boolean premennaJestvuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
premennáExistuje
public static boolean premennáExistuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
premennaExistuje
public static boolean premennaExistuje(String názov,
                                       Class&lt;?&gt; typ)
 Alias pre premennáJestvuje.
čítajPremennú
public static Object čítajPremennú(String názov,
                                   Class&lt;?&gt; typ)
Zistí hodnotu premennej zadaného údajového typu
 interaktívneho režimu. (Ak hodnota jestvuje.)
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Návratová hodnota:
ak premenná jestvuje, tak je návratovou hodnotou tejto
     metódy hodnota tejto premennej; ak premenná nejestvuje,
     prípadne bol zadaný nepovolený údajový typ premennej, tak je
     návratovou hodnotou tejto metódy hodnota null
Pozri tiež:
PremennéSkriptu#čítaj(String, Trieda)
citajPremennu
public static Object citajPremennu(String názov,
                                   Class&lt;?&gt; typ)
 Alias pre čítajPremennú.
zapíšPremennú
public static boolean zapíšPremennú(String názov,
                                    Object hodnota)
Nastaví novú hodnotu premennej
 interaktívneho režimu.
 Ak je zadaná hodnota nepovoleného údajového typu, tak nebude
 nastavená hodnota žiadnej premennej. To isté platí pri pokuse
 o zapísanie hodnoty null. Úspešnosť (resp. neúspešnosť)
 nastavenia hodnoty premennej potvrdzuje návratová hodnota tejto
 metódy – true (úspech) / false
 (neúspech).
 
 Poznámka: Táto metóda
 automaticky definuje nejestvujúce premenné.
Parametre:
názov – názov premennej
hodnota – hodnota premennej povoleného údajového typu –
     povolené sú: Double,
     Color, Poloha alebo
     String
Návratová hodnota:
kontrolná návratová hodnota (ide najmä o overenie toho,
     či zadaná hodnota naozaj bola niektorého povoleného typu);
     ak je návratová hodnota true, tak bola zadaná
     hodnota zapísaná do premennej prislúchajúceho údajového typu
Pozri tiež:
PremennéSkriptu#zapíš(String, Object)
zapisPremennu
public static boolean zapisPremennu(String názov,
                                    Object hodnota)
 Alias pre zapíšPremennú.
vymažPremennú
public static void vymažPremennú(String názov,
                                 Class&lt;?&gt; typ)
Vymaže definíciu premennej zadaného údajového typu
 interaktívneho režimu. (Ak jestvuje.)
Parametre:
názov – názov premennej
typ – typ premennej – povolené sú: Double.class,
     Color.class, Poloha.class alebo
     String.class
Pozri tiež:
PremennéSkriptu#vymaž(String, Trieda)
vymazPremennu
public static void vymazPremennu(String názov,
                                 Class&lt;?&gt; typ)
 Alias pre vymažPremennú.
vykonajSkript
public static int vykonajSkript(String[] riadky)
Vykoná skript uložený v poli reťazcov. Pozri triedu Skript.
 
 Poznámka: Informácie o pravidlách
 vykonávania boli presunuté do opisu triedy Skript.
Parametre:
riadky – pole reťazcov reprezentujúcich riadky skriptu
Návratová hodnota:
riadok, na ktorom vznikla chyba (ak chyba nevznikla,
     tak je vrátená nula)
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
vykonajSkript
public static int vykonajSkript(String skript)
Vykoná skript zadaný vo forme reťazca. Riadky musia byť
 oddelené znakom nového reťazca \n.
 Pravidlá vykonávania sú rovnaké ako pri metóde
 vykonajSkript(riadky).
Parametre:
skript – skript uložený v jednom reťazci
Návratová hodnota:
riadok, na ktorom vznikla chyba (ak chyba nevznikla,
     tak je vrátená nula)
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
vykonajSkript
public static int vykonajSkript(List&lt;String&gt; skript)
Vykoná skript zadaný vo forme parametrického zoznamu. Metóda
 vytvorí zo zoznamu kópiu do poľa reťazcov, aby nenastal konflikt
 pri prípadnej paralelnej úprave zoznamu, čiže ak sa zoznam počas
 vykonávania skriptu zmení, vykonávanie tým nebude ovplyvnené,
 pretože sa v skutočnosti vykonáva kópia skriptu vytvorená v čase
 volania tejto metódy. Z toho vyplýva, že pravidlá vykonávania sú
 rovnaké ako pri metóde vykonajSkript(riadky).
Parametre:
skript – skript uložený v parametrickom zozname
Návratová hodnota:
riadok, na ktorom vznikla chyba (ak chyba nevznikla,
     tak je vrátená nula)
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
vykonajSkript
public static int vykonajSkript(String skript,
                                boolean zoSúboru)
Vykoná skript zadaný vo forme reťazca alebo vo forme názvu
 súboru, z ktorého má byť prečítaný. Ak je druhý parameter rovný
 false, tak je prvý parameter považovaný za skript
 a metóda sa správa rovnako ako metóda vykonajSkript(skript). Ak je druhý
 parameter rovný true, tak prvý parameter je
 považovaný za názov súboru, z ktorého má byť skript prečítaný
 a vykonaný. Pravidlá vykonávania sú v oboch prípadoch rovnaké
 ako pri metóde vykonajSkript(riadky).
 
 Príklad skriptu uloženého v súbore:
 
 Poznámka: Skript musí byť uložený
 s kódovaním UTF-8.
 
 skoč -72.5, -30
 hrúbka čiary 3.2
 farba žltá
 začni cestu
 nech i = 8
  
 :opakuj
   dopredu 60
   vpravo 45
 dokedy i, opakuj
  
 vyplň cestu
 farba červená
 obkresli cestu
  
 farba čierna
 domov
 farba textu purpurová
 vypíš riadok "Hotovo!
 
 Program:
 
 Ak predchádzajúci skript uložíme do súboru s názvom
 „Skript.GRScript,“ tak na jeho spustenie môžeme použiť
 nasledujúci úryvok kódu:
 
 
interaktívnyRežim(true);
Svet.interaktívnyRežim(true);
int kód = Svet.vykonajSkript("Skript.GRScript", true);
if (0 &gt; kód)
    Svet.vypíšRiadok("Chyba pri čítaní súboru (", kód, ").");
else
    if (0 &lt; kód) Svet.vypíšRiadok("Chyba na riadku: ", kód);
 
 Výsledok:
 
 
 Výsledok vykonania skriptu
 vyššie uvedeným programom.
Parametre:
skript – názov súboru so skriptom alebo skript uložený
     v jednom reťazci
zoSúboru – ak je true, tak je prvý parameter
     považovaný za názov súboru so skriptom; ak je false,
     tak je prvý parameter považovaný za skript (rovnako ako pri
     metóde vykonajSkript(skript))
Návratová hodnota:
riadok, na ktorom vznikla chyba (ak chyba nevznikla,
     tak je vrátená nula); ak je návratová hodnota záporná, znamená
     to, že vznikla chyba pri čítaní súboru
Výnimky:
GRobotException – ak skript so zadaným menom nebol nájdený
     alebo ak bolo vykonávanie niektorého príkazu skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
nahrajSkript
public static Skript nahrajSkript(String názov,
                                  String súbor)
Nahrá skript zo súboru a uloží ho do vnútornej pamäte pod
 zadaným názvom. Ak počas nahrávania skriptu vznikne chyba, tak
 metóda vráti hodnotu null, v opačnom prípade vráti
 inštanciu triedy Skript na prípadné ďalšie
 spracovanie.
Parametre:
názov – názov skriptu, pod ktorým bude tento skript (v prípade
     úspešného nahratia) evidovaný vo vnútornom zozname skriptov
súbor – súbor, z ktorého bude skript nahraný
Návratová hodnota:
inštancia triedy Skript na ďalšie
     spracovanie, prípadne null
Pozri tiež:
nahrajSkript(String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
nahrajSkript
public static Skript nahrajSkript(String súbor)
Toto je klon metódy nahrajSkript(názov, súbor), ktorý bol definovaný preto, aby
 bolo možné nahrávať zo súborov skripty aj v rámci iných
 skriptov. Metóda bude považovať za názov skriptu meno súboru,
 to jest časť medzi posledným oddeľovačom cesty (buď \,
 alebo /) a posledným oddeľovačom prípony
 (.).
Parametre:
súbor – súbor, z ktorého bude skript nahraný; názov skriptu
     je tiež odvodený z tohto reťazca
Návratová hodnota:
inštancia úspešne nahratého skriptu alebo hodnota
     null
Pozri tiež:
nahrajSkript(String, String)
vyrobSkript
public static Skript vyrobSkript(String skript,
                                 boolean zoSúboru)
Vyrobí skript (zo zadaného textového reťazca alebo zo súboru)
 a vráti ho v inštancii triedy Skript na ďalšie
 spracovanie. Ak je parameter zoSúboru rovný
 false, tak je v parametri skript očakávaný
 text skriptu. Ak je parameter zoSúboru rovný
 true, tak je v parametri skript očakávaný
 názov súboru, z ktorého má byť skript prečítaný. Ak vznikne počas
 čítania alebo spracovania (výroby) skriptu chyba, tak metóda
 vráti hodnotu null.
Parametre:
skript – názov súboru so skriptom alebo skript uložený
     v jednom reťazci
zoSúboru – ak je true, tak je prvý parameter
     považovaný za názov súboru so skriptom; ak je false,
     tak je prvý parameter považovaný za skript (rovnako ako pri
     metóde vyrobSkript(skript))
Návratová hodnota:
inštancia triedy Skript alebo null
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
vyrobSkript
public static Skript vyrobSkript(String skript)
Vyrobí zo zadaného textového reťazca skript a vráti ho
 v inštancii triedy Skript na ďalšie spracovanie.
 Ak počas výroby skriptu vznikne chyba, tak metóda vráti hodnotu
 null.
Parametre:
skript – skript v textovom tvare (reťazec obsahujúci celý
     skript)
Návratová hodnota:
inštancia triedy Skript alebo null
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
vyrobSkript
public static Skript vyrobSkript(List&lt;String&gt; skript)
Vyrobí zo zadaného zoznamu reťazcov reprezentujúcich riadky
 skriptu nový skript a vráti ho v inštancii triedy Skript na ďalšie spracovanie. Ak vznikne počas výroby skriptu
 chyba, tak metóda vráti hodnotu null.
Parametre:
skript – zoznam s riadkami skriptu
Návratová hodnota:
inštancia triedy Skript alebo null
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
vyrobSkript
public static Skript vyrobSkript(String[] skript)
Vyrobí zo zadaného reťazcového poľa, ktorého prvky reprezentujú
 riadky skriptu, nový skript a vráti ho na ďalšie spracovanie
 v inštancii triedy Skript. Ak vznikne počas výroby
 skriptu chyba, tak metóda vráti hodnotu null.
Parametre:
skript – pole reťazcov reprezentujúcich riadky skriptu
Návratová hodnota:
inštancia triedy Skript alebo null
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
registrujSkript
public static Skript registrujSkript(String názov,
                                     String skript)
Vyrobí zo zadaného reťazca nový skript, registruje ho pod
 zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
 Metóda funguje podobne ako metóda nahrajSkript s tým rozdielom, že skript nie je čítaný
 zo súboru, ale je prijatý vo forme reťazca.
Parametre:
názov – názov skriptu, pod ktorým bude tento skript (v prípade
     úspešného vyrobenia) evidovaný vo vnútornom zozname skriptov
skript – skript v textovom tvare (reťazec obsahujúci celý
     skript)
Návratová hodnota:
inštancia triedy Skript na ďalšie
     spracovanie alebo null v prípade chyby
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
registrujSkript
public static Skript registrujSkript(String názov,
                                     List&lt;String&gt; skript)
Vyrobí zo zadaného zoznamu reťazcov nový skript, registruje
 ho pod zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
 Metóda funguje podobne ako metóda vyrobSkript (ibaže skript navyše aj registruje vo vnútornej
 pamäti).
Parametre:
názov – názov skriptu, pod ktorým bude tento skript (v prípade
     úspešného vyrobenia) evidovaný vo vnútornom zozname skriptov
skript – zoznam s riadkami skriptu
Návratová hodnota:
inštancia triedy Skript na ďalšie
     spracovanie alebo null v prípade chyby
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, String[]), 
dajSkript(String), 
volajSkript(String)
registrujSkript
public static Skript registrujSkript(String názov,
                                     String[] skript)
Vyrobí zo zadaného reťazcového poľa nový skript, registruje
 ho pod zadaným názvom a vráti ho na prípadné ďalšie spracovanie.
 Metóda funguje podobne ako metóda vyrobSkript (ibaže skript navyše aj registruje vo vnútornej
 pamäti).
Parametre:
názov – názov skriptu, pod ktorým bude tento skript (v prípade
     úspešného vyrobenia) evidovaný vo vnútornom zozname skriptov
skript – pole reťazcov reprezentujúcich riadky skriptu
Návratová hodnota:
inštancia triedy Skript na ďalšie
     spracovanie alebo null v prípade chyby
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
dajSkript(String), 
volajSkript(String)
dajSkript
public static Skript dajSkript(String názov)
Vráti inštanciu skriptu registrovanú vo vnútornej pamäti programovacieho rámca
 pod zadaným menom.
Parametre:
názov – názov skriptu vopred registrovaného vo vnútornom
     zozname skriptov (napríklad metódou nahrajSkript)
Návratová hodnota:
inštancia triedy Skript alebo null
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
volajSkript(String)
volajSkript
public static int volajSkript(String názov)
Spustí skript registrovaný vo vnútornej pamäti rámca pod zadaným menom.
 
 Poznámka: Rekurzívne spúšťanie skriptov
 nie je povolené.
 
 Obmedzenie zákazu rekurzie platí najmä pre túto metódu, ale
 ak nie je hĺbka rekurzie príliš veľká, dá sa obísť metódami, ktoré
 každým volaním čítajú a vytvárajú nové inštancie skriptov (čo je
 pamäťovo náročné, práve preto nesmie byť hĺbka rekurzie príliš
 veľká). Ukazuje to nasledujúci príklad (nižšie; uložený v dvoch
 skriptoch), ktorý na svoje fungovanie potrebuje tento spúšťač
 skriptov:
 
 
import knižnica.*;
import knižnica.podpora.ExpressionProcessor;
public class SpustiSkript extends GRobot
{
    // Špeciálny príkaz (dostupný v skripte ako: list "name) slúžiaci na
    // deklaráciu premennej typu pole alebo vymazanie obsahu poľa. (Polia
    // sú súčasťou triedy ExpressionProcessor a sú dynamické.)
    public static void list(String name)
    {
        ExpressionProcessor.globalVariables.getOrCreate(name).clear();
    }
    // Špeciálny príkaz (dostupný v skripte ako: size "name) slúžiaci na
    // overenie aktuálnej veľkosti poľa.
    public static double size(String name)
    {
        ExpressionProcessor.Variable list =
            ExpressionProcessor.globalVariables.get(name);
        if (null == list) return -2;
        return list.size();
    }
    private SpustiSkript(String[] args)
    {
        // V skripte (nižšie) sú interaktívne inštancie vždy explicitne určené
        // s pomocou riadkov začínajúcich sa zavináčom. Keby to tak nebolo,
        // museli by byť interaktívne inštancie zapnuté týmito príkazmi:
        // 
        // 	interaktívnyRežim(true);
        // 	Svet.interaktívnyRežim(true);
        // Spúšťanie skriptov zo súborov, ktorých názvy boli zadané ako
        // argumenty príkazového riadka procesu (príkazového riadka OS) a čo
        // najpresnejší výpis výsledku (najmä v súvislosti so zachytením
        // chybových stavov, ktoré sú kľúčové pri ladení skriptov; poznámka:
        // rekurzívne spustené skripty vracajú svoje chybové stavy priamo do
        // skriptov, ktoré ich volajú, preto nie je možné chyby, ktoré v nich
        // vzniknú vypísať tu, ale iba v rámci volajúceho skriptu, na čo
        // reflektuje skript stromB.GRScript).
        for (String arg : args)
        {
            if (!arg.endsWith(".GRScript")) arg += ".GRScript";
            int kód = Svet.vykonajSkript(arg, true);
            if (0 &gt; kód)
                Svet.vypíšRiadok("Chyba pri čítaní súboru „", arg,
                    "“ (", kód, ").");
            else if (0 &lt; kód)
            {
                Svet.vypíšRiadok("Chyba na riadku: ", kód);
                Svet.formulujChybuSkriptu(kód);
            }
            else
                Svet.vypíšRiadok("Skript „", arg, "“ bol vykonaný úspešne.");
            if (!GRobotException.denník.prázdny())
            {
                Svet.vypíšRiadok("Správy z denníka chýb:");
                for (GRobotException.Chyba chyba : GRobotException.denník)
                {
                    if (null != chyba.výnimka) Svet.vypíšRiadok(chyba.výnimka);
                    if (null != chyba.správa) Svet.vypíšRiadok(chyba.správa);
                }
                GRobotException.denník.vymaž();
            }
        }
    }
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("SpustiSkript.cfg");
        new SpustiSkript(args);
    }
}
 
 Príklad:
 
 Tieto dva skripty (nižšie) vyžadujú na spustenie a správne
 fungovanie spúšťač uvedený vyššie, ktorý obsahuje definície dvoch
 nových príkazov list a size (čím je zároveň
 ukázaná možnosť rozširovania skriptov programovacieho rámca o nové
 príkazy).
 
 Obsah súboru „PytagorovStrom.GRScript“:
 
 
 
 
 @svet
 nahraj skript "stromB.GRScript
 nech dĺžka = 100
 nech polovica = 50
 nech odvesna = 70.7106781
 nech počet = 0
  @robot
  list "dĺžky
  list "polovice
  list "odvesny
  odskoč 125
  
 nekresli
 nech parameter = 100
 volaj skript "stromB
 kresli
 
 
 Obsah súboru „stromB.GRScript“:
 
 
 @robot
 ; Počiatočné hodnoty:
 ; nech dĺžka = 100
 ; nech polovica = 50
 ; nech odvesna = 70.7106781
 ; nech počet = 0
 ; nech parameter = 100
  
= 20
  #dĺžky[počet] = dĺžka
  #polovice[počet] = polovica
  #odvesny[počet] = odvesna
  nech počet + 1
  
  nech dĺžka = parameter
  nech polovica = #dĺžka * 0.5
  nech odvesna = #dĺžka * 0.707106781
  
  odskoč #polovica
  vpravo 90
  vpred #polovica
  
  vľavo 90
  vpred #dĺžka
  
  skoč #polovica
  vpravo 45
  
   @svet
   nech parameter = odvesna
   nech kód = vykonaj skript "stromB.GRScript", 1
   ak #0 <> kód
    vypíš "Chyba ", kód
    nech text = text chyby kód
    vypíš riadok ": ", text
  
  vľavo 45
  odskoč #polovica
  
  vľavo 90
  vpred #dĺžka
  
  vpravo 90
  skoč #polovica
  vľavo 45
  
   @svet
   nech parameter = odvesna
   nech kód = vykonaj skript "stromB.GRScript", 1
   ak #0 <> kód
    vypíš "Chyba ", kód
    nech text = text chyby kód
    vypíš riadok ": ", text
  
  vpravo 45
  odskoč #polovica
  vľavo 90
  
  vľavo 90
  vpred #dĺžka
  
  vľavo 90
  vpred #polovica
  
  vľavo 90
  skoč #polovica
  
  nech počet – 1
  nech dĺžka = #dĺžky[počet]
  nech polovica = #polovice[počet]
  nech odvesna = #odvesny[počet]
 
 
 Po skompilovaní spúšťača a uloženia skriptov na lokalitu,
 z ktorej budú dostupné pre spúšťač treba zadať názov skriptu ako
 parameter spúšťača, napríklad takýmto príkazom do príkazového
 riadka konzoly (napr. príkazového riadka OS):
 
 java -Dfile.encoding=UTF-8 -cp c:\_jEdit\GRobot.jar;.\ SpustiSkript PytagorovStrom.GRScript
Poznámky: Java musí byť dostupná na ceste
(PATH) operačného systému. Umiestnenie c:\_jEdit musí obsahovať
balíček programovacieho rámca GRobot.jar alebo musí byť táto cesta
zmenená na také umiestnenie, ktoré tento balíček obsahuje. Skripty
a spúšťač musia byť umiestnené na aktuálnej ceste konzoly OS
(tzv. current path).
 Výsledok vykonania skriptov.
Parametre:
názov – názov skriptu vopred registrovaného vo vnútornom
  zozname skriptov (napríklad metódou nahrajSkript)
Návratová hodnota:
CHYBA_ČÍTANIA_SKRIPTU (-1) v prípade, že skript
  nebol nájdený, ŽIADNA_CHYBA
  v prípade bezchybného vykonania skriptu alebo kladné číslo
  vyjadrujúce číslo riadka, na ktorom vznikla chyba
Pozri tiež:
nahrajSkript(String, String), 
vyrobSkript(String, boolean), 
vyrobSkript(String), 
vyrobSkript(List), 
vyrobSkript(String[]), 
registrujSkript(String, String), 
registrujSkript(String, List), 
registrujSkript(String, String[]), 
dajSkript(String)
skriptJeSpustený
public static boolean skriptJeSpustený()
Zistí, či je práve vykonávaný skript, ktorý bol spustený
 príkazom spustiSkript (alebo
 niektorou jeho modifikáciou).
Návratová hodnota:
true ak je skript spustený
Pozri tiež:
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean)
skriptJeSpusteny
public static boolean skriptJeSpusteny()
 Alias pre skriptJeSpustený.
spustiSkript
public static void spustiSkript(String[] riadky)
Funguje podobne ako vykonajSkript(riadky), ale spustí vykonávanie v samostatnom vlákne
 Javy, takže môže byť ladené. Keďže pri tomto spôsobe nie je možné
 získať návratovú hodnotu priamo, tak je v prípade vzniku chyby
 počas vykonávania skriptu spustená reakcia
 ladenie, ktorej
 je poslané číslo chybového riadka v parametri riadok, text
 chybového hlásenia v parametri príkaz a správa má
 kód UKONČENIE_CHYBOU.
 Ak chyba nevznikne, tak je tiež spustená reakcia
 ladenie, ale prvé
 dva parametre sú prázdne a správa má kód
 UKONČENIE_SKRIPTU. Dokedy nie je
 ukončená činnosť jedného skriptu, nie je možné spustiť vykonávanie
 ďalšieho, ale v priebehu jeho činnosti je možné (aj keď nie
 odporúčané) vykonať iný skript (metódou
 vykonajSkript alebo jej „klonmi“)
 alebo príkaz (metódou vykonajPríkaz
 alebo jej „klonmi“).
 
 Poznámky: Komplexný príklad ladenia
 je v sekcii Príklad ladenia skriptov v opise triedy Skript.
 Zabezpečenie spustenia príkazu spustiSkript je
 jednoduché (v spomínanom príklade sa nachádza v metóde
 spusti), ale zabezpečenie spracovania rôznych
 situácií (udalostí) počas ladenia si vyžaduje náročnejší
 prístup.
 V spomínanom príklade je v komentároch stručne opísaný účel
 jednotlivých častí programu s prípadnými návrhmi na ďalšie
 vylepšovanie.
Parametre:
riadky – pole reťazcov reprezentujúcich riadky skriptu
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
spustiSkript
public static void spustiSkript(String skript)
Funguje podobne ako vykonajSkript(skript), ale spustí vykonávanie v samostatnom vlákne
 Javy, takže môže byť ladené. Keďže pri tomto spôsobe nie je možné
 získať návratovú hodnotu priamo, tak je v prípade vzniku chyby
 počas vykonávania skriptu spustená reakcia
 ladenie, ktorej
 je poslané číslo chybového riadka v parametri riadok, text
 chybového hlásenia v parametri príkaz a správa má
 kód UKONČENIE_CHYBOU.
 Ak chyba nevznikne, tak je tiež spustená reakcia
 ladenie, ale prvé
 dva parametre sú prázdne a správa má kód
 UKONČENIE_SKRIPTU. Dokedy nie je
 ukončená činnosť jedného skriptu, nie je možné spustiť vykonávanie
 ďalšieho, ale v priebehu jeho činnosti je možné (aj keď nie
 odporúčané) vykonať iný skript (metódou
 vykonajSkript alebo jej „klonmi“)
 alebo príkaz (metódou vykonajPríkaz
 alebo jej „klonmi“).
Parametre:
skript – skript uložený v jednom reťazci
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(List), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
spustiSkript
public static void spustiSkript(List&lt;String&gt; skript)
Funguje podobne ako vykonajSkript(skript) a principiálne pre neho platia rovnaké
 pravidlá ako pre spustiSkript(skript). Pozri opisy oboch metód na získanie
 úplného prehľadu o fungovaní tejto metódy. V skrátenej forme:
 táto metóda vytvorí zo zadaného zoznamu reťazcov kópiu do poľa
 reťazcov, ktorú spustí ako skript v samostatnom vlákne. Ďalšie
 podrobnosti o činnosti skriptov sú v opisoch dotknutých metód.
Parametre:
skript – skript uložený v zozname reťazcov
Výnimky:
GRobotException – ak bolo vykonávanie niektorého príkazu
     skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String, boolean), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
spustiSkript
public static void spustiSkript(String skript,
                                boolean zoSúboru)
Funguje podobne ako vykonajSkript(skript, zoSúboru), ale spustí vykonávanie
 v samostatnom vlákne Javy, takže môže byť ladené. Keďže pri tomto
 spôsobe nie je možné získať návratovú hodnotu priamo, tak je
 v prípade vzniku chyby počas vykonávania skriptu spustená reakcia
 ladenie, ktorej
 je poslané číslo chybového riadka v parametri riadok, text
 chybového hlásenia v parametri príkaz a správa má
 kód UKONČENIE_CHYBOU.
 Ak chyba nevznikne, tak je tiež spustená reakcia
 ladenie, ale prvé
 dva parametre sú prázdne a správa má kód
 UKONČENIE_SKRIPTU. Dokedy nie je
 ukončená činnosť jedného skriptu, nie je možné spustiť vykonávanie
 ďalšieho, ale v priebehu jeho činnosti je možné (aj keď nie
 odporúčané) vykonať iný skript (metódou
 vykonajSkript alebo jej „klonmi“)
 alebo príkaz (metódou vykonajPríkaz
 alebo jej „klonmi“).
Parametre:
skript – názov súboru so skriptom alebo skript uložený
     v jednom reťazci
zoSúboru – ak je true, tak je prvý parameter
     považovaný za názov súboru so skriptom (uloženom s použitím
     kódovania UTF-8); ak je false, tak je prvý
     parameter považovaný za skript (rovnako ako pri metóde
     spustiSkript(skript))
Výnimky:
GRobotException – ak skript so zadaným menom nebol nájdený
     alebo ak bolo vykonávanie niektorého príkazu skriptu zrušené
IllegalAccessException – ak metóda, s ktorou súviselo
     vykonávanie niektorého príkazu skriptu nie je dostupná
     (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súviselo vykonávanie niektorého z príkazov
     skriptu nebol požadovaného typu, ani ho na taký typ nebolo
     možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súviselo vykonávanie niektorého z príkazov skriptu
     vznikla výnimka
Pozri tiež:
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
skriptJeSpustený(), 
spustiSkript(String[]), 
spustiSkript(String), 
spustiSkript(List), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
vykonajPríkaz
public static boolean vykonajPríkaz(String príkaz)
Táto metóda má rovnaké jadro ako mechanizmus vykonávania
 príkazov v interaktívnom režime a umožňuje používať príkazy, ktoré sú
 dostupné v tomto režime aj za jeho hranicami (t. j. bez
 nevyhnutnosti jeho aktivácie).
Parametre:
príkaz – príkazový riadok spĺňajúci pravidlá uvedené
     v opise metódy interaktívnyRežim
Návratová hodnota:
true ak bol príkaz nájdený a podarilo
     sa ho vykonať
Výnimky:
GRobotException – ak bolo vykonávanie príkazu zrušené
IllegalAccessException – ak metóda, s ktorou súvisí
     vykonávanie príkazu nie je dostupná (verejná)
IllegalArgumentException – ak niektorý z argumentov
     metódy, s ktorou súvisí vykonávanie príkazu nie je
     požadovaného typu, ani ho na neho nie je možné previesť
InvocationTargetException – ak pri vykonávní metódy,
     s ktorou súvisí vykonávanie príkazu vznikla výnimka
Pozri tiež:
GRobot.vykonajPríkaz(String), 
Plátno.vykonajPríkaz(String), 
GRobot.interaktívnyRežim(boolean), 
interaktívnyRežim(boolean), 
Plátno.interaktívnyRežim(boolean), 
režimLadenia(boolean)
vykonajPrikaz
public static boolean vykonajPrikaz(String príkaz)
 Alias pre vykonajPríkaz.
interaktívnyRežim
public static void interaktívnyRežim(boolean zapni)
Zapne alebo vypne interaktívny režim pre inštanciu sveta.
 
 Informácia: Ďalšie podrobnosti súvisiace
 s témou vykonávania príkazov interaktívneho režimu a skriptov
 sú v opise triedy Skript.
 
 Režim umožňuje pracovať so zvoleným robotom/robotmi,
 svetom a/alebo plátnom tak, že mnohé príkazy môžu byť spracúvané
 priamo počas činnosti programu a to buď zadaním do zobrazeného
 príkazového riadka, alebo
 spustením skriptu.
 
 Príkazy interaktívneho režimu môžu byť vykonávané aj bez jeho
 aktivácie a to volaním prislúchajúcej metódy –
 
 robot.vykonajPríkaz(príkaz),
 Svet.vykonajPríkaz(príkaz),
 podlaha.vykonajPríkaz(príkaz)
 alebo
 strop.vykonajPríkaz(príkaz).
 
 Pôvodný úmysel pri implementácii tohto režimu (pred začatím
 implementácie skriptov) bolo využitie vo
 výučbe so zreteľom na to, že vykonávanie príkazov interaktívneho
 režimu síce nie je z pohľadu spracovania príliš efektívne, ale je
 názorné a začínajúci študent/&#8203;programátor môže ľahko a rýchlo
 vidieť, ktorý zo základných príkazov (robota) má aký efekt (bez
 nevyhnutnosti častej a opakovanej rekompilácie programu). Po
 zapnutí interaktívneho príkazového režimu pre niektorého z robotov,
 svet a/alebo plátno, je automaticky zobrazený vstupný riadok,
 ktorý od tejto chvíle očakáva príkazy zadané v špecifickom tvare
 opísanom nižšie.
 
 Po potvrdení vstupu alebo spustení skriptu je zahájené prehľadávanie tried s cieľom nájsť
 a vykonať takú metódu, ktorá sa (pri dodržaní určitých pravidiel)
 zhoduje so zadaným príkazom. Najprv sú prehľadávané všetky inštancie
 robota (alebo jeho potomkov), ktoré majú tento režim aktivovaný,
 v rámci toho je prehľadaná trieda Súbor
 prislúchajúcich robotov, potom (ak má trieda Svet
 zapnutý interaktívny režim) je prehľadná trieda Svet
 spolu s triedou Javy Math a statickou časťou
 tried Bod a Farba. Nakoniec sú prehľadané
 inštancie plátien podlaha a strop – opäť len
 plátna, ktoré majú aktivovaný interaktívny režim. (Schéma
 platných príkazov je opísaná nižšie.)
 
 To znamená, že príkazy sú prioritne posielané inštanciám robotov
 (ktoré sú v interaktívnom režime) a až potom ostatným inštanciám
 (Svet, Math…). Prvý pozitívny
 výsledok v rámci spracovania príkazového riadka ukončuje ďalšie
 spracovanie. To znamená, že ak zareaguje aspoň jeden robot (môžu
 zareagovať aj všetky), tak sa spracovanie príkazu končí.
 Iba v prípade, že na zadaný príkaz nezareagoval žiadny robot, je
 príkaz poslaný svetu a ten v prípade svojho neúspechu dodatočne
 prehľadá ďalšie triedy (Math…).
 Ak nezareaguje ani jedna súčasť prehľadávaná svetom, tak sú na
 rade plátna. Ak majú interaktívny režim aktivované obe plátna,
 tak je príkaz poslaný obom, ak iba jedno, tak iba jednému
 z nich.
 
 Ak je aktívna obsluha udalostí, tak je v prípade pozitívneho
 výsledku spracovania príkazu potvrdeného v príkazovom riadku
 spustená reakcia
 
 spracovaniePríkazu.
 
 V prípade negatívneho výsledku (t. j. ak potvrdený príkaz nebol
 rozpoznaný žiadnou z prehľadávaných súčastí) sú spustené reakcie
 na klasické potvrdenie vstupu
 
 (potvrdenieÚdajov,
 potvrdenieVstupu).
 
 Po deaktivovaní interaktívneho príkazového režimu všetkých
 dotknutých entít (robotov/sveta/plátien), je vstupný riadok
 automaticky skrytý a to bez ohľadu na to, či bol pred aktiváciou
 režimu zobrazený, alebo nie.
 
 Príkazy interaktívneho režimu nie sú zadávané
 v syntakticky identickom tvare ako pri volaní metódy Javy.
 Zápis príkazu musí byť ekvivalentný takej metóde robota (resp.
 sveta/plátna alebo metódy triedy Math), ktorá spĺňa
 jednu z nasledujúcich podmienok:
 
 
 neprijíma žiadny argument,
 prijíma jeden až štyri číselné argumenty
 (typ double alebo int),
 prijíma jeden booleovský argument (typ
 boolean),
 prijíma jeden argument určujúci farbu, ktorá musí byť
 v skripte alebo príkazovom riadku zapísaná slovne: červená,
 zelená, modrá… (tu sú dovolené len preddefinované farby,
 ale číselnými kombináciami argumentov (nasmerovaných do inej
 verzie tejto metódy) je možné namiešať ľubovoľnú farbu),
 všetky vyššie uvedené možnosti s jedným reťazcovým
 parametrom navyše, ktorý môže originálna metóda prijímať buď
 na prvom mieste, alebo poslednom mieste (zápis reťazca v skripte
 alebo príkazovom riadku je povolený buď na poslednom mieste
 s jednou úvodzovkou, alebo na ľubovoľnom mieste s dvomi
 úvodzovkami).
 
 
 Upozornenia: Príkazy sveta vypíš a vypíšRiadok sú sprístupnené nad rámec vyššie uvedených podmienok
 (nespĺňali by podmienky, pretože prijímajú variabilný počet
 argumentov). Sú dostupné vždy a vždy posielajú svoj výpis
 prostredníctvom sveta (t. j. na vnútornú konzolu stropu). No ich
 správanie je mierne pozmenené. Reťazcový argument je vždy vypísaný
 ako prvý a po ňom nasledujú ďalšie argumenty (jeden až štyri
 číselné alebo farba). V prípade potreby sa želaný výsledok dá
 dosiahnuť viacnásobným zadaním príkazov vypíš a vypíš
 riadok. 
 Okrem toho bolo podobne transformovaných niekoľko ďalších príkazov,
 aby lepšie zapadali do fungovania interaktívneho režimu, napríklad:
 zadaj číslo, uprav číslo, náhodné číslo, zadaj reťazec…
 
 Počet argumentov konkrétneho príkazu musí byť rovnaký ako
 počet parametrov metódy, ktorej volanie má reprezentovať. To,
 že počet číselných argumentov sa môže pohybovať v rozsahu nula
 až štyri znamená, že interaktívny režim vyhľadáva iba také
 metódy, ktoré majú deklarovaný uvedený počet parametrov.
 
 Jednotlivé slová príkazov interaktívneho režimu musia byť
 oddelené medzerou, na veľkosti písmen nezáleží a diakritika musí
 byť buď úplne uvedená, alebo úplne vynechaná. Argumenty musia byť
 od príkazu aj od seba navzájom oddelené medzerou alebo čiarkou.
 Ich údajový typ musí byť v súlade s vyššie uvedenými bodmi.
 Variant reťazcového argumentu s jednou úvodzovkou musí byť vždy
 uvedený ako posledný (aj keď ide o ekvivalent metódy, ktorá ho má
 v skutočnosti na začiatku). V tomto prípade je všetok zvyšný obsah
 príkazového riadka (nasledujúci za strojopisnou úvodzovkou
 ") považovaný za obsah reťazca. Ak sa na príkazovom riadku
 nachádza viacero úvodzoviek, tak je do úvahy vzatá prvá a posledná,
 obsah medzi nimi je považovaný za reťazec a zvyšok riadka je
 spracovaný tak, ako keby bol celý reťazec uvedený na konci (t. j.
 ako pri variante s jednou úvodzovkou).
 
 Poznámka: Interaktívny režim
 (a skriptovanie) programovacieho rámca GRobot využíva mechanizmus
 reflexie Javy. Vďaka tomu sa všetky verejné metódy tried
 odvodených od triedy GRobot, ktoré spĺňajú
 podmienky uvedené vyššie, automaticky stávajú dostupnými
 na použitie v interaktívnom režime aj skriptoch ako platné
 príkazy.
 
 Interaktívny režim umožňuje pracovať s vnútornými premennými.
 Premenná vzniká pri prvom vložení hodnoty do nej. Na to slúži
 príkaz nech, za ktorým musí nasledovať názov premennej.
 Za názvom premennej môže byť uvedený operátor a ak nejde o unárny
 operátor, tak ďalej musí byť uvedená buď hodnota, alebo príkaz
 spĺňajúci podmienky uvedené vyššie. Binárne operácie fungujú tak,
 že uvedená hodnota alebo výsledok príkazu sú spracované spolu
 s aktuálnou hodnotou premennej – to znamená, že ak ide o sčítanie,
 tak je hodnota pripočítaná k hodnote premennej, ak ide o logický
 súčet, tak výsledok v premennej bude nula v prípade, že je hodnota
 premennej aj výrazu napravo boli nulové a jedna v opačnom prípade
 atď. Návratová hodnota príkazu (originálnej metódy programovacieho
 rámca) musí byť číslo (prípadne logická hodnota), farba, poloha
 alebo reťazec. Ak sa pracuje s číslami, tak operátor môže byť
 jedným z nasledujúceho zoznamu:
 
 
  
 =–priradenie
 +–sčítanie
 -–odčítanie
 *–násobenie
 /–delenie
 %–zvyšok po delení
 _–odseknutie – odstránenie
 desatinnej časti
 ~–zmena znamienka
 (z kladného na záporné alebo naopak)
 ==–zhoda
 !=–nezhoda
 !–logická negácia
 &amp;&amp;–logické
 a súčasne
 ||–logické alebo
 &gt;–väčší než
 &lt;–menší než
 &gt;=–väčší alebo rovný
 než
 &lt;=–menší alebo rovný
 než
 
 
 Napríklad:
 
     nech a = 10.0
     nech a + 2.0
     nech f = farba
 
 Takýto spôsob výpočtov je nepraktický – aj pomerne jednoduchý
 výpočet by vyžadoval viacero riadkov skriptu, preto bol ku
 skriptovaciemu stroju pridružený rozpoznávač jednoduchých
 matematických výrazov (s programátorskou syntaxou a s bežne
 dostupnými operáciami; angl. expression parser reprezentovaný
 pomocnou triedou tohto rámca – 
ExpressionProcessor, ktorej zdrojový
 kód je tu; môže byť užitočné pozrieť si v ňom napríklad 
zoznam operátorov a 
 href="https://github.com/raubirius/GRobot/blob/master/kni%C5%BEnica/podpora/ExpressionProcessor.java#L3048"
zoznam funkcií). Na jeho aktiváciu
 slúži rezervovaný znak mriežky #. Všetko, čo na príkazovom
 riadku nasleduje za znakom mriežky (ak to nebolo súčasťou reťazca)
 je poslané do rozpoznávača výrazov a vyhodnotené pred spracovaním
 príkazu. Rozpoznávač je prepojený s rámcom a dokáže identifikovať
 viaceré metódy s číselnou návratovou hodnotou.
 
 Napríklad:
 
     nech v = #veľkosť * 2.5 + 1
     opakuj i 5
         nech x = #(i – 3) * veľkosť
 
 Je dovolené pracovať aj s reťazcami a vyhodnocovať výrazy
 v rámci podmieneného spracovania (aj číselné, nielen reťazcové).
 Príklad:
 
     nech x = "Reťazec"
  
     ak #x == "Reťazec"
         vypíš riadok "áno"
     inak
         vypíš riadok "nie"
 
  
 
 Ak sa riadok skriptu začína znakom @, tak je neprázdny
 zvyšok riadka považovaný za názov interaktívnej inštancie. Ak je
 zvyšok riadka prázdny, tak je interaktívna inštancia zrušená.
 
  
 
 Príklady príkazov uložených v skripte (pozri príkazy
 vykonajSkript(riadky),
 spustiSkript(riadky)
 a im príbuzné; okrem opakovania sú všetky príkazy nasledujúceho
 skriptu použiteľné aj v príkazovom riadku interaktívneho
 režimu):
 
 nech dĺžka = uprav číslo 100, "Zadaj stranu
 nech koľko = uprav číslo 72, "Zadaj počet opakovaní
 
 skoč dĺžka, -50
 farba zelená
 
 nech i = koľko
 :opakuj1
   dopredu dĺžka
   vpravo 145
 dokedy i, opakuj1
 
 nech dĺžka * 3
 nech dĺžka ~
 skoč dĺžka, 0
 nech dĺžka ~
 nech dĺžka / 3
 
 zdvihni pero
 začni cestu
 
 nech i = 5
 :opakuj2
   dopredu dĺžka
   vpravo 72
 dokedy i, opakuj2
 
 farba žltá
 vyplň cestu
 farba čierna
 hrúbka čiary 3.2
 kresli cestu
 
 vypíš dĺžka, "Toto je výsledok kreslenia s dĺžkou 
 vypíš koľko, " a počtom opakovaní 
 vypíš riadok ":
 
 nech veľkosť = uprav číslo 30, "Zadaj veľkosť
 veľkosť veľkosť
 nech text = "Veľkosť: 
 nech text + veľkosť
 
 domov
 dozadu veľkosť
 dozadu 10
 text text
 zobraz
 domov
 
 
 
 Po potvrdení predvolených údajov (100, 72 a 30) bude výsledok
 takýto:
 
 
 Výsledok vykonania skriptu.
 
  
 
 
 
 Obidva príkazy spomenuté nad príkladom majú svoje varianty
 dovoľujúce jednoduché spustenie skriptu uloženého v súbore:
 
 
vykonajSkript(názovSúboru, true);
spustiSkript(názovSúboru, true);
 
 
Parametre:
zapni – ak je true, režim bude pre svet
     zapnutý, inak bude vypnutý
Pozri tiež:
GRobot.interaktívnyRežim(boolean), 
Plátno.interaktívnyRežim(boolean), 
GRobot.vykonajPríkaz(String), 
vykonajPríkaz(String), 
Plátno.vykonajPríkaz(String), 
vykonajSkript(String[]), 
vykonajSkript(String), 
vykonajSkript(List), 
vykonajSkript(String, boolean), 
interaktívnaInštancia(), 
zrušInteraktívnuInštanciu(), 
režimLadenia(boolean), 
ObsluhaUdalostí.ladenie(int, String, int), 
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
interaktivnyRezim
public static void interaktivnyRezim(boolean zapni)
 Alias pre interaktívnyRežim.
interaktívnyRežim
public static boolean interaktívnyRežim()
Zistí stav interaktívneho režimu pre svet.
 Pozri: Svet.interaktívnyRežim(zapni).
Návratová hodnota:
stav režimu pre svet
interaktivnyRezim
public static boolean interaktivnyRezim()
 Alias pre interaktívnyRežim.
interaktívnaInštancia
public static void interaktívnaInštancia(String inštancia)
 Nastaví alebo zruší aktívnu inštanciu
 pre interaktívny
 režim. Keď je aktívna inštancia, tak príkazy odoslané
 v príkazovom riadku budú spracované len korektne rozpoznanou
 inštanciou.
 
 Pozor! Táto inštancia ovplyvňuje len
 príkazy zadávané cez príkazový riadok. Neovplyvňuje príkazy
 vykonávané ako skript.
 Aktívnu inštanciu skriptu
 je možné ovplyvňovať len priamo v skripte riadkami so syntaxou:
 @«názov inštancie» (nastavenie inštancie)
 a @ (zrušenie inštancie). Rovnaký príkaz je použiteľný
 aj v príkazovom riadku interaktívneho režimu a táto metóda poskytuje nástroj na
 nastavenie aktívnej inštancie programátorom.
 
 Medzi predvolené názvy inštancií patria: svet,
 podlaha, strop a robot. Ďalšou inštanciou
 môže byť ľubovoľný pomenovaný
 robot. Na zrušenie aktívnej inštancie treba zadať namiesto
 parametra inštancia null alebo zavolať metódu
 zrušInteraktívnuInštanciu.
Parametre:
inštancia – nová aktívna inštancia interaktívneho režimu alebo
     null
Pozri tiež:
interaktívnaInštancia(), 
zrušInteraktívnuInštanciu(), 
interaktívnyRežim(boolean), 
režimLadenia(boolean), 
ObsluhaUdalostí.ladenie(int, String, int)
interaktivnaInstancia
public static void interaktivnaInstancia(String inštancia)
 Alias pre interaktívnaInštancia.
interaktívnaInštancia
public static String interaktívnaInštancia()
 Vráti aktívnu inštanciu interaktívneho režimu alebo
 null.
Návratová hodnota:
aktívna inštancia interaktívneho režimu alebo
     null
Pozri tiež:
interaktívnaInštancia(String)
interaktivnaInstancia
public static String interaktivnaInstancia()
 Alias pre interaktívnaInštancia.
zrušInteraktívnuInštanciu
public static void zrušInteraktívnuInštanciu()
Zruší interaktívnu inštanciu.
Pozri tiež:
interaktívnaInštancia(String)
zrusInteraktivnuInstanciu
public static void zrusInteraktivnuInstanciu()
 Alias pre zrušInteraktívnuInštanciu.
kódPoslednejChyby
public static int kódPoslednejChyby()
Získa kód poslednej chyby, ktorá nastala počas vykonávania
 príkazov interaktívneho režimu alebo skriptu. Môže ísť o jeden
 z nasledujúcich kódov:
 
 
 ŽIADNA_CHYBA,
 CHYBA_VYKONANIA_PRÍKAZU,
 CHYBA_DVOJITÁ_MENOVKA,
 CHYBA_CHÝBAJÚCA_MENOVKA,
 CHYBA_NEZNÁMA_MENOVKA,
 CHYBA_NEZNÁME_SLOVO,
 CHYBA_CHYBNÁ_ŠTRUKTÚRA,
 CHYBA_NEZNÁME_MENO,
 CHYBA_NEZNÁMY_PRÍKAZ,
 CHYBA_ČÍTANIA_SKRIPTU.
 alebo CHYBA_VOLANIA_SKRIPTU.
 
 
 Poznámka: Tabuľka chýb je v opise
 metódy Skript.textChyby.
Návratová hodnota:
kód chyby – na získanie podrobností klikni na meno chyby
     v zozname vyššie
Pozri tiež:
riadokPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
kodPoslednejChyby
public static int kodPoslednejChyby()
 Alias pre kódPoslednejChyby.
riadokPoslednejChyby
public static int riadokPoslednejChyby()
Ak posledná chyba vznikla na konkrétnom riadku skriptu, tak táto metóda vráti
 číslo tohto riadka.
Návratová hodnota:
číslo riadka, na ktorom vznikla posledná chyba
Pozri tiež:
kódPoslednejChyby(), 
textPoslednejChyby(), 
textChyby(int)
textPoslednejChyby
public static String textPoslednejChyby()
Vráti vysvetľujúci text ku kódu poslednej chyby, ktorá nastala
 počas vykonávania príkazov
 interaktívneho režimu
 alebo
 skriptu.
 
 Poznámka: Tabuľka chýb je v opise
 metódy Skript.textChyby.
Návratová hodnota:
text ku kódu chyby
Pozri tiež:
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textChyby(int)
textChyby
public static String textChyby(int kódChyby)
Vráti vysvetľujúci text ku kódu chyby určenej parametrom
 kódChyby. Ide o kódy vnútorne definované a používané
 pri hláseniach o nesprávnych stavoch počas vykonávania príkazov
 interaktívneho režimu
 alebo
 skriptu.
Návratová hodnota:
text ku kódu chyby
Pozri tiež:
kódPoslednejChyby(), 
riadokPoslednejChyby(), 
textPoslednejChyby()
poslednáNávratováHodnota
public static Object poslednáNávratováHodnota()
Získa návratovú hodnotu naposledy vykonaného príkazu
 interaktívneho režimu
 alebo skriptu.
Návratová hodnota:
návratová hodnota naposledy vykonaného príkazu
poslednaNavratovaHodnota
public static Object poslednaNavratovaHodnota()
 Alias pre poslednáNávratováHodnota.
formulujChybuSkriptu
public static void formulujChybuSkriptu(int kódSkriptu,
                                        String titulokChyby,
                                        int šírkaRiadka)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 zadaným počtom znakov a zadaným titulkom chybového dialógu.
 Kód chyby je návratová hodnota skriptu (pozri Skript.vykonaj()).
 
 Poznámka: Táto metóda bola pôvodne
 vytvorená na vnútorné účely – pre skripty tlačidiel a položiek
 ponuky, ktoré by inak nemali žiadnu možnosť poskytnutia spätnej
 väzby používateľovi. Tieto skripty stále metódu používajú, ale
 medzičasom sa metóda stala verejnou a vznikli jej ďalšie
 verzie.
Parametre:
kódSkriptu – chybový kód, na základe ktorého metóda
     sformuluje a zobrazí chybové hlásenie v dialógovom okne
titulokChyby – text titulku dialógového okna chyby
šírkaRiadka – počet znakov na jednom riadku chybového
     hlásenia
formulujChybuSkriptu
public static void formulujChybuSkriptu(int kódSkriptu,
                                        String titulokChyby)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 predvoleným počtom znakov (60) a zadaným titulkom
 chybového dialógu. Kód chyby je návratová hodnota skriptu (pozri
 Skript.vykonaj()).
Parametre:
kódSkriptu – chybový kód, na základe ktorého metóda
     sformuluje a zobrazí chybové hlásenie v dialógovom okne
titulokChyby – text titulku dialógového okna chyby
formulujChybuSkriptu
public static void formulujChybuSkriptu(int kódSkriptu,
                                        int šírkaRiadka)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 zadaným počtom znakov a predvoleným titulkom chybového dialógu
 ("Chyba skriptu…"). Kód chyby je návratová hodnota
 skriptu (pozri Skript.vykonaj()).
Parametre:
kódSkriptu – chybový kód, na základe ktorého metóda
     sformuluje a zobrazí chybové hlásenie v dialógovom okne
šírkaRiadka – počet znakov na jednom riadku chybového
     hlásenia
formulujChybuSkriptu
public static void formulujChybuSkriptu(int kódSkriptu)
Sformuluje znenie chyby skriptu na základe zadaného kódu chyby
 a zobrazí dialóg s chybovým hlásením rozdeleným na riadky so
 predvoleným počtom znakov (60) a predvoleným titulkom
 chybového dialógu ("Chyba skriptu…").
 Kód chyby je návratová hodnota skriptu (pozri Skript.vykonaj()).
Parametre:
kódSkriptu – chybový kód, na základe ktorého metóda
     sformuluje a zobrazí chybové hlásenie v dialógovom okne
zalamujeTexty
public static boolean zalamujeTexty()
 Zistí stav/hodnotu vlastnosti zalamovania
 textov vnútornej konzoly stropu. Má rovnaký efekt ako keby sme
 volali metódu
 strop.zalamujeTexty().
Návratová hodnota:
true ak sú texty stropu presahujúce pravý okraj
     okna automaticky zalamované; false v opačnom
     prípade
zalamujTexty
public static void zalamujTexty(boolean zalamuj)
 Nastaví vlastnosť zalamovania textov
 vnútornej konzoly stropu podľa hodnoty parametra. Má rovnaký efekt
 ako keby sme volali metódu strop.zalamujTexty(zalamuj).
Parametre:
zalamuj – true ak chceme, aby boli texty stropu
     presahujúce pravý okraj okna automaticky zalomené; false v opačnom prípade
zalamujTexty
public static void zalamujTexty()
Zapne zalamovanie textov vnútornej konzoly stropu. Má rovnaký efekt
 ako keby sme volali metódu strop.zalamujTexty().
nezalamujTexty
public static void nezalamujTexty()
Vypne zalamovanie textov vnútornej konzoly stropu. Má rovnaký
 efekt ako keby sme volali metódu strop.nezalamujTexty().
vypíšAktívneSlovo
public static void vypíšAktívneSlovo(String identifikátor,
                                     Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope ako aktívne
 slová. Má rovnaký efekt ako keby sme volali metódu strop.vypíšAktívneSlovo(String, Object...).
Parametre:
identifikátor – identifikátor aktívneho slova, s pomocou
     ktorého bude toto slovo odlišované od ostatných aktívnych slov
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
vypisAktivneSlovo
public static void vypisAktivneSlovo(String identifikátor,
                                     Object... argumenty)
 Alias pre vypíšAktívneSlovo.
vypíšAktívneSlová
public static void vypíšAktívneSlová(String identifikátor,
                                     Object... argumenty)
 Alias pre vypíšAktívneSlovo.
vypisAktivneSlova
public static void vypisAktivneSlova(String identifikátor,
                                     Object... argumenty)
 Alias pre vypíšAktívneSlovo.
bodVAktívnomSlove
public static String bodVAktívnomSlove(double x,
                                       double y)
Overí, či sa bod identifikovaný zadanými súradnicami nachádza
 v oblasti niektorého z aktívnych slov. Funguje rovnako ako keby
 sme volali metódu strop.bodVAktívnomSlove(double, double).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza bod
     so zadanými súradnicami alebo null
bodVAktivnomSlove
public static String bodVAktivnomSlove(double x,
                                       double y)
 Alias pre bodVAktívnomSlove.
bodVAktívnomSlove
public static String bodVAktívnomSlove(Poloha poloha)
Funguje rovnako ako metóda bodVAktívnomSlove, ale namiesto súradníc bodu je zadaný
 objekt, ktorý je implementáciou rozhrania Poloha.
Parametre:
poloha – poloha vyšetrovaného bodu zadaná prostredníctvom
     objektu implementujúceho rozhranie Poloha.
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza bod
     so zadanými súradnicami alebo null
bodVAktivnomSlove
public static String bodVAktivnomSlove(Poloha poloha)
 Alias pre bodVAktívnomSlove.
myšVAktívnomSlove
public static String myšVAktívnomSlove()
Overí, či sa súradnice kurzora myši nachádzajú v oblasti niektorého
 z aktívnych slov. Funguje rovnako ako keby sme volali metódu
 strop.myšVAktívnomSlove().
Návratová hodnota:
identifikátor aktívneho slova, v ktorom sa nachádza
     kurzor myši alebo null
mysVAktivnomSlove
public static String mysVAktivnomSlove()
 Alias pre myšVAktívnomSlove.
vypíš
public static void vypíš(Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope. Má rovnaký efekt
 ako keby sme volali metódu strop.vypíš(Object...) – ďalšie podrobnosti sú v jej opise.
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
Plátno.vypíš(Object[]), 
formát
vypis
public static void vypis(Object... argumenty)
 Alias pre vypíš.
vypíšRiadok
public static void vypíšRiadok(Object... argumenty)
Vypíše sériu argumentov v tvare textu na strope a posunie sa na
 ďalší riadok. Má rovnaký efekt ako keby sme volali metódu strop.vypíšRiadok(Object...).
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu
     oddelený čiarkami
Pozri tiež:
vypíš(Object[])
vypisRiadok
public static void vypisRiadok(Object... argumenty)
 Alias pre vypíšRiadok.
vypíšNa
public static void vypíšNa(double x,
                           double y,
                           Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope. Má rovnaký efekt ako keby sme volali metódu strop.vypíšNa(double, double, Object...).
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu oddelený
     čiarkami
vypisNa
public static void vypisNa(double x,
                           double y,
                           Object... argumenty)
 Alias pre vypíšNa.
vypíšRiadokNa
public static void vypíšRiadokNa(double x,
                                 double y,
                                 Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope a posunie sa na ďalší riadok. Má rovnaký efekt ako keby sme
 volali metódu strop.vypíšRiadokNa(double, double, Object...).
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu oddelený
     čiarkami
vypisRiadokNa
public static void vypisRiadokNa(double x,
                                 double y,
                                 Object... argumenty)
 Alias pre vypíšRiadokNa.
píšNa
public static void píšNa(double x,
                         double y,
                         Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope. Má rovnaký efekt ako keby sme volali metódu strop.píšNa(double, double, Object...).
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu oddelený
     čiarkami
pisNa
public static void pisNa(double x,
                         double y,
                         Object... argumenty)
 Alias pre píšNa.
píšRiadokNa
public static void píšRiadokNa(double x,
                               double y,
                               Object... argumenty)
Vypíše sériu argumentov na zadaných súradniciach v tvare textu na
 strope a posunie sa na ďalší riadok. Má rovnaký efekt ako keby sme
 volali metódu strop.píšRiadokNa(double, double, Object...).
Parametre:
argumenty – zoznam argumentov rôzneho údajového typu oddelený
     čiarkami
pisRiadokNa
public static void pisRiadokNa(double x,
                               double y,
                               Object... argumenty)
 Alias pre píšRiadokNa.
náhodnéCeléČíslo
public static long náhodnéCeléČíslo()
Generovanie náhodného celého čísla v celom rozsahu long.
 (Pozri: Long.MIN_VALUE
 a Long.MAX_VALUE.)
Návratová hodnota:
vygenerované náhodné celé číslo
nahodneCeleCislo
public static long nahodneCeleCislo()
 Alias pre náhodnéCeléČíslo.
náhodnéCeléČíslo
public static long náhodnéCeléČíslo(long hodnota)
Generovanie náhodného celého čísla v rozsahu od nula
 po zadanú hodnotu parametra (vrátane).
Parametre:
hodnota – druhá hranica generovania náhodných čísel
Návratová hodnota:
vygenerované náhodné celé číslo
nahodneCeleCislo
public static long nahodneCeleCislo(long hodnota)
 Alias pre náhodnéCeléČíslo.
náhodnéCeléČíslo
public static long náhodnéCeléČíslo(long min,
                                    long max)
Generovanie náhodného celého čísla v zadanom rozsahu.
Parametre:
min – spodná hranica generovania náhodných čísel
max – horná hranica generovania náhodných čísel
Návratová hodnota:
vygenerované náhodné celé číslo
nahodneCeleCislo
public static long nahodneCeleCislo(long min,
                                    long max)
 Alias pre náhodnéCeléČíslo.
náhodnéReálneČíslo
public static double náhodnéReálneČíslo()
Generovanie náhodného reálneho čísla v rozsahu od nula
 po jeden.
Návratová hodnota:
vygenerované náhodné reálne číslo
nahodneRealneCislo
public static double nahodneRealneCislo()
 Alias pre náhodnéReálneČíslo.
náhodnéReálneČíslo
public static double náhodnéReálneČíslo(double hodnota)
Generovanie náhodného reálneho čísla v rozsahu od nula
 po zadanú hodnotu parametra.
Parametre:
hodnota – horná hranica generovania náhodných čísel
Návratová hodnota:
vygenerované náhodné reálne číslo
nahodneRealneCislo
public static double nahodneRealneCislo(double hodnota)
 Alias pre náhodnéReálneČíslo.
náhodnéReálneČíslo
public static double náhodnéReálneČíslo(double min,
                                        double max)
Generovanie náhodného reálneho čísla v zadanom rozsahu.
Parametre:
min – spodná hranica generovania náhodných čísel
max – horná hranica generovania náhodných čísel
Návratová hodnota:
vygenerované náhodné reálne číslo
nahodneRealneCislo
public static double nahodneRealneCislo(double min,
                                        double max)
 Alias pre náhodnéReálneČíslo.
perlin
public static double perlin(double x,
                            double y,
                            double z)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami.
 
 Upozornenie: Generátor funguje
 korektne najmä v kladnej podmnožine všetkých troch hodnôt
 súradníc 3D priestoru. Keďže sa však dajú využiť aj hodnoty
 generované v zápornej (t. j. pre aspoň jednu zo súradníc zápornú)
 časti 3D priestoru (hoci neštandardným spôsobom a pri troche
 experimentovania), nebol vstup súradníc nijako ošetrovaný.
 
 Upozornenie: Ak sú vstupom generátora
 výhradne (tri) celé čísla, výsledkom je nula. Ak chcete získať
 „pestrý“ rad hodnôt zariaďte, aby vstupom neboli samé celé čísla.
 Čím „menej celočíselné“ budú vstupy generátora, tým rôznorodejšie
 výsledky bude poskytovať.
 
  
 
 Podrobnosti o Perlinovom šume:
 
 Perlinov šum je druh gradientového generátora šumu, ktorý
 vyvinul Ken Perlin v rokoch 1982 – 1983. Generátor vznikol
 dôsledkom autorovej frustrácie z toho, že vtedajšie počítačom
 generované obrazy (CGI) vyzerali príliš „strojovo.“ Práca bola
 zároveň dôsledkom autorovej účasti na vývoji efektov v pracovnej
 skupine MAGI, ktorá pracovala pre Disneyho štúdium v kontexte
 produkcie sci-fi filmu Tron (1982). V roku 1997 (15 rokov po
 vydaní filmu Tron) získal Ken Perlin za svoj technický prínos,
 ktorý vznikol vytvorením tohto algoritmu 
cenu
 filmovej akadémie
 (Academy Awards u nás známej pod ľudovým pomenovaním Oskar).
 
 Dobrý generátor (pseudo)náhodných čísel generuje také hodnoty,
 ktoré nevykazujú známky rozpoznateľného vzoru (čiže naoko
 vzájomne nesúvisia). Takáto náhodnosť však nemusí pôsobiť
 prirodzene, najmä keď potrebujeme generovať prírodne pôsobiaci
 vzhľad ako sú oblaky, krajinné reliéfy alebo textúry povrchov
 ako je mramor a podobne. Perlinov generátor dokáže generovať
 hodnoty ústiace do organickejšieho vzhľadu, pretože generovaná
 sekvencia pseudonáhodných čísel je „hladšia“ než sekvencie, ktoré
 generuje „bežný“ generátor.
 
 Algoritmus použitý v tomto rámci generuje hodnoty šumu
 v trojrozmernom priestore. Perlinov šum však nemusí byť len
 troj- alebo dvojrozmerný. Vo všeobecnosti môže byť použitý na
 n rozmerov. Aj keď je programovací rámec zameraný na
 dvojrozmernú grafiku, bolo výhodnejšie použiť trojrozmerný
 priestor, aby bol generátor širšie využiteľný, napríklad na
 mapovanie hodnôt v trojsúradnicovom farebnom priestore RGB.
 
 Táto metóda generuje predvolené hodnoty šumu podľa zadaných
 súradníc. Jemnejšie výsledky sa dajú dosiahnuť použitím metódy
 perlin(x, y, z,
 početOktáv) (alebo jej klonu), treba však upozorniť na to, že
 so zvyšujúcim počtom oktáv sa činnosť generátora výrazne
 spomaľuje. Generátor preto nie je vhodný na generovanie textúr
 v reálnom čase.
 
  
 
 Zdroje:
 
 
 
Shiffman, Daniel: Perlin noise. Khan
 Academy. 2012. Citované: 18. januára 2020.
 
 
Biagioli, Adrian: 
 href="https://gist.github.com/Flafla2/f0260a861be0ebdeef76"
A slightly modified implementation of Ken
 Perlin’s improved noise that allows for tiling the noise
 arbitrarily. 9. august 2014. Citované: 10. marca
 2019.
 
 
Zucker, Matt: The Perlin noise math FAQ
 (glaringly outdated). 2001. Citované: 24. januára
 2020.
 
 
Quilez, Inigo: Gradient noise
 derivatives. At its home page about fractals, computer
 graphics, mathematics, shaders, demoscene and more. 2017. Citované:
 24. januára 2020.
 
 
Quilez, Inigo: Noise – Gradient – 3D –
 Deriv. At Shadertoy. 14. máj 2017. Citované: 24. januára
 2020.
 
 Ken
 Perlin’s homepage. Citované: 10. marca 2019.
 
 
  
 
 Príklad:
 
 
import knižnica.*;
public class PerlinovŠum extends GRobot
{
    // Inštancia obrázka, ktorá bude slúžiť na uchovanie aktuálne
    // vygenerovanej verzie šumu  (pozri súkromnú metódu prekresliŠum nižšie).
    private Obrázok o = new Obrázok(600, 600);
    // Parametre generátora (pozri súkromnú metódu prekresliŠum nižšie):
    //      k – počet (index) generovaných oktáv šumu;
    //      l – prepínanie štyroch rôznych verzií generovania:
    //          1 – použije sa len premenná dr a to ako úroveň šedej;
    //          2 – to isté ako 1, ale použije sa premenná dg;
    //          3 – to isté ako 1, ale použije sa premenná db;
    //          … – premenné dr, dg, db budú použité na určenie farebných
    //              zložiek r, g, b každého bodu generovaného šumu.
    private int k = 0, l = 0;
    // Aktuálne posunutie generovaného šumu.
    private double Δx = 0, Δy = 0;
    
    // Konštruktor.
    private PerlinovŠum()
    {
        super(602, 602); // (rozmer plátna 602 × 602 bodov)
        // Nastavenia sveta:
        Svet.farbaPozadia(snehová);
        Svet.farbaTextu(biela);
        Svet.nekresli();
        // Nastavenie kreslenia vypĺňaných tvarov na strop žltou farbou
        // (to sa použije na kreslenie orientačného prvku znázorňujúceho
        // aktuálne posunutie generátora Δx, Δy):
        kresliNaStrop();
        vypĺňajTvary();
        farba(žltá);
        // Prekreslenie šumu a zbalenie okna:
        prekresliŠum();
        Svet.zbaľ();
    }
    
    // Súkromná metóda na prekreslenie generovaného šumu:
    private void prekresliŠum()
    {
        Svet.vymažTexty();
        Svet.vypíš(k, l, '[', Δx, ',', Δy, ']');
        // V tomto cykle sa generuje šum vo štvorci 600 × 600 do obrázka
        // „o“ (čiže o jeden bod menej z každého okraja plátna) podľa
        // parametrov „k“ a „l“ (pozri vyššie).
        for (int j = -300; j &lt;= 300; ++j) for (int i = -300; i &lt;= 300; ++i)
        {
            // Najprv sa do premenných „a“ a „b“ prepočítajú súradnice
            // použité na získanie hodnoty šumu v určitom bode (treba si
            // uvedomiť, že každý generátor pseudonáhodných čísiel je
            // v skutočnosti funkcia so stálym tvarom – preto „pseudo-“
            // náhodné čísla; ibaže to obvykle nevidíme, pretože používame
            // premenlivé semienko na „zamiešanie“ generátora; obvykle
            // systémový čas).
            double a = (Δx + i + 300.0) / 100.0;
            double b = (Δy + j + 300.0) / 100.0;
            // Potom vygenerujeme tri rôzne hodnoty šumu. Keďže v tomto
            // programovacom rámci je použitý trojrozmerný Perlinov šum,
            // vygenerujeme každú z troch hodnôt z rôznej plochy 3D priestoru.
            // Na zjednodušenie zoberieme kolmé plochy – parametre „a“ a „b“
            // jednoducho vložíme vždy do inej kombinácie súradníc „perlina.“
            // V našom prípade by sme výsledok generátora museli upravovať
            // na polovičný rozsah napríklad takto:
            // double dr = (1.0 + Svet.perlin(b, 0, a, 1 + k)) / 2.0;
            // double dg = (1.0 + Svet.perlin(0, a, b, 1 + k)) / 2.0;
            // double db = (1.0 + Svet.perlin(a, b, 0, 1 + k)) / 2.0;
            // Namiesto toho použijeme verziu metódy polPerlina:
            double dr = Svet.polPerlina(b, 0, a, 1 + k);
            double dg = Svet.polPerlina(0, a, b, 1 + k);
            double db = Svet.polPerlina(a, b, 0, 1 + k);
            // *** Kópia informácií o význame atribútov „k“ a „l.“ ***
            // 
            // k – počet (index) generovaných oktáv šumu;
            // l – prepínanie štyroch rôznych verzií generovania:
            //     1 – použije sa len premenná dr a to ako úroveň šedej;
            //     2 – to isté ako 1, ale použije sa premenná dg;
            //     3 – to isté ako 1, ale použije sa premenná db;
            //     … – premenné dr, dg, db budú použité na určenie farebných
            //         zložiek r, g, b každého bodu generovaného šumu.
            // 
            // *** Kópia informácií o význame atribútov „k“ a „l.“ ***
            int rgb; switch (l)
            {
            case 1:
                rgb = 0xff000000 | ((int)(dr * 255) &lt;&lt; 16) |
                    ((int)(dr * 255) &lt;&lt; 8) | (int)(dr * 255);
                break;
            case 2:
                rgb = 0xff000000 | ((int)(dg * 255) &lt;&lt; 16) |
                    ((int)(dg * 255) &lt;&lt; 8) | (int)(dg * 255);
                break;
            case 3:
                rgb = 0xff000000 | ((int)(db * 255) &lt;&lt; 16) |
                    ((int)(db * 255) &lt;&lt; 8) | (int)(db * 255);
                break;
            default:
                rgb = 0xff000000 | ((int)(dr * 255) &lt;&lt; 16) |
                    ((int)(dg * 255) &lt;&lt; 8) | (int)(db * 255);
                break;
            }
            o.prepíšBod(i, j, rgb);
        }
        // Nakoniec nakreslíme orientačný prvok na znázornenie aktuálnej
        // polohy posunutia generátora (parametre kreslenia sú nastavené
        // v konštruktore):
        Svet.vymažGrafiku();
        podlaha.obrázok(o);
        skočNa(Δx / 10, Δy / 10);
        krúžok();
        Svet.prekresli();
    }
    
    // Reakcia na kliknutie ľubovoľným tlačidlom myši.
    @Override public void klik()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ak bolo kliknuté ľavým, tak upravíme parameter „k“ tak,
            // aby sa jeho hodnota pohybovala (cyklicky – po
            // každom kliku) v rozmedzí 0 – 6:
            ++k;
            k %= 7;
        }
        else
        {
            // Ak bolo kliknuté ľubovoľným iným tlačidlom, tak upravíme
            // parameter „l“ tak, aby sa jeho hodnota pohybovala
            // (cyklicky – po každom kliku) v rozmedzí 0 – 3:
            ++l;
            l %= 4;
        }
        // Prekreslíme šum:
        prekresliŠum();
    }
    
    // Počiatočná poloha myši používaná na vypočítanie rozdielu určujúceho
    // mieru posunutia generovaného šumu.
    private Bod poloha1 = null;
    // Reakcia na stlačenie ľubovoľného tlačidla myši.
    @Override public void stlačenieTlačidlaMyši()
    {
        // Uloženie počiatočnej polohy.
        poloha1 = ÚdajeUdalostí.polohaMyši();
    }
    // Reakcia na pohyb kurzora myši počas držania
    // ľubovoľného tlačidla myši (ťahania).
    @Override public void ťahanieMyšou()
    {
        // Ak je počiatočná poloha neprázdna, […]
        if (null != poloha1)
        {
            // […] tak prevezmeme aktuálnu polohu (pre nás koncovú), […]
            Bod poloha2 = ÚdajeUdalostí.polohaMyši();
            // […] vypočítame z oboch polôh rozdiel,
            // o ktorý sa šum posunie, […]
            Δx += poloha2.polohaX() &#45; poloha1.polohaX();
            Δy += poloha2.polohaY() &#45; poloha1.polohaY();
            // […] uložíme aktuálnu polohu ako novú počiatočnú polohu […]
            poloha1 = poloha2;
            // […] a prekreslíme šum.
            prekresliŠum();
        }
    }
    // Reakcia na uvoľnenie ľubovoľného tlačidla myši.
    @Override public void uvoľnenieTlačidlaMyši()
    {
        // Vyprázdnenie počiatočnej polohy.
        poloha1 = null;
    }
    
    // Hlavná metóda.
    public static void main(String[] args)
    {
        new PerlinovŠum();
    }
}
 
 Výsledok:
 
 
 
 Jedna
 oktáva farebnej verzie generovaného šumu. 
 
 Sedem
 oktáv farebnej verzie generovaného šumu.
 
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
Návratová hodnota:
hodnota Perlinovho šumu (v rozsahu ⟨−1; 1⟩) v zadanom bode
Pozri tiež:
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(), 
opakovaniePerlina(int)
perlin
public static double perlin(double x,
                            double y,
                            double z,
                            int početOktáv)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami a so zadaným počtom obsiahnutých oktáv.
 (Metóda používa predvolenú hodnotu stability 0.5.)
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
 
 Táto metóda umožňuje generovať jemnejšie výsledky pre hodnoty
 Perlinovho šumu, treba však upozorniť na to, že so zvyšujúcim
 počtom oktáv sa činnosť generátora výrazne spomaľuje. Generátor
 preto nie je vhodný na generovanie textúr v reálnom čase.
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
početOktáv – počet generovaných oktáv šumu – vyššia hodnota
     generuje „jemnejšie“ hodnoty (akoby výsledky s vyšším
     rozlíšením)
Návratová hodnota:
hodnota Perlinovho šumu (v rozsahu ⟨−1; 1⟩) v zadanom bode
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(), 
opakovaniePerlina(int)
perlin
public static double perlin(double x,
                            double y,
                            double z,
                            int početOktáv,
                            double stabilita)
Vráti hodnotu 3D Perlinovho šumu z rozsahu ⟨−1; 1⟩ v bode so
 zadanými súradnicami a so zadaným počtom obsiahnutých oktáv.
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
 
 Táto metóda umožňuje generovať jemnejšie výsledky pre hodnoty
 Perlinovho šumu, treba však upozorniť na to, že so zvyšujúcim
 počtom oktáv sa činnosť generátora výrazne spomaľuje. Generátor
 preto nie je vhodný na generovanie textúr v reálnom čase.
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
početOktáv – počet generovaných oktáv šumu – vyššia hodnota
     generuje „jemnejšie“ hodnoty (akoby výsledky s vyšším
     rozlíšením)
stabilita – hodnota vzťahujúca sa k rozbiehavosti generátora
     počas generovania vyšších oktáv
Návratová hodnota:
hodnota Perlinovho šumu (v rozsahu ⟨−1; 1⟩) v zadanom bode
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(), 
opakovaniePerlina(int)
polPerlina
public static double polPerlina(double x,
                                double y,
                                double z)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami.
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
Návratová hodnota:
hodnota polovičného Perlinovho šumu (v rozsahu ⟨0; 1⟩)
     v zadanom bode
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(), 
opakovaniePerlina(int)
polPerlina
public static double polPerlina(double x,
                                double y,
                                double z,
                                int početOktáv)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami a so zadaným počtom obsiahnutých
 oktáv.
 (Metóda používa predvolenú hodnotu stability 0.5.)
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
 
 Táto metóda umožňuje generovať jemnejšie výsledky pre hodnoty
 Perlinovho šumu, treba však upozorniť na to, že so zvyšujúcim
 počtom oktáv sa činnosť generátora výrazne spomaľuje. Generátor
 preto nie je vhodný na generovanie textúr v reálnom čase.
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
početOktáv – počet generovaných oktáv šumu – vyššia hodnota
     generuje „jemnejšie“ hodnoty (akoby výsledky s vyšším
     rozlíšením)
Návratová hodnota:
hodnota polovičného Perlinovho šumu (v rozsahu ⟨0; 1⟩)
     v zadanom bode
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(), 
opakovaniePerlina(int)
polPerlina
public static double polPerlina(double x,
                                double y,
                                double z,
                                int početOktáv,
                                double stabilita)
Vráti hodnotu polovičného 3D Perlinovho šumu z rozsahu ⟨0; 1⟩
 v bode so zadanými súradnicami a so zadaným počtom obsiahnutých
 oktáv.
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
 
 Táto metóda umožňuje generovať jemnejšie výsledky pre hodnoty
 Perlinovho šumu, treba však upozorniť na to, že so zvyšujúcim
 počtom oktáv sa činnosť generátora výrazne spomaľuje. Generátor
 preto nie je vhodný na generovanie textúr v reálnom čase.
Parametre:
x – x-ová súradnica priestoru šumu
y – y-ová súradnica priestoru šumu
z – z-ová súradnica priestoru šumu
početOktáv – počet generovaných oktáv šumu – vyššia hodnota
     generuje „jemnejšie“ hodnoty (akoby výsledky s vyšším
     rozlíšením)
stabilita – hodnota vzťahujúca sa k rozbiehavosti generátora
     počas generovania vyšších oktáv
Návratová hodnota:
hodnota polovičného Perlinovho šumu (v rozsahu ⟨0; 1⟩)
     v zadanom bode
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
opakovaniePerlina(), 
opakovaniePerlina(int)
opakovaniePerlina
public static int opakovaniePerlina()
Vráti hodnotu opakovania vzoru generátora Perlinovho šumu.
 Hodnoty menšie alebo rovné 0 znamenajú nekonečný vzor, čo je
 predvolený stav.
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
Návratová hodnota:
hodnota opakovania vzoru generátora Perlinovho šumu
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina(int)
opakovaniePerlina
public static void opakovaniePerlina(int opakovanie)
Nastaví novú hodnotu opakovania vzoru generátora Perlinovho
 šumu. Hodnoty menšie alebo rovné 0 (čo je predvolený stav) znamenajú
 nekonečný vzor.
 
 Podrobnosti o Perlinovom šume nájdete v opise metódy perlin(x, y, z).
Parametre:
opakovanie – nová hodnota opakovania vzoru generátora
     Perlinovho šumu
Pozri tiež:
perlin(double, double, double), 
perlin(double, double, double, int), 
perlin(double, double, double, int, double), 
polPerlina(double, double, double), 
polPerlina(double, double, double, int), 
polPerlina(double, double, double, int, double), 
opakovaniePerlina()
textyDoSchránky
public static boolean textyDoSchránky()
Vloží do schránky všetky texty vypísané na vnútorných konzolách
 podlahy a stropu.
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.text(String)
textyDoSchranky
public static boolean textyDoSchranky()
 Alias pre textyDoSchránky.
textDoSchránky
public static boolean textDoSchránky()
 Alias pre textyDoSchránky.
textDoSchranky
public static boolean textDoSchranky()
 Alias pre textyDoSchránky.
textyDoSchránky
public static boolean textyDoSchránky(boolean lenOznačené)
Vloží do schránky buď všetky texty vypísané na vnútorných
 konzolách podlahy a stropu, alebo len označené časti –
 v závislosti od hodnoty parametra lenOznačené.
Parametre:
lenOznačené – ak je hodnota tohto parametra rovná
     true, tak metóda skopíruje schránky len
     označené texty konzol, inak sa správa rovnako ako metóda
     textyDoSchránky()
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.text(String)
textyDoSchranky
public static boolean textyDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
textDoSchránky
public static boolean textDoSchránky(boolean lenOznačené)
 Alias pre textyDoSchránky.
textDoSchranky
public static boolean textDoSchranky(boolean lenOznačené)
 Alias pre textyDoSchránky.
obrázokDoSchránky
public static boolean obrázokDoSchránky()
Vloží obrázok (grafiku) sveta do schránky. Grafika sveta je
 zlúčením grafík podlahy, robotov, stropu a textov vypísaných na
 vnútorné konzoly oboch plátien.
 
 Upozornenie: Obrázok je uchovaný
 v schránke len počas činnosti aplikácie robota. Po zatvorení
 okna sveta, je obrázok zo schránky odstránený.
Návratová hodnota:
true ak bola operácia úspešná
Pozri tiež:
Schránka.obrázok(Image)
obrazokDoSchranky
public static boolean obrazokDoSchranky()
 Alias pre obrázokDoSchránky.
grafikaDoSchránky
public static boolean grafikaDoSchránky()
 Alias pre obrázokDoSchránky.
grafikaDoSchranky
public static boolean grafikaDoSchranky()
 Alias pre obrázokDoSchránky.
šírkaObrázka
public static int šírkaObrázka(String súbor)
 Zistí šírku zadaného obrázka.
 
 Táto metóda spôsobí prečítanie obrázka zo súboru a jeho
 uchovanie vo vnútornej pamäti sveta. Obrázok tam zostáva,
 pretože je chápaný ako zdroj. Môže však byť v prípade potreby
 (napríklad ak sa obsah súboru na disku zmenil) z vnútornej pamäte
 odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre všetky
 metódy pracujúce s obrázkami alebo zvukmi, ktoré prijímajú názov
 súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom
Návratová hodnota:
šírka zadaného obrázka
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
priečinokObrázkov(String)
sirkaObrazka
public static int sirkaObrazka(String súbor)
 Alias pre šírkaObrázka.
výškaObrázka
public static int výškaObrázka(String súbor)
 Zistí výšku zadaného obrázka.
 
 Táto metóda spôsobí prečítanie obrázka zo súboru a jeho
 uchovanie vo vnútornej pamäti sveta. Obrázok tam zostáva,
 pretože je chápaný ako zdroj. Môže však byť v prípade potreby
 (napríklad ak sa obsah súboru na disku zmenil) z vnútornej pamäte
 odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre všetky
 metódy pracujúce s obrázkami alebo zvukmi, ktoré prijímajú názov
 súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom
Návratová hodnota:
výška zadaného obrázka
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
priečinokObrázkov(String)
vyskaObrazka
public static int vyskaObrazka(String súbor)
 Alias pre výškaObrázka.
priečinokObrázkov
public static void priečinokObrázkov(String priečinok)
Ak sú všetky obrázky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
 Priečinok by sa mal nachádzať v hlavnom priečinku projektu alebo by
 k nemu mala viesť systémovo nezávislá relatívna cesta. Zadaním
 prázdneho reťazca alebo hodnoty null používanie
 priečinka zrušíme.
Parametre:
priečinok – názov priečinka, relatívna cesta, prípadne
     prázdny reťazec alebo null
Pozri tiež:
priečinokObrázkov(), 
GRobot.obrázok(String), 
GRobot.obrázok(String, double), 
GRobot.obrázok(String, double, double), 
GRobot.obrázok(String, double, double, double), 
GRobot.obrázok(String, int), 
GRobot.obrázok(String, int, double), 
GRobot.obrázok(String, int, double, double), 
GRobot.obrázok(String, int, double, double, double), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vlastnýTvar(String), 
GRobot.vlastnýTvar(String, boolean), 
obrázok(String), 
vyplň(String), 
ikona(String), 
zobrazUvodnuObrazovku(String), 
šírkaObrázka(String), 
výškaObrázka(String), 
čítajObrázky(Object[]), 
čítajObrázky(String[]), 
čítajObrázok(String), 
Plátno.obrázok(String), 
Plátno.obrázok(double, double, String), 
Plátno.obrázok(Poloha, String), 
Plátno.vyplň(String), 
Obrázok.priečinokObrázkov(String), 
Obrázok.čítaj(String), 
Obrázok.vyplň(Shape, String), 
Obrázok.kresli(String), 
Obrázok.kresli(double, double, String), 
Obrázok.kresli(Poloha, String), 
Obrázok.vyplň(String), 
Oblasť.vyplň(String), 
Oblasť.vyplň(GRobot, String), 
PoložkaPonuky.ikona(String), 
KontextováPoložka.ikona(String)
priecinokObrazkov
public static void priecinokObrazkov(String priečinok)
 Alias pre priečinokObrázkov.
priečinokObrázkov
public static String priečinokObrázkov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú obrázky
 prečítané. Reťazec je obohatený o oddeľovací znak priečinkov java.io.File.separatorChar (/ alebo
 \ – záleží na type operačného systému), ktorý automaticky
 pridáva metóda priečinokObrázkov(priečinok). Rovnako všetky oddeľovacie znaky
 priečinkov v relatívnej ceste sú nahradené podľa typu operačného
 systému.
Návratová hodnota:
aktuálny priečinok, z ktorého sú obrázky prečítané
Pozri tiež:
priečinokObrázkov(String), 
GRobot.obrázok(String), 
GRobot.obrázok(String, double), 
GRobot.obrázok(String, double, double), 
GRobot.obrázok(String, double, double, double), 
GRobot.obrázok(String, int), 
GRobot.obrázok(String, int, double), 
GRobot.obrázok(String, int, double, double), 
GRobot.obrázok(String, int, double, double, double), 
GRobot.vyplňOblasť(Area, String), 
GRobot.vlastnýTvar(String), 
GRobot.vlastnýTvar(String, boolean), 
obrázok(String), 
vyplň(String), 
ikona(String), 
zobrazUvodnuObrazovku(String), 
šírkaObrázka(String), 
výškaObrázka(String), 
čítajObrázky(Object[]), 
čítajObrázky(String[]), 
čítajObrázok(String), 
Plátno.obrázok(String), 
Plátno.obrázok(double, double, String), 
Plátno.obrázok(Poloha, String), 
Plátno.vyplň(String), 
Obrázok.priečinokObrázkov(), 
Obrázok.čítaj(String), 
Obrázok.vyplň(Shape, String), 
Obrázok.kresli(String), 
Obrázok.kresli(double, double, String), 
Obrázok.kresli(Poloha, String), 
Obrázok.vyplň(String), 
Oblasť.vyplň(String), 
Oblasť.vyplň(GRobot, String), 
PoložkaPonuky.ikona(String), 
KontextováPoložka.ikona(String)
priecinokObrazkov
public static String priecinokObrazkov()
 Alias pre priečinokObrázkov.
čítajObrázky
public static void čítajObrázky(Object... súbory)
Táto metóda slúži na čítanie zadaných obrázkov do vnútornej pamäte
 sveta (napríklad pri štarte aplikácie). Svet ukladá do vnútornej
 pamäte každý obrázok, s ktorým sa pracovalo (ak tam už nie je).
 Z nej môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja).
 Táto metóda číta súbory s obrázkami vopred a tým môže prispieť
 k plynulejšej činnosti aplikácie po štarte (čas štartu sa
 predĺži, ale keďže súbory už nemusia byť čítané počas jej
 činnosti, pracuje plynulejšie).
Parametre:
súbory – ľubovoľný počet reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokObrázkov(String)
citajObrazky
public static void citajObrazky(Object... súbory)
 Alias pre čítajObrázky.
prečítajObrázky
public static void prečítajObrázky(Object... súbory)
 Alias pre čítajObrázky.
precitajObrazky
public static void precitajObrazky(Object... súbory)
 Alias pre čítajObrázky.
čítajObrázky
public static void čítajObrázky(String[] súbory)
Táto metóda slúži na čítanie zadaných obrázkov do vnútornej pamäte
 sveta (napríklad pri štarte aplikácie). Svet ukladá do vnútornej
 pamäte ukladá každý obrázok, s ktorým sa pracovalo (ak tam už nie
 je). Z nej môže byť v prípade potreby (napríklad ak sa obsah súboru
 na disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja).
 Táto metóda číta súbory s obrázkami vopred a tým môže prispieť
 k plynulejšej činnosti aplikácie po štarte (čas štartu sa
 predĺži, ale keďže súbory už nemusia byť čítané počas jej
 činnosti, pracuje plynulejšie).
Parametre:
súbory – pole reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokObrázkov(String)
citajObrazky
public static void citajObrazky(String[] súbory)
 Alias pre čítajObrázky.
prečítajObrázky
public static void prečítajObrázky(String[] súbory)
 Alias pre čítajObrázky.
precitajObrazky
public static void precitajObrazky(String[] súbory)
 Alias pre čítajObrázky.
čítajObrázok
public static Image čítajObrázok(String súbor)
Prečíta do vnútornej pamäte sveta zadaný obrázok zo súboru a vráti
 ho v objekte typu Image. Obrázok nie je zobrazený.
 Podobnú úlohu plní metóda Svet.čítajObrázky(Object... súbory), ale s pomocou nej nie je
 možné získať objekt typu Image na ďalšie
 spracovanie. Obrázok môže byť v prípade potreby (napríklad ak sa
 obsah súboru na disku zmenil) z vnútornej pamäte odstránený
 metódou Svet.uvoľni(názovZdroja).
Parametre:
súbor – názov súboru s obrázkom
Návratová hodnota:
obrázok v objekte typu Image
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
Pozri tiež:
Obrázok.čítaj(String), 
priečinokObrázkov(String)
citajObrazok
public static Image citajObrazok(String súbor)
 Alias pre čítajObrázok.
prečítajObrázok
public static Image prečítajObrázok(String súbor)
 Alias pre čítajObrázok.
precitajObrazok
public static Image precitajObrazok(String súbor)
 Alias pre čítajObrázok.
obrázok
public static void obrázok(String súbor)
Nakreslí v strede podlahy zadaný obrázok. Má rovnaký efekt ako keby
 sme volali metódu podlaha.obrázok(String). Napríklad:
 
 
Svet.obrázok("obrázok.png");
Parametre:
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Pozri tiež:
priečinokObrázkov(String)
obrazok
public static void obrazok(String súbor)
 Alias pre obrázok.
obrázok
public static void obrázok(double x,
                           double y,
                           String súbor)
Nakreslí na zadaných súradniciach na podlahe obrázok. Má rovnaký
 efekt ako keby sme volali metódu podlaha.obrázok(x, y, súbor).
Parametre:
x – x-ová súradnica polohy obrázka
y – y-ová súradnica polohy obrázka
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Pozri tiež:
priečinokObrázkov(String)
obrazok
public static void obrazok(double x,
                           double y,
                           String súbor)
 Alias pre obrázok.
obrázok
public static void obrázok(Poloha objekt,
                           String súbor)
Nakreslí na súradniciach zadaného objektu na podlahe obrázok.
 Má rovnaký efekt ako keby sme volali metódu
 podlaha.obrázok(objekt, súbor).
Parametre:
objekt – objekt určujúci polohu kreslenia obrázka
súbor – názov súboru s obrázkom, ktorý má byť vykreslený
Pozri tiež:
priečinokObrázkov(String)
obrazok
public static void obrazok(Poloha objekt,
                           String súbor)
 Alias pre obrázok.
obrázok
public static void obrázok(Image obrázok)
Nakreslí v strede podlahy zadaný obrázok. Má rovnaký efekt ako keby
 sme volali metódu podlaha.obrázok(obrázok).
Parametre:
obrázok – obrázok, ktorý má byť vykreslený
obrazok
public static void obrazok(Image obrázok)
 Alias pre obrázok.
obrázok
public static void obrázok(double x,
                           double y,
                           Image obrázok)
Nakreslí na zadaných súradniciach na podlahe obrázok. Má rovnaký
 efekt ako keby sme volali metódu podlaha.obrázok(x, y, obrázok).
Parametre:
x – x-ová súradnica polohy obrázka
y – y-ová súradnica polohy obrázka
obrázok – obrázok, ktorý má byť vykreslený
obrazok
public static void obrazok(double x,
                           double y,
                           Image obrázok)
 Alias pre obrázok.
obrázok
public static void obrázok(Poloha objekt,
                           Image obrázok)
Nakreslí na súradniciach zadaného objektu na podlahe obrázok.
 Má rovnaký efekt ako keby sme volali metódu
 podlaha.obrázok(objekt, obrázok).
Parametre:
objekt – objekt určujúci polohu kreslenia obrázka
obrázok – obrázok, ktorý má byť vykreslený
obrazok
public static void obrazok(Poloha objekt,
                           Image obrázok)
 Alias pre obrázok.
uložObrázok
public static void uložObrázok(String súbor)
Uloží aktuálne zobrazený obsah sveta do súboru s obrázkom. Prípona
 súboru musí byť .gif, .png alebo .jpg
 (resp. .jpeg). Ak súbor jestvuje, tak vznikne výnimka
 oznamujúca, že súbor so zadaným menom už jestvuje. Ak chcete súbor
 prepísať, použite metódu uložObrázok(String, boolean)
 s druhým parametrom rovným true.
Parametre:
súbor – názov súboru s požadovanou príponou
Výnimky:
GRobotException – ak súbor jestvuje alebo nebol zadaný
     názov súboru s platnou príponou
ulozObrazok
public static void ulozObrazok(String súbor)
 Alias pre uložObrázok.
uložObrázok
public static void uložObrázok(String súbor,
                               boolean prepísať)
Uloží aktuálny obsah sveta do súboru s obrázkom. Prípona súboru
 musí byť .gif, .png alebo .jpg (resp.
 .jpeg).
Parametre:
súbor – názov súboru s požadovanou príponou
prepísať – ak je true, prípadný jestvujúci
     súbor bude prepísaný, inak sa správa rovnako ako metóda
     uložObrázok(String)
Výnimky:
GRobotException – ak súbor jestvuje a parameter prepísať
     je false alebo ak bol zadaný názov súboru
     s neplatnou príponou
ulozObrazok
public static void ulozObrazok(String súbor,
                               boolean prepísať)
 Alias pre uložObrázok.
farbaTextu
public static Farba farbaTextu()
Zistí aktuálnu farbu výpisu nových textov stropu. Má rovnaký efekt
 ako keby sme volali metódu strop.farbaTextu().
Návratová hodnota:
aktuálna farba textov stropu (objekt typu Farba)
farbaTextu
public static void farbaTextu(Color nováFarba)
Nastav farbu textov stropu. Má rovnaký efekt ako keby sme volali
 metódu strop.farbaTextu(Color).
Parametre:
nováFarba – objekt určujúci novú farbu pera
farbaTextu
public static void farbaTextu(Farebnosť objekt)
Nastav farbu textov stropu. Má rovnaký efekt ako keby sme volali
 metódu strop.farbaTextu(Color).
Parametre:
objekt – objekt určujúci novú farbu pera
farbaTextu
public static Farba farbaTextu(int r,
                               int g,
                               int b)
Nastav farbu textov stropu. Má rovnaký efekt ako keby sme volali
 metódu strop.farbaTextu(int, int, int).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textov
farbaTextu
public static Farba farbaTextu(int r,
                               int g,
                               int b,
                               int a)
Nastav farbu textov stropu. Má rovnaký efekt ako keby sme volali
 metódu strop.farbaTextu(int, int, int, int).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba textov
predvolenáFarbaTextu
public static void predvolenáFarbaTextu()
Zmení farbu textov stropu na predvolenú. Má rovnaký efekt ako keby
 sme volali metódu strop.predvolenáFarbaTextu().
predvolenaFarbaTextu
public static void predvolenaFarbaTextu()
 Alias pre predvolenáFarbaTextu.
farbaPozadiaTextu
public static Farba farbaPozadiaTextu()
Zistí aktuálnu farbu pozadia výpisu nových textov stropu. Má
 rovnaký efekt ako keby sme volali metódu
 strop.farbaPozadiaTextu().
Návratová hodnota:
aktuálna farba pozadia textov na strope (objekt typu
     Farba)
farbaPozadiaTextu
public static void farbaPozadiaTextu(Color nováFarba)
Nastav farbu pozadia textov stropu. Má rovnaký efekt ako keby sme
 volali metódu strop.farbaPozadiaTextu(Color).
Parametre:
nováFarba – objekt určujúci novú farbu pozadia textov
farbaPozadiaTextu
public static void farbaPozadiaTextu(Farebnosť objekt)
Nastav farbu pozadia textov stropu. Má rovnaký efekt ako keby sme
 volali metódu strop.farbaPozadiaTextu(Color).
Parametre:
objekt – objekt určujúci novú farbu pozadia textov
farbaPozadiaTextu
public static Farba farbaPozadiaTextu(int r,
                                      int g,
                                      int b)
Nastav farbu pozadia textov stropu. Má rovnaký efekt ako keby sme
 volali metódu strop.farbaPozadiaTextu(int, int, int).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia textov
farbaPozadiaTextu
public static Farba farbaPozadiaTextu(int r,
                                      int g,
                                      int b,
                                      int a)
Nastav farbu pozadia textov stropu. Má rovnaký efekt ako keby sme
 volali metódu strop.farbaPozadiaTextu(int, int, int, int).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo v rozsahu
     0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia textov
predvolenáFarbaPozadiaTextu
public static void predvolenáFarbaPozadiaTextu()
Zmení farbu pozadia textov stropu na predvolenú. (Predvolenou
 farbou pozadia textov nie je žiadna farba – je to objekt farby
 s hodnotou null.) Volanie tejto metódy má rovnaký efekt
 ako keby sme volali metódu
 strop.predvolenáFarbaPozadiaTextu().
predvolenaFarbaPozadiaTextu
public static void predvolenaFarbaPozadiaTextu()
 Alias pre predvolenáFarbaPozadiaTextu.
farbaPozadia
public static Farba farbaPozadia()
 Čítaj farbu pozadia sveta.
 Ide o farbu podkladu, ktorá je použitá v prípade, že podlaha ani
 strop neboli vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
Návratová hodnota:
aktuálna farba pozadia sveta (objekt typu Farba)
farbaPozadia
public static void farbaPozadia(Color nováFarba)
 Nastav farbu pozadia sveta.
 Ide o farbu podkladu, ktorá je použitá v prípade, že podlaha ani
 strop neboli vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
 
 Poznámka: Farbu pozadia môže prekryť
 výplň plátna, ale keď
 je obsah plátien prázdny (vymazaný),
 je svet grafických robotov vyplnený farbou pozadia.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
Pozri tiež:
vymaž()
farbaPozadia
public static void farbaPozadia(Farebnosť objekt)
Nastaví farbu pozadia sveta podľa farby zadaného objektu.
 Farba pozadia je použitá v prípade, že podlaha ani strop neboli
 vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
 
 Poznámka: Farbu pozadia môže prekryť
 výplň plátna, ale keď
 je obsah plátien prázdny (vymazaný),
 je svet grafických robotov vyplnený farbou pozadia.
Parametre:
objekt – objekt určujúci novú farbu pozadia
Pozri tiež:
vymaž()
farbaPozadia
public static Farba farbaPozadia(int r,
                                 int g,
                                 int b)
Nastav farbu pozadia sveta.
 Ide o farbu podkladu, ktorá je použitá v prípade, že podlaha ani
 strop neboli vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaPozadia
public static Farba farbaPozadia(int r,
                                 int g,
                                 int b,
                                 int a)
Nastav farbu a (ne)priehľadnosť pozadia sveta.
 Ide o farbu podkladu, ktorá je použitá v prípade, že podlaha ani
 strop neboli vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
predvolenáFarbaPozadia
public static void predvolenáFarbaPozadia()
Nastav predvolenú farbu pozadia.
 Ide o farbu podkladu, ktorá je použitá v prípade, že podlaha ani
 strop neboli vyplnené žiadnou konkrétnou farbou (pozri vymaž, vyplň).
predvolenaFarbaPozadia
public static void predvolenaFarbaPozadia()
 Alias pre predvolenáFarbaPozadia.
farbaPlochy
public static Farba farbaPlochy()
 Číta farbu plochy sveta. Ide o farbu
 základného komponentu okna aplikácie, na ktorom je umiestnené
 plátno a prípadne ďalšie komponenty.
Návratová hodnota:
aktuálna farba plochy sveta (objekt typu Farba)
farbaPlochy
public static void farbaPlochy(Color nováFarba)
 Nastaví farbu plochy sveta. Ide o farbu
 základného komponentu okna aplikácie, na ktorom je umiestnené
 plátno a prípadne ďalšie komponenty.
 
 
 Ukážka troch farieb plochy. Zľava doprava:
 systémom predvolená, papierová
 a antracitová.
Parametre:
nováFarba – objekt určujúci novú farbu plochy;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
Pozri tiež:
vymaž()
farbaPlochy
public static void farbaPlochy(Farebnosť objekt)
Nastaví farbu plochy sveta podľa farby zadaného objektu. Plochou
 je myslený základný komponent okna aplikácie, na ktorom je umiestnené
 plátno a prípadne ďalšie komponenty.
Parametre:
objekt – objekt určujúci novú farbu plochy
Pozri tiež:
farbaPlochy(Color)
farbaPlochy
public static Farba farbaPlochy(int r,
                                int g,
                                int b)
Nastaví farbu plochy sveta. Plochou je myslený základný komponent
 okna aplikácie, na ktorom je umiestnené plátno a prípadne ďalšie
 komponenty.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba plochy
Pozri tiež:
farbaPlochy(Color)
farbaPlochy
public static Farba farbaPlochy(int r,
                                int g,
                                int b,
                                int a)
Nastaví farbu a (ne)priehľadnosť plochy sveta. Plochou je
 myslený základný komponent okna aplikácie, na ktorom je umiestnené
 plátno a prípadne ďalšie komponenty.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba plochy
Pozri tiež:
farbaPlochy(Color)
predvolenáFarbaPlochy
public static void predvolenáFarbaPlochy()
Nastaví predvolenú farbu plochy. Ide o farbu základného komponentu
 okna aplikácie, na ktorom je umiestnené plátno a prípadne ďalšie
 komponenty. (Predvolenou farbou je obvykle šedá, ale farba sa môže
 líšiť v závislosti od operačného systému, jeho nastavení alebo podľa
 použitého dizajnu vzhľadu používateľského rozhrania – L&F.)
predvolenaFarbaPlochy
public static void predvolenaFarbaPlochy()
 Alias pre predvolenáFarbaPlochy.
farbaBodu
public static Farba farbaBodu(double x,
                              double y)
Zistí farbu bodu (jedného pixela) na zadaných súradniciach.
 Ak sa zadané súradnice nachádzajú mimo plochy sveta, je vrátená
 inštancia farebnosti žiadna. So získanou
 farbou môžeme ďalej pracovať – napríklad ju upravovať alebo
 zisťovať jej vlastnosti (farebné zložky…). Testovať, či má bod
 konkrétnu farbu, môžeme napríklad s pomocou metódy
 farbaBodu(x, y, farba).
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na zadanej
     pozícii alebo inštancia žiadna, ak sú
     zadané súradnice mimo rozmerov sveta
farbaBodu
public static Farba farbaBodu(Poloha objekt)
Zistí farbu bodu (jedného pixela) na pozícii zadaného objektu.
 Ak sa objekt nachádza mimo plochy sveta, je vrátená inštancia
 farebnosti žiadna farba. So získanou farbou
 môžeme ďalej pracovať – napríklad ju upravovať alebo zisťovať jej
 vlastnosti (farebné zložky…). Testovať, či má bod konkrétnu farbu
 môžeme napríklad s pomocou metódy
 farbaBodu(objekt, farba).
Parametre:
objekt – objekt, na ktorého pozícii má byť zistená farba bodu
Návratová hodnota:
farba bodu (objekt typu Farba) na pozícii
     zadaného objektu alebo inštancia žiadna, ak sa súradnice zadaného objektu nachádzajú mimo
     rozmerov sveta
farbaBodu
public static boolean farbaBodu(double x,
                                double y,
                                Color farba)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje so zadanou farbou. Ak sú zadané súradnice mimo plochy
 sveta, je vrátená hodnota false. Testovať farbu s pomocou
 tejto metódy môžeme napríklad takto:
 
 
if (Svet.farbaBodu(3.0, 5.0, modrá)) …
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
farba – farba, ktorú chceme porovnať s farbou bodu na zadanej
     pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     sveta a farba bodu na zadaných súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(Poloha objekt,
                                Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje so zadanou farbou. Ak sú súradnice zadaného objektu
 mimo plochy sveta, je vrátená hodnota false. Testovať
 farbu s pomocou tejto metódy môžeme napríklad takto:
 
 
if (Svet.farbaBodu(this, modrá)) …
Parametre:
objekt – objekt, na ktorého pozícii chceme overiť farbu bodu
farba – farba, ktorú chceme porovnať s farbou bodu na pozícii
     určeného objektu
Návratová hodnota:
true ak sa súradnice objektu nachádzajú v rámci
     rozmerov sveta a farba bodu na jeho mieste sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(double x,
                                double y,
                                Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu. Ak sú zadané súradnice mimo
 plochy sveta, je vrátená hodnota false.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
objekt – objekt, ktorého farbu chceme porovnať s farbou bodu
     na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     sveta a farba bodu na zadaných súradniciach sa zhoduje
     s farbou zadaného objektu (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(Poloha objekt,
                                Farebnosť farebnosť)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadaného objektu. Ak sú súradnice zadaného objektu
 mimo plochy sveta, je vrátená hodnota false.
Parametre:
objekt – objekt, na ktorého pozícii chceme overiť farbu bodu
farebnosť – objekt, ktorého farbu chceme porovnať s farbou
     bodu na pozícii predchádzajúceho objektu
Návratová hodnota:
true ak sa súradnice objektu nachádzajú v rámci
     rozmerov sveta a farba bodu na jeho mieste sa zhoduje s farbou
     druhého zadaného objektu (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(double x,
                                double y,
                                int r,
                                int g,
                                int b)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     sveta a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(double x,
                                double y,
                                int r,
                                int g,
                                int b,
                                int a)
Zistí, či sa farba bodu (jedného pixela) na zadaných súradniciach
 zhoduje s farbou zadanou prostredníctvom farebných zložiek a úrovne
 priehľadnosti.
Parametre:
x – x-ová súradnica vyšetrovaného bodu
y – y-ová súradnica vyšetrovaného bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na zadanej pozícii
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na zadanej pozícii
Návratová hodnota:
true ak sú zadané súradnice v rámci rozmerov
     sveta a farba bodu na zadaných súradniciach sa zhoduje
     so zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(Poloha objekt,
                                int r,
                                int g,
                                int b)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     sveta a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaBodu
public static boolean farbaBodu(Poloha objekt,
                                int r,
                                int g,
                                int b,
                                int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach zadaného
 objektu zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
Parametre:
objekt – objekt, ktorého poloha určuje súradnice vyšetrovaného
     bodu
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na pozícii objektu
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na pozícii objektu
Návratová hodnota:
true ak je poloha objektu v rámci rozmerov
     sveta a farba bodu na jeho súradniciach sa zhoduje so
     zadanou farbou (musia sa zhodovať všetky farebné zložky aj
     úroveň priehľadnosti), inak false
farbaNaMyši
public static Farba farbaNaMyši()
Zistí farbu bodu (jedného pixela) na súradniciach myši. So získanou
 farbou môžeme ďalej pracovať – napríklad ju upravovať alebo
 zisťovať jej vlastnosti (farebné zložky…). Testovať, či má bod
 konkrétnu farbu, môžeme napríklad s pomocou metódy farbaNaMyši(farba).
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy sveta, metóda by vrátila inštanciu farby žiadna.
 
 Príklad:
 
 Tento príklad demonštruje fungovanie metódy farbaNaMyši. Zistenú farbu zobrazí v elegantnom
 indikátore umiestnenom v ľavom hornom rohu (pozri
 zoznam zmien: poďakovanie
 uvedené pri verzii 1.35):
 
 
// Zaplňme kresbu množstvom farebných štvorcov
Svet.nekresli();
for (int j = 0; j &lt; 1000; ++j)
{
    double rozmer = Svet.náhodnéReálneČíslo(20, 30);
    farba((int)Svet.náhodnéCeléČíslo(0, 255),
        (int)Svet.náhodnéCeléČíslo(0, 255),
        (int)Svet.náhodnéCeléČíslo(0, 255));
    náhodnáPoloha();
    náhodnýSmer();
    vyplňŠtvorec(rozmer);
}
Svet.kresli();
// Definujme všetko potrebné (obsluhu udalostí, vlastný tvar) na to,
// aby robot počas pohybu myšou nad plátnom v elegantnom kruhovom
// indikátore ukazoval aktuálnu farbu nad kurzorom myši…
skočNa(Svet.ľavýOkraj() + 35, Svet.hornýOkraj() &#45; 35);
new ObsluhaUdalostí()
{
    @Override public void pohybMyši()
    {
        farba(Svet.farbaNaMyši());
    }
};
vlastnýTvar(new KreslenieTvaru()
{
    @Override public void kresli(GRobot r)
    {
        Farba mojaFarba = r.farba();
        farba(čierna);
        kruh(30);
        farba(biela);
        kruh(25);
        farba(mojaFarba);
        kruh(20);
    }
});
 
 Výsledok:
 
 
 Plátno je zaplnené farebnými štvorcami
 a farba pod kurzorom myšije indikovaná v kruhovom indikátore
 v ľavom hornom rohu(plátno na obrázku je
 zmenšené).
Návratová hodnota:
farba bodu (objekt typu Farba) na pozícii
     myši
farbaNaMysi
public static Farba farbaNaMysi()
 Alias pre farbaNaMyši.
farbaNaMyši
public static boolean farbaNaMyši(Color farba)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou. Testovať farbu s pomocou tejto
 metódy môžeme napríklad takto:
 
 
if (Svet.farbaNaMyši(modrá)) …
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy sveta, metóda by vrátila hodnotu false.
Parametre:
farba – farba, ktorú chceme porovnať s farbou bodu na
     súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky farebné
     zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public static boolean farbaNaMysi(Color farba)
 Alias pre farbaNaMyši.
farbaNaMyši
public static boolean farbaNaMyši(Farebnosť objekt)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje so zadanou farbou. Testovať farbu s pomocou tejto
 metódy môžeme napríklad takto:
 
 
if (Svet.farbaNaMyši(modrá)) …
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy sveta, metóda by vrátila hodnotu false.
Parametre:
objekt – objekt, ktorého farbu chceme porovnať s farbou bodu
     na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public static boolean farbaNaMysi(Farebnosť objekt)
 Alias pre farbaNaMyši.
farbaNaMyši
public static boolean farbaNaMyši(int r,
                                  int g,
                                  int b)
Zistí, či je farba bodu (jedného pixela) na súradniciach myši
 zhodná s farbou zadanou prostredníctvom farebných zložiek.
 (Úroveň priehľadnosti je nastavená na hodnotu 255,
 čiže na úplne nepriehľadnú farbu.)
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo aktívneho kresliaceho plátna robota, metóda by vrátila
 hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public static boolean farbaNaMysi(int r,
                                  int g,
                                  int b)
 Alias pre farbaNaMyši.
farbaNaMyši
public static boolean farbaNaMyši(int r,
                                  int g,
                                  int b,
                                  int a)
Zistí, či sa farba bodu (jedného pixela) na súradniciach myši
 zhoduje s farbou zadanou prostredníctvom farebných zložiek
 a úrovne priehľadnosti.
 
 Poznámka: Ak by súradnice myši boli náhodou
 mimo plochy sveta, metóda by vrátila hodnotu false.
Parametre:
r – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
g – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
b – červená zložka farby, ktorú chceme porovnať s farbou
     bodu na súradniciach myši
a – úroveň priehľadnosti farby, ktorú chceme porovnať
     s farbou bodu na súradniciach myši
Návratová hodnota:
true ak je farba bodu na súradniciach myši
     zhodná so zadanou farbou (musia sa zhodovať všetky tri
     farebné zložky aj úroveň priehľadnosti), inak false
farbaNaMysi
public static boolean farbaNaMysi(int r,
                                  int g,
                                  int b,
                                  int a)
 Alias pre farbaNaMyši.
písmo
public static Písmo písmo()
Čítaj aktuálny typ písma textov stropu. Má rovnaký efekt ako keby
 sme volali metódu strop.písmo().
pismo
public static Pismo pismo()
 Alias pre písmo.
písmo
public static void písmo(Font novéPísmo)
Nastav nový typ písma textov stropu. Má rovnaký efekt ako keby
 sme volali metódu strop.písmo(Font). Písmo používajú metódy vypíš a vypíšRiadok.
Parametre:
novéPísmo – objekt typu Písmo alebo Font
     určujúci nový typ písma
pismo
public static void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public static Písmo písmo(String názov,
                          double veľkosť)
Nastav nový typ písma textov stropu. Má rovnaký efekt ako keby sme
 volali metódu strop.písmo(String, double).
Parametre:
názov – názov písma; môže byť všeobecný názov logického písma
     (Dialog, DialogInput, Monospaced, Serif, SansSerif…) alebo
     názov konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená
     na typ float)
Návratová hodnota:
objekt typu Písmo určujúci nový typ písma
pismo
public static Pismo pismo(String názov,
                          double veľkosť)
 Alias pre písmo.
predvolenéPísmo
public static void predvolenéPísmo()
Nastav predvolený typ písma textov stropu. Má rovnaký efekt ako keby
 sme volali metódu strop.predvolenéPísmo().
predvolenePismo
public static void predvolenePismo()
 Alias pre predvolenéPísmo.
priečinokZvukov
public static void priečinokZvukov(String priečinok)
Ak sú všetky zvuky uložené v spoločnom priečinku, môžeme pre nich
 touto metódou nastaviť zdrojový priečinok čítania.
 Priečinok by sa mal nachádzať v hlavnom priečinku projektu alebo by
 k nemu mala viesť systémovo nezávislá relatívna cesta. Zadaním
 prázdneho reťazca alebo hodnoty null používanie
 priečinka zrušíme.
Parametre:
priečinok – názov priečinka, relatívna cesta, prípadne
     prázdny reťazec alebo null
Pozri tiež:
priečinokZvukov(), 
čítajZvuky(Object[]), 
čítajZvuky(String[]), 
čítajZvuk(String), 
čítajZvuk(String, boolean), 
zvuk(String), 
zvukNaPozadí(String), 
zastavZvuky(Object[]), 
hlasitosťPreZvuky(double, Object[]), 
váhaPreZvuky(double, Object[]), 
zastavZvuky(String[]), 
hlasitosťPreZvuky(double, String[]), 
váhaPreZvuky(double, String[]), 
Zvuk
priecinokZvukov
public static void priecinokZvukov(String priečinok)
 Alias pre priečinokZvukov.
priečinokZvukov
public static String priečinokZvukov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú zvuky čítané.
 Reťazec je obohatený o oddeľovací znak priečinkov java.io.File.separatorChar (/ alebo
 \ – záleží na type operačného systému), ktorý automaticky
 pridáva metóda priečinokZvukov(priečinok). Rovnako všetky oddeľovacie znaky
 priečinkov v relatívnej ceste sú nahradené podľa typu operačného
 systému.
Návratová hodnota:
aktuálny priečinok, z ktorého sú zvuky čítané
Pozri tiež:
priečinokZvukov(String), 
čítajZvuky(Object[]), 
čítajZvuky(String[]), 
čítajZvuk(String), 
čítajZvuk(String, boolean), 
zvuk(String), 
zvukNaPozadí(String), 
zastavZvuky(Object[]), 
hlasitosťPreZvuky(double, Object[]), 
váhaPreZvuky(double, Object[]), 
zastavZvuky(String[]), 
hlasitosťPreZvuky(double, String[]), 
váhaPreZvuky(double, String[]), 
Zvuk, 
Zvuk.čítaj(String), 
Zvuk.čítaj(String, boolean)
priecinokZvukov
public static String priecinokZvukov()
 Alias pre priečinokZvukov.
čítajZvuky
public static void čítajZvuky(Object... súbory)
Táto metóda slúži na čítanie zadaných zvukových súborov do
 vnútornej pamäte sveta (napríklad pri štarte aplikácie). Svet
 ukladá do vnútornej pamäte každý prehrávaný zvuk (ak tam už nie
 je). Z nej môže byť v prípade potreby (napríklad ak sa obsah súboru
 na disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). Táto metóda číta zvukové súbory vopred
 a tým môže prispieť k plynulejšej činnosti aplikácie po štarte (čas
 štartu sa predĺži, ale keďže súbory už nemusia byť čítané počas jej
 činnosti môže pracovať plynulejšie).
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbory – ľubovoľný počet reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokZvukov(String), 
čítajZvuky(String[]), 
čítajZvuk(String), 
čítajZvuk(String, boolean), 
zvuk(String), 
zvukNaPozadí(String), 
Zvuk, 
Zvuk.čítaj(String), 
Zvuk.čítaj(String, boolean)
citajZvuky
public static void citajZvuky(Object... súbory)
 Alias pre čítajZvuky.
prečítajZvuky
public static void prečítajZvuky(Object... súbory)
 Alias pre čítajZvuky.
precitajZvuky
public static void precitajZvuky(Object... súbory)
 Alias pre čítajZvuky.
čítajZvuky
public static void čítajZvuky(String[] súbory)
Táto metóda slúži na čítanie zadaných zvukových súborov do
 vnútornej pamäte sveta (napríklad pri štarte aplikácie). Svet
 ukladá do vnútornej pamäte každý prehrávaný zvuk (ak tam už nie
 je). Z nej môže byť v prípade potreby (napríklad ak sa obsah súboru
 na disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). Táto metóda číta zvukové súbory vopred
 a tým môže prispieť k plynulejšej činnosti aplikácie po štarte (čas
 štartu sa predĺži, ale keďže súbory už nemusia byť čítané počas jej
 činnosti, pracuje plynulejšie).
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbory – pole reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokZvukov(String), 
čítajZvuky(Object[]), 
čítajZvuk(String), 
čítajZvuk(String, boolean), 
zvuk(String), 
zvukNaPozadí(String), 
Zvuk, 
Zvuk.čítaj(String), 
Zvuk.čítaj(String, boolean)
citajZvuky
public static void citajZvuky(String[] súbory)
 Alias pre čítajZvuky.
prečítajZvuky
public static void prečítajZvuky(String[] súbory)
 Alias pre čítajZvuky.
precitajZvuky
public static void precitajZvuky(String[] súbory)
 Alias pre čítajZvuky.
čítajZvuk
public static Zvuk čítajZvuk(String súbor)
Prečíta do vnútornej pamäte sveta zadaný zvuk zo súboru a vráti
 ho v objekte typu Zvuk. Zvuk nie je prehraný. Podobnú
 úlohu plní metóda Svet.čítajZvuky(Object... súbory) (pozri pre viac informácií),
 ale s pomocou nej nie je možné získať objekt typu Zvuk
 na prípadné ďalšie spracovanie. Zvuk môže byť v prípade potreby
 (napríklad ak sa obsah súboru na disku zmenil) z vnútornej pamäte
 odstránený metódou Svet.uvoľni(názovZdroja).
 
 Táto metóda funguje tak, že podľa potreby vytvára nové unikátne
 inštancie zvuku identifikovaného názvom súboru. Nová inštancia
 vznikne vždy, ak sa vo vnútornej pamäti sveta nenájde taká
 inštancia určeného zvuku, ktorá práve nie je prehrávaná (to
 znamená, že metóda musí nájsť zvuk, ktorý je ticho). Takto fungujú
 všetky metódy pracujúce so zvukom. Ak by sa toto nedialo, tak by
 vznikalo nežiaduce správanie – vždy pri pokuse prehrať ten istý
 zvuk počas jeho prehrávania, by sa tento reštartoval. (Nebolo by
 možné prehrať sériu rovnakých zvukov, ktoré sa časovo prekrývajú.
 To by pôsobilo neprirodzene – každé reštartovanie zvuku by bolo
 počuteľné tak, ako keby sa zo zvuku zrazu časť „odsekla.“)
Parametre:
súbor – názov súboru so zvukom
Návratová hodnota:
zvuk v objekte typu Zvuk
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
priečinokZvukov(String), 
čítajZvuky(Object[]), 
čítajZvuky(String[]), 
čítajZvuk(String, boolean), 
zvuk(String), 
zvukNaPozadí(String), 
Zvuk, 
Zvuk.čítaj(String), 
Zvuk.čítaj(String, boolean)
citajZvuk
public static Zvuk citajZvuk(String súbor)
 Alias pre čítajZvuk.
prečítajZvuk
public static Zvuk prečítajZvuk(String súbor)
 Alias pre čítajZvuk.
precitajZvuk
public static Zvuk precitajZvuk(String súbor)
 Alias pre čítajZvuk.
čítajZvuk
public static Zvuk čítajZvuk(String súbor,
                             boolean unikátny)
Prečíta do vnútornej pamäte sveta zadaný zvuk zo súboru a vráti
 ho v objekte typu Zvuk. Zvuk nie je prehraný. Ak je
 parameter unikátny rovný false, tak táto metóda
 funguje rovnako ako metóda čítajZvuk(súbor).
 
 V prípade, že je parameter unikátny rovný true, tak táto metóda vždy vráti unikátny objekt zvuku
 aj v prípade, že jestvuje aspoň jedna kópia tohto zvuku, ktorá sa
 práve neprehráva (t. j. je ticho).
 
 Všetky kópie zvuku môžu byť v prípade potreby (napríklad ak sa
 obsah zvukového súboru na disku zmenil) z vnútornej pamäte
 odstránené metódou Svet.uvoľni(názovZdroja).
Parametre:
súbor – názov súboru so zvukom
unikátny – určuje, či objekt vrátený touto metódou musí
     byť unikátny
Návratová hodnota:
zvuk v objekte typu Zvuk
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
priečinokZvukov(String), 
čítajZvuky(Object[]), 
čítajZvuky(String[]), 
čítajZvuk(String), 
zvuk(String), 
zvukNaPozadí(String), 
Zvuk, 
Zvuk.čítaj(String), 
Zvuk.čítaj(String, boolean)
citajZvuk
public static Zvuk citajZvuk(String súbor,
                             boolean unikátny)
 Alias pre čítajZvuk.
prečítajZvuk
public static Zvuk prečítajZvuk(String súbor,
                                boolean unikátny)
 Alias pre čítajZvuk.
precitajZvuk
public static Zvuk precitajZvuk(String súbor,
                                boolean unikátny)
 Alias pre čítajZvuk.
zvuk
public static void zvuk(String súbor)
Prehrá zvukový súbor (formát .wav, .au alebo
 .mp3).
 
 Napríklad:
 
 
Svet.zvuk("zvuk.wav");
 
 
 Zvuk
 „zvuk.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
 
 Zvuk prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaného zvuku. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbor – názov zvukového súboru, ktorý má byť prehraný
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
priečinokZvukov(String), 
zvukNaPozadí(String), 
Zvuk
zvukNaPozadí
public static void zvukNaPozadí(String súbor)
Začne alebo ukončí prehrávanie zvuku zo súboru na pozadí (formát
 .wav, .au alebo .mp3). Ak chceme
 prehrávanie zvuku zastaviť, zadáme do argumentu metódy
 null.
 
 Zvuk prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaného zvuku. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbor – názov zvukového súboru, ktorý má byť prehrávaný,
     alebo null na zastavenie prehrávania
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
priečinokZvukov(String), 
zvuk(String), 
Zvuk
zvukNaPozadi
public static void zvukNaPozadi(String súbor)
 Alias pre zvukNaPozadí.
hráZvukNaPozadí
public static boolean hráZvukNaPozadí()
Zistí, či je aktívne prehrávanie zvuku na pozadí, ktoré bolo
 spustené metódou zvukNaPozadí.
Návratová hodnota:
true – áno; false – nie
hraZvukNaPozadi
public static boolean hraZvukNaPozadi()
 Alias pre hráZvukNaPozadí.
zastavZvuky
public static void zastavZvuky(Object... súbory)
Zastaví všetky uvedené zvuky. Zoznam je treba uviesť v tvare
 objektov, ktorých prevody na textové reťazce budú označovať
 názvy súborov (prípadne zdrojov), z ktorých zvuky boli alebo majú
 byť prečítané. (Najlepšie použiť priamo reťazce.)
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbory – ľubovoľný počet reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokZvukov(String), 
zastavZvuky(String[]), 
Zvuk
hlasitosťPreZvuky
public static void hlasitosťPreZvuky(double miera,
                                     Object... súbory)
Nastaví hromadne hlasitosť pre všetky uvedené zvuky. Zoznam je
 treba uviesť v tvare objektov, ktorých prevody na textové reťazce
 budú označovať názvy súborov (prípadne zdrojov), z ktorých zvuky
 boli alebo majú byť prečítané. (Najlepšie použiť priamo reťazce.)
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
miera – miera hlasitosti v percentách – 0 % zodpovedá hodnote
     0.0, 100 % hodnote 1.0
súbory – ľubovoľný počet reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
Zvuk.hlasitosť(double), 
priečinokZvukov(String), 
hlasitosťPreZvuky(double, String[]), 
Zvuk
hlasitostPreZvuky
public static void hlasitostPreZvuky(double miera,
                                     Object... súbory)
 Alias pre hlasitosťPreZvuky
váhaPreZvuky
public static void váhaPreZvuky(double miera,
                                Object... súbory)
Nastaví hromadne stereováhu pre všetky uvedené zvuky. Zoznam je
 treba uviesť v tvare objektov, ktorých prevody na textové reťazce
 budú označovať názvy súborov (prípadne zdrojov), z ktorých zvuky
 boli alebo majú byť prečítané. (Najlepšie je použiť priamo reťazce.)
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
miera – miera stereovyváženia – reálne číslo od
     -1.0 (ľavý kanál) po
     +1.0 (pravý kanál)
súbory – ľubovoľný počet reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
Zvuk.váha(double), 
priečinokZvukov(String), 
váhaPreZvuky(double, String[]), 
Zvuk
vahaPreZvuky
public static void vahaPreZvuky(double miera,
                                Object... súbory)
 Alias pre váhaPreZvuky
zastavZvuky
public static void zastavZvuky(String[] súbory)
Zastaví všetky uvedené zvuky. Zoznam je tvorený poľom textových
 reťazcov označujúcich súbory, z ktorých boli zvuky prečítané.
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
súbory – pole reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
priečinokZvukov(String), 
zastavZvuky(Object[]), 
Zvuk
hlasitosťPreZvuky
public static void hlasitosťPreZvuky(double miera,
                                     String[] súbory)
Nastaví hromadne hlasitosť pre všetky uvedené zvuky. Zoznam je
 tvorený poľom textových reťazcov označujúcich súbory, z ktorých
 boli zvuky prečítané.
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
miera – miera hlasitosti v percentách – 0 % zodpovedá hodnote
     0.0, 100 % hodnote 1.0
súbory – pole reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
Zvuk.hlasitosť(double), 
priečinokZvukov(String), 
hlasitosťPreZvuky(double, Object[]), 
Zvuk
hlasitostPreZvuky
public static void hlasitostPreZvuky(double miera,
                                     String[] súbory)
 Alias pre hlasitosťPreZvuky
váhaPreZvuky
public static void váhaPreZvuky(double miera,
                                String[] súbory)
Nastaví hromadne stereováhu pre všetky uvedené zvuky. Zoznam je
 tvorený poľom textových reťazcov označujúcich súbory, z ktorých
 boli zvuky prečítané.
 
 Pozor! Táto metóda zároveň spôsobí
 prečítanie všetkých dotknutých zvukov do vnútornej pamäte (ak tam
 už nie sú). Z nej môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) odstránené metódou Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 alebo zvukmi, ktoré prijímajú názov súboru ako parameter.)
 
 Poznámka: Táto metóda
 a všetky také, ktoré pracujú so zvukmi identifikovanými podľa
 názvu súboru tak, že podľa potreby vytvára(jú) nové unikátne
 inštancie identifikovaných zvukov. Podrobnejšie vysvetlenie je
 v opise metódy čítajZvuk(súbor).
Parametre:
miera – miera stereovyváženia – reálne číslo od
     -1.0 (ľavý kanál) po
     +1.0 (pravý kanál)
súbory – pole reťazcov označujúcich súbory
Výnimky:
GRobotException – ak niektorý súbor nebol nájdený;
     spracovanie sa v okamihu vzniku výnimky neskončí a vrhnutá je
     len posledná vzniknutá výnimka, to znamená, že všetky
     predchádzajúce výnimky sú ignorované
Pozri tiež:
Zvuk.váha(double), 
priečinokZvukov(String), 
váhaPreZvuky(double, Object[]), 
Zvuk
vahaPreZvuky
public static void vahaPreZvuky(double miera,
                                String[] súbory)
 Alias pre váhaPreZvuky
pípni
public static void pípni()
Aplikácia vydá štandardný zvuk operačného systému. (To je
 využiteľné napríklad pri jednoduchom overení, či sa podarilo
 spustiť nejakú časť programu…)
pipni
public static void pipni()
 Alias pre pípni.
pípni
public static void pípni(String názov)
Aplikácia vydá štandardný zvuk operačného systému Windows podľa
 vloženého pomenovania. Operačný systém Windows má definovaných
 viacero systémových zvukov, ktoré sú dostupné prostredníctvom
 tejto verzie metódy. Ak je metóda spustená na inom operačnom
 systéme alebo nastane iné zlyhanie, tak je prehraný rovnaký
 zvukový signál ako pri metóde pípni() (bez
 parametra).
Parametre:
názov – názov zvuku; tu sú niektoré názvy zvukov, ktoré
     sú podporované OS Windows: "asterisk",
     "close", "default",
     "exclamation", "exit",
     "hand", "maximize",
     "menuCommand", "menuPopup",
     "minimize", "open",
     "question", "restoreDown",
     "restoreUp" alebo "start".
pipni
public static void pipni(String názov)
 Alias pre pípni.
frekvenciaNoty
public static double frekvenciaNoty(int nota,
                                    int oktáva)
Vypočíta harmonickú frekvenciu tónu na základe zadaného
 poradového čísla noty (odporúčané sú hodnoty 1 až 12) a oktávy
 (odporúčané sú hodnoty −1 až 9).
 
 Poradové čísla nôt zodpovedajú
 nasledujúcim tónom:
 
 
 1C
  
 4E♭/D♯
  
 7F♯/G♭
  
 10A
 2C♯/D♭5E
 8G11B♭/H♭/A♯
 3D6F
 9A♭/G♯12B/H
 
 
 Táto metóda vypočíta frekvenciu aj v prípade, že zadané hodnoty
 tónu a oktávy sú mimo odporúčaných rozsahov, ale v prípade výrazného
 prekročenia rozsahu nemusí byť výsledná frekvencia počuteľná.
Parametre:
nota – číslo noty v rámci oktávy (1 až 12 – pozri tabuľku vyššie)
otáva – číslo oktávy (−1 až 9, prípadne 10)
Návratová hodnota:
harmonická frekvencia tónu vypočítaná z čísla noty a oktávy
Pozri tiež:
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
hrajTón
public static void hrajTón(double frekvencia)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou.
 Hlasitosť tónu je automaticky nastavená na 80 % (0.8).
 Prehrávanie tónu zastaví volanie metódy zastavTón.
 Spustením tejto metódy sa zruší prípadný plán prehrávaných tónov
 vytvorený volaním metódy hrajTón(frekvencia, hlasitosť, trvanie).
 
 Príklad:
 
 Nasledujúci jednoduchý príklad vyrobí zvukový hvizd v rozmedzí
 frekvencií od 50 Hz do zhruba 15 kHz. Ukážka hvízdnutia je pod
 príkladom.
 
 
for (double f = 50.0; f &lt;= 15_000.0; f += 150.0)
{
    Svet.hrajTón(f);
    Svet.čakaj(0.010);
}
Svet.zastavTón();
 
 Ukážka hvízdnutia:
 
 
 Zvuk
 „hvizd.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Parametre:
frekvencia – harmonická frekvencia tónu v hertzoch
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
hrajTon
public static void hrajTon(double frekvencia)
 Alias pre hrajTón.
hrajTón
public static void hrajTón(double frekvencia,
                           double hlasitosť)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou
 so zadanou hlasitosťou (v rozsahu od 0.0 do 1.0).
 Prehrávanie tónu zastaví volanie metódy zastavTón.
 Spustením tejto metódy sa zruší prípadný plán prehrávaných tónov
 vytvorený volaním metódy hrajTón(frekvencia, hlasitosť, trvanie).
Parametre:
frekvencia – harmonická frekvencia tónu v hertzoch
hlasitosť – hlasitosť prehrávaného tónu
     (0.0 – 1.0)
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
hrajTon
public static void hrajTon(double frekvencia,
                           double hlasitosť)
 Alias pre hrajTón.
hrajTón
public static void hrajTón(double frekvencia,
                           double hlasitosť,
                           double trvanie)
Spustí prehrávanie tónu tvoreného jedinou harmonickou frekvenciou
 so zadanou hlasitosťou (v rozsahu od 0.0 do 1.0)
 a s dĺžkou trvania prehrávania v sekundách. To znamená, že prehrávanie
 tónu sa automaticky zastaví po uplynutí zadaného časového intervalu.
 Prehrávanie tónu tiež môže byť predčasne zastavené volaním metódy
 zastavTón. Viacnásobné volanie tejto metódy
 vytvorí časový plán prehrávania tónov so zadanými frekvenciami,
 hlasitosťami a trvaním. Tento plán však rušia volania všetkých
 ostatných metód v kategórii prehrávania tónov:
 hrajTón(frekvencia),
 hrajTón(frekvencia, hlasitosť)
 a zastavTón().
 
 Príklad:
 
 Nasledujúci príklad naplánuje a prehrá zvuk, ktorého ukážka
 je nižšie.
 
 
for (double n = 1.0; n &gt;= 0.0; n &#45;= 0.05)
    Svet.hrajTón(100.0 + n * 25.0, n, 0.025);
 
 Ukážka výsledku:
 
 
 Zvuk
 „brum.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Parametre:
frekvencia – harmonická frekvencia tónu v hertzoch
hlasitosť – hlasitosť prehrávaného tónu
     (0.0 – 1.0)
trvanie – trvanie prehrávania tónu v sekundách
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
hrajTon
public static void hrajTon(double frekvencia,
                           double hlasitosť,
                           double trvanie)
 Alias pre hrajTón.
zastavTón
public static void zastavTón()
Okamžite zastaví prehrávanie generovaného harmonického signálu
 a vyčistí vnútorný zoznam tónov naplánovaných na prehranie.
 
 Príklad použitia tejto metódy nájdete v opise metódy
 hrajTón(frekvencia).
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
zastavTon
public static void zastavTon()
 Alias pre zastavTón.
otvorSúborNaUloženieTónu
public static boolean otvorSúborNaUloženieTónu(String názov)
Umožní začať záznam všetkých generovaných tónov, ktorý sa po
 zavolaní párovej metódy zavriSúborNaUloženieTónu uloží do súboru s požadovaným názvom.
 Podporované formáty súborov (určené prislúchajúcou príponou) sú:
 AIFF (.aiff, .aif), AU (.au),
 SND (.snd) a WAVE (.wav). Ak zadaný súbor
 jestvuje, tak vznikne výnimka (soundAlreadyExists –
 pozri opis triedy GRobotException).
 Príklad použitia nájdete v opise metódy
 otvorSúborNaUloženieTónu(názov, prepísať).
Parametre:
názov – názov súboru na uloženie generovaného tónu
Návratová hodnota:
ak bolo všetko vykonané bezchybne, tak je návratová hodnota
     true
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
otvorSuborNaUlozenieTonu
public static boolean otvorSuborNaUlozenieTonu(String názov)
 Alias pre otvorSúborNaUloženieTónu.
otvorSúborNaUloženieTónu
public static boolean otvorSúborNaUloženieTónu(String názov,
                                               boolean prepísať)
Umožní začať záznam všetkých generovaných tónov, ktorý sa po
 zavolaní párovej metódy zavriSúborNaUloženieTónu uloží do súboru s požadovaným názvom.
 Podporované formáty súborov (určené prislúchajúcou príponou) sú:
 AIFF (.aiff, .aif), AU (.au),
 SND (.snd) a WAVE (.wav). Parameter
 prepísať určuje, či má byť prípadný jestvujúci súbor prepísaný,
 alebo nie. (Pričom v prípade, že jestvuje, a nemá byť prepísaný,
 vznikne výnimka – soundAlreadyExists, pozri opis
 triedy GRobotException.)
 
 Príklad:
 
 Nasledujúci príklad vygeneruje nízky, mierne vibrujúci tón
 „gongu“ (v podsate iba zvuk s plynule klesajúcou hlasitosťou)
 a uloží ho do súboru gong.wav. (Ukážka zvuku je
 nižšie.)
 
 
// Návratové hodnoty metód otvorSúborNaUloženieTónu
// a zavriSúborNaUloženieTónu by sme mohli aj ignorovať.
// Celý príklad by sa vykonal aj v prípade ich zlyhania,
// len by sa nič neuložilo…
if (Svet.otvorSúborNaUloženieTónu("gong.wav", true))
{
    for (int i = 32; i &gt;= 0; &#45;&#45;i)
    {
        Svet.hrajTón(212.0 + 16 * (i % 2), i * 0.025);
        Svet.čakaj(0.020);
    }
    Svet.zastavTón();
    Svet.čakaj(0.200);
    if (!Svet.zavriSúborNaUloženieTónu())
        System.err.println("Súbor zvuku sa nepodarilo zapísať.");
}
else System.err.println("Súbor na zápis zvuku sa nepodarilo otvoriť.");
// Ak by sme nevykonali nasledujúci príkaz, inštancia sveta by
// zostala stále otvorená (bez okna umožňujúceho jej zavretie)…
Svet.koniec();
 
 Výsledok:
 
 
 Zvuk
 „gong.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Parametre:
názov – názov súboru na uloženie generovaného tónu
prepísať – určuje, či sa má prípadný jestvujúci súbor prepísať
Návratová hodnota:
ak bolo všetko vykonané bezchybne, tak je návratová hodnota
     true
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
zavriSúborNaUloženieTónu(), 
generátorTónov(), 
Zvuk
otvorSuborNaUlozenieTonu
public static boolean otvorSuborNaUlozenieTonu(String názov,
                                               boolean prepísať)
 Alias pre otvorSúborNaUloženieTónu.
zavriSúborNaUloženieTónu
public static boolean zavriSúborNaUloženieTónu()
Ukončí záznam generovaných tónov, ktorý bol začatý volaním
 niektorej verzie metódy otvorSúborNaUloženieTónu.
Návratová hodnota:
ak bolo všetko vykonané bezchybne, tak je návratová hodnota
     true
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
generátorTónov(), 
Zvuk
zavriSuborNaUlozenieTonu
public static boolean zavriSuborNaUlozenieTonu()
 Alias pre zavriSúborNaUloženieTónu.
generátorTónov
public static knižnica.podpora.BeepChannel generátorTónov()
Táto metóda sprostredkúva prístup k vnútornej inštancii
 generátora tónov (
BeepChannel). Vlastnosti tohto
 generátora nie sú opísané v tejto dokumentácii, ale dajú sa
 naštudovať v angličtine z komentárov uvedených priamo v triedach 
BeepChannel a 
 href="https://github.com/raubirius/GRobot/blob/master/kni%C5%BEnica/podpora/Channel.java"
Channel. Aspoň jednou
 z nich sa zaoberá príklad uvedený nižšie.
 
 Príklad:
 
 Jednou zo základných vlastností generátora je úprava hladkosti
 prechodov medzi generovanými frekvenciami tónov (smoothness).
 
 Tento príklad ukazuje rozdiel medzi dvomi rôznymi hodnotami
 hladkosti. Kód používa primitívny generátor pseudonáhodných čísiel,
 ktorý na vygenerovanie postupnosti frekvencií, ktoré majú byť
 prehraté používa jednoduché prepočty s prvočíslami. Aj pri zbežnom
 pohľade na kód by malo byť zjavné, že v obidvoch prípadoch budú
 „vygenerované“ (vypočítané) a prehrané rovnaké pseudonáhodné
 sekvencie frekvencií. Rozdiel je len v hladkosti použitej pri
 generovaní.
 
 Prvé prehrávanie sekvencie je vykonané s hladkosťou 1000 (čo
 je predvolená hodnota) a druhé s hladkosťou 1 (čo je približne
 najmenšia dovolená hodnota hladkosti). Rozdiel si môžete vypočuť
 v ukážkach obidvoch prípadov, ktoré sú zverejnené nižšie.
 
 
int n, n1, n2, n3;
Svet.generátorTónov().setSmoothness(1000.0);
n1 = 3; n2 = 5; n3 = 7;
for (n = 1; n &lt;= 100; ++n)
{
    Svet.hrajTón((n1 + n2 + n3) * 100);
    Svet.čakaj(0.020);
    n1 += 7; n1 %= 11;
    n2 += 11; n2 %= 13;
    n3 += 13; n3 %= 17;
}
Svet.zastavTón();
Svet.čakaj(0.200);
Svet.generátorTónov().setSmoothness(1.0);
n1 = 3; n2 = 5; n3 = 7;
for (n = 1; n &lt;= 100; ++n)
{
    Svet.hrajTón((n1 + n2 + n3) * 100);
    Svet.čakaj(0.020);
    n1 += 7; n1 %= 11;
    n2 += 11; n2 %= 13;
    n3 += 13; n3 %= 17;
}
Svet.zastavTón();
Svet.čakaj(0.200);
 
 Ukážky vygenerovaných sekvencií:
 
 
 
 
 Zvuk
 „nahoda-01.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
 
 
 Zvuk
 „nahoda-02.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
 
 
Pozri tiež:
frekvenciaNoty(int, int), 
hrajTón(double), 
hrajTón(double, double), 
hrajTón(double, double, double), 
zastavTón(), 
otvorSúborNaUloženieTónu(String), 
otvorSúborNaUloženieTónu(String, boolean), 
zavriSúborNaUloženieTónu(), 
Zvuk
generatorTonov
public static knižnica.podpora.BeepChannel generatorTonov()
 Alias pre generátorTónov.
spustiČasovač
public static void spustiČasovač(double čas)
Spustí časovač so zadaným časovým intervalom v sekundách.
 Pri viacnásobnom volaní tejto metódy je časovač vždy zastavený
 (to aj vtedy, keď je zadaný rovnaký časový interval ako naposledy)
 a opätovne spustený s novým časovým intervalom.
 
 Ďalšie podrobnosti o časovači sú uvedené v opise metódy
 spustiČasovač().
Parametre:
čas – časový interval v sekundách; desatinná časť je
     zaokrúhlená na milisekundy
Pozri tiež:
spustiČasovač(), 
odložČasovač(double), 
časovačAktívny(), 
intervalČasovača(), 
zastavČasovač(), 
násobTiky(int), 
tik()
spustiCasovac
public static void spustiCasovac(double čas)
 Alias pre spustiČasovač.
spustiČasovač
public static void spustiČasovač()
Spustí časovač s naposledy zadaným časovým intervalom
 (v sekundách) alebo s predvoleným intervalom 40 milisekúnd (ak
 nebol v činnosti). (Štyridsať milisekúnd zodpovedá snímkovacej
 frekvencii 25 snímok za sekundu.) Viacnásobné volanie tejto metódy
 po spustení časovača je (na rozdiel od verzie spustiČasovač(čas)) ignorované.
 
 Časovač spúšťa v zadanom časovom intervale metódy (reakcie)
 prislúchajúce udalostiam súvisiacim s časom, čo je reakcia
 ObsluhaUdalostí.tik(), v ktorej je v prípade potreby možné
 s výhodou získať objekt s informáciami o poslednej udalosti
 časovača prostredníctvom metódy ÚdajeUdalostí.tik().
 Ďalšími dvomi najčastejšie spúšťanými reakciami sú robotova aktivita()
 a pasivita(), podľa toho, či je
 robot aktívny alebo pasívny, ale okrem nich môžu byť spúšťané
 rôzne ďalšie reakcie, ktoré v prostredí programovacieho rámca
 vznikajú ako zastavenie,
 dosiahnutie cieľa a mnoho
 iných, z ktorých žiadna bez aktívneho časovača nemôže fungovať.
 
 Práve z toho dôvodu mnoho metód programovacieho rámca spúšťa
 časovač automaticky, čo sa však vždy dá potlačiť. Pozri napríklad:
 rýchlosť, uhlováRýchlosť…
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Pozri tiež:
spustiČasovač(double), 
odložČasovač(double), 
časovačAktívny(), 
intervalČasovača(), 
zastavČasovač(), 
násobTiky(int), 
uspiČasovač(), 
tik()
spustiCasovac
public static void spustiCasovac()
 Alias pre spustiČasovač.
odložČasovač
public static void odložČasovač(double čas)
Odloží časovač o zadaný časový interval v sekundách. Ak časovač
 doteraz nebol spustený, tak funguje rovnako ako metóda spustiČasovač, inak iba odloží najbližšie
 spustenie časovača o zadaný časový údaj.
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Parametre:
čas – časový interval v sekundách; desatinná časť je
     zaokrúhlená na milisekundy
Pozri tiež:
spustiČasovač(double), 
časovačAktívny(), 
intervalČasovača(), 
zastavČasovač(), 
násobTiky(int), 
uspiČasovač(), 
tik()
odlozCasovac
public static void odlozCasovac(double čas)
 Alias pre odložČasovač.
časovačAktívny
public static boolean časovačAktívny()
Zistí, či je časovač aktívny.
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Návratová hodnota:
true/&#8203;false – podľa toho, či je
     časovač aktívny, alebo nie
Pozri tiež:
spustiČasovač(double), 
spustiČasovač(), 
odložČasovač(double), 
intervalČasovača(), 
zastavČasovač(), 
násobTiky(int), 
uspiČasovač(), 
tik()
casovacAktivny
public static boolean casovacAktivny()
 Alias pre časovačAktívny.
časovačSpustený
public static boolean časovačSpustený()
 Alias pre časovačAktívny.
casovacSpusteny
public static boolean casovacSpusteny()
 Alias pre časovačAktívny.
intervalČasovača
public static double intervalČasovača()
Vráti časový interval časovača v sekundách.
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Návratová hodnota:
časový interval v sekundách; desatinná časť je
     zaokrúhlená na milisekundy
Pozri tiež:
spustiČasovač(double), 
spustiČasovač(), 
odložČasovač(double), 
časovačAktívny(), 
zastavČasovač(), 
násobTiky(int), 
uspiČasovač(), 
tik()
intervalCasovaca
public static double intervalCasovaca()
 Alias pre intervalČasovača.
zastavČasovač
public static void zastavČasovač()
Zastaví časovač, ktorý bol spustený metódou spustiČasovač.
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Pozri tiež:
spustiČasovač(double), 
spustiČasovač(), 
odložČasovač(double), 
časovačAktívny(), 
intervalČasovača(), 
násobTiky(int), 
uspiČasovač(), 
tik()
zastavCasovac
public static void zastavCasovac()
 Alias pre zastavČasovač.
násobTiky
public static int násobTiky()
Zistí aktuálnu hodnotu násobičky tikov časovača. Pozri:
 násobTiky(počet).
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Návratová hodnota:
aktuálna hodnota násobičky tikov
Pozri tiež:
násobTiky(int), 
čísloTiku(), 
spustiČasovač(double), 
uspiČasovač(), 
tik()
násobTiky
public static void násobTiky(int počet)
Upraví hodnotu násobičky tikov časovača. Ak je časovač zapnutý, tak sa zmenou tejto hodnoty
 dá upraviť počet cyklov rôznych operácií vykonaných v rámci jedného
 tiku. Ide o množstvo rôznych záležitostí ako sú aktivity alebo aj pasitivy robotov, kofeín, samotné reakcie
 na tik, prípadne ďalšie.
 
 Upozornenie: Príliš veľké hodnoty
 násobiča preťažia systém.
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Parametre:
počet – nová hodnota násobičky tikov
Pozri tiež:
násobTiky(), 
čísloTiku(), 
spustiČasovač(double), 
tik()
nasobTiky
public static int nasobTiky()
 Alias pre násobTiky.
nasobTiky
public static void nasobTiky(int násobTiky)
 Alias pre násobTiky.
čísloTiku
public static int čísloTiku()
Overí, ktorý násobok tiku je práve vykonávaný. Toto overenie má
 zmysel vykonávať len v rámci reakcií na tik. Pozri aj: násobTiky(počet).
 
 Pozor! Časovač môže byť uspatý. Vtedy všetky metódy, ktoré menia jeho
 parametre fungujú, ale samotný časovač nereaguje – správa sa, ako
 keby negeneroval tiky (ale v skutočnosti ich len vynecháva).
 Podrobnosti o užitočnosti spánku časovača nájdete v opise metódy
 uspiČasovač.
Návratová hodnota:
aktuálne číslo tiku
Pozri tiež:
násobTiky(), 
násobTiky(int), 
spustiČasovač(double), 
uspiČasovač(), 
tik()
cisloTiku
public static int cisloTiku()
 Alias pre čísloTiku.
časovačSpí
public static boolean časovačSpí()
Zistí, či je časovač v „režime spánku.“ Podrobnosti o užitočnosti
 spánku časovača nájdete v opise metódy uspiČasovač.
Pozri tiež:
časovačSpí(), 
uspiČasovač(), 
prebuďČasovač(), 
spustiČasovač(), 
časovačAktívny(), 
násobTiky(int), 
tik()
casovacSpi
public static boolean casovacSpi()
 Alias pre časovačSpí.
uspiČasovač
public static void uspiČasovač()
Uvedie časovač do „režimu spánku.“ Keď časovač spí, preskakuje
 tiky, čiže sa zdá, ako keby nefungoval. Tento režim je veľmi
 užitočné zapnúť počas inicializácie aplikácie. Zabráni sa tým
 neželanému predčasnému spúšťaniu časovača v období, keď ešte nie
 sú všetky objekty korektne inicializované, čo by s vysokou
 pravdepodobnosťou viedlo ku vzniku chýb.
 
 Príklad:
 
 
public static void main(String[] args)
{
    Svet.použiKonfiguráciu("MojaAplikácia.cfg");
    try
    {
        // Ak by v tomto bloku vznikla chyba, okno aplikácie bude aj tak
        // zobrazené vďaka bloku finally. Používateľ ho vďaka tomu bude môcť
        // aspoň korektne zavrieť.
        Svet.skry();
        Svet.nekresli();
        Svet.uspiČasovač();
        new MojaAplikácia();
        Svet.kresli();
        Svet.prebuďČasovač();
        Svet.spustiČasovač(); // (Aj keď už je pravdepodobne spustený.)
    }
    finally
    {
        Svet.zobraz();
    }
}
Pozri tiež:
časovačSpí(), 
uspiČasovač(), 
prebuďČasovač(), 
spustiČasovač(), 
časovačAktívny(), 
násobTiky(int), 
tik()
uspiCasovac
public static void uspiCasovac()
 Alias pre uspiČasovač.
prebuďČasovač
public static void prebuďČasovač()
Prebudí časovač z „režimu spánku.“ Podrobnosti o užitočnosti
 spánku časovača nájdete v opise metódy uspiČasovač.
Pozri tiež:
časovačSpí(), 
uspiČasovač(), 
prebuďČasovač(), 
spustiČasovač(), 
časovačAktívny(), 
násobTiky(int), 
tik()
prebudCasovac
public static void prebudCasovac()
 Alias pre prebuďČasovač.
zobuďČasovač
public static void zobuďČasovač()
 Alias pre prebuďČasovač.
zobudCasovac
public static void zobudCasovac()
 Alias pre prebuďČasovač.
tik
public static void tik()
Simuluje vykonanie reakcie na tik časovača. Vykonanie tejto metódy má zmysel
 mimo reťaze udalostí vykonávaných v rámci tiku časovača. Dá sa
 použiť napríklad na krokovanie tikov pri zastavenom časovači.
 
 Upozornenie: Nezamieňajte si túto metódu
 s reakciami na časovač alebo
 údajmi udalosti časovača.
 
 Pozor! Ak je časovač uspatý, tak volanie tejto metódy nemá žiadny
 efekt.
Pozri tiež:
násobTiky(int), 
spustiČasovač(double), 
uspiČasovač(), 
ObsluhaUdalostí.tik(), 
GRobot.tik(), 
ÚdajeUdalostí.tik()
čakaj
public static void čakaj(double početSekúnd)
Pozdrží vykonávanie programu na zadaný počet sekúnd.
 
 Táto metóda v skutočnosti uspí aktuálne (pravdepodobne hlavné)
 vlákno aplikácie. Jej použitie musí byť vždy dobre zvážené.
 Môže nájsť využitie napríklad pri odľahčení procesora spomalením
 programu (výpočtu) pri výpočtovo náročných operáciách, treba však
 rátať so značným znížením výkonu. Môže byť tiež použitá na
 pozastavenie synchrónne vykonávaného programu (t. j. programu
 v jednom vlákne, ktorého činnosť sa končí prakticky okamžite po
 ukončení hlavnej metódy, čo je hlavný rozdiel oproti asynchrónne
 vykonávaným, čiže udalosťami riadeným, programom/aplikáciám).
 
 (Pozri aj opisy ostatných metód na čakanie, ktorých využitie
 je, s výnimkou metódy čakajNaVstup, možné
 len v hlavnom vlákne, len pri synchrónnej činnosti programu.)
Parametre:
početSekúnd – počet sekúnd, na ktorý sa má vykonávanie
     programu zastaviť
Pozri tiež:
čakajNaVstup(), 
čakajNaKláves(), 
čakajNaKlik(), 
čakajNaKlikAleboKláves()
cakaj
public static void cakaj(double početSekúnd)
 Alias pre čakaj.
spustiČasomieru
public static void spustiČasomieru()
Táto metóda „spustí“ časomieru. V skutočnosti metóda pracuje
 tak, že do vnútorného atribútu uloží aktuálny čas virtuálneho
 stroja v nanosekundách, ktorý sa neskôr použije (metódou zastavČasomieru) na vypočítanie trvania
 merania (v sekundách). Príklad použitia je v opise metódy zastavČasomieru.
Pozri tiež:
zastavČasomieru()
spustiCasomieru
public static void spustiCasomieru()
 Alias pre spustiČasomieru.
zastavČasomieru
public static double zastavČasomieru()
Táto metóda „zastaví“ časomieru a vráti výsledok merania
 v sekundách. V skutočnosti metóda pracuje tak, že odčíta od
 aktuálneho času virtuálneho stroja v nanosekundách čas, ktorý bol
 zapamätaný pri spustení merania metódou spustiČasomieru a výsledok prepočíta na reálne číslo vyjadrujúce
 čas v sekundách (s presnosťou, ktorá by nemala byť nižšia než
 tri desatinné miesta – teoreticky by mohla dosahovať presnosť
 deväť desatinných miest (presnosť nanosekúnd), avšak skutočná
 presnosť je nižšia).
 
 Príklad:
 
 
Svet.spustiČasomieru();
// Časovo náročná operácia, ktorej trvanie chceme odmerať…
double čas = Svet.zastavČasomieru(); // Výsledok merania je uložený v premennej „čas“
Svet.vypíšRiadok("Výsledný čas: ", čas, "s");
 
 Výsledok:
 
 Výsledkom môže byť napríklad takýto výpis:
 
 
Výsledný čas: 6,475 s
Návratová hodnota:
nameraný čas v sekundách
Pozri tiež:
spustiČasomieru()
zastavCasomieru
public static double zastavCasomieru()
 Alias pre zastavČasomieru.
lineárnaInterpolácia
public static final double lineárnaInterpolácia(double a,
                                                double b,
                                                double t)
Táto metóda slúži na parametrické vypočítanie hodnoty ležiacej
 medzi dvomi zadanými hodnotami.
 
 Okrem lineárnej interpolácie podporuje rámec výpočet
 kvadratickej a kubickej interpolácie a aproximácie:
 
 
 kvadratická interpolácia,
 kvadratická aproximácia,
 kubická interpolácia,
 kubická aproximácia.
 
 
 Hlavný rozdiel medzi interpoláciou a aproximáciou je, že
 (zjednodušene povedané) interpolácia prechádza všetkými bodmi,
 s pomocou ktorých počíta „chýbajúce“ hodnoty a aproximácia
 vychádza z prvého bodu, vchádza do posledného bodu a hodnotami
 ostantných bodov sa iba riadi – môže, ale nemusí nimi prechádzať
 (zväčša ani neprechádza). Lineárnou aproximáciou sa tento rámec
 nezaoberá a všetky ostatné interpolácie a aproximácie počítajú
 hodnoty len medzi minimálnymi počtami vstupných hodnôt.
 
 Ani jedna z metód neobmedzuje hodnoty parametra t,
 ktorý (ak hovoríme o interpolácii a aproximácii) by síce mal
 nadobúdať hodnoty v rozsahu od 0,0 do 1,0 (vrátane), ale ak
 tento rozsah prekročí, môžu byť všetky metódy (vo vhodnej miere)
 využité aj na extrapoláciu hodnôt mimo tohto intervalu. Ani jeden
 z algoritmov nepoužíva delenie, takže hodnota parametra môže byť
 ľubovoľná, no treba rátať s tým, že po príliš veľkom prekročení
 intervalu už nemôžeme hovoriť ani o extrapolácii.
 
 S pomocou lineárnej interpolácie je možné získať ľubovoľnú
 „priamočiaru“ hodnotu ležiacu medzi hodnotami a
 a b a to s pomocou parametra t. Parameter
 t by mal nadobúdať hodnoty medzi 0.0
 a 1.0. Keď je lineárna interpolácia použitá
 napríklad so začiatočnými a koncovými súradnicami bodu
 (dva výpočty: jeden pre x1 až x2 a druhý
 pre y1 až y2 – s rovnakými hodnotami
 parametera t, ktoré by mali ležať v rozmedzí
 hodnôt 0.0 až 1.0), tak výsledkom
 výpočtov lineárnej interpolácie budú body ležiace
 na úsečke medzi určenými súradnicami bodov.
 
 
 Body vypočítané s pomocou
 lineárnej interpolácie ležiace na nakreslenej úsečke.
 
 Poznámka: Podmieňovací spôsob („by mali“)
 použitý výššie v súvislosti hodnotou parametra t bol
 použitý úmyselne. Zamerajme sa na príklad kreslenia bodov (podľa
 súradníc vypočítaných s pomocou lineárnej interpolácie) ležiacich
 na úsečke s počiatočným bodom A[x1, y1]
 a koncovým bodom B[x2, y2]. Ak sa hodnota
 parametra t bude nachádzať mimo povoleného (resp.
 odporúčaného) rozashu ⟨0; 1⟩, tak vypočítame bod ležiaci na priamke
 určenej hraničnými bodmi A a B, ktorý neleží na úsečke |AB|.
 
 Príklad:
 
 Nasledujúci príklad nakreslí body ležiace na úsečke vypočítané
 s pomocou lineárnej interpolácie.
 
 
final Bod[] body = new Bod([2];
body[0] = new Bod(&#45;160, &#45;80);
body[1] = new Bod(130, 60);
for (double t = 0.0; t &lt;= 1.0; t += 0.1)
{
    double x = Svet.lineárnaInterpolácia(
        body[0].polohaX(), body[1].polohaX(), t);
    double y = Svet.lineárnaInterpolácia(
        body[0].polohaY(), body[1].polohaY(), t);
    skočNa(x, y);
    kružnica(6);
}
 
 Výsledok:
 
 
 Výsledok príkladu
 lineárnej interpolácie.
Parametre:
a – prvá hodnota určujúca lineárnu interpoláciu
b – druhá hodnota určujúca lineárnu interpoláciu
t – parameter interpolácie – mal by ležať v rozmedzí hodnôt
     0.0 až 1.0
Návratová hodnota:
výsledok interpolácie
Pozri tiež:
kvadratickáInterpolácia(double, double, double, double), 
kubickáInterpolácia(double, double, double, double, double), 
kvadratickáAproximácia(double, double, double, double), 
kubickáAproximácia(double, double, double, double, double)
linearnaInterpolacia
public static final double linearnaInterpolacia(double a,
                                                double b,
                                                double t)
 Alias pre lineárnaInterpolácia.
kvadratickáInterpolácia
public static final double kvadratickáInterpolácia(double a,
                                                   double b,
                                                   double c,
                                                   double t)
Kvadratická interpolácia je počítaná z troch vstupných hodnôt
 (a parametra).
 
 Pozri aj kvadratickú aproximáciu a zhrnutie
 rozdielu medzi interpoláciou a aproximáciou v opise metódy
 počítajúcej lineárnu interpoláciu.
 
 
 Porovnanie kvadratickej interpolácie (body
 rôznych farieb tvoriace „vonkajšiu obálku“ lomenej čiary)
 a aproximácie (modré body).
 
 Ukážka použitia na interpolovanie dvoch súradníc:
 
 
// …
for (double t = 0.0; t 1.05; t += 0.05)
{
    double x = Svet.kvadratickáInterpolácia(x1, x2, x3, t);
    double y = Svet.kvadratickáInterpolácia(y1, y2, y3, t);
    // …
}
Parametre:
a – prvá hodnota určujúca kvadratickú interpoláciu
b – druhá hodnota určujúca kvadratickú interpoláciu
c – tretia hodnota určujúca kvadratickú interpoláciu
t – parameter interpolácie – mal by ležať v rozmedzí hodnôt
     0.0 až 1.0
Návratová hodnota:
výsledok interpolácie
Pozri tiež:
lineárnaInterpolácia(double, double, double), 
kubickáInterpolácia(double, double, double, double, double), 
kvadratickáAproximácia(double, double, double, double), 
kubickáAproximácia(double, double, double, double, double)
kvadratickaInterpolacia
public static final double kvadratickaInterpolacia(double a,
                                                   double b,
                                                   double c,
                                                   double t)
 Alias pre kvadratickáInterpolácia.
kubickáInterpolácia
public static final double kubickáInterpolácia(double v0,
                                               double v1,
                                               double v2,
                                               double v3,
                                               double t)
Kubická interpolácia je počítaná zo štyroch vstupných hodnôt
 (a parametra).
 
 Pozri aj kubickú aproximáciu a zhrnutie rozdielu
 medzi interpoláciou a aproximáciou v opise metódy
 počítajúcej lineárnu interpoláciu.
 
 
 Body vypočítané s použitím dvojice
 kubických interpolácií.
Parametre:
v0 – prvá hodnota určujúca kubickú interpoláciu
v1 – druhá hodnota určujúca kubickú interpoláciu
v2 – tretia hodnota určujúca kubickú interpoláciu
v3 – štvrtá hodnota určujúca kubickú interpoláciu
t – parameter interpolácie – mal by ležať v rozmedzí hodnôt
     0.0 až 1.0
Návratová hodnota:
výsledok interpolácie
Pozri tiež:
lineárnaInterpolácia(double, double, double), 
kvadratickáInterpolácia(double, double, double, double), 
kvadratickáAproximácia(double, double, double, double), 
kubickáAproximácia(double, double, double, double, double)
kubickaInterpolacia
public static final double kubickaInterpolacia(double v0,
                                               double v1,
                                               double v2,
                                               double v3,
                                               double t)
 Alias pre kubickáInterpolácia.
kvadratickáAproximácia
public static final double kvadratickáAproximácia(double a,
                                                  double b,
                                                  double c,
                                                  double t)
Kvadratická aproximácia je počítaná z troch vstupných hodnôt
 (a parametra). Ak túto metódu použijeme na dve série vstupných
 hodnôt (dve súradnice), tak posúvaním parametra t získame
 polohy bodov na kvadratickej (v tomto prípade bézierovej)
 krivke.
 
 Pozri aj kvadratickú interpoláciu a zhrnutie
 rozdielu medzi interpoláciou a aproximáciou v opise metódy
 počítajúcej lineárnu interpoláciu.
 
 Príklad:
 
 Nasledujúce dva riadky kódu vypočítajú súradnice bodu ([x, y])
 na kvadratickej (bézierovej) krivke v mieste, kde je hodnota
 parametra aproximácie (t) rovná 0,5:
 
 
x = Svet.kvadratickáAproximácia(x1, x2, x3, 0.5);
y = Svet.kvadratickáAproximácia(y1, y2, y3, 0.5);
 
 Ukážky možných výsledkov:
 
 Ukážky znázorňujú krivky kreslené medzi bodmi A a B (so
 súradnicami x1, y1 a x3, y3), ktorých tvar upravuje poloha bodu C
 (so súradnicami x2, y2). Poloha bodu V (so súradnicami x, y)
 v mieste hodnoty parametra aproximácie t = 0,5, je
 znázornená zelenou farbou. Pod každým obrázkom je výpis všetkých
 hodnôt vzťahujúcich sa k obrázku.
 
 
 
 
     
 
 Hodnoty súradníc kľúčových bodov:
 x1 = −100,0; y1 = −100,0x2 = 0,0; y2 = 100,0
 x3 = 100,0; y3 = 0,0
 Vypočítané hodnoty súradníc v mieste parametra t = 0,5:
 x = 0,0; y = 25,0 
     
 Hodnoty súradníc kľúčových bodov:
 x1 = −100,0; y1 = −100,0x2 = 0,0; y2 = 100,0
 x3 = 100,0; y3 = 100,0
 Vypočítané hodnoty súradníc v mieste parametra t = 0,5:
 x = 0,0; y = 50,0 
 
 
     
 
 Hodnoty súradníc kľúčových bodov:
 x1 = −100,0; y1 = −100,0x2 = 100,0; y2 = 0,0
 x3 = 100,0; y3 = 100,0
 Vypočítané hodnoty súradníc v mieste parametra t = 0,5:
 x = 50,0; y = 0,0 
     
 Hodnoty súradníc kľúčových bodov:
 x1 = −100,0; y1 = 100,0x2 = 0,0; y2 = −100,0
 x3 = 100,0; y3 = 100,0
 Vypočítané hodnoty súradníc v mieste parametra t = 0,5:
 x = 0,0; y = 0,0 
 
 
Parametre:
a – prvá hodnota určujúca kvadratickú aproximáciu
b – druhá hodnota určujúca kvadratickú aproximáciu
c – tretia hodnota určujúca kvadratickú aproximáciu
t – parameter aproximácie – mal by ležať v rozmedzí hodnôt
     0.0 až 1.0
Návratová hodnota:
výsledok aproximácie
Pozri tiež:
lineárnaInterpolácia(double, double, double), 
kvadratickáInterpolácia(double, double, double, double), 
kubickáInterpolácia(double, double, double, double, double), 
kubickáAproximácia(double, double, double, double, double)
kvadratickaAproximacia
public static final double kvadratickaAproximacia(double a,
                                                  double b,
                                                  double c,
                                                  double t)
 Alias pre kvadratickáAproximácia.
kubickáAproximácia
public static final double kubickáAproximácia(double v0,
                                              double v1,
                                              double v2,
                                              double v3,
                                              double t)
Kubická aproximácia je počítaná zo štyroch vstupných hodnôt
 (a parametra). Význam parametrov sa lepšie vysvetľuje na príklade
 kreslenia krivky s použitím tejto aproximácie. Aproximujme dvojice
 súradníc štyroch kľúčových bodov ([x0, y0] až [x3,
 y3]).
 V takom prípade prvá a posledná dvojica súradníc určujú „smer“
 kubickej krivky a prostredné dve určujú počiatočný a koncový
 bod krivky. Výsledkom takejto aproximácie sú body ležiace na
 kubickej krivke.
 
 Pozri aj kubickú interpoláciu a zhrnutie
 rozdielu medzi interpoláciou a aproximáciou v opise metódy
 počítajúcej lineárnu interpoláciu.
 
 
 Body vypočítané s použitím kubickej
 aproximácie zo štyroch označenýchkľúčových bodov –
 vypočítané body ležia na kubickej krivke.
 
 Príklad:
 
 Nasledujúci príklad ukazuje interaktívny test kubickej
 aproximácie (po preložení a spustení príkladu je klikaním
 a posúvaním bodov možné ovplyvňovať kresbu).
 
 
import knižnica.*;
public class TestAproximácie extends GRobot
{
    // Aktívny bod (predvolene je to prvý bod – s indexom nula).
    private int bod = 0;
    // Definícia štvorice kľúčových bodov.
    private Bod[] body = new Bod([4];
    {
        body[0] = new Bod(&#45;100, &#45;70);
        body[1] = new Bod(&#45;100, 40);
        body[2] = new Bod(100, 40);
        body[3] = new Bod(100, &#45;70);
    }
    // Konštruktor.
    private TestAproximácie()
    {
        zdvihniPero();
        skry();
        Svet.nekresli();
        prekresli();
    }
    // Prekresľovanie kresby.
    private void prekresli()
    {
        Svet.vymaž();
        farba(čierna);
        for (double t = 0.0; t &lt;= 1.0; t += 0.1)
        {
            double x = Svet.kubickáAproximácia(body[0].polohaX(),
                body[1].polohaX(), body[2].polohaX(), body[3].polohaX(), t);
            double y = Svet.kubickáAproximácia(body[0].polohaY(),
                body[1].polohaY(), body[2].polohaY(), body[3].polohaY(), t);
            skočNa(x, y);
            kružnica(6);
        }
        farba(červená);
        for (int i = 0; i &lt; 4; ++i)
        {
            skočNa(body[i]);
            kružnica(3);
        }
        Svet.prekresli();
    }
    // Vyhľadanie a aktivácia bodu, na ktorý bolo kliknuté
    // (ak nebolo kliknuté na žiadny konkrétny bod, zostane
    // aktívny posledný aktivovaný bod).
    // Aktívny bod je zároveň presunutý na myš.
    @Override public void stlačenieTlačidlaMyši()
    {
        for (int i = 0; i &lt; 4; ++i)
        {
            skočNa(body[i]);
            if (myšVKruhu(10)) bod = i;
        }
        body[bod] = ÚdajeUdalostí.polohaMyši();
        prekresli();
    }
    // Presúvanie aktívneho bodu na súradnice myši.
    @Override public void ťahanieMyšou()
    {
        body[bod] = ÚdajeUdalostí.polohaMyši();
        prekresli();
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        new TestAproximácie();
    }
}
Parametre:
v0 – prvá hodnota určujúca kubickú aproximáciu
v1 – druhá hodnota určujúca kubickú aproximáciu
v2 – tretia hodnota určujúca kubickú aproximáciu
v3 – štvrtá hodnota určujúca kubickú aproximáciu
t – parameter aproximácie – mal by ležať v rozmedzí hodnôt
     0.0 až 1.0
Návratová hodnota:
výsledok aproximácie
Pozri tiež:
lineárnaInterpolácia(double, double, double), 
kvadratickáInterpolácia(double, double, double, double), 
kubickáInterpolácia(double, double, double, double, double), 
kvadratickáAproximácia(double, double, double, double)
kubickaAproximacia
public static final double kubickaAproximacia(double v0,
                                              double v1,
                                              double v2,
                                              double v3,
                                              double t)
 Alias pre kubickáAproximácia.
prepočítajX
public static double prepočítajX(double x)
Prepočíta zadanú x-ovú (horizontálnu) súradnicu zo súradnicového
 priestoru programovacieho rámca GRobot do súradnicového priestoru
 používaného v oblasti 2D počítačovej grafiky.
 
 Poznámka: Programovací rámec ako
 prostriedok primárne vyvíjaný na účely výučby pracuje s „klasickým“
 karteziánskym súradnicovým systémom, pri používaní ktorého je
 počiatok súradnicovej sústavy („stred“ – bod so súradnicami [0, 0])
 obvykle umiestňovaný do stredu kresliacej plochy, horizontálna
 súradnica (x-ová) rastie zľava doprava a vertikálna súradnica
 (y-ová) rastie zospodu nahor. Naproti tomu, v 2D počítačovej grafike
 je bežné umiestnenie počiatku súradnicovej sústavy v ľavom hornom
 rohu kresliacej plochy (obrazovky) a z toho dôvodu býva rast
 vertikálnej súradnice prevrátený – súradnica narastá smerom zhora
 nadol. (Tento rozdiel je diskutovaný na viacerých miestach tejto
 dokumentácie. Pozri napríklad opis metódy cesta.)
Parametre:
x – hodnota súradnice x v súradnicovom priestore
     programovacieho rámca GRobot
Návratová hodnota:
hodnota súradnice v súradnicovom priestore počítačovej
     grafiky (to jest v tom súradnicovom priestore, ktorý predvolene
     používa aj jazyk Java pri práci s 2D grafikou)
prepocitajX
public static double prepocitajX(double x)
 Alias pre prepočítajX.
prepočítajY
public static double prepočítajY(double y)
Prepočíta zadanú y-ovú (vertikálnu) súradnicu zo súradnicového
 priestoru programovacieho rámca GRobot do súradnicového priestoru
 používaného v oblasti 2D počítačovej grafiky.
 
 Poznámka: Programovací rámec ako
 prostriedok primárne vyvíjaný na účely výučby pracuje s „klasickým“
 karteziánskym súradnicovým systémom, pri používaní ktorého je
 počiatok súradnicovej sústavy („stred“ – bod so súradnicami [0, 0])
 obvykle umiestňovaný do stredu kresliacej plochy, horizontálna
 súradnica (x-ová) rastie zľava doprava a vertikálna súradnica
 (y-ová) rastie zospodu nahor. Naproti tomu, v 2D počítačovej grafike
 je bežné umiestnenie počiatku súradnicovej sústavy v ľavom hornom
 rohu kresliacej plochy (obrazovky) a z toho dôvodu býva rast
 vertikálnej súradnice prevrátený – súradnica narastá smerom zhora
 nadol. (Tento rozdiel je diskutovaný na viacerých miestach tejto
 dokumentácie. Pozri napríklad opis metódy cesta.)
Parametre:
y – hodnota súradnice y v súradnicovom priestore
     programovacieho rámca GRobot
Návratová hodnota:
hodnota súradnice v súradnicovom priestore počítačovej
     grafiky (to jest v tom súradnicovom priestore, ktorý predvolene
     používa aj jazyk Java pri práci s 2D grafikou)
prepocitajY
public static double prepocitajY(double y)
 Alias pre prepočítajY.
prepočítajSpäťX
public static double prepočítajSpäťX(double x)
Prepočíta zadanú x-ovú (horizontálnu) súradnicu zo súradnicového
 priestoru používaného v oblasti 2D počítačovej grafiky do
 súradnicového priestoru programovacieho rámca GRobot.
 
 Poznámka: Programovací rámec ako
 prostriedok primárne vyvíjaný na účely výučby pracuje s „klasickým“
 karteziánskym súradnicovým systémom, pri používaní ktorého je
 počiatok súradnicovej sústavy („stred“ – bod so súradnicami [0, 0])
 obvykle umiestňovaný do stredu kresliacej plochy, horizontálna
 súradnica (x-ová) rastie zľava doprava a vertikálna súradnica
 (y-ová) rastie zospodu nahor. Naproti tomu, v 2D počítačovej grafike
 je bežné umiestnenie počiatku súradnicovej sústavy v ľavom hornom
 rohu kresliacej plochy (obrazovky) a z toho dôvodu býva rast
 vertikálnej súradnice prevrátený – súradnica narastá smerom zhora
 nadol. (Tento rozdiel je diskutovaný na viacerých miestach tejto
 dokumentácie. Pozri napríklad opis metódy cesta.)
Parametre:
x – hodnota súradnice v súradnicovom priestore počítačovej
     grafiky (to jest v tom súradnicovom priestore, ktorý predvolene
     používa aj jazyk Java pri práci s 2D grafikou)
Návratová hodnota:
hodnota súradnice x v súradnicovom priestore programovacieho
     rámca GRobot
prepocitajSpatX
public static double prepocitajSpatX(double x)
 Alias pre prepočítajSpäťX.
prepočítajSpäťY
public static double prepočítajSpäťY(double y)
Prepočíta zadanú y-ovú (vertikálnu) súradnicu zo súradnicového
 priestoru používaného v oblasti 2D počítačovej grafiky do
 súradnicového priestoru programovacieho rámca GRobot.
 
 Poznámka: Programovací rámec ako
 prostriedok primárne vyvíjaný na účely výučby pracuje s „klasickým“
 karteziánskym súradnicovým systémom, pri používaní ktorého je
 počiatok súradnicovej sústavy („stred“ – bod so súradnicami [0, 0])
 obvykle umiestňovaný do stredu kresliacej plochy, horizontálna
 súradnica (x-ová) rastie zľava doprava a vertikálna súradnica
 (y-ová) rastie zospodu nahor. Naproti tomu, v 2D počítačovej grafike
 je bežné umiestnenie počiatku súradnicovej sústavy v ľavom hornom
 rohu kresliacej plochy (obrazovky) a z toho dôvodu býva rast
 vertikálnej súradnice prevrátený – súradnica narastá smerom zhora
 nadol. (Tento rozdiel je diskutovaný na viacerých miestach tejto
 dokumentácie. Pozri napríklad opis metódy cesta.)
Parametre:
y – hodnota súradnice v súradnicovom priestore počítačovej
     grafiky (to jest v tom súradnicovom priestore, ktorý predvolene
     používa aj jazyk Java pri práci s 2D grafikou)
Návratová hodnota:
hodnota súradnice y v súradnicovom priestore programovacieho
     rámca GRobot
prepocitajSpatY
public static double prepocitajSpatY(double y)
 Alias pre prepočítajSpäťY.
rotovanéX
public static final double rotovanéX(double x,
                                     double y,
                                     double uhol)
Vráti výpočet x-ovej súradnice zadaného bodu pootočeného okolo
 stredu súradnicovej sústavy o zadaný uhol.
Parametre:
x – x-ová súradnica pôvodného bodu
y – y-ová súradnica pôvodného bodu
uhol – uhol pootočenia
Pozri tiež:
rotovanéY(double, double, double)
rotovaneX
public static final double rotovaneX(double x,
                                     double y,
                                     double uhol)
 Alias pre rotovanéX.
rotovanéY
public static final double rotovanéY(double x,
                                     double y,
                                     double uhol)
Vráti výpočet y-ovej súradnice zadaného bodu pootočeného okolo
 stredu súradnicovej sústavy o zadaný uhol.
Parametre:
x – x-ová súradnica pôvodného bodu
y – y-ová súradnica pôvodného bodu
uhol – uhol pootočenia
Pozri tiež:
rotovanéX(double, double, double)
rotovaneY
public static final double rotovaneY(double x,
                                     double y,
                                     double uhol)
 Alias pre rotovanéY.
priesečníkÚsečiek
public static final Bod priesečníkÚsečiek(double x0,
                                          double y0,
                                          double x1,
                                          double y1,
                                          double x2,
                                          double y2,
                                          double x3,
                                          double y3)
Hľadá priesečník dvoch úsečiek |AB| a |CD|. Úsečky sú určené
 súradnicami počiatočných a koncových bodov – |AB|: A[x0, y0],
 B[x1, y1] a |CD|: C[x2, y2], D[x3, y3]. Ak priesečník jestvuje,
 tak metóda vráti inštanciu triedy Bod so súradnicami
 priesečníka, inak metóda vráti hodnotu null.
 
 
 
 Ukážka použitia:
 
 
// Keď máme k dispozícii polohy bodov, môžeme využiť inú verziu tejto metódy:
final Bod b1 = new Bod(-120, -40);
final Bod b2 = new Bod(110, 70);
final Bod b3 = new Bod(-120, 110);
final Bod b4 = new Bod(110, -110);
Bod p = Svet.priesečníkÚsečiek(b1, b2, b3, b4);
Parametre:
x0 – x-ová súradnica bodu A
y0 – y-ová súradnica bodu A
x1 – x-ová súradnica bodu B
y1 – y-ová súradnica bodu B
x2 – x-ová súradnica bodu C
y2 – y-ová súradnica bodu C
x3 – x-ová súradnica bodu D
y3 – y-ová súradnica bodu D
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikUseciek
public static final Bod priesecnikUseciek(double x0,
                                          double y0,
                                          double x1,
                                          double y1,
                                          double x2,
                                          double y2,
                                          double x3,
                                          double y3)
 Alias pre priesečníkÚsečiek.
priesečníkÚsečiek
public static final Bod priesečníkÚsečiek(Poloha A,
                                          Poloha B,
                                          Poloha C,
                                          Poloha D)
Hľadá priesečník dvoch úsečiek |AB| a |CD|. Úsečky sú určené
 polohami bodov v štyroch parametroch. Ak priesečník jestvuje,
 tak metóda vráti inštanciu triedy Bod so súradnicami
 priesečníka, inak metóda vráti hodnotu null.
Parametre:
A – poloha bodu A
B – poloha bodu B
C – poloha bodu C
D – poloha bodu D
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikUseciek
public static final Bod priesecnikUseciek(Poloha A,
                                          Poloha B,
                                          Poloha C,
                                          Poloha D)
 Alias pre priesečníkÚsečiek.
priesečníkÚsečiek
public static final Bod priesečníkÚsečiek(Poloha[] poleBodov)
Hľadá priesečník dvoch úsečiek |AB| a |CD|. Úsečky sú určené
 polohami bodov v poli parametra, ktoré musí obsahovať aspoň štyri
 prvky. Ak priesečník jestvuje, tak metóda vráti inštanciu triedy
 Bod so súradnicami priesečníka, inak metóda vráti
 hodnotu null.
Parametre:
poleBodov – polohy bodov úsečiek |AB| a |CD|
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikUseciek
public static final Bod priesecnikUseciek(Poloha[] poleBodov)
 Alias pre priesečníkÚsečiek.
priesečníkPriamok
public static final Bod priesečníkPriamok(double x0,
                                          double y0,
                                          double x1,
                                          double y1,
                                          double x2,
                                          double y2,
                                          double x3,
                                          double y3)
Hľadá priesečník dvoch priamok určených bodmi A, B a C, D.
 Ak priesečník jestvuje, tak metóda vráti inštanciu triedy
 Bod so súradnicami priesečníka, inak metóda vráti
 hodnotu null.
 
 
 
 Ukážka použitia:
 
 
// Keď máme k dispozícii polohy bodov, môžeme využiť inú verziu tejto metódy:
final Bod b1 = new Bod(-80, -100);
final Bod b2 = new Bod(90, 100);
final Bod b3 = new Bod(-80, 100);
final Bod b4 = new Bod(90, -110);
Bod p = Svet.priesečníkPriamok(b1, b2, b3, b4);
 
 Hľadanie priesečníka priamok je použité aj v príklade
 uvedenom v opise metódy mimoHraníc.
Parametre:
x0 – x-ová súradnica bodu A
y0 – y-ová súradnica bodu A
x1 – x-ová súradnica bodu B
y1 – y-ová súradnica bodu B
x2 – x-ová súradnica bodu C
y2 – y-ová súradnica bodu C
x3 – x-ová súradnica bodu D
y3 – y-ová súradnica bodu D
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikPriamok
public static final Bod priesecnikPriamok(double x0,
                                          double y0,
                                          double x1,
                                          double y1,
                                          double x2,
                                          double y2,
                                          double x3,
                                          double y3)
 Alias pre priesečníkPriamok.
priesečníkPriamok
public static final Bod priesečníkPriamok(Poloha A,
                                          Poloha B,
                                          Poloha C,
                                          Poloha D)
Hľadá priesečník dvoch priamok určených bodmi A, B a C, D.
 Ak priesečník jestvuje, tak metóda vráti inštanciu triedy
 Bod so súradnicami priesečníka, inak metóda vráti
 hodnotu null.
 
 Hľadanie priesečníka priamok je použité aj v príklade
 uvedenom v opise metódy mimoHraníc.
Parametre:
A – poloha bodu A
B – poloha bodu B
C – poloha bodu C
D – poloha bodu D
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikPriamok
public static final Bod priesecnikPriamok(Poloha A,
                                          Poloha B,
                                          Poloha C,
                                          Poloha D)
 Alias pre priesečníkPriamok.
priesečníkPriamok
public static final Bod priesečníkPriamok(Poloha[] poleBodov)
Hľadá priesečník dvoch priamok určených polohami bodov v poli
 parametra. Pole musí obsahovať aspoň štyri prvky. Ak priesečník
 jestvuje, tak metóda vráti inštanciu triedy Bod so
 súradnicami priesečníka, inak metóda vráti hodnotu
 null.
 
 Hľadanie priesečníka priamok je použité aj v príklade
 uvedenom v opise metódy mimoHraníc.
Parametre:
poleBodov – polohy bodov určujúce priamky
Návratová hodnota:
priesečník v inštancii triedy Bod alebo
     null
priesecnikPriamok
public static final Bod priesecnikPriamok(Poloha[] poleBodov)
 Alias pre priesečníkPriamok.
priesečníkyKružníc
public static final Bod[] priesečníkyKružníc(double x1,
                                             double y1,
                                             double r1,
                                             double x2,
                                             double y2,
                                             double r2)
Hľadá priesečníky dvoch kružníc určených súradnicami ich
 stredov S1[x1, y1] a S2[x2, y2] a polomermi r1 a r2. Ak jestvuje
 aspoň jeden priesečník, tak metóda vráti jedno- alebo dvojprvkové
 pole bodov určujúcich súradnice priesečníkov. Ak nejestvuje ani
 jeden priesečník, tak metóda vráti hodnotu null.
 
 
 
 Na obrázku sú štyri kružnice. Dve majú jediný priesečník, dve
 dva priesečníky a zvyšné žiadny priesečník. V prvom prípade vráti
 metóda priesečníkyKružníc jednoprvkové pole, v druhom
 dvojprvkové a v ostatných prípadoch hodnotu null.
 
 Príklad:
 
 Obrázok vyššie sa dá vykresliť s pomocou nasledujúceho
 príkladu. Príklad ukazuje definíciu pomocnej triedy Kružnica, definíciu štyroch kružníc a nájdenie a zobrazenie
 všetkých ich priesečníkov. (Podrobnosti sú v komentároch.)
 
 
import knižnica.*;
public class PriesečníkyKružníc extends GRobot
{
    // Pomocná trieda slúžiaca na uloženie základných údajov o kružnici
    // (stredu a polomeru) a na nakreslenie kružnice.
    private final class Kružnica
    {
        // Atribúty kružnice:
        public final Bod S;
        public final double r;
        // Konštruktor kružnice:
        public Kružnica(double x, double y, double r)
        {
            S = new Bod(x, y);
            this.r = r;
        }
        // Metóda kreslenia kružnice:
        public void kresli()
        {
            skočNa(S);
            kružnica(r);
        }
    }
    // Konštruktor hlavnej triedy:
    private PriesečníkyKružníc()
    {
        // Úprava rozmerov plátna a skrytie robota:
        super(300, 300);
        skry();
        // Definícia poľa kružníc:
        final Kružnica[] kružnice = {new Kružnica(-50, 70, 50),
            new Kružnica(60, 70, 60), new Kružnica(-45, -70, 55),
            new Kružnica(55, -70, 65)};
        // Pole bodov slúžiace na uchovanie nájdených priesečníkov:
        Bod p[];
        // Nakreslenie kružníc:
        for (Kružnica k : kružnice) k.kresli();
        // Zväčšenie hrúbky pera, aby boli zobrazené priesečníky lepšie
        // viditeľné:
        hrúbkaČiary(1.75);
        // Hľadanie priesečníkov všetkých definovaných kružníc:
        for (int i = 0; i &lt; kružnice.length; ++i)
        {
            for (int j = i + 1; j &lt; kružnice.length; ++j)
            {
                // Pokus o nájdenie priesečníkov:
                p = Svet.priesečníkyKružníc(
                    kružnice[i].S, kružnice[i].r,
                    kružnice[j].S, kružnice[j].r);
                // Overenie, či bol nájdený aspoň jeden:
                if (null != p)
                {
                    // Zviditeľnenie prvého nájdeného priesečníka malým krúžkom:
 0)
                    {
                        skočNa(p[0]);
                        kružnica(3);
                    }
                    // Druhý priesečník bude zviditeľnený krúžkom, ktorý bude
                    // o niečo väčší (na ich odlíšenie):
 1)
                    {
                        skočNa(p[1]);
                        kružnica(6);
                    }
                }
            }
        }
    }
    public static void main(String[] args)
    {
        new PriesečníkyKružníc();
    }
}
 
 (Výsledok je v tomto prípade na obrázku nad príkladom.)
 
 Poznámka (pre zaujímavosť): Táto
 metóda (a jej klony) by mohla v prípade nenájdenia žiadneho
 priesečníka vrátiť namiesto hodnoty null pole s nulovou
 dĺžkou („prázdne“ pole), ale to by nebolo konzistentné s ostatnými
 metódami, ktoré hľadajú priesečníky. (A zachovanie konzistencie
 pri tvorbe balíkov akými sú programovacie rámce je dôležité.
 Niekedy sa ju nemusí podariť dosiahnuť z dôvodu rozsiahlosti
 balíkov a z dôvodu prijímania rôznych rozhodnutí
 v rôznych kontextoch, no prinajmenšom v prípadoch ako
 je tento by mala byť zachovaná.)
Parametre:
x1 – x-ová súradnica stredu prvej kružnice
y1 – y-ová súradnica stredu prvej kružnice
r1 – polomer prvej kružnice
x2 – x-ová súradnica stredu druhej kružnice
y2 – y-ová súradnica stredu druhej kružnice
r2 – polomer druhej kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyKruznic
public static final Bod[] priesecnikyKruznic(double x1,
                                             double y1,
                                             double r1,
                                             double x2,
                                             double y2,
                                             double r2)
 Alias pre priesečníkyKružníc.
priesečníkyKružníc
public static final Bod[] priesečníkyKružníc(Poloha S1,
                                             double r1,
                                             Poloha S2,
                                             double r2)
Hľadá priesečníky dvoch kružníc určených polohami ich stredov
 S1 a S2 a polomermi r1 a r2. Ak jestvuje aspoň jeden priesečník,
 tak metóda vráti jedno- alebo dvojprvkové pole bodov určujúcich
 súradnice priesečníkov. Ak nejestvuje ani jeden priesečník, tak
 metóda vráti hodnotu null.
Parametre:
S1 – poloha stredu prvej kružnice
r1 – polomer prvej kružnice
S2 – poloha stredu druhej kružnice
r2 – polomer druhej kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyKruznic
public static final Bod[] priesecnikyKruznic(Poloha S1,
                                             double r1,
                                             Poloha S2,
                                             double r2)
 Alias pre priesečníkyKružníc.
priesečníkyPriamkyAKružnice
public static final Bod[] priesečníkyPriamkyAKružnice(double x1,
                                                      double y1,
                                                      double x2,
                                                      double y2,
                                                      double x3,
                                                      double y3,
                                                      double r)
Hľadá priesečníky priamky |AB| a kružnice určenej súradnicami
 stredu S a polomeru r. Súradnice bodov priamky a stredu kružnice
 sú určené parametrami tejto metódy takto: A[x1, y1]; B[x2, y2];
 S[x3, y3]. Parameter r je polomerom kružnice. Ak jestvuje aspoň
 jeden priesečník, tak metóda vráti pole bodov určujúcich súradnice
 priesečníkov (pole môže obsahovať jeden alebo dva prvky/body). Ak
 nejestvuje ani jeden priesečník, tak metóda vráti hodnotu
 null.
 
 Príklad:
 
 
hrúbkaČiary(1.5);
skry();
for (int i = 0; i &lt; 7; ++i)
{
    // Vygenerovanie súradníc:
    double x1 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double y1 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double x2 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double y2 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double x3 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double y3 = Svet.náhodnéCeléČíslo(&#45;150, 150);
    double r = Svet.náhodnéCeléČíslo(30, 120);
    // Nakreslenie situácie:
    farba(preddefinovanéFarby[
        preddefinovanéFarby.length &#45; 1 &#45; 4 * i]);
    skočNa(x1, y1);
    choďNa(x2, y2);
    skočNa(x3, y3);
    kružnica(r);
    // Výpočet priesečníkov:
    Bod[] pries = Svet.priesečníkyPriamkyAKružnice(
        x1, y1, x2, y2, x3, y3, r);
    // Vyznačenie priesečníkov (ak jestvujú):
    if (null != pries)
    {
        if (1 &lt;= pries.length)
        {
            skočNa(pries[0]);
            kruh(3);
        }
        if (2 &lt;= pries.length)
        {
            skočNa(pries[1]);
            kruh(3);
        }
    }
}
 
 Výsledok:
 
  Ukážky
 výsledkov.
 
 Príklad je naprogramovaný tak, aby z priamok kreslil len
 úsečky medzi ich určujúcimi bodmi, ale na výsledku vidno, že
 priesečníky s kružnicami sú nájdené pre celé priamky.
 
 Poznámka (pre zaujímavosť): Táto
 metóda (a jej klony) by mohla v prípade nenájdenia žiadneho
 priesečníka vrátiť namiesto hodnoty null pole s nulovou
 dĺžkou („prázdne“ pole), ale to by nebolo konzistentné s ostatnými
 metódami, ktoré hľadajú priesečníky. (A zachovanie konzistencie
 pri tvorbe balíkov akými sú programovacie rámce je dôležité.
 Niekedy sa ju nemusí podariť dosiahnuť z dôvodu rozsiahlosti
 balíkov a z dôvodu prijímania rôznych rozhodnutí
 v rôznych kontextoch, no prinajmenšom v prípadoch ako
 je tento by mala byť zachovaná.)
 
 Užitočné zdroje:
 
 
 
User:cobie – 
 href="https://stackoverflow.com/users/633770/arne-b"
User:arne.b – and others: 
 href="https://stackoverflow.com/questions/13053061/circle-line-intersection-points"
Circle line intersection points.
 Stack Overflow, 2012. Citované: 2016 – 2018.
 
 
Weisstein, Eric W.: 
 href="http://mathworld.wolfram.com/Circle-LineIntersection.html"
Circle-Line Intersection.
 Wolfram MathWorld, A Wolfram Web Resource. Citované: 2016 –
 2018.
 
Parametre:
x1 – x-ová súradnica určujúceho bodu priamky A
y1 – y-ová súradnica určujúceho bodu priamky A
x2 – x-ová súradnica určujúceho bodu priamky B
y2 – y-ová súradnica určujúceho bodu priamky B
x3 – x-ová súradnica stredu kružnice
y3 – y-ová súradnica stredu kružnice
r – polomer kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyPriamkyAKruznice
public static final Bod[] priesecnikyPriamkyAKruznice(double x1,
                                                      double y1,
                                                      double x2,
                                                      double y2,
                                                      double x3,
                                                      double y3,
                                                      double r)
 Alias pre priesečníkyPriamkyAKružnice.
priesečníkyPriamkyAKružnice
public static final Bod[] priesečníkyPriamkyAKružnice(Poloha A,
                                                      Poloha B,
                                                      Poloha S,
                                                      double r)
Hľadá priesečníky priamky |AB| a kružnice určenej polohou
 stredu S a polomeru r. Ak jestvuje aspoň jeden priesečník, tak
 metóda vráti pole bodov určujúcich súradnice priesečníkov (pole
 môže obsahovať jeden alebo dva prvky/body). Ak nejestvuje ani
 jeden priesečník, tak metóda vráti hodnotu null.
Parametre:
A – poloha určujúceho bodu priamky A
B – poloha určujúceho bodu priamky B
S – poloha stredu kružnice
r – polomer kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyPriamkyAKruznice
public static final Bod[] priesecnikyPriamkyAKruznice(Poloha A,
                                                      Poloha B,
                                                      Poloha S,
                                                      double r)
 Alias pre priesečníkyPriamkyAKružnice.
priesečníkyÚsečkyAKružnice
public static final Bod[] priesečníkyÚsečkyAKružnice(double x1,
                                                     double y1,
                                                     double x2,
                                                     double y2,
                                                     double x3,
                                                     double y3,
                                                     double r)
Hľadá priesečníky úsečky |AB| a kružnice so stredom
 S a polomerom r. Ak jestvuje jeden priesečník, metóda vráti
 jednoprvkové pole. Ak jestvujú dva priesečníky, metóda vráti
 dvojprvkové pole bodov so súradnicami priesečníkov. Ak nejestvuje
 žiadny priesečník, tak metóda vráti hodnotu null.
 
 Ukážka použitia:
 
 
// Keď máme k dispozícii polohy bodov, môžeme využiť inú verziu tejto metódy:
final Bod A = new Bod(-15, -30);
final Bod B = new Bod(75, 80);
final Bod S = new Bod(-15, -10);
final double r = 80;
Bod[] P = Svet.priesečníkyÚsečkyAKružnice(A, B, S, r);
 
 Vizualizácia výsledku:
 
 Obrázok nižšie zobrazuje úsečku |AB|, kružnicu k so stredom S
 a polomerom r a ich priesečník (v tejto situácii je len jeden) P.
 
 
 
 Poznámka (pre zaujímavosť): Táto
 metóda (a jej klony) by mohla v prípade nenájdenia žiadneho
 priesečníka vrátiť namiesto hodnoty null pole s nulovou
 dĺžkou („prázdne“ pole), ale to by nebolo konzistentné s ostatnými
 metódami, ktoré hľadajú priesečníky. (A zachovanie konzistencie
 pri tvorbe balíkov akými sú programovacie rámce je dôležité.
 Niekedy sa ju nemusí podariť dosiahnuť z dôvodu rozsiahlosti
 balíkov a z dôvodu prijímania rôznych rozhodnutí
 v rôznych kontextoch, no prinajmenšom v prípadoch ako
 je tento by mala byť zachovaná.)
 
 Užitočný zdroj:
 
 
 
User:cobie – 
 href="https://stackoverflow.com/users/633770/arne-b"
User:arne.b – and others: 
 href="https://stackoverflow.com/questions/13053061/circle-line-intersection-points"
Circle line intersection points.
 Stack Overflow, 2012. Citované: 2016 – 2018.
 
 
 Zdroje, ktoré už nefungujú: https://sites.google.com/site/
 t3hprogrammer/research/line-circle-collision/tutorial
 http://keith-hair.net/blog/2008/08/05/line-to-circle-
 intersection-data/ (ActionScript)
Parametre:
x1 – x-ová súradnica bodu A úsečky
y1 – y-ová súradnica bodu A úsečky
x2 – x-ová súradnica bodu B úsečky
y2 – y-ová súradnica bodu B úsečky
x3 – x-ová súradnica stredu kružnice
y3 – y-ová súradnica stredu kružnice
r – polomer kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyUseckyAKruznice
public static final Bod[] priesecnikyUseckyAKruznice(double x1,
                                                     double y1,
                                                     double x2,
                                                     double y2,
                                                     double x3,
                                                     double y3,
                                                     double r)
 Alias pre priesečníkyÚsečkyAKružnice.
priesečníkyÚsečkyAKružnice
public static final Bod[] priesečníkyÚsečkyAKružnice(Poloha A,
                                                     Poloha B,
                                                     Poloha S,
                                                     double r)
Hľadá priesečníky úsečky |AB| a kružnice so stredom
 S a polomerom r. Ak jestvuje jeden priesečník, metóda vráti
 jednoprvkové pole. Ak jestvujú dva priesečníky, metóda vráti
 dvojprvkové pole bodov so súradnicami priesečníkov. Ak nejestvuje
 žiadny priesečník, tak metóda vráti hodnotu null.
Parametre:
A – poloha bodu A úsečky
B – poloha bodu B úsečky
S – poloha stredu S kružnice
r – polomer kružnice
Návratová hodnota:
pole priesečníkov alebo null, ak nejestvujú
priesecnikyUseckyAKruznice
public static final Bod[] priesecnikyUseckyAKruznice(Poloha A,
                                                     Poloha B,
                                                     Poloha S,
                                                     double r)
 Alias pre priesečníkyÚsečkyAKružnice.
najbližšíBodNaPriamke
public static final Bod najbližšíBodNaPriamke(double x0,
                                              double y0,
                                              double x1,
                                              double y1,
                                              double x2,
                                              double y2)
Nájde najbližší bod na priamke určenej dvomi bodmi A[x1, y1]
 a B[x2, y2] k zadanému voľnému bodu V[x0, y0] a vráti jeho
 súradnice v objekte typu Bod.
 
 
 Grafické
 znázornenie možnej situácie pri hľadaní najbližšieho bodu na
 priamke.
 
 Príklad:
 
 Pozrite sa na príklad v opise metódy najbližšíBodNaÚsečke a nahraďte v ňom volanie metódy najbližšíBodNaÚsečke
 metódou najbližšíBodNaPriamke. Priamka bude síce stále kreslená ako úsečka
 (riešenie tejto nedokonalosti ponechávame na čitateľoch), ale
 správanie príkladu sa zmení tak, že nájdený bod bude „opúšťať
 hranice úsečky“ a posúvať sa aj za hraničné body pôvodnej úsečky
 (pretože v skutočnosti bude ležať na priamke).
 
 Výsledok:
 
 
 Ukážka interaktívneho príkladu v činnosti po vyššie
 uvedenej úprave.
 
 Užitočný zdroj:
 
 
 
Michael Lloyd Lee: 
 href="https://stackoverflow.com/questions/1459368/snap-point-to-a-line/1459397#1459397"
Snap point to a line. Stack Overflow,
 2017. Citované: 2017 – 2018.
 
Parametre:
x0 – x-ová súradnica voľného bodu V
y0 – y-ová súradnica voľného bodu V
x1 – x-ová súradnica určujúceho bodu A priamky
y1 – y-ová súradnica určujúceho bodu A priamky
x2 – x-ová súradnica určujúceho bodu B priamky
y2 – y-ová súradnica určujúceho bodu B priamky
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na priamke
najblizsiBodNaPriamke
public static final Bod najblizsiBodNaPriamke(double x0,
                                              double y0,
                                              double x1,
                                              double y1,
                                              double x2,
                                              double y2)
 Alias pre najbližšíBodNaPriamke.
najbližšíBodNaPriamke
public static final Bod najbližšíBodNaPriamke(Poloha V,
                                              Poloha A,
                                              Poloha B)
Nájde najbližší bod na priamke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
Parametre:
V – poloha voľného bodu V
A – poloha určujúceho bodu A priamky
B – poloha určujúceho bodu B priamky
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na priamke
najblizsiBodNaPriamke
public static final Bod najblizsiBodNaPriamke(Poloha V,
                                              Poloha A,
                                              Poloha B)
 Alias pre najbližšíBodNaPriamke.
najbližšíBodNaPriamke
public static final Bod najbližšíBodNaPriamke(Poloha[] poleBodov)
Nájde najbližší bod na priamke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod. Bod
 a priamka sú určené polohami bodov v poli parametra, ktoré musí
 obsahovať aspoň tri prvky. Prvý prvok určuje bod V a ďalšie dva
 prvky body A a B.
Parametre:
poleBodov – polohy bodov určujúce bod V a priamku A, B
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na priamke
najblizsiBodNaPriamke
public static final Bod najblizsiBodNaPriamke(Poloha[] poleBodov)
 Alias pre najbližšíBodNaPriamke.
najbližšíBodNaÚsečke
public static final Bod najbližšíBodNaÚsečke(double x0,
                                             double y0,
                                             double x1,
                                             double y1,
                                             double x2,
                                             double y2)
Nájde najbližší bod na úsečke určenej dvomi bodmi A[x1, y1]
 a B[x2, y2] k zadanému voľnému bodu V[x0, y0] a vráti jeho
 súradnice v objekte typu Bod.
 
 
 Grafické
 znázornenie možných situácií pri hľadaní najbližšieho bodu na
 úsečke.
 
 Príklad:
 
 Toto je krátky interaktívny príklad ukazujúci fungovanie
 metódy najbližšíBodNaÚsečke. Krajné body úsečky a samotný voľný bod
 sa dajú ťahať myšou a nájdený bod je vyznačený o niečo väčšou
 kružnicou, než sú vyznačené tri kľúčové body.
 
 
import knižnica.*;
public class BodNaÚsečke extends GRobot
{
    // Pole bodov. Prvý bod je voľný bod a ďalšie dva sú krajné body úsečky.
    private Bod[] body = {new Bod(), new Bod(), new Bod()};
    // Index aktuálne ťahaného bodu:
    private int aktívny = 0;
    // Konštruktor.
    private BodNaÚsečke()
    {
        // Zmena rozmerov plátna a inicializácia príkladu.
        super(400, 400);
        skry();
        Svet.zbaľ();
        Svet.vystreď();
        for (Bod bod : body)
        {
            náhodnáPoloha();
            bod.poloha(this);
        }
        prekreslenie();
    }
    // Reakcia na stlačenie tlačidla myši.
    @Override public void stlačenieTlačidlaMyši()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo vykoná vyhľadanie a aktiváciu bodu na polohe myši…
            skočNaMyš();
            for (int i = 0; i &lt; body.length; ++i)
                if (bodVKruhu(body[i])) aktívny = i;
            body[aktívny].poloha(ÚdajeUdalostí.polohaMyši());
            prekreslenie();
        }
    }
    // Reakcia na ťahanie kurzora myši (ťahanie znamená pohyb myšou počas
    // držania ľubovoľného tlačidla).
    @Override public void ťahanieMyšou()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo premiestňuje aktívny bod.
            body[aktívny].poloha(ÚdajeUdalostí.polohaMyši());
            prekreslenie();
        }
    }
    // Reakcia na prekreslenie spôsobí prekreslenie scény.
    @Override public void prekreslenie()
    {
        podlaha.vymažGrafiku();
        skočNa(body[1]);
        choďNa(body[2]);
        for (int i = 0; i &lt; body.length; ++i)
        {
            skočNa(body[i]);
            krúžok(3);
        }
        Bod bod = Svet.najbližšíBodNaÚsečke(body);
        skočNa(bod);
        krúžok(6);
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        new BodNaÚsečke();
    }
}
 
 Výsledok:
 
  Ukážka
 interaktívneho príkladu v činnosti.
Parametre:
x0 – x-ová súradnica voľného bodu V
y0 – y-ová súradnica voľného bodu V
x1 – x-ová súradnica krajného bodu A úsečky
y1 – y-ová súradnica krajného bodu A úsečky
x2 – x-ová súradnica krajného bodu B úsečky
y2 – y-ová súradnica krajného bodu B úsečky
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na úsečke
najblizsiBodNaUsecke
public static final Bod najblizsiBodNaUsecke(double x0,
                                             double y0,
                                             double x1,
                                             double y1,
                                             double x2,
                                             double y2)
 Alias pre najbližšíBodNaÚsečke.
najbližšíBodNaÚsečke
public static final Bod najbližšíBodNaÚsečke(Poloha V,
                                             Poloha A,
                                             Poloha B)
Nájde najbližší bod na úsečke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod.
Parametre:
V – poloha voľného bodu V
A – poloha krajného bodu A úsečky
B – poloha krajného bodu B úsečky
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na úsečke
najblizsiBodNaUsecke
public static final Bod najblizsiBodNaUsecke(Poloha V,
                                             Poloha A,
                                             Poloha B)
 Alias pre najbližšíBodNaÚsečke.
najbližšíBodNaÚsečke
public static final Bod najbližšíBodNaÚsečke(Poloha[] poleBodov)
Nájde najbližší bod na úsečke |AB| k zadanému voľnému bodu
 V a vráti jeho súradnice v objekte typu Bod. Bod
 a úsečka sú určené polohami bodov v poli parametra, ktoré musí
 obsahovať aspoň tri prvky. Prvý prvok určuje bod V a ďalšie dva
 prvky body A a B.
Parametre:
poleBodov – polohy bodov určujúce bod V a úsečku A, B
Návratová hodnota:
objekt so súradnicami najbližšieho bodu na úsečke
najblizsiBodNaUsecke
public static final Bod najblizsiBodNaUsecke(Poloha[] poleBodov)
 Alias pre najbližšíBodNaÚsečke.
najbližšíBodNaKružnici
public static final Bod najbližšíBodNaKružnici(double x0,
                                               double y0,
                                               double x1,
                                               double y1,
                                               double r)
Nájde najbližší bod na kružnici so stredom S[x1, y1]
 a polomerom r k zadanému voľnému bodu V[x0, y0] a vráti jeho
 polohu v objekte typu Bod. Úloha je neriešiteľná,
 ak sa voľný bod V nachádza v strede kružnice, pretože od stredu
 kružnice sú rovnako vzdialené všetky jej body. Ak nastane takáto
 situácia, tak metóda vráti hodnotu null.
 
 
 Grafické
 znázornenie hľadania najbližšieho bodu na kružnici.
 
 Príklad:
 
 
«príklad – ospravedlňujeme sa, pracujeme na doplnení…»
 
 Výsledok:
 
  «Popis…».
 
 
Parametre:
x0 – x-ová súradnica voľného bodu
y0 – y-ová súradnica voľného bodu
x1 – x-ová súradnica stredu kružnice
y1 – y-ová súradnica stredu kružnice
r – polomer kružnice
Návratová hodnota:
poloha najbližšieho bodu na kružnici (v špeciálnom
     prípade null)
najblizsiBodNaKruznici
public static final Bod najblizsiBodNaKruznici(double x0,
                                               double y0,
                                               double x1,
                                               double y1,
                                               double r)
 Alias pre najbližšíBodNaKružnici.
najbližšíBodNaKružnici
public static final Bod najbližšíBodNaKružnici(Poloha V,
                                               Poloha S,
                                               double r)
Nájde najbližší bod na kružnici so stredom S a polomerom
 r k zadanému voľnému bodu V a vráti jeho polohu v objekte typu
 Bod. Úloha je neriešiteľná, ak sa voľný bod V nachádza
 v strede kružnice. Ak nastane takáto situácia, tak metóda vráti
 hodnotu null.
Parametre:
V – poloha voľného bodu
S – poloha stredu kružnice
r – polomer kružnice
Návratová hodnota:
poloha najbližšieho bodu na kružnici (v špeciálnom
     prípade null)
najblizsiBodNaKruznici
public static final Bod najblizsiBodNaKruznici(Poloha V,
                                               Poloha S,
                                               double r)
 Alias pre najbližšíBodNaKružnici.
vzdialenosťBodov
public static final double vzdialenosťBodov(double x1,
                                            double y1,
                                            double x2,
                                            double y2)
Vypočíta vzdialenosť medzi dvomi bodmi so súradnicami [x1, y1]
 a [x2, y2]. Táto metóda volá metódu jazyka Java Point2D.distance(x1, y1, x2, y2).
 
 Poznámka: V skutočnosti by sme nemali
 hovoriť, že ide o „metódu jazyka Java.“ Je to statická metóda
 triedy Point2D štandardného balíčka 
java.awt.geom jazyka Java (a aj na
 tomto opise by sa dalo ešte niečo spresňovať), ale z dôvodu
 pedagogickej transformácie ponechávame v opise zjednodušené
 označenie.
 
 Zdroj:
 
 
Distance of Point2D (Java Platform SE 8).
 Oracle. Citované: 2016 – 2018.
Parametre:
x1 – x-ová súradnica prvého bodu
y1 – y-ová súradnica prvého bodu
x2 – x-ová súradnica druhého bodu
y2 – y-ová súradnica druhého bodu
Návratová hodnota:
vzdialenosť medzi určenými bodmi
vzdialenostBodov
public static final double vzdialenostBodov(double x1,
                                            double y1,
                                            double x2,
                                            double y2)
 Alias pre vzdialenosťBodov.
vzdialenosťBodov
public static final double vzdialenosťBodov(Poloha A,
                                            Poloha B)
Vypočíta vzdialenosť medzi dvomi bodmi A a B. Pozri aj opis
 metódy vzdialenosťBodov, ktorej správanie táto metóda kopíruje.
Parametre:
A – poloha prvého bodu
B – poloha druhého bodu
Návratová hodnota:
vzdialenosť medzi určenými bodmi
vzdialenostBodov
public static final double vzdialenostBodov(Poloha A,
                                            Poloha B)
 Alias pre vzdialenosťBodov.
vzdialenosťBodov
public static final double vzdialenosťBodov(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi dvomi bodmi so súradnicami určenými
 polohami bodov v poli parametra. Pole musí obsahovať aspoň dva
 prvky. (V prípade vyššieho počtu prvkov sú brané do úvahy len
 prvé dva. Ostatné sú ignorované.) Pozri aj opis metódy vzdialenosťBodov, ktorej správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy bodov
Návratová hodnota:
vzdialenosť medzi určenými bodmi (prípadne hodnota
     Double.NaN – v prípade chyby)
vzdialenostBodov
public static final double vzdialenostBodov(Poloha[] poleBodov)
 Alias pre vzdialenosťBodov.
vzdialenosťBoduOdPriamky
public static final double vzdialenosťBoduOdPriamky(double x0,
                                                    double y0,
                                                    double x1,
                                                    double y1,
                                                    double x2,
                                                    double y2)
Vypočíta vzdialenosť od zadaného voľného bodu V[x0, y0]
 k priamke určenej dvomi bodmi A[x1, y1] a B[x2, y2]. (Ak bod
 leží na priamke, tak je vzdialenosť rovná nule.)
 
 Metóda nepoužíva metódu jazyka Java Line2D.ptLineDist(x1, y1, x2, y2, x0, y0), ale vnútornú
 (rovnomennú) optimalizovanú verziu jednej z implementácií tejto
 metódy.
 
 Poznámka: V skutočnosti by sme nemali
 hovoriť, že ide o „metódu jazyka Java.“ Je to statická metóda
 triedy Line2D štandardného balíčka 
java.awt.geom jazyka Java (a aj na
 tomto opise by sa dalo ešte niečo spresňovať), ale z dôvodu
 pedagogickej transformácie ponechávame v opise zjednodušené
 označenie.
 
 
 Grafické
 znázornenie možnej situácie pri určovaní vzdialenosti bodu od
 priamky.
 
 Príklad:
 
 Pozrite sa na príklad v opise metódy vzdialenosťBoduOdÚsečky a upravte telo reakcie prekreslenie takto:
 
 
podlaha.vymažGrafiku();
skočNa(body[1]);
choďNa(body[2]);
// Tieto riadky pribudli:
skočNa(body[1]);
otočNa(body[2]);
vzad(2000);
skočNa(body[2]);
dopredu(2000);
for (int i = 0; i &lt; body.length; ++i)
{
    skočNa(body[i]);
    krúžok(3);
}
skočNa(body[0]); uhol(90); skoč();
// Volanie metódy na tomto riadku sa zmenilo:
text(F(Svet.vzdialenosťBoduOdPriamky(body), 2));
 
 Výsledok:
 
  Ukážka
 interaktívneho príkladu v činnosti.
 Zdroj:
 
 
Point to line distance of Line2D (Java
 Platform SE 8). Oracle. Citované: 2016 – 2018.
Parametre:
x0 – x-ová súradnica voľného bodu
y0 – y-ová súradnica voľného bodu
x1 – x-ová súradnica určujúceho bodu A priamky
y1 – y-ová súradnica určujúceho bodu A priamky
x2 – x-ová súradnica určujúceho bodu B priamky
y2 – y-ová súradnica určujúceho bodu B priamky
Návratová hodnota:
vzdialenosť bodu od priamky
vzdialenostBoduOdPriamky
public static final double vzdialenostBoduOdPriamky(double x0,
                                                    double y0,
                                                    double x1,
                                                    double y1,
                                                    double x2,
                                                    double y2)
 Alias pre vzdialenosťBoduOdPriamky.
vzdialenosťBoduOdPriamky
public static final double vzdialenosťBoduOdPriamky(Poloha V,
                                                    Poloha A,
                                                    Poloha B)
Vypočíta vzdialenosť od zadaného voľného bodu V k priamke |AB|.
 Pozri aj opis metódy vzdialenosťBoduOdPriamky,
 ktorej správanie táto metóda kopíruje.
Parametre:
V – poloha voľného bodu
A – poloha určujúceho bodu A priamky
B – poloha určujúceho bodu B priamky
Návratová hodnota:
vzdialenosť bodu od priamky
vzdialenostBoduOdPriamky
public static final double vzdialenostBoduOdPriamky(Poloha V,
                                                    Poloha A,
                                                    Poloha B)
 Alias pre vzdialenosťBoduOdPriamky.
vzdialenosťBoduOdPriamky
public static final double vzdialenosťBoduOdPriamky(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi voľným bodom a priamkou, ktoré
 sú určené určenými polohami bodov v poli parametra. Pole musí
 obsahovať aspoň tri prvky. Prvý prvok obsahuje súradnice voľného
 bodu a ďalšie dva prvky určujúce body priamky. Pozri aj opis
 metódy vzdialenosťBoduOdPriamky, ktorej
 správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy voľného bodu a určujúcich bodov priamky
Návratová hodnota:
vzdialenosť bodu od priamky (prípadne hodnota
     Double.NaN – v prípade chyby)
vzdialenostBoduOdPriamky
public static final double vzdialenostBoduOdPriamky(Poloha[] poleBodov)
 Alias pre vzdialenosťBoduOdPriamky.
vzdialenosťBoduOdÚsečky
public static final double vzdialenosťBoduOdÚsečky(double x0,
                                                   double y0,
                                                   double x1,
                                                   double y1,
                                                   double x2,
                                                   double y2)
Vypočíta vzdialenosť od zadaného voľného bodu V[x0, y0]
 k úsečke určenej dvomi bodmi A[x1, y1] a B[x2, y2]. (Ak bod
 leží na úsečke, tak je vzdialenosť rovná nule.)
 
 Metóda nepoužíva metódu jazyka Java Line2D.ptSegDist(x1, y1, x2, y2, x0, y0), ale vnútornú
 (rovnomennú) optimalizovanú verziu jednej z implementácií tejto
 metódy.
 
 Poznámka: V skutočnosti by sme nemali
 hovoriť, že ide o „metódu jazyka Java.“ Je to statická metóda
 triedy Line2D štandardného balíčka 
java.awt.geom jazyka Java (a aj
 na tomto opise by sa dalo ešte niečo spresňovať), ale z dôvodu
 pedagogickej transformácie ponechávame v opise zjednodušené
 označenie. Podobne postupujeme na viacerých miestach tejto
 dokumentácie.
 
 
 Grafické
 znázornenie možnej situácie pri určovaní vzdialenosti bodu od
 úsečky.
 
 Príklad:
 
 Toto je krátky interaktívny príklad ukazujúci fungovanie
 metódy vzdialenosťBoduOdÚsečky. Krajné body úsečky a samotný voľný bod
 sa dajú ťahať myšou a nameraná vzdialenosť sa zobrazuje tesne
 nad bodom.
 
 
import knižnica.*;
public class BodOdÚsečky extends GRobot
{
    // Pole bodov. Prvý bod je voľný bod a ďalšie dva sú krajné body úsečky.
    private Bod[] body = {new Bod(), new Bod(), new Bod()};
    // Index aktuálne ťahaného bodu:
    private int aktívny = 0;
    // Konštruktor.
    private BodOdÚsečky()
    {
        // Zmena rozmerov plátna a inicializácia príkladu.
        super(400, 400);
        skry();
        Svet.zbaľ();
        Svet.vystreď();
        for (Bod bod : body)
        {
            náhodnáPoloha();
            bod.poloha(this);
        }
        prekreslenie();
    }
    // Reakcia na stlačenie tlačidla myši.
    @Override public void stlačenieTlačidlaMyši()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo vykoná vyhľadanie a aktiváciu bodu na polohe myši…
            skočNaMyš();
            for (int i = 0; i &lt; body.length; ++i)
                if (bodVKruhu(body[i])) aktívny = i;
            body[aktívny].poloha(ÚdajeUdalostí.polohaMyši());
            prekreslenie();
        }
    }
    // Reakcia na ťahanie kurzora myši (ťahanie znamená pohyb myšou počas
    // držania ľubovoľného tlačidla).
    @Override public void ťahanieMyšou()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo premiestňuje aktívny bod.
            body[aktívny].poloha(ÚdajeUdalostí.polohaMyši());
            prekreslenie();
        }
    }
    // Reakcia na prekreslenie spôsobí prekreslenie scény.
    @Override public void prekreslenie()
    {
        podlaha.vymažGrafiku();
        skočNa(body[1]);
        choďNa(body[2]);
        for (int i = 0; i &lt; body.length; ++i)
        {
            skočNa(body[i]);
            krúžok(3);
        }
        skočNa(body[0]); uhol(90); skoč();
        text(F(Svet.vzdialenosťBoduOdÚsečky(body), 2));
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        new BodOdÚsečky();
    }
}
 
 Výsledok:
 
  Ukážka
 interaktívneho príkladu v činnosti.
 
 Zdroj:
 
 
Point to line segment distance of Line2D (Java
 Platform SE 8). Oracle. Citované: 2016 – 2018.
Parametre:
x0 – x-ová súradnica voľného bodu
y0 – y-ová súradnica voľného bodu
x1 – x-ová súradnica určujúceho bodu A úsečky
y1 – y-ová súradnica určujúceho bodu A úsečky
x2 – x-ová súradnica určujúceho bodu B úsečky
y2 – y-ová súradnica určujúceho bodu B úsečky
Návratová hodnota:
vzdialenosť bodu od úsečky
vzdialenostBoduOdUsecky
public static final double vzdialenostBoduOdUsecky(double x0,
                                                   double y0,
                                                   double x1,
                                                   double y1,
                                                   double x2,
                                                   double y2)
 Alias pre vzdialenosťBoduOdÚsečky.
vzdialenosťBoduOdÚsečky
public static final double vzdialenosťBoduOdÚsečky(Poloha V,
                                                   Poloha A,
                                                   Poloha B)
Vypočíta vzdialenosť od zadaného voľného bodu V k úsečke |AB|.
 Pozri aj opis metódy vzdialenosťBoduOdÚsečky,
 ktorej správanie táto metóda kopíruje.
Parametre:
V – poloha voľného bodu
A – poloha určujúceho bodu A úsečky
B – poloha určujúceho bodu B úsečky
Návratová hodnota:
vzdialenosť bodu od úsečky
vzdialenostBoduOdUsecky
public static final double vzdialenostBoduOdUsecky(Poloha V,
                                                   Poloha A,
                                                   Poloha B)
 Alias pre vzdialenosťBoduOdÚsečky.
vzdialenosťBoduOdÚsečky
public static final double vzdialenosťBoduOdÚsečky(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi voľným bodom V a úsečkou |AB|, ktoré
 sú určené polohami bodov v poli parametra poleBodov. Pole
 musí obsahovať aspoň tri prvky. Prvý prvok obsahuje súradnice
 voľného bodu V a ďalšie dva prvky určujúce body úsečky |AB|. Pozri
 aj opis metódy vzdialenosťBoduOdÚsečky, ktorej
 správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy voľného bodu a určujúcich bodov úsečky
Návratová hodnota:
vzdialenosť bodu od úsečky (prípadne hodnota
     Double.NaN – v prípade chyby)
vzdialenostBoduOdUsecky
public static final double vzdialenostBoduOdUsecky(Poloha[] poleBodov)
 Alias pre vzdialenosťBoduOdÚsečky.
vzdialenosťBoduOdKružnice
public static final double vzdialenosťBoduOdKružnice(double x0,
                                                     double y0,
                                                     double x1,
                                                     double y1,
                                                     double r)
Vypočíta vzdialenosť od zadaného voľného bodu V ku kružnici
 určenej stredom S a polomerom r. Pozor! Ak sa bod nachádza
 vo vnútri kružnice, tak táto metóda vráti zápornú hodnotu – pozri
 vysvetlenie v poznámkach nižšie.
 
 Výpočet, ktorý vykonáva táto metóda je v skutočnosti technicky
 veľmi jednoduchý. Stačí vypočítať vzdialenosť bodu od stredu
 kružnice a odpočítať polomer kružnice. (Na výpočet vzdialenosti
 je použitá funkcia (technicky metóda triedy Math)
 Math.hypot(x, y).)
 
 Poznámky: Ak bod leží na kružnici,
 jeho vzdialenosť od stredu kružnice sa rovná polomeru kružnice,
 čiže vzdialenosť od kružnice je nulová. Ak bod leží vo vnútri
 kružnice, tak bez použitia absolútnej hodnoty vyjde vzdialenosť
 záporná, čo je technicky nezmysel, ale na rýchle odlíšenie tejto
 situácie (a tiež na zjednodušenie použitia pri niektorých
 algoritmoch) je tejto metóde ponechaná schopnosť vracania zápornej
 vzdialenosti. Podobný prístup volia viaceré metódy programovacieho
 rámca.
 
 Parametre metódy určujú: V[x0, y0] – voľný bod; S[x1, y1] –
 stred kružnice; r – polomer kružnice.
 
 
 Rôzne
 situácie pri meraní vzdialenosti bodu od kružnice touto metódou.
Parametre:
x0 – x-ová súradnica voľného bodu
y0 – y-ová súradnica voľného bodu
x1 – x-ová súradnica stredu S kružnice
y1 – y-ová súradnica stredu S kružnice
r – polomer kružnice
Návratová hodnota:
vzdialenosť bodu od kružnice; záporná hodnota signalizuje,
     že bod sa nachádza vo vnútri kružnice
vzdialenostBoduOdKruznice
public static final double vzdialenostBoduOdKruznice(double x0,
                                                     double y0,
                                                     double x1,
                                                     double y1,
                                                     double r)
 Alias pre vzdialenosťBoduOdKružnice.
vzdialenosťBoduOdKružnice
public static final double vzdialenosťBoduOdKružnice(Poloha V,
                                                     Poloha S,
                                                     double r)
Vypočíta vzdialenosť od zadaného voľného bodu V ku kružnici
 určenej stredom S a polomerom r. Pozri aj opis metódy vzdialenosťBoduOdKružnice, ktorej správanie táto metóda
 kopíruje.
Parametre:
V – poloha voľného bodu
S – poloha stredu kružnice
r – polomer kružnice
Návratová hodnota:
vzdialenosť bodu od úsečky; záporná hodnota signalizuje,
     že bod sa nachádza vo vnútri kružnice
vzdialenostBoduOdKruznice
public static final double vzdialenostBoduOdKruznice(Poloha V,
                                                     Poloha S,
                                                     double r)
 Alias pre vzdialenosťBoduOdKružnice.
vzdialenosťBoduOdKružnice
public static final double vzdialenosťBoduOdKružnice(Poloha[] poleBodov,
                                                     double polomer)
Vypočíta vzdialenosť medzi voľným bodom V a kružnicou, ktorá
 je určená stredom S a polomerom r, pričom body V a S sú prvkami
 poľa poleBodov a r je uložený v parametri polomer).
 Z uvedeného vyplýva, že pole musí obsahovať aspoň dva prvky. Prvý
 uchováva súradnice voľného bodu V a druhý stredu kružnice S.
 (Posledný parameter polomer určuje polomer kružnice.) Pozri
 aj opis metódy vzdialenosťBoduOdKružnice,
 ktorej správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy voľného bodu a stredu kružnice
polomer – polomer kružnice
Návratová hodnota:
vzdialenosť bodu od kružnice (prípadne hodnota
     Double.NaN – v prípade chyby); záporná
     hodnota signalizuje, že bod sa nachádza vo vnútri kružnice
vzdialenostBoduOdKruznice
public static final double vzdialenostBoduOdKruznice(Poloha[] poleBodov,
                                                     double polomer)
 Alias pre vzdialenosťBoduOdKružnice.
vzdialenosťKružníc
public static final double vzdialenosťKružníc(double x1,
                                              double y1,
                                              double r1,
                                              double x2,
                                              double y2,
                                              double r2)
Vypočíta vzdialenosť medzi dvomi kružnicami, ktoré sú určené
 svojími stredmi (S1, S2) a polomermi (r1, r2). Ak majú kružnice
 prienik, tak je vzdialenosť záporná. (Ak sa dotýkajú v jedinom
 bode, tak je nulová.)
 
  Grafické
 znázornenie vzdialenosti medzi kružnicami (červenou), ktorú
 počíta táto metóda.
 
 Parametre metódy určujú: S1[x1, y1] – stred prvej kružnice;
 r1 – polomer prvej kružnice; S2[x2, y2] – stred druhej kružnice;
 r2 – polomer druhej kružnice.
Parametre:
x1 – x-ová súradnica stredu S1 (prvej) kružnice
y1 – y-ová súradnica stredu S1 (prvej) kružnice
r1 – polomer prvej kružnice
x2 – x-ová súradnica stredu S2 (druhej) kružnice
y2 – y-ová súradnica stredu S2 (druhej) kružnice
r2 – polomer druhej kružnice
Návratová hodnota:
vzdialenosť kružníc; záporná hodnota signalizuje,
     že kružnice majú spoločný viac, než jeden bod (prekrývajú sa)
vzdialenostKruznic
public static final double vzdialenostKruznic(double x1,
                                              double y1,
                                              double r1,
                                              double x2,
                                              double y2,
                                              double r2)
 Alias pre vzdialenosťKružníc.
vzdialenosťKružníc
public static final double vzdialenosťKružníc(Poloha S1,
                                              double r1,
                                              Poloha S2,
                                              double r2)
Vypočíta vzdialenosť medzi dvomi kružnicami, ktoré sú určené
 svojími stredmi (S1, S2) a polomermi (r1, r2). Pozri aj opis metódy
 vzdialenosťKružníc, ktorej správanie táto metóda
 kopíruje.
Parametre:
S1 – poloha stredu prvej kružnice
r1 – polomer prvej kružnice
S2 – poloha stredu druhej kružnice
r2 – polomer druhej kružnice
Návratová hodnota:
vzdialenosť kružníc; záporná hodnota signalizuje, že
     kružnice majú spoločný viac, než jeden bod (prekrývajú sa)
vzdialenostKruznic
public static final double vzdialenostKruznic(Poloha S1,
                                              double r1,
                                              Poloha S2,
                                              double r2)
 Alias pre vzdialenosťKružníc.
vzdialenosťKružníc
public static final double vzdialenosťKružníc(Poloha[] poleBodov,
                                              double polomer1,
                                              double polomer2)
Vypočíta vzdialenosť medzi dvomi kružnicami určenými stredmi
 S1 a S2 a polomermi r1 a r2, pričom stredy S1 a S2 sú prvkami
 poľa poleBodov. To znamená, že pole musí obsahovať aspoň
 dva prvky. Prvý obsahuje súradnice stredu prvej kružnice S1 a druhý
 druhej kružnice S2. Parametre r1 a r2 určujú polomery kružníc.
 Pozri aj opis metódy vzdialenosťKružníc,
 ktorej správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy stredov kružníc
polomer1 – polomer prvej kružnice
polomer2 – polomer druhej kružnice
Návratová hodnota:
vzdialenosť kružníc (prípadne hodnota Double.NaN – v prípade chyby); záporná hodnota signalizuje,
     že kružnice majú spoločný viac, než jeden bod (prekrývajú sa)
vzdialenostKruznic
public static final double vzdialenostKruznic(Poloha[] poleBodov,
                                              double polomer1,
                                              double polomer2)
 Alias pre vzdialenosťKružníc.
vzdialenosťÚsečiek
public static final double vzdialenosťÚsečiek(double x1,
                                              double y1,
                                              double x2,
                                              double y2,
                                              double x3,
                                              double y3,
                                              double x4,
                                              double y4)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|. Ak sa
 úsečky pretínajú, tak je vzdialenosť nulová. V opačnom prípade
 metóda nájde najbližšie body úsečiek a vypočíta vzdialenosť medzi
 nimi.
 
 
 
 Parametre metódy vyjadrujú: A[x1, y1] – B[x2, y2] – krajné body
 prvej úsečky; C[x3, y3] – D[x4, y4] – krajné body druhej úsečky.
 
 Poznámka: V kontexte informácie „ak
 sa úsečky pretínajú, tak je vzdialenosť nulová,“ nemá zmysel
 merať vzájomnú vzdialenosť priamok, okrem prípadu, keď sú vzájomne
 rovnobežné. Rovnobežnosť priamok sa dá overiť metódou priesečníkPriamok – ak sú rovnobežné,
 tak metóda vráti hodnotu null. Zistenie vzdialenosti
 rovnobežných priamok potom treba vykonať tak, že zvolíme ľubovoľný
 bod na jednej priamke, metódou najbližšíBodNaPriamke,
 získame bod ležiaci na druhej priamke a potom metódou vzdialenosť zistíme
 vzdialenosť týchto dvoch bodov.
 
 
 
 
 
 Charakteristické situácie
 vzájomných polôh úsečiek a spôsob merania vzdialenosti úsečiek
 v nich.
 
 
 Na prevzatie:
 
 Interaktívny príklad 
vzdialenost-useciek.7z vizualizujúci princíp
 hľadania vzdialenosti úsečiek.
Parametre:
x1 – x-ová súradnica určujúceho bodu A prvej úsečky
y1 – y-ová súradnica určujúceho bodu A prvej úsečky
x2 – x-ová súradnica určujúceho bodu B prvej úsečky
y2 – y-ová súradnica určujúceho bodu B prvej úsečky
x3 – x-ová súradnica určujúceho bodu C druhej úsečky
y3 – y-ová súradnica určujúceho bodu C druhej úsečky
x4 – x-ová súradnica určujúceho bodu D druhej úsečky
y4 – y-ová súradnica určujúceho bodu D druhej úsečky
Návratová hodnota:
vzájomná vzdialenosť dvoch úsečiek
vzdialenostUseciek
public static final double vzdialenostUseciek(double x1,
                                              double y1,
                                              double x2,
                                              double y2,
                                              double x3,
                                              double y3,
                                              double x4,
                                              double y4)
 Alias pre vzdialenosťÚsečiek.
vzdialenosťÚsečiek
public static final double vzdialenosťÚsečiek(Poloha A,
                                              Poloha B,
                                              Poloha C,
                                              Poloha D)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|. Ak sa
 úsečky pretínajú, tak je vzdialenosť nulová. V opačnom prípade
 metóda nájde najbližšie body úsečiek a vypočíta vzdialenosť medzi
 nimi. Pozri aj opis metódy vzdialenosťÚsečiek, ktorej správanie táto metóda kopíruje.
Parametre:
A – poloha určujúceho bodu A prvej úsečky
B – poloha určujúceho bodu B prvej úsečky
C – poloha určujúceho bodu C druhej úsečky
D – poloha určujúceho bodu D druhej úsečky
Návratová hodnota:
vzájomná vzdialenosť dvoch úsečiek
vzdialenostUseciek
public static final double vzdialenostUseciek(Poloha A,
                                              Poloha B,
                                              Poloha C,
                                              Poloha D)
 Alias pre vzdialenosťÚsečiek.
vzdialenosťÚsečiek
public static final double vzdialenosťÚsečiek(Poloha[] poleBodov)
Vypočíta vzdialenosť medzi dvomi úsečkami |AB| a |CD|, pričom
 ich určujúce body sú prvkami poľa poleBodov. To znamená,
 že pole musí obsahovať aspoň štyri prvky. Prvé dva prvky sú
 určujúce body prvej úsečky (A, B) a ďalšie dva druhej (C, D).
 Ak sa úsečky pretínajú, tak je vzdialenosť nulová. V opačnom
 prípade metóda nájde najbližšie body úsečiek a vypočíta
 vzdialenosť medzi nimi. Pozri aj opis metódy vzdialenosťÚsečiek, ktorej správanie
 táto metóda kopíruje.
Parametre:
poleBodov – polohy určujúcich bodov úsečiek
Návratová hodnota:
vzájomná vzdialenosť dvoch úsečiek (prípadne hodnota
     Double.NaN – v prípade chyby)
vzdialenostUseciek
public static final double vzdialenostUseciek(Poloha[] poleBodov)
 Alias pre vzdialenosťÚsečiek.
vzdialenosťPriamkyOdKružnice
public static final double vzdialenosťPriamkyOdKružnice(double x1,
                                                        double y1,
                                                        double x2,
                                                        double y2,
                                                        double x3,
                                                        double y3,
                                                        double r)
Vypočíta vzdialenosť medzi určenou priamkou a kružnicou.
 Pozor! Ak sa priamka a kružnica pretínajú, tak vrátená
 vzdialenosť (v) je menšia od nuly, čo je z pohľadu zhody s realitou
 číry nezmysel, ale keďže aj táto hodnota sa dá využiť v praxi,
 bol tento spôsob v programovacom rámci ponechaný (dôvody tohto
 správania sú rovnaké ako pri metóde vzdialenosťÚsečkyOdKružnice – pozri jej
 opis), pričom absolútna hodnota tejto vzdialenosti je rovná
 vzdialenosti dvoch bodov určených takto:
 
 Ide o body ležiace na kolmici (K) so zadanou priamkou (P),
 ktorá zároveň prechádza stredom zadanej kružnice (C). Prvý bod
 (B1) je priesečníkom priamok K a P. Druhý bod
 (B2) je taký priesečník kolmice K a kružnice C, ktorý
 leží bližšie k prvému priesečníku (porovnaj s priesečníkom
 B2′):
 
 
 Grafické
 znázornenie vyššie opisovanej situácie – určovania vzdialenosti
 priamky od kružnice, ktoré sa pretínajú.
 
 Ak sa kružnica a priamka dotýkajú v jedinom bode, tak je
 vzdialenosť nulová.
 
 Poznámka: Cieľom relatívne komplikovaného
 opisu vyššie (zahŕňajúceho priesečníky, kolmicu, priamku
 a kružnicu) je presné vysvetlenie analytického riešenia problému,
 ktoré bolo zvolené tak, aby bolo čo najmenej výpočtovo náročné.
 V skutočnosti je veľmi priamočiare. Je to skrátka rozdiel dvoch
 hodnôt, konkrétne:
 – vzdialenosti stredu kružnice od priamky
 – a polomeru kružnice.
 (Pričom algoritmus výpočtu vzdialenosti bodu od priamky nie je
 príliš výpočtovo náročný a aj v triedach Javy sa nachádza
 metóda, ktorá tento algoritmus implementuje.
 Programovací rámec GRobot vnútorne implementuje vlastnú
 optimalizovanú verziu jednej z implementácií tejto metódy.)
 
  Grafické
 znázornenie vzdialenosti úsečky od kružnice (červenou), ktorú
 počíta táto metóda.(Šedou farbou je znázornená vzdialenosť,
 ktorú by v tomto prípade vypočítala metóda vzdialenosťÚsečkyOdKružnice.)
 
 S1[x1, y1] – S2[x2, y2] – určujúce body priamky; S3[x3, y3] –
 stred kružnice; r – polomer kružnice
Parametre:
x1 – x-ová súradnica určujúceho bodu A priamky
y1 – y-ová súradnica určujúceho bodu A priamky
x2 – x-ová súradnica určujúceho bodu B priamky
y2 – y-ová súradnica určujúceho bodu B priamky
x3 – x-ová súradnica stredu kružnice
y3 – y-ová súradnica stredu kružnice
r – polomer kružnice
vzdialenostPriamkyOdKruznice
public static final double vzdialenostPriamkyOdKruznice(double x1,
                                                        double y1,
                                                        double x2,
                                                        double y2,
                                                        double x3,
                                                        double y3,
                                                        double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
vzdialenosťPriamkyOdKružnice
public static final double vzdialenosťPriamkyOdKružnice(Poloha A,
                                                        Poloha B,
                                                        Poloha S,
                                                        double r)
Vypočíta vzdialenosť medzi určenou priamkou |AB| a kružnicou
 so stredom S a polomerom r. Pozri aj opis metódy vzdialenosťPriamkyOdKružnice, ktorej
 správanie táto metóda kopíruje.
Parametre:
A – poloha určujúceho bodu A priamky
B – poloha určujúceho bodu B priamky
S – poloha stredu kružnice
r – polomer kružnice
vzdialenostPriamkyOdKruznice
public static final double vzdialenostPriamkyOdKruznice(Poloha A,
                                                        Poloha B,
                                                        Poloha S,
                                                        double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
vzdialenosťPriamkyOdKružnice
public static final double vzdialenosťPriamkyOdKružnice(Poloha[] poleBodov,
                                                        double r)
Vypočíta vzdialenosť medzi určenou priamkou |AB| a kružnicou
 so stredom S a polomerom r, pričom body A, B a stred S sú určené
 prvkami poľa poleBodov. To znamená, že pole musí obsahovať
 aspoň tri prvky. Prvé dva prvky sú určujúce body priamky (A a B)
 a tretí prvok je stred kružnice (S). Pozri aj opis metódy vzdialenosťPriamkyOdKružnice, ktorej
 správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy určujúcich bodov priamky a poloha stredu
     kružnice
r – polomer kružnice
vzdialenostPriamkyOdKruznice
public static final double vzdialenostPriamkyOdKruznice(Poloha[] poleBodov,
                                                        double r)
 Alias pre vzdialenosťPriamkyOdKružnice.
vzdialenosťÚsečkyOdKružnice
public static final double vzdialenosťÚsečkyOdKružnice(double x1,
                                                       double y1,
                                                       double x2,
                                                       double y2,
                                                       double x3,
                                                       double y3,
                                                       double r)
Vypočíta vzdialenosť medzi určenou úsečkou a kružnicou.
 Pozor! Ak sa úsečka a kružnica pretínajú, tak vrátená
 vzdialenosť je menšia od nuly (bez ohľadu na nezmyselnosť tohto
 výsledku) a jej absolútna hodnota je vzdialenosťou najbližšieho
 bodu na úsečke od stredu kružnice. Technicky je v takom prípade
 vzdialenosť nulová, ale je užitočné mať možnosť rozlíšiť tento
 prípad. Najmä pri programovaní rôznych situácií. Preto vracia táto
 metóda aj záporné hodnoty, ktoré sa dajú v prípade potreby
 odfiltrovať vhodnou podmienkou.
 
 Ak sa kružnica a úsečka dotýkajú v jedinom bode, tak je
 vzdialenosť nulová. Ak je niektorý krajný bod úsečky (S1 alebo S2)
 najbližším bodom úsečky k stredu kružnice, tak je vypočítaná
 vzdialenosť tohto bodu od kružnice.
 
  Grafické
 znázornenie vzdialenosti úsečky od kružnice (červenou), ktorú
 počíta táto metóda.(Pozri aj obrázok v opise metódy
 vzdialenosťPriamkyOdKružnice.)
 
 S1[x1, y1] – S2[x2, y2] – krajné body úsečky; S3[x3, y3] – stred
 kružnice; r – polomer kružnice
Parametre:
x1 – x-ová súradnica určujúceho bodu A úsečky
y1 – y-ová súradnica určujúceho bodu A úsečky
x2 – x-ová súradnica určujúceho bodu B úsečky
y2 – y-ová súradnica určujúceho bodu B úsečky
x3 – x-ová súradnica stredu kružnice
y3 – y-ová súradnica stredu kružnice
r – polomer kružnice
vzdialenostUseckyOdKruznice
public static final double vzdialenostUseckyOdKruznice(double x1,
                                                       double y1,
                                                       double x2,
                                                       double y2,
                                                       double x3,
                                                       double y3,
                                                       double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
vzdialenosťÚsečkyOdKružnice
public static final double vzdialenosťÚsečkyOdKružnice(Poloha A,
                                                       Poloha B,
                                                       Poloha S,
                                                       double r)
Vypočíta vzdialenosť medzi určenou úsečkou |AB| a kružnicou
 so stredom S a polomerom r. Pozri aj opis metódy vzdialenosťÚsečkyOdKružnice, ktorej
 správanie táto metóda kopíruje.
Parametre:
A – poloha určujúceho bodu A úsečky
B – poloha určujúceho bodu B úsečky
S – poloha stredu kružnice
r – polomer kružnice
vzdialenostUseckyOdKruznice
public static final double vzdialenostUseckyOdKruznice(Poloha A,
                                                       Poloha B,
                                                       Poloha S,
                                                       double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
vzdialenosťÚsečkyOdKružnice
public static final double vzdialenosťÚsečkyOdKružnice(Poloha[] poleBodov,
                                                       double r)
Vypočíta vzdialenosť medzi určenou úsečkou |AB| a kružnicou
 so stredom S a polomerom r, pričom body A, B a stred S sú určené
 prvkami poľa poleBodov. To znamená, že pole musí obsahovať
 aspoň tri prvky. Prvé dva prvky sú určujúce body úsečky (A a B)
 a tretí prvok je stred kružnice (S). Pozri aj opis metódy vzdialenosťÚsečkyOdKružnice, ktorej
 správanie táto metóda kopíruje.
Parametre:
poleBodov – polohy určujúcich bodov úsečky a poloha stredu
     kružnice
r – polomer kružnice
vzdialenostUseckyOdKruznice
public static final double vzdialenostUseckyOdKruznice(Poloha[] poleBodov,
                                                       double r)
 Alias pre vzdialenosťÚsečkyOdKružnice.
početZariadení
public static int početZariadení()
Zistí počet obrazovkových zariadení, ktoré sú dostupné na tomto
 počítači. Toto je vhodné overiť pred pokusom o prepnutie sveta do
 režimu celej obrazovky.
Návratová hodnota:
počet zariadení
Pozri tiež:
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
premiestniNaZariadenie(int), 
zistiZariadenieOkna()
pocetZariadení
public static int pocetZariadení()
 Alias pre početZariadení.
početObrazoviek
public static int početObrazoviek()
 Alias pre početZariadení.
pocetObrazoviek
public static int pocetObrazoviek()
 Alias pre početZariadení.
šírkaZariadenia
public static int šírkaZariadenia()
Zistí šírku dostupného obrazovkového zariadenia.
Návratová hodnota:
šírka obrazovkového zariadenia v pixeloch; hodnota
     -1 znamená chybu
Pozri tiež:
početZariadení(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
zistiZariadenieOkna()
sirkaZariadenia
public static int sirkaZariadenia()
 Alias pre šírkaZariadenia.
šírkaObrazovky
public static int šírkaObrazovky()
 Alias pre šírkaZariadenia.
sirkaObrazovky
public static int sirkaObrazovky()
 Alias pre šírkaZariadenia.
šírkaZariadenia
public static int šírkaZariadenia(int zariadenie)
Zistí šírku dostupného obrazovkového zariadenia.
 Zariadenie je určené jeho „poradovým číslom“ (indexom; čiže
 nula označuje prvé zariadenie).
Parametre:
zariadenie – číslo zariadenia, ktorého šírka má byť
     zistená
Návratová hodnota:
šírka obrazovkového zariadenia v pixeloch; hodnota
     -1 znamená chybu
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
zistiZariadenieOkna()
sirkaZariadenia
public static int sirkaZariadenia(int zariadenie)
 Alias pre šírkaZariadenia.
šírkaObrazovky
public static int šírkaObrazovky(int zariadenie)
 Alias pre šírkaZariadenia.
sirkaObrazovky
public static int sirkaObrazovky(int zariadenie)
 Alias pre šírkaZariadenia.
výškaZariadenia
public static int výškaZariadenia()
Zistí výšku dostupného obrazovkového zariadenia.
Návratová hodnota:
výška obrazovkového zariadenia v pixeloch; hodnota
     -1 znamená chybu
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
zistiZariadenieOkna()
vyskaZariadenia
public static int vyskaZariadenia()
 Alias pre výškaZariadenia.
výškaObrazovky
public static int výškaObrazovky()
 Alias pre výškaZariadenia.
vyskaObrazovky
public static int vyskaObrazovky()
 Alias pre výškaZariadenia.
výškaZariadenia
public static int výškaZariadenia(int zariadenie)
Zistí výšku dostupného obrazovkového zariadenia.
 Zariadenie je určené jeho „poradovým číslom“ (indexom; čiže
 nula označuje prvé zariadenie).
Parametre:
zariadenie – číslo zariadenia, ktorého výška má byť
     zistená
Návratová hodnota:
výška obrazovkového zariadenia v pixeloch; hodnota
     -1 znamená chybu
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
zistiZariadenieOkna()
vyskaZariadenia
public static int vyskaZariadenia(int zariadenie)
 Alias pre výškaZariadenia.
výškaObrazovky
public static int výškaObrazovky(int zariadenie)
 Alias pre výškaZariadenia.
vyskaObrazovky
public static int vyskaObrazovky(int zariadenie)
 Alias pre výškaZariadenia.
celáObrazovka
public static boolean celáObrazovka()
Pokúsi sa prepnúť svet do režimu celej obrazovky.
Návratová hodnota:
informuje o úspešnosti operácie – hodnota true
     znamená úspech a false neúspech
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(int), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
oknoCelejObrazovky(), 
zistiZariadenieOkna()
celaObrazovka
public static boolean celaObrazovka()
 Alias pre celáObrazovka.
celáObrazovka
public static boolean celáObrazovka(int zariadenie)
Pokúsi sa prepnúť svet do režimu celej obrazovky na určenom
 zobrazovacom zariadení. Zariadenie je určené jeho poradovým
 číslom (indexom; čiže nula označuje prvé zariadenie).
 
 (Príklad použitia tejto metódy je pri opise metódy
 celáObrazovka(int, boolean).)
Parametre:
zariadenie – číslo zariadenia, ktoré má byť použité
     v režime celej obrazovky
Návratová hodnota:
informuje o úspešnosti operácie – hodnota true
     znamená úspech a false neúspech
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(boolean), 
celáObrazovka(int, boolean), 
oknoCelejObrazovky(), 
zistiZariadenieOkna()
celaObrazovka
public static boolean celaObrazovka(int zariadenie)
 Alias pre celáObrazovka.
celáObrazovka
public static boolean celáObrazovka(boolean celáObrazovka)
Pokúsi sa prepnúť svet do režimu celej obrazovky alebo späť.
Parametre:
celáObrazovka – ak je true, tak má byť režim celej
     obrazovky zapnutý, ak je false, tak má byť režim celej
     obrazovky vypnutý
Návratová hodnota:
informuje o úspešnosti operácie – hodnota true
     znamená úspech a false neúspech
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(int, boolean), 
oknoCelejObrazovky(), 
zistiZariadenieOkna()
celaObrazovka
public static boolean celaObrazovka(boolean celáObrazovka)
 Alias pre celáObrazovka.
celáObrazovka
public static boolean celáObrazovka(int zariadenie,
                                    boolean celáObrazovka)
Pokúsi sa prepnúť svet do režimu celej obrazovky alebo späť
 na určenom zobrazovacom zariadení. Zariadenie je určené jeho
 „poradovým číslom“ (indexom; čiže nula označuje prvé
 zariadenie).
 
 Poznámka: V režime celej obrazovky nie
 je dostupná ponuka, pretože testovanie ukázalo, že v režime celej
 obrazovky spôsobujú všetky „ponukovo orientované“ prvky
 používateľského rozhrania (hlavná ponuka, rozbaľovací zoznam…)
 problémy. Nemali by ste ich preto v režime celej obrazovky
 používať.
  
 Počas prechodu do režimu celej obrazovky sa však automaticky
 aktivuje klávesová skratka Ctrl + W, resp.
 ⌘ + W (Command + W), ktorá bola
 pôvodne naviazaná na položku ponuky a ktorá nesie význam príkazu
 ukončenia aplikácie.
  
 Počas testovania sme tiež zistili, že pri použití hardvérového
 prechodu do režimu celej obrazovky je prinajmenšom na platforme
 Windows automaticky skrytý kurzor myši a jeho viditeľnosť nie
 je možné nijakým spôsobom obnoviť. Pri prechode späť do
 „normálneho“ režimu je viditeľnosť kurzora automaticky obnovená.
 V prípade potreby je možné použiť na zobrazenie polohy kurzora
 niektorý robot, ktorý bude sledovať polohu myši.
 
 Príklad:
 
 
import knižnica.*;
public class TestCelejObrazovky extends GRobot
{
    // Ktoré zariadenie má byť použité v režime celej obrazovky?
    // Nula je predvolené. V hlavnej metóde je úprava tejto hodnoty…
    private static int zariadenie = 0;
    private TestCelejObrazovky()
    {
        // Nastavenie rozmerov plátna podľa rozmerov zariadenia.
        super(Svet.šírkaZariadenia(zariadenie),
            Svet.výškaZariadenia(zariadenie));
        Svet.upevni();
        Svet.celáObrazovka(zariadenie);
    }
    // Obsluha klávesnice (na ukončenie aplikácie).
    @Override public void uvoľnenieKlávesu()
    {
        // Kláves ESC spôsobí vypnutie aplikácie.
        if (ÚdajeUdalostí.kláves(Kláves.ESCAPE))
            Svet.zavrieť();
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        // Je pravdepodobné, že druhé zariadenie je spätný projektor, preto
        // je tu tento test… Toto správanie odporúčame upraviť podľa potrieb.
        if (Svet.početZariadení() &gt; 1) ++zariadenie;
        new TestCelejObrazovky();
    }
}
Parametre:
zariadenie – číslo zariadenia, ktoré má byť použité
     v režime celej obrazovky
celáObrazovka – ak je true, tak má byť režim celej
     obrazovky zapnutý, ak je false, tak má byť režim celej
     obrazovky vypnutý
Návratová hodnota:
informuje o úspešnosti operácie – hodnota true
     znamená úspech a false neúspech
Pozri tiež:
početZariadení(), 
šírkaZariadenia(), 
šírkaZariadenia(int), 
výškaZariadenia(), 
výškaZariadenia(int), 
celáObrazovka(), 
celáObrazovka(int), 
celáObrazovka(boolean), 
oknoCelejObrazovky(), 
zistiZariadenieOkna()
celaObrazovka
public static boolean celaObrazovka(int zariadenie,
                                    boolean celáObrazovka)
 Alias pre celáObrazovka.
oknoCelejObrazovky
public static JFrame oknoCelejObrazovky()
Ak je svet v režime celej obrazovky,
 tak táto metóda vráti inštanciu okna celej
 obrazovky, inak metóda vráti hodnotu null.
Návratová hodnota:
inštancia okna alebo null
Pozri tiež:
celáObrazovka()
zachyťMyš
public static boolean zachyťMyš()
Zachytí kurzor myši v okne sveta. Zmení sa tým správanie udalostí
 pohybu myši a to tak, že od okamihu úspešného zachytenia myši v okne
 bude kurzor myši automaticky presúvaný do stredu okna po každej
 udalosti pohybu alebo
 ťahania myšou
 a aktuálne súradnice polohy
 kurzora myši budú indikovať posledný relatívny posun kurzora od
 tejto polohy (v súlade s tým budú súradnice poslednej polohy
 kurzora myši indikovať predposledný relatívny posun).
 
 Upozornenie: Zachytenie kurzora myši
 vyžaduje permanentý nízkoúrovňový prístup ku kurzoru, aby aplikácia
 mohla viazať jeho polohu k stredu okna. V niektorých prípadoch
 (napríklad z dôvodu obmedzení operačným systémom alebo pri
 prístupe cez vzdialenú správu) aplikácia tento prístup nemá.
 V takom prípade nebude zachytenie kurzora myši fungovať správne.
 
 Tip: Keďže kurzor myši je fixovaný do stredu
 okna sveta. Odporúčame kurzor súčasne s jeho zachytením skryť:
 zmeňKurzorMyši(null).
 
 Príklad:
 
 V tomto príklade je použité zachytenie kurzora myši.
 Prostredie je nastavené tak, že hlavný robot je ovládaný myšou,
 pričom vďaka ohraničeniu a zobrazeniu okna sveta na celej obrazovke
 prechádza cyklicky cez okraje obrazovky.
 
 
import knižnica.*;
public class ZachytenieMyši extends GRobot
{
    private ZachytenieMyši()
    {
        // Nastav rozmery plátna podľa rozmerov obrazovky (resp. tzv. prvého
        // zobrazovacieho zariadenia – prvého monitora):
        super(Svet.šírkaZariadenia(), Svet.výškaZariadenia());
        // Nastav vlastnosti robota:
        ohranič();
        vľavo(30);
        veľkosť(30);
        vypĺňajTvary();
        farba(papierová);
        // Nastav vlastnosti sveta (medzi inými aj zachytenie myši v okne):
        Svet.farbaPozadia(antracitová);
        Svet.zachyťMyš();
        Svet.celáObrazovka(true);
        Svet.zmeňKurzorMyši(null);
    }
    @Override public void pohybMyši()
    {
        // Pohyb robota podľa pohybu myši:
        if (Svet.myšJeZachytená())
            skoč(ÚdajeUdalostí.polohaMyšiX(), ÚdajeUdalostí.polohaMyšiY());
        else
            // Táto vetva zaručí, že keby zachytenie myši zlyhalo,
            // ovládanie bude fungovať relatívne správne:
            skočNa(ÚdajeUdalostí.polohaMyši());
    }
    public static void main(String[] args)
    {
        new ZachytenieMyši();
    }
}
Návratová hodnota:
true v prípade úspešnej operácie
Pozri tiež:
uvoľniMyš(), 
myšJeZachytená()
zachytMys
public static boolean zachytMys()
 Alias pre zachyťMyš.
uvoľniMyš
public static boolean uvoľniMyš()
Zruší zachytenie kurzora myš v okne sveta. Pozri metódu zachyťMyš.
Návratová hodnota:
true v prípade úspešnej operácie
Pozri tiež:
zachyťMyš(), 
myšJeZachytená()
uvolniMys
public static boolean uvolniMys()
 Alias pre uvoľniMyš.
myšJeZachytená
public static boolean myšJeZachytená()
Overí, či je myš zachytená v okne sveta. Pozri metódu zachyťMyš.
Návratová hodnota:
true ak je myš zachytená
Pozri tiež:
zachyťMyš(), 
uvoľniMyš()
mysJeZachytena
public static boolean mysJeZachytena()
 Alias pre myšJeZachytená.
pridajKlávesovúSkratku
public static void pridajKlávesovúSkratku(String príkaz,
                                          int kódKlávesu)
Definuje novú klávesovú skratku s modifikátorom pre ponuky, ktorá
 bude previazaná so zadaným príkazom. Klávesové skratky sú spracúvané
 udalosťou ObsluhaUdalostí.klávesováSkratka, ktorá používa metódu
 ÚdajeUdalostí.príkazSkratky()
 na identifikáciu príkazu.
 
 Táto klávesová skratka je definovaná s predvoleným modifikátorom
 používaným pre klávesové skratky položiek
 ponuky. Ten je závislý od operačného systému, napríklad vo Windows
 je to kláves Ctrl, v macOS (predtým OS X a Mac OS) je to
 kláves ⌘ (Command). Ak chcete definovať
 klávesovú skratku bez modifikátora, použite metódu
 pridajKlávesovúSkratku(príkaz, kódKlávesu, modifikátor)
 s hodnotou modifikátora 0.
 
 Poznámka: Príklad použitia nájdete
 napríklad v opise vnorenej triedy Svet.PríkazovýRiadok.
Parametre:
príkaz – príkaz, ktorý bude previazaný s touto klávesovou
     skratkou
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka (v kombinácii s modifikátorom pre ponuky); môže to byť
     ľubovoľný kód klávesu z triedy Kláves
     (Kláves.HORE, Kláves.VK_X…)
Pozri tiež:
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
pridajKlavesovuSkratku
public static void pridajKlavesovuSkratku(String príkaz,
                                          int kódKlávesu)
 Alias pre pridajKlávesovúSkratku.
pridajKlávesovúSkratku
public static void pridajKlávesovúSkratku(String príkaz,
                                          int kódKlávesu,
                                          int modifikátor)
Definuje novú klávesovú skratku, ktorá bude previazaná so zadaným
 príkazom. Klávesové skratky sú spracúvané udalosťou ObsluhaUdalostí.klávesováSkratka,
 ktorá používa metódu ÚdajeUdalostí.príkazSkratky() na identifikáciu príkazu.
 
 Poznámka: Príklad použitia nájdete
 napríklad v opise vnorenej triedy Svet.PríkazovýRiadok.
Parametre:
príkaz – príkaz, ktorý bude previazaný s touto klávesovou
     skratkou
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka; môže to byť ľubovoľný kód klávesu z triedy
     Kláves (Kláves.HORE,
     Kláves.VK_X…)
modifikátor – klávesový modifikátor tejto skratky (napríklad
     kláves Ctrl – Kláves.CTRL_MASK,
     Shift – Kláves.SHIFT_MASK,
     Alt – Kláves.ALT_MASK…); klávesový modifikátor ponúk, ktorý je
     závislý od operačného systému definuje rezervovaný
     identifikátor Kláves.SKRATKA_PONUKY; klávesovú skratku bez modifikátora je
     možné definovať zadaním hodnoty 0
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
pridajKlavesovuSkratku
public static void pridajKlavesovuSkratku(String príkaz,
                                          int kódKlávesu,
                                          int modifikátor)
 Alias pre pridajKlávesovúSkratku.
pridajKlávesovúSkratku
public static void pridajKlávesovúSkratku(String príkaz,
                                          int kódKlávesu,
                                          int modifikátor,
                                          boolean ajVstupnýRiadok)
Definuje novú klávesovú skratku, ktorá bude previazaná so zadaným
 príkazom. Klávesové skratky sú spracúvané udalosťou ObsluhaUdalostí.klávesováSkratka,
 ktorá používa metódu ÚdajeUdalostí.príkazSkratky() na identifikáciu príkazu.
 
 Niektoré klávesové skratky by mohli spôsobiť obmedzenie
 funkčnosti vstupného riadka, preto táto
 verzia metódy umožňuje nepriradiť túto skratku vstupnému riadku.
 Naopak, v niektorých prípadoch je žiadúce definovať klávesovú
 skratku len pre vstupný riadok. Na tieto prípady je rezervovaný
 samostatná metóda
 pridajKlávesovúSkratkuVstupnéhoRiadka.
 
 Poznámka: Príklad použitia nájdete
 napríklad v opise vnorenej triedy Svet.PríkazovýRiadok.
Parametre:
príkaz – príkaz, ktorý bude previazaný s touto klávesovou
     skratkou
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka; môže to byť ľubovoľný kód klávesu z triedy
     Kláves (Kláves.HORE,
     Kláves.VK_X…)
modifikátor – klávesový modifikátor tejto skratky (napríklad
     kláves Ctrl – Kláves.CTRL_MASK,
     Shift – Kláves.SHIFT_MASK,
     Alt – Kláves.ALT_MASK…); klávesový modifikátor ponúk, ktorý je
     závislý od operačného systému definuje rezervovaný
     identifikátor Kláves.SKRATKA_PONUKY; klávesovú skratku bez modifikátora je
     možné definovať zadaním hodnoty 0
ajVstupnýRiadok – ak si neželáme, aby táto skratka fungovala
     aj vo vstupnom riadku, zadáme false
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
pridajKlavesovuSkratku
public static void pridajKlavesovuSkratku(String príkaz,
                                          int kódKlávesu,
                                          int modifikátor,
                                          boolean ajVstupnýRiadok)
 Alias pre pridajKlávesovúSkratku.
pridajKlávesovúSkratkuVstupnéhoRiadka
public static void pridajKlávesovúSkratkuVstupnéhoRiadka(String príkaz,
                                                         int kódKlávesu,
                                                         int modifikátor)
Definuje novú klávesovú skratku pre vstupný riadok, ktorá bude
 previazaná so zadaným príkazom. Klávesové skratky sú spracúvané
 udalosťou ObsluhaUdalostí.klávesováSkratka, ktorá používa metódu
 ÚdajeUdalostí.príkazSkratky()
 na identifikáciu príkazu.
 
 Toto je doplnková metóda, ktorá umožňuje definovať skupinu
 klávesových skratiek, ktoré budú použiteľné len vo vstupnom riadku.
 Na definovanie klávesových skratiek hlavného okna slúži množina
 metód pridajKlávesovúSkratku.
 
 Upozornenie: Táto metóda odoberie
 prípadnú skratku definovanú pre hlavné okno (t. j. prostredníctvom
 niektorej z metód pridajKlávesovúSkratku) a túto skratku je možné odobrať (rovnako
 ako skratky hlavného okna) volaním metódy odoberKlávesovúSkratku
Parametre:
príkaz – príkaz, ktorý bude previazaný s touto klávesovou
     skratkou
kódKlávesu – kód klávesu, ktorý má byť použitý ako klávesová
     skratka; môže to byť ľubovoľný kód klávesu z triedy
     Kláves (Kláves.HORE,
     Kláves.VK_X…)
modifikátor – klávesový modifikátor tejto skratky (napríklad
     kláves Ctrl – Kláves.CTRL_MASK,
     Shift – Kláves.SHIFT_MASK,
     Alt – Kláves.ALT_MASK…); klávesový modifikátor ponúk, ktorý je
     závislý od operačného systému definuje rezervovaný
     identifikátor Kláves.SKRATKA_PONUKY; klávesovú skratku bez modifikátora je
     možné definovať zadaním hodnoty 0
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
pridajKlavesovuSkratkuVstupnehoRiadka
public static void pridajKlavesovuSkratkuVstupnehoRiadka(String príkaz,
                                                         int kódKlávesu,
                                                         int modifikátor)
 Alias pre pridajKlávesovúSkratkuVstupnéhoRiadka.
odoberKlávesovúSkratku
public static void odoberKlávesovúSkratku(String príkaz)
Odoberie definovanú klávesovú skratku, ktorá je previazaná so
 zadaným príkazom. Príkaz odoberie skratky zo zoznamu skratiek
 hlavného okna aj vstupného riadka.
Parametre:
príkaz – príkaz, ktorý je previazaný s niektorou
     klávesovou skratkou
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
skratkaPríkazu(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
odoberKlavesovuSkratku
public static void odoberKlavesovuSkratku(String príkaz)
 Alias pre odoberKlávesovúSkratku.
skratkaPríkazu
public static KeyStroke skratkaPríkazu(String príkaz)
Táto metóda zistí, aká klávesová skratka je priradená zadanému
 príkazu. Ak taká skratka nejestvuje, metóda vráti hodnotu
 null.
 
 Metóda nedokáže rozlíšiť, či je skratka platná pre hlavné
 okno a/alebo vstupný riadok, preto ak rozlišujete medzi skratkami
 definovanými pre vstupný riadok a hlavné okno, tak odporúčame pre
 nich zvoliť unikátne názvy.
Parametre:
príkaz – príkaz, ktorý by mal byť previazaný s niektorou
     klávesovou skratkou
Návratová hodnota:
objekt typu KeyStroke alebo null
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
reťazecSkratkyPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
skratkaPrikazu
public static KeyStroke skratkaPrikazu(String príkaz)
 Alias pre skratkaPríkazu.
reťazecSkratkyPríkazu
public static String reťazecSkratkyPríkazu(String príkaz)
Táto metóda prevedie definíciu klávesovej skratku, ktorá je
 priradená zadanému príkazu do textovej podoby. Ak taká skratka
 nejestvuje, tak metóda vráti hodnotu null.
 
 Metóda nedokáže rozlíšiť, či je skratka platná pre hlavné
 okno a/alebo vstupný riadok, preto ak rozlišujete medzi skratkami
 definovanými pre vstupný riadok a hlavné okno, tak odporúčame pre
 nich zvoliť unikátne názvy.
Parametre:
príkaz – príkaz, ktorý by mal byť previazaný s niektorou
     klávesovou skratkou
Návratová hodnota:
text klávesovej skratky alebo null
Pozri tiež:
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String), 
skratkyStropu(), 
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean)
retazecSkratkyPrikazu
public static String retazecSkratkyPrikazu(String príkaz)
 Alias pre reťazecSkratkyPríkazu.
skratkyStropu
public static void skratkyStropu(boolean zapnúť)
Zapne alebo vypne fungovanie niekoľkých predvolených skratiek
 vnútornej konzoly stropu. Predvolene sú tieto skratky vypnuté.
 Ide o tieto skratky, z ktorých niektoré sú kombinované
 s predvoleným modifikátorom skratiek ponuky (Ctrl na Windows, ⌘/Command na macOS; tu označené
 ako C) a niektoré s modifikátorom Shift (tu označené ako
 S):
 
 
 Kláves.HOME –
 roluje texty stropu (t. j. jeho konzoly) na začiatok.
 Kláves.END –
 roluje texty stropu na koniec.
 Kláves.HORE –
 roluje texty stropu o riadok vyššie.
 Kláves.DOLE –
 roluje texty stropu o riadok nižšie.
 Kláves.PAGE_UP – roluje texty stropu o stránku
 vyššie.
 Kláves.PAGE_DOWN – roluje texty stropu o stránku
 nižšie.
 C + Kláves.VK_A – označí všetky texty konzoly (stropu).
 Kláves.ESCAPE
 alebo C + S + Kláves.VK_A – zruší označenie
 textov konzoly.
 C + Kláves.VK_C – skopíruje označené texty do schránky.
 
 
 Spolu so skratkami je aktivoavané základné ovládanie myšou:
 kliknutím a ťahaním ľavého tlačidla myši sa dajú označovať texty
 stropu (v súčasnosti je označovanie implementované len po tzv.
 blokoch výpisu) a stlačenie pravého tlačidla myši skopíruje texty
 do schránky a zruší ich označenie (čo je sprevádzané pípnutím).
 Klasicky je staré označenie pri začatí nového ťahania myšou
 zrušené, ak je však pri tom držaný kláves Ctrl, nové
 označenie je pridané k starému.
Parametre:
zapnúť – true, ak majú byť skratky zapnuté,
     false v opačnom
Pozri tiež:
skratkyStropu(), 
skratkyPodlahy(), 
skratkyPodlahy(boolean), 
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String)
skratkyStropu
public static boolean skratkyStropu()
Overí, či sú zapnuté preddefinované skratky stropu. Viac
 detailov je v opise metódy skratkyStropu(zapnúť).
Návratová hodnota:
true, ak sú skratky zapnuté, false
     v opačnom prípade
Pozri tiež:
skratkyStropu(boolean), 
skratkyPodlahy(), 
skratkyPodlahy(boolean), 
pridajKlávesovúSkratku(String, int), 
pridajKlávesovúSkratku(String, int, int), 
pridajKlávesovúSkratku(String, int, int, boolean), 
pridajKlávesovúSkratkuVstupnéhoRiadka(String, int, int), 
odoberKlávesovúSkratku(String), 
skratkaPríkazu(String)
skratkyPodlahy
public static void skratkyPodlahy(boolean zapnúť)
Zapne alebo vypne fungovanie niekoľkých predvolených skratiek
 vnútornej konzoly podlahy. Predvolene sú tieto skratky vypnuté.
 Ide o rovnaké skratky ako v prípade stropu – pozri metódu
 skratkyStropu.
Parametre:
zapnúť – true, ak majú byť skratky zapnuté,
     false v opačnom
Pozri tiež:
skratkyPodlahy(), 
skratkyStropu(), 
skratkyStropu(boolean)
skratkyPodlahy
public static boolean skratkyPodlahy()
Overí, či sú zapnuté preddefinované skratky podlahy. Viac
 detailov je v opise metódy skratkyPodlahy(zapnúť).
Návratová hodnota:
true, ak sú skratky zapnuté, false
     v opačnom prípade
Pozri tiež:
skratkyPodlahy(boolean), 
skratkyStropu(), 
skratkyStropu(boolean)
máVlnenie
public static boolean máVlnenie()
Overí, či má svet definovanú inštanciu vlnenia.
Návratová hodnota:
true ak je inštancia vlnenia definovaná;
     false v opačnom prípade
Pozri tiež:
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
maVlnenie
public static boolean maVlnenie()
 Alias pre máVlnenie.
vlnenie
public static Vlnenie vlnenie()
Vráti inštanciu vlnenia sveta, aby s ňou
 bolo možné ďalej pracovať. Ak svet nemá definované vlnenie, tak
 metóda definuje nové neaktívne vlnenie s predvolenou úrovňou
 útlmu 26. (Overiť to, či je definovaná
 inštancia vlnenia, je možné s pomocou metódy máVlnenie.) Naopak, metóda jestvujúceVlnenie vráti inštanciu vlnenia len v takom prípade,
 že jestvuje. (V opačnom prípade vráti metóda
 jestvujúceVlnenie hodnotu
 null.)
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje v prostredí grafického robota.
 
 Upozornenie: Ak svet grafického
 robota nemá aktívny časovač,
 tak vlnenie nebude fungovať ani po jeho aktivácii. Táto metóda
 nespúšťa časovač (ani vlnenie) automaticky! Účelom
 automatického vytvorenia inštancie vlnenia touto metódou
 v prípade jej neprítomnosti je len zabránenie vzniku chýb.
 Táto metóda nemá nahradiť metódu pridajVlnenie.
Návratová hodnota:
metóda zaručuje vrátenie inštancie Vlnenie
     definovanej pre svet aj v takom prípade, že pred jej
     volaním nebola inštancia definovaná
Pozri tiež:
máVlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujúceVlnenie
public static Vlnenie jestvujúceVlnenie()
Táto metóda vráti inštanciu vlnenia len v prípade, že jestvuje.
 V opačnom prípade vráti hodnotu null, čo môže viesť
 ku vzniku výnimky, ak sa programátor pokúsi použiť vrátenú
 hodnotu bez overenia. Naopak, vrátenie inštancie
 vlnenia aj v prípade, že ešte nebolo
 definované zaručuje metóda vlnenie.
Návratová hodnota:
ak je definovaná inštancia vlnenia,
     tak ju metóda vráti; v opačnom prípade vráti hodnotu
     null
Pozri tiež:
máVlnenie(), 
vlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
jestvujuceVlnenie
public static Vlnenie jestvujuceVlnenie()
 Alias pre jestvujúceVlnenie.
existujúceVlnenie
public static Vlnenie existujúceVlnenie()
 Alias pre jestvujúceVlnenie.
existujuceVlnenie
public static Vlnenie existujuceVlnenie()
 Alias pre jestvujúceVlnenie.
definovanéVlnenie
public static Vlnenie definovanéVlnenie()
 Alias pre jestvujúceVlnenie.
definovaneVlnenie
public static Vlnenie definovaneVlnenie()
 Alias pre jestvujúceVlnenie.
pridajVlnenie
public static void pridajVlnenie()
Pridá alebo zresetuje vlnenie sveta. Ak svet nemá definované
 alebo aktívne vlnenie, tak volanie tejto metódy vytvorí a/alebo
 aktivuje novú inštanciu vlnenia s predvolenou úrovňou útlmu
 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje v prostredí grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public static void pridajVlnenie(boolean ajČasovač)
Pridá alebo zresetuje vlnenie sveta. Ak svet nemá definované
 alebo aktívne vlnenie, tak volanie tejto metódy vytvorí a/alebo
 aktivuje novú inštanciu vlnenia s predvolenou úrovňou útlmu
 26.
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje v prostredí grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením predvolenej
 úrovne útlmu 26.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean), 
odstráňVlnenie()
pridajVlnenie
public static void pridajVlnenie(int útlm)
Pridá alebo zresetuje vlnenie sveta. Ak svet nemá definované
 alebo aktívne vlnenie, tak volanie tejto metódy vytvorí a/alebo
 aktivuje novú inštanciu vlnenia so zadanou úrovňou útlmu (pozri
 aj Vlnenie.útlm(útlm)).
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje v prostredí grafického robota.
 
 Ak by svet grafického robota nemal aktívny
 časovač, tak by vlnenie nemohlo
 fungovať, preto je časovač touto metódou spúšťaný automaticky.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int, boolean), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
pridajVlnenie
public static void pridajVlnenie(int útlm,
                                 boolean ajČasovač)
Pridá alebo zresetuje vlnenie sveta. Ak svet nemá definované
 alebo aktívne vlnenie, tak volanie tejto metódy vytvorí a/alebo
 aktivuje novú inštanciu vlnenia so zadanou úrovňou útlmu (pozri
 aj Vlnenie.útlm(útlm))
 
 Poznámka: Aby mohlo byť vlnenie automaticky
 vykonávané, tak v prípade vytvorenia novej inštancie ju táto
 metóda automaticky registruje v prostredí grafického robota.
 
 Pozor! Ak svet grafického robota nemá
 aktívny časovač, tak vlnenie
 nebude fungovať. Táto metóda dovoľuje určiť, či má alebo nemá
 byť časovač spustený automaticky. Umožňuje to parameter
 ajČasovač.
 
 Inštanciu vlnenia je možné získať a pracovať s ňou s pomocou
 metódy vlnenie alebo jestvujúceVlnenie.
 
 Pozor! Ak vlnenie nie je definované,
 tak metóda vlnenie definuje nové neaktívne
 vlnenie s predvolenou úrovňou útlmu 26. Overiť to, či
 je definovaná inštancia vlnenia, je možné s pomocou metódy
 máVlnenie. Metóda
 jestvujúceVlnenie vráti inštanciu
 vlnenia len v prípade, že jestvuje. V opačnom prípade vráti hodnotu
 null, čo môže viesť ku vzniku výnimky, ak sa
 programátor pokúsi použiť vrátenú hodnotu bez overenia.
 
 Ak už je definovaná inštancia vlnenia, tak ju volanie tejto
 metódy zresetuje upokojením hladiny a nastavením zadanej úrovne
 útlmu.
 (Aktivácia je vykonaná v každom prípade.)
Parametre:
útlm – požadovaná úroveň útlmu vlnenia; odporúčané sú
     hodnoty v rozmedzí 0 – 30; pozri aj Vlnenie.útlm(útlm)
ajČasovač – ak je hodnota tohto parametra rovná
     true, tak je v prípade jeho nečinnosti
     automaticky spustený časovač
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
odstráňVlnenie(), 
Vlnenie.útlm(int)
odstráňVlnenie
public static void odstráňVlnenie()
Ukončí vlnenie sveta a úplne odstráni inštanciu vlnenia,
 ktorá bola pre neho definovaná z prostredia programovacieho
 rámca GRobot.
Pozri tiež:
máVlnenie(), 
vlnenie(), 
jestvujúceVlnenie(), 
pridajVlnenie(), 
pridajVlnenie(boolean), 
pridajVlnenie(int), 
pridajVlnenie(int, boolean)
odstranVlnenie
public static void odstranVlnenie()
 Alias pre odstráňVlnenie.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Tlač.BlokSlov
java.lang.Object
java.util.AbstractCollection&lt;E&gt;
java.util.AbstractList&lt;E&gt;
java.util.Vector&lt;Tlač.RiadokSlov&gt;
Tlač.BlokSlov
Všetky implementované rozhrania:
Serializable, Cloneable, Iterable&lt;Tlač.RiadokSlov&gt;, Collection&lt;Tlač.RiadokSlov&gt;, List&lt;Tlač.RiadokSlov&gt;, RandomAccess
Nadradená trieda:
Tlač
public class Tlač.BlokSlov
extends Vector&lt;Tlač.RiadokSlov&gt;
Táto trieda slúži na uchovanie celého bloku textu rozbitého na nakreslenie.
 
 Blok pozostáva z riadkov a riadky pozostávajú zo slov.
 Rozbitie textu
 na slová môže byť vykonané vopred (s cieľom úpravy/prispôsobenia
 generovaného bloku) alebo automaticky, vnútorne metódou kresliTextDo. Na kreslenie bloku má vplyv hodnota
 tejto premennej: SNR („spojovník na riadku“).
Pozri tiež:
Serializovateľnosť
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
double
riadkovanie
Riadkovanie tohto bloku slov.
Atribúty zdedené z triedy java.util.Vector
capacityIncrement, elementCount, elementData
Atribúty zdedené z triedy java.util.AbstractList
modCount
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
BlokSlov() 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
void
clear()
Odstráni všetky prvky tohto bloku.
double
vyskaRozsahu(Graphics g,
            int začiatok,
            int koniec)
 Alias pre výškaRozsahu.
double
výškaRozsahu(Graphics g,
            int začiatokRozsahu,
            int koniecRozsahu)
Zistí výšku zadaného rozsahu riadkov v pixeloch.
Metódy zdedené z triedy java.util.Vector
add, add, addAll, addAll, addElement, capacity, clone, contains, containsAll, copyInto, elementAt, elements, ensureCapacity, equals, firstElement, forEach, get, hashCode, indexOf, indexOf, insertElementAt, isEmpty, iterator, lastElement, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeAllElements, removeElement, removeElementAt, removeIf, removeRange, replaceAll, retainAll, set, setElementAt, setSize, size, sort, spliterator, subList, toArray, toArray, toString, trimToSize
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.util.Collection
parallelStream, stream
Podrobnosti atribútov
riadkovanie
public double riadkovanie
Riadkovanie tohto bloku slov. Predvolená je hodnota
 1.0. Vyššia hodnota je redšie riadkovanie. Nižšia
 hodnota (medzi 0.0 a 1.0) je hustejšie
 riadkovanie.
Podrobnosti konštruktorov
BlokSlov
public BlokSlov()
Podrobnosti metód
clear
public void clear()
Odstráni všetky prvky tohto bloku. Blok bude po vykonaní
 tejto metódy prázdny (ibaže by vznikla výnimka). Metóda resetuje
 riadkovanie na predvolenú hodnotu 1.0.
Definované:
clear v rozhraní Collection&lt;Tlač.RiadokSlov&gt;
Definované:
clear v rozhraní List&lt;Tlač.RiadokSlov&gt;
Prekrývanie:
táto metóda prekrýva originálnu metódu clear v triede Vector&lt;Tlač.RiadokSlov&gt;
výškaRozsahu
public double výškaRozsahu(Graphics g,
                           int začiatokRozsahu,
                           int koniecRozsahu)
Zistí výšku zadaného rozsahu riadkov v pixeloch. Do rozsahov je
 automaticky zarátané riadkovanie textov podľa výšky riadka
 a medzery pred a za riadkami, ktoré môžu byť individuálne
 nastavované – pozri vlastnosti riadkov definovateľné v rámci
 triedy RiadokSlov.
 
 Výpočet prebieha od prvého indexu (vrátane) po posledný index
 (vynímajúc). Čiže aj sa hodnoty indexov začiatku a konca rozsahu
 rovnajú, výsledok bude nula.
Parametre:
g – grafický kontext, z ktorého bude vypočítaná aktuálna
     výška riadka
začiatokRozsahu – index prvého riadka v rozsahu; ak je
     záporný, vypočíta sa poradové číslo riadka od konca:
     -1 znamená index posledného riadka
koniecRozsahu – index nasledujúci za posledným riadkom
     v rozsahu; ak je záporný, vypočíta sa poradové číslo riadka
     od konca: -1 znamená index za posledným riadkom,
     čiže výpočet bude pokračovať po posledný riadok (vrátane
     posledného riadka)
Návratová hodnota:
výška rozsahu riadkov v pixeloch
vyskaRozsahu
public double vyskaRozsahu(Graphics g,
                           int začiatok,
                           int koniec)
 Alias pre výškaRozsahu.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Trieda Tlač.Fragment
java.lang.Object
Tlač.Fragment
Nadradená trieda:
Tlač
public class Tlač.Fragment
extends Object
Táto trieda slúži na uchovanie fragmentu slova. Cieľom je
 umožniť zmenu paramterov textu na ľuvovoľnom mieste (aj uprostred
 slova). Zoznam fragmentov uložených v triede Slovo
 je považovaný za jedno slovo. (Zoznam triedy Slovo
 však často obsahuje jediný fragment, takže vo väčšine prípadov
 obsah inštancie tejto triedy len jemne rozširuje obsah inštancie
 triedy Slovo.)
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
String
fragment
Znenie tohto fragmentu slova.
Tlač.Parametre
parametre
Parametre (atribúty) tohto textového fragmentu.
int
sirka
 Alias pre šírka.
int
šírka
Šírka tohto fragmentu slova v pixeloch.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Fragment(String fragment,
        int šírka)
Konštruktor fragmentu slova, ktorý neupravuje žiadny atribút
 textu – parametre sú rovné null.
Fragment(String fragment,
        int šírka,
        Tlač.Parametre parametre)
Úplný konštruktor fragmentu slova.
Prehľad metód
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
fragment
public final String fragment
Znenie tohto fragmentu slova.
šírka
public final int šírka
Šírka tohto fragmentu slova v pixeloch. Je vypočítaná podľa
 fontu, ktorý bol aktívny v čase vytvorenia tohto fragmentu.
sirka
public final int sirka
 Alias pre šírka.
parametre
public final Tlač.Parametre parametre
Parametre (atribúty) tohto textového fragmentu. Hodnota
 null znamená, že žiadny z atribútov sa oproti
 predchádzajúcemu fragmentu nezmenil.
Podrobnosti konštruktorov
Fragment
public Fragment(String fragment,
                int šírka)
Konštruktor fragmentu slova, ktorý neupravuje žiadny atribút
 textu – parametre sú rovné null.
Parametre:
fragment – znenie fragmentu slova
šírka – šírka fragmentu slova v pixeloch
Fragment
public Fragment(String fragment,
                int šírka,
                Tlač.Parametre parametre)
Úplný konštruktor fragmentu slova.
Parametre:
fragment – znenie fragmentu slova
šírka – šírka fragmentu slova v pixeloch
parametre – parametre (atribúty) tohto fragmentu textu
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Trieda Tlač.Parametre
java.lang.Object
Tlač.Parametre
Nadradená trieda:
Tlač
public class Tlač.Parametre
extends Object
TODO
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
Color
farba
TODO
Font
font
TODO
int
posun
TODO.
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Parametre(Color farba,
         Font font,
         int posun)
TODO
Prehľad metód
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
farba
public final Color farba
TODO
font
public final Font font
TODO
posun
public final int posun
TODO. Hodnota tohto atribútu má význam relatívnej ??? TODO
Podrobnosti konštruktorov
Parametre
public Parametre(Color farba,
                 Font font,
                 int posun)
TODO
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
Programovací rámec GRobot
Trieda Tlač.RiadokSlov
java.lang.Object
java.util.AbstractCollection&lt;E&gt;
java.util.AbstractList&lt;E&gt;
java.util.Vector&lt;Tlač.Slovo&gt;
Tlač.RiadokSlov
Všetky implementované rozhrania:
Serializable, Cloneable, Iterable&lt;Tlač.Slovo&gt;, Collection&lt;Tlač.Slovo&gt;, List&lt;Tlač.Slovo&gt;, RandomAccess
Nadradená trieda:
Tlač
public class Tlač.RiadokSlov
extends Vector&lt;Tlač.Slovo&gt;
Táto trieda slúži na uchovanie jedného riadka bloku textu
 rozbitého
 na nakreslenie.
 
 Blok pozostáva z riadkov a riadky pozostávajú zo slov.
 Rozbitie textu
 na slová môže byť vykonané vopred (s cieľom úpravy/prispôsobenia
 generovaného bloku) alebo automaticky, vnútorne metódou kresliTextDo. Na kreslenie bloku má vplyv hodnota
 tejto premennej: SNR („spojovník na riadku“).
Pozri tiež:
Serializovateľnosť
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
double
medzeraPred
Medzera, ktorá bude pripočítaná k riadkovaniu pred kreslením
 tohto riadka.
double
medzeraZa
Medzera, ktorá bude pripočítaná k riadkovaniu po kreslení
 tohto riadka.
int
zarovnaj
Spôsob zarovnania tohto riadka.
Atribúty zdedené z triedy java.util.Vector
capacityIncrement, elementCount, elementData
Atribúty zdedené z triedy java.util.AbstractList
modCount
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
RiadokSlov() 
Prehľad metód
Metódy zdedené z triedy java.util.Vector
add, add, addAll, addAll, addElement, capacity, clear, clone, contains, containsAll, copyInto, elementAt, elements, ensureCapacity, equals, firstElement, forEach, get, hashCode, indexOf, indexOf, insertElementAt, isEmpty, iterator, lastElement, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeAllElements, removeElement, removeElementAt, removeIf, removeRange, replaceAll, retainAll, set, setElementAt, setSize, size, sort, spliterator, subList, toArray, toArray, toString, trimToSize
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.util.Collection
parallelStream, stream
Podrobnosti atribútov
zarovnaj
public int zarovnaj
Spôsob zarovnania tohto riadka. Nula znamená na stred, kladné
 hodnoty doprava a záporné doľava. Kladná a záporná jednotka
 znamenajú zarovnanie ku konkrétnemu okraju a dvojky znamenajú
 zarovnanie k obidvom okrajom („do bloku“). Predvolenou hodnotou
 je záporná dvojka, ktorá je automaticky nastavená na zápornú
 jednotku pre riadky, ktoré sú posledné alebo ručne zalomené.
 
 Ak potrebujeme predvolené hodnoty zmeniť, musíme vygenerovať
 blok slov vopred metódou rozbiNaSlová (ktorá
 vracia BlokSlov – čiže blok riadkov) a hodnoty
 zarovnania pri jednotlivých riadkoch upraviť.
medzeraPred
public double medzeraPred
Medzera, ktorá bude pripočítaná k riadkovaniu pred kreslením
 tohto riadka. (Obvyklé je upraviť medzeru prvého riadka odseku,
 ktorá tým reprezentuje medzeru pred odsekom. Pozor, tieto medzery
 sa nijako automaticky nezlučujú, ako je to obvyklé v textových
 procesoroch. Zlučovanie musí byť doriešené dodatočne algoritmicky –
 úpravou hodnôt medzier pred a za konkrétnymi „odsekmi,“ t. j.
 prvými a poslednými riadkami blokov.)
medzeraZa
public double medzeraZa
Medzera, ktorá bude pripočítaná k riadkovaniu po kreslení
 tohto riadka. (Obvyklé je upraviť medzeru posledného riadka
 odseku, ktorá tým reprezentuje medzeru za odsekom. Pozor, tieto
 medzery sa nijako automaticky nezlučujú, ako je to obvyklé
 v textových procesoroch. Zlučovanie musí byť doriešené dodatočne
 algoritmicky – úpravou hodnôt medzier pred a za konkrétnymi
 „odsekmi,“ t. j. prvými a poslednými riadkami blokov.)
Podrobnosti konštruktorov
RiadokSlov
public RiadokSlov()
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metóda
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metóda
var methods = {"i0":10,"i1":10,"i2":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Tlač.Slovo
java.lang.Object
java.util.AbstractCollection&lt;E&gt;
java.util.AbstractList&lt;E&gt;
java.util.Vector&lt;Tlač.Fragment&gt;
Tlač.Slovo
Všetky implementované rozhrania:
Serializable, Cloneable, Iterable&lt;Tlač.Fragment&gt;, Collection&lt;Tlač.Fragment&gt;, List&lt;Tlač.Fragment&gt;, RandomAccess
Nadradená trieda:
Tlač
public class Tlač.Slovo
extends Vector&lt;Tlač.Fragment&gt;
Táto trieda slúži na uchovávanie slov bloku textu, ktorý bol
 rozbitý
 na nakreslenie.
 
 Blok pozostáva z riadkov, riadky pozostávajú zo slov a slová sú
 jemnejšie rozdelené na fragmenty (jeden alebo
 viaceré), ktoré obsahujú atribúty (pomenované ako parametre).
 
 Rozbitie textu
 na slová môže byť vykonané vopred (s cieľom úpravy/prispôsobenia
 generovaného bloku) alebo automaticky, vnútorne metódou kresliTextDo. Na kreslenie bloku má vplyv hodnota
 tejto premennej: SNR („spojovník na riadku“).
Pozri tiež:
Serializovateľnosť
Prehľad atribútov
Atribúty zdedené z triedy java.util.Vector
capacityIncrement, elementCount, elementData
Atribúty zdedené z triedy java.util.AbstractList
modCount
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Slovo(String fragment,
     int šírka)
Konštruktor slova vkladajúci prvý fragment, ktorý neupravuje
 žiadny atribút textu.
Slovo(String fragment,
     int šírka,
     Tlač.Parametre parametre)
Konštruktor slova vkladajúci prvý fragment, ktorý upravuje
 aspoň jeden atribút textu.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
int
sirka()
 Alias pre šírka.
String
slovo()
Textový obsah tohto slova.
int
šírka()
Šírka tohto slova v pixeloch.
Metódy zdedené z triedy java.util.Vector
add, add, addAll, addAll, addElement, capacity, clear, clone, contains, containsAll, copyInto, elementAt, elements, ensureCapacity, equals, firstElement, forEach, get, hashCode, indexOf, indexOf, insertElementAt, isEmpty, iterator, lastElement, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeAllElements, removeElement, removeElementAt, removeIf, removeRange, replaceAll, retainAll, set, setElementAt, setSize, size, sort, spliterator, subList, toArray, toArray, toString, trimToSize
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.util.Collection
parallelStream, stream
Podrobnosti konštruktorov
Slovo
public Slovo(String fragment,
             int šírka)
Konštruktor slova vkladajúci prvý fragment, ktorý neupravuje
 žiadny atribút textu.
 
 Poznámka: Prvý fragment je vo väčšine
 prípadov zároveň jediný fragment, ale korektné slovo musí
 obsahovať aspoň jeden fragment (aj keď to táto trieda
 nekontroluje).
Parametre:
fragment – znenie prvého fragmentu slova
šírka – šírka fragmentu slova v pixeloch
Slovo
public Slovo(String fragment,
             int šírka,
             Tlač.Parametre parametre)
Konštruktor slova vkladajúci prvý fragment, ktorý upravuje
 aspoň jeden atribút textu. Atribúty sú ukladané v inštancii
 triedy Parametre.
 
 Poznámka: Prvý fragment je vo väčšine
 prípadov zároveň jediný fragment, ale korektné slovo musí
 obsahovať aspoň jeden fragment (aj keď to táto trieda
 nekontroluje).
Parametre:
fragment – znenie prvého fragmentu slova
šírka – šírka fragmentu slova v pixeloch
parametre – parametre (atribúty) tohto fragmentu textu
Podrobnosti metód
šírka
public int šírka()
Šírka tohto slova v pixeloch. Je vypočítaná ako suma šírok
 všetkých fragmentov, ktoré toto slovo obsahuje.
Návratová hodnota:
vypočítaná šírka tohto slova (v pixeloch)
sirka
public int sirka()
 Alias pre šírka.
slovo
public String slovo()
Textový obsah tohto slova. Je zostavený ako zlúčenie textových
 obsahov všetkých fragmentov, ktoré toto slovo obsahuje.
Návratová hodnota:
textový obsah tohto slova
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6,"i2":6,"i3":10,"i4":10,"i5":10,"i6":6,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Tlač
java.lang.Object
Tlač
Všetky implementované rozhrania:
Pageable, Printable
Známe priame odvodené triedy:
Tlac
public abstract class Tlač
extends Object
implements Printable, Pageable
Trieda prepájajúca kresliace funkcie robota s rozhraniami tlačového
 výstupu. Prostredníctvom tejto triedy môžete nechať zvolený robot
 tlačiť, pričom (pripomeňme, že) v závislosti od aktuálnych možností
 (a inštalácie) operačného systému môže ísť aj o virtuálnu tlačiareň.
 Napríklad o zachytávač obsahu ukladajúci tlačené objekty do PDF
 dokumentu.
 
 Trieda je abstraktná s jedinou abstraktnou metódou – kresli(strana, formát). V nej má programátor
 implementovať „nakreslenie“ – rendrovanie každej tlačenej strany (podľa
 prijatých parametrov). Je spúšťaná automaticky pre každú tlačenú stranu
 (pozri aj informácie pri metóde print, ktorá je implementáciou rozhrania Printable),
 pričom používateľ nemusí zvoliť tlač všetkých strán, preto musí byť každá
 strana rendrovaná samostatne a principiálne tak, aby výsledok nebol
 skreslený vynechaním tlačenia niektorých strán používateľom (čiže obsah
 každej strany musí byť stabilný bez ohľadu na to, či boli alebo neboli
 vykreslené ostatné strany). To musí mať programátor pri rendrovaní
 strán na pamäti.
 
  
 
 Príklad:
 
 Tento príklad ukazuje tlač dvoch stránok s pomocou nástrojov
 programovacieho rámca.
 
 
import knižnica.*;
import static knižnica.Tlač.cm;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.print.PrintService;
// Test tlače – trieda s vnútornou konkretizáciou abstraktnej triedy Tlač.
public class TestTlače extends GRobot
{
    // Písmo, ktoré použijeme na posledný vykresľovaný odsek ukážky tlače:
    private static Písmo písmo = new Písmo("Cambria", Písmo.NORMÁLNE, 14);
    // Konkretizácia triedy Tlač.
    public Tlač tlač = new Tlač(this, 2)
    {
        public void kresli(int strana, PageFormat formát)
        {
            double rozsahX = formát.getWidth() / 2 – 1.5 * cm;
            double rozsahY = formát.getHeight() / 2 – 1.5 * cm;
            switch (strana)
            {
            case 0:
                // Na prvej strane budú jednoduché tvary rozmiestnené
                // v strede a rohoch.
                pomer(2); // (úprava pomeru strán obdĺžnika a elipsy)
                krúžok(); // (krúžok v strede)
                skočNa(rozsahX, rozsahY); štvorec();   // (štvorec vpravo hore)
                skočNa(-rozsahX, rozsahY); hviezda();  // (hviezda vľavo hore)
                skočNa(rozsahX, -rozsahY); obdĺžnik(); // (obdĺžnik vpravo dole)
                skočNa(-rozsahX, -rozsahY); elipsa();  // (elipsa vľavo dole)
                break;
            case 1:
                // Druhá strana bude obsahovať texty rendrované dvomi spôsobmi.
                // Textová informácia v tretine hornej časti papiera
                // (počítanej od stredu smerom nahor):
                skočNa(0, -rozsahY / 3);
                text("Ukážka tlače… Písmo:");
                odskoč(0.75 * cm);
                text(písmo().getFamily() + ", " + písmo.getSize() + " pt");
                // Zmeníme písmo, vypíšeme jeho vlastnosti do tretiny spodnej
                // časti papiera (opäť počítanej od stredu, ale teraz nadol)…
                písmo(písmo);
                skočNa(0, rozsahY / 3);
                text("^^ " + písmo().getFamily() + ", " +
                    písmo.getSize() + " pt ^^");
                // …a vykreslíme nasledujúci odsek do rámca (rámčeka) so
                // želanými rozmermi (určenými nižšie; poznámka: text je
                // upravený voľný preklad malej časti pôvodného zmysluplného
                // latinského textu, z ktorého vychádza novodobý nezmyselný
                // text Lorem Ipsum):
                String text = "Musím vysvetliť, ako sa celá táto mylná idea " +
                    "o odsúdení potešenia a chvále bolesti zrodila. Nikto " +
                    "neodmieta, nemá rád, ani sa nevyhýba potešeniu, " +
                    "pretože je príjemné, ale tí, ktorí nevedia, ako sa " +
                    "ním dostatočne nasýtiť, narážajú na mimoriadne " +
                    "bolestivé následky. Tiež nikto nemiluje, nevyhľadáva, " +
                    "ani si neželá dobrovoľne zažiť utrpenie, pretože to " +
                    "znamená bolesť, ale niekedy môže prekonanie bolesti " +
                    "a utrpenia priniesť veľké potešenie. Vezmime si " +
                    "triviálny príklad. Kto sa venuje namáhavému fyzickému " +
                    "cvičeniu, získa nielen uznanie. Nikto však nemá právo " +
                    "hľadať chybu v človeku, ktorý si užíva potešenie, " +
                    "ktoré nemá nepríjemné následky.";
                int šírka = (int)rozsahX, výška = (int)(3.5 * cm);
                // (Niekoľko poznámok: Pred kreslením/výstupom textu nakreslíme
                // obdĺžnik, do ktorého bude text kreslený. Meno kresliTextDo
                // musíme „nasmerovať“ na inštanciu robota/testu tlače, lebo
                // predvolene by smerovala do inštancie tlače/triedy Tlač – na
                // jej statickú metódu kresliTextDo. Výška a šírka sú vo vnútri
                // metódy TestTlače.this.kresliTextDo vynásobené dvomi, lebo
                // metóda Tlač.kresliTextDo prijíma celkové rozmery rámca, nie
                // polomery vpísanej elipsy ako mnohé metódy robota.)
                skočNa(0, 2 * rozsahY / 3);
                obdĺžnik(šírka, výška);
                TestTlače.this.kresliTextDo(text, šírka, výška);
                break;
            }
        }
    };
    // Zoznam služieb (virtuálnych, sieťových, lokálnych, prípadne iných
    // tlačiarní).
    private PrintService[] služby;
    // Uzavretie statickej metódy Tlač.kresliTextDo tak, aby komunikovala
    // s aktuálnym robotom a tlačovým rozhraním:
    private int kresliTextDo(String text, int šírka, int výška)
    {
        // Ak chceme použiť robot na externé kreslenie, tak je dôležité
        // použiť dvojicu metód začniKreslenie a skončiKreslenie:
        začniKreslenie();
        // Blok textu rozbijeme na slová vopred, aby sme mohli upraviť
        // jeho vlastnosti (v tomto prípade len jemné zriedenie riadkovania):
        Tlač.BlokSlov blokSlov = tlač.rozbiNaSlová(
            grafika(), text, 2 * šírka);
        blokSlov.riadkovanie = 1.15;
        // Použitie statickej metódy Tlač.kresliTextDo:
        //   • prijíma vopred pripravený blokSlov s ktorým má pracovať,
        //     preto je dôležité, aby bol druhý parameter null,
        //   • objekt grafiky je rovnaký, aký má momentálne nastavený robot
        //     (čo je v prípade tlače kontext nasmerovaný priamo na tlač),
        //   • obdĺžnik, do ktorého sa má text zmestiť je prepočítaný podľa
        //     polohy robota a požadovaných rozmerov (zadaných do parametrov
        //     šírka a výška tejto metódy),
        //   • kreslenie textov presahujúcich spodný okraj obdĺžnika je
        //     zamedzené hodotnou true predposledného parametra (nekresliMimo)
        //   • a začína sa prvým riadkom (index 0 v posledom parametri).
        int i = tlač.kresliTextDo(grafika(), null,
            (int)Svet.prepočítajX(polohaX() – šírka),
            (int)Svet.prepočítajY(polohaY() + výška),
            2 * šírka, 2 * výška, blokSlov, true, 0);
        // (Ukončenie kreslenia robotom – začaté vyššie volaním začniKreslenie.)
        skončiKreslenie();
        return i;
    }
    // Konštruktor.
    private TestTlače()
    {
        veľkosť(0.5 * cm);
        služby = PrinterJob.lookupPrintServices();
        vypíšSlužby();
    }
    // Výpis interaktívneho zoznamu aktuálne dostupných služieb. Kliknutie
    // na písmeno textu služby (tak fungujú aktívne slová vnútornej konzoly;
    // kliknutie ma medzeru je ignorované…) službu aktivuje.
    private void vypíšSlužby()
    {
        Svet.vymažTexty();
        PrintService aktuálnaSlužba = tlač.úloha().getPrintService();
        int i = 0;
        for (PrintService služba : služby)
        {
            if (služba.equals(aktuálnaSlužba))
                Svet.farbaTextu(zelená); else Svet.farbaTextu(modrá);
            // Do aktívneho slova „zakódujeme“ index služby:
            Svet.vypíšAktívneSlovo(i + "", služba.getName());
            Svet.vypíšRiadok();
            ++i;
        }
    }
    // Obsluha kliknutia.
    @Override public void klik()
    {
        // Kliknutie na aktívne slovo (ktoré je v našom prípade index služby)
        // aktivuje prislúchajúcu tlačovú službu.
        String aktívneSlovo = Svet.myšVAktívnomSlove();
        if (null != aktívneSlovo)
        {
            int i = Integer.parseInt(aktívneSlovo);
            try
            {
                tlač.úloha().setPrintService(služby[i]);
                vypíšSlužby();
            }
            catch (PrinterException pe)
            {
                Svet.farbaTextu(červená);
                Svet.vypíšRiadok(pe.getMessage());
            }
        }
        // Pravé tlačidlo na prázdnu plochu aktivuje tlač:
        else if (ÚdajeUdalostí.tlačidloMyši(PRAVÉ))
        {
            if (tlač.tlačDialógom("Ukážka tlače"))
            {
                // Tlač bola vykonaná v poriadku.
                // …
            }
        }
    }
    // Hlavná metóda.
    public static void main(String[] args)
    {
        Svet.použiKonfiguráciu("TestTlače.cfg");
        new TestTlače();
    }
}
 
 Výsledok:
 
 Okno miniaplikácie môže po spustení vyzerať napríklad takto:
 
  Ukážka
 okna s výpisom dostupných tlačových služieb.
 
 Takto by mali vyzerať stránky vytlačeného dokumentu (rozdiel môže byť
 v predvolenom fonte, ktorým sú písané prvé texty „Ukážka tlače… atď.“):
 
 
 Výsledok tlače (
ukážka vo vyššom rozlíšení).
 
  
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
class 
Tlač.BlokSlov
Táto trieda slúži na uchovanie celého bloku textu rozbitého na nakreslenie.
class 
Tlač.Fragment
Táto trieda slúži na uchovanie fragmentu slova.
class 
Tlač.Parametre
TODO
class 
Tlač.RiadokSlov
Táto trieda slúži na uchovanie jedného riadka bloku textu
 rozbitého
 na nakreslenie.
class 
Tlač.Slovo
Táto trieda slúži na uchovávanie slov bloku textu, ktorý bol
 rozbitý
 na nakreslenie.
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static double
cm
Konštanta, násobenie ktorou prepočíta centimetre na tlačové
 body.
static double
inch
Konštanta, násobenie ktorou prepočíta palce na tlačové body.
boolean
SNR
Ak je hodnota tohto atribútu rovná true (predvolene),
 tak sa pri rozbíjaní textu na slová v prípade výskytu klasického spojovníka
 na konci aktuálneho riadka automaticky pridá nový pevný spojovník
 na začiatok nového riadka.
Atribúty zdedené z rozhrania java.awt.print.Printable
NO_SUCH_PAGE, PAGE_EXISTS
Atribúty zdedené z rozhrania java.awt.print.Pageable
UNKNOWN_NUMBER_OF_PAGES
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Tlač(GRobot robot)
Konštruktor vytvárajúci inštanciu tlače, ktorá bude používať
 zadaný robot na kreslenie (rendrovanie) tlačených stránok a ktorá
 obsahuje predvolene jednu stranu.
Tlač(GRobot robot,
    int početStrán)
Konštruktor vytvárajúci inštanciu tlače, ktorá bude používať
 zadaný robot na kreslenie (rendrovanie) tlačených stránok a ktorá
 obsahuje zadaný počet strán.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
abstract Color
dajFarbu(Graphics2D g2d,
        CharSequence chs,
        int poloha)
Metóda určená na prekrytie.
abstract Font
dajFont(Graphics2D g2d,
       CharSequence chs,
       int poloha)
Metóda určená na prekrytie.
abstract int
dajPosun(Graphics2D g2d,
        CharSequence chs,
        int poloha)
Metóda určená na prekrytie.
int
getNumberOfPages()
 Alias pre početStrán.
PageFormat
getPageFormat(int pageIndex)
Súčasť implementácie rozhrania Pageable.
Printable
getPrintable(int pageIndex)
Súčasť implementácie rozhrania Pageable.
abstract void
kresli(int strana,
      PageFormat formát)
Metóda určená na prekrytie.
int
kresliTextDo(Graphics g,
            CharSequence chs,
            int x,
            int y,
            int šírka,
            int výška,
            Tlač.BlokSlov blokSlov,
            boolean nekresliMimo,
            int začniRiadkom)
Rendruje text na grafický kontext do priestoru zadaného rámčeka.
PageFormat
nastavenieStrany()
Vráti inštanciu predvolených nastavení strany (PageFormat), ktorá je (predvolene) používaná na tie strany, ktoré to
 nemajú určené inak: pozri prekryteľnú metódu nastavenieStrany(strana).
PageFormat
nastavenieStrany(int strana)
Táto metóda je určená na prekrytie.
void
nastavenieStrany(PageFormat nastavenieStrany)
Zamení inštanciu PageFormat, ktorá je používaná
 na predvolené nastavenia strany.
Obrazok
obrazok()
 Alias pre obrázok.
Obrazok
obrázok()
Vráti referenčný obrázok, ktorého obsah vzniká ako vedľajší
 produkt kreslenia robotom počas rendrovania stránok tlače alebo
 null, ak ešte tlač nebola spustená.
double[]
okraje()
Zistí okraje predvolenej strany.
void
okraje(double ľavý,
      double horný,
      double pravý,
      double spodný)
Zmení okraje predvolenej strany.
int
pocetStran()
 Alias pre početStrán.
void
pocetStran(int početStrán)
 Alias pre početStrán.
int
početStrán()
Vráti aktuálny počet strán tejto inštancie tlače.
void
početStrán(int početStrán)
Nastaví nový počet strán tejto inštancie tlače.
int
print(Graphics g,
     PageFormat pf,
     int page)
Implementácia rozhrania Printable.
Tlač.BlokSlov
rozbiNaSlova(Graphics g,
            CharSequence chs,
            int šírkaRiadka)
 Alias pre rozbiNaSlová.
Tlač.BlokSlov
rozbiNaSlová(Graphics g,
            CharSequence chs,
            int šírkaRiadka)
Rozbije zadaný text do bloku textu podľa metriky aktuálneho
 fontu zadaného grafického kontextu.
boolean
tlac()
 Alias pre tlač.
boolean
tlac(String názovDokumentu)
 Alias pre tlač.
boolean
tlacDialogom()
 Alias pre tlačDialógom.
boolean
tlacDialogom(String názovDokumentu)
 Alias pre tlačDialógom.
boolean
tlač()
Pokúsi sa spustiť proces tlače (dokumentu).
boolean
tlač(String názovDokumentu)
Pokúsi sa spustiť proces tlače dokumentu (tejto inštancie),
 pričom dokumentu nastaví zadaný názov.
boolean
tlačDialógom()
Pokúsi sa spustiť proces tlače dokumentu s vyvolaním systémového
 tlačového dialógu pred samotným procesom tlače.
boolean
tlačDialógom(String názovDokumentu)
Pokúsi sa spustiť proces tlače dokumentu (tejto inštancie)
 s vyvolaním systémového tlačového dialógu pred samotným procesom
 tlače, pričom dokumentu nastaví zadaný názov.
PrinterJob
uloha()
 Alias pre úloha.
PrinterJob
úloha()
Vráti aktuálnu tlačovú úlohu (PrinterJob) tejto
 inštancie tlače.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti atribútov
inch
public static final double inch
Konštanta, násobenie ktorou prepočíta palce na tlačové body.
 
 Príklad: Výsledkom 1.0 * Tlač.inch bude posun v bodoch ekvivalentný
 jednému palcu.
 
 Poznámka: Prirodzene, delenie touto
 konštantou prepočíta body na palce.)
Pozri tiež:
Hodnoty konštánt
cm
public static final double cm
Konštanta, násobenie ktorou prepočíta centimetre na tlačové
 body.
 
 Príklad: Výsledkom 1.0 * Tlač.cm bude posun v bodoch ekvivalentný
 jednému centimetru.
 
 Poznámka: Prirodzene, delenie touto
 konštantou prepočíta body na centimetre.
Pozri tiež:
Hodnoty konštánt
SNR
public boolean SNR
Ak je hodnota tohto atribútu rovná true (predvolene),
 tak sa pri rozbíjaní textu na slová v prípade výskytu klasického spojovníka
 na konci aktuálneho riadka automaticky pridá nový pevný spojovník
 na začiatok nového riadka.
Podrobnosti konštruktorov
Tlač
public Tlač(GRobot robot)
Konštruktor vytvárajúci inštanciu tlače, ktorá bude používať
 zadaný robot na kreslenie (rendrovanie) tlačených stránok a ktorá
 obsahuje predvolene jednu stranu.
 
 Robot je s touto inštanciou tlače spárovaný a vždy pred
 rendrovaním strany automaticky nastavený podľa kontextu.
Parametre:
robot – kresliaci robot používaný na rendrovanie obsahu strán
Pozri tiež:
Tlač(GRobot, int), 
kresli(int, PageFormat), 
print(Graphics, PageFormat, int)
Tlač
public Tlač(GRobot robot,
            int početStrán)
Konštruktor vytvárajúci inštanciu tlače, ktorá bude používať
 zadaný robot na kreslenie (rendrovanie) tlačených stránok a ktorá
 obsahuje zadaný počet strán.
 
 Robot je s touto inštanciou tlače spárovaný a vždy pred
 rendrovaním strany automaticky nastavený podľa kontextu.
Parametre:
robot – kresliaci robot používaný na rendrovanie obsahu strán
početStrán – počet strán dokumentu
Pozri tiež:
Tlač(GRobot), 
kresli(int, PageFormat), 
print(Graphics, PageFormat, int)
Podrobnosti metód
print
public final int print(Graphics g,
                       PageFormat pf,
                       int page)
                throws PrinterException
Implementácia rozhrania Printable. V tejto metóde
 sú prepojené všetky vlastnosti tejto triedy: metóda je automaticky
 cyklicky spúšťaná po úspešnom zahájení tlače,
 kedy na základe špecifikovaného počtu strán
 zaháji „kreslenie“ (rendrovanie)
 každej strany – pričom musí byť použitý ten kresliaci robot, ktorý bol
 zadaný do konštruktora tejto inštancie (inak
 by tlač nefungovala).
 
 Upozornenie: Na rendrovanie strán
 musí byť využitý presne ten robot, ktorý bol zadaný do
 konštruktora tejto inštancie tlače.
 Pokus o využitie iného robota zlyhá, pretože pri tlači je dôležité,
 aby mal grafický robot nasmerované kreslenie do správneho grafického
 kontextu (Graphics), čo sa deje automaticky na
 pozadí pre robota, ktorý je spárovaný s touto tlačou. 
 
 Poznámka: Používateľ nemusí pri zahájení
 tlače zvoliť vytlačenie všetkých strán, preto musí byť zaručené,
 aby každá strana mohla byť vyrendrovaná samostatne – bez ohľadu na
 to, či bol obsah ostatných strán vykreslený, alebo nie. Toto musí mať
 programátor pri rendrovaní strán na pamäti. Ideálne je už pri
 plánovaní implementácie tlače navrhnúť rendrovanie strán tak, aby
 mohla byť každá strana v ľubovoľnom čase vyrendrovaná izolovane od
 ostatných strán.
 
 Táto metóda je finálna (neprekryteľná), lebo jej neúmyselným
 prekrytím by sa narušil celý princíp tlače tohto rámca. Využíva
 vnútorné mechanizmy programovacieho rámca na korektné nastavenie
 všetkých objektov.
Definované:
print v rozhraní Printable
Parametre:
g – grafický kontext na tlač (je generovaný automaticky systémom
     tlače Javy)
pf – formát strany (tiež je priraďovaný automaticky podľa iných
     nastavení – pozri napríklad metódu #nastavenieStrany(strana)); tento parameter je odovzdaný do
     metódy kresli
page – číslo strany – cyklicky sa mení podľa toho, aký rozsah
     tlače bol zvolený; tento parameter je odovzdaný do metódy kresli
Návratová hodnota:
táto hodnota je automaticky odovzdávaná systému tlače Javy
     a je buď PAGE_EXISTS, alebo NO_SUCH_PAGE – podľa toho, či systém tlače
     požadoval rendrovanie jestvujúcej strany (programátor používajúci
     programovací rámec sa týmto princípom nemusí zaoberať, pretože
     metóda kresli je automaticky
     spúšťaná len pre tie strany, ktoré majú byť vytlačené a ktoré majú
     jestvovať – v súlade s aktuálnym počtom
     strán)
Výnimky:
PrinterException
Pozri tiež:
Tlač(GRobot), 
Tlač(GRobot, int), 
kresli(int, PageFormat)
getNumberOfPages
public final int getNumberOfPages()
 Alias pre početStrán. (Súčasť implementácie rozhrania Pageable.)
Definované:
getNumberOfPages v rozhraní Pageable
getPageFormat
public PageFormat getPageFormat(int pageIndex)
Súčasť implementácie rozhrania Pageable. Vráti
 nastavenie (formát) požadovanej strany. Ak strana nejestvuje, tak je
 vrátené predvolené nastavenie strany (čiže táto implementácia
 negeneruje výnimky).
 
 Poznámka: S nastaveniami strany je to
 komplikovanejšie. Slovo v tomto procese má tlačová služba, ktorá
 preferuje také nastavenie strany, ktoré je kompatibilné s tlačiarňou,
 čiže ak tlačiareň (môže byť aj virtuálna) tlačí len strany formátu
 A4, vždy bude výsledkom tlače tento formát. Nastavenia strany, ktoré
 sa pokúsite zmeniť budú prispôsobené tomuto formátu. 
Definované:
getPageFormat v rozhraní Pageable
Parametre:
pageIndex – index strany, ktorej nastavenie (formát) má byť
     vrátené (je generovaný automaticky v rozsahu tlačených strán)
Návratová hodnota:
nastavenie určenej strany, pričom pre neexistujúce strany je
     vrátené predvolené nastavenie
getPrintable
public Printable getPrintable(int pageIndex)
Súčasť implementácie rozhrania Pageable. Táto
 implementácia vracia pre všetky strany (vrátane neexistujúcich) túto
 (aktuálnu) inštanciu triedy Tlač (čiže samú seba).
Definované:
getPrintable v rozhraní Pageable
Parametre:
pageIndex – index strany (je ignorovaný)
Návratová hodnota:
táto inštancia tlače
úloha
public PrinterJob úloha()
Vráti aktuálnu tlačovú úlohu (PrinterJob) tejto
 inštancie tlače. Úloha môže byť použitá na konfiguráciu a rôzne
 aktivity pripravujúce tlač.
Návratová hodnota:
aktuálna tlačová úloha (PrinterJob) tejto
     inštancie
uloha
public PrinterJob uloha()
 Alias pre úloha.
početStrán
public int početStrán()
Vráti aktuálny počet strán tejto inštancie tlače.
Návratová hodnota:
aktuálny počet strán tejto inštancie tlače
Pozri tiež:
početStrán(), 
kresli(int, PageFormat)
pocetStran
public int pocetStran()
 Alias pre početStrán.
početStrán
public void početStrán(int početStrán)
Nastaví nový počet strán tejto inštancie tlače. Zadaná hodnota môže
 byť ľubovoľné celé číslo – záporné hodnoty majú rovnaký význam ako
 nula.
 
 Poznámka: Je teoreticky možné využiť záporné
 hodnoty na uchovanie rôznych chybových stavov, ale treba vopred
 dostatočne dobre zvážiť, či by to neprinieslo komplikácie alebo rôzne
 nepredvídateľné dôsledky. Rozhodnutie ponechávame na autorov softvéru
 vytváraného s pomocou tohto rámca.
Parametre:
početStrán – nový počet strán tejto inštancie tlače
Pozri tiež:
početStrán(int), 
kresli(int, PageFormat)
pocetStran
public void pocetStran(int početStrán)
 Alias pre početStrán.
okraje
public double[] okraje()
Zistí okraje predvolenej strany. Údaje sú vrátené v tlačových
 bodoch a na prepočet jednotiek sa dá použiť delenie konštantami:
 inch alebo cm. (Pozri aj informácie uvedené
 pri párujúcej metóde: okraje.)
Návratová hodnota:
štvorica hodnôt určujúcich okraje predvolených nastavení
     strany tejto inštancie tlače (v tlačových bodoch)
Pozri tiež:
okraje(double, double, double, double), 
nastavenieStrany(), 
nastavenieStrany(PageFormat), 
nastavenieStrany(int)
okraje
public void okraje(double ľavý,
                   double horný,
                   double pravý,
                   double spodný)
Zmení okraje predvolenej strany. Údaje sú zadávané v tlačových
 bodoch. Na zmenu jednotiek použite násobenie konštantou inch alebo cm. Priestor za hranicami okrajov nebude
 zahrnutý do tlačového výstupu.
Parametre:
ľavý – ľavý   okraj strany (v tlačových bodoch)
horný – horný  okraj strany (v tlačových bodoch)
pravý – pravý  okraj strany (v tlačových bodoch)
spodný – spodný okraj strany (v tlačových bodoch)
Pozri tiež:
okraje(), 
nastavenieStrany(), 
nastavenieStrany(PageFormat), 
nastavenieStrany(int)
nastavenieStrany
public PageFormat nastavenieStrany()
Vráti inštanciu predvolených nastavení strany (PageFormat), ktorá je (predvolene) používaná na tie strany, ktoré to
 nemajú určené inak: pozri prekryteľnú metódu nastavenieStrany(strana).
 
 Poznámka: S nastaveniami strany je to
 komplikovanejšie. Slovo v tomto procese má tlačová služba, ktorá
 preferuje také nastavenie strany, ktoré je kompatibilné s tlačiarňou,
 čiže ak tlačiareň (môže byť aj virtuálna) tlačí len strany formátu
 A4, vždy bude výsledkom tlače tento formát. Nastavenia strany, ktoré
 sa pokúsite zmeniť budú prispôsobené tomuto formátu. 
Návratová hodnota:
vráti inštanciu predvolených nastavení strany (PageFormat)
Pozri tiež:
nastavenieStrany(PageFormat), 
nastavenieStrany(int), 
okraje(), 
okraje(double, double, double, double)
nastavenieStrany
public void nastavenieStrany(PageFormat nastavenieStrany)
Zamení inštanciu PageFormat, ktorá je používaná
 na predvolené nastavenia strany.
 
 Poznámka: S nastaveniami strany je to
 komplikovanejšie. Slovo v tomto procese má tlačová služba, ktorá
 preferuje také nastavenie strany, ktoré je kompatibilné s tlačiarňou,
 čiže ak tlačiareň (môže byť aj virtuálna) tlačí len strany formátu
 A4, vždy bude výsledkom tlače tento formát. Nastavenia strany, ktoré
 sa pokúsite zmeniť budú prispôsobené tomuto formátu. 
Parametre:
nastavenieStrany – nové predvolené nastavenie strany (PageFormat)
Pozri tiež:
nastavenieStrany(), 
nastavenieStrany(int), 
okraje(), 
okraje(double, double, double, double)
nastavenieStrany
public PageFormat nastavenieStrany(int strana)
Táto metóda je určená na prekrytie. Jej predvolená verzia vracia
 hodnotu null pre všetky strany.
 
 Prekrytá verzia tejto metódy môže obsahovať úpravu nastavenia
 každej (individuálnej) strany (rozlišovanej podľa parametra strana. Upravené nastavenie musí byť vrátené ako inštancia triedy
 PageFormat.
 
 Ak metóda nechce zmeniť nastavenie pre určitú stranu, tak musí
 vrátiť hodnotu null (v tom prípade sa použije predvolené
 nastavenie strany). Predvolené nastavenie strany sa dá získať
 volaním metódy nastavenieStrany (bez
 parametra).
 
 Poznámka: S nastaveniami strany je to
 komplikovanejšie. Slovo v tomto procese má tlačová služba, ktorá
 preferuje také nastavenie strany, ktoré je kompatibilné s tlačiarňou,
 čiže ak tlačiareň (môže byť aj virtuálna) tlačí len strany formátu
 A4, vždy bude výsledkom tlače tento formát. Nastavenia strany, ktoré
 sa pokúsite zmeniť budú prispôsobené tomuto formátu. 
Parametre:
strana – poradové číslo kreslenej (tlačenej) strany
Návratová hodnota:
vlastné nastavenie strany alebo null.
Pozri tiež:
nastavenieStrany(), 
nastavenieStrany(PageFormat), 
okraje(), 
okraje(double, double, double, double), 
kresli(int, PageFormat)
obrázok
public Obrazok obrázok()
Vráti referenčný obrázok, ktorého obsah vzniká ako vedľajší
 produkt kreslenia robotom počas rendrovania stránok tlače alebo
 null, ak ešte tlač nebola spustená. Obrázok je pomocný
 objekt tlače, ktorý má zabrániť vzniku chýb v dôsledku chýbajúceho
 rastra, ale pri procese tlače nie je priamo využívaný. Obsah obrázka
 sa môže líšiť od reálneho obsahu tlačených stránok, ale za
 štandardných okolností by mal obsahovať rastrový obraz naposledy
 vytlačenej strany, pretože obsah tohto obrázka je pred tlačou novej
 strany vždy vymazaný (a ak je na tlač využívaný len konkrétny robot,
 tak by sa všetko malo premietať do tohto obrázka). Táto inštancia
 obrázka nemá byť použitá na kreslenie (nemalo by to zmysel). Je
 vhodná napríklad na zistenie rozmerov aktuálne tlačenej strany
 (pričom jeden pixel je zhruba jeden tlačový bod) počas jej
 kreslenia, prípadne
 (v prípade vhodných okolností) na získanie rastrového obrazu naposledy
 vytlačenej strany (na informatívne účely).
 
 Táto metóda môže po vykonaní rôznych tlačových úloh vrátiť odlišný
 objekt. Vráti vždy objekt obrázka použitý pri poslednej tlačenej
 strane, pričom rozmery tohto obrázka sú určené podľa nastavení tejto
 strany PageFormat). Všetky vytvorené inštancie
 obrázkov sú vnútorne ukladané a recyklované podľa potreby (pri stranách
 s rovnakými rozmermi je použitá tá istá inštancia).
Návratová hodnota:
inštancia referenčného obrázka použiteľného napríklad na
     overenie (prípadne obmedzenie) polohy robota na strate pri
     rendrovaní (kreslení) tlačených strán
obrazok
public Obrazok obrazok()
 Alias pre obrázok.
kresli
public abstract void kresli(int strana,
                            PageFormat formát)
Metóda určená na prekrytie. V jej tele má byť zabezpečené
 „nakreslenie“ – vyrendrovanie strany so zadaným číslom. Číslo je
 v rozmedzí od 0 po (nie vrátane) počet
 strán. Na kreslenie bude využitý robot zadaný do konštruktora tejto inštancie.
 
 Upozornenie: Na rendrovanie strán
 musí byť využitý presne ten robot, ktorý bol zadaný do
 konštruktora tejto inštancie tlače.
 Pokus o využitie iného robota zlyhá, pretože pri tlači je dôležité,
 aby mal grafický robot nasmerované kreslenie do správneho grafického
 kontextu (Graphics), čo sa deje automaticky na
 pozadí pre robota, ktorý je spárovaný s touto tlačou. 
 
 Poznámka: Používateľ nemusí pri zahájení
 tlače zvoliť vytlačenie všetkých strán, preto musí byť zaručené,
 aby každá strana mohla byť vyrendrovaná samostatne – bez ohľadu na
 to, či bol obsah ostatných strán vykreslený, alebo nie. Toto musí mať
 programátor pri rendrovaní strán na pamäti. Ideálne je už pri
 plánovaní implementácie tlače navrhnúť rendrovanie strán tak, aby
 mohla byť každá strana v ľubovoľnom čase vyrendrovaná izolovane od
 ostatných strán.
Parametre:
strana – poradové číslo kreslenej (tlačenej) strany
formát – nastavenie kreslenej (tlačenej) strany
Pozri tiež:
početStrán(), 
početStrán(int), 
nastavenieStrany(int), 
Tlač(GRobot), 
Tlač(GRobot, int), 
print(Graphics, PageFormat, int)
dajFarbu
public abstract Color dajFarbu(Graphics2D g2d,
                               CharSequence chs,
                               int poloha)
Metóda určená na prekrytie. Táto metóda je volaná metódou rozbiNaSlová v prípade
 výskytu špeciálneho riadiaceho znaku (ASCII 1), ktorý má v tomto
 prípade význam „zmeň atribúty.“ Prijíma takmer rovnaké parametre ako
 metóda rozbiNaSlová
 s výnimkou posledného, ktorý v prípade tejto metódy značí aktuálnu
 polohu spracovania sekvencie znakov. Návratovou hodnotou tejto metódy
 je buď nová farba textu, alebo hodnota null, ktorá znamená,
 že farba textu nebude zmenená. V sekvencii sú za sebou volané tieto
 tri metódy:
 
 
 dajFarbu (táto metóda)
 dajFont
 dajPosun
 
 
 Ich účel je obdobný, len v prípade poslednej nahrádza význam
 hodnoty null číselná hodnota 0.
Parametre:
g – grafický kontext
chs – reťazec na rozbitie
poloha – aktuálna poloha spracovania reťazca chs
Návratová hodnota:
nová farba textu alebo null
Pozri tiež:
dajFarbu(Graphics2D g2d, CharSequence chs, int poloha), 
dajFont(Graphics2D g2d, CharSequence chs, int poloha), 
dajPosun(Graphics2D g2d, CharSequence chs, int poloha)
dajFont
public abstract Font dajFont(Graphics2D g2d,
                             CharSequence chs,
                             int poloha)
Metóda určená na prekrytie. Táto metóda je volaná metódou rozbiNaSlová v prípade
 výskytu špeciálneho riadiaceho znaku (ASCII 1), ktorý má v tomto
 prípade význam „zmeň atribúty.“ Prijíma takmer rovnaké parametre ako
 metóda rozbiNaSlová
 s výnimkou posledného, ktorý v prípade tejto metódy značí aktuálnu
 polohu spracovania sekvencie znakov. Návratovou hodnotou tejto metódy
 je buď nový font platný pre ďalší text, alebo hodnota null,
 ktorá znamená, že font sa nemení. V sekvencii sú za sebou volané tieto
 tri metódy:
 
 
 dajFarbu
 dajFont (táto metóda)
 dajPosun
 
 
 Ich účel je obdobný, len v prípade poslednej nahrádza význam
 hodnoty null číselná hodnota 0.
Parametre:
g – grafický kontext
chs – reťazec na rozbitie
poloha – aktuálna poloha spracovania reťazca chs
Návratová hodnota:
nový font alebo null
Pozri tiež:
dajFarbu(Graphics2D g2d, CharSequence chs, int poloha), 
dajFont(Graphics2D g2d, CharSequence chs, int poloha), 
dajPosun(Graphics2D g2d, CharSequence chs, int poloha)
dajPosun
public abstract int dajPosun(Graphics2D g2d,
                             CharSequence chs,
                             int poloha)
Metóda určená na prekrytie. Táto metóda je volaná metódou rozbiNaSlová v prípade
 výskytu špeciálneho riadiaceho znaku (ASCII 1), ktorý má v tomto
 prípade význam „zmeň atribúty.“ Prijíma takmer rovnaké parametre ako
 metóda rozbiNaSlová
 s výnimkou posledného, ktorý v prípade tejto metódy značí aktuálnu
 polohu spracovania sekvencie znakov. Návratovou hodnotou tejto metódy
 je zmena vertikálnej polohy text na riadku. Logicky, 0
 znamená, že poloha textu sa nemení. V sekvencii sú za sebou volané
 tieto tri metódy:
 
 
 dajFarbu
 dajFont
 dajPosun (táto metóda)
 
Parametre:
g – grafický kontext
chs – reťazec na rozbitie
poloha – aktuálna poloha spracovania reťazca chs
Návratová hodnota:
posunutie textov na riadku
Pozri tiež:
dajFarbu(Graphics2D g2d, CharSequence chs, int poloha), 
dajFont(Graphics2D g2d, CharSequence chs, int poloha), 
dajPosun(Graphics2D g2d, CharSequence chs, int poloha)
rozbiNaSlová
public Tlač.BlokSlov rozbiNaSlová(Graphics g,
                                  CharSequence chs,
                                  int šírkaRiadka)
Rozbije zadaný text do bloku textu podľa metriky aktuálneho
 fontu zadaného grafického kontextu.
 Text je rozbíjaný podľa maximálnej šírky (pravého okraja), ktorú môže
 dosiahnuť na riadku. Vrátený blok môže byť prispôsobený (napríklad
 mu môže byť upravené riadkovanie) a je pripravený na rendrovanie
 s pomocou metódy kresliTextDo (spúšťanej
 s rovnakým grafickým kontextom a rovnakým nastavením fontu, inak bude
 výsledok nepredvídateľný).
 
 Táto metóda môže byť spúšťaná automaticky metódou kresliTextDo – pozri informácie v jej opise.
Parametre:
g – grafický kontext
chs – reťazec na rozbitie
šírka – maximálna šírka textu na riadku
Návratová hodnota:
blok textu rozbitého na riadky a slová
rozbiNaSlova
public Tlač.BlokSlov rozbiNaSlova(Graphics g,
                                  CharSequence chs,
                                  int šírkaRiadka)
 Alias pre rozbiNaSlová.
kresliTextDo
public int kresliTextDo(Graphics g,
                        CharSequence chs,
                        int x,
                        int y,
                        int šírka,
                        int výška,
                        Tlač.BlokSlov blokSlov,
                        boolean nekresliMimo,
                        int začniRiadkom)
Rendruje text na grafický kontext do priestoru zadaného rámčeka.
 Parametre rendrovania relatívne podrobne určujú parametre tejto
 metódy. Vhodnou kombináciou ich hodnôt a opakovaným volaním tejto
 metódy s hodnotami, ktoré sa vzájomne dopĺňajú sa dosiahnuť napríklad
 rendrovanie jedného vopred rozbitého bloku do viacerých rôznych rámčekov
 (napríklad pre text prekračujúci rozhranie strán). Užitočná je pri tom
 návratová hodnota tejto metódy, ktorá určuje index prvého riadka, ktorý
 presiahol požadovanú výšku bloku (zadanú v parametri výška),
 pričom návratová hodnota -1 znamená, že táto situácia
 nenastala.
 
 
 
 
Parametre:
g – grafický kontext kreslenia textu; jeho font ovplyvňuje rozbíjanie textu
     na slová
chs – text, ktorý má byť automaticky rozbitý na slová
     podľa rozmerov rámčeka (parametre šírka a výška)
     alebo hodnota null – pozri aj parameter blokSlov
x – ľavá súradnica rámčeka kreslenia bloku textu
y – horná súradnica rámčeka kreslenia bloku textu
šírka – šírka rámčeka kreslenia bloku textu
výška – výška rámčeka kreslenia bloku textu
blokSlov – tento parameter (ak nie je null) buď
     obsahuje jestvujúce rozbitie slov, ktoré má byť použité na
     vykreslenie bloku textu – v tom prípade musí byť parameter
     chs rovný null ((Graphics, CharSequence, int) rozbitie musí byť vykonané s tou
     istou konfiguráciou grafického objektu Graphics,
     ktorá je zadaná do prvého parametra g – najlepšie s tou
     istou inštanciou, ktorej nebol medzitým zmenený font; inak môže
     byť výsledok nepredvídateľný), alebo sa do neho uloží rozbitie na slová
     aktuálneho parametra chs (na ďalšie použitie)
nekresliMimo – príznak určujúci, že kreslenie textu sa má zastaviť
     po prekročení spodnej hranice rámčeka
začniRiadkom – index riadka, ktorým sa má kreslenie bloku textu
     začať; toto je využiteľné pri blokoch, ktorých kreslenie má byť
     rozdelené do viacerých rámčekov s rozdielnou výškou (šírka musí
     byť rovnaká, inak bude výsledok nepredvídateľný)
Návratová hodnota:
index prvého riadka, ktorý presiahol požadovanú výšku bloku
     (zadanú v parametri výška); hodnota -1 znamená,
     že táto situácia nenastala
tlač
public boolean tlač()
Pokúsi sa spustiť proces tlače (dokumentu).
Návratová hodnota:
ak bola tlač spustená, tak true, inak
     false
Pozri tiež:
tlač(String), 
tlačDialógom(), 
tlačDialógom(String)
tlac
public boolean tlac()
 Alias pre tlač.
tlač
public boolean tlač(String názovDokumentu)
Pokúsi sa spustiť proces tlače dokumentu (tejto inštancie),
 pričom dokumentu nastaví zadaný názov.
Parametre:
názovDokumentu – názov tlačeného dokumentu
Návratová hodnota:
ak bola tlač spustená, tak true, inak
     false
Pozri tiež:
tlač(), 
tlačDialógom(), 
tlačDialógom(String)
tlac
public boolean tlac(String názovDokumentu)
 Alias pre tlač.
tlačDialógom
public boolean tlačDialógom()
Pokúsi sa spustiť proces tlače dokumentu s vyvolaním systémového
 tlačového dialógu pred samotným procesom tlače. Ak je dialóg
 používateľom zrušený, tlač nie je spustená.
Návratová hodnota:
ak bola tlač spustená, tak true, inak
     false (pri zrušení dialógu alebo chybe spustenia tlače)
Pozri tiež:
tlač(), 
tlač(String), 
tlačDialógom(String)
tlacDialogom
public boolean tlacDialogom()
 Alias pre tlačDialógom.
tlačDialógom
public boolean tlačDialógom(String názovDokumentu)
Pokúsi sa spustiť proces tlače dokumentu (tejto inštancie)
 s vyvolaním systémového tlačového dialógu pred samotným procesom
 tlače, pričom dokumentu nastaví zadaný názov. Ak je dialóg
 používateľom zrušený, tlač nie je spustená.
Parametre:
názovDokumentu – názov tlačeného dokumentu
Návratová hodnota:
ak bola tlač spustená, tak true, inak
     false (pri zrušení dialógu alebo chybe spustenia tlače)
Pozri tiež:
tlač(), 
tlač(String), 
tlačDialógom()
tlacDialogom
public boolean tlacDialogom(String názovDokumentu)
 Alias pre tlačDialógom.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Tlačidlo
java.lang.Object
java.awt.Component
java.awt.Container
javax.swing.JComponent
javax.swing.AbstractButton
javax.swing.JButton
Tlačidlo
Všetky implementované rozhrania:
ImageObserver, ItemSelectable, MenuContainer, Serializable, Accessible, SwingConstants, Poloha, Rozmer
Známe priame odvodené triedy:
Tlacidlo
public class Tlačidlo
extends JButton
implements Poloha, Rozmer
Trieda Tlačidlo dovoľuje vytvárať v aplikácii používajúcej
 programovací rámec robota tlačidlá, ktoré sú zobrazované nad plátnom (avšak
 nie sú jeho súčasťou). Každé nové tlačidlo je automaticky umiestnené
 na súradnice stredu plátna s predvolenými rozmermi 108 × 32 bodov
 (šírka × výška).
 
 Poznámka: Tlačidlá používajú súradnicový priestor
 rámca a používajú pri tom vlastný zabudovaný mechanizmus, preto na
 manipuláciu s polohou a rozmermi tlačidiel používajte metódy
 definované v tejto triede, ako: polohaX, polohaY, šírka, výška…, nie
 zdedené metódy setLocation,
 setSize…
 
 Na obsluhu tlačidiel je určená metóda ObsluhaUdalostí.voľbaTlačidla. Jej využitie ukazuje nasledujúci príklad:
 
 
// Vytvoríme tlačidlá, ktorými budeme ovládať robot
// (Poznámka: Predpokladáme, že tento kód je umiestnený
// v konštruktore hlavného robota…)
final Tlačidlo tlačidloDopredu = new Tlačidlo("Dopredu");
final Tlačidlo tlačidloDozadu = new Tlačidlo("Dozadu");
final Tlačidlo tlačidloVpravo = new Tlačidlo("Vpravo");
final Tlačidlo tlačidloVľavo = new Tlačidlo("Vľavo");
// Rozmiestnime tlačidlá v ľavom hornom rohu tesne pod seba
tlačidloDopredu.prilepVľavo();
tlačidloDopredu.prilepHore();
tlačidloDozadu.prilepVľavo();
tlačidloDozadu.prilepHore();
tlačidloDozadu.poloha(tlačidloDopredu);
tlačidloDozadu.skoč(0, &#45;tlačidloDopredu.výška());
tlačidloVpravo.prilepVľavo();
tlačidloVpravo.prilepHore();
tlačidloVpravo.poloha(tlačidloDozadu);
tlačidloVpravo.skoč(0, &#45;tlačidloDozadu.výška());
tlačidloVľavo.prilepVľavo();
tlačidloVľavo.prilepHore();
tlačidloVľavo.poloha(tlačidloVpravo);
tlačidloVľavo.skoč(0, &#45;tlačidloVpravo.výška());
// Definujeme obsluhu udalostí
new ObsluhaUdalostí()
{
    @Override public void voľbaTlačidla()
    {
        if (ÚdajeUdalostí.tlačidlo() == tlačidloDopredu)
            dopredu(10);
        else if (ÚdajeUdalostí.tlačidlo() == tlačidloDozadu)
            dozadu(10);
        else if (ÚdajeUdalostí.tlačidlo() == tlačidloVpravo)
            vpravo(10);
        else if (ÚdajeUdalostí.tlačidlo() == tlačidloVľavo)
            vľavo(10);
    }
};
 
 Výsledok:
 
 
 Ukážka nakreslenia
 jednoduchej lomenejčiary s pomocou robota ovládaného
 tlačidlami(plátno ukážky je zmenšené).
Pozri tiež:
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JButton
JButton.AccessibleJButton
Vnorené triedy/rozhrania odvodené od triedy javax.swing.AbstractButton
AbstractButton.AccessibleAbstractButton, AbstractButton.ButtonChangeListener
Vnorené triedy/rozhrania odvodené od triedy javax.swing.JComponent
JComponent.AccessibleJComponent
Vnorené triedy/rozhrania odvodené od triedy java.awt.Container
Container.AccessibleAWTContainer
Vnorené triedy/rozhrania odvodené od triedy java.awt.Component
Component.AccessibleAWTComponent, Component.BaselineResizeBehavior, Component.BltBufferStrategy, Component.FlipBufferStrategy
Prehľad atribútov
Atribúty zdedené z triedy javax.swing.AbstractButton
actionListener, BORDER_PAINTED_CHANGED_PROPERTY, CONTENT_AREA_FILLED_CHANGED_PROPERTY, DISABLED_ICON_CHANGED_PROPERTY, DISABLED_SELECTED_ICON_CHANGED_PROPERTY, FOCUS_PAINTED_CHANGED_PROPERTY, HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY, HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY, changeEvent, changeListener, ICON_CHANGED_PROPERTY, itemListener, MARGIN_CHANGED_PROPERTY, MNEMONIC_CHANGED_PROPERTY, model, MODEL_CHANGED_PROPERTY, PRESSED_ICON_CHANGED_PROPERTY, ROLLOVER_ENABLED_CHANGED_PROPERTY, ROLLOVER_ICON_CHANGED_PROPERTY, ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY, SELECTED_ICON_CHANGED_PROPERTY, TEXT_CHANGED_PROPERTY, VERTICAL_ALIGNMENT_CHANGED_PROPERTY, VERTICAL_TEXT_POSITION_CHANGED_PROPERTY
Atribúty zdedené z triedy javax.swing.JComponent
listenerList, TOOL_TIP_TEXT_KEY, ui, UNDEFINED_CONDITION, WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, WHEN_FOCUSED, WHEN_IN_FOCUSED_WINDOW
Atribúty zdedené z triedy java.awt.Component
accessibleContext, BOTTOM_ALIGNMENT, CENTER_ALIGNMENT, LEFT_ALIGNMENT, RIGHT_ALIGNMENT, TOP_ALIGNMENT
Atribúty zdedené z rozhrania Poloha
stred
Atribúty zdedené z rozhrania javax.swing.SwingConstants
BOTTOM, CENTER, EAST, HORIZONTAL, LEADING, LEFT, NEXT, NORTH, NORTH_EAST, NORTH_WEST, PREVIOUS, RIGHT, SOUTH, SOUTH_EAST, SOUTH_WEST, TOP, TRAILING, VERTICAL, WEST
Atribúty zdedené z rozhrania java.awt.image.ImageObserver
ABORT, ALLBITS, ERROR, FRAMEBITS, HEIGHT, PROPERTIES, SOMEBITS, WIDTH
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Tlačidlo(Image obrázok)
Konštruktor obrázkového tlačidla.
Tlačidlo(Image obrázok,
        Image obrázokStlačeného)
Konštruktor obrázkového tlačidla s odlišným obrázkom v stlačenom
 stave.
Tlačidlo(Image obrázok,
        String text)
Konštruktor textového tlačidla s obrázkom.
Tlačidlo(String text)
Konštruktor textového tlačidla.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
aktivne()
 Alias pre aktívne.
boolean
aktívne()
Overí, či je tlačidlo aktívne.
boolean
aktivovane()
 Alias pre aktivované.
boolean
aktivované()
Overí, či bola toto tlačidlo naposledy aktivované (zvolené).
void
aktivuj()
Aktivuje tlačidlo.
void
deaktivuj()
Deaktivuje tlačidlo.
Farba
farbaPozadia()
 Číta farbu pozadia tlačidla.
void
farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 tlačidla podľa zadanej farebnej inštancie.
void
farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia tlačidla podľa zadaného objektu.
Farba
farbaPozadia(int r,
            int g,
            int b)
Nastaví farbu pozadia tlačidla podľa zadaných farebných zložiek.
Farba
farbaPozadia(int r,
            int g,
            int b,
            int a)
Nastaví farbu a (ne)priehľadnosť pozadia tlačidla podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
Farba
farbaTextu()
 Zistí aktuálnu farbu textu tlačidla.
void
farbaTextu(Color nováFarba)
 Nastav farbu textu tlačidla.
void
farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu tlačidla podľa zadaného objektu.
Farba
farbaTextu(int r,
          int g,
          int b)
Nastaví farbu textu tlačidla podľa zadaných farebných zložiek.
Farba
farbaTextu(int r,
          int g,
          int b,
          int a)
Nastaví farbu a (ne)priehľadnosť textu tlačidla podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
boolean
jeNa(double x,
    double y)
Overí, či sa poloha tohto tlačidla dokonale zhoduje so zadanými
 súradnicami.
boolean
jeNa(Poloha poloha)
Overí, či sa poloha tohto tlačidla a poloha zadaného objektu
 dokonale zhodujú.
boolean
maRozmer(double šírka,
        double výška)
 Alias pre máRozmer.
boolean
máRozmer(double šírka,
        double výška)
Overí, či sa rozmery tlačidla dokonale zhodujú so zadanými
 rozmermi.
boolean
maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
boolean
máRozmer(Rozmer rozmer)
Overí, či sa rozmery tlačidla a rozmery zadaného objektu
 dokonale zhodujú.
boolean
maSirku(double šírka)
 Alias pre máŠírku.
boolean
máŠírku(double šírka)
Zistí, či má tlačidlo zadanú šírku.
boolean
maVysku(double výška)
 Alias pre máVýšku.
boolean
máVýšku(double výška)
Zistí, či má tlačidlo zadanú výšku.
int
medzeraMedziObrazkomATextom()
 Alias pre medzeraMedziObrázkomATextom.
int
medzeraMedziObrázkomATextom()
 Zistí aktuálu veľkosť medzery medzi
 obrázkom a textom zobrazenými v tomto tlačidle.
void
medzeraMedziObrazkomATextom(int medzera)
 Alias pre medzeraMedziObrázkomATextom.
void
medzeraMedziObrázkomATextom(int medzera)
 Ak má toto tlačidlo nastavený obrázok aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
int
mnemonickaSkratka()
 Alias pre mnemonickáSkratka.
int
mnemonickáSkratka()
 Zistí aktuálny kód mnemonickej skratky
 nastavenej pre toto tlačidlo.
void
mnemonickaSkratka(int mnemonickáSkratka)
 Alias pre mnemonickáSkratka.
void
mnemonickáSkratka(int mnemonickáSkratka)
 Dovoľuje nastaviť tlačidlu mnemonickú
 skratku.
void
obnovDekor()
Obnoví dekor tlačidla pôvodne určený aktuálne použitým L&F (Look
 and Feel, v našom prípade používame L&F zhodný s dizajnom
 ovládacích prvkov operačného systému).
Obrazok
obrazok()
 Alias pre obrázok.
Obrázok
obrázok()
Vráti základný obrázok tlačidla alebo null ak tlačidlo
 nemá priradený obrázok, ktorý bol vytvorený z inštancie typu
 Obrázok.
void
obrazok(Image obrázok)
 Alias pre obrázok.
void
obrázok(Image obrázok)
Nastaví alebo odstráni obrázok tlačidla.
void
obrazok(String súbor)
 Alias pre obrázok.
void
obrázok(String súbor)
Nastaví alebo odstráni obrázok tlačidla.
Obrazok
obrazokDeaktivovaneho()
 Alias pre obrázokDeaktivovaného.
Obrázok
obrázokDeaktivovaného()
Vráti obrázok deaktivovaného tlačidla
 alebo null ak tlačidlo nemá definovaný obrázok pre
 deaktivovaný stav, ktorý bol vytvorený z inštancie typu
 Obrázok.
void
obrazokDeaktivovaneho(Image obrázok)
 Alias pre obrázokDeaktivovaného.
void
obrázokDeaktivovaného(Image obrázok)
Nastaví alebo odstráni obrázok deaktivovaného tlačidla.
void
obrazokDeaktivovaneho(String súbor)
 Alias pre obrázokDeaktivovaného.
void
obrázokDeaktivovaného(String súbor)
Nastaví alebo odstráni obrázok deaktivovaného tlačidla.
Obrazok
obrazokDeaktivovanehoOznaceneho()
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrazokDeaktivovanehoOznaceneho(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrazokDeaktivovanehoOznaceneho(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
Obrázok
obrázokDeaktivovanéhoOznačeného()
Vráti obrázok deaktivovaného a označeného tlačidla alebo null ak tlačidlo
 nemá definovaný obrázok pre túto kombináciu stavov, ktorý by bol
 vytvorený z inštancie typu Obrázok.
void
obrázokDeaktivovanéhoOznačeného(Image obrázok)
Nastaví alebo odstráni obrázok tlačidla, ktoré je zároveň
 deaktivované a označeného.
void
obrázokDeaktivovanéhoOznačeného(String súbor)
Nastaví alebo odstráni obrázok tlačidla, ktoré je zároveň
 deaktivované a označeného.
Obrazok
obrazokOznaceneho()
 Alias pre obrázokOznačeného.
void
obrazokOznaceneho(Image obrázok)
 Alias pre obrázokOznačeného.
void
obrazokOznaceneho(String súbor)
 Alias pre obrázokOznačeného.
Obrazok
obrazokOznacenehoDeaktivovaneho()
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrazokOznacenehoDeaktivovaneho(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrazokOznacenehoDeaktivovaneho(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
Obrázok
obrázokOznačeného()
Vráti obrázok označeného tlačidla alebo
 null ak tlačidlo nemá definovaný obrázok pre označený
 stav, ktorý bol vytvorený z inštancie typu Obrázok.
void
obrázokOznačeného(Image obrázok)
Nastaví alebo odstráni obrázok označeného
 tlačidla.
void
obrázokOznačeného(String súbor)
Nastaví alebo odstráni obrázok označeného
 tlačidla.
Obrázok
obrázokOznačenéhoDeaktivovaného()
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrázokOznačenéhoDeaktivovaného(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
void
obrázokOznačenéhoDeaktivovaného(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
Obrazok
obrazokStlaceneho()
 Alias pre obrázokStlačeného.
void
obrazokStlaceneho(Image obrázok)
 Alias pre obrázokStlačeného.
void
obrazokStlaceneho(String súbor)
 Alias pre obrázokStlačeného.
Obrázok
obrázokStlačeného()
Vráti obrázok stlačeného tlačidla alebo null ak
 tlačidlo nemá definovaný obrázok pre stlačený stav, ktorý bol
 vytvorený z inštancie typu Obrázok.
void
obrázokStlačeného(Image obrázok)
Nastaví alebo odstráni obrázok stlačeného tlačidla.
void
obrázokStlačeného(String súbor)
Nastaví alebo odstráni obrázok stlačeného tlačidla.
void
odlep()
Odlepí tlačidlo od všetkých okrajov.
void
odznac()
 Alias pre odznač.
void
odznač()
Zruší označenie tlačidla.
void
oznac()
 Alias pre označ.
boolean
oznacene()
 Alias pre označené.
void
označ()
Označí tlačidlo.
boolean
označené()
Overí, či je tlačidlo označené.
Pismo
pismo()
 Alias pre písmo.
Písmo
písmo()
 Číta aktuálny typ písma textu tlačidla.
void
pismo(Font novéPísmo)
 Alias pre písmo.
void
písmo(Font novéPísmo)
 Nastaví nový typ písma textu tlačidla.
Pismo
pismo(String názov,
     double veľkosť)
 Alias pre písmo.
Písmo
písmo(String názov,
     double veľkosť)
Nastaví nový typ písma textu tlačidla.
Bod
poloha()
Vráti aktuálnu polohu tlačidla.
void
poloha(double x,
      double y)
Presunie tlačidlo na zadané súradnice x, y.
void
poloha(Poloha objekt)
Presunie tlačidlo na súradnice zadaného objektu.
double
polohaX()
 Zistí aktuálnu x-ovú súradnicu polohy
 tlačidla.
void
polohaX(double novéX)
 Presunie tlačidlo na zadanú súradnicu
 v smere x.
double
polohaY()
 Zistí aktuálnu y-ovú súradnicu polohy
 tlačidla.
void
polohaY(double novéY)
 Presunie tlačidlo na zadanú súradnicu
 v smere y.
void
prilepDole()
Prilepí tlačidlo k dolnému okraju.
void
prilepHore()
Prilepí tlačidlo k hornému okraju.
void
prilepVlavo()
 Alias pre prilepVľavo.
void
prilepVľavo()
Prilepí tlačidlo k ľavému okraju.
void
prilepVpravo()
Prilepí tlačidlo k pravému okraju.
String[]
riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tomuto tlačidlu priradený
 v textovej forme.
Rozmer
rozmery()
Zistí aktuálne rozmery tlačidla.
void
rozmery(double nováŠírka,
       double nováVýška)
Nastaví nové rozmery tlačidla.
void
rozmery(Rozmer rozmer)
Nastaví nové rozmery tlačidla podľa zadanej implementácie
 rozmeru.
void
setVisible(boolean visible)
Prekrytie originálnej metódy.
double
sirka()
 Alias pre šírka.
void
sirka(double nováŠírka)
 Alias pre šírka.
void
skoc(double Δx,
    double Δy)
 Alias pre skoč.
void
skocNa(double x,
      double y)
 Alias pre poloha.
void
skocNa(Poloha objekt)
 Alias pre poloha.
void
skoč(double Δx,
    double Δy)
Presunie tlačidlo o zadaný počet bodov v horizontálnom
 a vertikálnom smere.
void
skočNa(double x,
      double y)
 Alias pre poloha.
void
skočNa(Poloha objekt)
 Alias pre poloha.
Skript
skript()
Vráti skript priradený k tomuto tlačidlu alebo null,
 ak k tlačidlu nebol priradený žiadny skript.
void
skript(Skript skript)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení.
void
skript(String skript)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení.
void
skript(String[] riadky)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení.
void
skry()
Skryje tlačidlo.
double
suradnicaX()
 Alias pre polohaX.
double
súradnicaX()
 Alias pre polohaX.
void
suradnicaX(double novéX)
 Alias pre polohaX.
void
súradnicaX(double novéX)
 Alias pre polohaX.
double
suradnicaY()
 Alias pre polohaY.
double
súradnicaY()
 Alias pre polohaY.
void
suradnicaY(double novéY)
 Alias pre polohaY.
void
súradnicaY(double novéY)
 Alias pre polohaY.
double
šírka()
 Zistí aktuálnu šírku tlačidla.
void
šírka(double nováŠírka)
 Zmení šírku tlačidla.
String
text()
 Prečíta aktuálny text tlačidla.
void
text(String text)
 Nastaví nový text tlačidla.
boolean
viditelne()
 Alias pre viditeľné.
boolean
viditeľné()
Zistí, či je tlačidlo viditeľné (zobrazené) alebo nie.
double
vyska()
 Alias pre výška.
void
vyska(double nováVýška)
 Alias pre výška.
double
výška()
 Zistí aktuálnu výšku tlačidla.
void
výška(double nováVýška)
 Zmení výšku tlačidla.
void
zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
void
zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia tlačidla.
void
zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
void
zdedenáFarbaTextu()
Nastaví zdedenú farbu textu tlačidla.
void
zobraz()
Zobrazí tlačidlo.
boolean
zobrazene()
 Alias pre zobrazené.
boolean
zobrazené()
Zistí, či je tlačidlo viditeľné (zobrazené) alebo nie.
void
zrusDekor()
 Alias pre zrušDekor.
void
zrusOznacenie()
 Alias pre zrušOznačenie.
void
zrušDekor()
Zruší dekor tlačidla určený aktuálne použitým L&F (Look and Feel,
 v našom prípade používame L&F zhodný s dizajnom ovládacích prvkov
 operačného systému).
void
zrušOznačenie()
Zruší označenie tlačidla.
boolean
zvolene()
 Alias pre aktivované.
boolean
zvolené()
 Alias pre aktivované.
Metódy zdedené z triedy javax.swing.JButton
getAccessibleContext, getUIClassID, isDefaultButton, isDefaultCapable, paramString, removeNotify, setDefaultCapable, updateUI
Metódy zdedené z triedy javax.swing.AbstractButton
actionPropertyChanged, addActionListener, addChangeListener, addImpl, addItemListener, configurePropertiesFromAction, createActionListener, createActionPropertyChangeListener, createChangeListener, createItemListener, doClick, doClick, fireActionPerformed, fireItemStateChanged, fireStateChanged, getAction, getActionCommand, getActionListeners, getDisabledIcon, getDisabledSelectedIcon, getDisplayedMnemonicIndex, getHideActionText, getHorizontalAlignment, getHorizontalTextPosition, getChangeListeners, getIcon, getIconTextGap, getItemListeners, getLabel, getMargin, getMnemonic, getModel, getMultiClickThreshhold, getPressedIcon, getRolloverIcon, getRolloverSelectedIcon, getSelectedIcon, getSelectedObjects, getText, getUI, getVerticalAlignment, getVerticalTextPosition, checkHorizontalKey, checkVerticalKey, imageUpdate, init, isBorderPainted, isContentAreaFilled, isFocusPainted, isRolloverEnabled, isSelected, paintBorder, removeActionListener, removeChangeListener, removeItemListener, setAction, setActionCommand, setBorderPainted, setContentAreaFilled, setDisabledIcon, setDisabledSelectedIcon, setDisplayedMnemonicIndex, setEnabled, setFocusPainted, setHideActionText, setHorizontalAlignment, setHorizontalTextPosition, setIcon, setIconTextGap, setLabel, setLayout, setMargin, setMnemonic, setMnemonic, setModel, setMultiClickThreshhold, setPressedIcon, setRolloverEnabled, setRolloverIcon, setRolloverSelectedIcon, setSelected, setSelectedIcon, setText, setUI, setVerticalAlignment, setVerticalTextPosition
Metódy zdedené z triedy javax.swing.JComponent
addAncestorListener, addNotify, addVetoableChangeListener, computeVisibleRect, contains, createToolTip, disable, enable, firePropertyChange, firePropertyChange, firePropertyChange, fireVetoableChange, getActionForKeyStroke, getActionMap, getAlignmentX, getAlignmentY, getAncestorListeners, getAutoscrolls, getBaseline, getBaselineResizeBehavior, getBorder, getBounds, getClientProperty, getComponentGraphics, getComponentPopupMenu, getConditionForKeyStroke, getDebugGraphicsOptions, getDefaultLocale, getFontMetrics, getGraphics, getHeight, getInheritsPopupMenu, getInputMap, getInputMap, getInputVerifier, getInsets, getInsets, getListeners, getLocation, getMaximumSize, getMinimumSize, getĎalšieFocusableComponent, getPopupLocation, getPreferredSize, getRegisteredKeyStrokes, getRootPane, getSize, getToolTipLocation, getToolTipText, getToolTipText, getTopLevelAncestor, getTransferHandler, getVerifyInputWhenFocusTarget, getVetoableChangeListeners, getVisibleRect, getWidth, getX, getY, grabFocus, hide, isDoubleBuffered, isLightweightComponent, isManagingFocus, isOpaque, isOptimizedDrawingEnabled, isPaintingForPrint, isPaintingOrigin, isPaintingTile, isRequestFocusEnabled, isValidateRoot, paint, paintComponent, paintChildren, paintImmediately, paintImmediately, print, printAll, printBorder, printComponent, printChildren, processComponentKeyEvent, processKeyBinding, processKeyEvent, processMouseEvent, processMouseMotionEvent, putClientProperty, registerKeyboardAction, registerKeyboardAction, removeAncestorListener, removeVetoableChangeListener, repaint, repaint, requestDefaultFocus, requestFocus, requestFocus, requestFocusInWindow, requestFocusInWindow, resetKeyboardActions, reshape, revalidate, scrollRectToVisible, setActionMap, setAlignmentX, setAlignmentY, setAutoscrolls, setBackground, setBorder, setComponentPopupMenu, setDebugGraphicsOptions, setDefaultLocale, setDoubleBuffered, setFocusTraversalKeys, setFont, setForeground, setInheritsPopupMenu, setInputMap, setInputVerifier, setMaximumSize, setMinimumSize, setĎalšieFocusableComponent, setOpaque, setPreferredSize, setRequestFocusEnabled, setToolTipText, setTransferHandler, setUI, setVerifyInputWhenFocusTarget, unregisterKeyboardAction, update
Metódy zdedené z triedy java.awt.Container
add, add, add, add, add, addContainerListener, addPropertyChangeListener, addPropertyChangeListener, applyComponentOrientation, areFocusTraversalKeysSet, countComponents, deliverEvent, doLayout, findComponentAt, findComponentAt, getComponent, getComponentAt, getComponentAt, getComponentCount, getComponents, getComponentZOrder, getContainerListeners, getFocusTraversalKeys, getFocusTraversalPolicy, getLayout, getMousePosition, insets, invalidate, isAncestorOf, isFocusCycleRoot, isFocusCycleRoot, isFocusTraversalPolicyProvider, isFocusTraversalPolicySet, layout, list, list, locate, minimumSize, paintComponents, preferredSize, printComponents, processContainerEvent, processEvent, remove, remove, removeAll, removeContainerListener, setComponentZOrder, setFocusCycleRoot, setFocusTraversalPolicy, setFocusTraversalPolicyProvider, transferFocusDownCycle, validate, validateTree
Metódy zdedené z triedy java.awt.Component
action, add, addComponentListener, addFocusListener, addHierarchyBoundsListener, addHierarchyListener, addInputMethodListener, addKeyListener, addMouseListener, addMouseMotionListener, addMouseWheelListener, bounds, coalesceEvents, contains, createImage, createImage, createVolatileImage, createVolatileImage, disableEvents, dispatchEvent, enable, enableEvents, enableInputMetódy, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, firePropertyChange, getBackground, getBounds, getColorModel, getComponentListeners, getComponentOrientation, getCursor, getDropTarget, getFocusCycleRootAncestor, getFocusListeners, getFocusTraversalKeysEnabled, getFont, getForeground, getGraphicsConfiguration, getHierarchyBoundsListeners, getHierarchyListeners, getIgnoreRepaint, getInputContext, getInputMethodListeners, getInputMethodRequests, getKeyListeners, getLocale, getLocation, getLocationOnScreen, getMouseListeners, getMouseMotionListeners, getMousePosition, getMouseWheelListeners, getName, getParent, getPeer, getPropertyChangeListeners, getPropertyChangeListeners, getSize, getToolkit, getTreeLock, gotFocus, handleEvent, hasFocus, checkImage, checkImage, inside, isBackgroundSet, isCursorSet, isDisplayable, isEnabled, isFocusable, isFocusOwner, isFocusTraversable, isFontSet, isForegroundSet, isLightweight, isMaximumSizeSet, isMinimumSizeSet, isPreferredSizeSet, isShowing, isValid, isVisible, keyDown, keyUp, list, list, list, location, lostFocus, mouseDown, mouseDrag, mouseEnter, mouseExit, mouseMove, mouseUp, move, nextFocus, paintAll, postEvent, prepareImage, prepareImage, processComponentEvent, processFocusEvent, processHierarchyBoundsEvent, processHierarchyEvent, processInputMethodEvent, processMouseWheelEvent, remove, removeComponentListener, removeFocusListener, removeHierarchyBoundsListener, removeHierarchyListener, removeInputMethodListener, removeKeyListener, removeMouseListener, removeMouseMotionListener, removeMouseWheelListener, removePropertyChangeListener, removePropertyChangeListener, repaint, repaint, repaint, resize, resize, setBounds, setBounds, setComponentOrientation, setCursor, setDropTarget, setFocusable, setFocusTraversalKeysEnabled, setIgnoreRepaint, setLocale, setLocation, setLocation, setName, setSize, setSize, show, show, size, toString, transferFocus, transferFocusBackward, transferFocusUpCycle
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Podrobnosti konštruktorov
Tlačidlo
public Tlačidlo(String text)
Konštruktor textového tlačidla.
 Vytvorí tlačidlo umiestnené v strede plátna s predvolenými
 rozmermi 108 × 32 bodov a zadaným textom tlačidla.
Parametre:
text – text tlačidla
Pozri tiež:
Tlačidlo(Image), 
Tlačidlo(Image, Image), 
Tlačidlo(Image, String), 
text(String)
Tlačidlo
public Tlačidlo(Image obrázok)
Konštruktor obrázkového tlačidla. Vytvorí tlačidlo umiestnené
 v strede plátna s rozmermi a tvarom zadaného obrázka.
Parametre:
obrázok – obrázok tlačidla
Pozri tiež:
Tlačidlo(String), 
Tlačidlo(Image, Image), 
Tlačidlo(Image, String), 
obrázok(Image)
Tlačidlo
public Tlačidlo(Image obrázok,
                Image obrázokStlačeného)
Konštruktor obrázkového tlačidla s odlišným obrázkom v stlačenom
 stave. Vytvorí tlačidlo umiestnené v strede plátna s rozmermi
 obrázka určeného pre nestlačený stav (prvý parameter) a vzhľadom
 určeným zadanými obrázkami pre normálny a stlačený stav.
Parametre:
obrázok – obrázok tlačidla v normálnom (nestlačenom) stave
obrázokStlačeného – obrázok stlačeného tlačidla
Pozri tiež:
Tlačidlo(String), 
Tlačidlo(Image), 
Tlačidlo(Image, String), 
obrázok(Image)
Tlačidlo
public Tlačidlo(Image obrázok,
                String text)
Konštruktor textového tlačidla s obrázkom.
 Vytvorí tlačidlo umiestnené v strede plátna s predvolenými
 rozmermi 108 × 32 bodov a so zadaným obrázkom vedľa textu
 tlačidla.
Parametre:
obrázok – obrázok tlačidla
text – text tlačidla
Pozri tiež:
Tlačidlo(String), 
Tlačidlo(Image), 
Tlačidlo(Image, Image), 
obrázok(Image), 
text(String)
Podrobnosti metód
aktivované
public boolean aktivované()
Overí, či bola toto tlačidlo naposledy aktivované (zvolené).
 Metóda je použiteľná v reakcii voľbaTlačidla.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívne – aktivované a označené – zvolené!
 Metóda aktivované a jej alias zvolené zisťujú, či bolo stanovené tlačidlo naposledy
 aktivované (zvolené). Metóda aktívne overuje,
 či je stanovené tlačidlo použiteľné (stlačiteľné) a metóda označené zisťuje, či bolo tlačidlo takzvane
 označené (čo môže mať subjektívny
 význam).
Návratová hodnota:
true ak bolo naposledy aktivované toto
     tlačidlo, v opačnom prípade false
aktivovane
public boolean aktivovane()
 Alias pre aktivované. (Venujte pozornosť upozorneniu pri metóde aktivované!)
zvolené
public boolean zvolené()
 Alias pre aktivované. (Venujte pozornosť upozorneniu pri metóde aktivované!)
zvolene
public boolean zvolene()
 Alias pre aktivované. (Venujte pozornosť upozorneniu pri metóde aktivované!)
mnemonickáSkratka
public int mnemonickáSkratka()
 Zistí aktuálny kód mnemonickej skratky
 nastavenej pre toto tlačidlo.
Pozri tiež:
mnemonickáSkratka(int)
mnemonickaSkratka
public int mnemonickaSkratka()
 Alias pre mnemonickáSkratka.
mnemonickáSkratka
public void mnemonickáSkratka(int mnemonickáSkratka)
 Dovoľuje nastaviť tlačidlu mnemonickú
 skratku. Význam
 mnemonickej skratky je rovnaký ako pri položkách ponuky. (Pozri
 napríklad metódu Svet.pridajPoložkuPonuky(text, mnemonickáSkratka).)
Parametre:
mnemonickáSkratka – kód mnemonickej skratky (príklad: Kláves.VK_A)
Pozri tiež:
mnemonickáSkratka()
mnemonickaSkratka
public void mnemonickaSkratka(int mnemonickáSkratka)
 Alias pre mnemonickáSkratka.
polohaX
public double polohaX()
 Zistí aktuálnu x-ovú súradnicu polohy
 tlačidla.
Definované:
polohaX v rozhraní Poloha
Návratová hodnota:
aktuálna x-ová súradnica polohy tlačidla
Pozri tiež:
polohaX(double)
polohaY
public double polohaY()
 Zistí aktuálnu y-ovú súradnicu polohy
 tlačidla.
Definované:
polohaY v rozhraní Poloha
Návratová hodnota:
aktuálna y-ová súradnica polohy tlačidla
Pozri tiež:
polohaY(double)
polohaX
public void polohaX(double novéX)
 Presunie tlačidlo na zadanú súradnicu
 v smere x.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor tlačidla.
Parametre:
novéX – nová x-ová súradnica polohy tlačidla
Pozri tiež:
polohaX(), 
poloha(double, double)
polohaY
public void polohaY(double novéY)
 Presunie tlačidlo na zadanú súradnicu
 v smere y.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor tlačidla.
Parametre:
novéY – nová y-ová súradnica polohy tlačidla
Pozri tiež:
polohaY(), 
poloha(double, double), 
poloha(Poloha)
súradnicaX
public void súradnicaX(double novéX)
 Alias pre polohaX.
suradnicaX
public void suradnicaX(double novéX)
 Alias pre polohaX.
súradnicaY
public void súradnicaY(double novéY)
 Alias pre polohaY.
suradnicaY
public void suradnicaY(double novéY)
 Alias pre polohaY.
súradnicaX
public double súradnicaX()
 Alias pre polohaX.
Definované:
súradnicaX v rozhraní Poloha
súradnicaY
public double súradnicaY()
 Alias pre polohaY.
Definované:
súradnicaY v rozhraní Poloha
suradnicaX
public double suradnicaX()
 Alias pre polohaX.
Definované:
suradnicaX v rozhraní Poloha
suradnicaY
public double suradnicaY()
 Alias pre polohaY.
Definované:
suradnicaY v rozhraní Poloha
poloha
public void poloha(double x,
                   double y)
Presunie tlačidlo na zadané súradnice x, y.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor tlačidla.
Parametre:
x – nová x-ová súradnica polohy tlačidla
y – nová y-ová súradnica polohy tlačidla
Pozri tiež:
polohaX(double), 
polohaY(double), 
poloha(Poloha)
poloha
public void poloha(Poloha objekt)
Presunie tlačidlo na súradnice zadaného objektu.
 
 Poznámka: Prilepovanie upravuje súradnicový priestor tlačidla.
Parametre:
objekt – objekt, na ktorého súradnice bude tlačidlo presunuté
Pozri tiež:
polohaX(double), 
polohaY(double), 
poloha(double, double)
poloha
public Bod poloha()
Vráti aktuálnu polohu tlačidla.
Definované:
poloha v rozhraní Poloha
Návratová hodnota:
aktuálna poloha tlačidla
Pozri tiež:
polohaX(), 
polohaY()
skočNa
public void skočNa(double x,
                   double y)
 Alias pre poloha.
skocNa
public void skocNa(double x,
                   double y)
 Alias pre poloha.
skočNa
public void skočNa(Poloha objekt)
 Alias pre poloha.
skocNa
public void skocNa(Poloha objekt)
 Alias pre poloha.
skoč
public void skoč(double Δx,
                 double Δy)
Presunie tlačidlo o zadaný počet bodov v horizontálnom
 a vertikálnom smere. Upozorňujeme, že zadané hodnoty sú
 automaticky zaokrúhlené na celé čísla, čiže ani viacnásobné
 posunutie tlačidla o hodnotu z otvoreného intervalu (−1; 1)
 nebude mať za následok posunutie tlačidla…
Parametre:
Δx – počet bodov v smere x
Δy – počet bodov v smere y
skoc
public void skoc(double Δx,
                 double Δy)
 Alias pre skoč.
jeNa
public boolean jeNa(double x,
                    double y)
Overí, či sa poloha tohto tlačidla dokonale zhoduje so zadanými
 súradnicami. Ak je zistená zhoda, tak metóda vráti hodnotu true, v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
x – x-ová súradnica, s ktorou má byť porovnaná poloha tohto
     tlačidla
y – y-ová súradnica, s ktorou má byť porovnaná poloha tohto
     tlačidla
Návratová hodnota:
true ak sa poloha tohto tlačidla zhoduje
     so zadanými súradnicami, false v opačnom prípade
jeNa
public boolean jeNa(Poloha poloha)
Overí, či sa poloha tohto tlačidla a poloha zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak metóda vráti hodnotu
 true, v opačnom prípade hodnotu false.
Definované:
jeNa v rozhraní Poloha
Parametre:
poloha – objekt, ktorého poloha má byť porovnaná s polohou tohto
     tlačidla
Návratová hodnota:
true ak sa poloha tohto tlačidla zhoduje s polohou
     zadaného objektu, false v opačnom prípade
prilepVľavo
public void prilepVľavo()
Prilepí tlačidlo k ľavému okraju. Táto akcia zruší prípadné
 predchádzajúce prilepenie k pravému okraju. Každé prilepenie upravuje
 súradnicový systém tlačidla presunutím čo najbližšie
 k prilepovanému okraju. To znamená, že keď napríklad po prilepení
 k ľavému okraju posunieme tlačidlo na súradnice [10, 0], posunieme
 ho v skutočnosti na pozíciu desať bodov od ľavého okraja.
Pozri tiež:
prilepVpravo(), 
prilepHore(), 
prilepDole(), 
odlep()
prilepVlavo
public void prilepVlavo()
 Alias pre prilepVľavo.
prilepVpravo
public void prilepVpravo()
Prilepí tlačidlo k pravému okraju. Táto akcia zruší prípadné
 predchádzajúce prilepenie k ľavému okraju. Každé prilepenie upravuje
 súradnicový systém tlačidla presunutím čo najbližšie
 k prilepovanému okraju. To znamená, že keď napríklad po prilepení
 k pravému okraju posunieme tlačidlo na súradnice [-10, 0],
 tak ho v skutočnosti posunieme na pozíciu desať bodov od pravého
 okraja.
Pozri tiež:
prilepVľavo(), 
prilepHore(), 
prilepDole(), 
odlep()
prilepHore
public void prilepHore()
Prilepí tlačidlo k hornému okraju. Táto akcia zruší prípadné
 predchádzajúce prilepenie k dolnému okraju. Každé prilepenie upravuje
 súradnicový systém tlačidla presunutím čo najbližšie
 k prilepovanému okraju. To znamená, že keď napríklad po prilepení
 k hornému okraju posunieme tlačidlo na súradnice [0, -10],
 tak ho v skutočnosti posunieme na pozíciu desať bodov od horného
 okraja.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepDole(), 
odlep()
prilepDole
public void prilepDole()
Prilepí tlačidlo k dolnému okraju. Táto akcia zruší prípadné
 predchádzajúce prilepenie k hornému okraju. Každé prilepenie upravuje
 súradnicový systém tlačidla presunutím čo najbližšie
 k prilepovanému okraju. To znamená, že keď napríklad po prilepení
 k dolnému okraju posunieme tlačidlo na súradnice [0, 10],
 tak ho v skutočnosti posunieme na pozíciu desať bodov od dolného
 okraja.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepHore(), 
odlep()
odlep
public void odlep()
Odlepí tlačidlo od všetkých okrajov.
Pozri tiež:
prilepVľavo(), 
prilepVpravo(), 
prilepHore(), 
prilepDole()
šírka
public double šírka()
 Zistí aktuálnu šírku tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
šírka v rozhraní Rozmer
Návratová hodnota:
aktuálna šírka tlačidla
Pozri tiež:
šírka(double), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
sirka
public double sirka()
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public double výška()
 Zistí aktuálnu výšku tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
výška v rozhraní Rozmer
Návratová hodnota:
aktuálna výška tlačidla
Pozri tiež:
výška(double), 
šírka(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
vyska
public double vyska()
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
šírka
public void šírka(double nováŠírka)
 Zmení šírku tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu,* spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
šírka v rozhraní Rozmer
Parametre:
nováŠírka – nová šírka tlačidla
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
sirka
public void sirka(double nováŠírka)
 Alias pre šírka.
Definované:
sirka v rozhraní Rozmer
výška
public void výška(double nováVýška)
 Zmení výšku tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
výška v rozhraní Rozmer
Parametre:
nováVýška – nová výška tlačidla
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
vyska
public void vyska(double nováVýška)
 Alias pre výška.
Definované:
vyska v rozhraní Rozmer
rozmery
public Rozmer rozmery()
Zistí aktuálne rozmery tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
rozmery v rozhraní Rozmer
Návratová hodnota:
objekt vytvorený podľa aktuálnych rozmerov tlačidla
Pozri tiež:
šírka(), 
výška(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
rozmery
public void rozmery(double nováŠírka,
                    double nováVýška)
Nastaví nové rozmery tlačidla.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Parametre:
nováŠírka – nová šírka tlačidla
nováVýška – nová výška tlačidla
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
rozmery
public void rozmery(Rozmer rozmer)
Nastaví nové rozmery tlačidla podľa zadanej implementácie
 rozmeru.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
rozmery v rozhraní Rozmer
Parametre:
rozmer – inštancia obsahujúca nové rozmery tlačidla
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
máŠírku
public boolean máŠírku(double šírka)
Zistí, či má tlačidlo zadanú šírku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
máŠírku v rozhraní Rozmer
Parametre:
šírka – šírka, ktorá má byť porovnaná so šírkou tlačidla
Návratová hodnota:
true ak sa šírka tlačidla zhoduje so
     zadanou šírkou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máVýšku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
maSirku
public boolean maSirku(double šírka)
 Alias pre máŠírku.
Definované:
maSirku v rozhraní Rozmer
máVýšku
public boolean máVýšku(double výška)
Zistí, či má tlačidlo zadanú výšku.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
máVýšku v rozhraní Rozmer
Parametre:
výška – výška, ktorá má byť porovnaná s výškou tlačidla
Návratová hodnota:
true ak sa výška tlačidla zhoduje so
     zadanou výškou, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máRozmer(Rozmer), 
máRozmer(double, double)
maVysku
public boolean maVysku(double výška)
 Alias pre máVýšku.
Definované:
maVysku v rozhraní Rozmer
máRozmer
public boolean máRozmer(double šírka,
                        double výška)
Overí, či sa rozmery tlačidla dokonale zhodujú so zadanými
 rozmermi. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
máRozmer v rozhraní Rozmer
Parametre:
šírka – šírka porovnávaná so šírkou tlačidla
výška – výška porovnávaná s výškou tlačidla
Návratová hodnota:
true ak sa rozmery tlačidla zhodujú so
     zadanými rozmermi, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(Rozmer)
maRozmer
public boolean maRozmer(double šírka,
                        double výška)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
máRozmer
public boolean máRozmer(Rozmer rozmer)
Overí, či sa rozmery tlačidla a rozmery zadaného objektu
 dokonale zhodujú. Ak je zistená zhoda, tak je výsledkom
 true, v opačnom prípade hodnota false.
 
 Upozornenie: Z dôvodu kompatibility
 s rozhraním Rozmer pracujú všetky metódy súvisiace
 s rozmerom tlačidla s údajovým typom double, ale
 z optimalizačných (a iných) dôvodov sú rozmery tlačidla vnútorne
 uchovávané v atribútoch s údajovým typom int. (Z toho
 dôvodu, ak priradíte/zapíšete do rozmeru tlačidla neceločíselnú
 hodnotu, spätne z neho prečítate celočíselnú hodnotu získanú
 zanedbaním neceločíselnej časti.)
Definované:
máRozmer v rozhraní Rozmer
Parametre:
rozmer – iný objekt, ktorého rozmery majú byť porovnané
     s rozmermi tlačidla
Návratová hodnota:
true ak sa rozmery tlačidla zhodujú
     s rozmermi zadaného objektu, false v opačnom prípade
Pozri tiež:
šírka(), 
výška(), 
rozmery(), 
rozmery(double, double), 
rozmery(Rozmer), 
máŠírku(double), 
máVýšku(double), 
máRozmer(double, double)
maRozmer
public boolean maRozmer(Rozmer rozmer)
 Alias pre máRozmer.
Definované:
maRozmer v rozhraní Rozmer
aktívne
public boolean aktívne()
Overí, či je tlačidlo aktívne. Aktívne tlačidlo znamená
 použiteľné tlačidlo. S deaktivovaným tlačidlom nemôže používateľ
 manipulovať.
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívne – aktivované a označené – zvolené!
 Metóda aktivované a jej alias zvolené zisťujú, či bolo stanovené tlačidlo naposledy
 aktivované (zvolené). Metóda aktívne overuje,
 či je stanovené tlačidlo použiteľné (stlačiteľné) a metóda označené zisťuje, či bolo tlačidlo takzvane
 označené (čo môže mať subjektívny
 význam).
Návratová hodnota:
true – je aktívne;
     false – nie je aktívne
Pozri tiež:
aktivuj(), 
deaktivuj()
aktivne
public boolean aktivne()
 Alias pre aktívne.
aktivuj
public void aktivuj()
Aktivuje tlačidlo. Predvolene je tlačidlo aktívne. Ak ho
 deaktivujeme (pozri nižšie), tak po
 vykonaní tohto príkazu (aktivuj) tlačidla, bude opäť
 použiteľné a bude reagovať na klikanie myšou aj voľbu klávesnicou.
Pozri tiež:
aktívne(), 
aktivuj(), 
deaktivuj()
deaktivuj
public void deaktivuj()
Deaktivuje tlačidlo. Tlačidlo prestane byť použiteľné, prestane
 reagovať na myš a klávesnicu.
Pozri tiež:
aktívne(), 
aktivuj(), 
deaktivuj()
označené
public boolean označené()
Overí, či je tlačidlo označené. Označené tlačidlo zmení svoj
 vzhľad (spôsob zmeny je závislý od operačného systému) a ak má
 tlačidlo definovaný obrázok môžeme
 určiť, aby sa v tlačidle s označeným stavom zobrazoval iný obrázok. (Interpretáciu tohto stavu
 ponechávame na programátora…)
 
 Upozornenie: Pozor na podobnosť medzi
 názvami metód aktívne – aktivované a označené – zvolené!
 Metóda aktivované a jej alias zvolené zisťujú, či bolo stanovené tlačidlo naposledy
 aktivované (zvolené). Metóda aktívne overuje,
 či je stanovené tlačidlo použiteľné (stlačiteľné) a metóda označené zisťuje, či bolo tlačidlo takzvane
 označené (čo môže mať subjektívny
 význam).
Návratová hodnota:
true – je označené;
     false – nie je označené
Pozri tiež:
označ(), 
odznač(), 
zrušOznačenie()
oznacene
public boolean oznacene()
 Alias pre označené.
označ
public void označ()
Označí tlačidlo. (Pre viac informácií pozri opis metódy označené.)
Pozri tiež:
aktívne(), 
odznač(), 
zrušOznačenie()
oznac
public void oznac()
 Alias pre označ.
odznač
public void odznač()
Zruší označenie tlačidla. (Pre viac informácií pozri opis metódy
 označené.)
Pozri tiež:
aktívne(), 
označ(), 
zrušOznačenie()
odznac
public void odznac()
 Alias pre odznač.
zrušOznačenie
public void zrušOznačenie()
Zruší označenie tlačidla. (Pre viac informácií pozri opis metódy
 označené.)
Pozri tiež:
aktívne(), 
označ(), 
odznač()
zrusOznacenie
public void zrusOznacenie()
 Alias pre zrušOznačenie.
viditeľné
public boolean viditeľné()
Zistí, či je tlačidlo viditeľné (zobrazené) alebo nie. Po
 vytvorení je tlačidlo predvolene viditeľné, môžeme ho skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda zobrazené.
Pozri tiež:
zobrazené(), 
zobraz(), 
skry()
viditelne
public boolean viditelne()
 Alias pre viditeľné.
zobrazené
public boolean zobrazené()
Zistí, či je tlačidlo viditeľné (zobrazené) alebo nie. Po
 vytvorení je tlačidlo predvolene viditeľné, môžeme ho skrývať
 a zobrazovať metódami skry a zobraz. Alternatívou tejto metódy je metóda viditeľné.
Pozri tiež:
viditeľné(), 
zobraz(), 
skry()
zobrazene
public boolean zobrazene()
 Alias pre zobrazené.
zobraz
public void zobraz()
Zobrazí tlačidlo. (Pre viac informácií pozri opis metódy
 zobrazené.)
Pozri tiež:
viditeľné(), 
zobrazené(), 
skry()
skry
public void skry()
Skryje tlačidlo. (Pre viac informácií pozri opis metódy
 zobrazené.)
Pozri tiež:
viditeľné(), 
zobrazené(), 
zobraz()
setVisible
public void setVisible(boolean visible)
Prekrytie originálnej metódy. Slúži predovšetkým na zabezpečenie
 postúpenia vstupu klávesnice (fokusu) hlavnému panelu (pri skrytí
 tlačidla).
 
 Poznámka: Táto metóda prekrýva originálnu
 metódu JComponent.setVisible(boolean). 
 
 
Prekrývanie:
táto metóda prekrýva originálnu metódu setVisible v triede JComponent
Parametre:
visible – true alebo false podľa toho, či
     má byť tlačidlo zobrazené alebo skryté
Pozri tiež:
JComponent.setVisible(boolean)
farbaTextu
public Farba farbaTextu()
 Zistí aktuálnu farbu textu tlačidla.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba textu tlačidla (objekt typu Farba)
farbaTextu
public void farbaTextu(Color nováFarba)
 Nastav farbu textu tlačidla. Nastaví farbu
 a priehľadnosť textu tlačidla podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt typu Color (alebo
     odvodeného napr. Farba) s novou farbou textu
     tlačidla; jestvuje paleta predvolených farieb (pozri napr.:
     biela, červená, čierna…)
farbaTextu
public void farbaTextu(Farebnosť objekt)
Nastaví farbu a priehľadnosť textu tlačidla podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu textu tlačidla
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b)
Nastaví farbu textu tlačidla podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
farbaTextu
public Farba farbaTextu(int r,
                        int g,
                        int b,
                        int a)
Nastaví farbu a (ne)priehľadnosť textu tlačidla podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba textu
Pozri tiež:
farbaTextu(Color)
zdedenáFarbaTextu
public void zdedenáFarbaTextu()
Nastaví zdedenú farbu textu tlačidla. Farba textu tlačidla bude
 zdedená od nadradeného komponentu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaTextu
public void zdedenaFarbaTextu()
 Alias pre zdedenáFarbaTextu.
farbaPozadia
public Farba farbaPozadia()
 Číta farbu pozadia tlačidla.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Návratová hodnota:
aktuálna farba pozadia tlačidla (objekt typu Farba)
farbaPozadia
public void farbaPozadia(Color nováFarba)
 Nastaví farbu a priehľadnosť pozadia
 tlačidla podľa zadanej farebnej inštancie.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
nováFarba – objekt určujúci novú farbu pozadia;
     jestvuje paleta predvolených farieb (pozri: biela, červená, čierna…)
farbaPozadia
public void farbaPozadia(Farebnosť objekt)
Nastaví farbu a priehľadnosť pozadia tlačidla podľa zadaného objektu.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
objekt – objekt určujúci novú farbu pozadia
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b)
Nastaví farbu pozadia tlačidla podľa zadaných farebných zložiek.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
farbaPozadia
public Farba farbaPozadia(int r,
                          int g,
                          int b,
                          int a)
Nastaví farbu a (ne)priehľadnosť pozadia tlačidla podľa zadaných
 farebných zložiek a úrovne priehľadnosti.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
Parametre:
r – červená zložka novej farby; celé číslo v rozsahu 0 – 255
g – zelená zložka novej farby; celé číslo v rozsahu 0 – 255
b – modrá zložka novej farby; celé číslo v rozsahu 0 – 255
a – úroveň (ne)priehľadnosti novej farby; celé číslo
     v rozsahu 0 – 255 (0 – neviditeľná farba; 255 – nepriehľadná
     farba)
Návratová hodnota:
objekt typu Farba – nová farba pozadia
Pozri tiež:
farbaPozadia(Color)
zdedenáFarbaPozadia
public void zdedenáFarbaPozadia()
Nastaví zdedenú farbu pozadia tlačidla.
 
 Poznámka: Nie je garantované, že táto
 vlastnosť bude rešpektovaná definíciou vzhľadu používateľského
 rozhrania (L&F). Každá definícia vzhľadu komponentov sa môže
 slobodne rozhodnúť o tom, či bude túto vlastnosť rešpektovať.
zdedenaFarbaPozadia
public void zdedenaFarbaPozadia()
 Alias pre zdedenáFarbaPozadia.
písmo
public Písmo písmo()
 Číta aktuálny typ písma textu tlačidla.
Návratová hodnota:
objekt typu Písmo – aktuálne písmo
Pozri tiež:
písmo(Font), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo()
 Alias pre písmo.
písmo
public void písmo(Font novéPísmo)
 Nastaví nový typ písma textu tlačidla.
Parametre:
novéPísmo – objekt typu Písmo alebo Font
     určujúci nový typ písma
Pozri tiež:
písmo(), 
písmo(String, double), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public void pismo(Font novéPísmo)
 Alias pre písmo.
písmo
public Písmo písmo(String názov,
                   double veľkosť)
Nastaví nový typ písma textu tlačidla. (Nová inštancia triedy
 Písmo je touto metódou vrátená na prípadné ďalšie
 použitie.)
Parametre:
názov – názov písma; môže byť všeobecný názov logického
     písma (Dialog, DialogInput, Monospaced, Serif, SansSerif…)
     alebo názov konkrétneho písma (Times New Roman, Arial…)
veľkosť – veľkosť písma v bodoch (hodnota je zaokrúhlená
     na typ float)
Návratová hodnota:
nový objekt typu Písmo
Pozri tiež:
písmo(), 
písmo(Font), 
farbaTextu(Color), 
farbaPozadia(Color)
pismo
public Pismo pismo(String názov,
                   double veľkosť)
 Alias pre písmo.
text
public String text()
 Prečíta aktuálny text tlačidla.
Návratová hodnota:
aktuálny text tlačidla
Pozri tiež:
text(String)
text
public void text(String text)
 Nastaví nový text tlačidla.
Parametre:
text – nový text tlačidla
Pozri tiež:
Tlačidlo(String), 
Tlačidlo(Image, String), 
text()
obrázok
public void obrázok(String súbor)
Nastaví alebo odstráni obrázok tlačidla. Toto je základný obrázok
 tlačidla. Bez neho nemá význam priraďovať tlačidlu ostatné druhy
 obrázkov…
 
 Obrázok prečítaný zo súboru je chápaný ako zdroj a po
 prečítaní zostane uložený vo vnútornej pamäti sveta. Z nej
 môže byť v prípade potreby (napríklad ak sa obsah súboru na
 disku zmenil) odstránený metódou Svet.uvoľni(názovZdroja). (Táto informácia je platná pre
 všetky metódy pracujúce s obrázkami alebo zvukmi, ktoré
 prijímajú názov súboru ako parameter.)
Parametre:
súbor – názov súboru s obrázkom alebo
     (String)null ak chceme odstrániť obrázok
     tlačidla
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
obrázok(Image), 
obrázokStlačeného(String), 
obrázokDeaktivovaného(String), 
obrázokOznačeného(String), 
obrázokDeaktivovanéhoOznačeného(String), 
Svet.priečinokObrázkov(String)
obrazok
public void obrazok(String súbor)
 Alias pre obrázok.
obrázok
public void obrázok(Image obrázok)
Nastaví alebo odstráni obrázok tlačidla. Toto je základný obrázok
 tlačidla. Bez neho nemá význam priraďovať tlačidlu ostatné druhy
 obrázkov…
Parametre:
obrázok – nový obrázok tlačidla alebo
     (Image)null
     ak chceme odstrániť obrázok tlačidla
Pozri tiež:
Tlačidlo(Image), 
Tlačidlo(Image, Image), 
Tlačidlo(Image, String), 
obrázok(String), 
obrázokStlačeného(Image), 
obrázokDeaktivovaného(Image), 
obrázokOznačeného(Image), 
obrázokDeaktivovanéhoOznačeného(Image)
obrazok
public void obrazok(Image obrázok)
 Alias pre obrázok.
obrázok
public Obrázok obrázok()
Vráti základný obrázok tlačidla alebo null ak tlačidlo
 nemá priradený obrázok, ktorý bol vytvorený z inštancie typu
 Obrázok.
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
obrázokStlačeného(), 
obrázokDeaktivovaného(), 
obrázokOznačeného(), 
obrázokDeaktivovanéhoOznačeného()
obrazok
public Obrazok obrazok()
 Alias pre obrázok.
obrázokStlačeného
public void obrázokStlačeného(String súbor)
Nastaví alebo odstráni obrázok stlačeného tlačidla. Ak tlačidlo
 nemá definovaný základný
 obrázok, tak nemá nastavovanie obrázka pre stlačený stav význam.
 Síce toto nastavenie môžete bez negatívnych následkov vykonať aj
 bez toho, ale prejaví sa až po nastavení základného obrázka.
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
Parametre:
súbor – názov súboru s obrázkom stlačeného tlačidla alebo
     (String)null ak chceme odstrániť obrázok
     stlačeného tlačidla
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
obrázokStlačeného(Image), 
obrázok(String), 
obrázokDeaktivovaného(String), 
obrázokOznačeného(String), 
obrázokDeaktivovanéhoOznačeného(String), 
Svet.priečinokObrázkov(String)
obrazokStlaceneho
public void obrazokStlaceneho(String súbor)
 Alias pre obrázokStlačeného.
obrázokStlačeného
public void obrázokStlačeného(Image obrázok)
Nastaví alebo odstráni obrázok stlačeného tlačidla. Ak tlačidlo
 nemá definovaný základný
 obrázok, tak nemá nastavovanie obrázka pre stlačený stav význam.
 Síce toto nastavenie môžete bez negatívnych následkov vykonať aj
 bez toho, ale prejaví sa až po nastavení základného obrázka.
Parametre:
obrázok – nový obrázok stlačeného tlačidla alebo
     (Image)null ak chceme odstrániť obrázok
     stlačeného tlačidla
Pozri tiež:
obrázokStlačeného(String), 
obrázok(Image), 
obrázokDeaktivovaného(Image), 
obrázokOznačeného(Image), 
obrázokDeaktivovanéhoOznačeného(Image)
obrazokStlaceneho
public void obrazokStlaceneho(Image obrázok)
 Alias pre obrázokStlačeného.
obrázokStlačeného
public Obrázok obrázokStlačeného()
Vráti obrázok stlačeného tlačidla alebo null ak
 tlačidlo nemá definovaný obrázok pre stlačený stav, ktorý bol
 vytvorený z inštancie typu Obrázok.
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
obrázok(), 
obrázokDeaktivovaného(), 
obrázokOznačeného(), 
obrázokDeaktivovanéhoOznačeného()
obrazokStlaceneho
public Obrazok obrazokStlaceneho()
 Alias pre obrázokStlačeného.
obrázokDeaktivovaného
public void obrázokDeaktivovaného(String súbor)
Nastaví alebo odstráni obrázok deaktivovaného tlačidla. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie
 obrázka deaktivovaného tlačidla význam. Síce toto nastavenie
 môžete bez negatívnych následkov vykonať aj bez toho, ale prejaví
 sa až po nastavení základného obrázka.
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
Parametre:
súbor – názov súboru s obrázkom deaktivovaného tlačidla alebo
     (String)null ak chceme odstrániť obrázok
     deaktivovaného tlačidla
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
obrázokDeaktivovaného(Image), 
obrázok(String), 
obrázokStlačeného(String), 
obrázokOznačeného(String), 
obrázokDeaktivovanéhoOznačeného(String), 
Svet.priečinokObrázkov(String)
obrazokDeaktivovaneho
public void obrazokDeaktivovaneho(String súbor)
 Alias pre obrázokDeaktivovaného.
obrázokDeaktivovaného
public void obrázokDeaktivovaného(Image obrázok)
Nastaví alebo odstráni obrázok deaktivovaného tlačidla. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie
 obrázka deaktivovaného tlačidla význam. Síce toto nastavenie
 môžete bez negatívnych následkov vykonať aj bez toho, ale prejaví
 sa až po nastavení základného obrázka.
Parametre:
obrázok – nový obrázok deaktivovaného tlačidla alebo
     (Image)null ak chceme odstrániť obrázok
     deaktivovaného tlačidla
Pozri tiež:
obrázokDeaktivovaného(String), 
obrázok(Image), 
obrázokStlačeného(Image), 
obrázokOznačeného(Image), 
obrázokDeaktivovanéhoOznačeného(Image)
obrazokDeaktivovaneho
public void obrazokDeaktivovaneho(Image obrázok)
 Alias pre obrázokDeaktivovaného.
obrázokDeaktivovaného
public Obrázok obrázokDeaktivovaného()
Vráti obrázok deaktivovaného tlačidla
 alebo null ak tlačidlo nemá definovaný obrázok pre
 deaktivovaný stav, ktorý bol vytvorený z inštancie typu
 Obrázok.
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
obrázok(), 
obrázokStlačeného(), 
obrázokOznačeného(), 
obrázokDeaktivovanéhoOznačeného()
obrazokDeaktivovaneho
public Obrazok obrazokDeaktivovaneho()
 Alias pre obrázokDeaktivovaného.
obrázokOznačeného
public void obrázokOznačeného(String súbor)
Nastaví alebo odstráni obrázok označeného
 tlačidla. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie obrázka označeného tlačidla
 význam. Síce toto nastavenie môžete bez negatívnych následkov
 vykonať aj bez toho, ale prejaví sa až po nastavení základného
 obrázka. Príklad rozdielu obrázkov normálneho (základného)
 a označeného tlačidla je v opise metódy
 obrázokOznačeného(obrázok).
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
Parametre:
súbor – názov súboru s obrázkom označeného tlačidla alebo
     (String)null ak chceme odstrániť obrázok
     označeného tlačidla
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
obrázokOznačeného(Image), 
obrázok(String), 
obrázokStlačeného(String), 
obrázokDeaktivovaného(String), 
obrázokDeaktivovanéhoOznačeného(String), 
Svet.priečinokObrázkov(String)
obrazokOznaceneho
public void obrazokOznaceneho(String súbor)
 Alias pre obrázokOznačeného.
obrázokOznačeného
public void obrázokOznačeného(Image obrázok)
Nastaví alebo odstráni obrázok označeného
 tlačidla. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie obrázka označeného tlačidla
 význam. Síce toto nastavenie môžete bez negatívnych následkov
 vykonať aj bez toho, ale prejaví sa až po nastavení základného
 obrázka. Tu je príklad rozdielu obrázkov normálneho (základného)
 a označeného tlačidla (oba boli nakreslené a uložené s pomocou
 robota):
 
 
  Príklad vyrobeného
 obrázkapre normálne (neoznačené) tlačidlo.
  Príklad vyrobeného
 obrázkapre označené tlačidlo.
Parametre:
obrázok – nový obrázok označeného tlačidla alebo
     (Image)null ak chceme odstrániť obrázok
     označeného tlačidla
Pozri tiež:
obrázokOznačeného(String), 
obrázok(Image), 
obrázokStlačeného(Image), 
obrázokDeaktivovaného(Image), 
obrázokDeaktivovanéhoOznačeného(Image)
obrazokOznaceneho
public void obrazokOznaceneho(Image obrázok)
 Alias pre obrázokOznačeného.
obrázokOznačeného
public Obrázok obrázokOznačeného()
Vráti obrázok označeného tlačidla alebo
 null ak tlačidlo nemá definovaný obrázok pre označený
 stav, ktorý bol vytvorený z inštancie typu Obrázok.
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
obrázok(), 
obrázokStlačeného(), 
obrázokDeaktivovaného(), 
obrázokDeaktivovanéhoOznačeného()
obrazokOznaceneho
public Obrazok obrazokOznaceneho()
 Alias pre obrázokOznačeného.
obrázokDeaktivovanéhoOznačeného
public void obrázokDeaktivovanéhoOznačeného(String súbor)
Nastaví alebo odstráni obrázok tlačidla, ktoré je zároveň
 deaktivované a označeného. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie tohto typu
 obrázka význam. Síce toto nastavenie môžete bez negatívnych
 následkov vykonať aj bez toho, ale prejaví sa až po nastavení
 základného obrázka.
 
 Ikona prečítaná zo súboru je prevedená z obrázka, ktorý je
 chápaný ako zdroj a ktorý po prečítaní zostane uložený vo
 vnútornej pamäti sveta rovnako ako prevedená verzia ikony.
 Obidva objekty môžu byť v prípade potreby (napríklad ak sa obsah
 súboru na disku zmenil) z vnútornej pamäte odstránené metódou
 Svet.uvoľni(názovZdroja).
 (Táto informácia je platná pre všetky metódy pracujúce s obrázkami
 (resp. ikonami) alebo zvukmi, ktoré prijímajú názov súboru ako
 parameter.)
Parametre:
súbor – názov súboru s obrázkom deaktivovaného a označeného
     tlačidla alebo (String)null ak chceme
     odstrániť obrázok deaktivovaného a označeného tlačidla
Výnimky:
GRobotException – ak súbor s obrázkom nebol nájdený
     (identifikátor imageNotFound)
Pozri tiež:
obrázokDeaktivovanéhoOznačeného(Image), 
obrázok(String), 
obrázokStlačeného(String), 
obrázokDeaktivovaného(String), 
obrázokOznačeného(String), 
Svet.priečinokObrázkov(String)
obrazokDeaktivovanehoOznaceneho
public void obrazokDeaktivovanehoOznaceneho(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrázokOznačenéhoDeaktivovaného
public void obrázokOznačenéhoDeaktivovaného(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrazokOznacenehoDeaktivovaneho
public void obrazokOznacenehoDeaktivovaneho(String súbor)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrázokDeaktivovanéhoOznačeného
public void obrázokDeaktivovanéhoOznačeného(Image obrázok)
Nastaví alebo odstráni obrázok tlačidla, ktoré je zároveň
 deaktivované a označeného. Ak tlačidlo nemá definovaný základný obrázok, tak nemá nastavovanie tohto typu
 obrázka význam. Síce toto nastavenie môžete bez negatívnych
 následkov vykonať aj bez toho, ale prejaví sa až po nastavení
 základného obrázka.
Parametre:
obrázok – nový obrázok deaktivovaného a označeného tlačidla
     alebo (Image)null ak chceme odstrániť obrázok
     deaktivovaného a označeného tlačidla
Pozri tiež:
obrázokDeaktivovanéhoOznačeného(String), 
obrázok(Image), 
obrázokStlačeného(Image), 
obrázokDeaktivovaného(Image), 
obrázokOznačeného(Image)
obrazokDeaktivovanehoOznaceneho
public void obrazokDeaktivovanehoOznaceneho(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrázokOznačenéhoDeaktivovaného
public void obrázokOznačenéhoDeaktivovaného(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrazokOznacenehoDeaktivovaneho
public void obrazokOznacenehoDeaktivovaneho(Image obrázok)
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrázokDeaktivovanéhoOznačeného
public Obrázok obrázokDeaktivovanéhoOznačeného()
Vráti obrázok deaktivovaného a označeného tlačidla alebo null ak tlačidlo
 nemá definovaný obrázok pre túto kombináciu stavov, ktorý by bol
 vytvorený z inštancie typu Obrázok.
Návratová hodnota:
objekt typu Obrázok alebo null
Pozri tiež:
obrázok(), 
obrázokStlačeného(), 
obrázokDeaktivovaného(), 
obrázokOznačeného()
obrazokDeaktivovanehoOznaceneho
public Obrazok obrazokDeaktivovanehoOznaceneho()
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrázokOznačenéhoDeaktivovaného
public Obrázok obrázokOznačenéhoDeaktivovaného()
 Alias pre obrázokDeaktivovanéhoOznačeného.
obrazokOznacenehoDeaktivovaneho
public Obrazok obrazokOznacenehoDeaktivovaneho()
 Alias pre obrázokDeaktivovanéhoOznačeného.
medzeraMedziObrázkomATextom
public int medzeraMedziObrázkomATextom()
 Zistí aktuálu veľkosť medzery medzi
 obrázkom a textom zobrazenými v tomto tlačidle.
Návratová hodnota:
celé číslo vyjadrujúce počet pixelov medzi obrázkom
     a textom tohto tlačidla
medzeraMedziObrazkomATextom
public int medzeraMedziObrazkomATextom()
 Alias pre medzeraMedziObrázkomATextom.
medzeraMedziObrázkomATextom
public void medzeraMedziObrázkomATextom(int medzera)
 Ak má toto tlačidlo nastavený obrázok aj
 text, tak táto vlastnosť určuje veľkosť medzery medzi nimi.
 Predvolená hodnota je štyri pixely.
Parametre:
medzera – celé číslo určujúce počet pixelov medzi obrázkom
     a textom
medzeraMedziObrazkomATextom
public void medzeraMedziObrazkomATextom(int medzera)
 Alias pre medzeraMedziObrázkomATextom.
zrušDekor
public void zrušDekor()
Zruší dekor tlačidla určený aktuálne použitým L&F (Look and Feel,
 v našom prípade používame L&F zhodný s dizajnom ovládacích prvkov
 operačného systému). Tento spôsob zobrazenia (t. j. bez dekoru)
 je predvolene používaný rýdzo obrázkovými konštruktormi tlačidla
 (t. j. konštruktormi, ktoré prijímajú len argumenty obrázkového typu).
Pozri tiež:
Tlačidlo(Image), 
Tlačidlo(Image, Image), 
obnovDekor()
zrusDekor
public void zrusDekor()
 Alias pre zrušDekor.
obnovDekor
public void obnovDekor()
Obnoví dekor tlačidla pôvodne určený aktuálne použitým L&F (Look
 and Feel, v našom prípade používame L&F zhodný s dizajnom
 ovládacích prvkov operačného systému). Iba rýdzo obrázkové
 konštruktory ovplyvňujú predvolený dekor tlačidiel (pozri opis
 metódy zrušDekor).
Pozri tiež:
Tlačidlo(Image), 
Tlačidlo(Image, Image), 
zrušDekor()
skript
public Skript skript()
Vráti skript priradený k tomuto tlačidlu alebo null,
 ak k tlačidlu nebol priradený žiadny skript.
Návratová hodnota:
skript priradený k tomuto tlačidlu alebo null
Pozri tiež:
riadkySkriptu(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
riadkySkriptu
public String[] riadkySkriptu()
Vráti riadky skriptu, ak bol skript k tomuto tlačidlu priradený
 v textovej forme. V opačnom prípade vráti null, pričom
 tlačidlo môže mať definovaný skript – pozri aj metódu skript.
Návratová hodnota:
skript priradený k tomuto tlačidlu alebo null
Pozri tiež:
skript(), 
skript(String[]), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String[] riadky)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení. (Pozri aj metódu vykonajSkript.) Ak chcete skript
 tlačidla vymazať, zadajte hodnotu null.
Parametre:
riadky – skript vo forme poľa reťazcov (riadkov skriptu)
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(String skript)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení. (Pozri aj metódu vykonajSkript.) Ak chcete skript
 tlačidla vymazať, zadajte hodnotu null.
Parametre:
skript – skript vo forme reťazca oddeľovaného znakmi
     nového riadka
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(Skript), 
Svet.vykonajSkript(String[]), 
Skript
skript
public void skript(Skript skript)
Priradí k tomuto tlačidlu skript, ktorý bude automaticky vykonaný
 po jeho zvolení. (Pozri aj metódu vykonajSkript a triedu Skript.) Ak chcete skript
 tlačidla vymazať, zadajte hodnotu null.
Parametre:
skript – inštanicia triedy Skript
Pozri tiež:
skript(), 
riadkySkriptu(), 
skript(String[]), 
skript(String), 
Svet.vykonajSkript(String[]), 
Skript
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":9,"i20":9,"i21":9,"i22":9,"i23":9,"i24":9,"i25":9,"i26":9,"i27":9,"i28":9,"i29":9,"i30":9,"i31":9,"i32":9,"i33":9,"i34":9,"i35":9,"i36":9,"i37":9,"i38":9,"i39":9,"i40":9,"i41":9,"i42":9,"i43":9,"i44":9,"i45":9,"i46":9,"i47":9,"i48":9,"i49":9,"i50":9,"i51":9,"i52":9,"i53":9,"i54":9,"i55":9,"i56":9,"i57":9,"i58":9,"i59":9,"i60":9,"i61":9,"i62":9,"i63":9,"i64":9,"i65":9,"i66":9,"i67":9,"i68":9,"i69":9,"i70":9,"i71":9,"i72":9,"i73":9,"i74":9,"i75":9,"i76":9,"i77":9,"i78":9,"i79":9,"i80":9,"i81":9,"i82":9,"i83":9,"i84":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda ÚdajeUdalostí
java.lang.Object
ÚdajeUdalostí
Známe priame odvodené triedy:
UdajeUdalosti
public class ÚdajeUdalostí
extends Object
Toto je statická trieda disponujúca informáciami o rôznych udalostiach
 sveta. Svet pravidelne automaticky aktualizuje staické údaje uložené
 v rámci tejto triedy. Využite nachádza pri spracovaní udalostí (pozri triedu ObsluhaUdalostí).
Prehľad metód
Všetky metódy Statické metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static WindowEvent
aktivitaOkna()
Vráti objekt s informáciami o poslednej udalosti okna súvisiacej
 s jeho aktiváciou, deaktiváciou, maximalizáciou, minimalizáciou, obnovením, otvorením alebo zavretím.
static int
klaves()
 Alias pre kláves.
static int
kláves()
Vráti kód klávesu poslednej udalosti klávesnice.
static boolean
klaves(int kód)
 Alias pre kláves.
static boolean
kláves(int kód)
Overí kód klávesu poslednej udalosti klávesnice.
static KeyEvent
klavesnica()
 Alias pre klávesnica.
static KeyEvent
klávesnica()
Vráti objekt s informáciami o poslednej udalosti klávesnice.
static MouseWheelEvent
kolieskoMysi()
 Alias pre kolieskoMyši.
static MouseWheelEvent
kolieskoMyši()
Vráti spresnenie objektu s informáciami o poslednej udalosti myši,
 ktorá sa dotýkala rolovania kolieskom myši.
static KontextovaPolozka
kontextovaPolozka()
 Alias pre kontextováPoložka.
static KontextováPoložka
kontextováPoložka()
Vráti objekt KontextováPoložka
 s naposledy zvolenou kontextovou položkou.
static MouseEvent
mys()
 Alias pre myš.
static MouseEvent
myš()
Vráti objekt s informáciami o poslednej udalosti myši.
static ComponentEvent
okno()
Vráti objekt s informáciami o poslednej udalosti okna.
static Bod
polohaMysi()
 Alias pre polohaMyši.
static double
polohaMysiX()
 Alias pre polohaMyšiX.
static double
polohaMysiY()
 Alias pre polohaMyšiY.
static Bod
polohaMyši()
Vráti polohu kurzora myši prepočítanú do súradníc plátna.
static double
polohaMyšiX()
 Alias pre súradnicaMyšiX.
static double
polohaMyšiY()
 Alias pre súradnicaMyšiY.
static PolozkaPonuky
polozkaPonuky()
 Alias pre položkaPonuky.
static int
polozkaSystemovejPonuky()
 Alias pre položkaSystémovejPonuky.
static PoložkaPonuky
položkaPonuky()
Vráti objekt PoložkaPonuky s naposledy
 zvolenou položkou ponuky.
static int
položkaSystémovejPonuky()
Vráti index naposledy zvolenej položky kontextovej
 ponuky {@linkplain Svet#systémováIkona(String, Image, String...)
static Bod
poslednaPolohaMysi()
 Alias pre poslednáPolohaMyši.
static double
poslednaPolohaMysiX()
 Alias pre poslednáPolohaMyšiX.
static double
poslednaPolohaMysiY()
 Alias pre poslednáPolohaMyšiY.
static Bod
poslednáPolohaMyši()
Vráti polohu kurzora myši pred poslednou zmenou.
static double
poslednáPolohaMyšiX()
 Alias pre poslednáSúradnicaMyšiX.
static double
poslednáPolohaMyšiY()
 Alias pre poslednáSúradnicaMyšiY.
static double
poslednaSuradnicaMysiX()
 Alias pre poslednáSúradnicaMyšiX.
static double
poslednaSuradnicaMysiY()
 Alias pre poslednáSúradnicaMyšiY.
static double
poslednáSúradnicaMyšiX()
Vráti hodnotu poslednej x-ovej súradnice myši prepočítanú do
 súradníc plátna.
static double
poslednáSúradnicaMyšiY()
Vráti hodnotu poslednej y-ovej súradnice myši prepočítanú do
 súradníc plátna.
static String
poslednyOdkaz()
 Alias pre poslednýOdkaz.
static String
poslednýOdkaz()
Vráti text cieľa (adresu) posledného aktivovaného odkazu
 poznámkového bloku.
static PoznámkovýBlok
poslednyPoznamkovyBlok()
 Alias pre poslednýPoznámkovýBlok.
static PoznámkovýBlok
poslednýPoznámkovýBlok()
Vráti objekt toho poznámkového
 bloku, v ktorom bol naposledy aktivovaný (hypertextový) odkaz.
static int
posunRolovacejListy()
 Alias pre posunRolovacejLišty.
static int
posunRolovacejLišty()
Vráti hodnotu posledného rolovania rolovacej lišty.
static String
prikazSkratky()
 Alias pre príkazSkratky.
static String
príkazSkratky()
Vráti príkaz poslednej udalosti klávesovej skratky.
static RolovaciaLista
rolovaciaLista()
 Alias pre rolovaciaLišta.
static RolovaciaLišta
rolovaciaLišta()
Vráti objekt RolovaciaLišta naposledy
 posunutej rolovacej lišty.
static int
rolovanieKolieskomMysiX()
 Alias pre rolovanieKolieskomMyšiX.
static int
rolovanieKolieskomMysiY()
 Alias pre rolovanieKolieskomMyšiY.
static int
rolovanieKolieskomMyšiX()
Vráti počet jednotiek rolovania kolieskom myši v smere x.
static int
rolovanieKolieskomMyšiY()
Vráti počet jednotiek rolovania kolieskom myši v smere osi y.
static double
suradnicaMysiX()
 Alias pre súradnicaMyšiX.
static double
suradnicaMysiY()
 Alias pre súradnicaMyšiY.
static double
súradnicaMyšiX()
Vráti hodnotu x-ovej súradnice myši prepočítanú do súradníc
 plátna.
static double
súradnicaMyšiY()
Vráti hodnotu y-ovej súradnice myši prepočítanú do súradníc
 plátna.
static ActionEvent
tik()
Ak je aktívny časovač,
 tak vráti objekt s informáciami o poslednej udalosti časovača.
static Tlacidlo
tlacidlo()
 Alias pre tlačidlo.
static int
tlacidloMysi()
 Alias pre tlačidloMyši.
static boolean
tlacidloMysi(int ktoré)
 Alias pre tlačidloMyši.
static boolean
tlacidloMysi1()
 Alias pre tlačidloMyši1.
static boolean
tlacidloMysi2()
 Alias pre tlačidloMyši2.
static boolean
tlacidloMysi3()
 Alias pre tlačidloMyši3.
static boolean
tlacidloMysiDole(int ktoré)
 Alias pre tlačidloMyšiDole.
static boolean
tlacidloMysiHore(int ktoré)
 Alias pre tlačidloMyšiHore.
static boolean
tlacidloMysiStlacene(int ktoré)
 Alias pre tlačidloMyšiDole.
static boolean
tlacidloMysiUvolnene(int ktoré)
 Alias pre tlačidloMyšiHore.
static Tlačidlo
tlačidlo()
Vráti objekt Tlačidlo naposledy
 zvoleného tlačidla.
static int
tlačidloMyši()
Vráti poradové číslo tlačidla myši, s ktorým bolo naposledy
 manipulované.
static boolean
tlačidloMyši(int ktoré)
Overí, či bolo naposledy manipulované (či bolo stlačené alebo
 uvoľnené) s tlačidlom myši so zadaným poradovým číslom.
static boolean
tlačidloMyši1()
Je stlačené prvé tlačidlo myši?
static boolean
tlačidloMyši2()
Je stlačené druhé tlačidlo myši?
static boolean
tlačidloMyši3()
Je stlačené tretie tlačidlo myši?
static boolean
tlačidloMyšiDole(int ktoré)
Vráti informáciu o stave požadovaného tlačidla myši.
static boolean
tlačidloMyšiHore(int ktoré)
Vráti informáciu o stave požadovaného tlačidla myši.
static boolean
tlačidloMyšiStlačené(int ktoré)
 Alias pre tlačidloMyšiDole.
static boolean
tlačidloMyšiUvoľnené(int ktoré)
 Alias pre tlačidloMyšiHore.
static AdjustmentEvent
udalostPosunu()
 Alias pre udalosťPosunu.
static AdjustmentEvent
udalosťPosunu()
Vráti objekt poslednej udalosti posunu rolovacej lišty
 (AdjustmentEvent).
static ActionEvent
udalostSkratky()
 Alias pre udalosťSkratky.
static ActionEvent
udalosťSkratky()
Vráti objekt s informáciami o poslednej udalosti klávesovej skratky.
static ActionEvent
udalostSystemovejIkony()
 Alias pre udalosťSystémovejIkony.
static ActionEvent
udalosťSystémovejIkony()
Vráti objekt s informáciami o poslednej udalosti systémovej ikony
 alebo položky jej kontextovej ponuky.
static Plátno
vymazanePlatno()
 Alias pre vymazanéPlátno.
static Plátno
vymazanéPlátno()
Vráti posledné (aktuálne) plátno, ktorého grafika bola vymazaná.
static boolean
vymazanePlatno(Plátno plátno)
 Alias pre vymazanéPlátno.
static boolean
vymazanéPlátno(Plátno plátno)
Overí, či zadané plátno (podlaha alebo
 strop) bolo posledným vymazaným plátnom.
static char
znak()
Vráti znak zadaný pri poslednej udalosti klávesnice.
static boolean
znak(char znak)
Overí či pri poslednej udalosti klávesnice bol zadaný určený
 znak.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti metód
tik
public static ActionEvent tik()
Ak je aktívny časovač,
 tak vráti objekt s informáciami o poslednej udalosti časovača.
 Využiteľné v reakcii ObsluhaUdalostí.tik().
Návratová hodnota:
objekt typu ActionEvent
     s informáciami o poslednej udalosti časovača
Pozri tiež:
Svet.násobTiky(int), 
Svet.spustiČasovač(double), 
ObsluhaUdalostí.tik(), 
GRobot.tik(), 
Svet.tik()
okno
public static ComponentEvent okno()
Vráti objekt s informáciami o poslednej udalosti okna.
 Využiteľné v metódach zobrazenieOkna, skrytieOkna, presunutieOkna alebo zmenaVeľkostiOkna.
Návratová hodnota:
objekt typu ComponentEvent s informáciami o poslednej udalosti okna
aktivitaOkna
public static WindowEvent aktivitaOkna()
Vráti objekt s informáciami o poslednej udalosti okna súvisiacej
 s jeho aktiváciou, deaktiváciou, maximalizáciou, minimalizáciou, obnovením, otvorením alebo zavretím.
 Využiteľné v metódach aktiváciaOkna, deaktiváciaOkna, maximalizovanie, minimalizovanie, obnovenie, otvorenie alebo zavretie.
Návratová hodnota:
objekt typu WindowEvent s informáciami
     o poslednej udalosti okna súvisiacej s jeho aktiváciou, deaktiváciou, maximalizáciou, minimalizáciou, obnovením, otvorením alebo zavretím
položkaPonuky
public static PoložkaPonuky položkaPonuky()
Vráti objekt PoložkaPonuky s naposledy
 zvolenou položkou ponuky. Využiteľné v metóde voľbaPoložkyPonuky.
Návratová hodnota:
objekt typu PoložkaPonuky naposledy
     zvolenej položky ponuky
polozkaPonuky
public static PolozkaPonuky polozkaPonuky()
 Alias pre položkaPonuky.
kontextováPoložka
public static KontextováPoložka kontextováPoložka()
Vráti objekt KontextováPoložka
 s naposledy zvolenou kontextovou položkou. Využiteľné v metóde
 voľbaKontextovejPoložky.
Návratová hodnota:
objekt typu KontextováPoložka
     naposledy zvolenej kontextovej položky
kontextovaPolozka
public static KontextovaPolozka kontextovaPolozka()
 Alias pre kontextováPoložka.
tlačidlo
public static Tlačidlo tlačidlo()
Vráti objekt Tlačidlo naposledy
 zvoleného tlačidla. Využiteľné v metóde voľbaTlačidla.
 Praktický príklad nájdete v opise triedy Tlačidlo.
Návratová hodnota:
objekt typu Tlačidlo naposledy
     zvoleného tlačidla
tlacidlo
public static Tlacidlo tlacidlo()
 Alias pre tlačidlo.
rolovaciaLišta
public static RolovaciaLišta rolovaciaLišta()
Vráti objekt RolovaciaLišta naposledy
 posunutej rolovacej lišty. Využiteľné v metóde zmenaPosunuLišty.
 Praktický príklad nájdete v opise triedy RolovaciaLišta.
Návratová hodnota:
objekt typu RolovaciaLišta naposledy
     posunutej rolovacej lišty
rolovaciaLista
public static RolovaciaLista rolovaciaLista()
 Alias pre rolovaciaLišta.
posunRolovacejLišty
public static int posunRolovacejLišty()
Vráti hodnotu posledného rolovania rolovacej lišty.
 To je využiteľné v metóde zmenaPosunuLišty.
Návratová hodnota:
hodnota posledného posunu rolovacej lišty
posunRolovacejListy
public static int posunRolovacejListy()
 Alias pre posunRolovacejLišty.
udalosťPosunu
public static AdjustmentEvent udalosťPosunu()
Vráti objekt poslednej udalosti posunu rolovacej lišty
 (AdjustmentEvent). Objekt je využiteľný
 v metóde zmenaPosunuLišty.
Návratová hodnota:
objekt poslednej udalosti posunu rolovacej lišty
udalostPosunu
public static AdjustmentEvent udalostPosunu()
 Alias pre udalosťPosunu.
udalosťSystémovejIkony
public static ActionEvent udalosťSystémovejIkony()
Vráti objekt s informáciami o poslednej udalosti systémovej ikony
 alebo položky jej kontextovej ponuky. Využiteľné v metódach voľbaSystémovejIkony
 a voľbaSystémovejPoložky.
Návratová hodnota:
objekt typu ActionEvent s informáciami
     o poslednej udalosti systémovej ikony
udalostSystemovejIkony
public static ActionEvent udalostSystemovejIkony()
 Alias pre udalosťSystémovejIkony.
položkaSystémovejPonuky
public static int položkaSystémovejPonuky()
Vráti index naposledy zvolenej položky kontextovej
 ponuky systémovej ikony. Využiteľné v metóde
 a voľbaSystémovejPoložky. Ak kontextová ponuka nejestvuje,
 metóda vráti hodnotu −1. Index zahŕňa aj prípadné oddeľovače.
Návratová hodnota:
index naposledy zvolenej položky kontextovej ponuky
     systémovej ikony
polozkaSystemovejPonuky
public static int polozkaSystemovejPonuky()
 Alias pre položkaSystémovejPonuky.
klávesnica
public static KeyEvent klávesnica()
Vráti objekt s informáciami o poslednej udalosti klávesnice.
 Využiteľné napríklad v metódach stlačenieKlávesu alebo uvoľnenieKlávesu.
 
 Poznámka: Objekty udalostí klávesnice
 (a myši) umožňujú prístup k ďalším užitočným informáciám o konkrétnej
 udalosti. Jednými z najviac užitočných sú informácie o stlačení
 modifikačných klávesov (alt, ctrl/control, graph alt,
 meta/windows/command, shift) v čase vzniku udalosti. Jednu z možností
 využitia príznakov udalosti myši ponúka príklad v opise metódy pustenieSúboru. Podobne sa dá
 pracovať aj s príznakmi klávesnice.
Návratová hodnota:
objekt typu KeyEvent
     s informáciami o poslednej udalosti klávesnice
Pozri tiež:
kláves(), 
kláves(int), 
znak(), 
znak(char)
klavesnica
public static KeyEvent klavesnica()
 Alias pre klávesnica.
kláves
public static boolean kláves(int kód)
Overí kód klávesu poslednej udalosti klávesnice.
Parametre:
kód – kód klávesu – použiteľné sú kódy definované v triede
     Kláves alebo KeyEvent
Návratová hodnota:
true ak sa zadaný kód zhoduje s kódom
     klávesu naposledy vzniknutej udalosti klávesnice
Pozri tiež:
klávesnica(), 
kláves()
klaves
public static boolean klaves(int kód)
 Alias pre kláves.
kláves
public static int kláves()
Vráti kód klávesu poslednej udalosti klávesnice.
Návratová hodnota:
kód klávesu naposledy vzniknutej udalosti klávesnice – kódy sú zhodné s kódmi
     definovanými v triede Kláves alebo KeyEvent
Pozri tiež:
klávesnica(), 
kláves(int)
klaves
public static int klaves()
 Alias pre kláves.
znak
public static boolean znak(char znak)
Overí či pri poslednej udalosti klávesnice bol zadaný určený
 znak.
Parametre:
znak – znak, ktorého zhodu chceme overiť
Návratová hodnota:
true ak sa zadaný znak zhoduje so
     znakom zadaným pri poslednej vzniknutej udalosti klávesnice
Pozri tiež:
klávesnica(), 
znak()
znak
public static char znak()
Vráti znak zadaný pri poslednej udalosti klávesnice.
Návratová hodnota:
znak naposledy registrovanej udalosti klávesnice
Pozri tiež:
klávesnica(), 
znak(char)
príkazSkratky
public static String príkazSkratky()
Vráti príkaz poslednej udalosti klávesovej skratky.
 Využiteľné v metóde klávesováSkratka.
 
 Poznámka: Príklad použitia nájdete
 napríklad v opise vnorenej triedy Svet.PríkazovýRiadok.
Návratová hodnota:
príkaz poslednej udalosti klávesovej skratky
prikazSkratky
public static String prikazSkratky()
 Alias pre príkazSkratky.
udalosťSkratky
public static ActionEvent udalosťSkratky()
Vráti objekt s informáciami o poslednej udalosti klávesovej skratky.
 Využiteľné v metóde klávesováSkratka.
Návratová hodnota:
objekt typu ActionEvent s informáciami
     o poslednej udalosti klávesovej skratky
udalostSkratky
public static ActionEvent udalostSkratky()
 Alias pre udalosťSkratky.
myš
public static MouseEvent myš()
Vráti objekt s informáciami o poslednej udalosti myši.
 Využiteľné v metódach klik
 stlačenieTlačidlaMyši,
 uvoľnenieTlačidlaMyši,
 pohybMyši
 a ťahanieMyšou.
 
 Poznámka: Objekty udalostí myši
 (a klávesnice) umožňujú prístup k ďalším užitočným informáciám
 o konkrétnej udalosti. Jednými z najviac užitočných sú informácie
 o stlačení modifikačných klávesov (alt, ctrl/control, graph alt,
 meta/windows/command, shift) v čase vzniku udalosti. Jednu z možností
 využitia príznakov udalosti myši ponúka príklad v opise metódy pustenieSúboru. (Podobne sa dá
 pracovať aj s príznakmi klávesnice.)
Návratová hodnota:
objekt typu MouseEvent
     s informáciami o poslednej udalosti myši
Pozri tiež:
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int), 
súradnicaMyšiX(), 
súradnicaMyšiY()
mys
public static MouseEvent mys()
 Alias pre myš.
kolieskoMyši
public static MouseWheelEvent kolieskoMyši()
Vráti spresnenie objektu s informáciami o poslednej udalosti myši,
 ktorá sa dotýkala rolovania kolieskom myši. Táto udalosť je
 rozšírením udalosti MouseEvent, ktorú je možné
 získať metódou myš. Informácie sú využiteľné
 v metóde rolovanieKolieskomMyši.
 
 Poznámka: Objekty udalostí myši
 (a klávesnice) umožňujú prístup k ďalším užitočným informáciám
 o konkrétnej udalosti. Jednými z najviac užitočných sú informácie
 o stlačení modifikačných klávesov (alt, ctrl/control, graph alt,
 meta/windows/command, shift) v čase vzniku udalosti. Jednu z možností
 využitia príznakov udalosti myši ponúka príklad v opise metódy pustenieSúboru. (Podobne sa dá
 pracovať aj s príznakmi klávesnice.)
 
 Nasledujúci príklad sa nevenuje využitiu tejto metódy.
 Namiesto toho ukazuje spôsob použitia metód rolovanieKolieskomMyšiX a rolovanieKolieskomMyšiY (ak nemáte
 horizontálne koliesko (pohybujúce sa v osi x) alebo zariadenie,
 ktoré umožňuje horizontálne rolovanie, skúste použiť súčasne
 s rolovaním vertikálneho kolieska kláves Shift). Príklad
 demonštruje, ako sa dajú tieto metódy využiť na rozhýbanie robota:
 
 
import knižnica.*;
public class RolovanieKolieskom extends GRobot
{
    private int Δx = 0;
    private int Δy = 0;
    private RolovanieKolieskom()
    {
        new ObsluhaUdalostí()
        {
            @Override public void tik()
            {
                otoč(Δx, Δy);
                choď(Δx, Δy);
                Δx = Δy = 0;
            }
            @Override public void rolovanieKolieskomMyši()
            {
                Δx += ÚdajeUdalostí.rolovanieKolieskomMyšiX();
                Δy += ÚdajeUdalostí.rolovanieKolieskomMyšiY();
            }
        };
        Svet.spustiČasovač();
    }
    public static void main(String[] args)
    {
        new RolovanieKolieskom();
    }
}
 
 Výsledok:
 
 
 
  
 
 Pokus o nakreslenie obrázka iba
 s použitímrolovania kolieska myši na OS
 Windows.Pokus o nakreslenie obrázka
 iba s použitímrolovania kolieska myši na macOS (predtým OS X
 a Mac OS).
Návratová hodnota:
spresnený objekt typu MouseWheelEvent s informáciami o poslednej udalosti myši,
     ktorá sa dotýkala rolovania kolieskom myši
Pozri tiež:
myš(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int), 
súradnicaMyšiX(), 
súradnicaMyšiY(), 
rolovanieKolieskomMyšiX(), 
rolovanieKolieskomMyšiY()
kolieskoMysi
public static MouseWheelEvent kolieskoMysi()
 Alias pre kolieskoMyši.
rolovanieKolieskomMyšiX
public static int rolovanieKolieskomMyšiX()
Vráti počet jednotiek rolovania kolieskom myši v smere x.
 Volanie tejto metódy má význam len v reakcii rolovanieKolieskomMyši
 obsluhy udalostí. Kladná hodnota znamená doprava, záporná doľava.
 
 Príklad použitia tejto metódy sa nachádza v opise metódy
 kolieskoMyši().
Návratová hodnota:
počet jednotiek rolovania kolieskom myši v smere x;
     kladná hodnota znamená doprava, záporná doľava
Pozri tiež:
kolieskoMyši(), 
ObsluhaUdalostí.rolovanieKolieskomMyši()
rolovanieKolieskomMysiX
public static int rolovanieKolieskomMysiX()
 Alias pre rolovanieKolieskomMyšiX.
rolovanieKolieskomMyšiY
public static int rolovanieKolieskomMyšiY()
Vráti počet jednotiek rolovania kolieskom myši v smere osi y.
 Volanie tejto metódy má význam len v reakcii rolovanieKolieskomMyši
 obsluhy udalostí. Kladná hodnota znamená hore, záporná dole, čo
 je v súlade so súradnicovým priestorom rámca, ale v protiklade
 s hodnotou vrátenou systémom (metódou kolieskoMyši().getWheelRotation()).
 
 Príklad použitia tejto metódy sa nachádza v opise metódy
 kolieskoMyši().
Návratová hodnota:
počet jednotiek rolovania kolieskom myši v smere y;
     kladná hodnota znamená hore, záporná dole (v súlade so
     súradnicovým priestorom rámca)
Pozri tiež:
kolieskoMyši(), 
ObsluhaUdalostí.rolovanieKolieskomMyši()
rolovanieKolieskomMysiY
public static int rolovanieKolieskomMysiY()
 Alias pre rolovanieKolieskomMyšiY.
súradnicaMyšiX
public static double súradnicaMyšiX()
Vráti hodnotu x-ovej súradnice myši prepočítanú do súradníc
 plátna. Dáva presnejší výsledok ako súradnice získané cez metódy
 ÚdajeUdalostí.myš().getX() a ÚdajeUdalostí.myš().getY().
Návratová hodnota:
hodnota x-ovej súradnice myši
Pozri tiež:
myš(), 
súradnicaMyšiY(), 
poslednáSúradnicaMyšiX()
suradnicaMysiX
public static double suradnicaMysiX()
 Alias pre súradnicaMyšiX.
súradnicaMyšiY
public static double súradnicaMyšiY()
Vráti hodnotu y-ovej súradnice myši prepočítanú do súradníc
 plátna. Dáva presnejší výsledok ako súradnice získané cez metódy
 ÚdajeUdalostí.myš().getX() a ÚdajeUdalostí.myš().getY().
Návratová hodnota:
hodnota y-ovej súradnice myši
Pozri tiež:
myš(), 
súradnicaMyšiX(), 
poslednáSúradnicaMyšiY()
suradnicaMysiY
public static double suradnicaMysiY()
 Alias pre súradnicaMyšiY.
polohaMyšiX
public static double polohaMyšiX()
 Alias pre súradnicaMyšiX.
polohaMysiX
public static double polohaMysiX()
 Alias pre polohaMyšiX.
polohaMyšiY
public static double polohaMyšiY()
 Alias pre súradnicaMyšiY.
polohaMysiY
public static double polohaMysiY()
 Alias pre polohaMyšiY.
polohaMyši
public static Bod polohaMyši()
Vráti polohu kurzora myši prepočítanú do súradníc plátna.
Návratová hodnota:
aktuálna poloha kurzora myši
Pozri tiež:
súradnicaMyšiX(), 
súradnicaMyšiY(), 
poslednáPolohaMyši()
polohaMysi
public static Bod polohaMysi()
 Alias pre polohaMyši.
poslednáSúradnicaMyšiX
public static double poslednáSúradnicaMyšiX()
Vráti hodnotu poslednej x-ovej súradnice myši prepočítanú do
 súradníc plátna. Ide o hodnotu súradnice myši pred poslednou
 zmenou. Takto sa dá overiť miera prípadného posunutia kurzora
 myši pri dvoch po sebe nasledujúcich udalostiach myši.
Návratová hodnota:
hodnota poslednej x-ovej súradnice myši
Pozri tiež:
súradnicaMyšiX(), 
poslednáSúradnicaMyšiY()
poslednaSuradnicaMysiX
public static double poslednaSuradnicaMysiX()
 Alias pre poslednáSúradnicaMyšiX.
poslednáSúradnicaMyšiY
public static double poslednáSúradnicaMyšiY()
Vráti hodnotu poslednej y-ovej súradnice myši prepočítanú do
 súradníc plátna. Ide o hodnotu súradnice myši pred poslednou
 zmenou. Takto sa dá overiť miera prípadného posunutia kurzora
 myši pri dvoch po sebe nasledujúcich udalostiach myši.
Návratová hodnota:
hodnota poslednej y-ovej súradnice myši
Pozri tiež:
súradnicaMyšiY(), 
poslednáSúradnicaMyšiX()
poslednaSuradnicaMysiY
public static double poslednaSuradnicaMysiY()
 Alias pre poslednáSúradnicaMyšiY.
poslednáPolohaMyšiX
public static double poslednáPolohaMyšiX()
 Alias pre poslednáSúradnicaMyšiX.
poslednaPolohaMysiX
public static double poslednaPolohaMysiX()
 Alias pre poslednáPolohaMyšiX.
poslednáPolohaMyšiY
public static double poslednáPolohaMyšiY()
 Alias pre poslednáSúradnicaMyšiY.
poslednaPolohaMysiY
public static double poslednaPolohaMysiY()
 Alias pre poslednáPolohaMyšiY.
poslednáPolohaMyši
public static Bod poslednáPolohaMyši()
Vráti polohu kurzora myši pred poslednou zmenou. (Poloha je
 prepočítaná do súradníc plátna.)
Návratová hodnota:
aktuálna poloha kurzora myši
Pozri tiež:
poslednáSúradnicaMyšiX(), 
poslednáSúradnicaMyšiY(), 
polohaMyši()
poslednaPolohaMysi
public static Bod poslednaPolohaMysi()
 Alias pre poslednáPolohaMyši.
tlačidloMyši1
public static boolean tlačidloMyši1()
Je stlačené prvé tlačidlo myši?
Návratová hodnota:
true/&#8203;false – podľa toho, či je
     tlačidlo stlačené alebo nie
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int)
tlacidloMysi1
public static boolean tlacidloMysi1()
 Alias pre tlačidloMyši1.
tlačidloMyši2
public static boolean tlačidloMyši2()
Je stlačené druhé tlačidlo myši?
Návratová hodnota:
true/&#8203;false – podľa toho, či je
     tlačidlo stlačené alebo nie
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int)
tlacidloMysi2
public static boolean tlacidloMysi2()
 Alias pre tlačidloMyši2.
tlačidloMyši3
public static boolean tlačidloMyši3()
Je stlačené tretie tlačidlo myši?
Návratová hodnota:
true/&#8203;false – podľa toho, či je
     tlačidlo stlačené alebo nie
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int)
tlacidloMysi3
public static boolean tlacidloMysi3()
 Alias pre tlačidloMyši3.
tlačidloMyšiDole
public static boolean tlačidloMyšiDole(int ktoré)
Vráti informáciu o stave požadovaného tlačidla myši. Ak je
 požadované tlačidlo dole (stlačené), je návratová hodnota true, inak false.
Parametre:
ktoré – poradové číslo tlačidla myši: 1 až 3 – ĽAVÉ, STREDNÉ,
     PRAVÉ
Návratová hodnota:
true ak je stanovené tlačidlo stlačené,
     v opačnom prípade false; ak je parameter
     ktoré mimo povolených hodnôt (1 – 3), metóda vráti
     false
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiHore(int), 
tlačidloMyši(), 
tlačidloMyši(int)
tlacidloMysiDole
public static boolean tlacidloMysiDole(int ktoré)
 Alias pre tlačidloMyšiDole.
tlačidloMyšiStlačené
public static boolean tlačidloMyšiStlačené(int ktoré)
 Alias pre tlačidloMyšiDole.
tlacidloMysiStlacene
public static boolean tlacidloMysiStlacene(int ktoré)
 Alias pre tlačidloMyšiDole.
tlačidloMyšiHore
public static boolean tlačidloMyšiHore(int ktoré)
Vráti informáciu o stave požadovaného tlačidla myši. Ak je
 požadované tlačidlo hore (uvoľnené), je návratová hodnota true, inak false.
Parametre:
ktoré – poradové číslo tlačidla myši: 1 až 3 – ĽAVÉ, STREDNÉ,
     PRAVÉ
Návratová hodnota:
true ak je stanovené tlačidlo uvoľnené,
     v opačnom prípade false; ak je parameter
     ktoré mimo povolených hodnôt (1 – 3), metóda vráti
     true
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyši(), 
tlačidloMyši(int)
tlacidloMysiHore
public static boolean tlacidloMysiHore(int ktoré)
 Alias pre tlačidloMyšiHore.
tlačidloMyšiUvoľnené
public static boolean tlačidloMyšiUvoľnené(int ktoré)
 Alias pre tlačidloMyšiHore.
tlacidloMysiUvolnene
public static boolean tlacidloMysiUvolnene(int ktoré)
 Alias pre tlačidloMyšiHore.
tlačidloMyši
public static int tlačidloMyši()
Vráti poradové číslo tlačidla myši, s ktorým bolo naposledy
 manipulované. (Či už bolo stlačené alebo uvoľnené.)
Návratová hodnota:
0 – so žiadnym; 1 až 3 – ĽAVÉ,
     STREDNÉ, PRAVÉ
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši(int)
tlacidloMysi
public static int tlacidloMysi()
 Alias pre tlačidloMyši.
tlačidloMyši
public static boolean tlačidloMyši(int ktoré)
Overí, či bolo naposledy manipulované (či bolo stlačené alebo
 uvoľnené) s tlačidlom myši so zadaným poradovým číslom.
Parametre:
ktoré – 0 – žiadne; 1 až 3 – ĽAVÉ,
     STREDNÉ, PRAVÉ
Pozri tiež:
myš(), 
kolieskoMyši(), 
tlačidloMyši1(), 
tlačidloMyši2(), 
tlačidloMyši3(), 
tlačidloMyšiDole(int), 
tlačidloMyšiHore(int), 
tlačidloMyši()
tlacidloMysi
public static boolean tlacidloMysi(int ktoré)
 Alias pre tlačidloMyši.
vymazanéPlátno
public static Plátno vymazanéPlátno()
Vráti posledné (aktuálne) plátno, ktorého grafika bola vymazaná.
 Táto informácia je aktualizovaná vždy a výhradne pred volaním
 reakcie vymazanie pre ktorú
 je táto informácia primárne určená. Odporúča sa použiť túto metódu
 práve v nej.
Návratová hodnota:
plátno, ktorého grafika bola naposledy
     vymazaná (podlaha alebo strop)
Pozri tiež:
ObsluhaUdalostí.vymazanie()
vymazanePlatno
public static Plátno vymazanePlatno()
 Alias pre vymazanéPlátno.
vymazanéPlátno
public static boolean vymazanéPlátno(Plátno plátno)
Overí, či zadané plátno (podlaha alebo
 strop) bolo posledným vymazaným plátnom.
 Informácia o tom, ktoré plátno bolo vymazané, je aktualizovaná
 vždy a výhradne pred volaním reakcie
 vymazanie pre ktorú je táto
 informácia primárne určená. Odporúča sa použiť túto metódu práve
 v nej.
Parametre:
plátno – plátno na overenie toho, či
     práve jeho grafila bola naposledy vymazaná
Návratová hodnota:
true ak sa zadané plátno zhoduje s tým, ktoré
     bolo vymazané naposledy
Pozri tiež:
ObsluhaUdalostí.vymazanie()
vymazanePlatno
public static boolean vymazanePlatno(Plátno plátno)
 Alias pre vymazanéPlátno.
poslednýOdkaz
public static String poslednýOdkaz()
Vráti text cieľa (adresu) posledného aktivovaného odkazu
 poznámkového bloku. To je yužiteľné v metóde aktiváciaOdkazu.
Návratová hodnota:
text cieľa (adresa) naposledy aktivovaného hypertextového
     odkazu v niektorom poznámkovom bloku
poslednyOdkaz
public static String poslednyOdkaz()
 Alias pre poslednýOdkaz.
poslednýPoznámkovýBlok
public static PoznámkovýBlok poslednýPoznámkovýBlok()
Vráti objekt toho poznámkového
 bloku, v ktorom bol naposledy aktivovaný (hypertextový) odkaz.
 To je využiteľné napríklad v metóde aktiváciaOdkazu.
Návratová hodnota:
text naposledy aktivovaného hypertextového odkazu
     v niektorom poznámkovom bloku
poslednyPoznamkovyBlok
public static PoznámkovýBlok poslednyPoznamkovyBlok()
 Alias pre poslednýPoznámkovýBlok.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":9,"i2":10,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9,"i19":10,"i20":10,"i21":10,"i22":10,"i23":9,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":9,"i30":10,"i31":10,"i32":10,"i33":9,"i34":10,"i35":9,"i36":9,"i37":9,"i38":9,"i39":9,"i40":9,"i41":9,"i42":9,"i43":9,"i44":9,"i45":9,"i46":9,"i47":9,"i48":9};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Uhol
java.lang.Object
java.lang.Number
Uhol
Všetky implementované rozhrania:
Serializable, Comparable&lt;Uhol&gt;, Smer
public final class Uhol
extends Number
implements Comparable&lt;Uhol&gt;, Smer
Táto trieda uchováva hodnotu uhla použiteľnú na rôznych miestach
 programovacieho rámca. Trieda je odvoedená od triedy javy Number, implementuje rozhrania Comparable a Smer, čo všetko zvyšuje jej univerzálnosť a použiteľnosť. Statická
 metóda vyberSmer (a jej klony) otvorí dialóg na
 grafický výber uhla. Rovnaký grafický komponent je použitý
 v konfigurovateľnom dialógu na vstup (a úpravu) údajov dostupnom cez triedu Svet.
 
 
Pozri tiež:
Serializovateľnosť
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static int
BYTES
Počet bajtov použitých na reprezentáciu hodnoty uloženej
 v inštanciách tohto údajového typu (tejto triedy).
static int
MAX_EXPONENT
Najväčší technicky dovolený exponent konečného čísla premenných
 tohto údajového typu: 1023.
static double
MAX_VALUE
Konštanta vyjadrujúca teoretickú maximálnu hodnotu uhla:
 (2 − 2−52) · 21023.
static int
MIN_EXPONENT
Najmenší technicky dovolený exponent normalizovaného čísla
 premenných tohto údajového typu: -1022.
static double
MIN_NORMAL
Konštanta vyjadrujúca najmenšiu pozitívnu normálnu hodnotu tohto
 údajového typu: 2−1022.
static double
MIN_VALUE
Konštanta vyjadrujúca najmenšiu pozitívnu nenulovú hodnotu tohto
 údajového typu: 2−1074.
static int
SIZE
Počet bitov použitých na reprezentáciu hodnoty uloženej
 v inštanciách tohto údajového typu (tejto triedy): 64.
static Class&lt;Double&gt;
TYPE
Inštancia triedy Class reprezentujúca
 primitívny údajový typ double, ktorý je použitý na
 uchovanie hodnoty uhlov (inštancií tejto triedy).
Atribúty zdedené z rozhrania Smer
JUH, JUHOVYCHOD, JUHOVÝCHOD, JUHOZAPAD, JUHOZÁPAD, SEVER, SEVEROVYCHOD, SEVEROVÝCHOD, SEVEROZAPAD, SEVEROZÁPAD, VYCHOD, VÝCHOD, ZAPAD, ZÁPAD
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Uhol(double hodnota)
Konštruktor uhla prijímajúci reálnočíselnú hodnotu typu
 double (alebo kompatibilného).
Uhol(String s)
Konštruktor uhla prijímajúci hodnotu uhla v reťazcovej podobe.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
byte
byteValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 byte a vráti výsledok.
static int
compare(double u1,
       double u2)
Porovná dve zadané reálnočíselné hodnoty (uhlov) v súlade
 s algoritmom metódy Double.
int
compareTo(Uhol inýUhol)
Porovná hodnotu tejto inštancie s hodnotou zadanej inštancie.
static Uhol
dialogVolbaSmeru()
 Alias pre zvoľSmer.
static Uhol
dialógVoľbaSmeru()
 Alias pre zvoľSmer.
static Uhol
dialogVolbaSmeru(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
dialógVoľbaSmeru(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
dialogVolbaSmeru(String titulok)
 Alias pre zvoľSmer.
static Uhol
dialógVoľbaSmeru(String titulok)
 Alias pre zvoľSmer.
static Uhol
dialogVolbaSmeru(String titulok,
                Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
dialógVoľbaSmeru(String titulok,
                Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
dialogVyberSmeru()
 Alias pre vyberSmer.
static Uhol
dialógVýberSmeru()
 Alias pre vyberSmer.
static Uhol
dialogVyberSmeru(Smer počiatočnýSmer)
 Alias pre vyberSmer.
static Uhol
dialógVýberSmeru(Smer počiatočnýSmer)
 Alias pre vyberSmer.
static Uhol
dialogVyberSmeru(String titulok)
 Alias pre vyberSmer.
static Uhol
dialógVýberSmeru(String titulok)
 Alias pre vyberSmer.
static Uhol
dialogVyberSmeru(String titulok,
                Smer počiatočnýSmer)
 Alias pre vyberSmer.
static Uhol
dialógVýberSmeru(String titulok,
                Smer počiatočnýSmer)
 Alias pre vyberSmer.
double
doubleValue()
Vráti hodnotu uhla tejto inštancie, ktorá má primitívny údajový typ
 double.
boolean
equals(Object objekt)
Prijme ľubovoľnú inštanciu, overí, či ide o inštanciu triedy
 Uhol a ak áno, tak vyhodnotí jej zhodu s hodnotou tejto
 inštancie uhla.
float
floatValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 float a vráti výsledok.
int
hashCode()
Vytvorí hešovací kód pre túto inštanciu.
static int
hashCode(double hodnota)
Vytvorí hešovací kód pre zadanú reálnočíselnú hodnotu
 (reprezentujúcu uhol).
int
intValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 int a vráti výsledok.
boolean
isFinite()
Vráti true, ak je hodnota uhla uložená v tejto inštancii
 konečnou reálnočíselnou hodnotou (typu double).
boolean
isInfinite()
Vráti true v prípade, že hodnota uhla uložená v tejto
 inštancii má nekonečnú veľkosť a false v opačnom
 prípade.
boolean
isNaN()
Táto metóda vráti true v prípade, že vnútorná hodnota
 uhla v tejto inštancii má hodnotu 
NaN (Not-a-Number – „nie je číslo“)
 a false v opačnom prípade.
long
longValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 long a vráti výsledok.
static double
parseUhol(String s)
Prevedie zadaný reťazec na číselnú hodnotu uhla s použitím rovnakých
 pravidiel ako konštruktor Uhol(s).
short
shortValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 short a vráti výsledok.
double
smer()
Implementácia prototypu metódy na zistenie smeru/uhla objektu.
String
toString()
Prevedie hodnotu tejto inštancie na reťazec s použitím metódy
 inštancie Svet.formát.
static String
toString(double d)
Prevedie zadanú reálnočíselnú hodnotu uhla na reťazec s použitím
 metódy inštancie Svet.formát.
double
uhol()
Implementácia prototypu metódy na zistenie uhla/smeru objektu.
static Uhol
valueOf(double d)
Vytvorí novú inštanciu uhla s použitím konštruktora
 Uhol(d).
static Uhol
valueOf(String s)
Vytvorí novú inštanciu uhla s použitím konštruktora
 Uhol(s).
static Uhol
vyberSmer()
Otvorí dialóg na výber smeru.
static Uhol
vyberSmer(Smer počiatočnýSmer)
Otvorí dialóg na výber smeru.
static Uhol
vyberSmer(String titulok)
Otvorí dialóg na výber smeru.
static Uhol
vyberSmer(String titulok,
         Smer počiatočnýSmer)
Otvorí dialóg na výber smeru.
static Uhol
zvolSmer()
 Alias pre zvoľSmer.
static Uhol
zvoľSmer()
Otvorí dialóg na výber smeru.
static Uhol
zvolSmer(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
zvoľSmer(Smer počiatočnýSmer)
Otvorí dialóg na výber smeru.
static Uhol
zvolSmer(String titulok)
 Alias pre zvoľSmer.
static Uhol
zvoľSmer(String titulok)
Otvorí dialóg na výber smeru.
static Uhol
zvolSmer(String titulok,
        Smer počiatočnýSmer)
 Alias pre zvoľSmer.
static Uhol
zvoľSmer(String titulok,
        Smer počiatočnýSmer)
Otvorí dialóg na výber smeru.
Metódy zdedené z triedy java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait
Podrobnosti atribútov
MAX_VALUE
public static final double MAX_VALUE
Konštanta vyjadrujúca teoretickú maximálnu hodnotu uhla:
 (2 − 2−52) · 21023. Táto hodnota je ekvivalentná
 nasledujúcemu literálu zapísaného v šestnástkovej sústave:
 0x1.fffffffffffffP+1023.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 MAX_VALUE. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
MIN_NORMAL
public static final double MIN_NORMAL
Konštanta vyjadrujúca najmenšiu pozitívnu normálnu hodnotu tohto
 údajového typu: 2−1022. Táto hodnota je ekvivalentná
 nasledujúcemu literálu zapísaného v šestnástkovej sústave:
 0x1.0p-1022.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 MIN_NORMAL. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
MIN_VALUE
public static final double MIN_VALUE
Konštanta vyjadrujúca najmenšiu pozitívnu nenulovú hodnotu tohto
 údajového typu: 2−1074. Táto hodnota je ekvivalentná
 nasledujúcemu literálu zapísaného v šestnástkovej sústave:
 0x0.0000000000001P-1022.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 MIN_VALUE. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
MAX_EXPONENT
public static final int MAX_EXPONENT
Najväčší technicky dovolený exponent konečného čísla premenných
 tohto údajového typu: 1023.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 MAX_EXPONENT. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
MIN_EXPONENT
public static final int MIN_EXPONENT
Najmenší technicky dovolený exponent normalizovaného čísla
 premenných tohto údajového typu: -1022.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 MIN_EXPONENT. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
SIZE
public static final int SIZE
Počet bitov použitých na reprezentáciu hodnoty uloženej
 v inštanciách tohto údajového typu (tejto triedy): 64.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 SIZE. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
BYTES
public static final int BYTES
Počet bajtov použitých na reprezentáciu hodnoty uloženej
 v inštanciách tohto údajového typu (tejto triedy). Hodnota je rovná
 výsledku výpočtu: SIZE / Byte.SIZE.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 BYTES. Oracle. Citované: 2018.
Pozri tiež:
Hodnoty konštánt
TYPE
public static final Class&lt;Double&gt; TYPE
Inštancia triedy Class reprezentujúca
 primitívny údajový typ double, ktorý je použitý na
 uchovanie hodnoty uhlov (inštancií tejto triedy).
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 TYPE. Oracle. Citované: 2018.
Podrobnosti konštruktorov
Uhol
public Uhol(double hodnota)
Konštruktor uhla prijímajúci reálnočíselnú hodnotu typu
 double (alebo kompatibilného).
Parametre:
hodnota – hodnota tohto uhla
Uhol
public Uhol(String s)
     throws NumberFormatException
Konštruktor uhla prijímajúci hodnotu uhla v reťazcovej podobe.
 Reťazec je prevedený na reálne číslo typu double
 s použitím metódy rámca reťazecNaReálneČíslo, pričom je navyše povolené, aby bol reťazec
 ukončený znakom stupňa (°), ktorý je pred prevodom vymazaný. Iné
 znaky používané pri zápisoch uhlov (minúty ′, sekundy ″, prípadne
 iné) nie sú v súčasnosti povolené.
Parametre:
s – reťazec, ktorý bude prevedený na reálne číslo s nepovinným
     uvedením znaku stupňa (°) na konci
Výnimky:
NumberFormatException
Podrobnosti metód
isNaN
public boolean isNaN()
Táto metóda vráti true v prípade, že vnútorná hodnota
 uhla v tejto inštancii má hodnotu 
NaN (Not-a-Number – „nie je číslo“)
 a false v opačnom prípade.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 isNaN. Oracle. Citované: 2018.
Návratová hodnota:
true ak je hodnota reprezentovaná touto inštanciou 
NaN, false v opačnom prípade
isInfinite
public boolean isInfinite()
Vráti true v prípade, že hodnota uhla uložená v tejto
 inštancii má nekonečnú veľkosť a false v opačnom
 prípade.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 isInfinite. Oracle. Citované: 2018.
Návratová hodnota:
true, ak je hodnota uhla tejto inštancie kladné
     alebo záporné nekonečno; false v opačnom prípade
isFinite
public boolean isFinite()
Vráti true, ak je hodnota uhla uložená v tejto inštancii
 konečnou reálnočíselnou hodnotou (typu double). To znamená,
 že ak je hodnota v tejto inštancii rovná napríklad 
NaN alebo niektoré nekonečno (kladné,
 záporné), tak metóda vráti false.
 
 Zdroj:
 
 
Double (Java Platform SE 8) –
 isFinite(d) (static version). Oracle. Citované:
 2018.
Návratová hodnota:
true, ak je hodnota uhla tejto inštancie konečná;
     false v opačnom prípade
toString
public String toString()
Prevedie hodnotu tejto inštancie na reťazec s použitím metódy
 inštancie Svet.formát.format a pripojí na koniec
 výsledného reťazca znak stupňa (°).
Prekrývanie:
táto metóda prekrýva originálnu metódu toString v triede Object
Návratová hodnota:
hodnota uložená v tejto inštancii uhla prevedená na reťazec
byteValue
public byte byteValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 byte a vráti výsledok. (Táto metóda prekrýva metódu
 rodičovskej triedy Number.)
Prekrývanie:
táto metóda prekrýva originálnu metódu byteValue v triede Number
Návratová hodnota:
vráti uhol konvertovaný na typ byte (pôvodná
     hodnota uhla nie je nijako prispôsobená; riziko straty údajov
     je vysoké)
shortValue
public short shortValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 short a vráti výsledok. (Táto metóda prekrýva metódu
 rodičovskej triedy Number.)
Prekrývanie:
táto metóda prekrýva originálnu metódu shortValue v triede Number
Návratová hodnota:
vráti uhol konvertovaný na typ short
intValue
public int intValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 int a vráti výsledok. (Táto metóda je súčasťou
 implementácie abstraktnej triedy Number.)
Definované:
intValue v triede Number
Návratová hodnota:
vráti uhol konvertovaný na typ int
longValue
public long longValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 long a vráti výsledok. (Táto metóda je súčasťou
 implementácie abstraktnej triedy Number.)
Definované:
longValue v triede Number
Návratová hodnota:
vráti uhol konvertovaný na typ long
floatValue
public float floatValue()
Vykoná primitívnu typovú konverziu údajového typu double,
 ktorý vnútorne uchováva hodnotu uhla tejto inštancie, na primitívny typ
 float a vráti výsledok. (Táto metóda je súčasťou
 implementácie abstraktnej triedy Number.)
Definované:
floatValue v triede Number
Návratová hodnota:
vráti uhol konvertovaný na typ float
doubleValue
public double doubleValue()
Vráti hodnotu uhla tejto inštancie, ktorá má primitívny údajový typ
 double. (Táto metóda je zároveň súčasťou implementácie
 abstraktnej triedy Number.)
Definované:
doubleValue v triede Number
Návratová hodnota:
hodnota uhla tejto inštancie
Pozri tiež:
uhol(), 
smer()
hashCode
public int hashCode()
Vytvorí hešovací kód pre túto inštanciu. Metóda využíva svoju
 statickú verziu hashCode.
Prekrývanie:
táto metóda prekrýva originálnu metódu hashCode v triede Object
Návratová hodnota:
heš tejto inštancie uhla
equals
public boolean equals(Object objekt)
Prijme ľubovoľnú inštanciu, overí, či ide o inštanciu triedy
 Uhol a ak áno, tak vyhodnotí jej zhodu s hodnotou tejto
 inštancie uhla. Ak sú hodnoty uhlov tejto a zadanej inštancie zhodné,
 tak metóda vráti hodnotu true, inak vráti hodnotu
 false
Prekrývanie:
táto metóda prekrýva originálnu metódu equals v triede Object
Parametre:
objekt – objekt ľubovoľnej inštancie, s ktorým má byť
     vyhodnotená zhoda
Návratová hodnota:
ak je zadaná inštancia typu Uhol a hodnoty uhlov
     tejto aj zadanej inštancie sú zhodné, tak je vrátená hodnota
     true, inak false
compareTo
public int compareTo(Uhol inýUhol)
Porovná hodnotu tejto inštancie s hodnotou zadanej inštancie.
 Vrátený výsledok bude v súlade s algoritmom metódy Double.compare.
Definované:
compareTo v rozhraní Comparable&lt;Uhol&gt;
Parametre:
inýUhol – inštancia iného uhla na porovnanie
Návratová hodnota:
výsledok v súlade s algoritmom metódy Double.compare
compare
public static int compare(double u1,
                          double u2)
Porovná dve zadané reálnočíselné hodnoty (uhlov) v súlade
 s algoritmom metódy Double.compare.
Parametre:
u1 – hodnota prvého uhla na porovnanie
u1 – hodnota druhého uhla na porovnanie
Návratová hodnota:
výsledok v súlade s algoritmom metódy Double.compare
uhol
public double uhol()
Implementácia prototypu metódy na zistenie uhla/smeru objektu.
Definované:
uhol v rozhraní Smer
Návratová hodnota:
hodnota uhla (smeru) uložená v tejto inštancii
Pozri tiež:
doubleValue(), 
smer()
smer
public double smer()
Implementácia prototypu metódy na zistenie smeru/uhla objektu.
Definované:
smer v rozhraní Smer
Návratová hodnota:
hodnota smeru (uhla) uložená v tejto inštancii
Pozri tiež:
doubleValue(), 
uhol()
toString
public static String toString(double d)
Prevedie zadanú reálnočíselnú hodnotu uhla na reťazec s použitím
 metódy inštancie Svet.formát.format, pričom pripojí na
 koniec výsledného reťazca znak stupňa (°).
Parametre:
d – reálnočíselná hodnota uhla, ktorá má byť prevedená na reťazec
Návratová hodnota:
zadaná hodnota uhla prevedená na reťazec
Výnimky:
NumberFormatException
valueOf
public static Uhol valueOf(String s)
                    throws NumberFormatException
Vytvorí novú inštanciu uhla s použitím konštruktora
 Uhol(s).
Parametre:
s – reťazec, z ktorého bude vytvorená nová inštancia uhla
Návratová hodnota:
nová inštancia uhla
Výnimky:
NumberFormatException
valueOf
public static Uhol valueOf(double d)
Vytvorí novú inštanciu uhla s použitím konštruktora
 Uhol(d).
Parametre:
d – hodnota novej inštancie uhla
Návratová hodnota:
nová inštancia uhla
parseUhol
public static double parseUhol(String s)
                        throws NumberFormatException
Prevedie zadaný reťazec na číselnú hodnotu uhla s použitím rovnakých
 pravidiel ako konštruktor Uhol(s). Túto metódu
 vnútorne používa aj panel smeru slúžiaci na grafickú voľbu uhla –
 pozri napríklad metódu vyberSmer.
Parametre:
s – reťazec reprezentujúci uhol, ktorý bude prevedený na
     reálnočíselnú hodnotu
Návratová hodnota:
prevedená číselná hodnota uhla
Výnimky:
NumberFormatException
hashCode
public static int hashCode(double hodnota)
Vytvorí hešovací kód pre zadanú reálnočíselnú hodnotu
 (reprezentujúcu uhol).
Parametre:
hodnota – hodnota (ktorá by mala reprezentovať uhol)
Návratová hodnota:
heš vytvorený zo zadanej hodnoty
vyberSmer
public static Uhol vyberSmer()
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda zvoľSmer. Predvoleným smerom v otvorenom
 dialógu bude hodnota 90°. Po zvolení želaného smeru používateľom,
 vráti metóda zvolený smer v novom objekte typu Uhol.
 Ak používateľ dialóg zruší, tak metóda vráti hodnotu
 null.
Návratová hodnota:
zvolený smer alebo null
dialógVýberSmeru
public static Uhol dialógVýberSmeru()
 Alias pre vyberSmer.
dialogVyberSmeru
public static Uhol dialogVyberSmeru()
 Alias pre vyberSmer.
vyberSmer
public static Uhol vyberSmer(Smer počiatočnýSmer)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda zvoľSmer. Otvorený dialóg bude mať predvolený
 zadaný smer (argument počiatočnýSmer). Po zvolení želaného
 smeru používateľom, vráti metóda zvolený smer v novom objekte typu
 Uhol. Ak používateľ dialóg zruší, tak metóda vráti
 hodnotu null.
Parametre:
počiatočnýSmer – predvolený smer v novo otvorenom dialógu
Návratová hodnota:
zvolený smer alebo null
dialógVýberSmeru
public static Uhol dialógVýberSmeru(Smer počiatočnýSmer)
 Alias pre vyberSmer.
dialogVyberSmeru
public static Uhol dialogVyberSmeru(Smer počiatočnýSmer)
 Alias pre vyberSmer.
vyberSmer
public static Uhol vyberSmer(String titulok)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda zvoľSmer. Predvoleným smerom v otvorenom
 dialógu bude hodnota 90°. Po zvolení želaného smeru používateľom,
 vráti metóda zvolený smer v novom objekte typu Uhol.
 Ak používateľ dialóg zruší, tak metóda vráti hodnotu null.
 Programátor má možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
Návratová hodnota:
zvolený smer alebo null
dialógVýberSmeru
public static Uhol dialógVýberSmeru(String titulok)
 Alias pre vyberSmer.
dialogVyberSmeru
public static Uhol dialogVyberSmeru(String titulok)
 Alias pre vyberSmer.
vyberSmer
public static Uhol vyberSmer(String titulok,
                             Smer počiatočnýSmer)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda zvoľSmer. Otvorený dialóg bude mať predvolený
 zadaný smer (argument počiatočnýSmer). Po zvolení želaného
 smeru používateľom, vráti metóda zvolený smer v novom objekte typu
 Uhol. Ak používateľ dialóg zruší, tak metóda vráti
 hodnotu null. Programátor má možnosť zvoliť vlastný titulok
 dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
počiatočnýSmer – predvolený smer v novo otvorenom dialógu
Návratová hodnota:
zvolený smer alebo null
dialógVýberSmeru
public static Uhol dialógVýberSmeru(String titulok,
                                    Smer počiatočnýSmer)
 Alias pre vyberSmer.
dialogVyberSmeru
public static Uhol dialogVyberSmeru(String titulok,
                                    Smer počiatočnýSmer)
 Alias pre vyberSmer.
zvoľSmer
public static Uhol zvoľSmer()
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda vyberSmer. Predvoleným smerom v otvorenom
 dialógu bude hodnota 90°. Po zvolení želaného smeru používateľom,
 vráti metóda zvolený smer v novom objekte typu Uhol.
 Ak používateľ dialóg zruší, tak metóda vráti hodnotu
 null.
Návratová hodnota:
zvolený smer alebo null
zvolSmer
public static Uhol zvolSmer()
 Alias pre zvoľSmer.
dialógVoľbaSmeru
public static Uhol dialógVoľbaSmeru()
 Alias pre zvoľSmer.
dialogVolbaSmeru
public static Uhol dialogVolbaSmeru()
 Alias pre zvoľSmer.
zvoľSmer
public static Uhol zvoľSmer(Smer počiatočnýSmer)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda vyberSmer. Otvorený dialóg bude mať predvolený
 zadaný smer (argument počiatočnýSmer). Po zvolení želaného
 smeru používateľom, vráti metóda zvolený smer v novom objekte typu
 Uhol. Ak používateľ dialóg zruší, tak metóda vráti
 hodnotu null.
Parametre:
počiatočnýSmer – predvolený smer v novo otvorenom dialógu
Návratová hodnota:
zvolený smer alebo null
zvolSmer
public static Uhol zvolSmer(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
dialógVoľbaSmeru
public static Uhol dialógVoľbaSmeru(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
dialogVolbaSmeru
public static Uhol dialogVolbaSmeru(Smer počiatočnýSmer)
 Alias pre zvoľSmer.
zvoľSmer
public static Uhol zvoľSmer(String titulok)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda vyberSmer. Predvoleným smerom v otvorenom
 dialógu bude hodnota 90°. Po zvolení želaného smeru používateľom,
 vráti metóda zvolený smer v novom objekte typu Uhol.
 Ak používateľ dialóg zruší, tak metóda vráti hodnotu null.
 Programátor má možnosť zvoliť vlastný titulok dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
Návratová hodnota:
zvolený smer alebo null
zvolSmer
public static Uhol zvolSmer(String titulok)
 Alias pre zvoľSmer.
dialógVoľbaSmeru
public static Uhol dialógVoľbaSmeru(String titulok)
 Alias pre zvoľSmer.
dialogVolbaSmeru
public static Uhol dialogVolbaSmeru(String titulok)
 Alias pre zvoľSmer.
zvoľSmer
public static Uhol zvoľSmer(String titulok,
                            Smer počiatočnýSmer)
Otvorí dialóg na výber smeru. Funguje rovnako ako metóda vyberSmer. Otvorený dialóg bude mať predvolený
 zadaný smer (argument počiatočnýSmer). Po zvolení želaného
 smeru používateľom, vráti metóda zvolený smer v novom objekte typu
 Uhol. Ak používateľ dialóg zruší, tak metóda vráti
 hodnotu null. Programátor má možnosť zvoliť vlastný titulok
 dialógového okna.
 
 Poznámka: Texty tlačidiel dialógu
 (vrátane tlačidla reset) sú upraviteľné volaním metódy textTlačidla triedy Svet.
Parametre:
titulok – vlastný titulok dialógu
počiatočnýSmer – predvolený smer v novo otvorenom dialógu
Návratová hodnota:
zvolený smer alebo null
zvolSmer
public static Uhol zvolSmer(String titulok,
                            Smer počiatočnýSmer)
 Alias pre zvoľSmer.
dialógVoľbaSmeru
public static Uhol dialógVoľbaSmeru(String titulok,
                                    Smer počiatočnýSmer)
 Alias pre zvoľSmer.
dialogVolbaSmeru
public static Uhol dialogVolbaSmeru(String titulok,
                                    Smer počiatočnýSmer)
 Alias pre zvoľSmer.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Vlnenie
java.lang.Object
Vlnenie
public class Vlnenie
extends Object
Táto trieda slúži na oživenie vlnenia obrázkov, plátien i sveta.
 
 Animácia vlnenia použitého v rámci programovacieho rámca je vykonávaná
 automaticky počas činnosti časovača a zvlnený raster objektu (napríklad
 plátna alebo obrázka)
 je v rámci programovacieho rámca tiež použitý automaticky a to v čase
 kreslenia vlniaceho sa objektu.
 
 Vlnenie pracuje s pomocou dvoch výškových máp (obrazne nazývaných
 v tejto dokumentácii aj hladinou), ktoré sú striedavo prepočítavané tak,
 ako keby tvorili striedajúce sa snímky postupujúcej animácie. Na základe
 hodnoty aktuálnej snímky mapy je výsledný obraz v každom okamihu animácie
 zdeformovaný tak, ako keby slnečné lúče prechádzali „krivou šošovkou“
 (čiže takou šošovkou, ktorej povrch obsahuje rôzne deformity) umiestnenou
 nad stred vlniacej sa plochy (s tým, že tvar tejto „krivej šošovky“
 sa dynamicky mení). Časti hladiny môžu byť ľubovoľne aktivované alebo
 deaktivované, takže je možné presne určiť, ktorá časť zobrazovenej plochy
 bude ovplyvnená vlnením, a ktorá nie. Možnosti vlnenia najlepšie ukazuje
 nasledujúci príklad.
 
 Príklad:
 
 Tento vyčerpávajúci príklad ukazuje mnoho spôsobov použitia tejto triedy.
 Na svoje fungovanie vyžaduje nasledujúci obrázok slnečnice (fotografiu
 vyhotovil a mierne upravil autor programovacieho rámca): 
slnecnica.png.
 
 Po spustení sú použiteľné nasledujúce klávesy na ovládanie aplikácie
 (robota a/alebo plochy vlnenia – podrobnosti sú v komentároch príkladu):
 
 
 MEDZERA–pozastavenie a obnovenie
 animácie vlnenia
 ESCAPE–okamžité upokojenie
 hladiny DELETE–zrušenie
 všetkých zmien – vymazanie zmrazených oblastí vlnenia, vymazanie prípadnej
 kresby na podlahe a obnovenie pôvodného obrázka
 
 
 
 
 A–kruhové šplechnutie na pozícii
 robota
 S–kružnicové šplechnutie na pozícii
 robota
 D–štvorcový vzruch na pozícii
 robota
 F–vlnka na pozícii robota v tvare
 pyramídy na nedokonalej kruhovej podstave; v kombinácii s klávesom
 SHIFT znamená zmrazenie vlnky
 
 
 
 X–„krídlové šplechnutie“ s použitím
 tvaru kruhu
 C–„krídlové šplechnutie“ s použitím
 tvaru štvorca
 V–„krídlové šplechnutie“ s použitím
 tvaru hviezdy
 
 
 
 E–búrlivé rozvlnenie
 obrazu
 R–náhodné rozčerenie
 hladiny
 T–jemné pravidelné rozvlnenie
 hladiny
 
 
 
 G–zmrazenie oblasti hviezdy na
 pozícii robota
 H–izolácia deaktivovanej oblasti
 vlnenia
 
 
 
 U–zapnutie alebo vypnutie pomocného
 robota tvoriaceho efekt vlajky
 P–zapnutie alebo vypnutie pomocného
 robota tvoriaceho efekt dažďa
 
 
 
 I–zväčšenie robota
 O–zmenšenie robota
 
 
 
 
 HORE–posun robota dopredu; alebo
 v kombinácii s klávesom CTRL rolovanie mapy vlnenia smerom
 hore; alebo v kombinácii s klávesom SHIFT pretáčanie mapy
 vlnenia smerom hore
 DOLE–posun robota dozadu; alebo
 v kombinácii s klávesom CTRL rolovanie mapy vlnenia smerom
 dole; alebo v kombinácii s klávesom SHIFT pretáčanie mapy
 vlnenia smerom dole
 VĽAVO–pootočenie robota vľavo; alebo
 v kombinácii s klávesom CTRL rolovanie mapy vlnenia smerom
 vľavo; alebo v kombinácii s klávesom SHIFT pretáčanie mapy
 vlnenia smerom
 vľavo
 VPRAVO–pootočenie robota vpravo;
 alebo v kombinácii s klávesom CTRL rolovanie mapy vlnenia
 smerom vpravo; alebo v kombinácii s klávesom SHIFT pretáčanie
 mapy vlnenia smerom vpravo
 J–posunutie robota dopredu
 a vytvorenie bariéry (zmrazenie čiary) na dráhe robota
 N–posunutie robota dozadu
 a vytvorenie bariéry (zmrazenie čiary) na dráhe robota
 
 
 
import knižnica.*;
public class TestovanieVlnenia extends GRobot
{
    // Atribút na uloženie predlohy vlnenia (obrázka slnečnice):
    private Obrázok predloha;
    // Atribút na uloženie vlnenia, s ktorým budeme v tomto príklade
    // manipulovať
    private Vlnenie vlnenie;
    // Atribúty na uloženie inštancií dvoch pomocných robotov:
    private GRobot vlajka, dážď;
    // Konštruktor.
    private TestovanieVlnenia()
    {
        // Volanie nadradeného konštruktora – úprava rozmerov plátien.
        super(850, 650);
        // Vypnutie automatického prekresľovania:
        Svet.nekresli();
        // Nastavenie parametrov robota:
        farba(červená);
        hrúbkaČiary(3);
        zdvihniPero();
        nekresliTvary();
        veľkosť(50);
        rýchlosť(veľkosť() / 10, false);
        vypĺňajTvary(true);
        // Prečítanie a nakreslenie predlohy vlnenia:
        predloha = Obrázok.čítaj("slnecnica.png");
        podlaha.obrázok(predloha);
        // Aktivovanie vlnenia pre celý svet (ak by sme identifikátor „Svet“
        // nahradili identifikátorom „podlaha,“ vlnila by sa len podlaha,
        // robot by nebol ovlpyvnený; ak by sme ho nahradili identifikátorom
        // „predloha,“ vlnil by sa len obrázok predlohy, ktorý by sme museli
        // neustále kresliť na podlahu alebo strop, aby bolo jeho vlnenie
        // viditeľné):
        Svet.pridajVlnenie();
        // Uloženie aktívnej inštancie vlnenia (ak by sme vlnili iný objekt
        // než Svet, tak by sme identifikátor „Svet“ museli nahradiť správnym
        // identifikátorom – pozri komentár príkazu vyššie):
        vlnenie = Svet.vlnenie();
        // Vytvorenie inštancie pomocného robota na vlajku:
        vlajka = new GRobot()
        {
            {
                // Nastavenie parametrov robota:
                vpravo(90);
                rýchlosť(20, false);
                zdvihniPero();
                skry();
            }
            @Override public void aktivita()
            {
                // Definícia správania počas jeho aktivity…
                // Kontrola opustenia hraníc obrazovky a presun na
                // protiľahnú stranu (pri neustálom pohybe zľava doprava by
                // stačili len prvé dva riadky nasledujúcich dvoch
                // konštrukcií, ale úplná kontrola zabezpečuje, že pomocník
                // bude fungovať aj keď zmeníme smer jeho pohybu):
                if (polohaX() &gt; Svet.najväčšieX() + 600)
                    polohaX(Svet.najmenšieX() &#45; 600);
                else if (polohaX() &lt; Svet.najmenšieX() &#45; 600)
                    polohaX(Svet.najväčšieX() + 600);
                if (polohaY() &gt; Svet.najväčšieY() + 400)
                    polohaY(Svet.najmenšieY() &#45; 400);
                else if (polohaY() &lt; Svet.najmenšieY() &#45; 400)
                    polohaY(Svet.najväčšieY() + 400);
                // Pridanie vlnky s veľkým rozmerom a malou intenzitou na
                // aktuálnej pozícii pomocníka:
                vlnenie.pridajVlnku(this, 800, -0.05);
            }
        };
        // Vytvorenie inštancie pomocného robota na dážď:
        dážď = new GRobot()
        {
            {
                // Nastavenie parametrov robota (vlastne ho stačí len skryť,
                // aby neprekážal vo výhľade):
                skry();
            }
            @Override public void aktivita()
            {
                // Definícia správania počas jeho aktivity – presun na
                // náhodnú pozíciu a pridanie vzruchu na hladinu:
                náhodnáPoloha();
                vlnenie.pridajVzruch(this);
            }
        };
        // Spustenie časovača…
        Svet.spustiČasovač();
    }
    
    @Override public void aktivita()
    {
        // Robot bude počas svojho pohybu vlniť prostredie s polomerom podľa
        // svojej veľkosti (intenzita má hodnotu 5):
        vlnenie.pridajVlnku(this, veľkosť(), 5);
    }
    @Override public void tik()
    {
        // Ak by sme aktivovali vlnenie len pre obrázok, tu by sme ho mohli
        // nakresliť:
        //	podlaha.obrázok(predloha);
        // Automatické prekresľovanie v prípade potreby:
        if (Svet.neboloPrekreslené()) Svet.prekresli();
    }
    @Override public void stlačenieKlávesu()
    {
        // Všeobecné funkcie na ovládanie vlnenia.
        if (ÚdajeUdalostí.kláves(Kláves.MEDZERA))
        {
            // Pozastavenie a opätovné spustenie vlnenia:
            if (vlnenie.aktívne())
                vlnenie.deaktivuj();
            else
                vlnenie.aktivuj();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_ESCAPE))
        {
            // Okamžité zrušenie vlnenia hladiny:
            vlnenie.upokojHladinu();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_DELETE))
        {
            // Zrušenie zamrazených oblastí vlnenia, upokojenie hladiny,
            // vymazanie prípadnej kresby na podlahe s obnovením pôvodného
            // obrázka:
            vlnenie.aktivujHladinu();
            vlnenie.upokojHladinu();
            podlaha.vymažGrafiku();
            podlaha.obrázok(predloha);
        }
        // Séria A – F: Rôzne spôsoby rozvlnenia na pozícii robota.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_A))
        {
            // Intenzívne kruhové šplechnutie (pozor, metóda „kruh“ definuje
            // len hranice tvaru, ktoré môžu byť nakreslené ako čiara alebo
            // vyplnené ako plocha; kruhový tvar šplechu v skutočnosti určuje
            // hodnota true parametra „vyplnený“):
            vlnenie.pridajVzruch(kruh(), true);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_S))
        {
            // Intenzívne kružnicové šplechutie (pozor, metóda „kružnica“
            // definuje len hranice tvaru, ktoré môžu byť nakreslené ako
            // čiara alebo vyplnené ako plocha; kružnicový tvar šplechu
            // v skutočnosti určuje hodnota false parametra „vyplnený“):
            vlnenie.pridajVzruch(kružnica(), false);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_D))
        {
            // Intenzívne štvorcové šplechnutie na pozícii robota
            // a s veľkosťou robota:
            vlnenie.pridajVzruch(this, veľkosť());
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_F))
        {
            // Intenzívne rozvlnenie na pozícii robota, s veľkosťou robota
            // a s tvarom pyramídy na nedokonalej kruhovej podstave (kláves SHIFT
            // spôsobí, že vlnka zostane zmrazená):
            vlnenie.pridajVlnku(this, veľkosť(), 765,
                ÚdajeUdalostí.klávesnica().isShiftDown());
        }
        // Séria X – V: „Krídlové“ šplechnutia – po stranách robota.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_X))
        {
            // Krídlové šplechnutie v tvare kružnice a kruhu – platí to isté
            // ako pri skratke VK_A – vyššie:
            posuňVľavo(veľkosť() * 2);
            vlnenie.pridajVzruch(kružnica(), false);
            posuňVpravo(veľkosť() * 4);
            vlnenie.pridajVzruch(kruh(), true);
            posuňVľavo(veľkosť() * 2);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_C))
        {
            // Krídlové šplechnutie v tvare štvorca ako obrysu aj ako
            // vyplnenej plochy – platí to isté ako pri kreslení kružnice
            // a kruhu – metódy robota určujú len obrys, skutočný spôsob
            // (ne)vyplnenia určuje druhý parameter metódy pridajVzruch:
            posuňVľavo(veľkosť() * 2);
            vlnenie.pridajVzruch(kresliŠtvorec(), false);
            posuňVpravo(veľkosť() * 4);
            vlnenie.pridajVzruch(vyplňŠtvorec(), true);
            posuňVľavo(veľkosť() * 2);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_V))
        {
            // Krídlové šplechnutie v tvare hviezdy ako obrysu aj ako
            // vyplnenej plochy – platí to isté ako pri kreslení kružnice
            // a kruhu – metódy robota určujú len obrys, skutočný spôsob
            // (ne)vyplnenia určuje druhý parameter metódy pridajVzruch:
            posuňVľavo(veľkosť() * 2);
            vlnenie.pridajVzruch(kresliHviezdu(), false);
            posuňVpravo(veľkosť() * 4);
            vlnenie.pridajVzruch(vyplňHviezdu(), true);
            posuňVľavo(veľkosť() * 2);
        }
        // Séria E – T: Rôzne spôsoby celoplošného rozvlnenia.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_E))
        {
            // Intenzívne, búrlivé, rozvlnenie obrazu s pomocou samého seba
            // zadaného ako mapy vlnenia:
            vlnenie.pridajVzruch(predloha);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_R))
        {
            // Rozčerenie hladiny náhodným šumom:
            vlnenie.rozčerHladinu();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_T))
        {
            // Pridanie gobálnych pravidelných vlniek hladiny:
            vlnenie.rozvlňHladinu();
        }
        // Dvojica G, H: Zmrazovanie hladiny.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_G))
        {
            // Zmrazí hviezdu na pozícii robota (ak zmrazenie nastalo
            // v čase vlnenia, okraje zmrazenej oblasti môžu generovať
            // vysokofrekvenčný šum – tento efekt je možné eliminovať
            // funkciou pod skratkou VK_H):
            vlnenie.deaktivujHladinu(hviezda());
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_H))
        {
            // Izoluje deaktivovanú hladinu, aby nenastávalo vysokofrekvenčné
            // rušenie pri jej okrajoch:
            vlnenie.izolujDeaktivovanúHladinu();
        }
        // Dvojica U, P: Aktivovanie alebo deaktivovanie pomocníkov na
        // vlnenie hladiny.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_U))
        {
            // Aktivuje robot prechádzajúci zľava doprava simulujúci
            // vlnenie vlajky:
            if (vlajka.aktívny()) vlajka.deaktivuj(); else vlajka.aktivuj();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_P))
        {
            // Aktivuje robot náhodne pridávajúci vzruchy na hladinu, čím
            // simuluje kvapky dažďa (dopadajúce na hladinu z pohľadu
            // pozorovateľa):
            if (dážď.aktívny()) dážď.deaktivuj(); else dážď.aktivuj();
        }
        // Dvojica I, O: Zmena rozmeru robota.
        else if (ÚdajeUdalostí.kláves(Kláves.VK_I))
        {
            // Zväčšenie robota.
            veľkosť(veľkosť() + 10);
            rýchlosť(veľkosť() / 10, false);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_O))
        {
            // Zmenšenie robota.
            veľkosť(veľkosť() &#45; 10);
            rýchlosť(veľkosť() / 10, false);
        }
        // Skupina ovládania robota a celej plochy vlnenia.
        else if (ÚdajeUdalostí.kláves(Kláves.HORE))
        {
            // (Kláves berie do úvahy riadiace klávesy CTRL alebo SHIFT.)
            if (ÚdajeUdalostí.klávesnica().isControlDown())
                // CTRL – roluje rozvlnenú hladinu hore:
                vlnenie.roluj(0, 10);
            else if (ÚdajeUdalostí.klávesnica().isShiftDown())
                // SHIFT – pretáča rozvlnenú hladinu hore:
                vlnenie.pretoč(0, 10);
            else
                // Inak pohne robotom dopredu:
                dopredu();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.DOLE))
        {
            // (Kláves berie do úvahy riadiace klávesy CTRL alebo SHIFT.)
            if (ÚdajeUdalostí.klávesnica().isControlDown())
                // CTRL – roluje rozvlnenú hladinu dole:
                vlnenie.roluj(0, -10);
            else if (ÚdajeUdalostí.klávesnica().isShiftDown())
                // SHIFT – pretáča rozvlnenú hladinu dole:
                vlnenie.pretoč(0, -10);
            else
                // Inak pohne robotom vzad:
                vzad();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VPRAVO))
        {
            // (Kláves berie do úvahy riadiace klávesy CTRL alebo SHIFT.)
            if (ÚdajeUdalostí.klávesnica().isControlDown())
                // CTRL – roluje rozvlnenú hladinu vpravo:
                vlnenie.roluj(10, 0);
            else if (ÚdajeUdalostí.klávesnica().isShiftDown())
                // SHIFT – pretáča rozvlnenú hladinu vpravo:
                vlnenie.pretoč(10, 0);
            else
                // Inak pootočí robot vpravo:
                vpravo();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VĽAVO))
        {
            // (Kláves berie do úvahy riadiace klávesy CTRL alebo SHIFT.)
            if (ÚdajeUdalostí.klávesnica().isControlDown())
                // CTRL – roluje rozvlnenú hladinu vľavo:
                vlnenie.roluj(-10, 0);
            else if (ÚdajeUdalostí.klávesnica().isShiftDown())
                // SHIFT – pretáča rozvlnenú hladinu vľavo:
                vlnenie.pretoč(-10, 0);
            else
                // Inak pootočí robot vľavo:
                vľavo();
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_J))
        {
            // Vytvorí prekážku vlnenia pri pohybe robot dopredu –
            // „zmrazí čiaru na dráhe pohybu robota“:
            začniCestu();
            dopredu();
            vlnenie.deaktivujHladinu(cesta(), false);
        }
        else if (ÚdajeUdalostí.kláves(Kláves.VK_N))
        {
            // Vytvorí prekážku vlnenia pri pohybe robota vzad –
            // „zmrazí čiaru na dráhe pohybu robota“:
            začniCestu();
            vzad();
            vlnenie.deaktivujHladinu(cesta(), false);
        }
    }
    @Override public void stlačenieTlačidlaMyši()
    {
        // Stlačenie tlačidla myši má rovnaký efekt ako ťahanie myšou:
        ťahanieMyšou();
    }
    @Override public void ťahanieMyšou()
    {
        if (ÚdajeUdalostí.tlačidloMyši(ĽAVÉ))
        {
            // Ľavé tlačidlo určí robotu nový cieľ:
            cieľNaMyš();
        }
        else
        {
            // Ostatné tlačidlá pridávajú vzruchy na hladinu:
            vlnenie.pridajVzruch(
                ÚdajeUdalostí.polohaMyši());
        }
    }
    // Hlavná metóda.
    public static void main(String... args)
    {
        Svet.použiKonfiguráciu("TestovanieVlnenia.cfg");
        new TestovanieVlnenia();
    }
}
 
 slnecnica.png –
 obrázok slnečnice na prevzatie.
 
 Výsledok:
 
 Vo výslednom animovanom obrázku sú zostrihané dve akcie. Najprv
 vytvorenie vlnky na pozícii robota (klávesová skratka F
 v rámci tohto príkladu) a vyčkanie na upokojenie hladiny. Potom nasleduje
 prestrih na ukážku, ktorej začiatočný stav bol pripravený zmrazením hviezdy
 v úplne začiatočnej fáze búrlivého rozvlnenia (skratky E
 a G v rámci tohto príkladu), presunom na pozíciu mierne vľavo
 dole pod hviezdou (klikaním myšou) a vyčkaním na úplné upokojenie hladiny
 (táto prípravná fáza je z animácie vystrihnutá). Z tohto stavu prejde robot
 krížom popod zmrazenú hviezdu (kliknutím myšou) a vyčká na úplné upokojenie
 hladiny. Potom sa celý proces zopakuje. (Všimnite si, že zmrazená hviezda
 sa nevlní, ale prechádzajúci robot v nej vidno.)
 
  Ukážka animácií vlnenia
 (ukážka je zmenšená a mierne zrýchlená).
 
 Poďakovanie a poznámky k implementácii
 
 Za pomoc pri implementácii algoritmu v tejto triede vďačím viacerým
 informačným zdrojom na internete, ktoré mi pomohli získať prehľad
 o problematike, najviac však 
Neilovi Wallisovi a jeho článku
 „Simulate ripples on water“ z decembra 2004.
 
 Autor predstavuje algoritmus založený na dvojitom zásobníku pixelov,
 používanom na vykonávanie výpočtov jednotlivých snímok simulácie vlnenia.
 Pôvodný algoritmus bol v prvej fáze upravený a prenesený z prostredia
 Java Appletov do prostredia programovacieho rámca GRobot a bol vylepšený
 tak, aby vlnenie neprechádzalo vzájomne cez ľavý a pravý okraj rastra.
 Autor sám tento nedostatok na svojej stránke opisuje, no úmyselne necháva
 jeho vyriešenie na tých, ktorí sa jeho riešením chcú inšpirovať.
 
 Potom pribudli ďalšie možnosti ako úprava parametrov algoritmu,
 definovanie rôznych druhov vzruchov, možnosť indikovať pozastavenie
 činnosti, samostatná simulácia série krokov vlnenia bez viazanosti na
 časovač a možnosť definovania masky tekutiny, ktorá dovoľuje definovať
 aktívne a neaktívne oblasti vlnenia. Výsledný produkt vo forme tejto
 triedy vo všeobecnosti značne rozširuje možnosti použitia pôvodného
 (jednoduchšieho) algoritmu (v rámci programovacieho rámca GRobot i mimo
 nej, pretože trieda je navrhnutá a napísaná tak, aby bola použiteľná
 aj samostatne).
 
 Použitý zdroj:
 
 
Wallis, Neil: Simulate ripples on
 water. December 2004. (Citované zhruba: 2014 – 2016.)
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Vlnenie(BufferedImage zdroj,
       int útlm)
Toto je konštruktor novej inštancie vlnenia.
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
boolean
aktivne()
 Alias pre aktívne.
boolean
aktívne()
Overí, či je táto inštancia aktívna, to jest, či má byť vlnenie rastra
 automaticky prepočítavané počas udalostí časovača.
void
aktivuj()
Nastaví príznak aktivity na true.
void
aktivujHladinu()
Aktivuje hladinu na celej ploche vlniaceho sa obrázka.
void
aktivujHladinu(double x,
              double y)
Aktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
void
aktivujHladinu(double x,
              double y,
              int rozsah)
Aktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah určuje
 polovicu strany štvorca) so stredom na určenej pozícii.
void
aktivujHladinu(Image obrázok)
Aktivuje hladinu podľa zadaného obrázka.
void
aktivujHladinu(Poloha poloha)
Aktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
void
aktivujHladinu(Poloha poloha,
              int rozsah)
Aktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
void
aktivujHladinu(Shape tvar)
Aktivuje body máp vlnenia podľa zadaného tvaru.
void
aktivujHladinu(Shape tvar,
              boolean vyplnený)
Aktivuje body máp vlnenia podľa zadaného tvaru.
void
aktivujHladinu(Shape tvar,
              double hrúbkaČiary)
Aktivuje body máp vlnenia podľa zadaného tvaru.
void
deaktivuj()
Nastaví príznak aktivity na false.
void
deaktivujHladinu()
Deaktivuje celú plochu hladiny vlniaceho sa obrázka.
void
deaktivujHladinu(double x,
                double y)
Deaktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
void
deaktivujHladinu(double x,
                double y,
                int rozsah)
Deaktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
void
deaktivujHladinu(Image obrázok)
Deaktivuje hladinu podľa zadaného obrázka.
void
deaktivujHladinu(Poloha poloha)
Deaktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
void
deaktivujHladinu(Poloha poloha,
                int rozsah)
Deaktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
void
deaktivujHladinu(Shape tvar)
Deaktivuje body máp vlnenia podľa zadaného tvaru.
void
deaktivujHladinu(Shape tvar,
                boolean vyplnený)
Deaktivuje body máp vlnenia podľa zadaného tvaru.
void
deaktivujHladinu(Shape tvar,
                double hrúbkaČiary)
Deaktivuje body máp vlnenia podľa zadaného tvaru.
void
izolujDeaktivovanuHladinu()
 Alias pre izolujDeaktivovanúHladinu.
void
izolujDeaktivovanúHladinu()
Izoluje oblasti deaktivovanej hladiny.
void
odoberVlnku(double x,
           double y,
           double polomer)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
odoberVlnku(double x,
           double y,
           double polomer,
           double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
odoberVlnku(double x,
           double y,
           double polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo.
void
odoberVlnku(double x,
           double y,
           int polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda odoberie oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú.
void
odoberVlnku(Poloha poloha,
           double polomer)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
odoberVlnku(Poloha poloha,
           double polomer,
           double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
odoberVlnku(Poloha poloha,
           double polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha.
void
odoberVzruch(double x,
            double y)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
void
odoberVzruch(double x,
            double y,
            double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
void
odoberVzruch(double x,
            double y,
            double rozsahVzruchu,
            double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
odoberVzruch(double x,
            double y,
            int rozsahVzruchu,
            int intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
odoberVzruch(Image obrázok)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka.
void
odoberVzruch(Image obrázok,
            int posunIntenzity)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme
 zadaného obrázka s možnosťou posunutia výslednej intenzity hladiny
 pre všetky ovplyvnené body (v zápornom smere).
void
odoberVzruch(Poloha poloha)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
void
odoberVzruch(Poloha poloha,
            double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
void
odoberVzruch(Poloha poloha,
            double rozsahVzruchu,
            double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
odoberVzruch(Shape tvar)
Odoberie z hladiny vzruch v zadanom tvare.
void
odoberVzruch(Shape tvar,
            boolean vyplnený)
Odoberie z hladiny vzruch v zadanom tvare.
void
odoberVzruch(Shape tvar,
            boolean vyplnený,
            int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
odoberVzruch(Shape tvar,
            double hrúbkaČiary)
Odoberie z hladiny vzruch v zadanom tvare.
void
odoberVzruch(Shape tvar,
            double hrúbkaČiary,
            int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
odoberVzruch(Shape tvar,
            int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
posun(double x,
     double y)
Nastaví úroveň posunu v osiach x a y, o ktorú budú posunuté tvary
 Javy pri ich použití na definovanie tekutiny alebo vzruchov.
double
posunX()
Vráti posun v smere horizontálnej osi (osi x).
double
posunY()
Vráti posun v smere vertikálnej osi (osi y).
void
pretoc(double Δx,
      double Δy)
 Alias pre pretoč.
void
pretoč(double Δx,
      double Δy)
Pretočí mapu vlnenia o želaný počet bodov v horizontálnom
 a vertikálnom smere.
void
pridajVlnku(double x,
           double y,
           double polomer)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
pridajVlnku(double x,
           double y,
           double polomer,
           double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
pridajVlnku(double x,
           double y,
           double polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo.
void
pridajVlnku(double x,
           double y,
           int polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda pridá oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú.
void
pridajVlnku(Poloha poloha,
           double polomer)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
pridajVlnku(Poloha poloha,
           double polomer,
           double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
pridajVlnku(Poloha poloha,
           double polomer,
           double násobokIntenzity,
           boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha.
void
pridajVzruch(double x,
            double y)
Pridanie základného vzruchu na zadanej pozícii.
void
pridajVzruch(double x,
            double y,
            double rozsahVzruchu)
Pridanie základného vzruchu so zadaným rozsahom na zadanej pozícii.
void
pridajVzruch(double x,
            double y,
            double rozsahVzruchu,
            double intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii.
void
pridajVzruch(double x,
            double y,
            int rozsahVzruchu,
            int intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii.
void
pridajVzruch(Image obrázok)
Pridá k hladine vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka.
void
pridajVzruch(Image obrázok,
            int posunIntenzity)
Pridá k hladine vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka s možnosťou posunutia výslednej intenzity hladiny pre všetky
 ovplyvnené body.
void
pridajVzruch(Poloha poloha)
Pridanie základného vzruchu na zadanej pozícii.
void
pridajVzruch(Poloha poloha,
            double rozsahVzruchu)
Pridanie základného vzruchu so zadaným rozsahom na zadanej pozícii.
void
pridajVzruch(Poloha poloha,
            double rozsahVzruchu,
            double intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii.
void
pridajVzruch(Shape tvar)
Pridá na hladine vzruch v zadanom tvare.
void
pridajVzruch(Shape tvar,
            boolean vyplnený)
Pridá na hladine vzruch v zadanom tvare.
void
pridajVzruch(Shape tvar,
            boolean vyplnený,
            int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body.
void
pridajVzruch(Shape tvar,
            double hrúbkaČiary)
Pridá na hladine vzruch v zadanom tvare.
void
pridajVzruch(Shape tvar,
            double hrúbkaČiary,
            int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body.
void
pridajVzruch(Shape tvar,
            int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body.
void
roluj(double Δx,
     double Δy)
Roluje mapu vlnenia o želaný počet bodov v horizontálnom
 a vertikálnom smere.
void
rozcerHladinu()
 Alias pre rozčerHladinu.
void
rozcerHladinu(int spodnáHranicaŠumu,
             int hornáHranicaŠumu)
 Alias pre rozčerHladinu.
void
rozcerHladinu(short spodnáHranicaŠumu,
             short hornáHranicaŠumu)
 Alias pre rozčerHladinu.
void
rozčerHladinu()
Pridá náhodný šum k úrovniam hladiny vlnenia – pridá náhodné vzruchy.
void
rozčerHladinu(int spodnáHranicaŠumu,
             int hornáHranicaŠumu)
 Alias pre rozčerHladinu.
void
rozčerHladinu(short spodnáHranicaŠumu,
             short hornáHranicaŠumu)
Pridá náhodný šum k úrovniam hladiny vlnenia – pridá náhodné vzruchy.
void
rozvlnHladinu()
 Alias pre rozvlňHladinu.
void
rozvlňHladinu()
Pridá pravidelné jemné vlnenie po celej ploche hladiny s predvolenou
 dĺžkou vlny 25.0 a predvolenou amplitúdou 1.0.
void
rozvlnHladinu(double dĺžkaVlny)
 Alias pre rozvlňHladinu.
void
rozvlňHladinu(double dĺžkaVlny)
Pridá pravidelné jemné vlnenie po celej ploche hladiny so zadanou
 dĺžkou vlny a predvolenou amplitúdou 1.0.
void
rozvlnHladinu(double dĺžkaVlny,
             double amplitúda)
 Alias pre rozvlňHladinu.
void
rozvlňHladinu(double dĺžkaVlny,
             double amplitúda)
Pridá pravidelné vlnenie po celej ploche hladiny so zadanou dĺžkou
 vlny a amplitúdou.
void
simuluj(int počet)
Vykoná výpočet niekoľkých snímok procesu vlnenia naraz – posunie
 simuláciu vlnenia o niekoľko snímok dopredu.
void
uberVlnku(double x,
         double y,
         double polomer)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
uberVlnku(double x,
         double y,
         double polomer,
         double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
uberVlnku(double x,
         double y,
         double polomer,
         double násobokIntenzity,
         boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo.
void
uberVlnku(double x,
         double y,
         int polomer,
         double násobokIntenzity,
         boolean zmraz)
Táto metóda odoberie oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú.
void
uberVlnku(Poloha poloha,
         double polomer)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false.
void
uberVlnku(Poloha poloha,
         double polomer,
         double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false.
void
uberVlnku(Poloha poloha,
         double polomer,
         double násobokIntenzity,
         boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha.
void
uberVzruch(double x,
          double y)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
void
uberVzruch(double x,
          double y,
          double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
void
uberVzruch(double x,
          double y,
          double rozsahVzruchu,
          double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
uberVzruch(double x,
          double y,
          int rozsahVzruchu,
          int intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
uberVzruch(Image obrázok)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka.
void
uberVzruch(Image obrázok,
          int posunIntenzity)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme
 zadaného obrázka s možnosťou posunutia výslednej intenzity hladiny
 pre všetky ovplyvnené body (v zápornom smere).
void
uberVzruch(Poloha poloha)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
void
uberVzruch(Poloha poloha,
          double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
void
uberVzruch(Poloha poloha,
          double rozsahVzruchu,
          double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
void
uberVzruch(Shape tvar)
Odoberie z hladiny vzruch v zadanom tvare.
void
uberVzruch(Shape tvar,
          boolean vyplnený)
Odoberie z hladiny vzruch v zadanom tvare.
void
uberVzruch(Shape tvar,
          boolean vyplnený,
          int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
uberVzruch(Shape tvar,
          double hrúbkaČiary)
Odoberie z hladiny vzruch v zadanom tvare.
void
uberVzruch(Shape tvar,
          double hrúbkaČiary,
          int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
uberVzruch(Shape tvar,
          int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body.
void
upokojHladinu()
Upokojí hladinu vlnenia – odoberie všetky vzruchy.
int
urovenPrahu()
 Alias pre úroveňPrahu.
int
úroveňPrahu()
Zistí aktuálnu úroveň prahu používaného pri aktivácii a deaktivácii
 hladiny s pomocou masky, čo zahŕňa aj aktiváciu alebo deaktiváciu
 s použitím tvarov.
void
urovenPrahu(int úroveň)
 Alias pre úroveňPrahu.
void
úroveňPrahu(int úroveň)
Určí novú úroveň prahu používaného pri aktivácii a deaktivácii hladiny
 s pomocou masky, čo zahŕňa aj aktiváciu alebo deaktiváciu s použitím
 tvarov.
int
utlm()
 Alias pre útlm.
int
útlm()
Vráti aktuálnu hodnotu útlmu vĺn tejto inštancie vlnenia.
void
utlm(int útlm)
 Alias pre útlm.
void
útlm(int útlm)
Nastaví novú hodnotu útlmu vĺn tejto inštancie vlnenia.
void
vykonaj()
Vykoná proces vlnenia – prepočíta ďalšiu snímku.
BufferedImage
zvlnenyRaster()
 Alias pre zvlnenýRaster.
BufferedImage
zvlnenýRaster()
Táto metóda vráti rastrový obrázok inštancie typu
 BufferedImage obsahujúci aktuálny zvlnený
 obraz svojej predlohy.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti konštruktorov
Vlnenie
public Vlnenie(BufferedImage zdroj,
               int útlm)
Toto je konštruktor novej inštancie vlnenia. V rámci programovacieho
 rámca je používaný automaticky pri vzniku požiadavky na pridanie efektu
 vlnenia k určitej súčasti programovacieho rámca.
 
 Poznámka: V podstate ide o plátna stropu a podlahy (pozri Plátno.pridajVlnenie()),
 o plochu sveta ako takého (pozri
 Svet.pridajVlnenie())
 a o obrázky programovacieho rámca (pozri
 Obrázok.pridajVlnenie()).
 
 Trieda Vlnenie je naprogramovaná tak, aby bola použiteľná
 aj mimo programovacieho rámca GRobot. V takom prípade je potrebné
 vytvoriť jej inštanciu s pomocou tohto konštruktora. Ten prijíma
 inštanciu obrázka BufferedImage, ktorý musí byť
 typu BufferedImage.TYPE_INT_ARGB,
 inak konštrukcia vlnenia zlyhá. Útlm určuje rýchlosť utlmenia vzruchov
 na virtuálnej hladine vlnenia (pozri aj metódu útlm).
 Ak sú všetky podmienky splnené a vytvorenie vlnenia bolo úspešné,
 programátor musí ešte zariadiť pravidelné spúšťanie metódy
 vykonaj (najlepšie v rekacii časovača), ktorá
 zabezpečuje simuláciu vlnenia a tiež prekresľovanie zvlneného rastra,
 ktorý získa metódou zvlnenýRaster.
 
 Pripomenutie faktov: Animácia vlnenia použitého
 v rámci programovacieho rámca je vykonávaná automaticky počas činnosti
 časovača a zvlnený raster je v rámci programovacieho rámca tiež použitý
 automaticky v čase kreslenia objektu.
Parametre:
zdroj – obraz predlohy, ktorá má byť vlnená, napríklad
     obrázok programovacieho rámca GRobot,
     plátno a podobne
útlm – predvolená hodnota útlmu vlnenia (hodnoty v rozsahu 0 – 31;
     pozri aj metódu útlm)
Podrobnosti metód
aktívne
public boolean aktívne()
Overí, či je táto inštancia aktívna, to jest, či má byť vlnenie rastra
 automaticky prepočítavané počas udalostí časovača.
Návratová hodnota:
true – inštancia je aktívna; false –
     inštancia je neaktívna;
Pozri tiež:
aktivuj(), 
deaktivuj()
aktivne
public boolean aktivne()
 Alias pre aktívne.
aktivuj
public void aktivuj()
Nastaví príznak aktivity na true. Tento príznak je
 kontrolovaný svetom počas udalostí časovača. V aktivovanej inštancii
 je vlnenie automaticky prepočítavané svetom grafického robota.
 
 Poznámka: Aktivácia alebo deaktivácia
 inštancie vlnenia nemá vplyv na aktivované a deaktivované časti
 hladiny – pozri napríklad metódy aktivujHladinu(x, y, rozsah), aktivujHladinu(tvar, vyplnený), deaktivujHladinu(x, y, rozsah)
 alebo deaktivujHladinu(tvar,
 vyplnený).
Pozri tiež:
aktívne(), 
deaktivuj()
deaktivuj
public void deaktivuj()
Nastaví príznak aktivity na false. Tento príznak je
 kontrolovaný svetom počas udalostí časovača. Vlnenie deaktivovanej
 inštancie nie je automaticky prepočítavané svetom grafického robota.
 
 Poznámka: Táto informácia vyžaduje spresnenie.
 Deaktivácia neznamená úplné zastavenie prepočtov súvisiacich s vlnením,
 len zastavenie prepočtov súvisiacich so zmenami vo vnútorných výškových
 mapách vlnenia, čiže s animáciou vlnenia. Ak by boli zastavené všetky
 prepočty, znamenalo by to, že keby sa obsah predlohy vlnenia (čiže
 pôvodného nezvlneného obrázka) zmenil, tak by sa to vo výslednom
 (zvlnenom) rastri nikdy neprejavilo. To nie je cieľom deaktivácie.
 Cieľom deaktivácie je len „zamraziť“ vlnenie. V skutočnosti sa táto
 trieda správa tak, že vždy pri poskytovaní zvlneného rastra overí, či je inštancia aktívna a ak nie je, tak
 raster aktualizuje bez ohľadu na to, či obsah predlohy bol alebo nebol
 zmenený (pretože pri aktívnom vlnení sa to deje automaticky počas
 animácie vlnenia).
  
 (Preto je v prípade potreby vykonávania viacerých akcií s rastrom
 v rámci jedného tiku časovača výhodnejšie poskytnutý raster dočasne
 uložiť do lokálnej premennej a pracovať s uloženou verziou. Aby
 zbytočne nenastávalo mnohonásobné prepočítavanie zvlneného rastra.)
 
 Poznámka: Aktivácia alebo deaktivácia
 inštancie vlnenia nemá vplyv na aktivované a deaktivované časti
 hladiny – pozri napríklad metódy aktivujHladinu(x, y, rozsah), aktivujHladinu(tvar, vyplnený), deaktivujHladinu(x, y, rozsah)
 alebo deaktivujHladinu(tvar,
 vyplnený).
Pozri tiež:
aktívne(), 
aktivuj()
úroveňPrahu
public int úroveňPrahu()
Zistí aktuálnu úroveň prahu používaného pri aktivácii a deaktivácii
 hladiny s pomocou masky, čo zahŕňa aj aktiváciu alebo deaktiváciu
 s použitím tvarov. Prah stanovuje hodnotu, pod ktorou už body masky
 nie sú brané do úvahy. Predvolená hodnota je 24.
Návratová hodnota:
aktuálna úroveň prahu používaného pri aktivácii a deaktivácii
     hladiny s pomocou masky
Pozri tiež:
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
urovenPrahu
public int urovenPrahu()
 Alias pre úroveňPrahu.
úroveňPrahu
public void úroveňPrahu(int úroveň)
Určí novú úroveň prahu používaného pri aktivácii a deaktivácii hladiny
 s pomocou masky, čo zahŕňa aj aktiváciu alebo deaktiváciu s použitím
 tvarov. Prah stanoví hodnotu, pod ktorou už body masky nebudú brané do
 úvahy. (Predvolená hodnota je 24.)
Parametre:
úroveň – nová úroveň prahu používaného pri aktivácii a deaktivácii
     hladiny s pomocou masky
Pozri tiež:
úroveňPrahu(), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
urovenPrahu
public void urovenPrahu(int úroveň)
 Alias pre úroveňPrahu.
aktivujHladinu
public void aktivujHladinu()
Aktivuje hladinu na celej ploche vlniaceho sa obrázka. (Zruší všetky
 zmeny v súvislosti s deaktivovaním častí vlniacej sa plochy.)
Pozri tiež:
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int), 
aktivujHladinu(Image)
aktivujHladinu
public void aktivujHladinu(double x,
                           double y)
Aktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
aktivujHladinu
public void aktivujHladinu(double x,
                           double y,
                           int rozsah)
Aktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah určuje
 polovicu strany štvorca) so stredom na určenej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsah – rozsah štvorcovej oblasti (polomer vpísanej kružnice)
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
aktivujHladinu
public void aktivujHladinu(Poloha poloha)
Aktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
Parametre:
poloha – poloha stredu oblasti
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
aktivujHladinu
public void aktivujHladinu(Poloha poloha,
                           int rozsah)
Aktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
Parametre:
poloha – poloha stredu oblasti
rozsah – rozsah štvorcovej oblasti (polomer vpísanej kružnice)
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
aktivujHladinu
public void aktivujHladinu(Image obrázok)
Aktivuje hladinu podľa zadaného obrázka. Ak obrázok nemá zhodné rozmery
 s rozmermi máp vlnenia, bude použitý tak, ako keby bol nakreslený
 v strede mapy vlnenia (ak je väčší, nadbytočné časti budú ignorované,
 ak je menší, chýbajúce časti budú považované za prázdne). Jednotlivé
 body máp vlnenia budú aktivované podľa toho, či hodnota vypočítaná
 z jasu a priehľadnosti bodu na zadanom obrázku prekročí aktuálnu
 úroveň prahu inštancie vlnenia.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na aktiváciu hladiny podľa aktuálnej
     úrovne prahu
Pozri tiež:
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double), 
aktivujHladinu(), 
deaktivujHladinu()
aktivujHladinu
public void aktivujHladinu(Shape tvar)
Aktivuje body máp vlnenia podľa zadaného tvaru. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda aktivujHladinu(obrázok). Preto je
 aj pre túto metódu relevantný prah.
Parametre:
tvar – tvar, podľa ktorého bude aktivovaná prislúchajúca časť
     hladiny
Pozri tiež:
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
aktivujHladinu
public void aktivujHladinu(Shape tvar,
                           boolean vyplnený)
Aktivuje body máp vlnenia podľa zadaného tvaru. Tvar bude použitý ako
 vyplnený alebo obkreslený čiarou podľa hodnoty druhého parametra. Pri
 nevyplnených tvaroch je použitá predvolená hrúbka čiary 6.0
 bodov. Táto metóda funguje tak, že zadaný tvar nakreslí (vyplní alebo
 obkreslí) do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda aktivujHladinu(obrázok). Preto je aj pre túto metódu relevantný
 prah.
Parametre:
tvar – tvar, podľa ktorého bude aktivovaná prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako obreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
Pozri tiež:
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
aktivujHladinu
public void aktivujHladinu(Shape tvar,
                           double hrúbkaČiary)
Aktivuje body máp vlnenia podľa zadaného tvaru. Tvar bude použitý ako
 obkreslená čiara s hrúbkou podľa hodnoty druhého parametra. Táto
 metóda funguje tak, že zadaný tvar nakreslí (obkreslí) so zadanou
 hrúbkou čiary do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda aktivujHladinu(obrázok). Preto je aj pre túto metódu relevantný
 prah.
Parametre:
tvar – tvar, podľa ktorého bude aktivovaná prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
Pozri tiež:
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
deaktivujHladinu
public void deaktivujHladinu()
Deaktivuje celú plochu hladiny vlniaceho sa obrázka. Je to použiteľné
 na inverzné povoľovanie vlniacich sa oblastí – najprv deaktivujeme
 celú hladinu a následne aktivujeme len tie časti, ktoré chceme, aby
 sa vlnili.
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int), 
aktivujHladinu(Image)
deaktivujHladinu
public void deaktivujHladinu(double x,
                             double y)
Deaktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
deaktivujHladinu
public void deaktivujHladinu(double x,
                             double y,
                             int rozsah)
Deaktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsah – rozsah štvorcovej oblasti (polomer vpísanej kružnice)
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha), 
deaktivujHladinu(Poloha, int)
deaktivujHladinu
public void deaktivujHladinu(Poloha poloha)
Deaktivuje bod, resp. malú štvorcovú oblasť s veľkosťou 6 × 6 bodov,
 na hladine so stredom na určenej pozícii.
Parametre:
poloha – poloha stredu oblasti
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha, int)
deaktivujHladinu
public void deaktivujHladinu(Poloha poloha,
                             int rozsah)
Deaktivuje štvorcovú oblasť na hladine so zadaným rozsahom (rozsah
 určuje polovicu strany štvorca) so stredom na určenej pozícii.
Parametre:
poloha – poloha stredu oblasti
rozsah – rozsah štvorcovej oblasti (polomer vpísanej kružnice)
Pozri tiež:
aktivujHladinu(), 
aktivujHladinu(double, double), 
aktivujHladinu(double, double, int), 
aktivujHladinu(Poloha), 
aktivujHladinu(Poloha, int), 
deaktivujHladinu(), 
deaktivujHladinu(double, double), 
deaktivujHladinu(double, double, int), 
deaktivujHladinu(Poloha)
deaktivujHladinu
public void deaktivujHladinu(Image obrázok)
Deaktivuje hladinu podľa zadaného obrázka. Ak obrázok nemá zhodné
 rozmery s rozmermi máp vlnenia, bude použitý tak, ako keby bol
 nakreslený v strede mapy vlnenia (ak je väčší, nadbytočné časti budú
 ignorované, ak je menší, chýbajúce časti budú považované za prázdne).
 Jednotlivé body máp vlnenia budú deaktivované podľa toho, či hodnota
 vypočítaná z jasu a priehľadnosti bodu na zadanom obrázku prekročí
 aktuálnu úroveň prahu inštancie vlnenia.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na deaktiváciu hladiny podľa aktuálnej
     úrovne prahu
Pozri tiež:
izolujDeaktivovanúHladinu(), 
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
deaktivujHladinu
public void deaktivujHladinu(Shape tvar)
Deaktivuje body máp vlnenia podľa zadaného tvaru. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda deaktivujHladinu(obrázok).
 Preto je aj pre túto metódu relevantný prah.
Parametre:
tvar – tvar, podľa ktorého bude deaktivovaná prislúchajúca časť
     hladiny
Pozri tiež:
izolujDeaktivovanúHladinu(), 
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
deaktivujHladinu
public void deaktivujHladinu(Shape tvar,
                             boolean vyplnený)
Deaktivuje body máp vlnenia podľa zadaného tvaru. Tvar bude použitý ako
 vyplnený alebo obkreslený čiarou podľa hodnoty druhého parametra. Pri
 nevyplnených tvaroch je použitá predvolená hrúbka čiary 6.0
 bodov. Táto metóda funguje tak, že zadaný tvar nakreslí (vyplní alebo
 obkreslí) do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda deaktivujHladinu(obrázok). Preto je aj pre túto metódu relevantný
 prah.
Parametre:
tvar – tvar, podľa ktorého bude deaktivovaná prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako obreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
Pozri tiež:
izolujDeaktivovanúHladinu(), 
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, double)
deaktivujHladinu
public void deaktivujHladinu(Shape tvar,
                             double hrúbkaČiary)
Deaktivuje body máp vlnenia podľa zadaného tvaru. Tvar bude použitý
 ako obkreslená čiara s hrúbkou podľa hodnoty druhého parametra. Táto
 metóda funguje tak, že zadaný tvar nakreslí (obkreslí) so zadanou
 hrúbkou čiary do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda deaktivujHladinu(obrázok). Preto je aj pre túto metódu relevantný
 prah.
Parametre:
tvar – tvar, podľa ktorého bude deaktivovaná prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
Pozri tiež:
izolujDeaktivovanúHladinu(), 
úroveňPrahu(), 
úroveňPrahu(int), 
aktivujHladinu(Image), 
aktivujHladinu(Shape), 
aktivujHladinu(Shape, boolean), 
aktivujHladinu(Shape, double), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean)
izolujDeaktivovanúHladinu
public void izolujDeaktivovanúHladinu()
Izoluje oblasti deaktivovanej hladiny. Ak bola časť hladiny
 deaktivovaná počas „živej“ animácie vlnenia, to jest v stave, keď
 výškové mapy vlnenia obsahujú rozdielne údaje, bez ohľadu na to, či je
 inštancia vlnenia aktívna alebo nie, tak takmer určite vznikne na
 hraniciach zmrazenej oblasti stav, ktorý bude počas aktívnej animácie
 spôsobovať vznik vysokofrekvenčného vlnenia (hoci s malým dosahom).
 Tento jav nemusí byť vždy vnímaný ako negatívny, preto nie je
 potláčaný automaticky. Táto metóda ho však dokáže eliminovať, no dokáže
 tak urobiť len celoplošne. (To znamená, že ak by pre niektoré časti
 hladiny mal byť tento jav žiaduci, tak tie musia byť zmrazené
 dodatočne, po spustení tejto metódy.)
Pozri tiež:
úroveňPrahu(int), 
deaktivujHladinu(Image), 
deaktivujHladinu(Shape), 
deaktivujHladinu(Shape, boolean), 
deaktivujHladinu(Shape, double)
izolujDeaktivovanuHladinu
public void izolujDeaktivovanuHladinu()
 Alias pre izolujDeaktivovanúHladinu.
posunX
public double posunX()
Vráti posun v smere horizontálnej osi (osi x). Pre podrobnosti pozri
 opis metódy posun(x, y).
Návratová hodnota:
posun v smere horizontálnej osi – osi x
Pozri tiež:
posun(double, double), 
posunY()
posunY
public double posunY()
Vráti posun v smere vertikálnej osi (osi y). Pre podrobnosti pozri
 opis metódy posun(x, y).
Návratová hodnota:
posun v smere vertikálnej osi – osi y
Pozri tiež:
posun(double, double), 
posunX()
posun
public void posun(double x,
                  double y)
Nastaví úroveň posunu v osiach x a y, o ktorú budú posunuté tvary
 Javy pri ich použití na definovanie tekutiny alebo vzruchov. Tento
 posun má význam pri použití tvarov generovaných robotom na vlniace
 sa plochy, ktoré majú rôzne rozmery než sú rozmery plátien sveta.
 (Ide najmä o inštancie vlnenia obrázkov.) Je to preto, lebo tvary
 generované robotom sú síce vygenerované v súradnicovom priestore
 Javy, ale vzhľadom na rozmery plátien sveta a pri použití v obrázkoch
 s inými rozmermi, by neboli správne umiestnené.
 
 V rámci programovacieho rámca GRobot je posun inštancií
 vlnenia obrázkov upravený automaticky. (Iné
 inštancie vlnenia používané v rámci programovacieho rámca nemusia mať
 posun upravovaný. V podstate ide už len o plátna a samotnú grafickú
 plochu sveta.)
 
 Posun má význam pri používaní vlnenia siahajúc za hranice
 programovacieho rámca.
Parametre:
x – posun v smere horizontálnej osi – osi x
y – posun v smere vertikálnej osi – osi y
Pozri tiež:
posunX(), 
posunY()
útlm
public int útlm()
Vráti aktuálnu hodnotu útlmu vĺn tejto inštancie vlnenia.
Návratová hodnota:
aktuálna hodnota útlmu vĺn (hodnoty v rozsahu 0 – 31)
utlm
public int utlm()
 Alias pre útlm.
útlm
public void útlm(int útlm)
Nastaví novú hodnotu útlmu vĺn tejto inštancie vlnenia. Povolené sú
 hodnoty v rozsahu 0 – 31 a všetky hodnoty mimo tohto rozsahu budú
 posunuté na najbližšiu platnú hranicu. Nulový útlm neznamená
 nekonečné vlnenie, ale to, že vlny odznejú tak, ako je to prirodzené
 pre implementovaný algoritmus vlnenia. Horná hranica určuje opačný
 extrém. V podstate majú v skutočnosti zmysel len hodnoty v rozsahu
 0 – 30, pretože útlm s hodnotou 31 znamená, že vlny budú okamžite
 eliminované, takže vo výsledku nebude viditeľné žiadne vlnenie obrazu.
Parametre:
útlm – nová hodnota útlmu vĺn (odporúčané hodnoty: 0 – 30)
utlm
public void utlm(int útlm)
 Alias pre útlm.
upokojHladinu
public void upokojHladinu()
Upokojí hladinu vlnenia – odoberie všetky vzruchy.
rozčerHladinu
public void rozčerHladinu()
Pridá náhodný šum k úrovniam hladiny vlnenia – pridá náhodné vzruchy.
rozcerHladinu
public void rozcerHladinu()
 Alias pre rozčerHladinu.
rozčerHladinu
public void rozčerHladinu(short spodnáHranicaŠumu,
                          short hornáHranicaŠumu)
Pridá náhodný šum k úrovniam hladiny vlnenia – pridá náhodné vzruchy.
Parametre:
spodnáHranicaŠumu – najnižšia možná vygenerovaná náhodná hodnota,
     ktorá bude pridaná k hladine vlnenia (odporúčaná je záporná hodnota
     hornej hranice šumu)
hornáHranicaŠumu – najvyššia možná vygenerovaná náhodná hodnota,
     ktorá bude pridaná k hladine vlnenia (odporúčané sú hodnoty
     v rozmedzí 30 – 70)
rozcerHladinu
public void rozcerHladinu(short spodnáHranicaŠumu,
                          short hornáHranicaŠumu)
 Alias pre rozčerHladinu.
rozčerHladinu
public void rozčerHladinu(int spodnáHranicaŠumu,
                          int hornáHranicaŠumu)
 Alias pre rozčerHladinu.
rozcerHladinu
public void rozcerHladinu(int spodnáHranicaŠumu,
                          int hornáHranicaŠumu)
 Alias pre rozčerHladinu.
rozvlňHladinu
public void rozvlňHladinu()
Pridá pravidelné jemné vlnenie po celej ploche hladiny s predvolenou
 dĺžkou vlny 25.0 a predvolenou amplitúdou 1.0.
 
 Poznámka: Vlnenie bude utlmené relatívne rýchlo,
 preto musí byť v prípade požadovania jeho stálej prítomnosti
 pravidelne obnovované.
Pozri tiež:
rozvlňHladinu(double), 
rozvlňHladinu(double, double)
rozvlnHladinu
public void rozvlnHladinu()
 Alias pre rozvlňHladinu.
rozvlňHladinu
public void rozvlňHladinu(double dĺžkaVlny)
Pridá pravidelné jemné vlnenie po celej ploche hladiny so zadanou
 dĺžkou vlny a predvolenou amplitúdou 1.0.
 
 Poznámka: Vlnenie bude utlmené relatívne rýchlo,
 preto musí byť v prípade požadovania jeho stálej prítomnosti
 pravidelne obnovované.
Parametre:
dĺžkaVlny – požadovaná dĺžka vlny pridávaného plošného vlnenia
Pozri tiež:
rozvlňHladinu(), 
rozvlňHladinu(double, double)
rozvlnHladinu
public void rozvlnHladinu(double dĺžkaVlny)
 Alias pre rozvlňHladinu.
rozvlňHladinu
public void rozvlňHladinu(double dĺžkaVlny,
                          double amplitúda)
Pridá pravidelné vlnenie po celej ploche hladiny so zadanou dĺžkou
 vlny a amplitúdou.
 
 Poznámka: Vlnenie bude časom utlmené,
 preto musí byť v prípade požadovania jeho stálej prítomnosti
 pravidelne obnovované.
Parametre:
dĺžkaVlny – požadovaná dĺžka vlny pridávaného plošného vlnenia
amplitúda – požadovaná amplitúda pridávaného plošného vlnenia
Pozri tiež:
rozvlňHladinu(), 
rozvlňHladinu(double)
rozvlnHladinu
public void rozvlnHladinu(double dĺžkaVlny,
                          double amplitúda)
 Alias pre rozvlňHladinu.
pridajVlnku
public void pridajVlnku(double x,
                        double y,
                        int polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda pridá oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú. Oblasť
 „vlnky“ by v priestore vyzerala ako pyramída, ktorej podstava je
 zabrúsená do tvaru nedokonalého kruhu. Tento tvar je výsledkom úsilia
 o zachovanie čo najmenšej výpočtovej náročnosti – v algoritme sú
 v dvojnásobnom cykle použité len základné aritmetické operácie
 a jednoduché vetvenie. Tvar podstavca s pyramídou pri pohľade zvrchu
 názornejšie ukazujú nasledujúce obrázky (všetky tri zobrazujú tú istú
 výškovú mapu vlnky, len sú vyhotovené v troch farebných odtieňoch):
 
 
 
  Čiernobiele
 zobrazenievýškovej mapy vlnky.
  
  Žltočervené
 zobrazenievýškovej mapy vlnky.
  
  Modrozelené
 zobrazenievýškovej mapy vlnky.
 
 (Polomer vlnky bol 100 bodov;
 najvyššia intenzita je v strede.)
 
 
 Výsledná maximálna intenzita vlnky je závislá ako od parametra
 násobokIntenzity, tak od polomeru, pretože čím väčší je zadaný
 polomer, tým vyššia bude pyramída. Nasledujúca séria obrázkov ukazuje
 nárast intenzity v závislosti od zväčšovania polomeru pri zachovaní
 rovnakej hodnoty parametra násobokIntenzity:
 
 
 
  Polomer: 20 bodov.
  
  Polomer: 40 bodov.
  
  Polomer: 60 bodov.
  
  Polomer: 80 bodov.
  
  Polomer: 100 bodov.
 
 
 
 Ak má parameter zmraz hodnotu true, tak budú
 všetky tie časti hladiny, ktoré boli touto metódou ovplyvnené, zároveň
 zmrazené. Pozor, metóda nemôže ovplyvniť alebo zmraziť už zmrazené
 časti hladiny!
 
 Metóda má viacero klonov, ktoré umožňujú jej jednoduchšie použitie…
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(double, double, double), 
pridajVlnku(Poloha, double), 
odoberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, int, double, boolean)
pridajVlnku
public void pridajVlnku(double x,
                        double y,
                        double polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(double, double, double), 
pridajVlnku(Poloha, double)
pridajVlnku
public void pridajVlnku(Poloha poloha,
                        double polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(double, double, double), 
pridajVlnku(Poloha, double)
pridajVlnku
public void pridajVlnku(double x,
                        double y,
                        double polomer,
                        double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(double, double, double), 
pridajVlnku(Poloha, double)
pridajVlnku
public void pridajVlnku(Poloha poloha,
                        double polomer,
                        double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(double, double, double), 
pridajVlnku(Poloha, double)
pridajVlnku
public void pridajVlnku(double x,
                        double y,
                        double polomer)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(Poloha, double)
pridajVlnku
public void pridajVlnku(Poloha poloha,
                        double polomer)
Táto metóda funguje úplne rovnako ako metóda
 pridajVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
Pozri tiež:
pridajVlnku(double, double, int, double, boolean), 
pridajVlnku(double, double, double, double, boolean), 
pridajVlnku(Poloha, double, double, boolean), 
pridajVlnku(double, double, double, double), 
pridajVlnku(Poloha, double, double), 
pridajVlnku(double, double, double)
odoberVlnku
public void odoberVlnku(double x,
                        double y,
                        int polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda odoberie oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú. Metóda funguje
 úplne rovnako ako metóda pridajVlnku(x, y, polomer, násobokIntenzity, zmraz) s tým
 rozdielom, že pyramída je od mapy vlnenia v aktívnej sníme odčítaná.
 To znamená, že pri zastavenej simulácii by sa po sebe nasledujúce volania
 metódy pridajVlnku a odoberVlnku s rovnakými parametrami vzájomne
 zrušili. Na pokojnej hladine vyvolá volanie tejto metódy vlnenie
 s negatívnou začiatočnou fázou vlnky. Rozdielny efekt je najlepšie
 vidieť na zmrazených vlnkách (pozri obrázok nižšie).
 
 
 
  Začiatočná fáza
 vlnenia po volaní metódy pridajVlnku.
  
  Začiatočná fáza
 vlnenia po volaní metódy odoberVlnku.
 
 (Obrázky sú orezané
 a zväčšené.)
 
 
 (Aj táto metóda, podobne ako pridajVlnku, má viacero klonov, ktoré umožňujú jej
 jednoduchšie použitie…)
 
 Poznámka: Všetky metódy tejto triedy, ktorých
 názov sa začína slovom „odober“ majú definovanú plnohodnotnú alternatívnu
 metódu, ktorej názov sa začína slovom „uber“ a naopak. Obidve metódy
 sú vzájomnými úplnými kópiami.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(double, double, double), 
odoberVlnku(Poloha, double), 
pridajVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, int, double, boolean)
odoberVlnku
public void odoberVlnku(double x,
                        double y,
                        double polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(double, double, double), 
odoberVlnku(Poloha, double)
odoberVlnku
public void odoberVlnku(Poloha poloha,
                        double polomer,
                        double násobokIntenzity,
                        boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(double, double, double), 
odoberVlnku(Poloha, double)
odoberVlnku
public void odoberVlnku(double x,
                        double y,
                        double polomer,
                        double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(double, double, double), 
odoberVlnku(Poloha, double)
odoberVlnku
public void odoberVlnku(Poloha poloha,
                        double polomer,
                        double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(double, double, double), 
odoberVlnku(Poloha, double)
odoberVlnku
public void odoberVlnku(double x,
                        double y,
                        double polomer)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(Poloha, double)
odoberVlnku
public void odoberVlnku(Poloha poloha,
                        double polomer)
Táto metóda funguje úplne rovnako ako metóda
 odoberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
Pozri tiež:
odoberVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, double, double, boolean), 
odoberVlnku(Poloha, double, double, boolean), 
odoberVlnku(double, double, double, double), 
odoberVlnku(Poloha, double, double), 
odoberVlnku(double, double, double)
uberVlnku
public void uberVlnku(double x,
                      double y,
                      int polomer,
                      double násobokIntenzity,
                      boolean zmraz)
Táto metóda odoberie oblasť vlnky so zadaným polomerom a intenzitou na
 zadanej pozícii, pričom ju zároveň umožní nechať zmrazenú. Metóda funguje
 úplne rovnako ako metóda pridajVlnku(x, y, polomer, násobokIntenzity, zmraz) s tým
 rozdielom, že pyramída je od mapy vlnenia v aktívnej sníme odčítaná.
 To znamená, že pri zastavenej simulácii by sa po sebe nasledujúce volania
 metódy pridajVlnku a uberVlnku s rovnakými parametrami vzájomne
 zrušili. Na pokojnej hladine vyvolá volanie tejto metódy vlnenie
 s negatívnou začiatočnou fázou vlnky. Rozdielny efekt je najlepšie
 vidieť na zmrazených vlnkách (pozri obrázok nižšie).
 
 
 
  Začiatočná fáza
 vlnenia po volaní metódy pridajVlnku.
  
  Začiatočná fáza
 vlnenia po volaní metódy uberVlnku.
 
 (Obrázky sú orezané
 a zväčšené.)
 
 
 (Aj táto metóda, podobne ako pridajVlnku, má viacero klonov, ktoré umožňujú jej
 jednoduchšie použitie…)
 
 Poznámka: Všetky metódy tejto triedy, ktorých
 názov sa začína slovom „uber“ majú definovanú plnohodnotnú alternatívnu
 metódu, ktorej názov sa začína slovom „odober“ a naopak. Obidve metódy
 sú vzájomnými úplnými kópiami.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
uberVlnku(double, double, double, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(Poloha, double, double), 
uberVlnku(double, double, double), 
uberVlnku(Poloha, double), 
pridajVlnku(double, double, int, double, boolean), 
odoberVlnku(double, double, int, double, boolean)
uberVlnku
public void uberVlnku(double x,
                      double y,
                      double polomer,
                      double násobokIntenzity,
                      boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(Poloha, double, double), 
uberVlnku(double, double, double), 
uberVlnku(Poloha, double)
uberVlnku
public void uberVlnku(Poloha poloha,
                      double polomer,
                      double násobokIntenzity,
                      boolean zmraz)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň umožňuje zadať polohu stredu oblasti ako jeden parameter
 poloha. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
zmraz – ak je hodnota tohto parametra rovná true, tak
     budú všetky ovplyvnené časti hladiny zároveň zmrazené
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(Poloha, double, double), 
uberVlnku(double, double, double), 
uberVlnku(Poloha, double)
uberVlnku
public void uberVlnku(double x,
                      double y,
                      double polomer,
                      double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, double, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(Poloha, double, double), 
uberVlnku(double, double, double), 
uberVlnku(Poloha, double)
uberVlnku
public void uberVlnku(Poloha poloha,
                      double polomer,
                      double násobokIntenzity)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametru zmraz predvolenú hodnotu
 false. Ďalšie podrobnosti sa dočítate v opise uvedenej
 metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
násobokIntenzity – násobok intenzity vlnky – úroveň intenzity
     v každom bode bude násobená touto hodnotou
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, double, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(double, double, double), 
uberVlnku(Poloha, double)
uberVlnku
public void uberVlnku(double x,
                      double y,
                      double polomer)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
polomer – polomer vlnky
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, double, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(Poloha, double, double), 
uberVlnku(Poloha, double)
uberVlnku
public void uberVlnku(Poloha poloha,
                      double polomer)
Táto metóda funguje úplne rovnako ako metóda
 uberVlnku(x, y, (int)polomer, násobokIntenzity, zmraz), ibaže
 umožňuje zadať parameter polomer ako reálne číslo, umožňuje
 zadať polohu stredu oblasti ako jeden parameter poloha
 a zároveň určuje parametrom násobokIntenzity a zmraz
 predvolené hodnoty 765 a false. Ďalšie
 podrobnosti sa dočítate v opise uvedenej metódy.
Parametre:
poloha – poloha stredu oblasti
polomer – polomer vlnky
Pozri tiež:
uberVlnku(double, double, int, double, boolean), 
uberVlnku(double, double, double, double, boolean), 
uberVlnku(Poloha, double, double, boolean), 
uberVlnku(double, double, double, double), 
uberVlnku(Poloha, double, double), 
uberVlnku(double, double, double)
pridajVzruch
public void pridajVzruch(double x,
                         double y)
Pridanie základného vzruchu na zadanej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
Pozri tiež:
pridajVzruch(double, double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double), 
pridajVzruch(Poloha, double, double), 
uberVzruch(double, double), 
odoberVzruch(double, double), 
pridajVzruch(Image)
pridajVzruch
public void pridajVzruch(double x,
                         double y,
                         double rozsahVzruchu)
Pridanie základného vzruchu so zadaným rozsahom na zadanej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double), 
pridajVzruch(Poloha, double, double)
pridajVzruch
public void pridajVzruch(double x,
                         double y,
                         int rozsahVzruchu,
                         int intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii. (Toto je pôvodná metóda, ktore prekrytie
 ovplyvní všetky metódy, ktoré sú jej klonmi.)
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude pripočítaná ku každému
     bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double), 
pridajVzruch(Poloha, double, double)
pridajVzruch
public void pridajVzruch(double x,
                         double y,
                         double rozsahVzruchu,
                         double intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude pripočítaná ku každému
     bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double), 
pridajVzruch(Poloha, double, double), 
pridajVzruch(double, double, int, int)
pridajVzruch
public void pridajVzruch(Poloha poloha)
Pridanie základného vzruchu na zadanej pozícii.
Parametre:
poloha – poloha stredu oblasti
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha, double), 
pridajVzruch(Poloha, double, double)
pridajVzruch
public void pridajVzruch(Poloha poloha,
                         double rozsahVzruchu)
Pridanie základného vzruchu so zadaným rozsahom na zadanej pozícii.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double, double)
pridajVzruch
public void pridajVzruch(Poloha poloha,
                         double rozsahVzruchu,
                         double intenzitaVzruchu)
Pridanie základného vzruchu so zadaným rozsahom a intenzitou
 na zadanej pozícii.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude pripočítaná ku každému
     bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
pridajVzruch(double, double), 
pridajVzruch(double, double, double), 
pridajVzruch(double, double, double, double), 
pridajVzruch(Poloha), 
pridajVzruch(Poloha, double)
pridajVzruch
public void pridajVzruch(Image obrázok)
Pridá k hladine vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka. Ak obrázok (maska) nemá zhodné rozmery s rozmermi výškových
 máp vlnenia, bude použitý tak, ako keby bol nakreslený v strede mapy
 vlnenia (ak je väčší, nadbytočné časti budú ignorované, ak je menší,
 chýbajúce časti budú považované za prázdne). Hodnoty bodov výškovej
 mapy vlnenia budú potom ovplyvnené súčtom negatívnych hodnôt farebných
 zložiek jednotlivých bodov obrázka. Čierne body znamenajú maximálny
 nárast intenzity, farby s najvyššími hodnotami jedinej farebnej zložky
 (červenej, zelenej alebo modrej) znamenajú dvojtretinový nárast
 intenzity a biele body znamenajú nulový nárast intenzity. Popri tom
 je zároveň braná do úvahy aj úroveň priehľadnosti jednotlivých bodov
 masky. Neviditeľné body sú paušálne ignorované a intenzita
 polopriehľadných bodov je adekvátne znížená.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na pridanie vzruchov k aktuálnej výškovej mape vlnenia
Pozri tiež:
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int), 
uberVzruch(Image), 
odoberVzruch(Image), 
pridajVzruch(double, double)
pridajVzruch
public void pridajVzruch(Image obrázok,
                         int posunIntenzity)
Pridá k hladine vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka s možnosťou posunutia výslednej intenzity hladiny pre všetky
 ovplyvnené body. Ak je posun intenzity nulový, tak je výsledok
 vykonania tejto metódy rovnaký ako pri metóde
 pridajVzruch(obrázok) (pozrite si aj jej
 opis). Ak je posun intenzity rovný napríklad presne hodnote
 765, tak všetky čisto čierne nepriehľadné body masky budú
 mať na stav hladiny nulový vplyv. Jednoducho posun intenzity ovplyvní
 výsledok v kladnom alebo zápornom smere. Aj pri tejto metóde platí,
 že neviditeľné body sú paušálne ignorované.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na pridanie vzruchov k aktuálnej výškovej mape vlnenia
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar)
Pridá na hladine vzruch v zadanom tvare. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda pridajVzruch(obrázok). (Pozrite si
 aj opis uvedenej metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar,
                         int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda pridajVzruch(obrázok,
 posunIntenzity). (Pozrite si aj opis uvedenej metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar,
                         boolean vyplnený)
Pridá na hladine vzruch v zadanom tvare. Tvar je považovaný za
 vyplnenú plochu alebo kreslenú čiaru podľa hodnoty parametra
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí alebo
 vyplní do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda pridajVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar,
                         double hrúbkaČiary)
Pridá na hladine vzruch v zadanom tvare. Tvar je považovaný za
 čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak, že zadaný
 tvar nakreslí do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda pridajVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar,
                         boolean vyplnený,
                         int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body. Tvar je považovaný za
 vyplnenú plochu alebo kreslenú čiaru podľa hodnoty parametra
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí alebo
 vyplní do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda pridajVzruch(obrázok, posunIntenzity). (Pozrite si aj opis uvedenej
 metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, double), 
pridajVzruch(Shape, double, int)
pridajVzruch
public void pridajVzruch(Shape tvar,
                         double hrúbkaČiary,
                         int posunIntenzity)
Pridá na hladine vzruch v zadanom tvare s možnosťou posunutia výslednej
 intenzity hladiny pre všetky ovplyvnené body. Tvar je považovaný za
 čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak, že zadaný
 tvar nakreslí do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda pridajVzruch(obrázok, posunIntenzity). (Pozrite si aj opis uvedenej
 metódy.)
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky
Pozri tiež:
pridajVzruch(Image), 
pridajVzruch(Image, int), 
pridajVzruch(Shape), 
pridajVzruch(Shape, int), 
pridajVzruch(Shape, boolean), 
pridajVzruch(Shape, boolean, int), 
pridajVzruch(Shape, double)
uberVzruch
public void uberVzruch(double x,
                       double y)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
Pozri tiež:
uberVzruch(double, double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double), 
uberVzruch(Poloha, double, double), 
pridajVzruch(double, double), 
odoberVzruch(double, double), 
uberVzruch(Image)
uberVzruch
public void uberVzruch(double x,
                       double y,
                       double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double), 
uberVzruch(Poloha, double, double)
uberVzruch
public void uberVzruch(double x,
                       double y,
                       int rozsahVzruchu,
                       int intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou. (Toto je pôvodná metóda, ktore prekrytie
 ovplyvní všetky metódy, ktoré sú jej klonmi.)
 
 Poznámka: Všetky metódy tejto triedy, ktorých
 názov sa začína slovom „uber“ majú definovanú plnohodnotnú alternatívnu
 metódu, ktorej názov sa začína slovom „odober“ a naopak. Obidve metódy
 sú vzájomnými úplnými kópiami.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double), 
uberVzruch(Poloha, double, double)
uberVzruch
public void uberVzruch(double x,
                       double y,
                       double rozsahVzruchu,
                       double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double), 
uberVzruch(Poloha, double, double), 
uberVzruch(double, double, int, int)
uberVzruch
public void uberVzruch(Poloha poloha)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
Parametre:
poloha – poloha stredu oblasti
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha, double), 
uberVzruch(Poloha, double, double)
uberVzruch
public void uberVzruch(Poloha poloha,
                       double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double, double)
uberVzruch
public void uberVzruch(Poloha poloha,
                       double rozsahVzruchu,
                       double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
uberVzruch(double, double), 
uberVzruch(double, double, double), 
uberVzruch(double, double, double, double), 
uberVzruch(Poloha), 
uberVzruch(Poloha, double)
odoberVzruch
public void odoberVzruch(double x,
                         double y)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
Pozri tiež:
odoberVzruch(double, double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double), 
odoberVzruch(Poloha, double, double), 
pridajVzruch(double, double), 
uberVzruch(double, double), 
uberVzruch(Image)
odoberVzruch
public void odoberVzruch(double x,
                         double y,
                         double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double), 
odoberVzruch(Poloha, double, double)
odoberVzruch
public void odoberVzruch(double x,
                         double y,
                         int rozsahVzruchu,
                         int intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou. (Toto je pôvodná metóda, ktore prekrytie
 ovplyvní všetky metódy, ktoré sú jej klonmi.)
 
 Poznámka: Všetky metódy tejto triedy, ktorých
 názov sa začína slovom „odober“ majú definovanú plnohodnotnú alternatívnu
 metódu, ktorej názov sa začína slovom „uber“ a naopak. Obidve metódy
 sú vzájomnými úplnými kópiami.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double), 
odoberVzruch(Poloha, double, double)
odoberVzruch
public void odoberVzruch(double x,
                         double y,
                         double rozsahVzruchu,
                         double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
Parametre:
x – horizontálna súradnica stredu oblasti
y – vertikálna súradnica stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double), 
odoberVzruch(Poloha, double, double), 
odoberVzruch(double, double, int, int)
odoberVzruch
public void odoberVzruch(Poloha poloha)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii.
Parametre:
poloha – poloha stredu oblasti
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha, double), 
odoberVzruch(Poloha, double, double)
odoberVzruch
public void odoberVzruch(Poloha poloha,
                         double rozsahVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double, double)
odoberVzruch
public void odoberVzruch(Poloha poloha,
                         double rozsahVzruchu,
                         double intenzitaVzruchu)
Odobratie štvorcovej oblasti vzruchu na zadanej pozícii so zadaným
 rozsahom a intenzitou.
Parametre:
poloha – poloha stredu oblasti
rozsahVzruchu – hodnota rozsahu určená polovicou strany štvorca
     ovplyvnenej oblasti (tiež v tvare štvorca)
intenzitaVzruchu – hodnota, ktorá bude odpočítaná od hodnoty
     každého bodu výškovej mapy v rámci ovplyvnenej oblasti
Pozri tiež:
odoberVzruch(double, double), 
odoberVzruch(double, double, double), 
odoberVzruch(double, double, double, double), 
odoberVzruch(Poloha), 
odoberVzruch(Poloha, double)
uberVzruch
public void uberVzruch(Image obrázok)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka. Ak obrázok (maska) nemá zhodné rozmery s rozmermi výškových
 máp vlnenia, bude použitý tak, ako keby bol nakreslený v strede mapy
 vlnenia (ak je väčší, nadbytočné časti budú ignorované, ak je menší,
 chýbajúce časti budú považované za prázdne). Hodnoty bodov výškovej
 mapy vlnenia budú potom ovplyvnené súčtom negatívnych hodnôt farebných
 zložiek jednotlivých bodov obrázka. Čierne body znamenajú maximálny
 úbytok intenzity, farby s najvyššími hodnotami jedinej farebnej zložky
 (červenej, zelenej alebo modrej) znamenajú dvojtretinový úbytok
 intenzity a biele body znamenajú nulový úbytok intenzity. Popri tom
 je zároveň braná do úvahy aj úroveň priehľadnosti jednotlivých bodov
 masky. Neviditeľné body sú paušálne ignorované a intenzita
 polopriehľadných bodov je adekvátne znížená.
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na pridanie vzruchov k aktuálnej výškovej mape vlnenia
Pozri tiež:
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int), 
pridajVzruch(Image), 
odoberVzruch(Image)
uberVzruch
public void uberVzruch(Image obrázok,
                       int posunIntenzity)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme
 zadaného obrázka s možnosťou posunutia výslednej intenzity hladiny
 pre všetky ovplyvnené body (v zápornom smere). Ak je posun intenzity
 nulový, tak je výsledok vykonania tejto metódy rovnaký ako pri metóde
 uberVzruch(obrázok) (pozrite si aj jej
 opis). Táto metóda pôsobí ako negatívna verzia metódy
 pridajVzruch(obrázok, posunIntenzity).
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na odobratie vzruchov k aktuálnej výškovej mape vlnenia
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda uberVzruch(obrázok). (Pozrite si
 aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar,
                       int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do
 vnútornej masky (čo je v podstate obrázok), ktorú použije rovnakým
 spôsobom ako metóda uberVzruch(obrázok,
 posunIntenzity). (Pozrite si aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar,
                       boolean vyplnený)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 vyplnenú plochu alebo kreslenú čiaru podľa hodnoty parametra
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí alebo
 vyplní do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda uberVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar,
                       double hrúbkaČiary)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak, že zadaný
 tvar nakreslí do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda uberVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar,
                       boolean vyplnený,
                       int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za vyplnenú plochu alebo kreslenú čiaru podľa hodnoty
 parametra vyplnený. Metóda funguje tak, že zadaný tvar
 nakreslí alebo vyplní do vnútornej masky (čo je v podstate obrázok),
 ktorú použije rovnakým spôsobom ako metóda uberVzruch(obrázok, posunIntenzity). (Pozrite si aj opis
 uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, double), 
uberVzruch(Shape, double, int)
uberVzruch
public void uberVzruch(Shape tvar,
                       double hrúbkaČiary,
                       int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak,
 že zadaný tvar nakreslí do vnútornej masky (čo je v podstate obrázok),
 ktorú použije rovnakým spôsobom ako metóda uberVzruch(obrázok, posunIntenzity). (Pozrite si aj opis
 uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
uberVzruch(Image), 
uberVzruch(Image, int), 
uberVzruch(Shape), 
uberVzruch(Shape, int), 
uberVzruch(Shape, boolean), 
uberVzruch(Shape, boolean, int), 
uberVzruch(Shape, double)
odoberVzruch
public void odoberVzruch(Image obrázok)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme zadaného
 obrázka. Ak obrázok (maska) nemá zhodné rozmery s rozmermi výškových
 máp vlnenia, bude použitý tak, ako keby bol nakreslený v strede mapy
 vlnenia (ak je väčší, nadbytočné časti budú ignorované, ak je menší,
 chýbajúce časti budú považované za prázdne). Hodnoty bodov výškovej
 mapy vlnenia budú potom ovplyvnené súčtom negatívnych hodnôt farebných
 zložiek jednotlivých bodov obrázka. Čierne body znamenajú maximálny
 úbytok intenzity, farby s najvyššími hodnotami jedinej farebnej zložky
 (červenej, zelenej alebo modrej) znamenajú dvojtretinový úbytok
 intenzity a biele body znamenajú nulový úbytok intenzity. Popri tom
 je zároveň braná do úvahy aj úroveň priehľadnosti jednotlivých bodov
 masky. Neviditeľné body sú paušálne ignorované a intenzita
 polopriehľadných bodov je adekvátne znížená.
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na pridanie vzruchov k aktuálnej výškovej mape vlnenia
Pozri tiež:
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int), 
pridajVzruch(Image), 
uberVzruch(Image)
odoberVzruch
public void odoberVzruch(Image obrázok,
                         int posunIntenzity)
Odoberie z hladiny vzruchy podľa masky reprezentovanej vo forme
 zadaného obrázka s možnosťou posunutia výslednej intenzity hladiny
 pre všetky ovplyvnené body (v zápornom smere). Ak je posun intenzity
 nulový, tak je výsledok vykonania tejto metódy rovnaký ako pri metóde
 odoberVzruch(obrázok) (pozrite si aj jej
 opis). Táto metóda pôsobí ako negatívna verzia metódy
 pridajVzruch(obrázok, posunIntenzity).
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
obrázok – obrázok, ktorého intenzita a priehľadnosť bodov budú
     použité na odobratie vzruchov k aktuálnej výškovej mape vlnenia
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do vnútornej
 masky (čo je v podstate obrázok), ktorú použije rovnakým spôsobom ako
 metóda odoberVzruch(obrázok). (Pozrite si
 aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar,
                         int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za vyplnený. Metóda funguje tak, že zadaný tvar nakreslí do
 vnútornej masky (čo je v podstate obrázok), ktorú použije rovnakým
 spôsobom ako metóda odoberVzruch(obrázok, posunIntenzity). (Pozrite si aj opis uvedenej
 metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar,
                         boolean vyplnený)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 vyplnenú plochu alebo kreslenú čiaru podľa hodnoty parametra
 vyplnený. Metóda funguje tak, že zadaný tvar nakreslí alebo
 vyplní do vnútornej masky (čo je v podstate obrázok), ktorú použije
 rovnakým spôsobom ako metóda odoberVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar,
                         double hrúbkaČiary)
Odoberie z hladiny vzruch v zadanom tvare. Tvar je považovaný za
 čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak, že zadaný
 tvar nakreslí do vnútornej masky (čo je v podstate obrázok), ktorú
 použije rovnakým spôsobom ako metóda odoberVzruch(obrázok). (Pozrite si aj opis uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar,
                         boolean vyplnený,
                         int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za vyplnenú plochu alebo kreslenú čiaru podľa hodnoty
 parametra vyplnený. Metóda funguje tak, že zadaný tvar
 nakreslí alebo vyplní do vnútornej masky (čo je v podstate obrázok),
 ktorú použije rovnakým spôsobom ako metóda odoberVzruch(obrázok, posunIntenzity). (Pozrite si aj opis
 uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
vyplnený – ak je true, tak tvar bude použitý ako
     vyplnený, v opačnom prípade ako nakreslená čiara (s predvolenou
     hrúbkou 6.0 bodov)
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, double), 
odoberVzruch(Shape, double, int)
odoberVzruch
public void odoberVzruch(Shape tvar,
                         double hrúbkaČiary,
                         int posunIntenzity)
Odoberie z hladiny vzruch v zadanom tvare s možnosťou posunutia
 výslednej intenzity hladiny pre všetky ovplyvnené body. Tvar je
 považovaný za čiaru nakreslenú so zadanou hrúbkou. Metóda funguje tak,
 že zadaný tvar nakreslí do vnútornej masky (čo je v podstate obrázok),
 ktorú použije rovnakým spôsobom ako metóda odoberVzruch(obrázok, posunIntenzity). (Pozrite si aj opis
 uvedenej metódy.)
 
 Poznámka: Úbytok intenzity neznamená jej útlm,
 ale odčítanie. To znamená, že efekt odčítania nejakej hodnoty od hladiny
 s nulovou intenzitou má za následok vyvolanie vlnenia so zápornou
 začiatočnou hodnotou „výšky,“ resp. hĺbky vlny.
Parametre:
tvar – tvar, podľa ktorého bude ovplyvnená prislúchajúca časť
     hladiny
hrúbkaČiary – hrúbka čiary použitého tvaru
posunIntenzity – posun výslednej intenzity jednotlivých bodov
     masky (v zápornom smere)
Pozri tiež:
odoberVzruch(Image), 
odoberVzruch(Image, int), 
odoberVzruch(Shape), 
odoberVzruch(Shape, int), 
odoberVzruch(Shape, boolean), 
odoberVzruch(Shape, boolean, int), 
odoberVzruch(Shape, double)
roluj
public void roluj(double Δx,
                  double Δy)
Roluje mapu vlnenia o želaný počet bodov v horizontálnom
 a vertikálnom smere. Rolovanie znamená, že tá časť mapy vlnenia,
 ktorá opustí plochu mapy v ľubovoľnom smere bude stratená.
 
 Varovanie! Rolovanie a pretáčanie údajov
 inštancií vlnenia je takmer 10-násobne výpočtovo náročnejšie
 v porovnaní s rolovaním obrázkov a plátien sveta. Navyše, výsledok
 rolovania nemusí spĺňať všetky očakávania, pretože simulácia vlnenia
 je ovplyvňovaná rozmermi vlnenej plochy – prirodzeným dôsledkom
 algoritmu totiž je aj jeho správanie, ktoré ústi do toho, že sa vlny
 odrážajú od hraníc celej vlnenej plochy rovnako ako od hraníc
 deaktivovaných oblastí.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
Pozri tiež:
pretoč(double, double)
pretoč
public void pretoč(double Δx,
                   double Δy)
Pretočí mapu vlnenia o želaný počet bodov v horizontálnom
 a vertikálnom smere. Pretočenie znamená, že tá časť mapy vlnenia,
 ktorá opustí plochu mapy v jenom smere (napr. hore) bude doplnená
 v protiľahlom smere (napr. dole) a naopak.
 
 Varovanie! Rolovanie a pretáčanie údajov
 inštancií vlnenia je takmer 10-násobne výpočtovo náročnejšie
 v porovnaní s rolovaním obrázkov a plátien sveta. Navyše, výsledok
 rolovania nemusí spĺňať všetky očakávania, pretože simulácia vlnenia
 je ovplyvňovaná rozmermi vlnenej plochy – prirodzeným dôsledkom
 algoritmu totiž je aj jeho správanie, ktoré ústi do toho, že sa vlny
 odrážajú od hraníc celej vlnenej plochy rovnako ako od hraníc
 deaktivovaných oblastí.
Parametre:
Δx – posun v horizontálnom (vodorovnom) smere
Δy – posun vo vertikálnom (zvislom) smere
Pozri tiež:
roluj(double, double)
pretoc
public void pretoc(double Δx,
                   double Δy)
 Alias pre pretoč.
vykonaj
public void vykonaj()
Vykoná proces vlnenia – prepočíta ďalšiu snímku. Táto metóda je
 programovacím rámcom používaná automaticky počas činnosti časovača.
 Vyžitie však môže nájsť v prípade deaktivovaných inštancií vlnenia na krokové posúvanie simulácie
 vlnenia. Podobný účel plní metóda simuluj, ktorá
 je schopná posunúť simuláciu vlnenia o niekoľko snímok dopredu. (Tá
 nie je programovacím rámcom používaná automaticky.)
Pozri tiež:
simuluj(int)
simuluj
public void simuluj(int počet)
Vykoná výpočet niekoľkých snímok procesu vlnenia naraz – posunie
 simuláciu vlnenia o niekoľko snímok dopredu. Táto metóda nie je
 používaná programovacím rámcom automaticky. Slúži na získanie rastra,
 ktorý je deformovaný v určitej pokročilej fáze vlnenia. V súčinnosti
 s deaktivovaním automatického prepočítavania
 počas časovača môže byť táto metóda využitá na získanie statických
 snímok (rastrov) deformovaných algoritmom vlnenia, ktorý bol vopred
 posunutý do určitej fázy, v ktorej ho ponecháme zamrazený a tým
 využiť tento algoritmus napríklad na simulovanie zvlneného skla.
Parametre:
počet – počet snímok, ktoré majú byť prepočítané
Pozri tiež:
vykonaj()
zvlnenýRaster
public BufferedImage zvlnenýRaster()
Táto metóda vráti rastrový obrázok inštancie typu
 BufferedImage obsahujúci aktuálny zvlnený
 obraz svojej predlohy. To znamená, že obraz v tejto inštancii je
 pravidelne aktualizovaný a obsahuje algoritmicky prepočítaný zvlnený
 obraz zdroja – predlohy, ktorá bola zadaná pri
 konštrukcii tejto
 inštancie vlnenia.
 
 Rámec je vnútorne schopná rozpoznať, či má jeho konkrétna
 súčasť (napríklad plátno alebo
 obrázok) zapnutý mechanizmus vlnenia
 a ak je mechanizmus zapnutý, tak je počas kreslenia vykonaného
 v rámci programovacieho rámca vždy nakreslený zvlnený raster. Ak by
 ste však potrebovali zvlnený raster objektu použiť mimo
 programovacieho rámca, tak bez tejto metódy by to nebolo možné,
 pretože samotná inštancia objektu (to jest napríklad obrázka) navonok vždy reprezentuje len svoju nezvlnenú
 verziu.
 
 Pripomenutie faktov: Animácia vlnenia použitého
 v rámci programovacieho rámca je vykonávaná automaticky počas činnosti
 časovača a zvlnený raster je v rámci programovacieho rámca tiež použitý
 automaticky v čase kreslenia objektu.
Návratová hodnota:
inštancia obsahujúca raster zvlnenej verzie tohto
     obrázka alebo null, ak vlnenie pre tento obrázok
     nie je aktívne
zvlnenyRaster
public BufferedImage zvlnenyRaster()
 Alias pre zvlnenýRaster.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":6,"i1":6,"i2":6,"i3":6};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],4:["t3","Abstract Metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Rozhranie ZmenaCelejObrazovky
public interface ZmenaCelejObrazovky
Toto rozhranie slúži na obsluhu zmeny režimu celej obrazovky. Rámec
 definuje dva predvolené spôsoby zmeny (hardvérová
 a softvérová) a vďaka tomuto rozhraniu je možné
 definovať ďalšie vlastné spôsoby zmeny režimu celej obrazovky. Rozhranie
 umožňuje spresniť komunikáciu medzi aplikáciou a programovacím rámcom
 počas prechodu do aj z režimu celej obrazovky a tým tento proces
 dokonalejšie riadiť zo strany aplikácie. Metóda sveta
 celáObrazovka(zariadenie, celáObrazovka) vždy pracuje s niektorou verziou
 implementácie tohto rozhrania. Predvolene je to inštancia ZmenaCelejObrazovky.hardvérová, ktorú je
 možné zmeniť úpravou hodnoty atribútu Svet.zmenaCelejObrazovky (pričom ak je hodnota tohto
 atribútu null, tak je obsluha presmerovaná späť do inštancie
 hardvérová).
Prehľad atribútov
Atribúty 
Modifikátor a typ
Atribút a opis
static ZmenaCelejObrazovky
hardverova
 Alias pre hardvérová.
static ZmenaCelejObrazovky
hardvérová
Toto je predvolený hardverový spôsob zmeny režimu celej obrazovky.
static ZmenaCelejObrazovky
softverova
 Alias pre softvérová.
static ZmenaCelejObrazovky
softvérová
Toto je predvolený softvérový spôsob zmeny režimu celej obrazovky.
Prehľad metód
Všetky metódy Inštančné metódy Abstract Metódy 
Modifikátor a typ
Metóda a opis
Window
dajOkno(int indexZariadenia,
       GraphicsDevice zariadenie)
Táto metóda má poskytnúť programovacom rámci aktívne okno režimu
 celej obrazovky.
boolean
jePodpora(int indexZariadenia,
         GraphicsDevice zariadenie)
Táto metóda má programovacom rámci poskytnúť informáciu o tom, či
 je pre zadané zariadenie dostupná podpora režimu celej obrazovky.
boolean
ponechajOkno()
Táto metóda umožňuje spresniť to, či pri prechode do režimu celej
 obrazovky má programovací rámec vyrobiť nové samostatné okno (čo je
 predvolený spôsob správania) alebo sa použije (ponechá) jestvujúce
 okno sveta (čo môže byť vyžadované pri softvérovej zmene režimu na
 niektorých operačných systémoch – ako je macOS).
void
zmena(int indexZariadenia,
     GraphicsDevice zariadenie,
     boolean prejsťDoRežimu,
     JFrame oknoCelejObrazovky)
Táto metóda je zodpovedná za vykonanie prechodu do režimu celej
 obrazovky alebo späť.
Podrobnosti atribútov
hardvérová
static final ZmenaCelejObrazovky hardvérová
Toto je predvolený hardverový spôsob zmeny režimu celej obrazovky.
 Tento spôsob priamo využíva možnosti zariadenia pre ktoré sa pokúsi
 získať výhradný režim prístupu. Zmena režimu je závislá od
 konkrétnej platformy a hardvéru.
hardverova
static final ZmenaCelejObrazovky hardverova
 Alias pre hardvérová.
softvérová
static final ZmenaCelejObrazovky softvérová
Toto je predvolený softvérový spôsob zmeny režimu celej obrazovky.
 Tento spôsob iba zistí rozmery cieľového zariadenia a upraví podľa
 nich rozmery okna celej obrazovky.
softverova
static final ZmenaCelejObrazovky softverova
 Alias pre softvérová.
Podrobnosti metód
jePodpora
boolean jePodpora(int indexZariadenia,
                  GraphicsDevice zariadenie)
Táto metóda má programovacom rámci poskytnúť informáciu o tom, či
 je pre zadané zariadenie dostupná podpora režimu celej obrazovky. Na
 základe návratovej hodnoty bude programovací rámec vedieť, či má alebo
 nemá zmysel skúšať vykonať akciu súvisiacu so zmenou režimu celej
 obrazovky. Ak je návratová hodnota false, programovací
 rámec nevykoná požadovanú akciu.
Parametre:
indexZariadenia – index zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
zariadenie – inštancia zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
Návratová hodnota:
hodnota true znamená, že režim celej obrazovky
     je pre toto zariadenie podporovaný
dajOkno
Window dajOkno(int indexZariadenia,
               GraphicsDevice zariadenie)
Táto metóda má poskytnúť programovacom rámci aktívne okno režimu
 celej obrazovky. Ak je zariadenie v režime celej obrazovky, tak metóda
 musí vrátiť správne okno, aby programovací rámec bol schopný
 indentifikovať, či on sám bol zdrojom prechodu zariadenia do režimu
 celej obrazovky. Ak vrátené okno nie je to, ktoré programovací rámec
 režimu poskytol, tak programovací rámec nevykoná akciu prechodu späť
 z režimu celej obrazovky.
Parametre:
indexZariadenia – index zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
zariadenie – inštancia zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
Návratová hodnota:
inštancia okna použitého v režime celej obrazovky
zmena
void zmena(int indexZariadenia,
           GraphicsDevice zariadenie,
           boolean prejsťDoRežimu,
           JFrame oknoCelejObrazovky)
Táto metóda je zodpovedná za vykonanie prechodu do režimu celej
 obrazovky alebo späť. Metóda dostane od programovacieho rámca všetky
 potrebné informácie – či bola žiadaná zmena na režim celej obrazovky
 alebo naspäť, ktoré zariadenie má byť použité a ktoré okno bude použité
 pre tento režim.
Parametre:
indexZariadenia – index zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
zariadenie – inštancia zariadenia, pre ktoré má byť vyžiadaný
     režim celej obrazovky
prejsťDoRežimu – hodnota true znamená žiadanie
     prechodu do režimu celej obrazovky a naopak, hodnota
     flase znamená prechod späť do „normálneho“ režimu
     (režimu okien používateľského rozhrania operačného systému)
oknoCelejObrazovky – inštancia okna, ktoré bude použité v režime
     celej obrazovky
ponechajOkno
boolean ponechajOkno()
Táto metóda umožňuje spresniť to, či pri prechode do režimu celej
 obrazovky má programovací rámec vyrobiť nové samostatné okno (čo je
 predvolený spôsob správania) alebo sa použije (ponechá) jestvujúce
 okno sveta (čo môže byť vyžadované pri softvérovej zmene režimu na
 niektorých operačných systémoch – ako je macOS).
Návratová hodnota:
ak má byť pri prechode do režimu celej obrazovky vyrobené nové
     samostatné okno, tak musí byť návratová tejto metódy
     false
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10};
var tabs = {65535:["t0","Všetky metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Zoznam.ObrátenýIterátor&lt;Typ&gt;
java.lang.Object
Zoznam.ObrátenýIterátor&lt;Typ&gt;
Všetky implementované rozhrania:
Iterable&lt;Typ&gt;
Známe priame odvodené triedy:
Zoznam.ObratenyIterator
Nadradená trieda:
Zoznam&lt;Typ&gt;
public static class Zoznam.ObrátenýIterátor&lt;Typ&gt;
extends Object
implements Iterable&lt;Typ&gt;
Táto trieda slúži na vytvorenie obráteného iterátora zoznamu.
 Jej použitie je implicitné. Je uvedené napríklad v opise metód
 Zoznam.odzadu() a Zoznam.naopak().
 
 Použitý zdroj:
 
 
User:Ron Tuffin – 
 href="https://stackoverflow.com/users/99389/nat"
User:Nat – 
 href="https://stackoverflow.com/users/32453/rogerdpack"
User:rogerdpack: 
 href="https://stackoverflow.com/questions/1098117/can-one-do-a-for-each-loop-in-java-in-reverse-order"
Can one do a for-each loop in Java in reverse
 order? Stack Overflow, 2009, 2016. Citované: 2016.
Pozri tiež:
Zoznam.odzadu(), 
Zoznam.odzadu(List), 
Zoznam.naopak(), 
Zoznam.naopak(List)
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
ObrátenýIterátor(List&lt;Typ&gt; pôvodný) 
Prehľad metód
Všetky metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Iterator&lt;Typ&gt;
iterator() 
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Metódy zdedené z rozhrania java.lang.Iterable
forEach, spliterator
Podrobnosti konštruktorov
ObrátenýIterátor
public ObrátenýIterátor(List&lt;Typ&gt; pôvodný)
Podrobnosti metód
iterator
public Iterator&lt;Typ&gt; iterator()
Definované:
iterator v rozhraní Iterable&lt;Typ&gt;
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":9,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":9,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Zoznam&lt;Typ&gt;
java.lang.Object
java.util.AbstractCollection&lt;E&gt;
java.util.AbstractList&lt;E&gt;
java.util.Vector&lt;Typ&gt;
Zoznam&lt;Typ&gt;
Všetky implementované rozhrania:
Serializable, Cloneable, Iterable&lt;Typ&gt;, Collection&lt;Typ&gt;, List&lt;Typ&gt;, RandomAccess
Známe priame odvodené triedy:
GRobotException.Denník
public class Zoznam&lt;Typ&gt;
extends Vector&lt;Typ&gt;
Zoznam je použiteľný na vytvorenie zoznamu ľubovoľných objektov.
 Trieda obaľuje a rozširuje triedu Javy Vector&lt;Typ&gt;. To znamená, že podobne ako pri pôvodnom vektore, je možné
 vytvorený zoznam prechádzať konštrukciou:
 
 
for (Typ prvok : zoznam)
{
    prvok.metóda(…
    …
}
 
 Napríklad zoznam reťazcov vytvoríme a prejdeme takto:
 
 
final Zoznam&lt;String&gt; zoznamMien = new Zoznam&lt;String&gt;();
zoznamMien.pridaj("Adam");
zoznamMien.pridaj("Braňo");
zoznamMien.pridaj("Cyril");
zoznamMien.pridaj("Daniel");
Svet.vypíšRiadok("Zoznam mien:");
for (String meno : zoznamMien)
{
    Svet.vypíšRiadok(" &gt;", meno);
}
 
 Výsledok:
 
 
Zoznam mien:
 &gt; Adam
 &gt; Braňo
 &gt; Cyril
 &gt; Daniel
 
 Zoznamy sú dynamické – prvky je možné ľubovoľne pridávať a odoberať –
 táto trieda obsahuje širokú skupinu metód pokrývajúcu najdôležitejšie
 funkcie práce so zoznamom (pridávanie/&#8203;vkladanie, odoberanie, nahrádzanie a vyhľadávanie…).
 Vnútorná správa zoznamu je v réžii Javy. Je dôležité upozorniť na to,
 že nie je správne meniť zoznam (pridávať alebo odoberať prvky) počas
 jeho prechádzania. Mohlo by dôjsť k nepredvídateľným vedľajším efektom
 alebo by to mohlo viesť ku vzniku výnimky.
Pozri tiež:
Vector&lt;E&gt;, 
Serializovateľnosť
Prehľad vnorených tried
Vnorené triedy 
Modifikátor a typ
Trieda a opis
static class 
Zoznam.ObratenyIterator&lt;Typ&gt;
 Alias pre ObrátenýIterátor.
static class 
Zoznam.ObrátenýIterátor&lt;Typ&gt;
Táto trieda slúži na vytvorenie obráteného iterátora zoznamu.
Prehľad atribútov
Atribúty zdedené z triedy java.util.Vector
capacityIncrement, elementCount, elementData
Atribúty zdedené z triedy java.util.AbstractList
modCount
Prehľad konštruktorov
Konštruktory 
Konštruktor a opis
Zoznam()
Vytvorí prázdny zoznam.
Zoznam(Collection&lt;? extends Typ&gt; c)
Vytvorí zoznam obsaujúci prvky zadanej kolekcie.
Zoznam(int počiatočnáKapacita)
Vytvorí prázdny zoznam s určenou počiatočnou kapacitou.
Zoznam(int počiatočnáKapacita,
      int prírastokKapacity)
Vytvorí prázdny zoznam s určenou počiatočnou kapacitou a zadaným
 prírastkom kapacity použitým na zväčšenie kapacity po dosiahnutí
 aktuálneho limitu.
Zoznam(Typ... prvky)
Vytvorí zoznam obsahujúci zadané prvky.
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
Typ
aktualny()
 Alias pre daj.
Typ
aktuálny()
 Alias pre daj.
boolean
bolPrejdenyDokola()
 Alias pre prejdenýDokola.
boolean
bolPrejdenýDokola()
 Alias pre prejdenýDokola.
Typ
citaj()
 Alias pre daj.
Typ
citaj(int kde)
 Alias pre daj.
Typ
čítaj()
 Alias pre daj.
Typ
čítaj(int kde)
 Alias pre daj.
Typ
daj()
Vráti prvok na pozícii vnútorného počítadla zoznamu.
Typ
daj(int kde)
Vráti prvok na zadanej pozícii v zozname.
Typ
dalsi()
 Alias pre ďalší.
Typ
dalsiPrvok()
 Alias pre ďalší.
Typ
ďalší()
Vráti ďalší prvok zoznamu.
Typ
ďalšíPrvok()
 Alias pre ďalší.
int
dlzka()
 Alias pre veľkosť.
int
dĺžka()
 Alias pre veľkosť.
int
hladaj(Typ prvok)
 Alias pre nájdi.
int
hľadaj(Typ prvok)
 Alias pre nájdi.
int
hladaj(Typ prvok,
      int začniOd)
 Alias pre nájdi.
int
hľadaj(Typ prvok,
      int začniOd)
 Alias pre nájdi.
int
hladajOdzadu(Typ prvok)
 Alias pre nájdiPosledný.
int
hľadajOdzadu(Typ prvok)
 Alias pre nájdiPosledný.
int
hladajOdzadu(Typ prvok,
            int začniOd)
 Alias pre nájdiPosledný.
int
hľadajOdzadu(Typ prvok,
            int začniOd)
 Alias pre nájdiPosledný.
boolean
jePrazdny()
 Alias pre prázdny.
boolean
jePrázdny()
 Alias pre prázdny.
int
kapacita()
Vráti aktuálnu kapacitu zoznamu.
Typ
nahodny()
 Alias pre náhodný.
Typ
náhodný()
Vráti náhodný prvok zoznamu.
Typ
nahodnyPrvok()
 Alias pre náhodný.
Typ
náhodnýPrvok()
 Alias pre náhodný.
void
nahrad(int kde,
      Typ prvok)
 Alias pre prepíš.
void
nahraď(int kde,
      Typ prvok)
 Alias pre prepíš.
int
najdi(Typ prvok)
 Alias pre nájdi.
int
nájdi(Typ prvok)
Vráti polohu prvého výskytu zadaného prvku v zozname alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
int
najdi(Typ prvok,
     int začniOd)
 Alias pre nájdi.
int
nájdi(Typ prvok,
     int začniOd)
Vráti polohu prvého výskytu zadaného prvku v zozname počnúc
 štartovacou pozíciou zadanou v parametri začniOd alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
int
najdiPosledny(Typ prvok)
 Alias pre nájdiPosledný.
int
nájdiPosledný(Typ prvok)
Vráti polohu posledného výskytu zadaného prvku v zozname alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
int
najdiPosledny(Typ prvok,
             int začniOd)
 Alias pre nájdiPosledný.
int
nájdiPosledný(Typ prvok,
             int začniOd)
Vráti polohu posledného výskytu zadaného prvku v zozname počnúc
 štartovacou pozíciou zadanou v parametri začniOd alebo
 -1 ak prvok nebol v zozname nájdený.
Zoznam.ObrátenýIterátor&lt;Typ&gt;
naopak()
Vytvorí pre tento zoznam prevrátený iterátor.
static &lt;Typ&gt; Zoznam.ObrátenýIterátor&lt;Typ&gt;
naopak(List&lt;Typ&gt; pôvodný)
Vytvorí pre zadaný zoznam prevrátený iterátor.
void
nastav(int kde,
      Typ prvok)
 Alias pre prepíš.
boolean
obsahuje(Typ prvok)
Zistí, či sa zadaný objekt nachádza v zozname[1].
void
odober(int kde)
Odstráni prvok na zadanej pozícii.
void
odober(int začiatok,
      int koniec)
Odstráni všetky prvky na pozíciách zadaných rozsahom parametrov
 začiatok (vrátane) a koniec (okrem neho).
boolean
odober(Typ prvok)
Odstráni zo zoznamu prvý výskyt prvku zhodného so zadaným
 prvkom[1].
void
odoberOdKonca(int začiatok,
             int koniec)
Ak sú parametre kladné, tak táto metóda funguje rovnako ako metóda
 odober(začiatok, koniec) – odstráni všetky
 prvky na pozíciách zadaných rozsahom parametrov začiatok
 (vrátane) a koniec (okrem neho).
Zoznam.ObrátenýIterátor&lt;Typ&gt;
odzadu()
Vytvorí pre tento zoznam prevrátený iterátor.
static &lt;Typ&gt; Zoznam.ObrátenýIterátor&lt;Typ&gt;
odzadu(List&lt;Typ&gt; pôvodný)
Vytvorí pre zadaný zoznam prevrátený iterátor.
int
pocet()
 Alias pre veľkosť.
int
pocitadlo()
 Alias pre počítadlo.
void
pocitadlo(int nováHodnota)
 Alias pre počítadlo.
void
pocitadloNaKoniec()
 Alias pre počítadloNaKoniec.
void
pocitadloNaZaciatok()
 Alias pre počítadloNaZačiatok.
int
počet()
 Alias pre veľkosť.
int
počítadlo()
Vráti hodnotu vnútorného počítadla používaného najmä metódami
 ďalší a predchádzajúci.
void
počítadlo(int nováHodnota)
Nastaví novú hodnotu vnútorného počítadla používaného metódami
 ďalší a predchádzajúci.
void
počítadloNaKoniec()
Nastaví vnútorné počítadlo zoznamu na polohu za posledným prvkom
 (veľkosť()), aby najbližšie volanie
 metódy predchádzajúci vrátilo posledný
 prvok zoznamu.
void
počítadloNaZačiatok()
Nastaví vnútorné počítadlo zoznamu na polohu pred prvým prvkom
 (-1), aby najbližšie volanie metódy
 ďalší vrátilo prvý prvok zoznamu.
Typ
posledny()
 Alias pre posledný.
Typ
posledný()
Vráti posledný prvok zoznamu.
Typ
poslednyPrvok()
 Alias pre posledný.
Typ
poslednýPrvok()
 Alias pre posledný.
boolean
prazdny()
 Alias pre prázdny.
boolean
prázdny()
Vráti true vtedy a len vtedy, keď je zoznam prázdny,
 inak vráti false.
Typ
predchadzajuci()
 Alias pre predchádzajúci.
Typ
predchádzajúci()
Vráti predchádzajúci prvok zoznamu.
Typ
predchadzajuciPrvok()
 Alias pre predchádzajúci.
Typ
predchádzajúciPrvok()
 Alias pre predchádzajúci.
boolean
prejdenyDokola()
 Alias pre prejdenýDokola.
boolean
prejdenýDokola()
Vráti true, keď bol zoznam pri poslednom volaní metódy
 ďalší alebo predchádzajúci
 prejdený dokola.
void
prepis(int kde,
      Typ prvok)
 Alias pre prepíš.
void
prepíš(int kde,
      Typ prvok)
Nahradí prvok na zadanej pozícii zadaným prvkom.
void
presun(int ktorý,
      int kam)
 Alias pre presuň.
void
presuň(int ktorý,
      int kam)
Presunie prvok zoznamu nachádzajúci sa na zadanej zdrojovej
 pozícii (ktorý) na zadanú cieľovú pozíciu (kam).
void
presun(int ktorý,
      Typ pred)
 Alias pre presuň.
void
presuň(int ktorý,
      Typ pred)
Presunie prvok v zozname z určenej pozície (indexu) pred prvok
 učený inštanciou, ktorá sa musí nachádzať v zozname.
void
presun(Typ ktorý,
      int kam)
 Alias pre presuň.
void
presuň(Typ ktorý,
      int kam)
Presunie prvok zoznamu určený jeho inštanciou na zadanú
 pozíciu (index).
void
presun(Typ ktorý,
      Typ pred)
 Alias pre presuň.
void
presuň(Typ ktorý,
      Typ pred)
Presunie prvok zoznamu určený jeho inštanciou pred iný prvok,
 tiež určený jeho inštanciou.
void
pridaj(int kde,
      Typ prvok)
 Alias pre vlož.
void
pridaj(Typ prvok)
Pridá zadaný prvok na koniec zoznamu.
void
pridaj(Typ[] pole)
Pridá prvky zadaného poľa na koniec tohto zoznamu.
void
pridaj(Vector&lt;Typ&gt; inýZoznam)
Pridá zadaný zoznam na koniec tohto zoznamu podľa poradia určeného
 zadaným zoznamom (jeho iterátorom).
Typ
prvy()
 Alias pre prvý.
Typ
prvý()
Vráti prvý prvok zoznamu.
Typ
prvyPrvok()
 Alias pre prvý.
Typ
prvýPrvok()
 Alias pre prvý.
Typ
tento()
 Alias pre daj.
int
velkost()
 Alias pre veľkosť.
int
veľkosť()
Vráti počet prvkov zoznamu.
void
vloz(int kde,
    Typ prvok)
 Alias pre vlož.
void
vlož(int kde,
    Typ prvok)
Vloží prvok na zadanú pozíciu v zozname.
Typ
vrat()
 Alias pre daj.
Typ
vráť()
 Alias pre daj.
Typ
vrat(int kde)
 Alias pre daj.
Typ
vráť(int kde)
 Alias pre daj.
void
vymaz()
 Alias pre vymaž.
void
vymaz(int kde)
 Alias pre odober.
void
vymaz(int začiatok,
     int koniec)
 Alias pre odober.
void
vymazOdKonca(int začiatok,
            int koniec)
 Alias pre odoberOdKonca.
void
vymaž()
Odstráni všetky prvky zoznamu.
void
vymaž(int kde)
 Alias pre odober.
void
vymaž(int začiatok,
     int koniec)
 Alias pre odober.
void
vymažOdKonca(int začiatok,
            int koniec)
 Alias pre odoberOdKonca.
void
vymen(int kde1,
     int kde2)
 Alias pre vymeň.
void
vymeň(int kde1,
     int kde2)
Vymení prvky v zozname nachádzajúce sa na zadaných pozíciách.
void
vymen(int kde,
     Typ prvok)
 Alias pre vymeň.
void
vymeň(int kde,
     Typ prvok)
Vymení prvky v zozname, z ktorých jeden je určený pozíciou
 (indexom) a druhý objektom nachádzajúcim sa v zozname.
void
vymen(Typ prvok,
     int kde)
 Alias pre vymeň.
void
vymeň(Typ prvok,
     int kde)
Vymení prvky v zozname, z ktorých jeden je určený pozíciou
 (indexom) a druhý objektom nachádzajúcim sa v zozname.
void
vymen(Typ prvok1,
     Typ prvok2)
 Alias pre vymeň.
void
vymeň(Typ prvok1,
     Typ prvok2)
Vymení prvky zoznamu určené objektami nachádzajúcimi sa
 v zozname.
Metódy zdedené z triedy java.util.Vector
add, add, addAll, addAll, addElement, capacity, clear, clone, contains, containsAll, copyInto, elementAt, elements, ensureCapacity, equals, firstElement, forEach, get, hashCode, indexOf, indexOf, insertElementAt, isEmpty, iterator, lastElement, lastIndexOf, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, removeAllElements, removeElement, removeElementAt, removeIf, removeRange, replaceAll, retainAll, set, setElementAt, setSize, size, sort, spliterator, subList, toArray, toArray, toString, trimToSize
Metódy zdedené z triedy java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Metódy zdedené z rozhrania java.util.Collection
parallelStream, stream
Podrobnosti konštruktorov
Zoznam
public Zoznam()
Vytvorí prázdny zoznam.
Zoznam
@SafeVarargs
public Zoznam(Typ... prvky)
Vytvorí zoznam obsahujúci zadané prvky.
Parametre:
prvky – zoznam prvkov oddelený čiarkami
Zoznam
public Zoznam(Collection&lt;? extends Typ&gt; c)
Vytvorí zoznam obsaujúci prvky zadanej kolekcie.
Parametre:
c – kolekcia, ktorej prvky sú použité na naplnenie zoznamu
Pozri tiež:
Collection&lt;E&gt;
Zoznam
public Zoznam(int počiatočnáKapacita)
Vytvorí prázdny zoznam s určenou počiatočnou kapacitou. Tento
 konštruktor je vhodné použiť ak vieme, že do zoznamu pridáme naraz
 veľké množstvo prvkov. Odhadované množstvo prvkov zadáme ako
 počiatočnú kapacitu zoznamu.
Parametre:
počiatočnáKapacita – počiatočná kapacita zoznamu
Zoznam
public Zoznam(int počiatočnáKapacita,
              int prírastokKapacity)
Vytvorí prázdny zoznam s určenou počiatočnou kapacitou a zadaným
 prírastkom kapacity použitým na zväčšenie kapacity po dosiahnutí
 aktuálneho limitu. Tento konštruktor je vhodné použiť ak vieme,
 že do zoznamu pridáme naraz veľké množstvo prvkov a objem
 pridávaných prvkov sa bude nárazovo meniť. Odhadované množstvo
 prvkov zadáme ako počiatočnú kapacitu zoznamu. Prírastok kapacity
 je odhad naraz pridávaného objemu prvkov v priebehu bytia
 zoznamu.
Parametre:
počiatočnáKapacita – počiatočná kapacita zoznamu
prírastokKapacity – objem o ktorý sa zväčší kapacita
     zoznamu po prekročení aktuálneho limitu
Podrobnosti metód
kapacita
public int kapacita()
Vráti aktuálnu kapacitu zoznamu.
Návratová hodnota:
aktuálna kapacita zoznamu (veľkosť vnútorného poľa
     slúžiaceho na uchovávanie prvkov zoznamu – nie je totožná so
     skutočnou veľkosťou zoznamu –
     kapacita udáva množstvo prvkov, ktoré môžeme do zoznamu
     pridať bez potreby zväčšenia jeho vnútornej veľkosti
     (pamäťových nárokov); zväčšenie vnútornej veľkosti zoznamu
     vždy zaberá určitý čas…)
veľkosť
public int veľkosť()
Vráti počet prvkov zoznamu.
Návratová hodnota:
počet prvkov zoznamu
počet
public int počet()
 Alias pre veľkosť.
dĺžka
public int dĺžka()
 Alias pre veľkosť.
velkost
public int velkost()
 Alias pre veľkosť.
pocet
public int pocet()
 Alias pre veľkosť.
dlzka
public int dlzka()
 Alias pre veľkosť.
prázdny
public boolean prázdny()
Vráti true vtedy a len vtedy, keď je zoznam prázdny,
 inak vráti false.
Návratová hodnota:
true/&#8203;false
prazdny
public boolean prazdny()
 Alias pre prázdny.
jePrázdny
public boolean jePrázdny()
 Alias pre prázdny.
jePrazdny
public boolean jePrazdny()
 Alias pre prázdny.
pridaj
public void pridaj(Typ prvok)
Pridá zadaný prvok na koniec zoznamu. Dĺžka zoznamu narastie
 o jedna a kapacita sa zvýši ak je
 prekročený aktuálny limit.
Parametre:
prvok – prvok, ktorý má byť pridaný na koniec zoznamu
pridaj
public void pridaj(Typ[] pole)
Pridá prvky zadaného poľa na koniec tohto zoznamu. Metóda sa počas
 pridávania jednotlivých prvkov poľa správa rovnako ako metóda pridaj(prvok).
Parametre:
pole – pole prvkov, ktoré majú byť pridané na koniec zoznamu
pridaj
public void pridaj(Vector&lt;Typ&gt; inýZoznam)
Pridá zadaný zoznam na koniec tohto zoznamu podľa poradia určeného
 zadaným zoznamom (jeho iterátorom). Výsledok akcie je
 nepredvídateľný ak počas operácie dôjde ku zmene zadaného zoznamu.
Parametre:
inýZoznam – zoznam, ktorého prvky majú byť pridané na koniec
     tohto zoznamu
vlož
public void vlož(int kde,
                 Typ prvok)
Vloží prvok na zadanú pozíciu v zozname. Všetky prvky, počnúc
 zadanou polohou, sú posunuté o jednu pozíciu vyššie. Veľkosť
 zoznamu sa zvýši o jedna. Zadaná poloha musí byť číslo väčšie alebo
 rovné nule a menšie alebo rovné veľkosti zoznamu. (Ak je poloha
 rovná dĺžke zoznamu, prvok je pridaný na jeho koniec.)
Parametre:
kde – poloha prvku v zozname – poradové číslo väčšie alebo
     rovné nule a menšie alebo rovné veľkosti zoznamu
prvok – prvok, ktorý má byť vložený na zadanú pozíciu
vloz
public void vloz(int kde,
                 Typ prvok)
 Alias pre vlož.
pridaj
public void pridaj(int kde,
                   Typ prvok)
 Alias pre vlož.
prepíš
public void prepíš(int kde,
                   Typ prvok)
Nahradí prvok na zadanej pozícii zadaným prvkom. Poloha musí byť
 číslo väčšie alebo rovné nule a menšie než veľkosť zoznamu. Dĺžka
 zoznamu sa nemení, pôvodný prvok je nahradený.
Parametre:
kde – poloha prvku v zozname – poradové číslo väčšie alebo
     rovné nule a menšie než veľkosť zoznamu
prvok – prvok, ktorým má byť určený prvok nahradený
prepis
public void prepis(int kde,
                   Typ prvok)
 Alias pre prepíš.
nastav
public void nastav(int kde,
                   Typ prvok)
 Alias pre prepíš.
nahraď
public void nahraď(int kde,
                   Typ prvok)
 Alias pre prepíš.
nahrad
public void nahrad(int kde,
                   Typ prvok)
 Alias pre prepíš.
vymaž
public void vymaž()
Odstráni všetky prvky zoznamu. Po úspešnom vykonaní tejto metódy
 bude zoznam prázdny.
vymaz
public void vymaz()
 Alias pre vymaž.
odober
public void odober(int kde)
Odstráni prvok na zadanej pozícii. Pozícia musí byť číslo väčšie
 alebo rovné nule a menšie než veľkosť zoznamu. Každý prvok
 nachádzajúci sa nad určeným prvkom je posunutý o jednu pozíciu
 nižšie. Veľkosť zoznamu je znížená o jedna.
Parametre:
kde – poloha prvku odstraňovaného zo zoznamu – poradové
     číslo väčšie alebo rovné nule a menšie než veľkosť zoznamu
vymaž
public void vymaž(int kde)
 Alias pre odober.
vymaz
public void vymaz(int kde)
 Alias pre odober.
odober
public void odober(int začiatok,
                   int koniec)
Odstráni všetky prvky na pozíciách zadaných rozsahom parametrov
 začiatok (vrátane) a koniec (okrem neho). Ak je
 začiatočná hodnota rovná koncovej, tak nie je vymazaný žiadny prvok.
 Veľkosť zoznamu je znížená o počet prvkov nachádzajúcich sa medzi
 polohami určenými parametrami začiatok (vrátane)
 a koniec (okrem nej).
 
 Poznámka: Prirodzeným dôsledkom vymazania je
 presunutie prípadných prvkov nachádzajúcich sa na a nad prvkom určeným
 parametrom koniec do radu pri zachovaní ich poradia na pozície
 začínajúce sa na polohe určenej parametrom začiatok.
Parametre:
začiatok – poloha určujúca prvý prvok odstraňovaný zo zoznamu
koniec – poloha určujúca koniec odstraňovnia prvkov zo zoznamu
vymaž
public void vymaž(int začiatok,
                  int koniec)
 Alias pre odober.
vymaz
public void vymaz(int začiatok,
                  int koniec)
 Alias pre odober.
odoberOdKonca
public void odoberOdKonca(int začiatok,
                          int koniec)
Ak sú parametre kladné, tak táto metóda funguje rovnako ako metóda
 odober(začiatok, koniec) – odstráni všetky
 prvky na pozíciách zadaných rozsahom parametrov začiatok
 (vrátane) a koniec (okrem neho). V prípade záporných
 parametrov sú hodnoty touto metódou upravené tak, aby boli väčšie
 alebo rovné nule a to tak, aby výsledný rozsah ukazoval na poradové
 čísla od konca zoznamu – pre parameter začiatok znamená mínus
 jednotka posledný prvok zoznamu a pre parameter koniec znamená
 mínus jednotka „koniec zoznamu“ (index rovný dĺžke zoznamu). Ak je
 začiatočná hodnota rovná koncovej (pozor na prepočet, vtedy sa hodnoty
 rozchádzajú o jedna), tak nie je vymazaný žiadny prvok. Veľkosť zoznamu
 je znížená o počet prvkov nachádzajúcich sa medzi polohami určenými
 parametrami začiatok a koniec (po ich prípadnom
 prepočítaní a vrátane prvku na začiatočnej pozícii).
 
 Poznámka: Prirodzeným dôsledkom vymazania je
 presunutie prípadných prvkov nachádzajúcich sa na a nad prvkom určeným
 parametrom koniec do radu pri zachovaní ich poradia na pozície
 začínajúce sa na polohe určenej parametrom začiatok.
Parametre:
začiatok – poloha určujúca prvý prvok odstraňovaný zo zoznamu
     (môže byť prepočítaná – pozri opis)
koniec – poloha určujúca koniec odstraňovnia prvkov zo zoznamu
     (môže byť prepočítaná – pozri opis)
vymažOdKonca
public void vymažOdKonca(int začiatok,
                         int koniec)
 Alias pre odoberOdKonca.
vymazOdKonca
public void vymazOdKonca(int začiatok,
                         int koniec)
 Alias pre odoberOdKonca.
odober
public boolean odober(Typ prvok)
Odstráni zo zoznamu prvý výskyt prvku zhodného so zadaným
 prvkom[1]. Ak zoznam taký prvok neobsahuje, zostáva
 nezmenený.
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 odstráni prvý výskyt elementu v zozname, ktorý pri porovnaní so
 zadaným prvkom spĺňa nasledujúcu podmienku: (prvok ==
 null ? element == null :
 prvok.equals(element)) (ak taký element jestvuje);
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), tak sa
 metóda pokúsi nájsť a odstrániť prvý prázdny element v zozname,
 inak porovnáva obsahy jednotlivých elementov zoznamu a odstráni
 ten, ktorého obsah (hodnota) je ekvivalentný s obsahom nami
 zadaného prvku.
Parametre:
prvok – prvok, ktorý má byť zo zoznamu odstránený (ak sa
     v ňom nachádza)
Návratová hodnota:
true ak zoznam zadaný prvok obsahoval
obsahuje
public boolean obsahuje(Typ prvok)
Zistí, či sa zadaný objekt nachádza v zozname[1].
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 vráti logickú hodnotu true iba v prípade, že aspoň
 jeden element zoznamu vyhovuje podmienke
 (prvok == null ? element == null : prvok.equals(element)), kde prvok je
 nami zadaný prvok a element je porovnávaný prvok zoznamu
 (metóda postupne prechádza jednotlivé elementy zoznamu
 a porovnáva ich s nami zadaným prvkom);
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), metóda hľadá
 výskyt prázdneho prvku v zozname, inak hľadá taký prvok, ktorého
 obsah sa zhoduje s obsahom nami zadaného (neprázdneho)
 prvku.
Parametre:
prvok – prvok, ktorého výskyt v zozname má byť overený
Návratová hodnota:
ak bol zadaný prvok v zozname nájdený, vráti sa
     true
počítadlo
public int počítadlo()
Vráti hodnotu vnútorného počítadla používaného najmä metódami
 ďalší a predchádzajúci.
 Vnútorné počítadlo používa a nastavuje aj mnoho iných metód triedy
 Zoznam.
Návratová hodnota:
hodnota vnútorného počítadla
pocitadlo
public int pocitadlo()
 Alias pre počítadlo.
počítadlo
public void počítadlo(int nováHodnota)
Nastaví novú hodnotu vnútorného počítadla používaného metódami
 ďalší a predchádzajúci.
 Táto metóda kontroluje hodnotu počítadla tak, aby bola v rozsahu
 -1 až veľkosť(),
 čo sú hraničné hodnoty vhodné na použitie pri cyklickom
 prechádzaní zoznamu. Ak chceme prechádzať zoznam od začiatku
 metódou ďalší, je šikovnejšie použiť metódu
 počítadloNaZačiatok a v prípade
 prechádzania zoznamu od konca (metódou predchádzajúci) zase metódu počítadloNaKoniec.
 
 Nasledujúci príklad ukazuje, ako jednorazovo prejsť číselný zoznam
 od konca, aj keď na takéto jednorazové prejdenie zoznamu je vhodnejší
 iný spôsob – pozri poznámku pod výsledkom príkladu.
 
 Príklad:
 
 
final Zoznam&lt;Integer&gt; čísla = new Zoznam&lt;Integer&gt;(0, 8, 5, 4);
čísla.počítadloNaKoniec();
Integer i = čísla.predchádzajúciPrvok();
while (!čísla.prejdenýDokola())
{
    Svet.vypíš(i, " ");
    i = čísla.predchádzajúciPrvok();
}
 
 Výsledok:
 
 
4 5 8 0 
 
 Poznámka: Tento spôsob prechádzania zoznamu
 je vhodný aj na asynchrónne prechádzanie zoznamu (pohyb po ňom).
 Jestvuje ešte jeden spôsob prechádzania zoznamu odzadu a síce
 s použitím prevráteného iterátora – pozri metódu odzadu.
Parametre:
nováHodnota – nová hodnota vnútorného počítadla
pocitadlo
public void pocitadlo(int nováHodnota)
 Alias pre počítadlo.
počítadloNaZačiatok
public void počítadloNaZačiatok()
Nastaví vnútorné počítadlo zoznamu na polohu pred prvým prvkom
 (-1), aby najbližšie volanie metódy
 ďalší vrátilo prvý prvok zoznamu.
pocitadloNaZaciatok
public void pocitadloNaZaciatok()
 Alias pre počítadloNaZačiatok.
počítadloNaKoniec
public void počítadloNaKoniec()
Nastaví vnútorné počítadlo zoznamu na polohu za posledným prvkom
 (veľkosť()), aby najbližšie volanie
 metódy predchádzajúci vrátilo posledný
 prvok zoznamu.
 
 Poznámka: V opise metódy počítadlo je príklad ukazujúci, ako prejsť
 zoznam čísel od konca. Príklad využíva aj túto metódu.
pocitadloNaKoniec
public void pocitadloNaKoniec()
 Alias pre počítadloNaKoniec.
daj
public Typ daj(int kde)
Vráti prvok na zadanej pozícii v zozname. Poloha musí byť číslo
 väčšie alebo rovné nule a menšie než veľkosť zoznamu.
Parametre:
kde – poloha prvku v zozname – poradové číslo väčšie alebo
     rovné nule a menšie než veľkosť zoznamu
Návratová hodnota:
prvok zoznamu
vráť
public Typ vráť(int kde)
 Alias pre daj.
vrat
public Typ vrat(int kde)
 Alias pre daj.
čítaj
public Typ čítaj(int kde)
 Alias pre daj.
citaj
public Typ citaj(int kde)
 Alias pre daj.
daj
public Typ daj()
Vráti prvok na pozícii vnútorného počítadla zoznamu. Ak je z neakého dôvodu hodnota vnútorného
 počítadla menšia od nuly (a zoznam nie je prázdny), metóda vráti
 posledný prvok zoznamu. Ak je naopak hodnota počítadla väčšia
 alebo rovná dĺžke zoznamu, vráti prvý prvok zoznamu (opäť
 v prípade, že zoznam nie je prázdny, pretože v takom prípade
 metóda vrhá výnimku).
Návratová hodnota:
prvok zoznamu
Výnimky:
NoSuchElementException
vráť
public Typ vráť()
 Alias pre daj.
vrat
public Typ vrat()
 Alias pre daj.
čítaj
public Typ čítaj()
 Alias pre daj.
citaj
public Typ citaj()
 Alias pre daj.
aktuálny
public Typ aktuálny()
 Alias pre daj.
aktualny
public Typ aktualny()
 Alias pre daj.
tento
public Typ tento()
 Alias pre daj.
prvý
public Typ prvý()
Vráti prvý prvok zoznamu. (Prvok s indexom 0.) Zároveň nastaví
 vnútorné počítadlo prvkov na nulu.
Návratová hodnota:
prvý prvok zoznamu
prvy
public Typ prvy()
 Alias pre prvý.
prvýPrvok
public Typ prvýPrvok()
 Alias pre prvý.
prvyPrvok
public Typ prvyPrvok()
 Alias pre prvý.
posledný
public Typ posledný()
Vráti posledný prvok zoznamu. (Prvok s indexom
 «zoznam».veľkosť - 1.) Zároveň nastaví vnútorné
 počítadlo prvkov na index posledného
 prvku.
Návratová hodnota:
posledný prvok zoznamu
posledny
public Typ posledny()
 Alias pre posledný.
poslednýPrvok
public Typ poslednýPrvok()
 Alias pre posledný.
poslednyPrvok
public Typ poslednyPrvok()
 Alias pre posledný.
ďalší
public Typ ďalší()
Vráti ďalší prvok zoznamu. Ak vnútorné počítadlo prvkov prekročilo najvyššiu hodnotu, vráti prvý prvok.
 V takej situácii je zoznam považovaný za prejdený dokola a metóda
 metóda prejdenýDokola vráti true.
Návratová hodnota:
ďalší prvok zoznamu; prvok je určený podľa hodnoty
     vnútorného počítadla
dalsi
public Typ dalsi()
 Alias pre ďalší.
ďalšíPrvok
public Typ ďalšíPrvok()
 Alias pre ďalší.
dalsiPrvok
public Typ dalsiPrvok()
 Alias pre ďalší.
predchádzajúci
public Typ predchádzajúci()
Vráti predchádzajúci prvok zoznamu. Ak vnútorné počítadlo prvkov kleslo pod najnižšiu hodnotu,
 vráti posledný prvok. V takej situácii je zoznam považovaný za
 prejdený dokola a metóda metóda prejdenýDokola vráti true.
 
 Poznámka: V opise metódy počítadlo je príklad ukazujúci, ako prejsť
 zoznam čísel od konca. Príklad využíva aj túto metódu.
Návratová hodnota:
predchádzajúci prvok zoznamu; prvok je určený podľa hodnoty
     vnútorného počítadla
predchadzajuci
public Typ predchadzajuci()
 Alias pre predchádzajúci.
predchádzajúciPrvok
public Typ predchádzajúciPrvok()
 Alias pre predchádzajúci.
predchadzajuciPrvok
public Typ predchadzajuciPrvok()
 Alias pre predchádzajúci.
prejdenýDokola
public boolean prejdenýDokola()
Vráti true, keď bol zoznam pri poslednom volaní metódy
 ďalší alebo predchádzajúci
 prejdený dokola. Na výslednú hodnotu tejto metódy majú vplyv len
 spomenuté dve metódy.
 
 Poznámka: V opise metódy počítadlo je príklad ukazujúci, ako prejsť
 zoznam čísel od konca. Príklad využíva aj túto metódu.
Návratová hodnota:
true/&#8203;false
prejdenyDokola
public boolean prejdenyDokola()
 Alias pre prejdenýDokola.
bolPrejdenýDokola
public boolean bolPrejdenýDokola()
 Alias pre prejdenýDokola.
bolPrejdenyDokola
public boolean bolPrejdenyDokola()
 Alias pre prejdenýDokola.
náhodný
public Typ náhodný()
Vráti náhodný prvok zoznamu. Zároveň nastaví vnútorné počítadlo na hodnotu prvku, ktorý bol vrátený.
Návratová hodnota:
náhodný prvok zoznamu
nahodny
public Typ nahodny()
 Alias pre náhodný.
náhodnýPrvok
public Typ náhodnýPrvok()
 Alias pre náhodný.
nahodnyPrvok
public Typ nahodnyPrvok()
 Alias pre náhodný.
nájdi
public int nájdi(Typ prvok)
Vráti polohu prvého výskytu zadaného prvku v zozname alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 vráti najnižší index i pre ktorý platí podmienka
 (prvok == null ? element ==
 null : prvok.equals(element)) (kde
 element je prvok zoznamu na pozícii i) alebo
 -1 ak taký index nejestvuje;
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), tak sa
 metóda pokúsi nájsť prvý prázdny element v zozname, inak porovnáva
 obsahy jednotlivých elementov zoznamu s obsahom nami zadaného
 (neprázdneho) prvku.
Parametre:
prvok – hľadaný prvok
Návratová hodnota:
poloha prvku v zozname (hľadá sa prvý výskyt) alebo
     -1 ak prvok nebol nájdený
najdi
public int najdi(Typ prvok)
 Alias pre nájdi.
hľadaj
public int hľadaj(Typ prvok)
 Alias pre nájdi.
hladaj
public int hladaj(Typ prvok)
 Alias pre nájdi.
nájdi
public int nájdi(Typ prvok,
                 int začniOd)
Vráti polohu prvého výskytu zadaného prvku v zozname počnúc
 štartovacou pozíciou zadanou v parametri začniOd alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 vráti najnižší index i pre ktorý platí podmienka
 (i &gt;= začniOd &amp;&amp; prvok == null
 ? element == null :
 prvok.equals(element)) (kde element je prvok zoznamu na
 pozícii i) alebo -1 ak taký index
 nejestvuje;
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), tak sa
 metóda pokúsi nájsť prvý prázdny element v zozname (počnúc
 hľadanie od pozície začniOd), inak porovnáva obsahy
 jednotlivých elementov zoznamu s obsahom nami zadaného
 (neprázdneho) prvku.
Parametre:
prvok – hľadaný prvok
začniOd – pozícia v zozname od ktorej sa má začať hľadať
Návratová hodnota:
poloha prvého prvku v zozname nájdeného na pozícii
     väčšej alebo rovnej hodnote parametra začniOd alebo
     -1 ak prvok nebol nájdený
najdi
public int najdi(Typ prvok,
                 int začniOd)
 Alias pre nájdi.
hľadaj
public int hľadaj(Typ prvok,
                  int začniOd)
 Alias pre nájdi.
hladaj
public int hladaj(Typ prvok,
                  int začniOd)
 Alias pre nájdi.
nájdiPosledný
public int nájdiPosledný(Typ prvok)
Vráti polohu posledného výskytu zadaného prvku v zozname alebo
 -1 ak prvok nebol v zozname
 nájdený[1].
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 vráti najvyšší index i pre ktorý platí podmienka
 (prvok == null ? element ==
 null : prvok.equals(element)) (kde element je prvok zoznamu na pozícii i) alebo
 -1 ak taký index nejestvuje;
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), tak sa
 metóda pokúsi nájsť posledný prázdny element v zozname, inak
 porovnáva obsahy jednotlivých elementov zoznamu s obsahom nami
 zadaného (neprázdneho) prvku.
Parametre:
prvok – hľadaný prvok
Návratová hodnota:
poloha posledného prvku v zozname alebo
     -1 ak prvok nebol nájdený
najdiPosledny
public int najdiPosledny(Typ prvok)
 Alias pre nájdiPosledný.
hľadajOdzadu
public int hľadajOdzadu(Typ prvok)
 Alias pre nájdiPosledný.
hladajOdzadu
public int hladajOdzadu(Typ prvok)
 Alias pre nájdiPosledný.
nájdiPosledný
public int nájdiPosledný(Typ prvok,
                         int začniOd)
Vráti polohu posledného výskytu zadaného prvku v zozname počnúc
 štartovacou pozíciou zadanou v parametri začniOd alebo
 -1 ak prvok nebol v zozname nájdený.
 
 [1] – ak chceme byť úplne presní, tak povieme, že metóda
 vráti najvyšší index i pre ktorý platí podmienka
 (i &lt;= začniOd &amp;&amp; prvok == null
 ? element == null :
 prvok.equals(element)) (kde element je prvok zoznamu na
 pozícii i) alebo -1 ak taký index
 nejestvuje;
 toto vyjadrenie obsahuje podmienku, ktorá exaktne vyjadruje to,
 že ak je nami zadaný prvok prázdny (null), tak sa
 metóda pokúsi nájsť posledný prázdny element v zozname (počnúc
 hľadanie od pozície začniOd), inak porovnáva obsahy
 jednotlivých elementov zoznamu s obsahom nami zadaného
 (neprázdneho) prvku
Parametre:
prvok – hľadaný prvok
začniOd – pozícia v zozname od ktorej sa má začať hľadať
Návratová hodnota:
poloha posledného prvku v zozname nájdeného na pozícii
     menšej alebo rovnej hodnote parametra začniOd alebo
     -1 ak prvok nebol nájdený (vráti
     -1), ak je parameter začniOd
     záporný)
najdiPosledny
public int najdiPosledny(Typ prvok,
                         int začniOd)
 Alias pre nájdiPosledný.
hľadajOdzadu
public int hľadajOdzadu(Typ prvok,
                        int začniOd)
 Alias pre nájdiPosledný.
hladajOdzadu
public int hladajOdzadu(Typ prvok,
                        int začniOd)
 Alias pre nájdiPosledný.
vymeň
public void vymeň(int kde1,
                  int kde2)
Vymení prvky v zozname nachádzajúce sa na zadaných pozíciách.
Parametre:
kde1 – pozícia (index) prvku
kde2 – pozícia (index) prvku
Výnimky:
ArrayIndexOutOfBoundsException – ak je niektorá zo zadaných
     pozící mimo rozsahu zoznamu
Pozri tiež:
vymeň(int, int), 
vymeň(java.lang.Object, int), 
vymeň(int, java.lang.Object), 
vymeň(java.lang.Object, java.lang.Object)
vymeň
public void vymeň(int kde,
                  Typ prvok)
Vymení prvky v zozname, z ktorých jeden je určený pozíciou
 (indexom) a druhý objektom nachádzajúcim sa v zozname.
Parametre:
kde – pozícia (index) prvku
prvok – objekt nachádzajúci sa v zozname
Výnimky:
ArrayIndexOutOfBoundsException – ak je zadaná pozícia mimo
     rozsahu zoznamu alebo ak sa zadaný prvok v zozname nenachádza
Pozri tiež:
vymeň(int, int), 
vymeň(java.lang.Object, int), 
vymeň(int, java.lang.Object), 
vymeň(java.lang.Object, java.lang.Object)
vymeň
public void vymeň(Typ prvok,
                  int kde)
Vymení prvky v zozname, z ktorých jeden je určený pozíciou
 (indexom) a druhý objektom nachádzajúcim sa v zozname.
Parametre:
prvok – objekt nachádzajúci sa v zozname
kde – pozícia (index) prvku
Výnimky:
ArrayIndexOutOfBoundsException – ak je zadaná pozícia mimo
     rozsahu zoznamu alebo ak sa zadaný prvok v zozname nenachádza
Pozri tiež:
vymeň(int, int), 
vymeň(java.lang.Object, int), 
vymeň(int, java.lang.Object), 
vymeň(java.lang.Object, java.lang.Object)
vymeň
public void vymeň(Typ prvok1,
                  Typ prvok2)
Vymení prvky zoznamu určené objektami nachádzajúcimi sa
 v zozname.
Parametre:
prvok1 – objekt nachádzajúci sa v zozname
prvok2 – objekt nachádzajúci sa v zozname
Výnimky:
ArrayIndexOutOfBoundsException – ak sa niektorý zo zadaných
     prvkov v zozname nenachádza
Pozri tiež:
vymeň(int, int), 
vymeň(java.lang.Object, int), 
vymeň(int, java.lang.Object), 
vymeň(java.lang.Object, java.lang.Object)
vymen
public void vymen(int kde1,
                  int kde2)
 Alias pre vymeň.
vymen
public void vymen(int kde,
                  Typ prvok)
 Alias pre vymeň.
vymen
public void vymen(Typ prvok,
                  int kde)
 Alias pre vymeň.
vymen
public void vymen(Typ prvok1,
                  Typ prvok2)
 Alias pre vymeň.
presuň
public void presuň(int ktorý,
                   int kam)
Presunie prvok zoznamu nachádzajúci sa na zadanej zdrojovej
 pozícii (ktorý) na zadanú cieľovú pozíciu (kam).
Parametre:
ktorý – zdrojová pozícia (index) prvku
kam – cieľová pozícia (index) prvku
Výnimky:
ArrayIndexOutOfBoundsException – ak je niektorá zo zadaných
     pozící mimo rozsahu zoznamu
Pozri tiež:
presuň(int, int), 
presuň(java.lang.Object, int), 
presuň(int, java.lang.Object), 
presuň(java.lang.Object, java.lang.Object)
presuň
public void presuň(int ktorý,
                   Typ pred)
Presunie prvok v zozname z určenej pozície (indexu) pred prvok
 učený inštanciou, ktorá sa musí nachádzať v zozname.
Parametre:
ktorý – pozícia (index) prvku
pred – inštancia nachádzajúca sa v zozname
Výnimky:
ArrayIndexOutOfBoundsException – ak je zadaná pozícia mimo
     rozsahu zoznamu alebo ak sa zadaný prvok v zozname nenachádza
Pozri tiež:
presuň(int, int), 
presuň(java.lang.Object, int), 
presuň(int, java.lang.Object), 
presuň(java.lang.Object, java.lang.Object)
presuň
public void presuň(Typ ktorý,
                   int kam)
Presunie prvok zoznamu určený jeho inštanciou na zadanú
 pozíciu (index). Zadaný (presúvaný) prvok sa musí nachádzať
 v zozname, inak vznikne výnimka.
Parametre:
ktorý – inštancia nachádzajúca sa v zozname
kam – pozícia (index) prvku
Výnimky:
ArrayIndexOutOfBoundsException – ak je zadaná pozícia mimo
     rozsahu zoznamu alebo ak sa zadaný prvok v zozname nenachádza
Pozri tiež:
presuň(int, int), 
presuň(java.lang.Object, int), 
presuň(int, java.lang.Object), 
presuň(java.lang.Object, java.lang.Object)
presuň
public void presuň(Typ ktorý,
                   Typ pred)
Presunie prvok zoznamu určený jeho inštanciou pred iný prvok,
 tiež určený jeho inštanciou. Obe inštancie sa musia nachádzať
 v zozname, inak vznikne výnimka.
Parametre:
ktorý – inštancia nachádzajúca sa v zozname
pred – inštancia nachádzajúca sa v zozname
Výnimky:
ArrayIndexOutOfBoundsException – ak sa niektorý zo zadaných
     prvkov v zozname nenachádza
Pozri tiež:
presuň(int, int), 
presuň(java.lang.Object, int), 
presuň(int, java.lang.Object), 
presuň(java.lang.Object, java.lang.Object)
presun
public void presun(int ktorý,
                   int kam)
 Alias pre presuň.
presun
public void presun(int ktorý,
                   Typ pred)
 Alias pre presuň.
presun
public void presun(Typ ktorý,
                   int kam)
 Alias pre presuň.
presun
public void presun(Typ ktorý,
                   Typ pred)
 Alias pre presuň.
odzadu
public Zoznam.ObrátenýIterátor&lt;Typ&gt; odzadu()
Vytvorí pre tento zoznam prevrátený iterátor. To znamená, že
 nasledujúci cyklus:
 
 
Zoznam&lt;String&gt; zoznam = …
for (String prvok : zoznam.odzadu()) …
 
 bude vykonaný pre každý prvok zoznamu začnúc od posledného
 a končiac prvým.
 
 Poznámka: Tento spôsob prechádzania zoznamu
 je vhodný na jednorazové (synchrónne) prejdenie zoznamu. Na
 asynchrónne prechádzanie zoznamu (pohyb po ňom) je vhodnejšie použiť
 vnútorné počítadlo zoznamu – pozri metódu počítadlo.
Parametre:
pôvodný – pôvodný zoznam
Návratová hodnota:
iterátor umožňujúci prejsť zoznam v obrátenom poradí
odzadu
public static &lt;Typ&gt; Zoznam.ObrátenýIterátor&lt;Typ&gt; odzadu(List&lt;Typ&gt; pôvodný)
Vytvorí pre zadaný zoznam prevrátený iterátor. To znamená, že
 nasledujúci cyklus:
 
 
Zoznam&lt;String&gt; zoznam = …
for (String prvok : Zoznam.&lt;String&gt;odzadu(zoznam)) …
 
 bude vykonaný pre každý prvok zoznamu začnúc od posledného
 a končiac prvým. Jednoduchšie je použitie metódy
 odzadu(), ale tá je použiteľná len
 pre inštancie triedy Zoznam. Táto metóda je
 použiteľná pre ľubovoľný zoznam, ktorý je implementáciou
 rozhrania List.
Parametre:
pôvodný – pôvodný zoznam
Návratová hodnota:
iterátor umožňujúci prejsť zoznam v obrátenom poradí
Pozri tiež:
odzadu()
naopak
public Zoznam.ObrátenýIterátor&lt;Typ&gt; naopak()
Vytvorí pre tento zoznam prevrátený iterátor. To znamená, že
 nasledujúci cyklus:
 
 
Zoznam&lt;String&gt; zoznam = …
for (String prvok : zoznam.naopak()) …
 
 bude vykonaný pre každý prvok zoznamu začnúc od posledného
 a končiac prvým.
Parametre:
pôvodný – pôvodný zoznam
Návratová hodnota:
iterátor umožňujúci prejsť zoznam v obrátenom poradí
naopak
public static &lt;Typ&gt; Zoznam.ObrátenýIterátor&lt;Typ&gt; naopak(List&lt;Typ&gt; pôvodný)
Vytvorí pre zadaný zoznam prevrátený iterátor. To znamená, že
 nasledujúci cyklus:
 
 
Zoznam&lt;String&gt; zoznam = …
for (String prvok : Zoznam.&lt;String&gt;naopak(zoznam)) …
 
 bude vykonaný pre každý prvok zoznamu začnúc od posledného
 a končiac prvým. Jednoduchšie je použitie metódy
 naopak(), ale tá je použiteľná len
 pre inštancie triedy Zoznam. Táto metóda je
 použiteľná pre ľubovoľný zoznam, ktorý je implementáciou
 rozhrania List.
Parametre:
pôvodný – pôvodný zoznam
Návratová hodnota:
iterátor umožňujúci prejsť zoznam v obrátenom poradí
Pozri tiež:
naopak()
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
var methods = {"i0":9,"i1":9,"i2":10,"i3":10,"i4":9,"i5":9,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":9,"i21":9,"i22":9,"i23":9,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":9,"i30":9,"i31":9,"i32":9,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10};
var tabs = {65535:["t0","Všetky metódy"],1:["t1","Statické metódy"],2:["t2","Inštančné metódy"],8:["t4","Skutočne definované metódy"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
Vo Vašom prehliadači je vypnutý JavaScript.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
Programovací rámec GRobot
Trieda Zvuk
java.lang.Object
Zvuk
public class Zvuk
extends Object
Táto trieda dovoľuje programátorovi podrobnejšie pracovať so zvukom,
 ktorý prečítal s pomocou metódy čítajZvuk.
 
 Príklad:
 
 
Zvuk môjZvuk = Svet.čítajZvuk("zvuk.wav");
môjZvuk.prehraj();
// …
 
 
 Zvuk
 „zvuk.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
 
 Poznámka: Programovací rámec obsahuje aj
 nástroje na generovanie zvukov (resp. tónov). Ich implementácia je
 realizovaná v rámci skupiny podporných tried rámca, ku ktorým nie je
 priamo vyhotovená dokumentácia, ale základ je sprístupnený
 prostredníctvom skupiny metód v triede Svet. Príklady na
 generovanie zvukov (resp. tónov) sa nachádzajú v opisoch metód Svet.otvorSúborNaUloženieTónu(názov, prepísať) a Svet.generátorTónov().
Pozri tiež:
Svet.priečinokZvukov(String), 
Svet.priečinokZvukov(), 
Svet.čítajZvuky(Object[]), 
Svet.čítajZvuky(String[]), 
Svet.čítajZvuk(String), 
Svet.zvuk(String), 
Svet.zvukNaPozadí(String), 
Svet.zastavZvuky(Object[]), 
Svet.hlasitosťPreZvuky(double, Object[]), 
Svet.váhaPreZvuky(double, Object[]), 
Svet.zastavZvuky(String[]), 
Svet.hlasitosťPreZvuky(double, String[]), 
Svet.váhaPreZvuky(double, String[])
Prehľad metód
Všetky metódy Statické metódy Inštančné metódy Skutočne definované metódy 
Modifikátor a typ
Metóda a opis
static Zvuk
citaj(String súbor)
 Alias pre čítaj.
static Zvuk
citaj(String súbor,
     boolean unikátny)
 Alias pre čítaj.
void
cyklickyOpakovat()
 Alias pre prehrávaťDookola.
void
cyklickyOpakovať()
 Alias pre prehrávaťDookola.
static Zvuk
čítaj(String súbor)
Prečíta a uloží do vnútornej pamäte programovacieho rámca
 (metaforicky sveta) zadaný zvuk zo súboru a vráti ho ako inštanciu
 tejto triedy (Zvuk).
static Zvuk
čítaj(String súbor,
     boolean unikátny)
Prečíta a uloží do vnútornej pamäte programovacieho rámca
 (metaforicky sveta) zadaný zvuk zo súboru a vráti ho ako inštanciu
 tejto triedy (Zvuk).
double
hlasitost()
 Alias pre hlasitosť.
double
hlasitosť()
 Vráti aktuálnu mieru hlasitosti
 prehrávania tohto zvuku.
void
hlasitost(double miera)
 Alias pre hlasitosť.
void
hlasitosť(double miera)
 Upraví mieru hlasitosti pri prehrávaní
 tohto zvuku.
boolean
hlasitostNepodporovana()
 Alias pre hlasitosťNepodporovaná.
boolean
hlasitosťNepodporovaná()
Zistí, či je (resp. nie je) týmto objektom podporovaná schopnosť
 zmeny hlasitosti.
void
opakovatDookola()
 Alias pre prehrávaťDookola.
void
opakovaťDookola()
 Alias pre prehrávaťDookola.
void
pauza()
 Alias pre pozastav.
void
pokracuj()
 Alias pre pokračuj.
void
pokračuj()
Spustí pozastavené prehrávanie zvuku.
double
poloha()
Zistí polohu prehrávania zvuku v sekundách (vzhľadom od
 začiatku).
void
poloha(double poloha)
Nastaví polohu prehrávania zvuku v sekundách (vzhľadom od
 začiatku).
void
pozastav()
Pozastaví prehrávanie zvuku.
static Zvuk
precitaj(String súbor)
 Alias pre čítaj.
static Zvuk
precitaj(String súbor,
        boolean unikátny)
 Alias pre čítaj.
static Zvuk
prečítaj(String súbor)
 Alias pre čítaj.
static Zvuk
prečítaj(String súbor,
        boolean unikátny)
 Alias pre čítaj.
void
prehraj()
Spustí prehrávanie zvuku.
boolean
prehravaSa()
 Alias pre prehrávaSa.
boolean
prehrávaSa()
Zistí, či sa zvuk práve prehráva alebo nie.
void
prehravatDookola()
 Alias pre prehrávaťDookola.
void
prehrávaťDookola()
Spustí prehrávanie zvuku v nekonečnom cykle.
static String
priecinokZvukov()
 Alias pre priečinokZvukov.
static void
priecinokZvukov(String priečinok)
 Alias pre priečinokZvukov.
static String
priečinokZvukov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú zvuky čítané.
static void
priečinokZvukov(String priečinok)
Ak sú všetky zvuky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
double
trvanie()
Zistí trvanie zvuku v sekundách.
double
vaha()
 Alias pre váha.
double
váha()
 Vráti aktuálnu mieru stereovyváženia
 prehrávania tohto zvuku.
void
vaha(double miera)
 Alias pre váha.
void
váha(double miera)
 Upraví mieru stereovyváženia prehrávania
 tohto zvuku vzhľadom na ľavý a pravý kanál.
boolean
vahaNepodporovana()
 Alias pre váhaNepodporovaná.
boolean
váhaNepodporovaná()
Zistí, či je (resp. nie je) týmto objektom podporovaná schopnosť
 zmeny stereováhy (to jest určenie vyváženia prehrávania v ľavom
 alebo pravom kanáli).
void
zastav()
Zastaví prehrávanie zvuku.
Metódy zdedené z triedy java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Podrobnosti metód
priečinokZvukov
public static void priečinokZvukov(String priečinok)
Ak sú všetky zvuky uložené v spoločnom priečinku, môžeme pre
 nich touto metódou nastaviť zdrojový priečinok čítania.
 Priečinok by sa mal nachádzať v hlavnom priečinku projektu alebo by
 k nemu mala viesť systémovo nezávislá relatívna cesta. Zadaním
 prázdneho reťazca alebo hodnoty null používanie
 priečinka zrušíme.
Parametre:
priečinok – názov priečinka, relatívna cesta, prípadne
     prázdny reťazec alebo null
Pozri tiež:
Svet.priečinokZvukov(), 
Zvuk
priecinokZvukov
public static void priecinokZvukov(String priečinok)
 Alias pre priečinokZvukov.
priečinokZvukov
public static String priečinokZvukov()
Vráti reťazec s aktuálnym priečinkom, z ktorého sú zvuky čítané.
 Reťazec je obohatený o oddeľovací znak priečinkov java.io.File.separatorChar (/ alebo
 \ – záleží na type operačného systému), ktorý automaticky
 pridáva metóda priečinokZvukov(priečinok). Rovnako všetky oddeľovacie znaky
 priečinkov v relatívnej ceste sú nahradené podľa typu operačného
 systému.
Návratová hodnota:
aktuálny priečinok, z ktorého sú zvuky čítané
Pozri tiež:
Svet.priečinokZvukov(String), 
čítaj(String), 
čítaj(String, boolean)
priecinokZvukov
public static String priecinokZvukov()
 Alias pre priečinokZvukov.
čítaj
public static Zvuk čítaj(String súbor)
Prečíta a uloží do vnútornej pamäte programovacieho rámca
 (metaforicky sveta) zadaný zvuk zo súboru a vráti ho ako inštanciu
 tejto triedy (Zvuk). (Zvuk nie je prehraný.) Táto
 metóda funguje rovnako ako metóda sveta Svet.čítajZvuk(súbor) (v jej opise sa dá
 nájsť o niečo viac informácií – najmä odkazy na súvisiace
 metódy sveta).
 
 Táto metóda funguje tak, že podľa potreby vytvára nové unikátne
 inštancie zvuku identifikovaného názvom súboru. Nová inštancia
 vznikne vždy, ak sa vo vnútornej pamäti sveta nenájde taká
 inštancia určeného zvuku, ktorá práve nie je prehrávaná (to
 znamená, že metóda musí nájsť zvuk, ktorý je ticho). Takto fungujú
 všetky metódy sveta pracujúce so zvukom. Ak by
 sa takto nesprávali, tak by vznikalo nežiaduce správanie – vždy
 pri pokuse o prehranie toho istého zvuku (identifikovaného názvom
 súboru) počas jeho prehrávania, by sa tento reštartoval. (Nebolo
 by možné prehrať sériu rovnakých zvukov, ktoré sa časovo
 prekrývajú (hoci niekedy len mierne). To by pôsobilo neprirodzene –
 každé reštartovanie zvuku by bolo počuteľné tak, ako keby sa zo
 zvuku zrazu časť „odsekla.“)
Parametre:
súbor – názov súboru so zvukom
Návratová hodnota:
zvuk v objekte typu Zvuk
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
čítaj(String, boolean), 
Svet.priečinokZvukov(String), 
Svet.čítajZvuk(String), 
Svet.čítajZvuk(String, boolean)
citaj
public static Zvuk citaj(String súbor)
 Alias pre čítaj.
prečítaj
public static Zvuk prečítaj(String súbor)
 Alias pre čítaj.
precitaj
public static Zvuk precitaj(String súbor)
 Alias pre čítaj.
čítaj
public static Zvuk čítaj(String súbor,
                         boolean unikátny)
Prečíta a uloží do vnútornej pamäte programovacieho rámca
 (metaforicky sveta) zadaný zvuk zo súboru a vráti ho ako inštanciu
 tejto triedy (Zvuk). (Zvuk nie je prehraný.) Ak je
 parameter unikátny rovný false, tak táto metóda
 funguje rovnako ako metóda čítaj(súbor).
 
 V prípade, že je parameter unikátny rovný true, tak táto metóda vždy vráti unikátny objekt zvuku,
 čiže aj v prípade, že jestvuje aspoň jedna kópia tohto zvuku, ktorá
 sa práve neprehráva.
 
 Všetky kópie zvuku môžu byť v prípade potreby (napríklad ak sa
 obsah zvukového súboru na disku zmenil) z vnútornej pamäte
 odstránené metódou Svet.uvoľni(názovZdroja).
Parametre:
súbor – názov súboru so zvukom
unikátny – určuje, či objekt vrátený touto metódou musí
     byť unikátny
Návratová hodnota:
zvuk v objekte typu Zvuk
Výnimky:
GRobotException – ak súbor so zvukom nebol nájdený
Pozri tiež:
čítaj(String), 
Svet.priečinokZvukov(String), 
Svet.čítajZvuk(String), 
Svet.čítajZvuk(String, boolean)
citaj
public static Zvuk citaj(String súbor,
                         boolean unikátny)
 Alias pre čítaj.
prečítaj
public static Zvuk prečítaj(String súbor,
                            boolean unikátny)
 Alias pre čítaj.
precitaj
public static Zvuk precitaj(String súbor,
                            boolean unikátny)
 Alias pre čítaj.
zastav
public void zastav()
Zastaví prehrávanie zvuku.
prehraj
public void prehraj()
Spustí prehrávanie zvuku.
prehrávaťDookola
public void prehrávaťDookola()
Spustí prehrávanie zvuku v nekonečnom cykle.
prehravatDookola
public void prehravatDookola()
 Alias pre prehrávaťDookola.
opakovaťDookola
public void opakovaťDookola()
 Alias pre prehrávaťDookola.
opakovatDookola
public void opakovatDookola()
 Alias pre prehrávaťDookola.
cyklickyOpakovať
public void cyklickyOpakovať()
 Alias pre prehrávaťDookola.
cyklickyOpakovat
public void cyklickyOpakovat()
 Alias pre prehrávaťDookola.
pozastav
public void pozastav()
Pozastaví prehrávanie zvuku.
pauza
public void pauza()
 Alias pre pozastav.
pokračuj
public void pokračuj()
Spustí pozastavené prehrávanie zvuku.
pokracuj
public void pokracuj()
 Alias pre pokračuj.
trvanie
public double trvanie()
Zistí trvanie zvuku v sekundách.
Návratová hodnota:
trvanie zvuku v sekundách
poloha
public void poloha(double poloha)
Nastaví polohu prehrávania zvuku v sekundách (vzhľadom od
 začiatku).
Parametre:
poloha – poloha zvuku v sekundách
poloha
public double poloha()
Zistí polohu prehrávania zvuku v sekundách (vzhľadom od
 začiatku).
Návratová hodnota:
poloha zvuku v sekundách
prehrávaSa
public boolean prehrávaSa()
Zistí, či sa zvuk práve prehráva alebo nie.
Návratová hodnota:
true – zvuk sa prehráva;
     false – zvuk sa neprehráva
prehravaSa
public boolean prehravaSa()
 Alias pre prehrávaSa.
hlasitosťNepodporovaná
public boolean hlasitosťNepodporovaná()
Zistí, či je (resp. nie je) týmto objektom podporovaná schopnosť
 zmeny hlasitosti. (Za normálnych okolností by metóda mala vracať
 hodnotu false. To znamená, že hlasitosť zvuku je
 podporovaná.)
Návratová hodnota:
true – vlastnosť nie je podporovaná;
     false – vlastnosť je podporovaná
hlasitostNepodporovana
public boolean hlasitostNepodporovana()
 Alias pre hlasitosťNepodporovaná.
hlasitosť
public double hlasitosť()
 Vráti aktuálnu mieru hlasitosti
 prehrávania tohto zvuku.
 
 Príklad:
 
 
Zvuk môjZvuk = Svet.čítajZvuk("zvuk.wav");
môjZvuk.hlasitosť(2.0);
Svet.vypíšRiadok("Hlasitosť " + (int)(môjZvuk.hlasitosť() * 100) + "%");
môjZvuk.prehraj();
Svet.čakaj(1.0);
môjZvuk.hlasitosť(0.5);
Svet.vypíšRiadok("Hlasitosť " + (int)(môjZvuk.hlasitosť() * 100) + "%");
môjZvuk.prehraj();
Svet.čakaj(1.0);
môjZvuk.hlasitosť(&#45;1.0);
Svet.vypíšRiadok("Hlasitosť " + (int)(môjZvuk.hlasitosť() * 100) + "%");
môjZvuk.prehraj();
Svet.čakaj(1.0);
 
 
 Zvuk
 „zvuk.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Návratová hodnota:
reálne číslo vyjadrujúce mieru hlasitosti v percentách;
     0 % – 0.0; 100 % – 1.0
hlasitost
public double hlasitost()
 Alias pre hlasitosť.
hlasitosť
public void hlasitosť(double miera)
 Upraví mieru hlasitosti pri prehrávaní
 tohto zvuku. Metóda prijíma reálne číslo vyjadrujúce mieru
 hlasitosti v percentách, pričom 100 % zodpovedá hodnote
 1.0.
 
 Príklad:
 
 
Zvuk môjZvuk = Svet.čítajZvuk("zvuk.wav");
Svet.vypíšRiadok("Hlasitosť 75%");
môjZvuk.hlasitosť(0.75);
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Hlasitosť 50%");
môjZvuk.hlasitosť(0.5);
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Hlasitosť 25%");
môjZvuk.hlasitosť(0.25);
môjZvuk.prehraj();
Svet.čakaj(1.0);
 
 
 Zvuk
 „zvuk.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Parametre:
miera – miera hlasitosti v percentách – 0 % zodpovedá hodnote
     0.0, 100 % hodnote 1.0
hlasitost
public void hlasitost(double miera)
 Alias pre hlasitosť.
váhaNepodporovaná
public boolean váhaNepodporovaná()
Zistí, či je (resp. nie je) týmto objektom podporovaná schopnosť
 zmeny stereováhy (to jest určenie vyváženia prehrávania v ľavom
 alebo pravom kanáli).
Návratová hodnota:
true – vlastnosť nie je podporovaná;
     false – vlastnosť je podporovaná
vahaNepodporovana
public boolean vahaNepodporovana()
 Alias pre váhaNepodporovaná.
váha
public double váha()
 Vráti aktuálnu mieru stereovyváženia
 prehrávania tohto zvuku.
Návratová hodnota:
reálne číslo od -1.0 (ľavý kanál)
     po +1.0 (pravý kanál) vyjadrujúce mieru
     stereovyváženia
vaha
public double vaha()
 Alias pre váha.
váha
public void váha(double miera)
 Upraví mieru stereovyváženia prehrávania
 tohto zvuku vzhľadom na ľavý a pravý kanál. Metóda prijíma reálne
 číslo vyjadrujúce mieru vyváženia v rozsahu od
 -1.0 (ľavý kanál) po
 +1.0 (pravý kanál).
 
 Príklad:
 
 
Zvuk môjZvuk = Svet.čítajZvuk("zvuk.wav");
Svet.vypíšRiadok("Prehraj");
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Vľavo 50%");
môjZvuk.váha(&#45;0.5);
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Vpravo 50%");
môjZvuk.váha(0.5);
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Vľavo 100%");
môjZvuk.váha(&#45;1.0);
môjZvuk.prehraj();
Svet.čakaj(1.0);
Svet.vypíšRiadok("Vpravo 100%");
môjZvuk.váha(1.0);
môjZvuk.prehraj();
Svet.čakaj(1.0);
môjZvuk.váha(0.0);    // na stred
 
 
 Zvuk
 „zvuk.wav“ na prevzatie.
 
 
Váš prehliadač
 neumožňuje prehratie zvuku.
Parametre:
miera – miera stereovyváženia – reálne číslo od
     -1.0 (ľavý kanál) po
     +1.0 (pravý kanál)
vaha
public void vaha(double miera)
 Alias pre váha.
Preskočiť navigáciu
Úvod
Kategórie metód
  |  
Predchádzajúca triedaĎalšia trieda
(Použitie)
Prehľady: 
Vnorené triedy | 
Atribúty | 
Konštruktory | 
Metódy
Podrobnosti: 
Atribúty | 
Konštruktory | 
Metódy
